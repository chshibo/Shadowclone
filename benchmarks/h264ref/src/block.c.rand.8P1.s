	.text
	.file	"block.c"
	.globl	intrapred_luma          # -- Begin function intrapred_luma
	.p2align	4, 0x90
	.type	intrapred_luma,@function
intrapred_luma:                         # @intrapred_luma
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%r8, %r14
	movq	%rcx, %r15
	movq	%rdx, %r12
	movl	%esi, %r13d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB0_9
# %bb.1:                                # %func_intrapred_luma.3
	movl	%ebx, %edi
	movl	%r13d, %esi
	movq	%r12, %rdx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	intrapred_luma.3
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_2:                                # %func_intrapred_luma.10
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movq	%r12, %rdx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	intrapred_luma.10
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_3:                                # %func_intrapred_luma.15
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movq	%r12, %rdx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	intrapred_luma.15
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_4:                                # %func_intrapred_luma.27
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movq	%r12, %rdx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	intrapred_luma.27
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_5:                                # %func_intrapred_luma.30
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movq	%r12, %rdx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	intrapred_luma.30
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_6:                                # %func_intrapred_luma.37
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movq	%r12, %rdx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	intrapred_luma.37
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_7:                                # %func_intrapred_luma.38
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movq	%r12, %rdx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	intrapred_luma.38
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_8:                                # %func_intrapred_luma.45
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movq	%r12, %rdx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	intrapred_luma.45
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB0_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB0_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB0_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB0_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB0_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB0_7
	jmp	.LBB0_8
.Lfunc_end0:
	.size	intrapred_luma, .Lfunc_end0-intrapred_luma
	.cfi_endproc
                                        # -- End function
	.globl	intrapred_luma_16x16    # -- Begin function intrapred_luma_16x16
	.p2align	4, 0x90
	.type	intrapred_luma_16x16,@function
intrapred_luma_16x16:                   # @intrapred_luma_16x16
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB1_9
# %bb.1:                                # %func_intrapred_luma_16x16.11
	callq	intrapred_luma_16x16.11
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_2:                                # %func_intrapred_luma_16x16.12
	.cfi_def_cfa %rbp, 16
	callq	intrapred_luma_16x16.12
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_3:                                # %func_intrapred_luma_16x16.18
	.cfi_def_cfa %rbp, 16
	callq	intrapred_luma_16x16.18
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_4:                                # %func_intrapred_luma_16x16.24
	.cfi_def_cfa %rbp, 16
	callq	intrapred_luma_16x16.24
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_5:                                # %func_intrapred_luma_16x16.28
	.cfi_def_cfa %rbp, 16
	callq	intrapred_luma_16x16.28
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_6:                                # %func_intrapred_luma_16x16.35
	.cfi_def_cfa %rbp, 16
	callq	intrapred_luma_16x16.35
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_7:                                # %func_intrapred_luma_16x16.47
	.cfi_def_cfa %rbp, 16
	callq	intrapred_luma_16x16.47
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_8:                                # %func_intrapred_luma_16x16.48
	.cfi_def_cfa %rbp, 16
	callq	intrapred_luma_16x16.48
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB1_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB1_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB1_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB1_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB1_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB1_7
	jmp	.LBB1_8
.Lfunc_end1:
	.size	intrapred_luma_16x16, .Lfunc_end1-intrapred_luma_16x16
	.cfi_endproc
                                        # -- End function
	.globl	dct_luma_16x16          # -- Begin function dct_luma_16x16
	.p2align	4, 0x90
	.type	dct_luma_16x16,@function
dct_luma_16x16:                         # @dct_luma_16x16
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB2_9
# %bb.1:                                # %func_dct_luma_16x16.41
	movl	%ebx, %edi
	callq	dct_luma_16x16.41
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_2:                                # %func_dct_luma_16x16.51
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	dct_luma_16x16.51
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_3:                                # %func_dct_luma_16x16.63
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	dct_luma_16x16.63
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_4:                                # %func_dct_luma_16x16.65
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	dct_luma_16x16.65
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_5:                                # %func_dct_luma_16x16.71
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	dct_luma_16x16.71
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_6:                                # %func_dct_luma_16x16.74
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	dct_luma_16x16.74
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_7:                                # %func_dct_luma_16x16.76
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	dct_luma_16x16.76
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_8:                                # %func_dct_luma_16x16.77
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	dct_luma_16x16.77
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB2_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB2_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB2_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB2_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB2_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB2_7
	jmp	.LBB2_8
.Lfunc_end2:
	.size	dct_luma_16x16, .Lfunc_end2-dct_luma_16x16
	.cfi_endproc
                                        # -- End function
	.globl	dct_luma                # -- Begin function dct_luma
	.p2align	4, 0x90
	.type	dct_luma,@function
dct_luma:                               # @dct_luma
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%ecx, %r14d
	movq	%rdx, %r15
	movl	%esi, %r12d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB3_9
# %bb.1:                                # %func_dct_luma.14
	movl	%ebx, %edi
	movl	%r12d, %esi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	dct_luma.14
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_2:                                # %func_dct_luma.39
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r12d, %esi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	dct_luma.39
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_3:                                # %func_dct_luma.50
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r12d, %esi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	dct_luma.50
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_4:                                # %func_dct_luma.55
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r12d, %esi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	dct_luma.55
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_5:                                # %func_dct_luma.57
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r12d, %esi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	dct_luma.57
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_6:                                # %func_dct_luma.58
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r12d, %esi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	dct_luma.58
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_7:                                # %func_dct_luma.68
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r12d, %esi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	dct_luma.68
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_8:                                # %func_dct_luma.72
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r12d, %esi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	dct_luma.72
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB3_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB3_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB3_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB3_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB3_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB3_7
	jmp	.LBB3_8
.Lfunc_end3:
	.size	dct_luma, .Lfunc_end3-dct_luma
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma              # -- Begin function dct_chroma
	.p2align	4, 0x90
	.type	dct_chroma,@function
dct_chroma:                             # @dct_chroma
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB4_9
# %bb.1:                                # %func_dct_chroma.6
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma.6
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_2:                                # %func_dct_chroma.19
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma.19
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_3:                                # %func_dct_chroma.26
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma.26
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_4:                                # %func_dct_chroma.32
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma.32
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_5:                                # %func_dct_chroma.53
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma.53
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_6:                                # %func_dct_chroma.70
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma.70
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_7:                                # %func_dct_chroma.75
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma.75
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_8:                                # %func_dct_chroma.80
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma.80
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB4_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB4_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB4_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB4_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB4_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB4_7
	jmp	.LBB4_8
.Lfunc_end4:
	.size	dct_chroma, .Lfunc_end4-dct_chroma
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma4x4           # -- Begin function dct_chroma4x4
	.p2align	4, 0x90
	.type	dct_chroma4x4,@function
dct_chroma4x4:                          # @dct_chroma4x4
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edx, %r14d
	movl	%esi, %r15d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB5_9
# %bb.1:                                # %func_dct_chroma4x4.2
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	dct_chroma4x4.2
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_2:                                # %func_dct_chroma4x4.13
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	dct_chroma4x4.13
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_3:                                # %func_dct_chroma4x4.31
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	dct_chroma4x4.31
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_4:                                # %func_dct_chroma4x4.34
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	dct_chroma4x4.34
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_5:                                # %func_dct_chroma4x4.36
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	dct_chroma4x4.36
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_6:                                # %func_dct_chroma4x4.52
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	dct_chroma4x4.52
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_7:                                # %func_dct_chroma4x4.61
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	dct_chroma4x4.61
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_8:                                # %func_dct_chroma4x4.62
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	dct_chroma4x4.62
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB5_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB5_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB5_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB5_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB5_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB5_7
	jmp	.LBB5_8
.Lfunc_end5:
	.size	dct_chroma4x4, .Lfunc_end5-dct_chroma4x4
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma_DC           # -- Begin function dct_chroma_DC
	.p2align	4, 0x90
	.type	dct_chroma_DC,@function
dct_chroma_DC:                          # @dct_chroma_DC
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB6_9
# %bb.1:                                # %func_dct_chroma_DC.1
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma_DC.1
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_2:                                # %func_dct_chroma_DC.4
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma_DC.4
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_3:                                # %func_dct_chroma_DC.20
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma_DC.20
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_4:                                # %func_dct_chroma_DC.23
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma_DC.23
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_5:                                # %func_dct_chroma_DC.29
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma_DC.29
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_6:                                # %func_dct_chroma_DC.42
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma_DC.42
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_7:                                # %func_dct_chroma_DC.46
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma_DC.46
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_8:                                # %func_dct_chroma_DC.54
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma_DC.54
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB6_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB6_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB6_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB6_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB6_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB6_7
	jmp	.LBB6_8
.Lfunc_end6:
	.size	dct_chroma_DC, .Lfunc_end6-dct_chroma_DC
	.cfi_endproc
                                        # -- End function
	.globl	dct_luma_sp             # -- Begin function dct_luma_sp
	.p2align	4, 0x90
	.type	dct_luma_sp,@function
dct_luma_sp:                            # @dct_luma_sp
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rdx, %r14
	movl	%esi, %r15d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB7_9
# %bb.1:                                # %func_dct_luma_sp.7
	movl	%ebx, %edi
	movl	%r15d, %esi
	movq	%r14, %rdx
	callq	dct_luma_sp.7
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_2:                                # %func_dct_luma_sp.8
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movq	%r14, %rdx
	callq	dct_luma_sp.8
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_3:                                # %func_dct_luma_sp.9
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movq	%r14, %rdx
	callq	dct_luma_sp.9
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_4:                                # %func_dct_luma_sp.16
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movq	%r14, %rdx
	callq	dct_luma_sp.16
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_5:                                # %func_dct_luma_sp.33
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movq	%r14, %rdx
	callq	dct_luma_sp.33
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_6:                                # %func_dct_luma_sp.40
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movq	%r14, %rdx
	callq	dct_luma_sp.40
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_7:                                # %func_dct_luma_sp.67
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movq	%r14, %rdx
	callq	dct_luma_sp.67
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_8:                                # %func_dct_luma_sp.78
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movq	%r14, %rdx
	callq	dct_luma_sp.78
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB7_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB7_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB7_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB7_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB7_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB7_7
	jmp	.LBB7_8
.Lfunc_end7:
	.size	dct_luma_sp, .Lfunc_end7-dct_luma_sp
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma_sp           # -- Begin function dct_chroma_sp
	.p2align	4, 0x90
	.type	dct_chroma_sp,@function
dct_chroma_sp:                          # @dct_chroma_sp
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB8_9
# %bb.1:                                # %func_dct_chroma_sp.5
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma_sp.5
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_2:                                # %func_dct_chroma_sp.43
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma_sp.43
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_3:                                # %func_dct_chroma_sp.56
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma_sp.56
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_4:                                # %func_dct_chroma_sp.59
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma_sp.59
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_5:                                # %func_dct_chroma_sp.60
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma_sp.60
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_6:                                # %func_dct_chroma_sp.66
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma_sp.66
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_7:                                # %func_dct_chroma_sp.73
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma_sp.73
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_8:                                # %func_dct_chroma_sp.79
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma_sp.79
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB8_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB8_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB8_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB8_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB8_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB8_7
	jmp	.LBB8_8
.Lfunc_end8:
	.size	dct_chroma_sp, .Lfunc_end8-dct_chroma_sp
	.cfi_endproc
                                        # -- End function
	.globl	copyblock_sp            # -- Begin function copyblock_sp
	.p2align	4, 0x90
	.type	copyblock_sp,@function
copyblock_sp:                           # @copyblock_sp
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB9_9
# %bb.1:                                # %func_copyblock_sp.17
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	copyblock_sp.17
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_2:                                # %func_copyblock_sp.21
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	copyblock_sp.21
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_3:                                # %func_copyblock_sp.22
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	copyblock_sp.22
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_4:                                # %func_copyblock_sp.25
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	copyblock_sp.25
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_5:                                # %func_copyblock_sp.44
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	copyblock_sp.44
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_6:                                # %func_copyblock_sp.49
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	copyblock_sp.49
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_7:                                # %func_copyblock_sp.64
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	copyblock_sp.64
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_8:                                # %func_copyblock_sp.69
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	copyblock_sp.69
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB9_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB9_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB9_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB9_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB9_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB9_7
	jmp	.LBB9_8
.Lfunc_end9:
	.size	copyblock_sp, .Lfunc_end9-copyblock_sp
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma_DC.1         # -- Begin function dct_chroma_DC.1
	.p2align	4, 0x90
	.type	dct_chroma_DC.1,@function
dct_chroma_DC.1:                        # @dct_chroma_DC.1
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$728083255, -44(%rbp)   # imm = 0x2B65AB37
	movl	%edi, -28(%rbp)
	movl	%esi, -24(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB10_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB10_9
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB10_1 Depth=1
	movslq	-12(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -36(%rbp)
	movslq	-12(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movslq	-28(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -40(%rbp)
	cmpl	$0, -40(%rbp)
	je	.LBB10_7
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB10_1 Depth=1
	movl	$1, %eax
	cmpl	-24(%rbp), %eax
	jle	.LBB10_5
# %bb.4:                                # %cond.true
                                        #   in Loop: Header=BB10_1 Depth=1
	movl	$1, %eax
	jmp	.LBB10_6
.LBB10_5:                               # %cond.false
                                        #   in Loop: Header=BB10_1 Depth=1
	movl	-24(%rbp), %eax
.LBB10_6:                               # %cond.end
                                        #   in Loop: Header=BB10_1 Depth=1
	movl	%eax, -24(%rbp)
	movl	-40(%rbp), %edi
	movslq	-28(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-56(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-20(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	$-1, -20(%rbp)
.LBB10_7:                               # %if.end
                                        #   in Loop: Header=BB10_1 Depth=1
	jmp	.LBB10_8
.LBB10_8:                               # %for.inc
                                        #   in Loop: Header=BB10_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB10_1
.LBB10_9:                               # %for.end
	movq	-56(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-24(%rbp), %ebx
	cmpl	$728083255, -44(%rbp)   # imm = 0x2B65AB37
	jne	.LBB10_11
.LBB10_10:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_11:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB10_10
.Lfunc_end10:
	.size	dct_chroma_DC.1, .Lfunc_end10-dct_chroma_DC.1
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma4x4.2         # -- Begin function dct_chroma4x4.2
	.p2align	4, 0x90
	.type	dct_chroma4x4.2,@function
dct_chroma4x4.2:                        # @dct_chroma4x4.2
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$365511732, -148(%rbp)  # imm = 0x15C94434
	movl	%edi, -28(%rbp)
	movl	%esi, -88(%rbp)
	movl	%edx, -108(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %cl
	je	.LBB11_3
# %bb.1:                                # %lor.lhs.false
	movq	-144(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %cl
	je	.LBB11_3
# %bb.2:                                # %lor.rhs
	movq	-144(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%cl
.LBB11_3:                               # %lor.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -80(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-88(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-108(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -160(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-88(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-108(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -168(%rbp)
	movq	img, %rcx
	movl	40(%rcx), %ecx
	movq	img, %rdx
	addl	72668(%rdx), %ecx
	cmpl	$0, %ecx
	jne	.LBB11_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%al
.LBB11_5:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movslq	-28(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	movl	%eax, -76(%rbp)
	cmpl	$0, -76(%rbp)
	jge	.LBB11_7
# %bb.6:                                # %cond.true
	movl	-76(%rbp), %eax
	jmp	.LBB11_8
.LBB11_7:                               # %cond.false
	movl	-76(%rbp), %eax
	subl	$0, %eax
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB11_8:                               # %cond.end
	movl	%eax, -76(%rbp)
	movl	-76(%rbp), %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-76(%rbp), %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -32(%rbp)
	movl	-24(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -36(%rbp)
	jne	.LBB11_18
# %bb.9:                                # %if.then
	movl	$0, -12(%rbp)
.LBB11_10:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_12 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB11_17
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB11_10 Depth=1
	movl	$0, -16(%rbp)
.LBB11_12:                              # %for.cond31
                                        #   Parent Loop BB11_10 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB11_15
# %bb.13:                               # %for.body34
                                        #   in Loop: Header=BB11_12 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-68(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-68(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-68(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB11_12 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB11_12
.LBB11_15:                              # %for.end
                                        #   in Loop: Header=BB11_10 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.16:                               # %for.inc90
                                        #   in Loop: Header=BB11_10 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB11_10
.LBB11_17:                              # %for.end92
	jmp	.LBB11_18
.LBB11_18:                              # %if.end
	cmpl	$0, -36(%rbp)
	jne	.LBB11_28
# %bb.19:                               # %if.then94
	movl	$0, -16(%rbp)
.LBB11_20:                              # %for.cond95
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_22 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB11_27
# %bb.21:                               # %for.body98
                                        #   in Loop: Header=BB11_20 Depth=1
	movl	$0, -12(%rbp)
.LBB11_22:                              # %for.cond99
                                        #   Parent Loop BB11_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB11_25
# %bb.23:                               # %for.body102
                                        #   in Loop: Header=BB11_22 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-72(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-72(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-72(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.24:                               # %for.inc130
                                        #   in Loop: Header=BB11_22 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB11_22
.LBB11_25:                              # %for.end132
                                        #   in Loop: Header=BB11_20 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.26:                               # %for.inc163
                                        #   in Loop: Header=BB11_20 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB11_20
.LBB11_27:                              # %for.end165
	jmp	.LBB11_28
.LBB11_28:                              # %if.end166
	movl	$0, -132(%rbp)
	movl	$-1, -104(%rbp)
	movl	$0, -92(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB11_30
# %bb.29:                               # %if.then168
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movl	%eax, -20(%rbp)
	jmp	.LBB11_34
.LBB11_30:                              # %if.else
	cmpl	$1, -80(%rbp)
	jne	.LBB11_32
# %bb.31:                               # %if.then174
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-28(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movl	-100(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB11_33
.LBB11_32:                              # %if.else193
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-28(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movl	-100(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
.LBB11_33:                              # %if.end213
	jmp	.LBB11_34
.LBB11_34:                              # %if.end214
	movl	-28(%rbp), %eax
	addl	$1, %eax
	shll	$2, %eax
	movl	-88(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -88(%rbp)
	movl	-20(%rbp), %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movl	%eax, %ecx
	movslq	-28(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level_temp, %rdi
	addq	%rax, %rdi
	movl	-88(%rbp), %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %esi
	shll	$1, %esi
	movl	-108(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-88(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %esi
	shll	$1, %esi
	movl	-108(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%ecx, (%rdi,%rax,4)
	cmpl	$0, -36(%rbp)
	je	.LBB11_36
# %bb.35:                               # %if.then237
	movl	-20(%rbp), %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB11_46
.LBB11_36:                              # %if.else245
	cmpl	$4, -24(%rbp)
	jge	.LBB11_41
# %bb.37:                               # %if.then248
	cmpl	$1, -80(%rbp)
	jne	.LBB11_39
# %bb.38:                               # %if.then251
	movl	-20(%rbp), %edi
	movslq	-28(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	$3, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	addl	%eax, %edi
	movl	$4, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB11_40
.LBB11_39:                              # %if.else270
	movl	-20(%rbp), %edi
	movslq	-28(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	$3, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	addl	%eax, %edi
	movl	$4, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
.LBB11_40:                              # %if.end290
	jmp	.LBB11_45
.LBB11_41:                              # %if.else291
	cmpl	$1, -80(%rbp)
	jne	.LBB11_43
# %bb.42:                               # %if.then294
	movl	-20(%rbp), %edi
	movslq	-28(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	-24(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB11_44
.LBB11_43:                              # %if.else311
	movl	-20(%rbp), %edi
	movslq	-28(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	-24(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
.LBB11_44:                              # %if.end328
	jmp	.LBB11_45
.LBB11_45:                              # %if.end329
	jmp	.LBB11_46
.LBB11_46:                              # %if.end330
	movl	$1, -96(%rbp)
.LBB11_47:                              # %for.cond331
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -96(%rbp)
	jge	.LBB11_75
# %bb.48:                               # %for.body334
                                        #   in Loop: Header=BB11_47 Depth=1
	movslq	-96(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-96(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movl	-104(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -104(%rbp)
	movl	$0, -84(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB11_50
# %bb.49:                               # %if.then345
                                        #   in Loop: Header=BB11_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -20(%rbp)
	jmp	.LBB11_54
.LBB11_50:                              # %if.else352
                                        #   in Loop: Header=BB11_47 Depth=1
	cmpl	$1, -80(%rbp)
	jne	.LBB11_52
# %bb.51:                               # %if.then355
                                        #   in Loop: Header=BB11_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-28(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-100(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB11_53
.LBB11_52:                              # %if.else381
                                        #   in Loop: Header=BB11_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-28(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-100(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
.LBB11_53:                              # %if.end407
                                        #   in Loop: Header=BB11_47 Depth=1
	jmp	.LBB11_54
.LBB11_54:                              # %if.end408
                                        #   in Loop: Header=BB11_47 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB11_71
# %bb.55:                               # %if.then411
                                        #   in Loop: Header=BB11_47 Depth=1
	cmpl	$0, -16(%rbp)
	jne	.LBB11_57
# %bb.56:                               # %lor.lhs.false413
                                        #   in Loop: Header=BB11_47 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB11_58
.LBB11_57:                              # %if.then415
                                        #   in Loop: Header=BB11_47 Depth=1
	movl	$1, -132(%rbp)
.LBB11_58:                              # %if.end416
                                        #   in Loop: Header=BB11_47 Depth=1
	movl	-20(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-160(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-104(%rbp), %eax
	movq	-168(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	movl	$-1, -104(%rbp)
	movl	-20(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -20(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB11_60
# %bb.59:                               # %if.then435
                                        #   in Loop: Header=BB11_47 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB11_70
.LBB11_60:                              # %if.else436
                                        #   in Loop: Header=BB11_47 Depth=1
	cmpl	$4, -24(%rbp)
	jge	.LBB11_65
# %bb.61:                               # %if.then439
                                        #   in Loop: Header=BB11_47 Depth=1
	cmpl	$1, -80(%rbp)
	jne	.LBB11_63
# %bb.62:                               # %if.then442
                                        #   in Loop: Header=BB11_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB11_64
.LBB11_63:                              # %if.else457
                                        #   in Loop: Header=BB11_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -84(%rbp)
.LBB11_64:                              # %if.end472
                                        #   in Loop: Header=BB11_47 Depth=1
	jmp	.LBB11_69
.LBB11_65:                              # %if.else473
                                        #   in Loop: Header=BB11_47 Depth=1
	cmpl	$1, -80(%rbp)
	jne	.LBB11_67
# %bb.66:                               # %if.then476
                                        #   in Loop: Header=BB11_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-24(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB11_68
.LBB11_67:                              # %if.else488
                                        #   in Loop: Header=BB11_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-24(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -84(%rbp)
.LBB11_68:                              # %if.end500
                                        #   in Loop: Header=BB11_47 Depth=1
	jmp	.LBB11_69
.LBB11_69:                              # %if.end501
                                        #   in Loop: Header=BB11_47 Depth=1
	jmp	.LBB11_70
.LBB11_70:                              # %if.end502
                                        #   in Loop: Header=BB11_47 Depth=1
	jmp	.LBB11_71
.LBB11_71:                              # %if.end503
                                        #   in Loop: Header=BB11_47 Depth=1
	cmpl	$0, -36(%rbp)
	jne	.LBB11_73
# %bb.72:                               # %if.then505
                                        #   in Loop: Header=BB11_47 Depth=1
	movl	-84(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB11_73:                              # %if.end511
                                        #   in Loop: Header=BB11_47 Depth=1
	jmp	.LBB11_74
.LBB11_74:                              # %for.inc512
                                        #   in Loop: Header=BB11_47 Depth=1
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB11_47
.LBB11_75:                              # %for.end514
	movq	-160(%rbp), %rax
	movslq	-92(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	cmpl	$0, -36(%rbp)
	jne	.LBB11_89
# %bb.76:                               # %if.then518
	movl	$0, -12(%rbp)
.LBB11_77:                              # %for.cond519
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_79 Depth 2
                                        #     Child Loop BB11_83 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB11_88
# %bb.78:                               # %for.body522
                                        #   in Loop: Header=BB11_77 Depth=1
	movl	$0, -16(%rbp)
.LBB11_79:                              # %for.cond523
                                        #   Parent Loop BB11_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB11_82
# %bb.80:                               # %for.body526
                                        #   in Loop: Header=BB11_79 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.81:                               # %for.inc534
                                        #   in Loop: Header=BB11_79 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB11_79
.LBB11_82:                              # %for.end536
                                        #   in Loop: Header=BB11_77 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -16(%rbp)
.LBB11_83:                              # %for.cond555
                                        #   Parent Loop BB11_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB11_86
# %bb.84:                               # %for.body558
                                        #   in Loop: Header=BB11_83 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -68(%rbp)
	movslq	-16(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-68(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.85:                               # %for.inc580
                                        #   in Loop: Header=BB11_83 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB11_83
.LBB11_86:                              # %for.end582
                                        #   in Loop: Header=BB11_77 Depth=1
	jmp	.LBB11_87
.LBB11_87:                              # %for.inc583
                                        #   in Loop: Header=BB11_77 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB11_77
.LBB11_88:                              # %for.end585
	jmp	.LBB11_89
.LBB11_89:                              # %if.end586
	cmpl	$0, -36(%rbp)
	jne	.LBB11_103
# %bb.90:                               # %if.then588
	movl	$0, -16(%rbp)
.LBB11_91:                              # %for.cond589
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_93 Depth 2
                                        #     Child Loop BB11_97 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB11_102
# %bb.92:                               # %for.body592
                                        #   in Loop: Header=BB11_91 Depth=1
	movl	$0, -12(%rbp)
.LBB11_93:                              # %for.cond593
                                        #   Parent Loop BB11_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB11_96
# %bb.94:                               # %for.body596
                                        #   in Loop: Header=BB11_93 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.95:                               # %for.inc604
                                        #   in Loop: Header=BB11_93 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB11_93
.LBB11_96:                              # %for.end606
                                        #   in Loop: Header=BB11_91 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -12(%rbp)
.LBB11_97:                              # %for.cond625
                                        #   Parent Loop BB11_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB11_100
# %bb.98:                               # %for.body628
                                        #   in Loop: Header=BB11_97 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movslq	-12(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.99:                               # %for.inc654
                                        #   in Loop: Header=BB11_97 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB11_97
.LBB11_100:                             # %for.end656
                                        #   in Loop: Header=BB11_91 Depth=1
	jmp	.LBB11_101
.LBB11_101:                             # %for.inc657
                                        #   in Loop: Header=BB11_91 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB11_91
.LBB11_102:                             # %for.end659
	jmp	.LBB11_103
.LBB11_103:                             # %if.end660
	movl	-132(%rbp), %ebx
	cmpl	$365511732, -148(%rbp)  # imm = 0x15C94434
	jne	.LBB11_105
.LBB11_104:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_105:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB11_104
.Lfunc_end11:
	.size	dct_chroma4x4.2, .Lfunc_end11-dct_chroma4x4.2
	.cfi_endproc
                                        # -- End function
	.globl	intrapred_luma.3        # -- Begin function intrapred_luma.3
	.p2align	4, 0x90
	.type	intrapred_luma.3,@function
intrapred_luma.3:                       # @intrapred_luma.3
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$320, %rsp              # imm = 0x140
	movl	$1774766500, -172(%rbp) # imm = 0x69C8C9A4
	movl	%edi, -112(%rbp)
	movl	%esi, -116(%rbp)
	movq	%rdx, -208(%rbp)
	movq	%rcx, -216(%rbp)
	movq	%r8, -224(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	-112(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -88(%rbp)
	movl	-116(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -104(%rbp)
	movl	$0, -4(%rbp)
.LBB12_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB12_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB12_1 Depth=1
	movl	-104(%rbp), %edi
	movl	-88(%rbp), %esi
	subl	$1, %esi
	movl	-84(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-320(%rbp), %r8
	addq	%rax, %r8
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB12_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_1
.LBB12_4:                               # %for.end
	movl	-104(%rbp), %edi
	movl	-88(%rbp), %esi
	movl	-84(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-168(%rbp), %r8
	callq	getNeighbour
	movl	-104(%rbp), %edi
	movl	-88(%rbp), %esi
	addl	$4, %esi
	movl	-84(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-144(%rbp), %r8
	callq	getNeighbour
	movl	-104(%rbp), %edi
	movl	-88(%rbp), %esi
	subl	$1, %esi
	movl	-84(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-200(%rbp), %r8
	callq	getNeighbour
	xorl	%eax, %eax
	cmpl	$0, -144(%rbp)
	je	.LBB12_11
# %bb.5:                                # %land.rhs
	cmpl	$4, -88(%rbp)
	je	.LBB12_7
# %bb.6:                                # %lor.lhs.false
	xorl	%eax, %eax
	cmpl	$12, -88(%rbp)
	jne	.LBB12_10
.LBB12_7:                               # %land.rhs10
	cmpl	$4, -84(%rbp)
	movb	$1, %al
	je	.LBB12_9
# %bb.8:                                # %lor.rhs
	cmpl	$12, -84(%rbp)
	sete	%al
.LBB12_9:                               # %lor.end
.LBB12_10:                              # %land.end
	xorb	$-1, %al
.LBB12_11:                              # %land.end13
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -144(%rbp)
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB12_29
# %bb.12:                               # %if.then
	movl	$0, -4(%rbp)
	movl	$1, -68(%rbp)
.LBB12_13:                              # %for.cond16
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB12_19
# %bb.14:                               # %for.body18
                                        #   in Loop: Header=BB12_13 Depth=1
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB12_16
# %bb.15:                               # %cond.true
                                        #   in Loop: Header=BB12_13 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB12_17
.LBB12_16:                              # %cond.false
                                        #   in Loop: Header=BB12_13 Depth=1
	xorl	%eax, %eax
	jmp	.LBB12_17
.LBB12_17:                              # %cond.end
                                        #   in Loop: Header=BB12_13 Depth=1
	andl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.18:                               # %for.inc28
                                        #   in Loop: Header=BB12_13 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_13
.LBB12_19:                              # %for.end30
	cmpl	$0, -168(%rbp)
	je	.LBB12_21
# %bb.20:                               # %cond.true33
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-164(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB12_22
.LBB12_21:                              # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB12_22
.LBB12_22:                              # %cond.end39
	movl	%eax, -72(%rbp)
	cmpl	$0, -144(%rbp)
	je	.LBB12_24
# %bb.23:                               # %cond.true43
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-140(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB12_25
.LBB12_24:                              # %cond.false48
	xorl	%eax, %eax
	jmp	.LBB12_25
.LBB12_25:                              # %cond.end49
	movl	%eax, -108(%rbp)
	cmpl	$0, -200(%rbp)
	je	.LBB12_27
# %bb.26:                               # %cond.true53
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-196(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB12_28
.LBB12_27:                              # %cond.false58
	xorl	%eax, %eax
	jmp	.LBB12_28
.LBB12_28:                              # %cond.end59
	movl	%eax, -100(%rbp)
	jmp	.LBB12_30
.LBB12_29:                              # %if.else
	movl	-320(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-168(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-144(%rbp), %eax
	movl	%eax, -108(%rbp)
	movl	-200(%rbp), %eax
	movl	%eax, -100(%rbp)
.LBB12_30:                              # %if.end
	xorl	%eax, %eax
	movl	-68(%rbp), %ecx
	movq	-208(%rbp), %rdx
	movl	%ecx, (%rdx)
	movl	-72(%rbp), %ecx
	movq	-216(%rbp), %rdx
	movl	%ecx, (%rdx)
	cmpl	$0, -72(%rbp)
	je	.LBB12_33
# %bb.31:                               # %land.lhs.true
	xorl	%eax, %eax
	cmpl	$0, -68(%rbp)
	je	.LBB12_33
# %bb.32:                               # %land.rhs68
	cmpl	$0, -100(%rbp)
	setne	%al
.LBB12_33:                              # %land.end70
	andb	$1, %al
	movzbl	%al, %eax
	movq	-224(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-112(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -4(%rbp)
	movl	-116(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -92(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB12_35
# %bb.34:                               # %if.then75
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -60(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -56(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -52(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB12_36
.LBB12_35:                              # %if.else109
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -48(%rbp)
	movl	%eax, -52(%rbp)
	movl	%eax, -56(%rbp)
	movl	%eax, -60(%rbp)
.LBB12_36:                              # %if.end114
	cmpl	$0, -108(%rbp)
	je	.LBB12_38
# %bb.37:                               # %if.then116
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -44(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -40(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -36(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB12_39
.LBB12_38:                              # %if.else153
	movl	-48(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	%eax, -36(%rbp)
	movl	%eax, -40(%rbp)
	movl	%eax, -44(%rbp)
.LBB12_39:                              # %if.end159
	cmpl	$0, -68(%rbp)
	je	.LBB12_41
# %bb.40:                               # %if.then161
	movq	-80(%rbp), %rax
	movslq	-300(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-304(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -28(%rbp)
	movq	-80(%rbp), %rax
	movslq	-276(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-280(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-80(%rbp), %rax
	movslq	-252(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-256(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-80(%rbp), %rax
	movslq	-228(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-232(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB12_42
.LBB12_41:                              # %if.else202
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -16(%rbp)
	movl	%eax, -20(%rbp)
	movl	%eax, -24(%rbp)
	movl	%eax, -28(%rbp)
.LBB12_42:                              # %if.end208
	cmpl	$0, -100(%rbp)
	je	.LBB12_44
# %bb.43:                               # %if.then210
	movq	-80(%rbp), %rax
	movslq	-180(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-184(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB12_45
.LBB12_44:                              # %if.else219
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -64(%rbp)
.LBB12_45:                              # %if.end222
	movl	$0, -4(%rbp)
.LBB12_46:                              # %for.cond223
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$9, -4(%rbp)
	jge	.LBB12_49
# %bb.47:                               # %for.body226
                                        #   in Loop: Header=BB12_46 Depth=1
	movq	img, %rax
	addq	$184, %rax
	movslq	-4(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movw	$-1, (%rax)
# %bb.48:                               # %for.inc231
                                        #   in Loop: Header=BB12_46 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_46
.LBB12_49:                              # %for.end233
	movl	$0, -96(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB12_52
# %bb.50:                               # %land.lhs.true235
	cmpl	$0, -68(%rbp)
	je	.LBB12_52
# %bb.51:                               # %if.then237
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$4, %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	movl	%eax, -96(%rbp)
	jmp	.LBB12_61
.LBB12_52:                              # %if.else254
	cmpl	$0, -72(%rbp)
	jne	.LBB12_55
# %bb.53:                               # %land.lhs.true256
	cmpl	$0, -68(%rbp)
	je	.LBB12_55
# %bb.54:                               # %if.then258
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -96(%rbp)
	jmp	.LBB12_60
.LBB12_55:                              # %if.else268
	cmpl	$0, -72(%rbp)
	je	.LBB12_58
# %bb.56:                               # %land.lhs.true270
	cmpl	$0, -68(%rbp)
	jne	.LBB12_58
# %bb.57:                               # %if.then272
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -96(%rbp)
	jmp	.LBB12_59
.LBB12_58:                              # %if.else282
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -96(%rbp)
.LBB12_59:                              # %if.end284
	jmp	.LBB12_60
.LBB12_60:                              # %if.end285
	jmp	.LBB12_61
.LBB12_61:                              # %if.end286
	movl	$0, -92(%rbp)
.LBB12_62:                              # %for.cond287
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_64 Depth 2
	cmpl	$4, -92(%rbp)
	jge	.LBB12_69
# %bb.63:                               # %for.body290
                                        #   in Loop: Header=BB12_62 Depth=1
	movl	$0, -4(%rbp)
.LBB12_64:                              # %for.cond291
                                        #   Parent Loop BB12_62 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB12_67
# %bb.65:                               # %for.body294
                                        #   in Loop: Header=BB12_64 Depth=2
	movl	-96(%rbp), %eax
	movq	img, %rcx
	addq	$184, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-92(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.66:                               # %for.inc302
                                        #   in Loop: Header=BB12_64 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_64
.LBB12_67:                              # %for.end304
                                        #   in Loop: Header=BB12_62 Depth=1
	jmp	.LBB12_68
.LBB12_68:                              # %for.inc305
                                        #   in Loop: Header=BB12_62 Depth=1
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB12_62
.LBB12_69:                              # %for.end307
	movl	$0, -4(%rbp)
.LBB12_70:                              # %for.cond308
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB12_73
# %bb.71:                               # %for.body311
                                        #   in Loop: Header=BB12_70 Depth=1
	movslq	-4(%rbp), %rax
	movl	-60(%rbp,%rax,4), %eax
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 280(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 248(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 216(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 184(%rcx,%rdx,2)
	movslq	-4(%rbp), %rax
	movl	-28(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 6(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 4(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, (%rcx)
# %bb.72:                               # %for.inc360
                                        #   in Loop: Header=BB12_70 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_70
.LBB12_73:                              # %for.end362
	cmpl	$0, -72(%rbp)
	jne	.LBB12_75
# %bb.74:                               # %if.then364
	movq	img, %rax
	movw	$-1, 184(%rax)
.LBB12_75:                              # %if.end369
	cmpl	$0, -68(%rbp)
	jne	.LBB12_77
# %bb.76:                               # %if.then371
	movq	img, %rax
	movw	$-1, 696(%rax)
.LBB12_77:                              # %if.end376
	cmpl	$0, -72(%rbp)
	je	.LBB12_79
# %bb.78:                               # %if.then378
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1720(%rdx)
	movl	-56(%rbp), %eax
	addl	-48(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1752(%rdx)
	movq	img, %rdx
	movw	%ax, 1722(%rdx)
	movl	-52(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	-48(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1784(%rdx)
	movq	img, %rdx
	movw	%ax, 1754(%rdx)
	movq	img, %rdx
	movw	%ax, 1724(%rdx)
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	-44(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1816(%rdx)
	movq	img, %rdx
	movw	%ax, 1786(%rdx)
	movq	img, %rdx
	movw	%ax, 1756(%rdx)
	movq	img, %rdx
	movw	%ax, 1726(%rdx)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	-40(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1818(%rdx)
	movq	img, %rdx
	movw	%ax, 1788(%rdx)
	movq	img, %rdx
	movw	%ax, 1758(%rdx)
	movl	-40(%rbp), %eax
	addl	-32(%rbp), %eax
	movl	-36(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1820(%rdx)
	movq	img, %rdx
	movw	%ax, 1790(%rdx)
	movl	-36(%rbp), %eax
	imull	$3, -32(%rbp), %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1822(%rdx)
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3768(%rdx)
	movl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3832(%rdx)
	movq	img, %rdx
	movw	%ax, 3770(%rdx)
	movl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3834(%rdx)
	movq	img, %rdx
	movw	%ax, 3772(%rdx)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3836(%rdx)
	movq	img, %rdx
	movw	%ax, 3774(%rdx)
	movl	-44(%rbp), %eax
	addl	-40(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3838(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3800(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3864(%rdx)
	movq	img, %rdx
	movw	%ax, 3802(%rdx)
	movl	-52(%rbp), %eax
	movl	-48(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-44(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3866(%rdx)
	movq	img, %rdx
	movw	%ax, 3804(%rdx)
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-40(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3868(%rdx)
	movq	img, %rdx
	movw	%ax, 3806(%rdx)
	movl	-44(%rbp), %eax
	movl	-40(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-36(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 3870(%rcx)
.LBB12_79:                              # %if.end642
	cmpl	$0, -68(%rbp)
	je	.LBB12_81
# %bb.80:                               # %if.then644
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rcx
	movw	%ax, 4280(%rcx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 4282(%rdx)
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 4312(%rdx)
	movq	img, %rdx
	movw	%ax, 4284(%rdx)
	movl	-24(%rbp), %eax
	movl	-20(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 4314(%rdx)
	movq	img, %rdx
	movw	%ax, 4286(%rdx)
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 4344(%rdx)
	movq	img, %rdx
	movw	%ax, 4316(%rdx)
	movl	-20(%rbp), %eax
	movl	-16(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 4346(%rcx)
	movq	img, %rcx
	movw	%ax, 4318(%rcx)
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movw	%ax, 4382(%rcx)
	movq	img, %rcx
	movw	%ax, 4380(%rcx)
	movq	img, %rcx
	movw	%ax, 4378(%rcx)
	movq	img, %rcx
	movw	%ax, 4350(%rcx)
	movq	img, %rcx
	movw	%ax, 4348(%rcx)
	movq	img, %rcx
	movw	%ax, 4376(%rcx)
.LBB12_81:                              # %if.end756
	cmpl	$0, -72(%rbp)
	je	.LBB12_85
# %bb.82:                               # %land.lhs.true758
	cmpl	$0, -68(%rbp)
	je	.LBB12_85
# %bb.83:                               # %land.lhs.true760
	cmpl	$0, -100(%rbp)
	je	.LBB12_85
# %bb.84:                               # %if.then762
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2328(%rdx)
	movl	-20(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-28(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2330(%rdx)
	movq	img, %rdx
	movw	%ax, 2296(%rdx)
	movl	-24(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-64(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2332(%rdx)
	movq	img, %rdx
	movw	%ax, 2298(%rdx)
	movq	img, %rdx
	movw	%ax, 2264(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2334(%rdx)
	movq	img, %rdx
	movw	%ax, 2300(%rdx)
	movq	img, %rdx
	movw	%ax, 2266(%rdx)
	movq	img, %rdx
	movw	%ax, 2232(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2302(%rdx)
	movq	img, %rdx
	movw	%ax, 2268(%rdx)
	movq	img, %rdx
	movw	%ax, 2234(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2270(%rdx)
	movq	img, %rdx
	movw	%ax, 2236(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2238(%rdx)
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2810(%rdx)
	movq	img, %rdx
	movw	%ax, 2744(%rdx)
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2812(%rdx)
	movq	img, %rdx
	movw	%ax, 2746(%rdx)
	movl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2814(%rdx)
	movq	img, %rdx
	movw	%ax, 2748(%rdx)
	movl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2750(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2842(%rdx)
	movq	img, %rdx
	movw	%ax, 2776(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2844(%rdx)
	movq	img, %rdx
	movw	%ax, 2778(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2846(%rdx)
	movq	img, %rdx
	movw	%ax, 2780(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2782(%rdx)
	movl	-64(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2808(%rdx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2840(%rdx)
	movl	-64(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3292(%rdx)
	movq	img, %rdx
	movw	%ax, 3256(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3294(%rdx)
	movq	img, %rdx
	movw	%ax, 3258(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3260(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3262(%rdx)
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3324(%rdx)
	movq	img, %rdx
	movw	%ax, 3288(%rdx)
	movl	-64(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3326(%rdx)
	movq	img, %rdx
	movw	%ax, 3290(%rdx)
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3356(%rdx)
	movq	img, %rdx
	movw	%ax, 3320(%rdx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3358(%rdx)
	movq	img, %rdx
	movw	%ax, 3322(%rdx)
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3352(%rdx)
	movl	-24(%rbp), %eax
	movl	-20(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 3354(%rcx)
.LBB12_85:                              # %if.end1174
	cmpl	$1774766500, -172(%rbp) # imm = 0x69C8C9A4
	jne	.LBB12_87
.LBB12_86:
	addq	$320, %rsp              # imm = 0x140
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_87:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB12_86
.Lfunc_end12:
	.size	intrapred_luma.3, .Lfunc_end12-intrapred_luma.3
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma_DC.4         # -- Begin function dct_chroma_DC.4
	.p2align	4, 0x90
	.type	dct_chroma_DC.4,@function
dct_chroma_DC.4:                        # @dct_chroma_DC.4
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$2028402642, -44(%rbp)  # imm = 0x78E6F7D2
	movl	%edi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB13_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB13_9
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB13_1 Depth=1
	movslq	-12(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -32(%rbp)
	movslq	-12(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -40(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-40(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -36(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB13_7
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB13_1 Depth=1
	movl	$1, %eax
	cmpl	-28(%rbp), %eax
	jle	.LBB13_5
# %bb.4:                                # %cond.true
                                        #   in Loop: Header=BB13_1 Depth=1
	movl	$1, %eax
	jmp	.LBB13_6
.LBB13_5:                               # %cond.false
                                        #   in Loop: Header=BB13_1 Depth=1
	movl	-28(%rbp), %eax
.LBB13_6:                               # %cond.end
                                        #   in Loop: Header=BB13_1 Depth=1
	movl	%eax, -28(%rbp)
	movl	-36(%rbp), %edi
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-40(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-56(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-20(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	$-1, -20(%rbp)
.LBB13_7:                               # %if.end
                                        #   in Loop: Header=BB13_1 Depth=1
	jmp	.LBB13_8
.LBB13_8:                               # %for.inc
                                        #   in Loop: Header=BB13_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB13_1
.LBB13_9:                               # %for.end
	movq	-56(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-28(%rbp), %ebx
	cmpl	$2028402642, -44(%rbp)  # imm = 0x78E6F7D2
	jne	.LBB13_11
.LBB13_10:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_11:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB13_10
.Lfunc_end13:
	.size	dct_chroma_DC.4, .Lfunc_end13-dct_chroma_DC.4
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function dct_chroma_sp.5
.LCPI14_0:
	.quad	4616189618054758400     # double 4
.LCPI14_1:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI14_2:
	.quad	4611686018427387904     # double 2
.LCPI14_3:
	.quad	4613937818241073152     # double 3
	.text
	.globl	dct_chroma_sp.5
	.p2align	4, 0x90
	.type	dct_chroma_sp.5,@function
dct_chroma_sp.5:                        # @dct_chroma_sp.5
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$552, %rsp              # imm = 0x228
	.cfi_offset %rbx, -24
	vmovsd	.LCPI14_2(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI14_3(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$344544511, -268(%rbp)  # imm = 0x148954FF
	movl	%edi, -112(%rbp)
	movl	%esi, -204(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -200(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -280(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -304(%rbp)
	movq	-200(%rbp), %rax
	movl	12(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI14_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI14_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmulsd	%xmm0, %xmm2, %xmm0
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -264(%rbp)
	movq	-200(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB14_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB14_6
.LBB14_2:                               # %cond.false
	movq	-200(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB14_4
# %bb.3:                                # %cond.true18
	movl	$51, %eax
	jmp	.LBB14_5
.LBB14_4:                               # %cond.false19
	movq	-200(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
.LBB14_5:                               # %cond.end
.LBB14_6:                               # %cond.end23
	movl	%eax, -148(%rbp)
	movq	-200(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB14_8
# %bb.7:                                # %cond.true29
	xorl	%eax, %eax
	jmp	.LBB14_12
.LBB14_8:                               # %cond.false30
	movq	-200(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB14_10
# %bb.9:                                # %cond.true36
	movl	$51, %eax
	jmp	.LBB14_11
.LBB14_10:                              # %cond.false37
	movq	-200(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
.LBB14_11:                              # %cond.end41
.LBB14_12:                              # %cond.end43
	movl	%eax, -212(%rbp)
	cmpl	$0, -148(%rbp)
	jge	.LBB14_14
# %bb.13:                               # %cond.true47
	movl	-148(%rbp), %eax
	jmp	.LBB14_15
.LBB14_14:                              # %cond.false48
	movslq	-148(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB14_15:                              # %cond.end52
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -116(%rbp)
	cmpl	$0, -148(%rbp)
	jge	.LBB14_17
# %bb.16:                               # %cond.true58
	movl	-148(%rbp), %eax
	jmp	.LBB14_18
.LBB14_17:                              # %cond.false59
	movslq	-148(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB14_18:                              # %cond.end63
	subl	$0, %eax
	cltd
	movl	$6, %esi
	idivl	%esi
	movl	%edx, -96(%rbp)
	movl	-116(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -208(%rbp)
	movl	-208(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	idivl	%esi
	movl	%eax, -216(%rbp)
	cmpl	$0, -212(%rbp)
	jge	.LBB14_20
# %bb.19:                               # %cond.true70
	movq	-200(%rbp), %rax
	movl	16(%rax), %eax
	jmp	.LBB14_21
.LBB14_20:                              # %cond.false72
	movslq	-212(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB14_21:                              # %cond.end76
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -232(%rbp)
	cmpl	$0, -212(%rbp)
	jge	.LBB14_23
# %bb.22:                               # %cond.true82
	movq	-200(%rbp), %rax
	movl	16(%rax), %eax
	jmp	.LBB14_24
.LBB14_23:                              # %cond.false84
	movslq	-212(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB14_24:                              # %cond.end88
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%edx, -108(%rbp)
	movl	-232(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -124(%rbp)
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -220(%rbp)
	movl	$0, -12(%rbp)
.LBB14_25:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_27 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB14_32
# %bb.26:                               # %for.body
                                        #   in Loop: Header=BB14_25 Depth=1
	movl	$0, -16(%rbp)
.LBB14_27:                              # %for.cond97
                                        #   Parent Loop BB14_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB14_30
# %bb.28:                               # %for.body100
                                        #   in Loop: Header=BB14_27 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.29:                               # %for.inc
                                        #   in Loop: Header=BB14_27 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_27
.LBB14_30:                              # %for.end
                                        #   in Loop: Header=BB14_25 Depth=1
	jmp	.LBB14_31
.LBB14_31:                              # %for.inc121
                                        #   in Loop: Header=BB14_25 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_25
.LBB14_32:                              # %for.end123
	movl	$0, -20(%rbp)
.LBB14_33:                              # %for.cond124
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_35 Depth 2
                                        #       Child Loop BB14_37 Depth 3
                                        #         Child Loop BB14_39 Depth 4
                                        #       Child Loop BB14_45 Depth 3
                                        #         Child Loop BB14_47 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB14_56
# %bb.34:                               # %for.body127
                                        #   in Loop: Header=BB14_33 Depth=1
	movl	$0, -24(%rbp)
.LBB14_35:                              # %for.cond128
                                        #   Parent Loop BB14_33 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB14_37 Depth 3
                                        #         Child Loop BB14_39 Depth 4
                                        #       Child Loop BB14_45 Depth 3
                                        #         Child Loop BB14_47 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB14_54
# %bb.36:                               # %for.body131
                                        #   in Loop: Header=BB14_35 Depth=2
	movl	$0, -12(%rbp)
.LBB14_37:                              # %for.cond132
                                        #   Parent Loop BB14_33 Depth=1
                                        #     Parent Loop BB14_35 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB14_39 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB14_44
# %bb.38:                               # %for.body135
                                        #   in Loop: Header=BB14_37 Depth=3
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$0, -16(%rbp)
.LBB14_39:                              # %for.cond137
                                        #   Parent Loop BB14_33 Depth=1
                                        #     Parent Loop BB14_35 Depth=2
                                        #       Parent Loop BB14_37 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB14_42
# %bb.40:                               # %for.body140
                                        #   in Loop: Header=BB14_39 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-56(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-88(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-56(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-56(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-88(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-56(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-88(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.41:                               # %for.inc172
                                        #   in Loop: Header=BB14_39 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_39
.LBB14_42:                              # %for.end174
                                        #   in Loop: Header=BB14_37 Depth=3
	movl	-80(%rbp), %eax
	addl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-56(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	subl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-56(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	shll	$1, %eax
	addl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-56(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	movl	-72(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-56(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.43:                               # %for.inc212
                                        #   in Loop: Header=BB14_37 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_37
.LBB14_44:                              # %for.end214
                                        #   in Loop: Header=BB14_35 Depth=2
	movl	$0, -16(%rbp)
.LBB14_45:                              # %for.cond215
                                        #   Parent Loop BB14_33 Depth=1
                                        #     Parent Loop BB14_35 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB14_47 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB14_52
# %bb.46:                               # %for.body218
                                        #   in Loop: Header=BB14_45 Depth=3
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	$0, -12(%rbp)
.LBB14_47:                              # %for.cond220
                                        #   Parent Loop BB14_33 Depth=1
                                        #     Parent Loop BB14_35 Depth=2
                                        #       Parent Loop BB14_45 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB14_50
# %bb.48:                               # %for.body223
                                        #   in Loop: Header=BB14_47 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-48(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-48(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-48(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-48(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.49:                               # %for.inc255
                                        #   in Loop: Header=BB14_47 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_47
.LBB14_50:                              # %for.end257
                                        #   in Loop: Header=BB14_45 Depth=3
	movl	-80(%rbp), %eax
	addl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-48(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	subl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-48(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	shll	$1, %eax
	addl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-48(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	movl	-72(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-48(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.51:                               # %for.inc296
                                        #   in Loop: Header=BB14_45 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_45
.LBB14_52:                              # %for.end298
                                        #   in Loop: Header=BB14_35 Depth=2
	jmp	.LBB14_53
.LBB14_53:                              # %for.inc299
                                        #   in Loop: Header=BB14_35 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB14_35
.LBB14_54:                              # %for.end301
                                        #   in Loop: Header=BB14_33 Depth=1
	jmp	.LBB14_55
.LBB14_55:                              # %for.inc302
                                        #   in Loop: Header=BB14_33 Depth=1
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB14_33
.LBB14_56:                              # %for.end304
	movl	$0, -20(%rbp)
.LBB14_57:                              # %for.cond305
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_59 Depth 2
                                        #       Child Loop BB14_61 Depth 3
                                        #         Child Loop BB14_63 Depth 4
                                        #       Child Loop BB14_69 Depth 3
                                        #         Child Loop BB14_71 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB14_80
# %bb.58:                               # %for.body308
                                        #   in Loop: Header=BB14_57 Depth=1
	movl	$0, -24(%rbp)
.LBB14_59:                              # %for.cond309
                                        #   Parent Loop BB14_57 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB14_61 Depth 3
                                        #         Child Loop BB14_63 Depth 4
                                        #       Child Loop BB14_69 Depth 3
                                        #         Child Loop BB14_71 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB14_78
# %bb.60:                               # %for.body312
                                        #   in Loop: Header=BB14_59 Depth=2
	movl	$0, -12(%rbp)
.LBB14_61:                              # %for.cond313
                                        #   Parent Loop BB14_57 Depth=1
                                        #     Parent Loop BB14_59 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB14_63 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB14_68
# %bb.62:                               # %for.body316
                                        #   in Loop: Header=BB14_61 Depth=3
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$0, -16(%rbp)
.LBB14_63:                              # %for.cond318
                                        #   Parent Loop BB14_57 Depth=1
                                        #     Parent Loop BB14_59 Depth=2
                                        #       Parent Loop BB14_61 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB14_66
# %bb.64:                               # %for.body321
                                        #   in Loop: Header=BB14_63 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
	movslq	%eax, %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-56(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movl	-88(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-56(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	movl	%ecx, -80(%rbp,%rdx,4)
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-56(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movl	-88(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-56(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-88(%rbp), %rax
	movl	%ecx, -80(%rbp,%rax,4)
# %bb.65:                               # %for.inc349
                                        #   in Loop: Header=BB14_63 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_63
.LBB14_66:                              # %for.end351
                                        #   in Loop: Header=BB14_61 Depth=3
	movl	-80(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	leaq	-560(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-56(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-80(%rbp), %ecx
	subl	-76(%rbp), %ecx
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-56(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	shll	$1, %ecx
	addl	-72(%rbp), %ecx
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-56(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-56(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.67:                               # %for.inc385
                                        #   in Loop: Header=BB14_61 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_61
.LBB14_68:                              # %for.end387
                                        #   in Loop: Header=BB14_59 Depth=2
	movl	$0, -16(%rbp)
.LBB14_69:                              # %for.cond388
                                        #   Parent Loop BB14_57 Depth=1
                                        #     Parent Loop BB14_59 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB14_71 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB14_76
# %bb.70:                               # %for.body391
                                        #   in Loop: Header=BB14_69 Depth=3
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	$0, -12(%rbp)
.LBB14_71:                              # %for.cond393
                                        #   Parent Loop BB14_57 Depth=1
                                        #     Parent Loop BB14_59 Depth=2
                                        #       Parent Loop BB14_69 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB14_74
# %bb.72:                               # %for.body396
                                        #   in Loop: Header=BB14_71 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-48(%rbp), %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-48(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-20(%rbp), %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-12(%rbp), %rdx
	movl	%ecx, -80(%rbp,%rdx,4)
	movslq	-48(%rbp), %rcx
	shlq	$5, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-48(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movl	-20(%rbp), %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-52(%rbp), %rax
	movl	%ecx, -80(%rbp,%rax,4)
# %bb.73:                               # %for.inc424
                                        #   in Loop: Header=BB14_71 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_71
.LBB14_74:                              # %for.end426
                                        #   in Loop: Header=BB14_69 Depth=3
	movl	-80(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	-48(%rbp), %rdx
	shlq	$5, %rdx
	leaq	-560(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-20(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-80(%rbp), %ecx
	subl	-76(%rbp), %ecx
	movslq	-48(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-20(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	shll	$1, %ecx
	addl	-72(%rbp), %ecx
	movslq	-48(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-20(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-48(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movl	-20(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.75:                               # %for.inc461
                                        #   in Loop: Header=BB14_69 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_69
.LBB14_76:                              # %for.end463
                                        #   in Loop: Header=BB14_59 Depth=2
	jmp	.LBB14_77
.LBB14_77:                              # %for.inc464
                                        #   in Loop: Header=BB14_59 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB14_59
.LBB14_78:                              # %for.end466
                                        #   in Loop: Header=BB14_57 Depth=1
	jmp	.LBB14_79
.LBB14_79:                              # %for.inc467
                                        #   in Loop: Header=BB14_57 Depth=1
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB14_57
.LBB14_80:                              # %for.end469
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -176(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -172(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -168(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -164(%rbp)
	movl	-560(%rbp), %eax
	addl	-432(%rbp), %eax
	addl	-544(%rbp), %eax
	addl	-416(%rbp), %eax
	movl	%eax, -256(%rbp)
	movl	-560(%rbp), %eax
	subl	-432(%rbp), %eax
	addl	-544(%rbp), %eax
	subl	-416(%rbp), %eax
	movl	%eax, -252(%rbp)
	movl	-560(%rbp), %eax
	addl	-432(%rbp), %eax
	subl	-544(%rbp), %eax
	subl	-416(%rbp), %eax
	movl	%eax, -248(%rbp)
	movl	-560(%rbp), %eax
	subl	-432(%rbp), %eax
	subl	-544(%rbp), %eax
	addl	-416(%rbp), %eax
	movl	%eax, -244(%rbp)
	movl	$-1, -60(%rbp)
	movl	$0, -92(%rbp)
	movl	$0, -32(%rbp)
.LBB14_81:                              # %for.cond582
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -32(%rbp)
	jge	.LBB14_120
# %bb.82:                               # %for.body585
                                        #   in Loop: Header=BB14_81 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -84(%rbp)
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-220(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-124(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	movl	-124(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	cltd
	idivl	(%rsi)
	movl	%eax, -44(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-44(%rbp), %edi
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -44(%rbp)
	movl	-44(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-216(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-208(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %eax
	movslq	-32(%rbp), %rcx
	subl	-256(%rbp,%rcx,4), %eax
	movl	%eax, -100(%rbp)
	movl	-100(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-216(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-208(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -40(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-40(%rbp), %eax
	je	.LBB14_98
# %bb.83:                               # %land.lhs.true
                                        #   in Loop: Header=BB14_81 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB14_98
# %bb.84:                               # %land.lhs.true640
                                        #   in Loop: Header=BB14_81 Depth=1
	cmpl	$0, -40(%rbp)
	je	.LBB14_98
# %bb.85:                               # %if.then
                                        #   in Loop: Header=BB14_81 Depth=1
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-28(%rbp), %edi
	movl	-44(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	subl	%eax, %ebx
	movslq	-32(%rbp), %rax
	subl	-256(%rbp,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	movl	-28(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-120(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_c2x2
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-184(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-120(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-40(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	subl	%eax, %ebx
	movslq	-32(%rbp), %rax
	subl	-256(%rbp,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp)
	movl	-40(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-120(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_c2x2
	vmovsd	-192(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-192(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-120(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp)
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-192(%rbp), %xmm0
	jne	.LBB14_90
	jp	.LBB14_90
# %bb.86:                               # %if.then685
                                        #   in Loop: Header=BB14_81 Depth=1
	movl	-28(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-40(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB14_88
# %bb.87:                               # %cond.true690
                                        #   in Loop: Header=BB14_81 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB14_89
.LBB14_88:                              # %cond.false691
                                        #   in Loop: Header=BB14_81 Depth=1
	movl	-40(%rbp), %eax
.LBB14_89:                              # %cond.end692
                                        #   in Loop: Header=BB14_81 Depth=1
	movl	%eax, -36(%rbp)
	jmp	.LBB14_94
.LBB14_90:                              # %if.else
                                        #   in Loop: Header=BB14_81 Depth=1
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-192(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB14_92
# %bb.91:                               # %if.then696
                                        #   in Loop: Header=BB14_81 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB14_93
.LBB14_92:                              # %if.else697
                                        #   in Loop: Header=BB14_81 Depth=1
	movl	-40(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB14_93:                              # %if.end
                                        #   in Loop: Header=BB14_81 Depth=1
	jmp	.LBB14_94
.LBB14_94:                              # %if.end698
                                        #   in Loop: Header=BB14_81 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB14_96
# %bb.95:                               # %cond.true701
                                        #   in Loop: Header=BB14_81 Depth=1
	movl	-44(%rbp), %eax
	jmp	.LBB14_97
.LBB14_96:                              # %cond.false702
                                        #   in Loop: Header=BB14_81 Depth=1
	movl	-100(%rbp), %eax
.LBB14_97:                              # %cond.end703
                                        #   in Loop: Header=BB14_81 Depth=1
	movl	%eax, -104(%rbp)
	jmp	.LBB14_108
.LBB14_98:                              # %if.else705
                                        #   in Loop: Header=BB14_81 Depth=1
	movl	-28(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jne	.LBB14_100
# %bb.99:                               # %if.then708
                                        #   in Loop: Header=BB14_81 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -104(%rbp)
	jmp	.LBB14_107
.LBB14_100:                             # %if.else709
                                        #   in Loop: Header=BB14_81 Depth=1
	cmpl	$0, -28(%rbp)
	jne	.LBB14_102
# %bb.101:                              # %cond.true712
                                        #   in Loop: Header=BB14_81 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB14_103
.LBB14_102:                             # %cond.false713
                                        #   in Loop: Header=BB14_81 Depth=1
	movl	-40(%rbp), %eax
.LBB14_103:                             # %cond.end714
                                        #   in Loop: Header=BB14_81 Depth=1
	movl	%eax, -36(%rbp)
	cmpl	$0, -28(%rbp)
	jne	.LBB14_105
# %bb.104:                              # %cond.true718
                                        #   in Loop: Header=BB14_81 Depth=1
	movl	-44(%rbp), %eax
	jmp	.LBB14_106
.LBB14_105:                             # %cond.false719
                                        #   in Loop: Header=BB14_81 Depth=1
	movl	-100(%rbp), %eax
.LBB14_106:                             # %cond.end720
                                        #   in Loop: Header=BB14_81 Depth=1
	movl	%eax, -104(%rbp)
.LBB14_107:                             # %if.end722
                                        #   in Loop: Header=BB14_81 Depth=1
	jmp	.LBB14_108
.LBB14_108:                             # %if.end723
                                        #   in Loop: Header=BB14_81 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB14_113
# %bb.109:                              # %land.lhs.true726
                                        #   in Loop: Header=BB14_81 Depth=1
	movq	img, %rax
	cmpl	$4, 40(%rax)
	jge	.LBB14_113
# %bb.110:                              # %if.then730
                                        #   in Loop: Header=BB14_81 Depth=1
	cmpl	$2063, -36(%rbp)        # imm = 0x80F
	jle	.LBB14_112
# %bb.111:                              # %if.then733
                                        #   in Loop: Header=BB14_81 Depth=1
	movl	$2063, -36(%rbp)        # imm = 0x80F
.LBB14_112:                             # %if.end734
                                        #   in Loop: Header=BB14_81 Depth=1
	jmp	.LBB14_113
.LBB14_113:                             # %if.end735
                                        #   in Loop: Header=BB14_81 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB14_118
# %bb.114:                              # %if.then738
                                        #   in Loop: Header=BB14_81 Depth=1
	movl	-112(%rbp), %ecx
	shll	$2, %ecx
                                        # kill: def $cl killed $ecx
	movl	$983040, %eax           # imm = 0xF0000
	shll	%cl, %eax
	cltq
	movq	-200(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-204(%rbp), %eax
	jle	.LBB14_116
# %bb.115:                              # %cond.true744
                                        #   in Loop: Header=BB14_81 Depth=1
	movl	$1, %eax
	jmp	.LBB14_117
.LBB14_116:                             # %cond.false745
                                        #   in Loop: Header=BB14_81 Depth=1
	movl	-204(%rbp), %eax
.LBB14_117:                             # %cond.end746
                                        #   in Loop: Header=BB14_81 Depth=1
	movl	%eax, -204(%rbp)
	movl	-36(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movq	-280(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-60(%rbp), %eax
	movq	-304(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	movl	$-1, -60(%rbp)
	movl	-36(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	movl	%eax, -84(%rbp)
.LBB14_118:                             # %if.end763
                                        #   in Loop: Header=BB14_81 Depth=1
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %eax
	addl	-84(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-84(%rbp), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-220(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-124(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-84(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-232(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.119:                              # %for.inc786
                                        #   in Loop: Header=BB14_81 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB14_81
.LBB14_120:                             # %for.end788
	movq	-280(%rbp), %rax
	movslq	-92(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13112(%rdx)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13368(%rdx)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13128(%rdx)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 13384(%rcx)
	movl	$0, -224(%rbp)
	movl	$0, -240(%rbp)
	movl	$0, -20(%rbp)
.LBB14_121:                             # %for.cond835
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_123 Depth 2
                                        #       Child Loop BB14_125 Depth 3
	cmpl	$4, -20(%rbp)
	jg	.LBB14_168
# %bb.122:                              # %for.body838
                                        #   in Loop: Header=BB14_121 Depth=1
	movl	$0, -24(%rbp)
.LBB14_123:                             # %for.cond839
                                        #   Parent Loop BB14_121 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB14_125 Depth 3
	cmpl	$4, -24(%rbp)
	jg	.LBB14_166
# %bb.124:                              # %for.body842
                                        #   in Loop: Header=BB14_123 Depth=2
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -236(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-236(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -288(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-236(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -296(%rbp)
	movl	$-1, -60(%rbp)
	movl	$0, -92(%rbp)
	movl	$1, -32(%rbp)
.LBB14_125:                             # %for.cond860
                                        #   Parent Loop BB14_121 Depth=1
                                        #     Parent Loop BB14_123 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -32(%rbp)
	jge	.LBB14_164
# %bb.126:                              # %for.body863
                                        #   in Loop: Header=BB14_125 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB14_129
# %bb.127:                              # %lor.lhs.false
                                        #   in Loop: Header=BB14_125 Depth=3
	cmpl	$0, mb_adaptive
	je	.LBB14_130
# %bb.128:                              # %land.lhs.true865
                                        #   in Loop: Header=BB14_125 Depth=3
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB14_130
.LBB14_129:                             # %if.then867
                                        #   in Loop: Header=BB14_125 Depth=3
	movslq	-32(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-32(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_131
.LBB14_130:                             # %if.else876
                                        #   in Loop: Header=BB14_125 Depth=3
	movslq	-32(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-32(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB14_131:                             # %if.end885
                                        #   in Loop: Header=BB14_125 Depth=3
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -84(%rbp)
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-220(%rbp), %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	cltd
	idivl	(%rsi,%rcx,4)
	movl	%eax, -44(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-44(%rbp), %edi
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -44(%rbp)
	movl	-44(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-216(%rbp), %eax
	movl	-208(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	subl	(%rdx,%rcx,4), %eax
	movl	%eax, -100(%rbp)
	movl	-100(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-216(%rbp), %eax
	movl	-208(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -40(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-40(%rbp), %eax
	je	.LBB14_147
# %bb.132:                              # %land.lhs.true962
                                        #   in Loop: Header=BB14_125 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB14_147
# %bb.133:                              # %land.lhs.true965
                                        #   in Loop: Header=BB14_125 Depth=3
	cmpl	$0, -40(%rbp)
	je	.LBB14_147
# %bb.134:                              # %if.then968
                                        #   in Loop: Header=BB14_125 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-28(%rbp), %edi
	movl	-44(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	movl	-28(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-120(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-184(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-120(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-40(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp)
	movl	-40(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-120(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-192(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-192(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-120(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp)
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-192(%rbp), %xmm0
	jne	.LBB14_139
	jp	.LBB14_139
# %bb.135:                              # %if.then1041
                                        #   in Loop: Header=BB14_125 Depth=3
	movl	-28(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-40(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB14_137
# %bb.136:                              # %cond.true1046
                                        #   in Loop: Header=BB14_125 Depth=3
	movl	-28(%rbp), %eax
	jmp	.LBB14_138
.LBB14_137:                             # %cond.false1047
                                        #   in Loop: Header=BB14_125 Depth=3
	movl	-40(%rbp), %eax
.LBB14_138:                             # %cond.end1048
                                        #   in Loop: Header=BB14_125 Depth=3
	movl	%eax, -36(%rbp)
	jmp	.LBB14_143
.LBB14_139:                             # %if.else1050
                                        #   in Loop: Header=BB14_125 Depth=3
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-192(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB14_141
# %bb.140:                              # %if.then1053
                                        #   in Loop: Header=BB14_125 Depth=3
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB14_142
.LBB14_141:                             # %if.else1054
                                        #   in Loop: Header=BB14_125 Depth=3
	movl	-40(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB14_142:                             # %if.end1055
                                        #   in Loop: Header=BB14_125 Depth=3
	jmp	.LBB14_143
.LBB14_143:                             # %if.end1056
                                        #   in Loop: Header=BB14_125 Depth=3
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB14_145
# %bb.144:                              # %cond.true1059
                                        #   in Loop: Header=BB14_125 Depth=3
	movl	-44(%rbp), %eax
	jmp	.LBB14_146
.LBB14_145:                             # %cond.false1060
                                        #   in Loop: Header=BB14_125 Depth=3
	movl	-100(%rbp), %eax
.LBB14_146:                             # %cond.end1061
                                        #   in Loop: Header=BB14_125 Depth=3
	movl	%eax, -104(%rbp)
	jmp	.LBB14_157
.LBB14_147:                             # %if.else1063
                                        #   in Loop: Header=BB14_125 Depth=3
	movl	-28(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jne	.LBB14_149
# %bb.148:                              # %if.then1066
                                        #   in Loop: Header=BB14_125 Depth=3
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -104(%rbp)
	jmp	.LBB14_156
.LBB14_149:                             # %if.else1067
                                        #   in Loop: Header=BB14_125 Depth=3
	cmpl	$0, -28(%rbp)
	jne	.LBB14_151
# %bb.150:                              # %cond.true1070
                                        #   in Loop: Header=BB14_125 Depth=3
	movl	-28(%rbp), %eax
	jmp	.LBB14_152
.LBB14_151:                             # %cond.false1071
                                        #   in Loop: Header=BB14_125 Depth=3
	movl	-40(%rbp), %eax
.LBB14_152:                             # %cond.end1072
                                        #   in Loop: Header=BB14_125 Depth=3
	movl	%eax, -36(%rbp)
	cmpl	$0, -28(%rbp)
	jne	.LBB14_154
# %bb.153:                              # %cond.true1076
                                        #   in Loop: Header=BB14_125 Depth=3
	movl	-44(%rbp), %eax
	jmp	.LBB14_155
.LBB14_154:                             # %cond.false1077
                                        #   in Loop: Header=BB14_125 Depth=3
	movl	-100(%rbp), %eax
.LBB14_155:                             # %cond.end1078
                                        #   in Loop: Header=BB14_125 Depth=3
	movl	%eax, -104(%rbp)
.LBB14_156:                             # %if.end1080
                                        #   in Loop: Header=BB14_125 Depth=3
	jmp	.LBB14_157
.LBB14_157:                             # %if.end1081
                                        #   in Loop: Header=BB14_125 Depth=3
	cmpl	$0, -36(%rbp)
	je	.LBB14_162
# %bb.158:                              # %if.then1084
                                        #   in Loop: Header=BB14_125 Depth=3
	movl	-112(%rbp), %ecx
	shll	$2, %ecx
	addl	$16, %ecx
	movl	-20(%rbp), %eax
	sarl	$1, %eax
	movl	-24(%rbp), %edx
	sarl	$2, %edx
	addl	%edx, %eax
	addl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-200(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	cmpl	$1, -36(%rbp)
	jle	.LBB14_160
# %bb.159:                              # %if.then1097
                                        #   in Loop: Header=BB14_125 Depth=3
	movl	-224(%rbp), %eax
	addl	$999999, %eax           # imm = 0xF423F
	movl	%eax, -224(%rbp)
	jmp	.LBB14_161
.LBB14_160:                             # %if.else1099
                                        #   in Loop: Header=BB14_125 Depth=3
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-60(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	-224(%rbp), %eax
	movl	%eax, -224(%rbp)
.LBB14_161:                             # %if.end1106
                                        #   in Loop: Header=BB14_125 Depth=3
	movl	$2, -240(%rbp)
	movl	-36(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movq	-288(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-60(%rbp), %eax
	movq	-296(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	movl	$-1, -60(%rbp)
	movl	-36(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	movl	%eax, -84(%rbp)
.LBB14_162:                             # %if.end1128
                                        #   in Loop: Header=BB14_125 Depth=3
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	addl	-84(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-84(%rbp), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-220(%rbp), %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-84(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-232(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.163:                              # %for.inc1162
                                        #   in Loop: Header=BB14_125 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB14_125
.LBB14_164:                             # %for.end1164
                                        #   in Loop: Header=BB14_123 Depth=2
	movq	-288(%rbp), %rax
	movslq	-92(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.165:                              # %for.inc1167
                                        #   in Loop: Header=BB14_123 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB14_123
.LBB14_166:                             # %for.end1169
                                        #   in Loop: Header=BB14_121 Depth=1
	jmp	.LBB14_167
.LBB14_167:                             # %for.inc1170
                                        #   in Loop: Header=BB14_121 Depth=1
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB14_121
.LBB14_168:                             # %for.end1172
	cmpl	$2, -240(%rbp)
	jne	.LBB14_170
# %bb.169:                              # %if.then1175
	movl	$2, -204(%rbp)
.LBB14_170:                             # %if.end1176
	movl	$0, -20(%rbp)
.LBB14_171:                             # %for.cond1177
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_173 Depth 2
                                        #       Child Loop BB14_175 Depth 3
                                        #         Child Loop BB14_177 Depth 4
                                        #         Child Loop BB14_181 Depth 4
                                        #       Child Loop BB14_187 Depth 3
                                        #         Child Loop BB14_189 Depth 4
                                        #         Child Loop BB14_193 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB14_220
# %bb.172:                              # %for.body1180
                                        #   in Loop: Header=BB14_171 Depth=1
	movl	$0, -24(%rbp)
.LBB14_173:                             # %for.cond1181
                                        #   Parent Loop BB14_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB14_175 Depth 3
                                        #         Child Loop BB14_177 Depth 4
                                        #         Child Loop BB14_181 Depth 4
                                        #       Child Loop BB14_187 Depth 3
                                        #         Child Loop BB14_189 Depth 4
                                        #         Child Loop BB14_193 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB14_218
# %bb.174:                              # %for.body1184
                                        #   in Loop: Header=BB14_173 Depth=2
	movl	$0, -12(%rbp)
.LBB14_175:                             # %for.cond1185
                                        #   Parent Loop BB14_171 Depth=1
                                        #     Parent Loop BB14_173 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB14_177 Depth 4
                                        #         Child Loop BB14_181 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB14_186
# %bb.176:                              # %for.body1188
                                        #   in Loop: Header=BB14_175 Depth=3
	movl	$0, -16(%rbp)
.LBB14_177:                             # %for.cond1189
                                        #   Parent Loop BB14_171 Depth=1
                                        #     Parent Loop BB14_173 Depth=2
                                        #       Parent Loop BB14_175 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB14_180
# %bb.178:                              # %for.body1192
                                        #   in Loop: Header=BB14_177 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.179:                              # %for.inc1202
                                        #   in Loop: Header=BB14_177 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_177
.LBB14_180:                             # %for.end1204
                                        #   in Loop: Header=BB14_175 Depth=3
	movl	-80(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-80(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-76(%rbp), %eax
	sarl	$1, %eax
	subl	-68(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-76(%rbp), %eax
	movl	-68(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -132(%rbp)
	movl	$0, -16(%rbp)
.LBB14_181:                             # %for.cond1223
                                        #   Parent Loop BB14_171 Depth=1
                                        #     Parent Loop BB14_173 Depth=2
                                        #       Parent Loop BB14_175 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB14_184
# %bb.182:                              # %for.body1226
                                        #   in Loop: Header=BB14_181 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -88(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-88(%rbp), %rcx
	addl	-144(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-88(%rbp), %rcx
	subl	-144(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-88(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.183:                              # %for.inc1252
                                        #   in Loop: Header=BB14_181 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_181
.LBB14_184:                             # %for.end1254
                                        #   in Loop: Header=BB14_175 Depth=3
	jmp	.LBB14_185
.LBB14_185:                             # %for.inc1255
                                        #   in Loop: Header=BB14_175 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_175
.LBB14_186:                             # %for.end1257
                                        #   in Loop: Header=BB14_173 Depth=2
	movl	$0, -16(%rbp)
.LBB14_187:                             # %for.cond1258
                                        #   Parent Loop BB14_171 Depth=1
                                        #     Parent Loop BB14_173 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB14_189 Depth 4
                                        #         Child Loop BB14_193 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB14_216
# %bb.188:                              # %for.body1261
                                        #   in Loop: Header=BB14_187 Depth=3
	movl	$0, -12(%rbp)
.LBB14_189:                             # %for.cond1262
                                        #   Parent Loop BB14_171 Depth=1
                                        #     Parent Loop BB14_173 Depth=2
                                        #       Parent Loop BB14_187 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB14_192
# %bb.190:                              # %for.body1265
                                        #   in Loop: Header=BB14_189 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.191:                              # %for.inc1275
                                        #   in Loop: Header=BB14_189 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_189
.LBB14_192:                             # %for.end1277
                                        #   in Loop: Header=BB14_187 Depth=3
	movl	-80(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-80(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-76(%rbp), %eax
	sarl	$1, %eax
	subl	-68(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-76(%rbp), %eax
	movl	-68(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -132(%rbp)
	movl	$0, -12(%rbp)
.LBB14_193:                             # %for.cond1296
                                        #   Parent Loop BB14_171 Depth=1
                                        #     Parent Loop BB14_173 Depth=2
                                        #       Parent Loop BB14_187 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB14_214
# %bb.194:                              # %for.body1299
                                        #   in Loop: Header=BB14_193 Depth=4
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movl	72688(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-144(%rbp,%rdx,4), %edx
	movslq	-52(%rbp), %rsi
	addl	-144(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB14_196
# %bb.195:                              # %cond.true1310
                                        #   in Loop: Header=BB14_193 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB14_197
.LBB14_196:                             # %cond.false1311
                                        #   in Loop: Header=BB14_193 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	addl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB14_197:                             # %cond.end1319
                                        #   in Loop: Header=BB14_193 Depth=4
	cmpl	%ecx, %eax
	jge	.LBB14_199
# %bb.198:                              # %cond.true1323
                                        #   in Loop: Header=BB14_193 Depth=4
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB14_203
.LBB14_199:                             # %cond.false1325
                                        #   in Loop: Header=BB14_193 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	addl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB14_201
# %bb.200:                              # %cond.true1335
                                        #   in Loop: Header=BB14_193 Depth=4
	xorl	%eax, %eax
	jmp	.LBB14_202
.LBB14_201:                             # %cond.false1336
                                        #   in Loop: Header=BB14_193 Depth=4
	movslq	-12(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	addl	-144(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB14_202:                             # %cond.end1344
                                        #   in Loop: Header=BB14_193 Depth=4
.LBB14_203:                             # %cond.end1346
                                        #   in Loop: Header=BB14_193 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movl	-20(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72688(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-144(%rbp,%rdx,4), %edx
	movslq	-52(%rbp), %rsi
	subl	-144(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB14_205
# %bb.204:                              # %cond.true1365
                                        #   in Loop: Header=BB14_193 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB14_206
.LBB14_205:                             # %cond.false1366
                                        #   in Loop: Header=BB14_193 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	subl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB14_206:                             # %cond.end1374
                                        #   in Loop: Header=BB14_193 Depth=4
	cmpl	%ecx, %eax
	jge	.LBB14_208
# %bb.207:                              # %cond.true1378
                                        #   in Loop: Header=BB14_193 Depth=4
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB14_212
.LBB14_208:                             # %cond.false1380
                                        #   in Loop: Header=BB14_193 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	subl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB14_210
# %bb.209:                              # %cond.true1390
                                        #   in Loop: Header=BB14_193 Depth=4
	xorl	%eax, %eax
	jmp	.LBB14_211
.LBB14_210:                             # %cond.false1391
                                        #   in Loop: Header=BB14_193 Depth=4
	movslq	-12(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	subl	-144(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB14_211:                             # %cond.end1399
                                        #   in Loop: Header=BB14_193 Depth=4
.LBB14_212:                             # %cond.end1401
                                        #   in Loop: Header=BB14_193 Depth=4
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.213:                              # %for.inc1410
                                        #   in Loop: Header=BB14_193 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_193
.LBB14_214:                             # %for.end1412
                                        #   in Loop: Header=BB14_187 Depth=3
	jmp	.LBB14_215
.LBB14_215:                             # %for.inc1413
                                        #   in Loop: Header=BB14_187 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_187
.LBB14_216:                             # %for.end1415
                                        #   in Loop: Header=BB14_173 Depth=2
	jmp	.LBB14_217
.LBB14_217:                             # %for.inc1416
                                        #   in Loop: Header=BB14_173 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB14_173
.LBB14_218:                             # %for.end1418
                                        #   in Loop: Header=BB14_171 Depth=1
	jmp	.LBB14_219
.LBB14_219:                             # %for.inc1419
                                        #   in Loop: Header=BB14_171 Depth=1
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB14_171
.LBB14_220:                             # %for.end1421
	movl	$0, -12(%rbp)
.LBB14_221:                             # %for.cond1422
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_223 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB14_228
# %bb.222:                              # %for.body1425
                                        #   in Loop: Header=BB14_221 Depth=1
	movl	$0, -16(%rbp)
.LBB14_223:                             # %for.cond1426
                                        #   Parent Loop BB14_221 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB14_226
# %bb.224:                              # %for.body1429
                                        #   in Loop: Header=BB14_223 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-112(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.225:                              # %for.inc1444
                                        #   in Loop: Header=BB14_223 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_223
.LBB14_226:                             # %for.end1446
                                        #   in Loop: Header=BB14_221 Depth=1
	jmp	.LBB14_227
.LBB14_227:                             # %for.inc1447
                                        #   in Loop: Header=BB14_221 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_221
.LBB14_228:                             # %for.end1449
	movl	-204(%rbp), %ebx
	cmpl	$344544511, -268(%rbp)  # imm = 0x148954FF
	jne	.LBB14_230
.LBB14_229:
	movl	%ebx, %eax
	addq	$552, %rsp              # imm = 0x228
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_230:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB14_229
.Lfunc_end14:
	.size	dct_chroma_sp.5, .Lfunc_end14-dct_chroma_sp.5
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma.6            # -- Begin function dct_chroma.6
	.p2align	4, 0x90
	.type	dct_chroma.6,@function
dct_chroma.6:                           # @dct_chroma.6
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$424, %rsp              # imm = 0x1A8
	.cfi_offset %rbx, -24
	movl	$698102124, -380(%rbp)  # imm = 0x299C316C
	movl	%edi, -20(%rbp)
	movl	%esi, -132(%rbp)
	movl	$0, -204(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -192(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -224(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -376(%rbp)
	movq	-192(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB15_3
# %bb.1:                                # %lor.lhs.false
	movq	-192(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB15_3
# %bb.2:                                # %lor.rhs
	movq	-192(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB15_3:                               # %lor.end
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -124(%rbp)
	movl	-20(%rbp), %esi
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	imull	%eax, %esi
	movl	%esi, -200(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern, %rax
	movq	%rax, -432(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+8, %rax
	movq	%rax, -424(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+16, %rax
	movq	%rax, -416(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+24, %rax
	movq	%rax, -408(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	movl	%eax, -140(%rbp)
	movl	$0, -104(%rbp)
	movl	$0, -136(%rbp)
	movl	$0, -208(%rbp)
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	cmpl	$0, %eax
	jne	.LBB15_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%cl
.LBB15_5:                               # %land.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -108(%rbp)
	movq	-192(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	img, %rdx
	movslq	-20(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	movl	%ecx, -128(%rbp)
	movl	-128(%rbp), %ecx
	movq	img, %rdx
	subl	72672(%rdx), %eax
	cmpl	%eax, %ecx
	jge	.LBB15_7
# %bb.6:                                # %cond.true
	xorl	%eax, %eax
	movq	img, %rcx
	subl	72672(%rcx), %eax
	jmp	.LBB15_11
.LBB15_7:                               # %cond.false
	cmpl	$51, -128(%rbp)
	jle	.LBB15_9
# %bb.8:                                # %cond.true24
	movl	$51, %eax
	jmp	.LBB15_10
.LBB15_9:                               # %cond.false25
	movl	-128(%rbp), %eax
.LBB15_10:                              # %cond.end
.LBB15_11:                              # %cond.end26
	movl	%eax, -128(%rbp)
	cmpl	$0, -128(%rbp)
	jge	.LBB15_13
# %bb.12:                               # %cond.true29
	movl	-128(%rbp), %eax
	jmp	.LBB15_14
.LBB15_13:                              # %cond.false30
	movl	-128(%rbp), %eax
	subl	$0, %eax
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB15_14:                              # %cond.end34
	movl	%eax, -128(%rbp)
	movl	-128(%rbp), %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movl	-128(%rbp), %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -76(%rbp)
	movl	-40(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -180(%rbp)
	movq	img, %rax
	cmpl	$2, 72700(%rax)
	jne	.LBB15_16
# %bb.15:                               # %if.then
	movl	-128(%rbp), %eax
	addl	$3, %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -104(%rbp)
	movl	-128(%rbp), %eax
	addl	$3, %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -136(%rbp)
	movl	-104(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -208(%rbp)
.LBB15_16:                              # %if.end
	movl	$0, -24(%rbp)
.LBB15_17:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_19 Depth 2
                                        #       Child Loop BB15_21 Depth 3
                                        #         Child Loop BB15_25 Depth 4
                                        #       Child Loop BB15_31 Depth 3
                                        #         Child Loop BB15_35 Depth 4
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB15_44
# %bb.18:                               # %for.body
                                        #   in Loop: Header=BB15_17 Depth=1
	movl	$0, -28(%rbp)
.LBB15_19:                              # %for.cond56
                                        #   Parent Loop BB15_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB15_21 Depth 3
                                        #         Child Loop BB15_25 Depth 4
                                        #       Child Loop BB15_31 Depth 3
                                        #         Child Loop BB15_35 Depth 4
	movl	-28(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB15_42
# %bb.20:                               # %for.body59
                                        #   in Loop: Header=BB15_19 Depth=2
	movl	$0, -12(%rbp)
.LBB15_21:                              # %for.cond60
                                        #   Parent Loop BB15_17 Depth=1
                                        #     Parent Loop BB15_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB15_25 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB15_23
# %bb.22:                               # %land.rhs63
                                        #   in Loop: Header=BB15_21 Depth=3
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB15_23:                              # %land.end64
                                        #   in Loop: Header=BB15_21 Depth=3
	testb	$1, %al
	jne	.LBB15_24
	jmp	.LBB15_30
.LBB15_24:                              # %for.body66
                                        #   in Loop: Header=BB15_21 Depth=3
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -148(%rbp)
	movl	$0, -16(%rbp)
.LBB15_25:                              # %for.cond68
                                        #   Parent Loop BB15_17 Depth=1
                                        #     Parent Loop BB15_19 Depth=2
                                        #       Parent Loop BB15_21 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB15_28
# %bb.26:                               # %for.body71
                                        #   in Loop: Header=BB15_25 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-148(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-120(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-148(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-120(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-120(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.27:                               # %for.inc
                                        #   in Loop: Header=BB15_25 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB15_25
.LBB15_28:                              # %for.end
                                        #   in Loop: Header=BB15_21 Depth=3
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-28(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.29:                               # %for.inc139
                                        #   in Loop: Header=BB15_21 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB15_21
.LBB15_30:                              # %for.end141
                                        #   in Loop: Header=BB15_19 Depth=2
	movl	$0, -16(%rbp)
.LBB15_31:                              # %for.cond142
                                        #   Parent Loop BB15_17 Depth=1
                                        #     Parent Loop BB15_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB15_35 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB15_33
# %bb.32:                               # %land.rhs145
                                        #   in Loop: Header=BB15_31 Depth=3
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB15_33:                              # %land.end148
                                        #   in Loop: Header=BB15_31 Depth=3
	testb	$1, %al
	jne	.LBB15_34
	jmp	.LBB15_40
.LBB15_34:                              # %for.body150
                                        #   in Loop: Header=BB15_31 Depth=3
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	$0, -12(%rbp)
.LBB15_35:                              # %for.cond152
                                        #   Parent Loop BB15_17 Depth=1
                                        #     Parent Loop BB15_19 Depth=2
                                        #       Parent Loop BB15_31 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB15_38
# %bb.36:                               # %for.body155
                                        #   in Loop: Header=BB15_35 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-68(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.37:                               # %for.inc187
                                        #   in Loop: Header=BB15_35 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB15_35
.LBB15_38:                              # %for.end189
                                        #   in Loop: Header=BB15_31 Depth=3
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.39:                               # %for.inc228
                                        #   in Loop: Header=BB15_31 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB15_31
.LBB15_40:                              # %for.end230
                                        #   in Loop: Header=BB15_19 Depth=2
	jmp	.LBB15_41
.LBB15_41:                              # %for.inc231
                                        #   in Loop: Header=BB15_19 Depth=2
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB15_19
.LBB15_42:                              # %for.end233
                                        #   in Loop: Header=BB15_17 Depth=1
	jmp	.LBB15_43
.LBB15_43:                              # %for.inc234
                                        #   in Loop: Header=BB15_17 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB15_17
.LBB15_44:                              # %for.end236
	cmpl	$1, -140(%rbp)
	jne	.LBB15_76
# %bb.45:                               # %if.then239
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -176(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -172(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -168(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -164(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -36(%rbp)
.LBB15_46:                              # %for.cond304
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -36(%rbp)
	jge	.LBB15_62
# %bb.47:                               # %for.body307
                                        #   in Loop: Header=BB15_46 Depth=1
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -144(%rbp)
	cmpl	$1, -124(%rbp)
	jne	.LBB15_49
# %bb.48:                               # %if.then311
                                        #   in Loop: Header=BB15_46 Depth=1
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB15_50
.LBB15_49:                              # %if.else
                                        #   in Loop: Header=BB15_46 Depth=1
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB15_50:                              # %if.end349
                                        #   in Loop: Header=BB15_46 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB15_55
# %bb.51:                               # %land.lhs.true
                                        #   in Loop: Header=BB15_46 Depth=1
	movq	img, %rax
	cmpl	$4, 40(%rax)
	jge	.LBB15_55
# %bb.52:                               # %if.then355
                                        #   in Loop: Header=BB15_46 Depth=1
	cmpl	$2063, -44(%rbp)        # imm = 0x80F
	jle	.LBB15_54
# %bb.53:                               # %if.then358
                                        #   in Loop: Header=BB15_46 Depth=1
	movl	$2063, -44(%rbp)        # imm = 0x80F
.LBB15_54:                              # %if.end359
                                        #   in Loop: Header=BB15_46 Depth=1
	jmp	.LBB15_55
.LBB15_55:                              # %if.end360
                                        #   in Loop: Header=BB15_46 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB15_60
# %bb.56:                               # %if.then363
                                        #   in Loop: Header=BB15_46 Depth=1
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
                                        # kill: def $cl killed $ecx
	movl	$983040, %eax           # imm = 0xF0000
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-132(%rbp), %eax
	jle	.LBB15_58
# %bb.57:                               # %cond.true369
                                        #   in Loop: Header=BB15_46 Depth=1
	movl	$1, %eax
	jmp	.LBB15_59
.LBB15_58:                              # %cond.false370
                                        #   in Loop: Header=BB15_46 Depth=1
	movl	-132(%rbp), %eax
.LBB15_59:                              # %cond.end371
                                        #   in Loop: Header=BB15_46 Depth=1
	movl	%eax, -132(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	$-1, -100(%rbp)
	movl	-44(%rbp), %edi
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %esi
	callq	sign
	movl	%eax, -144(%rbp)
.LBB15_60:                              # %if.end384
                                        #   in Loop: Header=BB15_46 Depth=1
	movl	-144(%rbp), %eax
	movslq	-36(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.61:                               # %for.inc387
                                        #   in Loop: Header=BB15_46 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB15_46
.LBB15_62:                              # %for.end389
	movq	-224(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -16(%rbp)
.LBB15_63:                              # %for.cond424
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB15_75
# %bb.64:                               # %for.body427
                                        #   in Loop: Header=BB15_63 Depth=1
	cmpl	$5, -40(%rbp)
	jge	.LBB15_69
# %bb.65:                               # %if.then430
                                        #   in Loop: Header=BB15_63 Depth=1
	cmpl	$1, -124(%rbp)
	jne	.LBB15_67
# %bb.66:                               # %if.then433
                                        #   in Loop: Header=BB15_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	$5, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	jmp	.LBB15_68
.LBB15_67:                              # %if.else447
                                        #   in Loop: Header=BB15_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	$5, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
.LBB15_68:                              # %if.end461
                                        #   in Loop: Header=BB15_63 Depth=1
	jmp	.LBB15_73
.LBB15_69:                              # %if.else462
                                        #   in Loop: Header=BB15_63 Depth=1
	cmpl	$1, -124(%rbp)
	jne	.LBB15_71
# %bb.70:                               # %if.then465
                                        #   in Loop: Header=BB15_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-40(%rbp), %ecx
	subl	$5, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	jmp	.LBB15_72
.LBB15_71:                              # %if.else479
                                        #   in Loop: Header=BB15_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-40(%rbp), %ecx
	subl	$5, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
.LBB15_72:                              # %if.end493
                                        #   in Loop: Header=BB15_63 Depth=1
	jmp	.LBB15_73
.LBB15_73:                              # %if.end494
                                        #   in Loop: Header=BB15_63 Depth=1
	jmp	.LBB15_74
.LBB15_74:                              # %for.inc495
                                        #   in Loop: Header=BB15_63 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB15_63
.LBB15_75:                              # %for.end497
	movl	-176(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	movl	-172(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13368(%rcx)
	movl	-168(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13128(%rcx)
	movl	-164(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13384(%rcx)
	jmp	.LBB15_213
.LBB15_76:                              # %if.else514
	cmpl	$2, -140(%rbp)
	jne	.LBB15_127
# %bb.77:                               # %if.then517
	movl	$0, -12(%rbp)
.LBB15_78:                              # %for.cond518
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_80 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB15_85
# %bb.79:                               # %for.body522
                                        #   in Loop: Header=BB15_78 Depth=1
	movl	$0, -16(%rbp)
.LBB15_80:                              # %for.cond523
                                        #   Parent Loop BB15_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB15_83
# %bb.81:                               # %for.body527
                                        #   in Loop: Header=BB15_80 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$4, %rcx
	leaq	-368(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.82:                               # %for.inc539
                                        #   in Loop: Header=BB15_80 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB15_80
.LBB15_83:                              # %for.end541
                                        #   in Loop: Header=BB15_78 Depth=1
	jmp	.LBB15_84
.LBB15_84:                              # %for.inc542
                                        #   in Loop: Header=BB15_78 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB15_78
.LBB15_85:                              # %for.end544
	movl	-368(%rbp), %eax
	addl	-352(%rbp), %eax
	movl	%eax, -304(%rbp)
	movl	-364(%rbp), %eax
	addl	-348(%rbp), %eax
	movl	%eax, -300(%rbp)
	movl	-360(%rbp), %eax
	addl	-344(%rbp), %eax
	movl	%eax, -296(%rbp)
	movl	-356(%rbp), %eax
	addl	-340(%rbp), %eax
	movl	%eax, -292(%rbp)
	movl	-368(%rbp), %eax
	subl	-352(%rbp), %eax
	movl	%eax, -288(%rbp)
	movl	-364(%rbp), %eax
	subl	-348(%rbp), %eax
	movl	%eax, -284(%rbp)
	movl	-360(%rbp), %eax
	subl	-344(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-356(%rbp), %eax
	subl	-340(%rbp), %eax
	movl	%eax, -276(%rbp)
	movl	$0, -16(%rbp)
.LBB15_86:                              # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_88 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB15_93
# %bb.87:                               # %for.body604
                                        #   in Loop: Header=BB15_86 Depth=1
	movl	$0, -12(%rbp)
.LBB15_88:                              # %for.cond605
                                        #   Parent Loop BB15_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB15_91
# %bb.89:                               # %for.body608
                                        #   in Loop: Header=BB15_88 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-32(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-32(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.90:                               # %for.inc632
                                        #   in Loop: Header=BB15_88 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB15_88
.LBB15_91:                              # %for.end634
                                        #   in Loop: Header=BB15_86 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, 8(%rsi)
	movl	-52(%rbp), %eax
	addl	-56(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-52(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movl	%eax, 12(%rdx)
# %bb.92:                               # %for.inc659
                                        #   in Loop: Header=BB15_86 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB15_86
.LBB15_93:                              # %for.end661
	movl	$-1, -100(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -36(%rbp)
.LBB15_94:                              # %for.cond662
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -36(%rbp)
	jge	.LBB15_105
# %bb.95:                               # %for.body665
                                        #   in Loop: Header=BB15_94 Depth=1
	movslq	-36(%rbp), %rax
	movzbl	SCAN_YUV422(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SCAN_YUV422+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	cmpl	$1, -124(%rbp)
	jne	.LBB15_97
# %bb.96:                               # %if.then677
                                        #   in Loop: Header=BB15_94 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-104(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-208(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB15_98
.LBB15_97:                              # %if.else700
                                        #   in Loop: Header=BB15_94 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-104(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-208(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB15_98:                              # %if.end723
                                        #   in Loop: Header=BB15_94 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB15_103
# %bb.99:                               # %if.then726
                                        #   in Loop: Header=BB15_94 Depth=1
	movl	-20(%rbp), %ecx
	shll	$3, %ecx
                                        # kill: def $cl killed $ecx
	movl	$16711680, %eax         # imm = 0xFF0000
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-132(%rbp), %eax
	jle	.LBB15_101
# %bb.100:                              # %cond.true734
                                        #   in Loop: Header=BB15_94 Depth=1
	movl	$1, %eax
	jmp	.LBB15_102
.LBB15_101:                             # %cond.false735
                                        #   in Loop: Header=BB15_94 Depth=1
	movl	-132(%rbp), %eax
.LBB15_102:                             # %cond.end736
                                        #   in Loop: Header=BB15_94 Depth=1
	movl	%eax, -132(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	$-1, -100(%rbp)
.LBB15_103:                             # %if.end748
                                        #   in Loop: Header=BB15_94 Depth=1
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-368(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.104:                              # %for.inc758
                                        #   in Loop: Header=BB15_94 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB15_94
.LBB15_105:                             # %for.end760
	movq	-224(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-368(%rbp), %eax
	addl	-352(%rbp), %eax
	movl	%eax, -304(%rbp)
	movl	-364(%rbp), %eax
	addl	-348(%rbp), %eax
	movl	%eax, -300(%rbp)
	movl	-360(%rbp), %eax
	addl	-344(%rbp), %eax
	movl	%eax, -296(%rbp)
	movl	-356(%rbp), %eax
	addl	-340(%rbp), %eax
	movl	%eax, -292(%rbp)
	movl	-368(%rbp), %eax
	subl	-352(%rbp), %eax
	movl	%eax, -288(%rbp)
	movl	-364(%rbp), %eax
	subl	-348(%rbp), %eax
	movl	%eax, -284(%rbp)
	movl	-360(%rbp), %eax
	subl	-344(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-356(%rbp), %eax
	subl	-340(%rbp), %eax
	movl	%eax, -276(%rbp)
	movl	$0, -16(%rbp)
.LBB15_106:                             # %for.cond819
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_108 Depth 2
                                        #     Child Loop BB15_112 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB15_126
# %bb.107:                              # %for.body822
                                        #   in Loop: Header=BB15_106 Depth=1
	movl	$0, -12(%rbp)
.LBB15_108:                             # %for.cond823
                                        #   Parent Loop BB15_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB15_111
# %bb.109:                              # %for.body826
                                        #   in Loop: Header=BB15_108 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.110:                              # %for.inc833
                                        #   in Loop: Header=BB15_108 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB15_108
.LBB15_111:                             # %for.end835
                                        #   in Loop: Header=BB15_106 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB15_112:                             # %for.cond852
                                        #   Parent Loop BB15_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB15_124
# %bb.113:                              # %for.body855
                                        #   in Loop: Header=BB15_112 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	cmpl	$4, -104(%rbp)
	jge	.LBB15_118
# %bb.114:                              # %if.then859
                                        #   in Loop: Header=BB15_112 Depth=2
	cmpl	$1, -124(%rbp)
	jne	.LBB15_116
# %bb.115:                              # %if.then862
                                        #   in Loop: Header=BB15_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-136(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-104(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-104(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
	jmp	.LBB15_117
.LBB15_116:                             # %if.else915
                                        #   in Loop: Header=BB15_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-136(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-104(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-104(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
.LBB15_117:                             # %if.end968
                                        #   in Loop: Header=BB15_112 Depth=2
	jmp	.LBB15_122
.LBB15_118:                             # %if.else969
                                        #   in Loop: Header=BB15_112 Depth=2
	cmpl	$1, -124(%rbp)
	jne	.LBB15_120
# %bb.119:                              # %if.then972
                                        #   in Loop: Header=BB15_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-104(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-104(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB15_121
.LBB15_120:                             # %if.else1019
                                        #   in Loop: Header=BB15_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-104(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-104(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB15_121:                             # %if.end1066
                                        #   in Loop: Header=BB15_112 Depth=2
	jmp	.LBB15_122
.LBB15_122:                             # %if.end1067
                                        #   in Loop: Header=BB15_112 Depth=2
	jmp	.LBB15_123
.LBB15_123:                             # %for.inc1068
                                        #   in Loop: Header=BB15_112 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB15_112
.LBB15_124:                             # %for.end1070
                                        #   in Loop: Header=BB15_106 Depth=1
	jmp	.LBB15_125
.LBB15_125:                             # %for.inc1071
                                        #   in Loop: Header=BB15_106 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB15_106
.LBB15_126:                             # %for.end1073
	jmp	.LBB15_212
.LBB15_127:                             # %if.else1074
	cmpl	$3, -140(%rbp)
	jne	.LBB15_211
# %bb.128:                              # %if.then1077
	movl	$0, -12(%rbp)
.LBB15_129:                             # %for.cond1078
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_131 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB15_136
# %bb.130:                              # %for.body1082
                                        #   in Loop: Header=BB15_129 Depth=1
	movl	$0, -16(%rbp)
.LBB15_131:                             # %for.cond1083
                                        #   Parent Loop BB15_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB15_134
# %bb.132:                              # %for.body1087
                                        #   in Loop: Header=BB15_131 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.133:                              # %for.inc1099
                                        #   in Loop: Header=BB15_131 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB15_131
.LBB15_134:                             # %for.end1101
                                        #   in Loop: Header=BB15_129 Depth=1
	jmp	.LBB15_135
.LBB15_135:                             # %for.inc1102
                                        #   in Loop: Header=BB15_129 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB15_129
.LBB15_136:                             # %for.end1104
	movl	$0, -12(%rbp)
.LBB15_137:                             # %for.cond1105
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_141 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB15_139
# %bb.138:                              # %land.rhs1108
                                        #   in Loop: Header=BB15_137 Depth=1
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB15_139:                             # %land.end1111
                                        #   in Loop: Header=BB15_137 Depth=1
	testb	$1, %al
	jne	.LBB15_140
	jmp	.LBB15_146
.LBB15_140:                             # %for.body1113
                                        #   in Loop: Header=BB15_137 Depth=1
	movl	$0, -16(%rbp)
.LBB15_141:                             # %for.cond1114
                                        #   Parent Loop BB15_137 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB15_144
# %bb.142:                              # %for.body1117
                                        #   in Loop: Header=BB15_141 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-120(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-120(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-120(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.143:                              # %for.inc1141
                                        #   in Loop: Header=BB15_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB15_141
.LBB15_144:                             # %for.end1143
                                        #   in Loop: Header=BB15_137 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -304(%rbp,%rcx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
	movl	-52(%rbp), %eax
	addl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -288(%rbp,%rcx,4)
	movl	-52(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -256(%rbp,%rcx,4)
# %bb.145:                              # %for.inc1168
                                        #   in Loop: Header=BB15_137 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB15_137
.LBB15_146:                             # %for.end1170
	movl	$0, -16(%rbp)
.LBB15_147:                             # %for.cond1171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_151 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB15_149
# %bb.148:                              # %land.rhs1174
                                        #   in Loop: Header=BB15_147 Depth=1
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB15_149:                             # %land.end1177
                                        #   in Loop: Header=BB15_147 Depth=1
	testb	$1, %al
	jne	.LBB15_150
	jmp	.LBB15_156
.LBB15_150:                             # %for.body1179
                                        #   in Loop: Header=BB15_147 Depth=1
	movl	$0, -12(%rbp)
.LBB15_151:                             # %for.cond1180
                                        #   Parent Loop BB15_147 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB15_154
# %bb.152:                              # %for.body1183
                                        #   in Loop: Header=BB15_151 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-32(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-32(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.153:                              # %for.inc1207
                                        #   in Loop: Header=BB15_151 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB15_151
.LBB15_154:                             # %for.end1209
                                        #   in Loop: Header=BB15_147 Depth=1
	movl	-64(%rbp), %ecx
	addl	-60(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-304(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-64(%rbp), %ecx
	subl	-60(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-52(%rbp), %ecx
	addl	-56(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-52(%rbp), %ecx
	subl	-56(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.155:                              # %for.inc1238
                                        #   in Loop: Header=BB15_147 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB15_147
.LBB15_156:                             # %for.end1240
	movl	$-1, -100(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -36(%rbp)
.LBB15_157:                             # %for.cond1241
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -36(%rbp)
	jge	.LBB15_173
# %bb.158:                              # %for.body1244
                                        #   in Loop: Header=BB15_157 Depth=1
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB15_160
# %bb.159:                              # %if.then1255
                                        #   in Loop: Header=BB15_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -44(%rbp)
	jmp	.LBB15_164
.LBB15_160:                             # %if.else1261
                                        #   in Loop: Header=BB15_157 Depth=1
	cmpl	$1, -124(%rbp)
	jne	.LBB15_162
# %bb.161:                              # %if.then1264
                                        #   in Loop: Header=BB15_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB15_163
.LBB15_162:                             # %if.else1287
                                        #   in Loop: Header=BB15_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB15_163:                             # %if.end1310
                                        #   in Loop: Header=BB15_157 Depth=1
	jmp	.LBB15_164
.LBB15_164:                             # %if.end1311
                                        #   in Loop: Header=BB15_157 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB15_169
# %bb.165:                              # %if.then1314
                                        #   in Loop: Header=BB15_157 Depth=1
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $rcx
	movl	$4294901760, %eax       # imm = 0xFFFF0000
	shlq	%cl, %rax
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-132(%rbp), %eax
	jle	.LBB15_167
# %bb.166:                              # %cond.true1321
                                        #   in Loop: Header=BB15_157 Depth=1
	movl	$1, %eax
	jmp	.LBB15_168
.LBB15_167:                             # %cond.false1322
                                        #   in Loop: Header=BB15_157 Depth=1
	movl	-132(%rbp), %eax
.LBB15_168:                             # %cond.end1323
                                        #   in Loop: Header=BB15_157 Depth=1
	movl	%eax, -132(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	$-1, -100(%rbp)
.LBB15_169:                             # %if.end1335
                                        #   in Loop: Header=BB15_157 Depth=1
	cmpl	$0, -108(%rbp)
	jne	.LBB15_171
# %bb.170:                              # %if.then1337
                                        #   in Loop: Header=BB15_157 Depth=1
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB15_171:                             # %if.end1347
                                        #   in Loop: Header=BB15_157 Depth=1
	jmp	.LBB15_172
.LBB15_172:                             # %for.inc1348
                                        #   in Loop: Header=BB15_157 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB15_157
.LBB15_173:                             # %for.end1350
	movq	-224(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB15_174:                             # %for.cond1353
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_178 Depth 2
                                        #     Child Loop BB15_182 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB15_176
# %bb.175:                              # %land.rhs1356
                                        #   in Loop: Header=BB15_174 Depth=1
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB15_176:                             # %land.end1359
                                        #   in Loop: Header=BB15_174 Depth=1
	testb	$1, %al
	jne	.LBB15_177
	jmp	.LBB15_187
.LBB15_177:                             # %for.body1361
                                        #   in Loop: Header=BB15_174 Depth=1
	movl	$0, -16(%rbp)
.LBB15_178:                             # %for.cond1362
                                        #   Parent Loop BB15_174 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB15_181
# %bb.179:                              # %for.body1365
                                        #   in Loop: Header=BB15_178 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.180:                              # %for.inc1372
                                        #   in Loop: Header=BB15_178 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB15_178
.LBB15_181:                             # %for.end1374
                                        #   in Loop: Header=BB15_174 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB15_182:                             # %for.cond1391
                                        #   Parent Loop BB15_174 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB15_185
# %bb.183:                              # %for.body1394
                                        #   in Loop: Header=BB15_182 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movslq	-120(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.184:                              # %for.inc1414
                                        #   in Loop: Header=BB15_182 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB15_182
.LBB15_185:                             # %for.end1416
                                        #   in Loop: Header=BB15_174 Depth=1
	jmp	.LBB15_186
.LBB15_186:                             # %for.inc1417
                                        #   in Loop: Header=BB15_174 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB15_174
.LBB15_187:                             # %for.end1419
	movl	$0, -16(%rbp)
.LBB15_188:                             # %for.cond1420
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_192 Depth 2
                                        #     Child Loop BB15_196 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB15_190
# %bb.189:                              # %land.rhs1423
                                        #   in Loop: Header=BB15_188 Depth=1
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB15_190:                             # %land.end1426
                                        #   in Loop: Header=BB15_188 Depth=1
	testb	$1, %al
	jne	.LBB15_191
	jmp	.LBB15_210
.LBB15_191:                             # %for.body1428
                                        #   in Loop: Header=BB15_188 Depth=1
	movl	$0, -12(%rbp)
.LBB15_192:                             # %for.cond1429
                                        #   Parent Loop BB15_188 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB15_195
# %bb.193:                              # %for.body1432
                                        #   in Loop: Header=BB15_192 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.194:                              # %for.inc1439
                                        #   in Loop: Header=BB15_192 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB15_192
.LBB15_195:                             # %for.end1441
                                        #   in Loop: Header=BB15_188 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB15_196:                             # %for.cond1458
                                        #   Parent Loop BB15_188 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB15_208
# %bb.197:                              # %for.body1461
                                        #   in Loop: Header=BB15_196 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	cmpl	$4, -40(%rbp)
	jge	.LBB15_202
# %bb.198:                              # %if.then1465
                                        #   in Loop: Header=BB15_196 Depth=2
	cmpl	$1, -124(%rbp)
	jne	.LBB15_200
# %bb.199:                              # %if.then1468
                                        #   in Loop: Header=BB15_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-76(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-40(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-40(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
	jmp	.LBB15_201
.LBB15_200:                             # %if.else1521
                                        #   in Loop: Header=BB15_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-76(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-40(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-40(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
.LBB15_201:                             # %if.end1574
                                        #   in Loop: Header=BB15_196 Depth=2
	jmp	.LBB15_206
.LBB15_202:                             # %if.else1575
                                        #   in Loop: Header=BB15_196 Depth=2
	cmpl	$1, -124(%rbp)
	jne	.LBB15_204
# %bb.203:                              # %if.then1578
                                        #   in Loop: Header=BB15_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB15_205
.LBB15_204:                             # %if.else1625
                                        #   in Loop: Header=BB15_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB15_205:                             # %if.end1672
                                        #   in Loop: Header=BB15_196 Depth=2
	jmp	.LBB15_206
.LBB15_206:                             # %if.end1673
                                        #   in Loop: Header=BB15_196 Depth=2
	jmp	.LBB15_207
.LBB15_207:                             # %for.inc1674
                                        #   in Loop: Header=BB15_196 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB15_196
.LBB15_208:                             # %for.end1676
                                        #   in Loop: Header=BB15_188 Depth=1
	jmp	.LBB15_209
.LBB15_209:                             # %for.inc1677
                                        #   in Loop: Header=BB15_188 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB15_188
.LBB15_210:                             # %for.end1679
	jmp	.LBB15_211
.LBB15_211:                             # %if.end1680
	jmp	.LBB15_212
.LBB15_212:                             # %if.end1681
	jmp	.LBB15_213
.LBB15_213:                             # %if.end1682
	movl	$0, -196(%rbp)
	movl	$0, -212(%rbp)
	movl	$0, -112(%rbp)
.LBB15_214:                             # %for.cond1683
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_216 Depth 2
                                        #       Child Loop BB15_218 Depth 3
	movl	-112(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB15_256
# %bb.215:                              # %for.body1688
                                        #   in Loop: Header=BB15_214 Depth=1
	movl	$0, -116(%rbp)
.LBB15_216:                             # %for.cond1689
                                        #   Parent Loop BB15_214 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB15_218 Depth 3
	cmpl	$4, -116(%rbp)
	jge	.LBB15_254
# %bb.217:                              # %for.body1692
                                        #   in Loop: Header=BB15_216 Depth=2
	movslq	-140(%rbp), %rax
	shlq	$4, %rax
	movabsq	$hor_offset, %rcx
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -28(%rbp)
	movslq	-140(%rbp), %rax
	shlq	$4, %rax
	movabsq	$ver_offset, %rcx
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$4, %ecx
	addl	-200(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -232(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$4, %ecx
	addl	-200(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -392(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -72(%rbp)
	movl	$1, -36(%rbp)
.LBB15_218:                             # %for.cond1722
                                        #   Parent Loop BB15_214 Depth=1
                                        #     Parent Loop BB15_216 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -36(%rbp)
	jge	.LBB15_252
# %bb.219:                              # %for.body1725
                                        #   in Loop: Header=BB15_218 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB15_222
# %bb.220:                              # %lor.lhs.false1727
                                        #   in Loop: Header=BB15_218 Depth=3
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB15_223
# %bb.221:                              # %land.lhs.true1729
                                        #   in Loop: Header=BB15_218 Depth=3
	movq	-192(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB15_223
.LBB15_222:                             # %if.then1731
                                        #   in Loop: Header=BB15_218 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB15_224
.LBB15_223:                             # %if.else1740
                                        #   in Loop: Header=BB15_218 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB15_224:                             # %if.end1749
                                        #   in Loop: Header=BB15_218 Depth=3
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -144(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB15_226
# %bb.225:                              # %if.then1752
                                        #   in Loop: Header=BB15_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -44(%rbp)
	jmp	.LBB15_230
.LBB15_226:                             # %if.else1761
                                        #   in Loop: Header=BB15_218 Depth=3
	cmpl	$1, -124(%rbp)
	jne	.LBB15_228
# %bb.227:                              # %if.then1764
                                        #   in Loop: Header=BB15_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-180(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB15_229
.LBB15_228:                             # %if.else1792
                                        #   in Loop: Header=BB15_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-180(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB15_229:                             # %if.end1820
                                        #   in Loop: Header=BB15_218 Depth=3
	jmp	.LBB15_230
.LBB15_230:                             # %if.end1821
                                        #   in Loop: Header=BB15_218 Depth=3
	cmpl	$0, -44(%rbp)
	je	.LBB15_248
# %bb.231:                              # %if.then1824
                                        #   in Loop: Header=BB15_218 Depth=3
	movl	-112(%rbp), %eax
	addl	-200(%rbp), %eax
	cltq
	shlq	$2, %rax
	movabsq	$cbp_blk_chroma, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $rcx
	movl	$1, %eax
	shlq	%cl, %rax
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	cmpl	$1, -44(%rbp)
	jg	.LBB15_233
# %bb.232:                              # %lor.lhs.false1837
                                        #   in Loop: Header=BB15_218 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB15_234
.LBB15_233:                             # %if.then1839
                                        #   in Loop: Header=BB15_218 Depth=3
	movl	-196(%rbp), %eax
	addl	$999999, %eax           # imm = 0xF423F
	movl	%eax, -196(%rbp)
	jmp	.LBB15_235
.LBB15_234:                             # %if.else1841
                                        #   in Loop: Header=BB15_218 Depth=3
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-100(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	-196(%rbp), %eax
	movl	%eax, -196(%rbp)
.LBB15_235:                             # %if.end1848
                                        #   in Loop: Header=BB15_218 Depth=3
	movl	$2, -212(%rbp)
	movl	-44(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-232(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-392(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	$-1, -100(%rbp)
	movl	-44(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -44(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB15_237
# %bb.236:                              # %if.then1871
                                        #   in Loop: Header=BB15_218 Depth=3
	movl	-44(%rbp), %eax
	movl	%eax, -144(%rbp)
	jmp	.LBB15_247
.LBB15_237:                             # %if.else1872
                                        #   in Loop: Header=BB15_218 Depth=3
	cmpl	$4, -40(%rbp)
	jge	.LBB15_242
# %bb.238:                              # %if.then1875
                                        #   in Loop: Header=BB15_218 Depth=3
	cmpl	$1, -124(%rbp)
	jne	.LBB15_240
# %bb.239:                              # %if.then1878
                                        #   in Loop: Header=BB15_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -144(%rbp)
	jmp	.LBB15_241
.LBB15_240:                             # %if.else1893
                                        #   in Loop: Header=BB15_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -144(%rbp)
.LBB15_241:                             # %if.end1908
                                        #   in Loop: Header=BB15_218 Depth=3
	jmp	.LBB15_246
.LBB15_242:                             # %if.else1909
                                        #   in Loop: Header=BB15_218 Depth=3
	cmpl	$1, -124(%rbp)
	jne	.LBB15_244
# %bb.243:                              # %if.then1912
                                        #   in Loop: Header=BB15_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -144(%rbp)
	jmp	.LBB15_245
.LBB15_244:                             # %if.else1924
                                        #   in Loop: Header=BB15_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -144(%rbp)
.LBB15_245:                             # %if.end1936
                                        #   in Loop: Header=BB15_218 Depth=3
	jmp	.LBB15_246
.LBB15_246:                             # %if.end1937
                                        #   in Loop: Header=BB15_218 Depth=3
	jmp	.LBB15_247
.LBB15_247:                             # %if.end1938
                                        #   in Loop: Header=BB15_218 Depth=3
	jmp	.LBB15_248
.LBB15_248:                             # %if.end1939
                                        #   in Loop: Header=BB15_218 Depth=3
	cmpl	$0, -108(%rbp)
	jne	.LBB15_250
# %bb.249:                              # %if.then1941
                                        #   in Loop: Header=BB15_218 Depth=3
	movl	-144(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB15_250:                             # %if.end1949
                                        #   in Loop: Header=BB15_218 Depth=3
	jmp	.LBB15_251
.LBB15_251:                             # %for.inc1950
                                        #   in Loop: Header=BB15_218 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB15_218
.LBB15_252:                             # %for.end1952
                                        #   in Loop: Header=BB15_216 Depth=2
	movq	-232(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.253:                              # %for.inc1955
                                        #   in Loop: Header=BB15_216 Depth=2
	movl	-116(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB15_216
.LBB15_254:                             # %for.end1957
                                        #   in Loop: Header=BB15_214 Depth=1
	jmp	.LBB15_255
.LBB15_255:                             # %for.inc1958
                                        #   in Loop: Header=BB15_214 Depth=1
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB15_214
.LBB15_256:                             # %for.end1960
	cmpl	$4, -196(%rbp)
	jge	.LBB15_278
# %bb.257:                              # %land.lhs.true1963
	cmpl	$0, -108(%rbp)
	jne	.LBB15_278
# %bb.258:                              # %if.then1965
	movl	$0, -212(%rbp)
	movl	$0, -112(%rbp)
.LBB15_259:                             # %for.cond1966
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_261 Depth 2
                                        #       Child Loop BB15_265 Depth 3
	movl	-112(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB15_277
# %bb.260:                              # %for.body1971
                                        #   in Loop: Header=BB15_259 Depth=1
	movl	$0, -116(%rbp)
.LBB15_261:                             # %for.cond1972
                                        #   Parent Loop BB15_259 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB15_265 Depth 3
	cmpl	$4, -116(%rbp)
	jge	.LBB15_275
# %bb.262:                              # %for.body1975
                                        #   in Loop: Header=BB15_261 Depth=2
	movslq	-140(%rbp), %rax
	shlq	$4, %rax
	movabsq	$hor_offset, %rcx
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -28(%rbp)
	movslq	-140(%rbp), %rax
	shlq	$4, %rax
	movabsq	$ver_offset, %rcx
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$4, %ecx
	addl	-200(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -232(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$4, %ecx
	addl	-200(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -392(%rbp)
	cmpl	$0, -204(%rbp)
	jne	.LBB15_264
# %bb.263:                              # %if.then2008
                                        #   in Loop: Header=BB15_261 Depth=2
	movslq	-140(%rbp), %rax
	movq	-432(%rbp,%rax,8), %rax
	movl	-20(%rbp), %edx
	movl	-140(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $rcx
	shlq	%cl, %rax
	xorq	$-1, %rax
	movq	-192(%rbp), %rcx
	andq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
.LBB15_264:                             # %if.end2016
                                        #   in Loop: Header=BB15_261 Depth=2
	movq	-232(%rbp), %rax
	movl	$0, (%rax)
	movl	$1, -36(%rbp)
.LBB15_265:                             # %for.cond2018
                                        #   Parent Loop BB15_259 Depth=1
                                        #     Parent Loop BB15_261 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -36(%rbp)
	jge	.LBB15_273
# %bb.266:                              # %for.body2021
                                        #   in Loop: Header=BB15_265 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB15_269
# %bb.267:                              # %lor.lhs.false2024
                                        #   in Loop: Header=BB15_265 Depth=3
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB15_270
# %bb.268:                              # %land.lhs.true2027
                                        #   in Loop: Header=BB15_265 Depth=3
	movq	-192(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB15_270
.LBB15_269:                             # %if.then2030
                                        #   in Loop: Header=BB15_265 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB15_271
.LBB15_270:                             # %if.else2039
                                        #   in Loop: Header=BB15_265 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB15_271:                             # %if.end2048
                                        #   in Loop: Header=BB15_265 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	$0, (%rax,%rcx,4)
	movq	-232(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.272:                              # %for.inc2058
                                        #   in Loop: Header=BB15_265 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB15_265
.LBB15_273:                             # %for.end2060
                                        #   in Loop: Header=BB15_261 Depth=2
	jmp	.LBB15_274
.LBB15_274:                             # %for.inc2061
                                        #   in Loop: Header=BB15_261 Depth=2
	movl	-116(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB15_261
.LBB15_275:                             # %for.end2063
                                        #   in Loop: Header=BB15_259 Depth=1
	jmp	.LBB15_276
.LBB15_276:                             # %for.inc2064
                                        #   in Loop: Header=BB15_259 Depth=1
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB15_259
.LBB15_277:                             # %for.end2066
	jmp	.LBB15_278
.LBB15_278:                             # %if.end2067
	cmpl	$2, -212(%rbp)
	jne	.LBB15_280
# %bb.279:                              # %if.then2070
	movl	$2, -132(%rbp)
.LBB15_280:                             # %if.end2071
	movl	$0, -24(%rbp)
.LBB15_281:                             # %for.cond2072
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_285 Depth 2
                                        #       Child Loop BB15_287 Depth 3
                                        #         Child Loop BB15_289 Depth 4
                                        #         Child Loop BB15_293 Depth 4
                                        #       Child Loop BB15_299 Depth 3
                                        #         Child Loop BB15_303 Depth 4
                                        #         Child Loop BB15_307 Depth 4
	xorl	%eax, %eax
	movl	-24(%rbp), %ecx
	movq	img, %rdx
	cmpl	72712(%rdx), %ecx
	jge	.LBB15_283
# %bb.282:                              # %land.rhs2076
                                        #   in Loop: Header=BB15_281 Depth=1
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB15_283:                             # %land.end2079
                                        #   in Loop: Header=BB15_281 Depth=1
	testb	$1, %al
	jne	.LBB15_284
	jmp	.LBB15_340
.LBB15_284:                             # %for.body2081
                                        #   in Loop: Header=BB15_281 Depth=1
	movl	$0, -28(%rbp)
.LBB15_285:                             # %for.cond2082
                                        #   Parent Loop BB15_281 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB15_287 Depth 3
                                        #         Child Loop BB15_289 Depth 4
                                        #         Child Loop BB15_293 Depth 4
                                        #       Child Loop BB15_299 Depth 3
                                        #         Child Loop BB15_303 Depth 4
                                        #         Child Loop BB15_307 Depth 4
	movl	-28(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB15_338
# %bb.286:                              # %for.body2086
                                        #   in Loop: Header=BB15_285 Depth=2
	movl	$0, -12(%rbp)
.LBB15_287:                             # %for.cond2087
                                        #   Parent Loop BB15_281 Depth=1
                                        #     Parent Loop BB15_285 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB15_289 Depth 4
                                        #         Child Loop BB15_293 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB15_298
# %bb.288:                              # %for.body2090
                                        #   in Loop: Header=BB15_287 Depth=3
	movl	$0, -16(%rbp)
.LBB15_289:                             # %for.cond2091
                                        #   Parent Loop BB15_281 Depth=1
                                        #     Parent Loop BB15_285 Depth=2
                                        #       Parent Loop BB15_287 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB15_292
# %bb.290:                              # %for.body2094
                                        #   in Loop: Header=BB15_289 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.291:                              # %for.inc2104
                                        #   in Loop: Header=BB15_289 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB15_289
.LBB15_292:                             # %for.end2106
                                        #   in Loop: Header=BB15_287 Depth=3
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB15_293:                             # %for.cond2125
                                        #   Parent Loop BB15_281 Depth=1
                                        #     Parent Loop BB15_285 Depth=2
                                        #       Parent Loop BB15_287 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB15_296
# %bb.294:                              # %for.body2128
                                        #   in Loop: Header=BB15_293 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-120(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.295:                              # %for.inc2154
                                        #   in Loop: Header=BB15_293 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB15_293
.LBB15_296:                             # %for.end2156
                                        #   in Loop: Header=BB15_287 Depth=3
	jmp	.LBB15_297
.LBB15_297:                             # %for.inc2157
                                        #   in Loop: Header=BB15_287 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB15_287
.LBB15_298:                             # %for.end2159
                                        #   in Loop: Header=BB15_285 Depth=2
	movl	$0, -16(%rbp)
.LBB15_299:                             # %for.cond2160
                                        #   Parent Loop BB15_281 Depth=1
                                        #     Parent Loop BB15_285 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB15_303 Depth 4
                                        #         Child Loop BB15_307 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB15_301
# %bb.300:                              # %land.rhs2163
                                        #   in Loop: Header=BB15_299 Depth=3
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB15_301:                             # %land.end2166
                                        #   in Loop: Header=BB15_299 Depth=3
	testb	$1, %al
	jne	.LBB15_302
	jmp	.LBB15_336
.LBB15_302:                             # %for.body2168
                                        #   in Loop: Header=BB15_299 Depth=3
	movl	$0, -12(%rbp)
.LBB15_303:                             # %for.cond2169
                                        #   Parent Loop BB15_281 Depth=1
                                        #     Parent Loop BB15_285 Depth=2
                                        #       Parent Loop BB15_299 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB15_306
# %bb.304:                              # %for.body2172
                                        #   in Loop: Header=BB15_303 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.305:                              # %for.inc2182
                                        #   in Loop: Header=BB15_303 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB15_303
.LBB15_306:                             # %for.end2184
                                        #   in Loop: Header=BB15_299 Depth=3
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB15_307:                             # %for.cond2203
                                        #   Parent Loop BB15_281 Depth=1
                                        #     Parent Loop BB15_285 Depth=2
                                        #       Parent Loop BB15_299 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB15_334
# %bb.308:                              # %for.body2206
                                        #   in Loop: Header=BB15_307 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB15_328
# %bb.309:                              # %if.then2209
                                        #   in Loop: Header=BB15_307 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72688(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-68(%rbp), %rsi
	addl	-96(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-28(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-24(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB15_311
# %bb.310:                              # %cond.true2230
                                        #   in Loop: Header=BB15_307 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB15_312
.LBB15_311:                             # %cond.false2231
                                        #   in Loop: Header=BB15_307 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-68(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-28(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB15_312:                             # %cond.end2250
                                        #   in Loop: Header=BB15_307 Depth=4
	cmpq	%rcx, %rax
	jge	.LBB15_314
# %bb.313:                              # %cond.true2254
                                        #   in Loop: Header=BB15_307 Depth=4
	movq	img, %rax
	movslq	72688(%rax), %rax
	jmp	.LBB15_318
.LBB15_314:                             # %cond.false2257
                                        #   in Loop: Header=BB15_307 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-68(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-28(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB15_316
# %bb.315:                              # %cond.true2278
                                        #   in Loop: Header=BB15_307 Depth=4
	xorl	%eax, %eax
	jmp	.LBB15_317
.LBB15_316:                             # %cond.false2279
                                        #   in Loop: Header=BB15_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB15_317:                             # %cond.end2298
                                        #   in Loop: Header=BB15_307 Depth=4
.LBB15_318:                             # %cond.end2300
                                        #   in Loop: Header=BB15_307 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movl	-28(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movslq	72688(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-68(%rbp), %rsi
	subl	-96(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-28(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-24(%rbp), %edi
	addl	-68(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB15_320
# %bb.319:                              # %cond.true2332
                                        #   in Loop: Header=BB15_307 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB15_321
.LBB15_320:                             # %cond.false2333
                                        #   in Loop: Header=BB15_307 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-68(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-28(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-68(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB15_321:                             # %cond.end2352
                                        #   in Loop: Header=BB15_307 Depth=4
	cmpq	%rcx, %rax
	jge	.LBB15_323
# %bb.322:                              # %cond.true2356
                                        #   in Loop: Header=BB15_307 Depth=4
	movq	img, %rax
	movslq	72688(%rax), %rax
	jmp	.LBB15_327
.LBB15_323:                             # %cond.false2359
                                        #   in Loop: Header=BB15_307 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-68(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-28(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-68(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB15_325
# %bb.324:                              # %cond.true2380
                                        #   in Loop: Header=BB15_307 Depth=4
	xorl	%eax, %eax
	jmp	.LBB15_326
.LBB15_325:                             # %cond.false2381
                                        #   in Loop: Header=BB15_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB15_326:                             # %cond.end2400
                                        #   in Loop: Header=BB15_307 Depth=4
.LBB15_327:                             # %cond.end2402
                                        #   in Loop: Header=BB15_307 Depth=4
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB15_332
.LBB15_328:                             # %if.else2412
                                        #   in Loop: Header=BB15_307 Depth=4
	cmpl	$0, -108(%rbp)
	je	.LBB15_330
# %bb.329:                              # %if.then2414
                                        #   in Loop: Header=BB15_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB15_331
.LBB15_330:                             # %if.else2439
                                        #   in Loop: Header=BB15_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB15_331:                             # %if.end2468
                                        #   in Loop: Header=BB15_307 Depth=4
	jmp	.LBB15_332
.LBB15_332:                             # %if.end2469
                                        #   in Loop: Header=BB15_307 Depth=4
	jmp	.LBB15_333
.LBB15_333:                             # %for.inc2470
                                        #   in Loop: Header=BB15_307 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB15_307
.LBB15_334:                             # %for.end2472
                                        #   in Loop: Header=BB15_299 Depth=3
	jmp	.LBB15_335
.LBB15_335:                             # %for.inc2473
                                        #   in Loop: Header=BB15_299 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB15_299
.LBB15_336:                             # %for.end2475
                                        #   in Loop: Header=BB15_285 Depth=2
	jmp	.LBB15_337
.LBB15_337:                             # %for.inc2476
                                        #   in Loop: Header=BB15_285 Depth=2
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB15_285
.LBB15_338:                             # %for.end2478
                                        #   in Loop: Header=BB15_281 Depth=1
	jmp	.LBB15_339
.LBB15_339:                             # %for.inc2479
                                        #   in Loop: Header=BB15_281 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB15_281
.LBB15_340:                             # %for.end2481
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB15_353
# %bb.341:                              # %if.then2484
	movl	$0, -12(%rbp)
.LBB15_342:                             # %for.cond2485
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_344 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB15_352
# %bb.343:                              # %for.body2489
                                        #   in Loop: Header=BB15_342 Depth=1
	movl	$0, -16(%rbp)
.LBB15_344:                             # %for.cond2490
                                        #   Parent Loop BB15_342 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB15_350
# %bb.345:                              # %for.body2494
                                        #   in Loop: Header=BB15_344 Depth=2
	cmpl	$0, -108(%rbp)
	je	.LBB15_347
# %bb.346:                              # %if.then2496
                                        #   in Loop: Header=BB15_344 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB15_348
.LBB15_347:                             # %if.else2518
                                        #   in Loop: Header=BB15_344 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB15_348:                             # %if.end2536
                                        #   in Loop: Header=BB15_344 Depth=2
	jmp	.LBB15_349
.LBB15_349:                             # %for.inc2537
                                        #   in Loop: Header=BB15_344 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB15_344
.LBB15_350:                             # %for.end2539
                                        #   in Loop: Header=BB15_342 Depth=1
	jmp	.LBB15_351
.LBB15_351:                             # %for.inc2540
                                        #   in Loop: Header=BB15_342 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB15_342
.LBB15_352:                             # %for.end2542
	jmp	.LBB15_353
.LBB15_353:                             # %if.end2543
	movl	-132(%rbp), %ebx
	cmpl	$698102124, -380(%rbp)  # imm = 0x299C316C
	jne	.LBB15_355
.LBB15_354:
	movl	%ebx, %eax
	addq	$424, %rsp              # imm = 0x1A8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_355:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB15_354
.Lfunc_end15:
	.size	dct_chroma.6, .Lfunc_end15-dct_chroma.6
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function dct_luma_sp.7
.LCPI16_0:
	.quad	4616189618054758400     # double 4
.LCPI16_1:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI16_2:
	.quad	4611686018427387904     # double 2
.LCPI16_3:
	.quad	4613937818241073152     # double 3
	.text
	.globl	dct_luma_sp.7
	.p2align	4, 0x90
	.type	dct_luma_sp.7,@function
dct_luma_sp.7:                          # @dct_luma_sp.7
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -24
	vmovsd	.LCPI16_2(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI16_3(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$1613493080, -216(%rbp) # imm = 0x602BF358
	movl	%edi, -120(%rbp)
	movl	%esi, -124(%rbp)
	movq	%rdx, -240(%rbp)
	movl	-120(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -184(%rbp)
	movl	-124(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -188(%rbp)
	movl	-188(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-184(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -196(%rbp)
	movl	-188(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-184(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -208(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-196(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-208(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -232(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-196(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-208(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -248(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -160(%rbp)
	movq	-160(%rbp), %rax
	movl	12(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI16_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI16_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmulsd	%xmm0, %xmm2, %xmm0
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -224(%rbp)
	movq	-160(%rbp), %rax
	movl	12(%rax), %eax
	subl	$0, %eax
	cltd
	movl	$6, %edi
	idivl	%edi
	movl	%eax, -136(%rbp)
	movq	-160(%rbp), %rax
	movl	12(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%edx, -100(%rbp)
	movl	-136(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -144(%rbp)
	movq	-160(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%eax, -180(%rbp)
	movq	-160(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%edx, -132(%rbp)
	movl	-180(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -116(%rbp)
	movl	-144(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %esi
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	idivl	%edi
	movl	%eax, -192(%rbp)
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movl	%esi, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -204(%rbp)
	movl	$0, -12(%rbp)
.LBB16_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_3 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB16_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB16_1 Depth=1
	movl	$0, -16(%rbp)
.LBB16_3:                               # %for.cond38
                                        #   Parent Loop BB16_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB16_6
# %bb.4:                                # %for.body41
                                        #   in Loop: Header=BB16_3 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-120(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-124(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-120(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-124(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB16_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB16_3
.LBB16_6:                               # %for.end
                                        #   in Loop: Header=BB16_1 Depth=1
	jmp	.LBB16_7
.LBB16_7:                               # %for.inc66
                                        #   in Loop: Header=BB16_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB16_1
.LBB16_8:                               # %for.end68
	movl	$0, -12(%rbp)
.LBB16_9:                               # %for.cond69
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_11 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB16_16
# %bb.10:                               # %for.body72
                                        #   in Loop: Header=BB16_9 Depth=1
	movl	$0, -16(%rbp)
.LBB16_11:                              # %for.cond73
                                        #   Parent Loop BB16_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB16_14
# %bb.12:                               # %for.body76
                                        #   in Loop: Header=BB16_11 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.13:                               # %for.inc104
                                        #   in Loop: Header=BB16_11 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB16_11
.LBB16_14:                              # %for.end106
                                        #   in Loop: Header=BB16_9 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.15:                               # %for.inc137
                                        #   in Loop: Header=BB16_9 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB16_9
.LBB16_16:                              # %for.end139
	movl	$0, -16(%rbp)
.LBB16_17:                              # %for.cond140
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_19 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB16_24
# %bb.18:                               # %for.body143
                                        #   in Loop: Header=BB16_17 Depth=1
	movl	$0, -12(%rbp)
.LBB16_19:                              # %for.cond144
                                        #   Parent Loop BB16_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB16_22
# %bb.20:                               # %for.body147
                                        #   in Loop: Header=BB16_19 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-20(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.21:                               # %for.inc175
                                        #   in Loop: Header=BB16_19 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB16_19
.LBB16_22:                              # %for.end177
                                        #   in Loop: Header=BB16_17 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.23:                               # %for.inc208
                                        #   in Loop: Header=BB16_17 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB16_17
.LBB16_24:                              # %for.end210
	movl	$0, -12(%rbp)
.LBB16_25:                              # %for.cond211
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_27 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB16_32
# %bb.26:                               # %for.body214
                                        #   in Loop: Header=BB16_25 Depth=1
	movl	$0, -16(%rbp)
.LBB16_27:                              # %for.cond215
                                        #   Parent Loop BB16_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB16_30
# %bb.28:                               # %for.body218
                                        #   in Loop: Header=BB16_27 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.29:                               # %for.inc242
                                        #   in Loop: Header=BB16_27 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB16_27
.LBB16_30:                              # %for.end244
                                        #   in Loop: Header=BB16_25 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -320(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -288(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -304(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
# %bb.31:                               # %for.inc271
                                        #   in Loop: Header=BB16_25 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB16_25
.LBB16_32:                              # %for.end273
	movl	$0, -16(%rbp)
.LBB16_33:                              # %for.cond274
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_35 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB16_40
# %bb.34:                               # %for.body277
                                        #   in Loop: Header=BB16_33 Depth=1
	movl	$0, -12(%rbp)
.LBB16_35:                              # %for.cond278
                                        #   Parent Loop BB16_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB16_38
# %bb.36:                               # %for.body281
                                        #   in Loop: Header=BB16_35 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-20(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.37:                               # %for.inc305
                                        #   in Loop: Header=BB16_35 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB16_35
.LBB16_38:                              # %for.end307
                                        #   in Loop: Header=BB16_33 Depth=1
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-320(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.39:                               # %for.inc334
                                        #   in Loop: Header=BB16_33 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB16_33
.LBB16_40:                              # %for.end336
	movl	$0, -200(%rbp)
	movl	$-1, -68(%rbp)
	movl	$0, -108(%rbp)
	movl	$0, -64(%rbp)
.LBB16_41:                              # %for.cond337
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -64(%rbp)
	jge	.LBB16_80
# %bb.42:                               # %for.body340
                                        #   in Loop: Header=BB16_41 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB16_45
# %bb.43:                               # %lor.lhs.false
                                        #   in Loop: Header=BB16_41 Depth=1
	cmpl	$0, mb_adaptive
	je	.LBB16_46
# %bb.44:                               # %land.lhs.true
                                        #   in Loop: Header=BB16_41 Depth=1
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB16_46
.LBB16_45:                              # %if.then
                                        #   in Loop: Header=BB16_41 Depth=1
	movslq	-64(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-64(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB16_47
.LBB16_46:                              # %if.else
                                        #   in Loop: Header=BB16_41 Depth=1
	movslq	-64(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-64(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB16_47:                              # %if.end
                                        #   in Loop: Header=BB16_41 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -112(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-204(%rbp), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	cltd
	idivl	(%rsi,%rcx,4)
	movl	%eax, -24(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-24(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -104(%rbp)
	movl	-104(%rbp), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-192(%rbp), %eax
	movl	-144(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movl	%eax, -140(%rbp)
	movl	-140(%rbp), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-192(%rbp), %eax
	movl	-144(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -60(%rbp)
	movl	-24(%rbp), %eax
	cmpl	-60(%rbp), %eax
	je	.LBB16_63
# %bb.48:                               # %land.lhs.true424
                                        #   in Loop: Header=BB16_41 Depth=1
	cmpl	$0, -24(%rbp)
	je	.LBB16_63
# %bb.49:                               # %land.lhs.true427
                                        #   in Loop: Header=BB16_41 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB16_63
# %bb.50:                               # %if.then430
                                        #   in Loop: Header=BB16_41 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-24(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-136(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -168(%rbp)
	movl	-24(%rbp), %edi
	movl	-68(%rbp), %esi
	leaq	-148(%rbp), %rdx
	leaq	-212(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	vmovsd	-224(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-148(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -168(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-60(%rbp), %edi
	movl	-140(%rbp), %esi
	callq	sign
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-136(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -176(%rbp)
	movl	-60(%rbp), %edi
	movl	-68(%rbp), %esi
	leaq	-148(%rbp), %rdx
	leaq	-212(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-176(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-176(%rbp), %xmm0, %xmm0
	vmovsd	-224(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-148(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -176(%rbp)
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-176(%rbp), %xmm0
	jne	.LBB16_55
	jp	.LBB16_55
# %bb.51:                               # %if.then495
                                        #   in Loop: Header=BB16_41 Depth=1
	movl	-24(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-60(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB16_53
# %bb.52:                               # %cond.true
                                        #   in Loop: Header=BB16_41 Depth=1
	movl	-24(%rbp), %eax
	jmp	.LBB16_54
.LBB16_53:                              # %cond.false
                                        #   in Loop: Header=BB16_41 Depth=1
	movl	-60(%rbp), %eax
.LBB16_54:                              # %cond.end
                                        #   in Loop: Header=BB16_41 Depth=1
	movl	%eax, -56(%rbp)
	jmp	.LBB16_59
.LBB16_55:                              # %if.else500
                                        #   in Loop: Header=BB16_41 Depth=1
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-176(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB16_57
# %bb.56:                               # %if.then503
                                        #   in Loop: Header=BB16_41 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB16_58
.LBB16_57:                              # %if.else504
                                        #   in Loop: Header=BB16_41 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB16_58:                              # %if.end505
                                        #   in Loop: Header=BB16_41 Depth=1
	jmp	.LBB16_59
.LBB16_59:                              # %if.end506
                                        #   in Loop: Header=BB16_41 Depth=1
	movl	-56(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jne	.LBB16_61
# %bb.60:                               # %cond.true509
                                        #   in Loop: Header=BB16_41 Depth=1
	movl	-104(%rbp), %eax
	jmp	.LBB16_62
.LBB16_61:                              # %cond.false510
                                        #   in Loop: Header=BB16_41 Depth=1
	movl	-140(%rbp), %eax
.LBB16_62:                              # %cond.end511
                                        #   in Loop: Header=BB16_41 Depth=1
	movl	%eax, -128(%rbp)
	jmp	.LBB16_73
.LBB16_63:                              # %if.else513
                                        #   in Loop: Header=BB16_41 Depth=1
	movl	-24(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB16_65
# %bb.64:                               # %if.then516
                                        #   in Loop: Header=BB16_41 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-104(%rbp), %eax
	movl	%eax, -128(%rbp)
	jmp	.LBB16_72
.LBB16_65:                              # %if.else517
                                        #   in Loop: Header=BB16_41 Depth=1
	cmpl	$0, -24(%rbp)
	jne	.LBB16_67
# %bb.66:                               # %cond.true520
                                        #   in Loop: Header=BB16_41 Depth=1
	movl	-24(%rbp), %eax
	jmp	.LBB16_68
.LBB16_67:                              # %cond.false521
                                        #   in Loop: Header=BB16_41 Depth=1
	movl	-60(%rbp), %eax
.LBB16_68:                              # %cond.end522
                                        #   in Loop: Header=BB16_41 Depth=1
	movl	%eax, -56(%rbp)
	cmpl	$0, -24(%rbp)
	jne	.LBB16_70
# %bb.69:                               # %cond.true526
                                        #   in Loop: Header=BB16_41 Depth=1
	movl	-104(%rbp), %eax
	jmp	.LBB16_71
.LBB16_70:                              # %cond.false527
                                        #   in Loop: Header=BB16_41 Depth=1
	movl	-140(%rbp), %eax
.LBB16_71:                              # %cond.end528
                                        #   in Loop: Header=BB16_41 Depth=1
	movl	%eax, -128(%rbp)
.LBB16_72:                              # %if.end530
                                        #   in Loop: Header=BB16_41 Depth=1
	jmp	.LBB16_73
.LBB16_73:                              # %if.end531
                                        #   in Loop: Header=BB16_41 Depth=1
	cmpl	$0, -56(%rbp)
	je	.LBB16_78
# %bb.74:                               # %if.then534
                                        #   in Loop: Header=BB16_41 Depth=1
	movl	$1, -200(%rbp)
	cmpl	$1, -56(%rbp)
	jle	.LBB16_76
# %bb.75:                               # %if.then537
                                        #   in Loop: Header=BB16_41 Depth=1
	movq	-240(%rbp), %rax
	movl	(%rax), %ecx
	addl	$999999, %ecx           # imm = 0xF423F
	movl	%ecx, (%rax)
	jmp	.LBB16_77
.LBB16_76:                              # %if.else539
                                        #   in Loop: Header=BB16_41 Depth=1
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-68(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-240(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB16_77:                              # %if.end546
                                        #   in Loop: Header=BB16_41 Depth=1
	movl	-56(%rbp), %edi
	movl	-128(%rbp), %esi
	callq	sign
	movq	-232(%rbp), %rcx
	movslq	-108(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	movq	-248(%rbp), %rcx
	movslq	-108(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	movl	$-1, -68(%rbp)
	movl	-56(%rbp), %edi
	movl	-128(%rbp), %esi
	callq	sign
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-136(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	movl	%eax, -112(%rbp)
.LBB16_78:                              # %if.end568
                                        #   in Loop: Header=BB16_41 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	-112(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-112(%rbp), %edi
	callq	abs
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-204(%rbp), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-112(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-180(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.79:                               # %for.inc598
                                        #   in Loop: Header=BB16_41 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB16_41
.LBB16_80:                              # %for.end600
	movq	-232(%rbp), %rax
	movslq	-108(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB16_81:                              # %for.cond603
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_83 Depth 2
                                        #     Child Loop BB16_87 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB16_92
# %bb.82:                               # %for.body606
                                        #   in Loop: Header=BB16_81 Depth=1
	movl	$0, -16(%rbp)
.LBB16_83:                              # %for.cond607
                                        #   Parent Loop BB16_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB16_86
# %bb.84:                               # %for.body610
                                        #   in Loop: Header=BB16_83 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.85:                               # %for.inc618
                                        #   in Loop: Header=BB16_83 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB16_83
.LBB16_86:                              # %for.end620
                                        #   in Loop: Header=BB16_81 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB16_87:                              # %for.cond639
                                        #   Parent Loop BB16_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB16_90
# %bb.88:                               # %for.body642
                                        #   in Loop: Header=BB16_87 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.89:                               # %for.inc664
                                        #   in Loop: Header=BB16_87 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB16_87
.LBB16_90:                              # %for.end666
                                        #   in Loop: Header=BB16_81 Depth=1
	jmp	.LBB16_91
.LBB16_91:                              # %for.inc667
                                        #   in Loop: Header=BB16_81 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB16_81
.LBB16_92:                              # %for.end669
	movl	$0, -16(%rbp)
.LBB16_93:                              # %for.cond670
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_95 Depth 2
                                        #     Child Loop BB16_99 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB16_122
# %bb.94:                               # %for.body673
                                        #   in Loop: Header=BB16_93 Depth=1
	movl	$0, -12(%rbp)
.LBB16_95:                              # %for.cond674
                                        #   Parent Loop BB16_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB16_98
# %bb.96:                               # %for.body677
                                        #   in Loop: Header=BB16_95 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.97:                               # %for.inc685
                                        #   in Loop: Header=BB16_95 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB16_95
.LBB16_98:                              # %for.end687
                                        #   in Loop: Header=BB16_93 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB16_99:                              # %for.cond706
                                        #   Parent Loop BB16_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB16_120
# %bb.100:                              # %for.body709
                                        #   in Loop: Header=BB16_99 Depth=2
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	addl	-96(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB16_102
# %bb.101:                              # %cond.true720
                                        #   in Loop: Header=BB16_99 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB16_103
.LBB16_102:                             # %cond.false721
                                        #   in Loop: Header=BB16_99 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB16_103:                             # %cond.end729
                                        #   in Loop: Header=BB16_99 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB16_105
# %bb.104:                              # %cond.true733
                                        #   in Loop: Header=BB16_99 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB16_109
.LBB16_105:                             # %cond.false735
                                        #   in Loop: Header=BB16_99 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB16_107
# %bb.106:                              # %cond.true745
                                        #   in Loop: Header=BB16_99 Depth=2
	xorl	%eax, %eax
	jmp	.LBB16_108
.LBB16_107:                             # %cond.false746
                                        #   in Loop: Header=BB16_99 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB16_108:                             # %cond.end754
                                        #   in Loop: Header=BB16_99 Depth=2
.LBB16_109:                             # %cond.end756
                                        #   in Loop: Header=BB16_99 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	subl	-96(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB16_111
# %bb.110:                              # %cond.true773
                                        #   in Loop: Header=BB16_99 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB16_112
.LBB16_111:                             # %cond.false774
                                        #   in Loop: Header=BB16_99 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB16_112:                             # %cond.end782
                                        #   in Loop: Header=BB16_99 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB16_114
# %bb.113:                              # %cond.true786
                                        #   in Loop: Header=BB16_99 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB16_118
.LBB16_114:                             # %cond.false788
                                        #   in Loop: Header=BB16_99 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB16_116
# %bb.115:                              # %cond.true798
                                        #   in Loop: Header=BB16_99 Depth=2
	xorl	%eax, %eax
	jmp	.LBB16_117
.LBB16_116:                             # %cond.false799
                                        #   in Loop: Header=BB16_99 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB16_117:                             # %cond.end807
                                        #   in Loop: Header=BB16_99 Depth=2
.LBB16_118:                             # %cond.end809
                                        #   in Loop: Header=BB16_99 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.119:                              # %for.inc816
                                        #   in Loop: Header=BB16_99 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB16_99
.LBB16_120:                             # %for.end818
                                        #   in Loop: Header=BB16_93 Depth=1
	jmp	.LBB16_121
.LBB16_121:                             # %for.inc819
                                        #   in Loop: Header=BB16_93 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB16_93
.LBB16_122:                             # %for.end821
	movl	$0, -12(%rbp)
.LBB16_123:                             # %for.cond822
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_125 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB16_130
# %bb.124:                              # %for.body825
                                        #   in Loop: Header=BB16_123 Depth=1
	movl	$0, -16(%rbp)
.LBB16_125:                             # %for.cond826
                                        #   Parent Loop BB16_123 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB16_128
# %bb.126:                              # %for.body829
                                        #   in Loop: Header=BB16_125 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-124(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-120(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.127:                              # %for.inc844
                                        #   in Loop: Header=BB16_125 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB16_125
.LBB16_128:                             # %for.end846
                                        #   in Loop: Header=BB16_123 Depth=1
	jmp	.LBB16_129
.LBB16_129:                             # %for.inc847
                                        #   in Loop: Header=BB16_123 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB16_123
.LBB16_130:                             # %for.end849
	movl	-200(%rbp), %ebx
	cmpl	$1613493080, -216(%rbp) # imm = 0x602BF358
	jne	.LBB16_132
.LBB16_131:
	movl	%ebx, %eax
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_132:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB16_131
.Lfunc_end16:
	.size	dct_luma_sp.7, .Lfunc_end16-dct_luma_sp.7
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function dct_luma_sp.8
.LCPI17_0:
	.quad	4616189618054758400     # double 4
.LCPI17_1:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI17_2:
	.quad	4611686018427387904     # double 2
.LCPI17_3:
	.quad	4613937818241073152     # double 3
	.text
	.globl	dct_luma_sp.8
	.p2align	4, 0x90
	.type	dct_luma_sp.8,@function
dct_luma_sp.8:                          # @dct_luma_sp.8
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -24
	vmovsd	.LCPI17_2(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI17_3(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$501486062, -216(%rbp)  # imm = 0x1DE411EE
	movl	%edi, -120(%rbp)
	movl	%esi, -136(%rbp)
	movq	%rdx, -224(%rbp)
	movl	-120(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -192(%rbp)
	movl	-136(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -188(%rbp)
	movl	-188(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-192(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -180(%rbp)
	movl	-188(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-192(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -200(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-180(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-200(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -240(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-180(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-200(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -248(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -168(%rbp)
	movq	-168(%rbp), %rax
	movl	12(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI17_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI17_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmulsd	%xmm0, %xmm2, %xmm0
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -232(%rbp)
	movq	-168(%rbp), %rax
	movl	12(%rax), %eax
	subl	$0, %eax
	cltd
	movl	$6, %edi
	idivl	%edi
	movl	%eax, -116(%rbp)
	movq	-168(%rbp), %rax
	movl	12(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%edx, -104(%rbp)
	movl	-116(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -148(%rbp)
	movq	-168(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%eax, -204(%rbp)
	movq	-168(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%edx, -140(%rbp)
	movl	-204(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -128(%rbp)
	movl	-148(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %esi
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	idivl	%edi
	movl	%eax, -196(%rbp)
	movl	-128(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movl	%esi, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -208(%rbp)
	movl	$0, -12(%rbp)
.LBB17_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_3 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB17_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB17_1 Depth=1
	movl	$0, -16(%rbp)
.LBB17_3:                               # %for.cond38
                                        #   Parent Loop BB17_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB17_6
# %bb.4:                                # %for.body41
                                        #   in Loop: Header=BB17_3 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-120(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-136(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-120(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-136(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB17_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB17_3
.LBB17_6:                               # %for.end
                                        #   in Loop: Header=BB17_1 Depth=1
	jmp	.LBB17_7
.LBB17_7:                               # %for.inc66
                                        #   in Loop: Header=BB17_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB17_1
.LBB17_8:                               # %for.end68
	movl	$0, -12(%rbp)
.LBB17_9:                               # %for.cond69
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_11 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB17_16
# %bb.10:                               # %for.body72
                                        #   in Loop: Header=BB17_9 Depth=1
	movl	$0, -16(%rbp)
.LBB17_11:                              # %for.cond73
                                        #   Parent Loop BB17_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB17_14
# %bb.12:                               # %for.body76
                                        #   in Loop: Header=BB17_11 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.13:                               # %for.inc104
                                        #   in Loop: Header=BB17_11 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB17_11
.LBB17_14:                              # %for.end106
                                        #   in Loop: Header=BB17_9 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.15:                               # %for.inc137
                                        #   in Loop: Header=BB17_9 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB17_9
.LBB17_16:                              # %for.end139
	movl	$0, -16(%rbp)
.LBB17_17:                              # %for.cond140
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_19 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB17_24
# %bb.18:                               # %for.body143
                                        #   in Loop: Header=BB17_17 Depth=1
	movl	$0, -12(%rbp)
.LBB17_19:                              # %for.cond144
                                        #   Parent Loop BB17_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB17_22
# %bb.20:                               # %for.body147
                                        #   in Loop: Header=BB17_19 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-24(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.21:                               # %for.inc175
                                        #   in Loop: Header=BB17_19 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB17_19
.LBB17_22:                              # %for.end177
                                        #   in Loop: Header=BB17_17 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.23:                               # %for.inc208
                                        #   in Loop: Header=BB17_17 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB17_17
.LBB17_24:                              # %for.end210
	movl	$0, -12(%rbp)
.LBB17_25:                              # %for.cond211
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_27 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB17_32
# %bb.26:                               # %for.body214
                                        #   in Loop: Header=BB17_25 Depth=1
	movl	$0, -16(%rbp)
.LBB17_27:                              # %for.cond215
                                        #   Parent Loop BB17_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB17_30
# %bb.28:                               # %for.body218
                                        #   in Loop: Header=BB17_27 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.29:                               # %for.inc242
                                        #   in Loop: Header=BB17_27 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB17_27
.LBB17_30:                              # %for.end244
                                        #   in Loop: Header=BB17_25 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -320(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -288(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -304(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
# %bb.31:                               # %for.inc271
                                        #   in Loop: Header=BB17_25 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB17_25
.LBB17_32:                              # %for.end273
	movl	$0, -16(%rbp)
.LBB17_33:                              # %for.cond274
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_35 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB17_40
# %bb.34:                               # %for.body277
                                        #   in Loop: Header=BB17_33 Depth=1
	movl	$0, -12(%rbp)
.LBB17_35:                              # %for.cond278
                                        #   Parent Loop BB17_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB17_38
# %bb.36:                               # %for.body281
                                        #   in Loop: Header=BB17_35 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-24(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.37:                               # %for.inc305
                                        #   in Loop: Header=BB17_35 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB17_35
.LBB17_38:                              # %for.end307
                                        #   in Loop: Header=BB17_33 Depth=1
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-320(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.39:                               # %for.inc334
                                        #   in Loop: Header=BB17_33 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB17_33
.LBB17_40:                              # %for.end336
	movl	$0, -184(%rbp)
	movl	$-1, -68(%rbp)
	movl	$0, -112(%rbp)
	movl	$0, -64(%rbp)
.LBB17_41:                              # %for.cond337
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -64(%rbp)
	jge	.LBB17_80
# %bb.42:                               # %for.body340
                                        #   in Loop: Header=BB17_41 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB17_45
# %bb.43:                               # %lor.lhs.false
                                        #   in Loop: Header=BB17_41 Depth=1
	cmpl	$0, mb_adaptive
	je	.LBB17_46
# %bb.44:                               # %land.lhs.true
                                        #   in Loop: Header=BB17_41 Depth=1
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB17_46
.LBB17_45:                              # %if.then
                                        #   in Loop: Header=BB17_41 Depth=1
	movslq	-64(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-64(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB17_47
.LBB17_46:                              # %if.else
                                        #   in Loop: Header=BB17_41 Depth=1
	movslq	-64(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-64(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB17_47:                              # %if.end
                                        #   in Loop: Header=BB17_41 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -108(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-140(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-208(%rbp), %eax
	movl	-128(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	movl	-128(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-140(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	cltd
	idivl	(%rsi,%rcx,4)
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-20(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -100(%rbp)
	movl	-100(%rbp), %edi
	callq	abs
	movslq	-104(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-196(%rbp), %eax
	movl	-148(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movl	%eax, -124(%rbp)
	movl	-124(%rbp), %edi
	callq	abs
	movslq	-104(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-196(%rbp), %eax
	movl	-148(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -60(%rbp)
	movl	-20(%rbp), %eax
	cmpl	-60(%rbp), %eax
	je	.LBB17_63
# %bb.48:                               # %land.lhs.true424
                                        #   in Loop: Header=BB17_41 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB17_63
# %bb.49:                               # %land.lhs.true427
                                        #   in Loop: Header=BB17_41 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB17_63
# %bb.50:                               # %if.then430
                                        #   in Loop: Header=BB17_41 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-20(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movslq	-104(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
	movl	-20(%rbp), %edi
	movl	-68(%rbp), %esi
	leaq	-144(%rbp), %rdx
	leaq	-212(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	-232(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-144(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-60(%rbp), %edi
	movl	-124(%rbp), %esi
	callq	sign
	movslq	-104(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -176(%rbp)
	movl	-60(%rbp), %edi
	movl	-68(%rbp), %esi
	leaq	-144(%rbp), %rdx
	leaq	-212(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-176(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-176(%rbp), %xmm0, %xmm0
	vmovsd	-232(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-144(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -176(%rbp)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-176(%rbp), %xmm0
	jne	.LBB17_55
	jp	.LBB17_55
# %bb.51:                               # %if.then495
                                        #   in Loop: Header=BB17_41 Depth=1
	movl	-20(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-60(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB17_53
# %bb.52:                               # %cond.true
                                        #   in Loop: Header=BB17_41 Depth=1
	movl	-20(%rbp), %eax
	jmp	.LBB17_54
.LBB17_53:                              # %cond.false
                                        #   in Loop: Header=BB17_41 Depth=1
	movl	-60(%rbp), %eax
.LBB17_54:                              # %cond.end
                                        #   in Loop: Header=BB17_41 Depth=1
	movl	%eax, -56(%rbp)
	jmp	.LBB17_59
.LBB17_55:                              # %if.else500
                                        #   in Loop: Header=BB17_41 Depth=1
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-176(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB17_57
# %bb.56:                               # %if.then503
                                        #   in Loop: Header=BB17_41 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB17_58
.LBB17_57:                              # %if.else504
                                        #   in Loop: Header=BB17_41 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB17_58:                              # %if.end505
                                        #   in Loop: Header=BB17_41 Depth=1
	jmp	.LBB17_59
.LBB17_59:                              # %if.end506
                                        #   in Loop: Header=BB17_41 Depth=1
	movl	-56(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jne	.LBB17_61
# %bb.60:                               # %cond.true509
                                        #   in Loop: Header=BB17_41 Depth=1
	movl	-100(%rbp), %eax
	jmp	.LBB17_62
.LBB17_61:                              # %cond.false510
                                        #   in Loop: Header=BB17_41 Depth=1
	movl	-124(%rbp), %eax
.LBB17_62:                              # %cond.end511
                                        #   in Loop: Header=BB17_41 Depth=1
	movl	%eax, -132(%rbp)
	jmp	.LBB17_73
.LBB17_63:                              # %if.else513
                                        #   in Loop: Header=BB17_41 Depth=1
	movl	-20(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB17_65
# %bb.64:                               # %if.then516
                                        #   in Loop: Header=BB17_41 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-100(%rbp), %eax
	movl	%eax, -132(%rbp)
	jmp	.LBB17_72
.LBB17_65:                              # %if.else517
                                        #   in Loop: Header=BB17_41 Depth=1
	cmpl	$0, -20(%rbp)
	jne	.LBB17_67
# %bb.66:                               # %cond.true520
                                        #   in Loop: Header=BB17_41 Depth=1
	movl	-20(%rbp), %eax
	jmp	.LBB17_68
.LBB17_67:                              # %cond.false521
                                        #   in Loop: Header=BB17_41 Depth=1
	movl	-60(%rbp), %eax
.LBB17_68:                              # %cond.end522
                                        #   in Loop: Header=BB17_41 Depth=1
	movl	%eax, -56(%rbp)
	cmpl	$0, -20(%rbp)
	jne	.LBB17_70
# %bb.69:                               # %cond.true526
                                        #   in Loop: Header=BB17_41 Depth=1
	movl	-100(%rbp), %eax
	jmp	.LBB17_71
.LBB17_70:                              # %cond.false527
                                        #   in Loop: Header=BB17_41 Depth=1
	movl	-124(%rbp), %eax
.LBB17_71:                              # %cond.end528
                                        #   in Loop: Header=BB17_41 Depth=1
	movl	%eax, -132(%rbp)
.LBB17_72:                              # %if.end530
                                        #   in Loop: Header=BB17_41 Depth=1
	jmp	.LBB17_73
.LBB17_73:                              # %if.end531
                                        #   in Loop: Header=BB17_41 Depth=1
	cmpl	$0, -56(%rbp)
	je	.LBB17_78
# %bb.74:                               # %if.then534
                                        #   in Loop: Header=BB17_41 Depth=1
	movl	$1, -184(%rbp)
	cmpl	$1, -56(%rbp)
	jle	.LBB17_76
# %bb.75:                               # %if.then537
                                        #   in Loop: Header=BB17_41 Depth=1
	movq	-224(%rbp), %rax
	movl	(%rax), %ecx
	addl	$999999, %ecx           # imm = 0xF423F
	movl	%ecx, (%rax)
	jmp	.LBB17_77
.LBB17_76:                              # %if.else539
                                        #   in Loop: Header=BB17_41 Depth=1
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-68(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-224(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB17_77:                              # %if.end546
                                        #   in Loop: Header=BB17_41 Depth=1
	movl	-56(%rbp), %edi
	movl	-132(%rbp), %esi
	callq	sign
	movq	-240(%rbp), %rcx
	movslq	-112(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	movq	-248(%rbp), %rcx
	movslq	-112(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	movl	$-1, -68(%rbp)
	movl	-56(%rbp), %edi
	movl	-132(%rbp), %esi
	callq	sign
	movslq	-104(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	movl	%eax, -108(%rbp)
.LBB17_78:                              # %if.end568
                                        #   in Loop: Header=BB17_41 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	-108(%rbp), %eax
	movl	%eax, -108(%rbp)
	movl	-108(%rbp), %edi
	callq	abs
	movslq	-140(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-208(%rbp), %eax
	movl	-128(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-108(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-140(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-204(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.79:                               # %for.inc598
                                        #   in Loop: Header=BB17_41 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB17_41
.LBB17_80:                              # %for.end600
	movq	-240(%rbp), %rax
	movslq	-112(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB17_81:                              # %for.cond603
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_83 Depth 2
                                        #     Child Loop BB17_87 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB17_92
# %bb.82:                               # %for.body606
                                        #   in Loop: Header=BB17_81 Depth=1
	movl	$0, -16(%rbp)
.LBB17_83:                              # %for.cond607
                                        #   Parent Loop BB17_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB17_86
# %bb.84:                               # %for.body610
                                        #   in Loop: Header=BB17_83 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.85:                               # %for.inc618
                                        #   in Loop: Header=BB17_83 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB17_83
.LBB17_86:                              # %for.end620
                                        #   in Loop: Header=BB17_81 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB17_87:                              # %for.cond639
                                        #   Parent Loop BB17_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB17_90
# %bb.88:                               # %for.body642
                                        #   in Loop: Header=BB17_87 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.89:                               # %for.inc664
                                        #   in Loop: Header=BB17_87 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB17_87
.LBB17_90:                              # %for.end666
                                        #   in Loop: Header=BB17_81 Depth=1
	jmp	.LBB17_91
.LBB17_91:                              # %for.inc667
                                        #   in Loop: Header=BB17_81 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB17_81
.LBB17_92:                              # %for.end669
	movl	$0, -16(%rbp)
.LBB17_93:                              # %for.cond670
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_95 Depth 2
                                        #     Child Loop BB17_99 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB17_122
# %bb.94:                               # %for.body673
                                        #   in Loop: Header=BB17_93 Depth=1
	movl	$0, -12(%rbp)
.LBB17_95:                              # %for.cond674
                                        #   Parent Loop BB17_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB17_98
# %bb.96:                               # %for.body677
                                        #   in Loop: Header=BB17_95 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.97:                               # %for.inc685
                                        #   in Loop: Header=BB17_95 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB17_95
.LBB17_98:                              # %for.end687
                                        #   in Loop: Header=BB17_93 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB17_99:                              # %for.cond706
                                        #   Parent Loop BB17_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB17_120
# %bb.100:                              # %for.body709
                                        #   in Loop: Header=BB17_99 Depth=2
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-24(%rbp), %rsi
	addl	-96(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB17_102
# %bb.101:                              # %cond.true720
                                        #   in Loop: Header=BB17_99 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB17_103
.LBB17_102:                             # %cond.false721
                                        #   in Loop: Header=BB17_99 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-24(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB17_103:                             # %cond.end729
                                        #   in Loop: Header=BB17_99 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB17_105
# %bb.104:                              # %cond.true733
                                        #   in Loop: Header=BB17_99 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB17_109
.LBB17_105:                             # %cond.false735
                                        #   in Loop: Header=BB17_99 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-24(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB17_107
# %bb.106:                              # %cond.true745
                                        #   in Loop: Header=BB17_99 Depth=2
	xorl	%eax, %eax
	jmp	.LBB17_108
.LBB17_107:                             # %cond.false746
                                        #   in Loop: Header=BB17_99 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-24(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB17_108:                             # %cond.end754
                                        #   in Loop: Header=BB17_99 Depth=2
.LBB17_109:                             # %cond.end756
                                        #   in Loop: Header=BB17_99 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-24(%rbp), %rsi
	subl	-96(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB17_111
# %bb.110:                              # %cond.true773
                                        #   in Loop: Header=BB17_99 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB17_112
.LBB17_111:                             # %cond.false774
                                        #   in Loop: Header=BB17_99 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-24(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB17_112:                             # %cond.end782
                                        #   in Loop: Header=BB17_99 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB17_114
# %bb.113:                              # %cond.true786
                                        #   in Loop: Header=BB17_99 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB17_118
.LBB17_114:                             # %cond.false788
                                        #   in Loop: Header=BB17_99 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-24(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB17_116
# %bb.115:                              # %cond.true798
                                        #   in Loop: Header=BB17_99 Depth=2
	xorl	%eax, %eax
	jmp	.LBB17_117
.LBB17_116:                             # %cond.false799
                                        #   in Loop: Header=BB17_99 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-24(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB17_117:                             # %cond.end807
                                        #   in Loop: Header=BB17_99 Depth=2
.LBB17_118:                             # %cond.end809
                                        #   in Loop: Header=BB17_99 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.119:                              # %for.inc816
                                        #   in Loop: Header=BB17_99 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB17_99
.LBB17_120:                             # %for.end818
                                        #   in Loop: Header=BB17_93 Depth=1
	jmp	.LBB17_121
.LBB17_121:                             # %for.inc819
                                        #   in Loop: Header=BB17_93 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB17_93
.LBB17_122:                             # %for.end821
	movl	$0, -12(%rbp)
.LBB17_123:                             # %for.cond822
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_125 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB17_130
# %bb.124:                              # %for.body825
                                        #   in Loop: Header=BB17_123 Depth=1
	movl	$0, -16(%rbp)
.LBB17_125:                             # %for.cond826
                                        #   Parent Loop BB17_123 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB17_128
# %bb.126:                              # %for.body829
                                        #   in Loop: Header=BB17_125 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-136(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-120(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.127:                              # %for.inc844
                                        #   in Loop: Header=BB17_125 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB17_125
.LBB17_128:                             # %for.end846
                                        #   in Loop: Header=BB17_123 Depth=1
	jmp	.LBB17_129
.LBB17_129:                             # %for.inc847
                                        #   in Loop: Header=BB17_123 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB17_123
.LBB17_130:                             # %for.end849
	movl	-184(%rbp), %ebx
	cmpl	$501486062, -216(%rbp)  # imm = 0x1DE411EE
	jne	.LBB17_132
.LBB17_131:
	movl	%ebx, %eax
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_132:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB17_131
.Lfunc_end17:
	.size	dct_luma_sp.8, .Lfunc_end17-dct_luma_sp.8
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function dct_luma_sp.9
.LCPI18_0:
	.quad	4616189618054758400     # double 4
.LCPI18_1:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI18_2:
	.quad	4611686018427387904     # double 2
.LCPI18_3:
	.quad	4613937818241073152     # double 3
	.text
	.globl	dct_luma_sp.9
	.p2align	4, 0x90
	.type	dct_luma_sp.9,@function
dct_luma_sp.9:                          # @dct_luma_sp.9
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -24
	vmovsd	.LCPI18_2(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI18_3(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$2098526133, -212(%rbp) # imm = 0x7D14F7B5
	movl	%edi, -124(%rbp)
	movl	%esi, -120(%rbp)
	movq	%rdx, -232(%rbp)
	movl	-124(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -184(%rbp)
	movl	-120(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -188(%rbp)
	movl	-188(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-184(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -204(%rbp)
	movl	-188(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-184(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -180(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-204(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-180(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -224(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-204(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-180(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -248(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -168(%rbp)
	movq	-168(%rbp), %rax
	movl	12(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI18_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI18_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmulsd	%xmm0, %xmm2, %xmm0
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -240(%rbp)
	movq	-168(%rbp), %rax
	movl	12(%rax), %eax
	subl	$0, %eax
	cltd
	movl	$6, %edi
	idivl	%edi
	movl	%eax, -136(%rbp)
	movq	-168(%rbp), %rax
	movl	12(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%edx, -104(%rbp)
	movl	-136(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -148(%rbp)
	movq	-168(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%eax, -200(%rbp)
	movq	-168(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%edx, -116(%rbp)
	movl	-200(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -128(%rbp)
	movl	-148(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %esi
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	idivl	%edi
	movl	%eax, -208(%rbp)
	movl	-128(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movl	%esi, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -192(%rbp)
	movl	$0, -12(%rbp)
.LBB18_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_3 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB18_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB18_1 Depth=1
	movl	$0, -16(%rbp)
.LBB18_3:                               # %for.cond38
                                        #   Parent Loop BB18_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB18_6
# %bb.4:                                # %for.body41
                                        #   in Loop: Header=BB18_3 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-124(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-120(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-124(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-120(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB18_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB18_3
.LBB18_6:                               # %for.end
                                        #   in Loop: Header=BB18_1 Depth=1
	jmp	.LBB18_7
.LBB18_7:                               # %for.inc66
                                        #   in Loop: Header=BB18_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB18_1
.LBB18_8:                               # %for.end68
	movl	$0, -12(%rbp)
.LBB18_9:                               # %for.cond69
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_11 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB18_16
# %bb.10:                               # %for.body72
                                        #   in Loop: Header=BB18_9 Depth=1
	movl	$0, -16(%rbp)
.LBB18_11:                              # %for.cond73
                                        #   Parent Loop BB18_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB18_14
# %bb.12:                               # %for.body76
                                        #   in Loop: Header=BB18_11 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.13:                               # %for.inc104
                                        #   in Loop: Header=BB18_11 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB18_11
.LBB18_14:                              # %for.end106
                                        #   in Loop: Header=BB18_9 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.15:                               # %for.inc137
                                        #   in Loop: Header=BB18_9 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB18_9
.LBB18_16:                              # %for.end139
	movl	$0, -16(%rbp)
.LBB18_17:                              # %for.cond140
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_19 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB18_24
# %bb.18:                               # %for.body143
                                        #   in Loop: Header=BB18_17 Depth=1
	movl	$0, -12(%rbp)
.LBB18_19:                              # %for.cond144
                                        #   Parent Loop BB18_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB18_22
# %bb.20:                               # %for.body147
                                        #   in Loop: Header=BB18_19 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-24(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.21:                               # %for.inc175
                                        #   in Loop: Header=BB18_19 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB18_19
.LBB18_22:                              # %for.end177
                                        #   in Loop: Header=BB18_17 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.23:                               # %for.inc208
                                        #   in Loop: Header=BB18_17 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB18_17
.LBB18_24:                              # %for.end210
	movl	$0, -12(%rbp)
.LBB18_25:                              # %for.cond211
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_27 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB18_32
# %bb.26:                               # %for.body214
                                        #   in Loop: Header=BB18_25 Depth=1
	movl	$0, -16(%rbp)
.LBB18_27:                              # %for.cond215
                                        #   Parent Loop BB18_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB18_30
# %bb.28:                               # %for.body218
                                        #   in Loop: Header=BB18_27 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.29:                               # %for.inc242
                                        #   in Loop: Header=BB18_27 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB18_27
.LBB18_30:                              # %for.end244
                                        #   in Loop: Header=BB18_25 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -320(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -288(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -304(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
# %bb.31:                               # %for.inc271
                                        #   in Loop: Header=BB18_25 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB18_25
.LBB18_32:                              # %for.end273
	movl	$0, -16(%rbp)
.LBB18_33:                              # %for.cond274
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_35 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB18_40
# %bb.34:                               # %for.body277
                                        #   in Loop: Header=BB18_33 Depth=1
	movl	$0, -12(%rbp)
.LBB18_35:                              # %for.cond278
                                        #   Parent Loop BB18_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB18_38
# %bb.36:                               # %for.body281
                                        #   in Loop: Header=BB18_35 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-24(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.37:                               # %for.inc305
                                        #   in Loop: Header=BB18_35 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB18_35
.LBB18_38:                              # %for.end307
                                        #   in Loop: Header=BB18_33 Depth=1
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-320(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.39:                               # %for.inc334
                                        #   in Loop: Header=BB18_33 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB18_33
.LBB18_40:                              # %for.end336
	movl	$0, -196(%rbp)
	movl	$-1, -68(%rbp)
	movl	$0, -112(%rbp)
	movl	$0, -64(%rbp)
.LBB18_41:                              # %for.cond337
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -64(%rbp)
	jge	.LBB18_80
# %bb.42:                               # %for.body340
                                        #   in Loop: Header=BB18_41 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB18_45
# %bb.43:                               # %lor.lhs.false
                                        #   in Loop: Header=BB18_41 Depth=1
	cmpl	$0, mb_adaptive
	je	.LBB18_46
# %bb.44:                               # %land.lhs.true
                                        #   in Loop: Header=BB18_41 Depth=1
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB18_46
.LBB18_45:                              # %if.then
                                        #   in Loop: Header=BB18_41 Depth=1
	movslq	-64(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-64(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB18_47
.LBB18_46:                              # %if.else
                                        #   in Loop: Header=BB18_41 Depth=1
	movslq	-64(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-64(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB18_47:                              # %if.end
                                        #   in Loop: Header=BB18_41 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -100(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-116(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-192(%rbp), %eax
	movl	-128(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	movl	-128(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-116(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	cltd
	idivl	(%rsi,%rcx,4)
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-20(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -108(%rbp)
	movl	-108(%rbp), %edi
	callq	abs
	movslq	-104(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-208(%rbp), %eax
	movl	-148(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movl	%eax, -140(%rbp)
	movl	-140(%rbp), %edi
	callq	abs
	movslq	-104(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-208(%rbp), %eax
	movl	-148(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -60(%rbp)
	movl	-20(%rbp), %eax
	cmpl	-60(%rbp), %eax
	je	.LBB18_63
# %bb.48:                               # %land.lhs.true424
                                        #   in Loop: Header=BB18_41 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB18_63
# %bb.49:                               # %land.lhs.true427
                                        #   in Loop: Header=BB18_41 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB18_63
# %bb.50:                               # %if.then430
                                        #   in Loop: Header=BB18_41 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-20(%rbp), %edi
	movl	-108(%rbp), %esi
	callq	sign
	movslq	-104(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-136(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -176(%rbp)
	movl	-20(%rbp), %edi
	movl	-68(%rbp), %esi
	leaq	-144(%rbp), %rdx
	leaq	-216(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-176(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-176(%rbp), %xmm0, %xmm0
	vmovsd	-240(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-144(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -176(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-60(%rbp), %edi
	movl	-140(%rbp), %esi
	callq	sign
	movslq	-104(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-136(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
	movl	-60(%rbp), %edi
	movl	-68(%rbp), %esi
	leaq	-144(%rbp), %rdx
	leaq	-216(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	-240(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-144(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
	vmovsd	-176(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-160(%rbp), %xmm0
	jne	.LBB18_55
	jp	.LBB18_55
# %bb.51:                               # %if.then495
                                        #   in Loop: Header=BB18_41 Depth=1
	movl	-20(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-60(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB18_53
# %bb.52:                               # %cond.true
                                        #   in Loop: Header=BB18_41 Depth=1
	movl	-20(%rbp), %eax
	jmp	.LBB18_54
.LBB18_53:                              # %cond.false
                                        #   in Loop: Header=BB18_41 Depth=1
	movl	-60(%rbp), %eax
.LBB18_54:                              # %cond.end
                                        #   in Loop: Header=BB18_41 Depth=1
	movl	%eax, -56(%rbp)
	jmp	.LBB18_59
.LBB18_55:                              # %if.else500
                                        #   in Loop: Header=BB18_41 Depth=1
	vmovsd	-176(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-160(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB18_57
# %bb.56:                               # %if.then503
                                        #   in Loop: Header=BB18_41 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB18_58
.LBB18_57:                              # %if.else504
                                        #   in Loop: Header=BB18_41 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB18_58:                              # %if.end505
                                        #   in Loop: Header=BB18_41 Depth=1
	jmp	.LBB18_59
.LBB18_59:                              # %if.end506
                                        #   in Loop: Header=BB18_41 Depth=1
	movl	-56(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jne	.LBB18_61
# %bb.60:                               # %cond.true509
                                        #   in Loop: Header=BB18_41 Depth=1
	movl	-108(%rbp), %eax
	jmp	.LBB18_62
.LBB18_61:                              # %cond.false510
                                        #   in Loop: Header=BB18_41 Depth=1
	movl	-140(%rbp), %eax
.LBB18_62:                              # %cond.end511
                                        #   in Loop: Header=BB18_41 Depth=1
	movl	%eax, -132(%rbp)
	jmp	.LBB18_73
.LBB18_63:                              # %if.else513
                                        #   in Loop: Header=BB18_41 Depth=1
	movl	-20(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB18_65
# %bb.64:                               # %if.then516
                                        #   in Loop: Header=BB18_41 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-108(%rbp), %eax
	movl	%eax, -132(%rbp)
	jmp	.LBB18_72
.LBB18_65:                              # %if.else517
                                        #   in Loop: Header=BB18_41 Depth=1
	cmpl	$0, -20(%rbp)
	jne	.LBB18_67
# %bb.66:                               # %cond.true520
                                        #   in Loop: Header=BB18_41 Depth=1
	movl	-20(%rbp), %eax
	jmp	.LBB18_68
.LBB18_67:                              # %cond.false521
                                        #   in Loop: Header=BB18_41 Depth=1
	movl	-60(%rbp), %eax
.LBB18_68:                              # %cond.end522
                                        #   in Loop: Header=BB18_41 Depth=1
	movl	%eax, -56(%rbp)
	cmpl	$0, -20(%rbp)
	jne	.LBB18_70
# %bb.69:                               # %cond.true526
                                        #   in Loop: Header=BB18_41 Depth=1
	movl	-108(%rbp), %eax
	jmp	.LBB18_71
.LBB18_70:                              # %cond.false527
                                        #   in Loop: Header=BB18_41 Depth=1
	movl	-140(%rbp), %eax
.LBB18_71:                              # %cond.end528
                                        #   in Loop: Header=BB18_41 Depth=1
	movl	%eax, -132(%rbp)
.LBB18_72:                              # %if.end530
                                        #   in Loop: Header=BB18_41 Depth=1
	jmp	.LBB18_73
.LBB18_73:                              # %if.end531
                                        #   in Loop: Header=BB18_41 Depth=1
	cmpl	$0, -56(%rbp)
	je	.LBB18_78
# %bb.74:                               # %if.then534
                                        #   in Loop: Header=BB18_41 Depth=1
	movl	$1, -196(%rbp)
	cmpl	$1, -56(%rbp)
	jle	.LBB18_76
# %bb.75:                               # %if.then537
                                        #   in Loop: Header=BB18_41 Depth=1
	movq	-232(%rbp), %rax
	movl	(%rax), %ecx
	addl	$999999, %ecx           # imm = 0xF423F
	movl	%ecx, (%rax)
	jmp	.LBB18_77
.LBB18_76:                              # %if.else539
                                        #   in Loop: Header=BB18_41 Depth=1
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-68(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-232(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB18_77:                              # %if.end546
                                        #   in Loop: Header=BB18_41 Depth=1
	movl	-56(%rbp), %edi
	movl	-132(%rbp), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-112(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	movq	-248(%rbp), %rcx
	movslq	-112(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	movl	$-1, -68(%rbp)
	movl	-56(%rbp), %edi
	movl	-132(%rbp), %esi
	callq	sign
	movslq	-104(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-136(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	movl	%eax, -100(%rbp)
.LBB18_78:                              # %if.end568
                                        #   in Loop: Header=BB18_41 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	-100(%rbp), %eax
	movl	%eax, -100(%rbp)
	movl	-100(%rbp), %edi
	callq	abs
	movslq	-116(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-192(%rbp), %eax
	movl	-128(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-100(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-116(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-200(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.79:                               # %for.inc598
                                        #   in Loop: Header=BB18_41 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB18_41
.LBB18_80:                              # %for.end600
	movq	-224(%rbp), %rax
	movslq	-112(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB18_81:                              # %for.cond603
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_83 Depth 2
                                        #     Child Loop BB18_87 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB18_92
# %bb.82:                               # %for.body606
                                        #   in Loop: Header=BB18_81 Depth=1
	movl	$0, -16(%rbp)
.LBB18_83:                              # %for.cond607
                                        #   Parent Loop BB18_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB18_86
# %bb.84:                               # %for.body610
                                        #   in Loop: Header=BB18_83 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.85:                               # %for.inc618
                                        #   in Loop: Header=BB18_83 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB18_83
.LBB18_86:                              # %for.end620
                                        #   in Loop: Header=BB18_81 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB18_87:                              # %for.cond639
                                        #   Parent Loop BB18_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB18_90
# %bb.88:                               # %for.body642
                                        #   in Loop: Header=BB18_87 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.89:                               # %for.inc664
                                        #   in Loop: Header=BB18_87 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB18_87
.LBB18_90:                              # %for.end666
                                        #   in Loop: Header=BB18_81 Depth=1
	jmp	.LBB18_91
.LBB18_91:                              # %for.inc667
                                        #   in Loop: Header=BB18_81 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB18_81
.LBB18_92:                              # %for.end669
	movl	$0, -16(%rbp)
.LBB18_93:                              # %for.cond670
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_95 Depth 2
                                        #     Child Loop BB18_99 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB18_122
# %bb.94:                               # %for.body673
                                        #   in Loop: Header=BB18_93 Depth=1
	movl	$0, -12(%rbp)
.LBB18_95:                              # %for.cond674
                                        #   Parent Loop BB18_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB18_98
# %bb.96:                               # %for.body677
                                        #   in Loop: Header=BB18_95 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.97:                               # %for.inc685
                                        #   in Loop: Header=BB18_95 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB18_95
.LBB18_98:                              # %for.end687
                                        #   in Loop: Header=BB18_93 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB18_99:                              # %for.cond706
                                        #   Parent Loop BB18_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB18_120
# %bb.100:                              # %for.body709
                                        #   in Loop: Header=BB18_99 Depth=2
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-24(%rbp), %rsi
	addl	-96(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB18_102
# %bb.101:                              # %cond.true720
                                        #   in Loop: Header=BB18_99 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB18_103
.LBB18_102:                             # %cond.false721
                                        #   in Loop: Header=BB18_99 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-24(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB18_103:                             # %cond.end729
                                        #   in Loop: Header=BB18_99 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB18_105
# %bb.104:                              # %cond.true733
                                        #   in Loop: Header=BB18_99 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB18_109
.LBB18_105:                             # %cond.false735
                                        #   in Loop: Header=BB18_99 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-24(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB18_107
# %bb.106:                              # %cond.true745
                                        #   in Loop: Header=BB18_99 Depth=2
	xorl	%eax, %eax
	jmp	.LBB18_108
.LBB18_107:                             # %cond.false746
                                        #   in Loop: Header=BB18_99 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-24(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB18_108:                             # %cond.end754
                                        #   in Loop: Header=BB18_99 Depth=2
.LBB18_109:                             # %cond.end756
                                        #   in Loop: Header=BB18_99 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-24(%rbp), %rsi
	subl	-96(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB18_111
# %bb.110:                              # %cond.true773
                                        #   in Loop: Header=BB18_99 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB18_112
.LBB18_111:                             # %cond.false774
                                        #   in Loop: Header=BB18_99 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-24(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB18_112:                             # %cond.end782
                                        #   in Loop: Header=BB18_99 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB18_114
# %bb.113:                              # %cond.true786
                                        #   in Loop: Header=BB18_99 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB18_118
.LBB18_114:                             # %cond.false788
                                        #   in Loop: Header=BB18_99 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-24(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB18_116
# %bb.115:                              # %cond.true798
                                        #   in Loop: Header=BB18_99 Depth=2
	xorl	%eax, %eax
	jmp	.LBB18_117
.LBB18_116:                             # %cond.false799
                                        #   in Loop: Header=BB18_99 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-24(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB18_117:                             # %cond.end807
                                        #   in Loop: Header=BB18_99 Depth=2
.LBB18_118:                             # %cond.end809
                                        #   in Loop: Header=BB18_99 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.119:                              # %for.inc816
                                        #   in Loop: Header=BB18_99 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB18_99
.LBB18_120:                             # %for.end818
                                        #   in Loop: Header=BB18_93 Depth=1
	jmp	.LBB18_121
.LBB18_121:                             # %for.inc819
                                        #   in Loop: Header=BB18_93 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB18_93
.LBB18_122:                             # %for.end821
	movl	$0, -12(%rbp)
.LBB18_123:                             # %for.cond822
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_125 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB18_130
# %bb.124:                              # %for.body825
                                        #   in Loop: Header=BB18_123 Depth=1
	movl	$0, -16(%rbp)
.LBB18_125:                             # %for.cond826
                                        #   Parent Loop BB18_123 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB18_128
# %bb.126:                              # %for.body829
                                        #   in Loop: Header=BB18_125 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-120(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-124(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.127:                              # %for.inc844
                                        #   in Loop: Header=BB18_125 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB18_125
.LBB18_128:                             # %for.end846
                                        #   in Loop: Header=BB18_123 Depth=1
	jmp	.LBB18_129
.LBB18_129:                             # %for.inc847
                                        #   in Loop: Header=BB18_123 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB18_123
.LBB18_130:                             # %for.end849
	movl	-196(%rbp), %ebx
	cmpl	$2098526133, -212(%rbp) # imm = 0x7D14F7B5
	jne	.LBB18_132
.LBB18_131:
	movl	%ebx, %eax
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_132:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB18_131
.Lfunc_end18:
	.size	dct_luma_sp.9, .Lfunc_end18-dct_luma_sp.9
	.cfi_endproc
                                        # -- End function
	.globl	intrapred_luma.10       # -- Begin function intrapred_luma.10
	.p2align	4, 0x90
	.type	intrapred_luma.10,@function
intrapred_luma.10:                      # @intrapred_luma.10
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$320, %rsp              # imm = 0x140
	movl	$759923346, -172(%rbp)  # imm = 0x2D4B8292
	movl	%edi, -108(%rbp)
	movl	%esi, -112(%rbp)
	movq	%rdx, -224(%rbp)
	movq	%rcx, -208(%rbp)
	movq	%r8, -216(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	-108(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -84(%rbp)
	movl	-112(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -88(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -104(%rbp)
	movl	$0, -4(%rbp)
.LBB19_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB19_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB19_1 Depth=1
	movl	-104(%rbp), %edi
	movl	-84(%rbp), %esi
	subl	$1, %esi
	movl	-88(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-320(%rbp), %r8
	addq	%rax, %r8
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB19_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_1
.LBB19_4:                               # %for.end
	movl	-104(%rbp), %edi
	movl	-84(%rbp), %esi
	movl	-88(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-168(%rbp), %r8
	callq	getNeighbour
	movl	-104(%rbp), %edi
	movl	-84(%rbp), %esi
	addl	$4, %esi
	movl	-88(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-144(%rbp), %r8
	callq	getNeighbour
	movl	-104(%rbp), %edi
	movl	-84(%rbp), %esi
	subl	$1, %esi
	movl	-88(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-200(%rbp), %r8
	callq	getNeighbour
	xorl	%eax, %eax
	cmpl	$0, -144(%rbp)
	je	.LBB19_11
# %bb.5:                                # %land.rhs
	cmpl	$4, -84(%rbp)
	je	.LBB19_7
# %bb.6:                                # %lor.lhs.false
	xorl	%eax, %eax
	cmpl	$12, -84(%rbp)
	jne	.LBB19_10
.LBB19_7:                               # %land.rhs10
	cmpl	$4, -88(%rbp)
	movb	$1, %al
	je	.LBB19_9
# %bb.8:                                # %lor.rhs
	cmpl	$12, -88(%rbp)
	sete	%al
.LBB19_9:                               # %lor.end
.LBB19_10:                              # %land.end
	xorb	$-1, %al
.LBB19_11:                              # %land.end13
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -144(%rbp)
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB19_29
# %bb.12:                               # %if.then
	movl	$0, -4(%rbp)
	movl	$1, -68(%rbp)
.LBB19_13:                              # %for.cond16
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB19_19
# %bb.14:                               # %for.body18
                                        #   in Loop: Header=BB19_13 Depth=1
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB19_16
# %bb.15:                               # %cond.true
                                        #   in Loop: Header=BB19_13 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB19_17
.LBB19_16:                              # %cond.false
                                        #   in Loop: Header=BB19_13 Depth=1
	xorl	%eax, %eax
	jmp	.LBB19_17
.LBB19_17:                              # %cond.end
                                        #   in Loop: Header=BB19_13 Depth=1
	andl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.18:                               # %for.inc28
                                        #   in Loop: Header=BB19_13 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_13
.LBB19_19:                              # %for.end30
	cmpl	$0, -168(%rbp)
	je	.LBB19_21
# %bb.20:                               # %cond.true33
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-164(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB19_22
.LBB19_21:                              # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB19_22
.LBB19_22:                              # %cond.end39
	movl	%eax, -72(%rbp)
	cmpl	$0, -144(%rbp)
	je	.LBB19_24
# %bb.23:                               # %cond.true43
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-140(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB19_25
.LBB19_24:                              # %cond.false48
	xorl	%eax, %eax
	jmp	.LBB19_25
.LBB19_25:                              # %cond.end49
	movl	%eax, -116(%rbp)
	cmpl	$0, -200(%rbp)
	je	.LBB19_27
# %bb.26:                               # %cond.true53
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-196(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB19_28
.LBB19_27:                              # %cond.false58
	xorl	%eax, %eax
	jmp	.LBB19_28
.LBB19_28:                              # %cond.end59
	movl	%eax, -100(%rbp)
	jmp	.LBB19_30
.LBB19_29:                              # %if.else
	movl	-320(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-168(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-144(%rbp), %eax
	movl	%eax, -116(%rbp)
	movl	-200(%rbp), %eax
	movl	%eax, -100(%rbp)
.LBB19_30:                              # %if.end
	xorl	%eax, %eax
	movl	-68(%rbp), %ecx
	movq	-224(%rbp), %rdx
	movl	%ecx, (%rdx)
	movl	-72(%rbp), %ecx
	movq	-208(%rbp), %rdx
	movl	%ecx, (%rdx)
	cmpl	$0, -72(%rbp)
	je	.LBB19_33
# %bb.31:                               # %land.lhs.true
	xorl	%eax, %eax
	cmpl	$0, -68(%rbp)
	je	.LBB19_33
# %bb.32:                               # %land.rhs68
	cmpl	$0, -100(%rbp)
	setne	%al
.LBB19_33:                              # %land.end70
	andb	$1, %al
	movzbl	%al, %eax
	movq	-216(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-108(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -4(%rbp)
	movl	-112(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -96(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB19_35
# %bb.34:                               # %if.then75
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -60(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -56(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -52(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB19_36
.LBB19_35:                              # %if.else109
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -48(%rbp)
	movl	%eax, -52(%rbp)
	movl	%eax, -56(%rbp)
	movl	%eax, -60(%rbp)
.LBB19_36:                              # %if.end114
	cmpl	$0, -116(%rbp)
	je	.LBB19_38
# %bb.37:                               # %if.then116
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -44(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -40(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -36(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB19_39
.LBB19_38:                              # %if.else153
	movl	-48(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	%eax, -36(%rbp)
	movl	%eax, -40(%rbp)
	movl	%eax, -44(%rbp)
.LBB19_39:                              # %if.end159
	cmpl	$0, -68(%rbp)
	je	.LBB19_41
# %bb.40:                               # %if.then161
	movq	-80(%rbp), %rax
	movslq	-300(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-304(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -28(%rbp)
	movq	-80(%rbp), %rax
	movslq	-276(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-280(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-80(%rbp), %rax
	movslq	-252(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-256(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-80(%rbp), %rax
	movslq	-228(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-232(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB19_42
.LBB19_41:                              # %if.else202
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -16(%rbp)
	movl	%eax, -20(%rbp)
	movl	%eax, -24(%rbp)
	movl	%eax, -28(%rbp)
.LBB19_42:                              # %if.end208
	cmpl	$0, -100(%rbp)
	je	.LBB19_44
# %bb.43:                               # %if.then210
	movq	-80(%rbp), %rax
	movslq	-180(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-184(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB19_45
.LBB19_44:                              # %if.else219
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -64(%rbp)
.LBB19_45:                              # %if.end222
	movl	$0, -4(%rbp)
.LBB19_46:                              # %for.cond223
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$9, -4(%rbp)
	jge	.LBB19_49
# %bb.47:                               # %for.body226
                                        #   in Loop: Header=BB19_46 Depth=1
	movq	img, %rax
	addq	$184, %rax
	movslq	-4(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movw	$-1, (%rax)
# %bb.48:                               # %for.inc231
                                        #   in Loop: Header=BB19_46 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_46
.LBB19_49:                              # %for.end233
	movl	$0, -92(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB19_52
# %bb.50:                               # %land.lhs.true235
	cmpl	$0, -68(%rbp)
	je	.LBB19_52
# %bb.51:                               # %if.then237
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$4, %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	jmp	.LBB19_61
.LBB19_52:                              # %if.else254
	cmpl	$0, -72(%rbp)
	jne	.LBB19_55
# %bb.53:                               # %land.lhs.true256
	cmpl	$0, -68(%rbp)
	je	.LBB19_55
# %bb.54:                               # %if.then258
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	jmp	.LBB19_60
.LBB19_55:                              # %if.else268
	cmpl	$0, -72(%rbp)
	je	.LBB19_58
# %bb.56:                               # %land.lhs.true270
	cmpl	$0, -68(%rbp)
	jne	.LBB19_58
# %bb.57:                               # %if.then272
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	jmp	.LBB19_59
.LBB19_58:                              # %if.else282
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -92(%rbp)
.LBB19_59:                              # %if.end284
	jmp	.LBB19_60
.LBB19_60:                              # %if.end285
	jmp	.LBB19_61
.LBB19_61:                              # %if.end286
	movl	$0, -96(%rbp)
.LBB19_62:                              # %for.cond287
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_64 Depth 2
	cmpl	$4, -96(%rbp)
	jge	.LBB19_69
# %bb.63:                               # %for.body290
                                        #   in Loop: Header=BB19_62 Depth=1
	movl	$0, -4(%rbp)
.LBB19_64:                              # %for.cond291
                                        #   Parent Loop BB19_62 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB19_67
# %bb.65:                               # %for.body294
                                        #   in Loop: Header=BB19_64 Depth=2
	movl	-92(%rbp), %eax
	movq	img, %rcx
	addq	$184, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-96(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.66:                               # %for.inc302
                                        #   in Loop: Header=BB19_64 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_64
.LBB19_67:                              # %for.end304
                                        #   in Loop: Header=BB19_62 Depth=1
	jmp	.LBB19_68
.LBB19_68:                              # %for.inc305
                                        #   in Loop: Header=BB19_62 Depth=1
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB19_62
.LBB19_69:                              # %for.end307
	movl	$0, -4(%rbp)
.LBB19_70:                              # %for.cond308
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB19_73
# %bb.71:                               # %for.body311
                                        #   in Loop: Header=BB19_70 Depth=1
	movslq	-4(%rbp), %rax
	movl	-60(%rbp,%rax,4), %eax
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 280(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 248(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 216(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 184(%rcx,%rdx,2)
	movslq	-4(%rbp), %rax
	movl	-28(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 6(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 4(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, (%rcx)
# %bb.72:                               # %for.inc360
                                        #   in Loop: Header=BB19_70 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_70
.LBB19_73:                              # %for.end362
	cmpl	$0, -72(%rbp)
	jne	.LBB19_75
# %bb.74:                               # %if.then364
	movq	img, %rax
	movw	$-1, 184(%rax)
.LBB19_75:                              # %if.end369
	cmpl	$0, -68(%rbp)
	jne	.LBB19_77
# %bb.76:                               # %if.then371
	movq	img, %rax
	movw	$-1, 696(%rax)
.LBB19_77:                              # %if.end376
	cmpl	$0, -72(%rbp)
	je	.LBB19_79
# %bb.78:                               # %if.then378
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1720(%rdx)
	movl	-56(%rbp), %eax
	addl	-48(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1752(%rdx)
	movq	img, %rdx
	movw	%ax, 1722(%rdx)
	movl	-52(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	-48(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1784(%rdx)
	movq	img, %rdx
	movw	%ax, 1754(%rdx)
	movq	img, %rdx
	movw	%ax, 1724(%rdx)
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	-44(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1816(%rdx)
	movq	img, %rdx
	movw	%ax, 1786(%rdx)
	movq	img, %rdx
	movw	%ax, 1756(%rdx)
	movq	img, %rdx
	movw	%ax, 1726(%rdx)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	-40(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1818(%rdx)
	movq	img, %rdx
	movw	%ax, 1788(%rdx)
	movq	img, %rdx
	movw	%ax, 1758(%rdx)
	movl	-40(%rbp), %eax
	addl	-32(%rbp), %eax
	movl	-36(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1820(%rdx)
	movq	img, %rdx
	movw	%ax, 1790(%rdx)
	movl	-36(%rbp), %eax
	imull	$3, -32(%rbp), %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1822(%rdx)
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3768(%rdx)
	movl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3832(%rdx)
	movq	img, %rdx
	movw	%ax, 3770(%rdx)
	movl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3834(%rdx)
	movq	img, %rdx
	movw	%ax, 3772(%rdx)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3836(%rdx)
	movq	img, %rdx
	movw	%ax, 3774(%rdx)
	movl	-44(%rbp), %eax
	addl	-40(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3838(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3800(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3864(%rdx)
	movq	img, %rdx
	movw	%ax, 3802(%rdx)
	movl	-52(%rbp), %eax
	movl	-48(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-44(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3866(%rdx)
	movq	img, %rdx
	movw	%ax, 3804(%rdx)
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-40(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3868(%rdx)
	movq	img, %rdx
	movw	%ax, 3806(%rdx)
	movl	-44(%rbp), %eax
	movl	-40(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-36(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 3870(%rcx)
.LBB19_79:                              # %if.end642
	cmpl	$0, -68(%rbp)
	je	.LBB19_81
# %bb.80:                               # %if.then644
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rcx
	movw	%ax, 4280(%rcx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 4282(%rdx)
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 4312(%rdx)
	movq	img, %rdx
	movw	%ax, 4284(%rdx)
	movl	-24(%rbp), %eax
	movl	-20(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 4314(%rdx)
	movq	img, %rdx
	movw	%ax, 4286(%rdx)
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 4344(%rdx)
	movq	img, %rdx
	movw	%ax, 4316(%rdx)
	movl	-20(%rbp), %eax
	movl	-16(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 4346(%rcx)
	movq	img, %rcx
	movw	%ax, 4318(%rcx)
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movw	%ax, 4382(%rcx)
	movq	img, %rcx
	movw	%ax, 4380(%rcx)
	movq	img, %rcx
	movw	%ax, 4378(%rcx)
	movq	img, %rcx
	movw	%ax, 4350(%rcx)
	movq	img, %rcx
	movw	%ax, 4348(%rcx)
	movq	img, %rcx
	movw	%ax, 4376(%rcx)
.LBB19_81:                              # %if.end756
	cmpl	$0, -72(%rbp)
	je	.LBB19_85
# %bb.82:                               # %land.lhs.true758
	cmpl	$0, -68(%rbp)
	je	.LBB19_85
# %bb.83:                               # %land.lhs.true760
	cmpl	$0, -100(%rbp)
	je	.LBB19_85
# %bb.84:                               # %if.then762
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2328(%rdx)
	movl	-20(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-28(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2330(%rdx)
	movq	img, %rdx
	movw	%ax, 2296(%rdx)
	movl	-24(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-64(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2332(%rdx)
	movq	img, %rdx
	movw	%ax, 2298(%rdx)
	movq	img, %rdx
	movw	%ax, 2264(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2334(%rdx)
	movq	img, %rdx
	movw	%ax, 2300(%rdx)
	movq	img, %rdx
	movw	%ax, 2266(%rdx)
	movq	img, %rdx
	movw	%ax, 2232(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2302(%rdx)
	movq	img, %rdx
	movw	%ax, 2268(%rdx)
	movq	img, %rdx
	movw	%ax, 2234(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2270(%rdx)
	movq	img, %rdx
	movw	%ax, 2236(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2238(%rdx)
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2810(%rdx)
	movq	img, %rdx
	movw	%ax, 2744(%rdx)
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2812(%rdx)
	movq	img, %rdx
	movw	%ax, 2746(%rdx)
	movl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2814(%rdx)
	movq	img, %rdx
	movw	%ax, 2748(%rdx)
	movl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2750(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2842(%rdx)
	movq	img, %rdx
	movw	%ax, 2776(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2844(%rdx)
	movq	img, %rdx
	movw	%ax, 2778(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2846(%rdx)
	movq	img, %rdx
	movw	%ax, 2780(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2782(%rdx)
	movl	-64(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2808(%rdx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2840(%rdx)
	movl	-64(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3292(%rdx)
	movq	img, %rdx
	movw	%ax, 3256(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3294(%rdx)
	movq	img, %rdx
	movw	%ax, 3258(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3260(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3262(%rdx)
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3324(%rdx)
	movq	img, %rdx
	movw	%ax, 3288(%rdx)
	movl	-64(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3326(%rdx)
	movq	img, %rdx
	movw	%ax, 3290(%rdx)
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3356(%rdx)
	movq	img, %rdx
	movw	%ax, 3320(%rdx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3358(%rdx)
	movq	img, %rdx
	movw	%ax, 3322(%rdx)
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3352(%rdx)
	movl	-24(%rbp), %eax
	movl	-20(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 3354(%rcx)
.LBB19_85:                              # %if.end1174
	cmpl	$759923346, -172(%rbp)  # imm = 0x2D4B8292
	jne	.LBB19_87
.LBB19_86:
	addq	$320, %rsp              # imm = 0x140
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_87:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB19_86
.Lfunc_end19:
	.size	intrapred_luma.10, .Lfunc_end19-intrapred_luma.10
	.cfi_endproc
                                        # -- End function
	.globl	intrapred_luma_16x16.11 # -- Begin function intrapred_luma_16x16.11
	.p2align	4, 0x90
	.type	intrapred_luma_16x16.11,@function
intrapred_luma_16x16.11:                # @intrapred_luma_16x16.11
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$640, %rsp              # imm = 0x280
	movl	$1516678047, -92(%rbp)  # imm = 0x5A66AB9F
	movl	$0, -32(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -60(%rbp)
	movl	$0, -4(%rbp)
.LBB20_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -4(%rbp)
	jge	.LBB20_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB20_1 Depth=1
	movl	-60(%rbp), %edi
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-512(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB20_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB20_1
.LBB20_4:                               # %for.end
	movl	-60(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	leaq	-88(%rbp), %r8
	callq	getNeighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	jne	.LBB20_6
# %bb.5:                                # %if.then
	movl	-88(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	-488(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-512(%rbp), %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB20_20
.LBB20_6:                               # %if.else
	cmpl	$0, -88(%rbp)
	je	.LBB20_8
# %bb.7:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-84(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB20_9
.LBB20_8:                               # %cond.false
	xorl	%eax, %eax
	jmp	.LBB20_9
.LBB20_9:                               # %cond.end
	movl	%eax, -16(%rbp)
	movl	$1, -4(%rbp)
	movl	$1, -12(%rbp)
.LBB20_10:                              # %for.cond9
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -4(%rbp)
	jge	.LBB20_16
# %bb.11:                               # %for.body11
                                        #   in Loop: Header=BB20_10 Depth=1
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-512(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB20_13
# %bb.12:                               # %cond.true16
                                        #   in Loop: Header=BB20_10 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB20_14
.LBB20_13:                              # %cond.false23
                                        #   in Loop: Header=BB20_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB20_14
.LBB20_14:                              # %cond.end24
                                        #   in Loop: Header=BB20_10 Depth=1
	andl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.15:                               # %for.inc26
                                        #   in Loop: Header=BB20_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB20_10
.LBB20_16:                              # %for.end28
	cmpl	$0, -512(%rbp)
	je	.LBB20_18
# %bb.17:                               # %cond.true32
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-508(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB20_19
.LBB20_18:                              # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB20_19
.LBB20_19:                              # %cond.end39
	movl	%eax, -64(%rbp)
.LBB20_20:                              # %if.end
	movl	$0, -44(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -4(%rbp)
.LBB20_21:                              # %for.cond41
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -4(%rbp)
	jge	.LBB20_28
# %bb.22:                               # %for.body43
                                        #   in Loop: Header=BB20_21 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB20_24
# %bb.23:                               # %if.then45
                                        #   in Loop: Header=BB20_21 Depth=1
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB20_24:                              # %if.end51
                                        #   in Loop: Header=BB20_21 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB20_26
# %bb.25:                               # %if.then53
                                        #   in Loop: Header=BB20_21 Depth=1
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB20_26:                              # %if.end68
                                        #   in Loop: Header=BB20_21 Depth=1
	jmp	.LBB20_27
.LBB20_27:                              # %for.inc69
                                        #   in Loop: Header=BB20_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB20_21
.LBB20_28:                              # %for.end71
	cmpl	$0, -16(%rbp)
	je	.LBB20_31
# %bb.29:                               # %land.lhs.true
	cmpl	$0, -12(%rbp)
	je	.LBB20_31
# %bb.30:                               # %if.then74
	movl	-36(%rbp), %eax
	addl	-44(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
	movl	%eax, -32(%rbp)
.LBB20_31:                              # %if.end77
	cmpl	$0, -16(%rbp)
	jne	.LBB20_34
# %bb.32:                               # %land.lhs.true79
	cmpl	$0, -12(%rbp)
	je	.LBB20_34
# %bb.33:                               # %if.then81
	movl	-44(%rbp), %eax
	addl	$8, %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -32(%rbp)
.LBB20_34:                              # %if.end84
	cmpl	$0, -16(%rbp)
	je	.LBB20_37
# %bb.35:                               # %land.lhs.true86
	cmpl	$0, -12(%rbp)
	jne	.LBB20_37
# %bb.36:                               # %if.then88
	movl	-36(%rbp), %eax
	addl	$8, %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -32(%rbp)
.LBB20_37:                              # %if.end91
	cmpl	$0, -16(%rbp)
	jne	.LBB20_40
# %bb.38:                               # %land.lhs.true93
	cmpl	$0, -12(%rbp)
	jne	.LBB20_40
# %bb.39:                               # %if.then95
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -32(%rbp)
.LBB20_40:                              # %if.end96
	movl	$0, -4(%rbp)
.LBB20_41:                              # %for.cond97
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -4(%rbp)
	jge	.LBB20_48
# %bb.42:                               # %for.body100
                                        #   in Loop: Header=BB20_41 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB20_44
# %bb.43:                               # %if.then102
                                        #   in Loop: Header=BB20_41 Depth=1
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -640(%rbp,%rcx,8)
.LBB20_44:                              # %if.end114
                                        #   in Loop: Header=BB20_41 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB20_46
# %bb.45:                               # %if.then116
                                        #   in Loop: Header=BB20_41 Depth=1
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -636(%rbp,%rcx,8)
.LBB20_46:                              # %if.end133
                                        #   in Loop: Header=BB20_41 Depth=1
	jmp	.LBB20_47
.LBB20_47:                              # %for.inc134
                                        #   in Loop: Header=BB20_41 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB20_41
.LBB20_48:                              # %for.end136
	movl	$0, -8(%rbp)
.LBB20_49:                              # %for.cond137
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_51 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB20_56
# %bb.50:                               # %for.body140
                                        #   in Loop: Header=BB20_49 Depth=1
	movl	$0, -4(%rbp)
.LBB20_51:                              # %for.cond141
                                        #   Parent Loop BB20_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB20_54
# %bb.52:                               # %for.body144
                                        #   in Loop: Header=BB20_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-640(%rbp,%rax,8), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-8(%rbp), %rax
	movl	-636(%rbp,%rax,8), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$512, %rcx              # imm = 0x200
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	-32(%rbp), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$1024, %rcx             # imm = 0x400
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.53:                               # %for.inc171
                                        #   in Loop: Header=BB20_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB20_51
.LBB20_54:                              # %for.end173
                                        #   in Loop: Header=BB20_49 Depth=1
	jmp	.LBB20_55
.LBB20_55:                              # %for.inc174
                                        #   in Loop: Header=BB20_49 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB20_49
.LBB20_56:                              # %for.end176
	cmpl	$0, -16(%rbp)
	je	.LBB20_59
# %bb.57:                               # %lor.lhs.false
	cmpl	$0, -12(%rbp)
	je	.LBB20_59
# %bb.58:                               # %lor.lhs.false179
	cmpl	$0, -64(%rbp)
	jne	.LBB20_60
.LBB20_59:                              # %if.then181
	jmp	.LBB20_85
.LBB20_60:                              # %if.end182
	movl	$0, -28(%rbp)
	movl	$0, -56(%rbp)
	movl	$1, -4(%rbp)
.LBB20_61:                              # %for.cond183
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$9, -4(%rbp)
	jge	.LBB20_67
# %bb.62:                               # %for.body186
                                        #   in Loop: Header=BB20_61 Depth=1
	cmpl	$8, -4(%rbp)
	jge	.LBB20_64
# %bb.63:                               # %if.then189
                                        #   in Loop: Header=BB20_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	addl	$7, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-24(%rbp), %rdx
	movslq	-68(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-72(%rbp), %esi
	addl	$7, %esi
	subl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB20_65
.LBB20_64:                              # %if.else210
                                        #   in Loop: Header=BB20_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	addl	$7, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-24(%rbp), %rdx
	movslq	-492(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-496(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB20_65:                              # %if.end232
                                        #   in Loop: Header=BB20_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	leaq	-512(%rbp), %rcx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movslq	20(%rdi), %rdx
	movq	(%rsi,%rdx,8), %rsi
	movl	-4(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movslq	16(%rdi), %rdx
	movzwl	(%rsi,%rdx,2), %r9d
	movq	-24(%rbp), %r8
	movl	$8, %edi
	movl	$8, %edx
	subl	-4(%rbp), %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	20(%rsi), %rdx
	movq	(%r8,%rdx,8), %rdx
	subl	-4(%rbp), %edi
	movslq	%edi, %rsi
	imulq	$24, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	16(%rcx), %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %r9d
	imull	%r9d, %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.66:                               # %for.inc262
                                        #   in Loop: Header=BB20_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB20_61
.LBB20_67:                              # %for.end264
	imull	$5, -28(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movl	%eax, -40(%rbp)
	imull	$5, -56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movl	%eax, -52(%rbp)
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	$15, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-108(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-112(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	shll	$4, %eax
	movl	%eax, -48(%rbp)
	movl	$0, -8(%rbp)
.LBB20_68:                              # %for.cond289
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_70 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB20_84
# %bb.69:                               # %for.body292
                                        #   in Loop: Header=BB20_68 Depth=1
	movl	$0, -4(%rbp)
.LBB20_70:                              # %for.cond293
                                        #   Parent Loop BB20_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB20_82
# %bb.71:                               # %for.body296
                                        #   in Loop: Header=BB20_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-48(%rbp), %eax
	movl	-4(%rbp), %edx
	subl	$7, %edx
	imull	-40(%rbp), %edx
	addl	%edx, %eax
	movl	-8(%rbp), %edx
	subl	$7, %edx
	imull	-52(%rbp), %edx
	addl	%edx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB20_73
# %bb.72:                               # %cond.true307
                                        #   in Loop: Header=BB20_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB20_74
.LBB20_73:                              # %cond.false309
                                        #   in Loop: Header=BB20_70 Depth=2
	movl	-48(%rbp), %eax
	movl	-4(%rbp), %ecx
	subl	$7, %ecx
	imull	-40(%rbp), %ecx
	addl	%ecx, %eax
	movl	-8(%rbp), %ecx
	subl	$7, %ecx
	imull	-52(%rbp), %ecx
	addl	%ecx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB20_74:                              # %cond.end318
                                        #   in Loop: Header=BB20_70 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB20_76
# %bb.75:                               # %cond.true322
                                        #   in Loop: Header=BB20_70 Depth=2
	xorl	%eax, %eax
	jmp	.LBB20_80
.LBB20_76:                              # %cond.false323
                                        #   in Loop: Header=BB20_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-48(%rbp), %eax
	movl	-4(%rbp), %edx
	subl	$7, %edx
	imull	-40(%rbp), %edx
	addl	%edx, %eax
	movl	-8(%rbp), %edx
	subl	$7, %edx
	imull	-52(%rbp), %edx
	addl	%edx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB20_78
# %bb.77:                               # %cond.true335
                                        #   in Loop: Header=BB20_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB20_79
.LBB20_78:                              # %cond.false337
                                        #   in Loop: Header=BB20_70 Depth=2
	movl	-48(%rbp), %eax
	movl	-4(%rbp), %ecx
	subl	$7, %ecx
	imull	-40(%rbp), %ecx
	addl	%ecx, %eax
	movl	-8(%rbp), %ecx
	subl	$7, %ecx
	imull	-52(%rbp), %ecx
	addl	%ecx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB20_79:                              # %cond.end346
                                        #   in Loop: Header=BB20_70 Depth=2
.LBB20_80:                              # %cond.end348
                                        #   in Loop: Header=BB20_70 Depth=2
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$1536, %rcx             # imm = 0x600
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.81:                               # %for.inc357
                                        #   in Loop: Header=BB20_70 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB20_70
.LBB20_82:                              # %for.end359
                                        #   in Loop: Header=BB20_68 Depth=1
	jmp	.LBB20_83
.LBB20_83:                              # %for.inc360
                                        #   in Loop: Header=BB20_68 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB20_68
.LBB20_84:                              # %for.end362.loopexit
	jmp	.LBB20_85
.LBB20_85:                              # %for.end362
	cmpl	$1516678047, -92(%rbp)  # imm = 0x5A66AB9F
	jne	.LBB20_87
.LBB20_86:
	addq	$640, %rsp              # imm = 0x280
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_87:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB20_86
.Lfunc_end20:
	.size	intrapred_luma_16x16.11, .Lfunc_end20-intrapred_luma_16x16.11
	.cfi_endproc
                                        # -- End function
	.globl	intrapred_luma_16x16.12 # -- Begin function intrapred_luma_16x16.12
	.p2align	4, 0x90
	.type	intrapred_luma_16x16.12,@function
intrapred_luma_16x16.12:                # @intrapred_luma_16x16.12
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$640, %rsp              # imm = 0x280
	movl	$1476598953, -92(%rbp)  # imm = 0x58031CA9
	movl	$0, -28(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB21_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -4(%rbp)
	jge	.LBB21_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	-64(%rbp), %edi
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-512(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_1
.LBB21_4:                               # %for.end
	movl	-64(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	leaq	-88(%rbp), %r8
	callq	getNeighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	jne	.LBB21_6
# %bb.5:                                # %if.then
	movl	-88(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	-488(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-512(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB21_20
.LBB21_6:                               # %if.else
	cmpl	$0, -88(%rbp)
	je	.LBB21_8
# %bb.7:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-84(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB21_9
.LBB21_8:                               # %cond.false
	xorl	%eax, %eax
	jmp	.LBB21_9
.LBB21_9:                               # %cond.end
	movl	%eax, -16(%rbp)
	movl	$1, -4(%rbp)
	movl	$1, -12(%rbp)
.LBB21_10:                              # %for.cond9
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -4(%rbp)
	jge	.LBB21_16
# %bb.11:                               # %for.body11
                                        #   in Loop: Header=BB21_10 Depth=1
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-512(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB21_13
# %bb.12:                               # %cond.true16
                                        #   in Loop: Header=BB21_10 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB21_14
.LBB21_13:                              # %cond.false23
                                        #   in Loop: Header=BB21_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB21_14
.LBB21_14:                              # %cond.end24
                                        #   in Loop: Header=BB21_10 Depth=1
	andl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.15:                               # %for.inc26
                                        #   in Loop: Header=BB21_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_10
.LBB21_16:                              # %for.end28
	cmpl	$0, -512(%rbp)
	je	.LBB21_18
# %bb.17:                               # %cond.true32
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-508(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB21_19
.LBB21_18:                              # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB21_19
.LBB21_19:                              # %cond.end39
	movl	%eax, -60(%rbp)
.LBB21_20:                              # %if.end
	movl	$0, -48(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -4(%rbp)
.LBB21_21:                              # %for.cond41
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -4(%rbp)
	jge	.LBB21_28
# %bb.22:                               # %for.body43
                                        #   in Loop: Header=BB21_21 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB21_24
# %bb.23:                               # %if.then45
                                        #   in Loop: Header=BB21_21 Depth=1
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB21_24:                              # %if.end51
                                        #   in Loop: Header=BB21_21 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB21_26
# %bb.25:                               # %if.then53
                                        #   in Loop: Header=BB21_21 Depth=1
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB21_26:                              # %if.end68
                                        #   in Loop: Header=BB21_21 Depth=1
	jmp	.LBB21_27
.LBB21_27:                              # %for.inc69
                                        #   in Loop: Header=BB21_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_21
.LBB21_28:                              # %for.end71
	cmpl	$0, -16(%rbp)
	je	.LBB21_31
# %bb.29:                               # %land.lhs.true
	cmpl	$0, -12(%rbp)
	je	.LBB21_31
# %bb.30:                               # %if.then74
	movl	-36(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
.LBB21_31:                              # %if.end77
	cmpl	$0, -16(%rbp)
	jne	.LBB21_34
# %bb.32:                               # %land.lhs.true79
	cmpl	$0, -12(%rbp)
	je	.LBB21_34
# %bb.33:                               # %if.then81
	movl	-48(%rbp), %eax
	addl	$8, %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
.LBB21_34:                              # %if.end84
	cmpl	$0, -16(%rbp)
	je	.LBB21_37
# %bb.35:                               # %land.lhs.true86
	cmpl	$0, -12(%rbp)
	jne	.LBB21_37
# %bb.36:                               # %if.then88
	movl	-36(%rbp), %eax
	addl	$8, %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
.LBB21_37:                              # %if.end91
	cmpl	$0, -16(%rbp)
	jne	.LBB21_40
# %bb.38:                               # %land.lhs.true93
	cmpl	$0, -12(%rbp)
	jne	.LBB21_40
# %bb.39:                               # %if.then95
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -28(%rbp)
.LBB21_40:                              # %if.end96
	movl	$0, -4(%rbp)
.LBB21_41:                              # %for.cond97
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -4(%rbp)
	jge	.LBB21_48
# %bb.42:                               # %for.body100
                                        #   in Loop: Header=BB21_41 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB21_44
# %bb.43:                               # %if.then102
                                        #   in Loop: Header=BB21_41 Depth=1
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -640(%rbp,%rcx,8)
.LBB21_44:                              # %if.end114
                                        #   in Loop: Header=BB21_41 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB21_46
# %bb.45:                               # %if.then116
                                        #   in Loop: Header=BB21_41 Depth=1
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -636(%rbp,%rcx,8)
.LBB21_46:                              # %if.end133
                                        #   in Loop: Header=BB21_41 Depth=1
	jmp	.LBB21_47
.LBB21_47:                              # %for.inc134
                                        #   in Loop: Header=BB21_41 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_41
.LBB21_48:                              # %for.end136
	movl	$0, -8(%rbp)
.LBB21_49:                              # %for.cond137
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_51 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB21_56
# %bb.50:                               # %for.body140
                                        #   in Loop: Header=BB21_49 Depth=1
	movl	$0, -4(%rbp)
.LBB21_51:                              # %for.cond141
                                        #   Parent Loop BB21_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB21_54
# %bb.52:                               # %for.body144
                                        #   in Loop: Header=BB21_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-640(%rbp,%rax,8), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-8(%rbp), %rax
	movl	-636(%rbp,%rax,8), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$512, %rcx              # imm = 0x200
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	-28(%rbp), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$1024, %rcx             # imm = 0x400
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.53:                               # %for.inc171
                                        #   in Loop: Header=BB21_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_51
.LBB21_54:                              # %for.end173
                                        #   in Loop: Header=BB21_49 Depth=1
	jmp	.LBB21_55
.LBB21_55:                              # %for.inc174
                                        #   in Loop: Header=BB21_49 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB21_49
.LBB21_56:                              # %for.end176
	cmpl	$0, -16(%rbp)
	je	.LBB21_59
# %bb.57:                               # %lor.lhs.false
	cmpl	$0, -12(%rbp)
	je	.LBB21_59
# %bb.58:                               # %lor.lhs.false179
	cmpl	$0, -60(%rbp)
	jne	.LBB21_60
.LBB21_59:                              # %if.then181
	jmp	.LBB21_85
.LBB21_60:                              # %if.end182
	movl	$0, -32(%rbp)
	movl	$0, -56(%rbp)
	movl	$1, -4(%rbp)
.LBB21_61:                              # %for.cond183
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$9, -4(%rbp)
	jge	.LBB21_67
# %bb.62:                               # %for.body186
                                        #   in Loop: Header=BB21_61 Depth=1
	cmpl	$8, -4(%rbp)
	jge	.LBB21_64
# %bb.63:                               # %if.then189
                                        #   in Loop: Header=BB21_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	addl	$7, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-24(%rbp), %rdx
	movslq	-68(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-72(%rbp), %esi
	addl	$7, %esi
	subl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB21_65
.LBB21_64:                              # %if.else210
                                        #   in Loop: Header=BB21_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	addl	$7, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-24(%rbp), %rdx
	movslq	-492(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-496(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
.LBB21_65:                              # %if.end232
                                        #   in Loop: Header=BB21_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	leaq	-512(%rbp), %rcx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movslq	20(%rdi), %rdx
	movq	(%rsi,%rdx,8), %rsi
	movl	-4(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movslq	16(%rdi), %rdx
	movzwl	(%rsi,%rdx,2), %r9d
	movq	-24(%rbp), %r8
	movl	$8, %edi
	movl	$8, %edx
	subl	-4(%rbp), %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	20(%rsi), %rdx
	movq	(%r8,%rdx,8), %rdx
	subl	-4(%rbp), %edi
	movslq	%edi, %rsi
	imulq	$24, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	16(%rcx), %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %r9d
	imull	%r9d, %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.66:                               # %for.inc262
                                        #   in Loop: Header=BB21_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_61
.LBB21_67:                              # %for.end264
	imull	$5, -32(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movl	%eax, -44(%rbp)
	imull	$5, -56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movl	%eax, -40(%rbp)
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	$15, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-108(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-112(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	shll	$4, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -8(%rbp)
.LBB21_68:                              # %for.cond289
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_70 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB21_84
# %bb.69:                               # %for.body292
                                        #   in Loop: Header=BB21_68 Depth=1
	movl	$0, -4(%rbp)
.LBB21_70:                              # %for.cond293
                                        #   Parent Loop BB21_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB21_82
# %bb.71:                               # %for.body296
                                        #   in Loop: Header=BB21_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-52(%rbp), %eax
	movl	-4(%rbp), %edx
	subl	$7, %edx
	imull	-44(%rbp), %edx
	addl	%edx, %eax
	movl	-8(%rbp), %edx
	subl	$7, %edx
	imull	-40(%rbp), %edx
	addl	%edx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB21_73
# %bb.72:                               # %cond.true307
                                        #   in Loop: Header=BB21_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_74
.LBB21_73:                              # %cond.false309
                                        #   in Loop: Header=BB21_70 Depth=2
	movl	-52(%rbp), %eax
	movl	-4(%rbp), %ecx
	subl	$7, %ecx
	imull	-44(%rbp), %ecx
	addl	%ecx, %eax
	movl	-8(%rbp), %ecx
	subl	$7, %ecx
	imull	-40(%rbp), %ecx
	addl	%ecx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB21_74:                              # %cond.end318
                                        #   in Loop: Header=BB21_70 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB21_76
# %bb.75:                               # %cond.true322
                                        #   in Loop: Header=BB21_70 Depth=2
	xorl	%eax, %eax
	jmp	.LBB21_80
.LBB21_76:                              # %cond.false323
                                        #   in Loop: Header=BB21_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-52(%rbp), %eax
	movl	-4(%rbp), %edx
	subl	$7, %edx
	imull	-44(%rbp), %edx
	addl	%edx, %eax
	movl	-8(%rbp), %edx
	subl	$7, %edx
	imull	-40(%rbp), %edx
	addl	%edx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB21_78
# %bb.77:                               # %cond.true335
                                        #   in Loop: Header=BB21_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_79
.LBB21_78:                              # %cond.false337
                                        #   in Loop: Header=BB21_70 Depth=2
	movl	-52(%rbp), %eax
	movl	-4(%rbp), %ecx
	subl	$7, %ecx
	imull	-44(%rbp), %ecx
	addl	%ecx, %eax
	movl	-8(%rbp), %ecx
	subl	$7, %ecx
	imull	-40(%rbp), %ecx
	addl	%ecx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB21_79:                              # %cond.end346
                                        #   in Loop: Header=BB21_70 Depth=2
.LBB21_80:                              # %cond.end348
                                        #   in Loop: Header=BB21_70 Depth=2
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$1536, %rcx             # imm = 0x600
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.81:                               # %for.inc357
                                        #   in Loop: Header=BB21_70 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_70
.LBB21_82:                              # %for.end359
                                        #   in Loop: Header=BB21_68 Depth=1
	jmp	.LBB21_83
.LBB21_83:                              # %for.inc360
                                        #   in Loop: Header=BB21_68 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB21_68
.LBB21_84:                              # %for.end362.loopexit
	jmp	.LBB21_85
.LBB21_85:                              # %for.end362
	cmpl	$1476598953, -92(%rbp)  # imm = 0x58031CA9
	jne	.LBB21_87
.LBB21_86:
	addq	$640, %rsp              # imm = 0x280
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_87:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB21_86
.Lfunc_end21:
	.size	intrapred_luma_16x16.12, .Lfunc_end21-intrapred_luma_16x16.12
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma4x4.13        # -- Begin function dct_chroma4x4.13
	.p2align	4, 0x90
	.type	dct_chroma4x4.13,@function
dct_chroma4x4.13:                       # @dct_chroma4x4.13
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$681567038, -148(%rbp)  # imm = 0x289FE33E
	movl	%edi, -28(%rbp)
	movl	%esi, -84(%rbp)
	movl	%edx, -100(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %cl
	je	.LBB22_3
# %bb.1:                                # %lor.lhs.false
	movq	-144(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %cl
	je	.LBB22_3
# %bb.2:                                # %lor.rhs
	movq	-144(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%cl
.LBB22_3:                               # %lor.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -80(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-84(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-100(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -160(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-84(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-100(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -168(%rbp)
	movq	img, %rcx
	movl	40(%rcx), %ecx
	movq	img, %rdx
	addl	72668(%rdx), %ecx
	cmpl	$0, %ecx
	jne	.LBB22_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%al
.LBB22_5:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movslq	-28(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	movl	%eax, -88(%rbp)
	cmpl	$0, -88(%rbp)
	jge	.LBB22_7
# %bb.6:                                # %cond.true
	movl	-88(%rbp), %eax
	jmp	.LBB22_8
.LBB22_7:                               # %cond.false
	movl	-88(%rbp), %eax
	subl	$0, %eax
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB22_8:                               # %cond.end
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-88(%rbp), %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -32(%rbp)
	movl	-24(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -108(%rbp)
	cmpl	$0, -36(%rbp)
	jne	.LBB22_18
# %bb.9:                                # %if.then
	movl	$0, -12(%rbp)
.LBB22_10:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_12 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB22_17
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB22_10 Depth=1
	movl	$0, -16(%rbp)
.LBB22_12:                              # %for.cond31
                                        #   Parent Loop BB22_10 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB22_15
# %bb.13:                               # %for.body34
                                        #   in Loop: Header=BB22_12 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-72(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-72(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-72(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB22_12 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB22_12
.LBB22_15:                              # %for.end
                                        #   in Loop: Header=BB22_10 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.16:                               # %for.inc90
                                        #   in Loop: Header=BB22_10 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB22_10
.LBB22_17:                              # %for.end92
	jmp	.LBB22_18
.LBB22_18:                              # %if.end
	cmpl	$0, -36(%rbp)
	jne	.LBB22_28
# %bb.19:                               # %if.then94
	movl	$0, -16(%rbp)
.LBB22_20:                              # %for.cond95
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_22 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB22_27
# %bb.21:                               # %for.body98
                                        #   in Loop: Header=BB22_20 Depth=1
	movl	$0, -12(%rbp)
.LBB22_22:                              # %for.cond99
                                        #   Parent Loop BB22_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB22_25
# %bb.23:                               # %for.body102
                                        #   in Loop: Header=BB22_22 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-68(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-68(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-68(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.24:                               # %for.inc130
                                        #   in Loop: Header=BB22_22 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB22_22
.LBB22_25:                              # %for.end132
                                        #   in Loop: Header=BB22_20 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.26:                               # %for.inc163
                                        #   in Loop: Header=BB22_20 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB22_20
.LBB22_27:                              # %for.end165
	jmp	.LBB22_28
.LBB22_28:                              # %if.end166
	movl	$0, -132(%rbp)
	movl	$-1, -104(%rbp)
	movl	$0, -92(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB22_30
# %bb.29:                               # %if.then168
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movl	%eax, -20(%rbp)
	jmp	.LBB22_34
.LBB22_30:                              # %if.else
	cmpl	$1, -80(%rbp)
	jne	.LBB22_32
# %bb.31:                               # %if.then174
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-28(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB22_33
.LBB22_32:                              # %if.else193
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-28(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
.LBB22_33:                              # %if.end213
	jmp	.LBB22_34
.LBB22_34:                              # %if.end214
	movl	-28(%rbp), %eax
	addl	$1, %eax
	shll	$2, %eax
	movl	-84(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -84(%rbp)
	movl	-20(%rbp), %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movl	%eax, %ecx
	movslq	-28(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level_temp, %rdi
	addq	%rax, %rdi
	movl	-84(%rbp), %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %esi
	shll	$1, %esi
	movl	-100(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-84(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %esi
	shll	$1, %esi
	movl	-100(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%ecx, (%rdi,%rax,4)
	cmpl	$0, -36(%rbp)
	je	.LBB22_36
# %bb.35:                               # %if.then237
	movl	-20(%rbp), %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB22_46
.LBB22_36:                              # %if.else245
	cmpl	$4, -24(%rbp)
	jge	.LBB22_41
# %bb.37:                               # %if.then248
	cmpl	$1, -80(%rbp)
	jne	.LBB22_39
# %bb.38:                               # %if.then251
	movl	-20(%rbp), %edi
	movslq	-28(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	$3, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	addl	%eax, %edi
	movl	$4, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB22_40
.LBB22_39:                              # %if.else270
	movl	-20(%rbp), %edi
	movslq	-28(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	$3, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	addl	%eax, %edi
	movl	$4, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
.LBB22_40:                              # %if.end290
	jmp	.LBB22_45
.LBB22_41:                              # %if.else291
	cmpl	$1, -80(%rbp)
	jne	.LBB22_43
# %bb.42:                               # %if.then294
	movl	-20(%rbp), %edi
	movslq	-28(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	-24(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB22_44
.LBB22_43:                              # %if.else311
	movl	-20(%rbp), %edi
	movslq	-28(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	-24(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
.LBB22_44:                              # %if.end328
	jmp	.LBB22_45
.LBB22_45:                              # %if.end329
	jmp	.LBB22_46
.LBB22_46:                              # %if.end330
	movl	$1, -96(%rbp)
.LBB22_47:                              # %for.cond331
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -96(%rbp)
	jge	.LBB22_75
# %bb.48:                               # %for.body334
                                        #   in Loop: Header=BB22_47 Depth=1
	movslq	-96(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-96(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movl	-104(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -104(%rbp)
	movl	$0, -76(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB22_50
# %bb.49:                               # %if.then345
                                        #   in Loop: Header=BB22_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -20(%rbp)
	jmp	.LBB22_54
.LBB22_50:                              # %if.else352
                                        #   in Loop: Header=BB22_47 Depth=1
	cmpl	$1, -80(%rbp)
	jne	.LBB22_52
# %bb.51:                               # %if.then355
                                        #   in Loop: Header=BB22_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-28(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB22_53
.LBB22_52:                              # %if.else381
                                        #   in Loop: Header=BB22_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-28(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
.LBB22_53:                              # %if.end407
                                        #   in Loop: Header=BB22_47 Depth=1
	jmp	.LBB22_54
.LBB22_54:                              # %if.end408
                                        #   in Loop: Header=BB22_47 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB22_71
# %bb.55:                               # %if.then411
                                        #   in Loop: Header=BB22_47 Depth=1
	cmpl	$0, -16(%rbp)
	jne	.LBB22_57
# %bb.56:                               # %lor.lhs.false413
                                        #   in Loop: Header=BB22_47 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB22_58
.LBB22_57:                              # %if.then415
                                        #   in Loop: Header=BB22_47 Depth=1
	movl	$1, -132(%rbp)
.LBB22_58:                              # %if.end416
                                        #   in Loop: Header=BB22_47 Depth=1
	movl	-20(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-160(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-104(%rbp), %eax
	movq	-168(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	movl	$-1, -104(%rbp)
	movl	-20(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -20(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB22_60
# %bb.59:                               # %if.then435
                                        #   in Loop: Header=BB22_47 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB22_70
.LBB22_60:                              # %if.else436
                                        #   in Loop: Header=BB22_47 Depth=1
	cmpl	$4, -24(%rbp)
	jge	.LBB22_65
# %bb.61:                               # %if.then439
                                        #   in Loop: Header=BB22_47 Depth=1
	cmpl	$1, -80(%rbp)
	jne	.LBB22_63
# %bb.62:                               # %if.then442
                                        #   in Loop: Header=BB22_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB22_64
.LBB22_63:                              # %if.else457
                                        #   in Loop: Header=BB22_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -76(%rbp)
.LBB22_64:                              # %if.end472
                                        #   in Loop: Header=BB22_47 Depth=1
	jmp	.LBB22_69
.LBB22_65:                              # %if.else473
                                        #   in Loop: Header=BB22_47 Depth=1
	cmpl	$1, -80(%rbp)
	jne	.LBB22_67
# %bb.66:                               # %if.then476
                                        #   in Loop: Header=BB22_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-24(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB22_68
.LBB22_67:                              # %if.else488
                                        #   in Loop: Header=BB22_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-24(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -76(%rbp)
.LBB22_68:                              # %if.end500
                                        #   in Loop: Header=BB22_47 Depth=1
	jmp	.LBB22_69
.LBB22_69:                              # %if.end501
                                        #   in Loop: Header=BB22_47 Depth=1
	jmp	.LBB22_70
.LBB22_70:                              # %if.end502
                                        #   in Loop: Header=BB22_47 Depth=1
	jmp	.LBB22_71
.LBB22_71:                              # %if.end503
                                        #   in Loop: Header=BB22_47 Depth=1
	cmpl	$0, -36(%rbp)
	jne	.LBB22_73
# %bb.72:                               # %if.then505
                                        #   in Loop: Header=BB22_47 Depth=1
	movl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB22_73:                              # %if.end511
                                        #   in Loop: Header=BB22_47 Depth=1
	jmp	.LBB22_74
.LBB22_74:                              # %for.inc512
                                        #   in Loop: Header=BB22_47 Depth=1
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB22_47
.LBB22_75:                              # %for.end514
	movq	-160(%rbp), %rax
	movslq	-92(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	cmpl	$0, -36(%rbp)
	jne	.LBB22_89
# %bb.76:                               # %if.then518
	movl	$0, -12(%rbp)
.LBB22_77:                              # %for.cond519
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_79 Depth 2
                                        #     Child Loop BB22_83 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB22_88
# %bb.78:                               # %for.body522
                                        #   in Loop: Header=BB22_77 Depth=1
	movl	$0, -16(%rbp)
.LBB22_79:                              # %for.cond523
                                        #   Parent Loop BB22_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB22_82
# %bb.80:                               # %for.body526
                                        #   in Loop: Header=BB22_79 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.81:                               # %for.inc534
                                        #   in Loop: Header=BB22_79 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB22_79
.LBB22_82:                              # %for.end536
                                        #   in Loop: Header=BB22_77 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -16(%rbp)
.LBB22_83:                              # %for.cond555
                                        #   Parent Loop BB22_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB22_86
# %bb.84:                               # %for.body558
                                        #   in Loop: Header=BB22_83 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -72(%rbp)
	movslq	-16(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-72(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.85:                               # %for.inc580
                                        #   in Loop: Header=BB22_83 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB22_83
.LBB22_86:                              # %for.end582
                                        #   in Loop: Header=BB22_77 Depth=1
	jmp	.LBB22_87
.LBB22_87:                              # %for.inc583
                                        #   in Loop: Header=BB22_77 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB22_77
.LBB22_88:                              # %for.end585
	jmp	.LBB22_89
.LBB22_89:                              # %if.end586
	cmpl	$0, -36(%rbp)
	jne	.LBB22_103
# %bb.90:                               # %if.then588
	movl	$0, -16(%rbp)
.LBB22_91:                              # %for.cond589
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_93 Depth 2
                                        #     Child Loop BB22_97 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB22_102
# %bb.92:                               # %for.body592
                                        #   in Loop: Header=BB22_91 Depth=1
	movl	$0, -12(%rbp)
.LBB22_93:                              # %for.cond593
                                        #   Parent Loop BB22_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB22_96
# %bb.94:                               # %for.body596
                                        #   in Loop: Header=BB22_93 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.95:                               # %for.inc604
                                        #   in Loop: Header=BB22_93 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB22_93
.LBB22_96:                              # %for.end606
                                        #   in Loop: Header=BB22_91 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -12(%rbp)
.LBB22_97:                              # %for.cond625
                                        #   Parent Loop BB22_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB22_100
# %bb.98:                               # %for.body628
                                        #   in Loop: Header=BB22_97 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movslq	-12(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.99:                               # %for.inc654
                                        #   in Loop: Header=BB22_97 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB22_97
.LBB22_100:                             # %for.end656
                                        #   in Loop: Header=BB22_91 Depth=1
	jmp	.LBB22_101
.LBB22_101:                             # %for.inc657
                                        #   in Loop: Header=BB22_91 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB22_91
.LBB22_102:                             # %for.end659
	jmp	.LBB22_103
.LBB22_103:                             # %if.end660
	movl	-132(%rbp), %ebx
	cmpl	$681567038, -148(%rbp)  # imm = 0x289FE33E
	jne	.LBB22_105
.LBB22_104:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_105:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB22_104
.Lfunc_end22:
	.size	dct_chroma4x4.13, .Lfunc_end22-dct_chroma4x4.13
	.cfi_endproc
                                        # -- End function
	.globl	dct_luma.14             # -- Begin function dct_luma.14
	.p2align	4, 0x90
	.type	dct_luma.14,@function
dct_luma.14:                            # @dct_luma.14
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	xorl	%ebx, %ebx
	movl	$983288529, -148(%rbp)  # imm = 0x3A9BCAD1
	movl	%edi, -28(%rbp)
	movl	%esi, -24(%rbp)
	movq	%rdx, -160(%rbp)
	movl	%ecx, -108(%rbp)
	movl	-28(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -112(%rbp)
	movl	-24(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -116(%rbp)
	movl	-116(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-112(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -128(%rbp)
	movl	-116(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-112(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -132(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-128(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-132(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -168(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-128(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-132(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -176(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB23_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%bl
.LBB23_2:                               # %land.end
	andb	$1, %bl
	movzbl	%bl, %eax
	movl	%eax, -40(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -92(%rbp)
	movl	-36(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -120(%rbp)
	movl	$0, -12(%rbp)
.LBB23_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_7 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB23_5
# %bb.4:                                # %land.rhs31
                                        #   in Loop: Header=BB23_3 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB23_5:                               # %land.end32
                                        #   in Loop: Header=BB23_3 Depth=1
	testb	$1, %al
	jne	.LBB23_6
	jmp	.LBB23_12
.LBB23_6:                               # %for.body
                                        #   in Loop: Header=BB23_3 Depth=1
	movl	$0, -16(%rbp)
.LBB23_7:                               # %for.cond34
                                        #   Parent Loop BB23_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB23_10
# %bb.8:                                # %for.body36
                                        #   in Loop: Header=BB23_7 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-84(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-84(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-84(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB23_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB23_7
.LBB23_10:                              # %for.end
                                        #   in Loop: Header=BB23_3 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.11:                               # %for.inc93
                                        #   in Loop: Header=BB23_3 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB23_3
.LBB23_12:                              # %for.end95
	movl	$0, -16(%rbp)
.LBB23_13:                              # %for.cond96
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_17 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB23_15
# %bb.14:                               # %land.rhs98
                                        #   in Loop: Header=BB23_13 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB23_15:                              # %land.end101
                                        #   in Loop: Header=BB23_13 Depth=1
	testb	$1, %al
	jne	.LBB23_16
	jmp	.LBB23_22
.LBB23_16:                              # %for.body103
                                        #   in Loop: Header=BB23_13 Depth=1
	movl	$0, -12(%rbp)
.LBB23_17:                              # %for.cond104
                                        #   Parent Loop BB23_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB23_20
# %bb.18:                               # %for.body106
                                        #   in Loop: Header=BB23_17 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-20(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.19:                               # %for.inc134
                                        #   in Loop: Header=BB23_17 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB23_17
.LBB23_20:                              # %for.end136
                                        #   in Loop: Header=BB23_13 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.21:                               # %for.inc167
                                        #   in Loop: Header=BB23_13 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB23_13
.LBB23_22:                              # %for.end169
	movl	$0, -124(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -104(%rbp)
	movl	$0, -88(%rbp)
.LBB23_23:                              # %for.cond170
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -88(%rbp)
	jge	.LBB23_57
# %bb.24:                               # %for.body172
                                        #   in Loop: Header=BB23_23 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB23_27
# %bb.25:                               # %lor.lhs.false
                                        #   in Loop: Header=BB23_23 Depth=1
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB23_28
# %bb.26:                               # %land.lhs.true
                                        #   in Loop: Header=BB23_23 Depth=1
	movq	-144(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB23_28
.LBB23_27:                              # %if.then
                                        #   in Loop: Header=BB23_23 Depth=1
	movslq	-88(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-88(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB23_29
.LBB23_28:                              # %if.else
                                        #   in Loop: Header=BB23_23 Depth=1
	movslq	-88(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-88(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB23_29:                              # %if.end
                                        #   in Loop: Header=BB23_23 Depth=1
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -96(%rbp)
	cmpl	$0, -40(%rbp)
	je	.LBB23_31
# %bb.30:                               # %if.then193
                                        #   in Loop: Header=BB23_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -32(%rbp)
	jmp	.LBB23_35
.LBB23_31:                              # %if.else199
                                        #   in Loop: Header=BB23_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB23_33
# %bb.32:                               # %if.then202
                                        #   in Loop: Header=BB23_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-36(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB23_34
.LBB23_33:                              # %if.else223
                                        #   in Loop: Header=BB23_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-36(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -32(%rbp)
.LBB23_34:                              # %if.end245
                                        #   in Loop: Header=BB23_23 Depth=1
	jmp	.LBB23_35
.LBB23_35:                              # %if.end246
                                        #   in Loop: Header=BB23_23 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB23_53
# %bb.36:                               # %if.then249
                                        #   in Loop: Header=BB23_23 Depth=1
	movl	$1, -124(%rbp)
	cmpl	$1, -32(%rbp)
	jg	.LBB23_38
# %bb.37:                               # %lor.lhs.false252
                                        #   in Loop: Header=BB23_23 Depth=1
	cmpl	$0, -40(%rbp)
	je	.LBB23_39
.LBB23_38:                              # %if.then254
                                        #   in Loop: Header=BB23_23 Depth=1
	movq	-160(%rbp), %rax
	movl	(%rax), %ecx
	addl	$999999, %ecx           # imm = 0xF423F
	movl	%ecx, (%rax)
	jmp	.LBB23_40
.LBB23_39:                              # %if.else256
                                        #   in Loop: Header=BB23_23 Depth=1
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-100(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-160(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB23_40:                              # %if.end263
                                        #   in Loop: Header=BB23_23 Depth=1
	movl	-32(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-168(%rbp), %rcx
	movslq	-104(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-176(%rbp), %rcx
	movslq	-104(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-104(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -104(%rbp)
	movl	$-1, -100(%rbp)
	movl	-32(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -32(%rbp)
	cmpl	$0, -40(%rbp)
	je	.LBB23_42
# %bb.41:                               # %if.then282
                                        #   in Loop: Header=BB23_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB23_52
.LBB23_42:                              # %if.else283
                                        #   in Loop: Header=BB23_23 Depth=1
	cmpl	$4, -36(%rbp)
	jge	.LBB23_47
# %bb.43:                               # %if.then286
                                        #   in Loop: Header=BB23_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB23_45
# %bb.44:                               # %if.then289
                                        #   in Loop: Header=BB23_23 Depth=1
	movl	-32(%rbp), %eax
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB23_46
.LBB23_45:                              # %if.else301
                                        #   in Loop: Header=BB23_23 Depth=1
	movl	-32(%rbp), %eax
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -96(%rbp)
.LBB23_46:                              # %if.end314
                                        #   in Loop: Header=BB23_23 Depth=1
	jmp	.LBB23_51
.LBB23_47:                              # %if.else315
                                        #   in Loop: Header=BB23_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB23_49
# %bb.48:                               # %if.then318
                                        #   in Loop: Header=BB23_23 Depth=1
	movl	-32(%rbp), %eax
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-36(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB23_50
.LBB23_49:                              # %if.else328
                                        #   in Loop: Header=BB23_23 Depth=1
	movl	-32(%rbp), %eax
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-36(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -96(%rbp)
.LBB23_50:                              # %if.end338
                                        #   in Loop: Header=BB23_23 Depth=1
	jmp	.LBB23_51
.LBB23_51:                              # %if.end339
                                        #   in Loop: Header=BB23_23 Depth=1
	jmp	.LBB23_52
.LBB23_52:                              # %if.end340
                                        #   in Loop: Header=BB23_23 Depth=1
	jmp	.LBB23_53
.LBB23_53:                              # %if.end341
                                        #   in Loop: Header=BB23_23 Depth=1
	cmpl	$0, -40(%rbp)
	jne	.LBB23_55
# %bb.54:                               # %if.then343
                                        #   in Loop: Header=BB23_23 Depth=1
	movl	-96(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB23_55:                              # %if.end349
                                        #   in Loop: Header=BB23_23 Depth=1
	jmp	.LBB23_56
.LBB23_56:                              # %for.inc350
                                        #   in Loop: Header=BB23_23 Depth=1
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB23_23
.LBB23_57:                              # %for.end352
	movq	-168(%rbp), %rax
	movslq	-104(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB23_58:                              # %for.cond355
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_62 Depth 2
                                        #     Child Loop BB23_66 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB23_60
# %bb.59:                               # %land.rhs358
                                        #   in Loop: Header=BB23_58 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB23_60:                              # %land.end361
                                        #   in Loop: Header=BB23_58 Depth=1
	testb	$1, %al
	jne	.LBB23_61
	jmp	.LBB23_71
.LBB23_61:                              # %for.body363
                                        #   in Loop: Header=BB23_58 Depth=1
	movl	$0, -16(%rbp)
.LBB23_62:                              # %for.cond364
                                        #   Parent Loop BB23_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB23_65
# %bb.63:                               # %for.body367
                                        #   in Loop: Header=BB23_62 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.64:                               # %for.inc375
                                        #   in Loop: Header=BB23_62 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB23_62
.LBB23_65:                              # %for.end377
                                        #   in Loop: Header=BB23_58 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -16(%rbp)
.LBB23_66:                              # %for.cond396
                                        #   Parent Loop BB23_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB23_69
# %bb.67:                               # %for.body399
                                        #   in Loop: Header=BB23_66 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -84(%rbp)
	movslq	-16(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-84(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-84(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-84(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.68:                               # %for.inc421
                                        #   in Loop: Header=BB23_66 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB23_66
.LBB23_69:                              # %for.end423
                                        #   in Loop: Header=BB23_58 Depth=1
	jmp	.LBB23_70
.LBB23_70:                              # %for.inc424
                                        #   in Loop: Header=BB23_58 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB23_58
.LBB23_71:                              # %for.end426
	movl	$0, -16(%rbp)
.LBB23_72:                              # %for.cond427
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_76 Depth 2
                                        #     Child Loop BB23_80 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB23_74
# %bb.73:                               # %land.rhs430
                                        #   in Loop: Header=BB23_72 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB23_74:                              # %land.end433
                                        #   in Loop: Header=BB23_72 Depth=1
	testb	$1, %al
	jne	.LBB23_75
	jmp	.LBB23_109
.LBB23_75:                              # %for.body435
                                        #   in Loop: Header=BB23_72 Depth=1
	movl	$0, -12(%rbp)
.LBB23_76:                              # %for.cond436
                                        #   Parent Loop BB23_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB23_79
# %bb.77:                               # %for.body439
                                        #   in Loop: Header=BB23_76 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.78:                               # %for.inc447
                                        #   in Loop: Header=BB23_76 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB23_76
.LBB23_79:                              # %for.end449
                                        #   in Loop: Header=BB23_72 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -12(%rbp)
.LBB23_80:                              # %for.cond468
                                        #   Parent Loop BB23_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB23_107
# %bb.81:                               # %for.body471
                                        #   in Loop: Header=BB23_80 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB23_101
# %bb.82:                               # %if.then474
                                        #   in Loop: Header=BB23_80 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-80(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	addl	-80(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-16(%rbp), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-12(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB23_84
# %bb.83:                               # %cond.true
                                        #   in Loop: Header=BB23_80 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB23_85
.LBB23_84:                              # %cond.false
                                        #   in Loop: Header=BB23_80 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-12(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB23_85:                              # %cond.end
                                        #   in Loop: Header=BB23_80 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB23_87
# %bb.86:                               # %cond.true515
                                        #   in Loop: Header=BB23_80 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB23_91
.LBB23_87:                              # %cond.false518
                                        #   in Loop: Header=BB23_80 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-12(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB23_89
# %bb.88:                               # %cond.true539
                                        #   in Loop: Header=BB23_80 Depth=2
	xorl	%eax, %eax
	jmp	.LBB23_90
.LBB23_89:                              # %cond.false540
                                        #   in Loop: Header=BB23_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB23_90:                              # %cond.end559
                                        #   in Loop: Header=BB23_80 Depth=2
.LBB23_91:                              # %cond.end561
                                        #   in Loop: Header=BB23_80 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-80(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	subl	-80(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-16(%rbp), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-20(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB23_93
# %bb.92:                               # %cond.true591
                                        #   in Loop: Header=BB23_80 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB23_94
.LBB23_93:                              # %cond.false592
                                        #   in Loop: Header=BB23_80 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-20(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB23_94:                              # %cond.end611
                                        #   in Loop: Header=BB23_80 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB23_96
# %bb.95:                               # %cond.true615
                                        #   in Loop: Header=BB23_80 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB23_100
.LBB23_96:                              # %cond.false618
                                        #   in Loop: Header=BB23_80 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-20(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB23_98
# %bb.97:                               # %cond.true639
                                        #   in Loop: Header=BB23_80 Depth=2
	xorl	%eax, %eax
	jmp	.LBB23_99
.LBB23_98:                              # %cond.false640
                                        #   in Loop: Header=BB23_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB23_99:                              # %cond.end659
                                        #   in Loop: Header=BB23_80 Depth=2
.LBB23_100:                             # %cond.end661
                                        #   in Loop: Header=BB23_80 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB23_105
.LBB23_101:                             # %if.else669
                                        #   in Loop: Header=BB23_80 Depth=2
	cmpl	$0, -40(%rbp)
	je	.LBB23_103
# %bb.102:                              # %if.then671
                                        #   in Loop: Header=BB23_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB23_104
.LBB23_103:                             # %if.else692
                                        #   in Loop: Header=BB23_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB23_104:                             # %if.end717
                                        #   in Loop: Header=BB23_80 Depth=2
	jmp	.LBB23_105
.LBB23_105:                             # %if.end718
                                        #   in Loop: Header=BB23_80 Depth=2
	jmp	.LBB23_106
.LBB23_106:                             # %for.inc719
                                        #   in Loop: Header=BB23_80 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB23_80
.LBB23_107:                             # %for.end721
                                        #   in Loop: Header=BB23_72 Depth=1
	jmp	.LBB23_108
.LBB23_108:                             # %for.inc722
                                        #   in Loop: Header=BB23_72 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB23_72
.LBB23_109:                             # %for.end724
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB23_122
# %bb.110:                              # %if.then727
	movl	$0, -12(%rbp)
.LBB23_111:                             # %for.cond728
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_113 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB23_121
# %bb.112:                              # %for.body731
                                        #   in Loop: Header=BB23_111 Depth=1
	movl	$0, -16(%rbp)
.LBB23_113:                             # %for.cond732
                                        #   Parent Loop BB23_111 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB23_119
# %bb.114:                              # %for.body735
                                        #   in Loop: Header=BB23_113 Depth=2
	cmpl	$0, -40(%rbp)
	je	.LBB23_116
# %bb.115:                              # %if.then737
                                        #   in Loop: Header=BB23_113 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB23_117
.LBB23_116:                             # %if.else761
                                        #   in Loop: Header=BB23_113 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB23_117:                             # %if.end779
                                        #   in Loop: Header=BB23_113 Depth=2
	jmp	.LBB23_118
.LBB23_118:                             # %for.inc780
                                        #   in Loop: Header=BB23_113 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB23_113
.LBB23_119:                             # %for.end782
                                        #   in Loop: Header=BB23_111 Depth=1
	jmp	.LBB23_120
.LBB23_120:                             # %for.inc783
                                        #   in Loop: Header=BB23_111 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB23_111
.LBB23_121:                             # %for.end785
	jmp	.LBB23_122
.LBB23_122:                             # %if.end786
	movl	-124(%rbp), %ebx
	cmpl	$983288529, -148(%rbp)  # imm = 0x3A9BCAD1
	jne	.LBB23_124
.LBB23_123:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_124:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB23_123
.Lfunc_end23:
	.size	dct_luma.14, .Lfunc_end23-dct_luma.14
	.cfi_endproc
                                        # -- End function
	.globl	intrapred_luma.15       # -- Begin function intrapred_luma.15
	.p2align	4, 0x90
	.type	intrapred_luma.15,@function
intrapred_luma.15:                      # @intrapred_luma.15
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$320, %rsp              # imm = 0x140
	movl	$343519124, -172(%rbp)  # imm = 0x1479AF94
	movl	%edi, -112(%rbp)
	movl	%esi, -116(%rbp)
	movq	%rdx, -224(%rbp)
	movq	%rcx, -184(%rbp)
	movq	%r8, -216(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	-112(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -84(%rbp)
	movl	-116(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -88(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -104(%rbp)
	movl	$0, -4(%rbp)
.LBB24_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB24_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB24_1 Depth=1
	movl	-104(%rbp), %edi
	movl	-84(%rbp), %esi
	subl	$1, %esi
	movl	-88(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-320(%rbp), %r8
	addq	%rax, %r8
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB24_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_1
.LBB24_4:                               # %for.end
	movl	-104(%rbp), %edi
	movl	-84(%rbp), %esi
	movl	-88(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-168(%rbp), %r8
	callq	getNeighbour
	movl	-104(%rbp), %edi
	movl	-84(%rbp), %esi
	addl	$4, %esi
	movl	-88(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-144(%rbp), %r8
	callq	getNeighbour
	movl	-104(%rbp), %edi
	movl	-84(%rbp), %esi
	subl	$1, %esi
	movl	-88(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-208(%rbp), %r8
	callq	getNeighbour
	xorl	%eax, %eax
	cmpl	$0, -144(%rbp)
	je	.LBB24_11
# %bb.5:                                # %land.rhs
	cmpl	$4, -84(%rbp)
	je	.LBB24_7
# %bb.6:                                # %lor.lhs.false
	xorl	%eax, %eax
	cmpl	$12, -84(%rbp)
	jne	.LBB24_10
.LBB24_7:                               # %land.rhs10
	cmpl	$4, -88(%rbp)
	movb	$1, %al
	je	.LBB24_9
# %bb.8:                                # %lor.rhs
	cmpl	$12, -88(%rbp)
	sete	%al
.LBB24_9:                               # %lor.end
.LBB24_10:                              # %land.end
	xorb	$-1, %al
.LBB24_11:                              # %land.end13
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -144(%rbp)
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB24_29
# %bb.12:                               # %if.then
	movl	$0, -4(%rbp)
	movl	$1, -68(%rbp)
.LBB24_13:                              # %for.cond16
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB24_19
# %bb.14:                               # %for.body18
                                        #   in Loop: Header=BB24_13 Depth=1
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB24_16
# %bb.15:                               # %cond.true
                                        #   in Loop: Header=BB24_13 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB24_17
.LBB24_16:                              # %cond.false
                                        #   in Loop: Header=BB24_13 Depth=1
	xorl	%eax, %eax
	jmp	.LBB24_17
.LBB24_17:                              # %cond.end
                                        #   in Loop: Header=BB24_13 Depth=1
	andl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.18:                               # %for.inc28
                                        #   in Loop: Header=BB24_13 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_13
.LBB24_19:                              # %for.end30
	cmpl	$0, -168(%rbp)
	je	.LBB24_21
# %bb.20:                               # %cond.true33
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-164(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB24_22
.LBB24_21:                              # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB24_22
.LBB24_22:                              # %cond.end39
	movl	%eax, -72(%rbp)
	cmpl	$0, -144(%rbp)
	je	.LBB24_24
# %bb.23:                               # %cond.true43
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-140(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB24_25
.LBB24_24:                              # %cond.false48
	xorl	%eax, %eax
	jmp	.LBB24_25
.LBB24_25:                              # %cond.end49
	movl	%eax, -108(%rbp)
	cmpl	$0, -208(%rbp)
	je	.LBB24_27
# %bb.26:                               # %cond.true53
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-204(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB24_28
.LBB24_27:                              # %cond.false58
	xorl	%eax, %eax
	jmp	.LBB24_28
.LBB24_28:                              # %cond.end59
	movl	%eax, -100(%rbp)
	jmp	.LBB24_30
.LBB24_29:                              # %if.else
	movl	-320(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-168(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-144(%rbp), %eax
	movl	%eax, -108(%rbp)
	movl	-208(%rbp), %eax
	movl	%eax, -100(%rbp)
.LBB24_30:                              # %if.end
	xorl	%eax, %eax
	movl	-68(%rbp), %ecx
	movq	-224(%rbp), %rdx
	movl	%ecx, (%rdx)
	movl	-72(%rbp), %ecx
	movq	-184(%rbp), %rdx
	movl	%ecx, (%rdx)
	cmpl	$0, -72(%rbp)
	je	.LBB24_33
# %bb.31:                               # %land.lhs.true
	xorl	%eax, %eax
	cmpl	$0, -68(%rbp)
	je	.LBB24_33
# %bb.32:                               # %land.rhs68
	cmpl	$0, -100(%rbp)
	setne	%al
.LBB24_33:                              # %land.end70
	andb	$1, %al
	movzbl	%al, %eax
	movq	-216(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-112(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -4(%rbp)
	movl	-116(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -92(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB24_35
# %bb.34:                               # %if.then75
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -60(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -56(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -52(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB24_36
.LBB24_35:                              # %if.else109
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -48(%rbp)
	movl	%eax, -52(%rbp)
	movl	%eax, -56(%rbp)
	movl	%eax, -60(%rbp)
.LBB24_36:                              # %if.end114
	cmpl	$0, -108(%rbp)
	je	.LBB24_38
# %bb.37:                               # %if.then116
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -44(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -40(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -36(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB24_39
.LBB24_38:                              # %if.else153
	movl	-48(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	%eax, -36(%rbp)
	movl	%eax, -40(%rbp)
	movl	%eax, -44(%rbp)
.LBB24_39:                              # %if.end159
	cmpl	$0, -68(%rbp)
	je	.LBB24_41
# %bb.40:                               # %if.then161
	movq	-80(%rbp), %rax
	movslq	-300(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-304(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -28(%rbp)
	movq	-80(%rbp), %rax
	movslq	-276(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-280(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-80(%rbp), %rax
	movslq	-252(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-256(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-80(%rbp), %rax
	movslq	-228(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-232(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB24_42
.LBB24_41:                              # %if.else202
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -16(%rbp)
	movl	%eax, -20(%rbp)
	movl	%eax, -24(%rbp)
	movl	%eax, -28(%rbp)
.LBB24_42:                              # %if.end208
	cmpl	$0, -100(%rbp)
	je	.LBB24_44
# %bb.43:                               # %if.then210
	movq	-80(%rbp), %rax
	movslq	-188(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-192(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB24_45
.LBB24_44:                              # %if.else219
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -64(%rbp)
.LBB24_45:                              # %if.end222
	movl	$0, -4(%rbp)
.LBB24_46:                              # %for.cond223
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$9, -4(%rbp)
	jge	.LBB24_49
# %bb.47:                               # %for.body226
                                        #   in Loop: Header=BB24_46 Depth=1
	movq	img, %rax
	addq	$184, %rax
	movslq	-4(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movw	$-1, (%rax)
# %bb.48:                               # %for.inc231
                                        #   in Loop: Header=BB24_46 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_46
.LBB24_49:                              # %for.end233
	movl	$0, -96(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB24_52
# %bb.50:                               # %land.lhs.true235
	cmpl	$0, -68(%rbp)
	je	.LBB24_52
# %bb.51:                               # %if.then237
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$4, %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	movl	%eax, -96(%rbp)
	jmp	.LBB24_61
.LBB24_52:                              # %if.else254
	cmpl	$0, -72(%rbp)
	jne	.LBB24_55
# %bb.53:                               # %land.lhs.true256
	cmpl	$0, -68(%rbp)
	je	.LBB24_55
# %bb.54:                               # %if.then258
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -96(%rbp)
	jmp	.LBB24_60
.LBB24_55:                              # %if.else268
	cmpl	$0, -72(%rbp)
	je	.LBB24_58
# %bb.56:                               # %land.lhs.true270
	cmpl	$0, -68(%rbp)
	jne	.LBB24_58
# %bb.57:                               # %if.then272
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -96(%rbp)
	jmp	.LBB24_59
.LBB24_58:                              # %if.else282
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -96(%rbp)
.LBB24_59:                              # %if.end284
	jmp	.LBB24_60
.LBB24_60:                              # %if.end285
	jmp	.LBB24_61
.LBB24_61:                              # %if.end286
	movl	$0, -92(%rbp)
.LBB24_62:                              # %for.cond287
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_64 Depth 2
	cmpl	$4, -92(%rbp)
	jge	.LBB24_69
# %bb.63:                               # %for.body290
                                        #   in Loop: Header=BB24_62 Depth=1
	movl	$0, -4(%rbp)
.LBB24_64:                              # %for.cond291
                                        #   Parent Loop BB24_62 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB24_67
# %bb.65:                               # %for.body294
                                        #   in Loop: Header=BB24_64 Depth=2
	movl	-96(%rbp), %eax
	movq	img, %rcx
	addq	$184, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-92(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.66:                               # %for.inc302
                                        #   in Loop: Header=BB24_64 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_64
.LBB24_67:                              # %for.end304
                                        #   in Loop: Header=BB24_62 Depth=1
	jmp	.LBB24_68
.LBB24_68:                              # %for.inc305
                                        #   in Loop: Header=BB24_62 Depth=1
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB24_62
.LBB24_69:                              # %for.end307
	movl	$0, -4(%rbp)
.LBB24_70:                              # %for.cond308
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB24_73
# %bb.71:                               # %for.body311
                                        #   in Loop: Header=BB24_70 Depth=1
	movslq	-4(%rbp), %rax
	movl	-60(%rbp,%rax,4), %eax
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 280(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 248(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 216(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 184(%rcx,%rdx,2)
	movslq	-4(%rbp), %rax
	movl	-28(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 6(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 4(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, (%rcx)
# %bb.72:                               # %for.inc360
                                        #   in Loop: Header=BB24_70 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_70
.LBB24_73:                              # %for.end362
	cmpl	$0, -72(%rbp)
	jne	.LBB24_75
# %bb.74:                               # %if.then364
	movq	img, %rax
	movw	$-1, 184(%rax)
.LBB24_75:                              # %if.end369
	cmpl	$0, -68(%rbp)
	jne	.LBB24_77
# %bb.76:                               # %if.then371
	movq	img, %rax
	movw	$-1, 696(%rax)
.LBB24_77:                              # %if.end376
	cmpl	$0, -72(%rbp)
	je	.LBB24_79
# %bb.78:                               # %if.then378
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1720(%rdx)
	movl	-56(%rbp), %eax
	addl	-48(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1752(%rdx)
	movq	img, %rdx
	movw	%ax, 1722(%rdx)
	movl	-52(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	-48(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1784(%rdx)
	movq	img, %rdx
	movw	%ax, 1754(%rdx)
	movq	img, %rdx
	movw	%ax, 1724(%rdx)
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	-44(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1816(%rdx)
	movq	img, %rdx
	movw	%ax, 1786(%rdx)
	movq	img, %rdx
	movw	%ax, 1756(%rdx)
	movq	img, %rdx
	movw	%ax, 1726(%rdx)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	-40(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1818(%rdx)
	movq	img, %rdx
	movw	%ax, 1788(%rdx)
	movq	img, %rdx
	movw	%ax, 1758(%rdx)
	movl	-40(%rbp), %eax
	addl	-32(%rbp), %eax
	movl	-36(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1820(%rdx)
	movq	img, %rdx
	movw	%ax, 1790(%rdx)
	movl	-36(%rbp), %eax
	imull	$3, -32(%rbp), %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1822(%rdx)
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3768(%rdx)
	movl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3832(%rdx)
	movq	img, %rdx
	movw	%ax, 3770(%rdx)
	movl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3834(%rdx)
	movq	img, %rdx
	movw	%ax, 3772(%rdx)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3836(%rdx)
	movq	img, %rdx
	movw	%ax, 3774(%rdx)
	movl	-44(%rbp), %eax
	addl	-40(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3838(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3800(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3864(%rdx)
	movq	img, %rdx
	movw	%ax, 3802(%rdx)
	movl	-52(%rbp), %eax
	movl	-48(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-44(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3866(%rdx)
	movq	img, %rdx
	movw	%ax, 3804(%rdx)
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-40(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3868(%rdx)
	movq	img, %rdx
	movw	%ax, 3806(%rdx)
	movl	-44(%rbp), %eax
	movl	-40(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-36(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 3870(%rcx)
.LBB24_79:                              # %if.end642
	cmpl	$0, -68(%rbp)
	je	.LBB24_81
# %bb.80:                               # %if.then644
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rcx
	movw	%ax, 4280(%rcx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 4282(%rdx)
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 4312(%rdx)
	movq	img, %rdx
	movw	%ax, 4284(%rdx)
	movl	-24(%rbp), %eax
	movl	-20(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 4314(%rdx)
	movq	img, %rdx
	movw	%ax, 4286(%rdx)
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 4344(%rdx)
	movq	img, %rdx
	movw	%ax, 4316(%rdx)
	movl	-20(%rbp), %eax
	movl	-16(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 4346(%rcx)
	movq	img, %rcx
	movw	%ax, 4318(%rcx)
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movw	%ax, 4382(%rcx)
	movq	img, %rcx
	movw	%ax, 4380(%rcx)
	movq	img, %rcx
	movw	%ax, 4378(%rcx)
	movq	img, %rcx
	movw	%ax, 4350(%rcx)
	movq	img, %rcx
	movw	%ax, 4348(%rcx)
	movq	img, %rcx
	movw	%ax, 4376(%rcx)
.LBB24_81:                              # %if.end756
	cmpl	$0, -72(%rbp)
	je	.LBB24_85
# %bb.82:                               # %land.lhs.true758
	cmpl	$0, -68(%rbp)
	je	.LBB24_85
# %bb.83:                               # %land.lhs.true760
	cmpl	$0, -100(%rbp)
	je	.LBB24_85
# %bb.84:                               # %if.then762
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2328(%rdx)
	movl	-20(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-28(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2330(%rdx)
	movq	img, %rdx
	movw	%ax, 2296(%rdx)
	movl	-24(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-64(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2332(%rdx)
	movq	img, %rdx
	movw	%ax, 2298(%rdx)
	movq	img, %rdx
	movw	%ax, 2264(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2334(%rdx)
	movq	img, %rdx
	movw	%ax, 2300(%rdx)
	movq	img, %rdx
	movw	%ax, 2266(%rdx)
	movq	img, %rdx
	movw	%ax, 2232(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2302(%rdx)
	movq	img, %rdx
	movw	%ax, 2268(%rdx)
	movq	img, %rdx
	movw	%ax, 2234(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2270(%rdx)
	movq	img, %rdx
	movw	%ax, 2236(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2238(%rdx)
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2810(%rdx)
	movq	img, %rdx
	movw	%ax, 2744(%rdx)
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2812(%rdx)
	movq	img, %rdx
	movw	%ax, 2746(%rdx)
	movl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2814(%rdx)
	movq	img, %rdx
	movw	%ax, 2748(%rdx)
	movl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2750(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2842(%rdx)
	movq	img, %rdx
	movw	%ax, 2776(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2844(%rdx)
	movq	img, %rdx
	movw	%ax, 2778(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2846(%rdx)
	movq	img, %rdx
	movw	%ax, 2780(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2782(%rdx)
	movl	-64(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2808(%rdx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2840(%rdx)
	movl	-64(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3292(%rdx)
	movq	img, %rdx
	movw	%ax, 3256(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3294(%rdx)
	movq	img, %rdx
	movw	%ax, 3258(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3260(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3262(%rdx)
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3324(%rdx)
	movq	img, %rdx
	movw	%ax, 3288(%rdx)
	movl	-64(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3326(%rdx)
	movq	img, %rdx
	movw	%ax, 3290(%rdx)
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3356(%rdx)
	movq	img, %rdx
	movw	%ax, 3320(%rdx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3358(%rdx)
	movq	img, %rdx
	movw	%ax, 3322(%rdx)
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3352(%rdx)
	movl	-24(%rbp), %eax
	movl	-20(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 3354(%rcx)
.LBB24_85:                              # %if.end1174
	cmpl	$343519124, -172(%rbp)  # imm = 0x1479AF94
	jne	.LBB24_87
.LBB24_86:
	addq	$320, %rsp              # imm = 0x140
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_87:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB24_86
.Lfunc_end24:
	.size	intrapred_luma.15, .Lfunc_end24-intrapred_luma.15
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function dct_luma_sp.16
.LCPI25_0:
	.quad	4616189618054758400     # double 4
.LCPI25_1:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI25_2:
	.quad	4611686018427387904     # double 2
.LCPI25_3:
	.quad	4613937818241073152     # double 3
	.text
	.globl	dct_luma_sp.16
	.p2align	4, 0x90
	.type	dct_luma_sp.16,@function
dct_luma_sp.16:                         # @dct_luma_sp.16
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -24
	vmovsd	.LCPI25_2(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI25_3(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$1241144964, -212(%rbp) # imm = 0x49FA5E84
	movl	%edi, -140(%rbp)
	movl	%esi, -116(%rbp)
	movq	%rdx, -224(%rbp)
	movl	-140(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -184(%rbp)
	movl	-116(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -196(%rbp)
	movl	-196(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-184(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -208(%rbp)
	movl	-196(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-184(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -200(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-208(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-200(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -240(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-208(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-200(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -248(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -176(%rbp)
	movq	-176(%rbp), %rax
	movl	12(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI25_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI25_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmulsd	%xmm0, %xmm2, %xmm0
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -232(%rbp)
	movq	-176(%rbp), %rax
	movl	12(%rax), %eax
	subl	$0, %eax
	cltd
	movl	$6, %edi
	idivl	%edi
	movl	%eax, -136(%rbp)
	movq	-176(%rbp), %rax
	movl	12(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%edx, -104(%rbp)
	movl	-136(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -148(%rbp)
	movq	-176(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%eax, -204(%rbp)
	movq	-176(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%edx, -132(%rbp)
	movl	-204(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -124(%rbp)
	movl	-148(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %esi
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	idivl	%edi
	movl	%eax, -192(%rbp)
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movl	%esi, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -180(%rbp)
	movl	$0, -12(%rbp)
.LBB25_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_3 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB25_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB25_1 Depth=1
	movl	$0, -16(%rbp)
.LBB25_3:                               # %for.cond38
                                        #   Parent Loop BB25_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB25_6
# %bb.4:                                # %for.body41
                                        #   in Loop: Header=BB25_3 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-140(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-116(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-140(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-116(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB25_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB25_3
.LBB25_6:                               # %for.end
                                        #   in Loop: Header=BB25_1 Depth=1
	jmp	.LBB25_7
.LBB25_7:                               # %for.inc66
                                        #   in Loop: Header=BB25_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB25_1
.LBB25_8:                               # %for.end68
	movl	$0, -12(%rbp)
.LBB25_9:                               # %for.cond69
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_11 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB25_16
# %bb.10:                               # %for.body72
                                        #   in Loop: Header=BB25_9 Depth=1
	movl	$0, -16(%rbp)
.LBB25_11:                              # %for.cond73
                                        #   Parent Loop BB25_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB25_14
# %bb.12:                               # %for.body76
                                        #   in Loop: Header=BB25_11 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.13:                               # %for.inc104
                                        #   in Loop: Header=BB25_11 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB25_11
.LBB25_14:                              # %for.end106
                                        #   in Loop: Header=BB25_9 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.15:                               # %for.inc137
                                        #   in Loop: Header=BB25_9 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB25_9
.LBB25_16:                              # %for.end139
	movl	$0, -16(%rbp)
.LBB25_17:                              # %for.cond140
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_19 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB25_24
# %bb.18:                               # %for.body143
                                        #   in Loop: Header=BB25_17 Depth=1
	movl	$0, -12(%rbp)
.LBB25_19:                              # %for.cond144
                                        #   Parent Loop BB25_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB25_22
# %bb.20:                               # %for.body147
                                        #   in Loop: Header=BB25_19 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-24(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.21:                               # %for.inc175
                                        #   in Loop: Header=BB25_19 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB25_19
.LBB25_22:                              # %for.end177
                                        #   in Loop: Header=BB25_17 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.23:                               # %for.inc208
                                        #   in Loop: Header=BB25_17 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB25_17
.LBB25_24:                              # %for.end210
	movl	$0, -12(%rbp)
.LBB25_25:                              # %for.cond211
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_27 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB25_32
# %bb.26:                               # %for.body214
                                        #   in Loop: Header=BB25_25 Depth=1
	movl	$0, -16(%rbp)
.LBB25_27:                              # %for.cond215
                                        #   Parent Loop BB25_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB25_30
# %bb.28:                               # %for.body218
                                        #   in Loop: Header=BB25_27 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.29:                               # %for.inc242
                                        #   in Loop: Header=BB25_27 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB25_27
.LBB25_30:                              # %for.end244
                                        #   in Loop: Header=BB25_25 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -320(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -288(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -304(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
# %bb.31:                               # %for.inc271
                                        #   in Loop: Header=BB25_25 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB25_25
.LBB25_32:                              # %for.end273
	movl	$0, -16(%rbp)
.LBB25_33:                              # %for.cond274
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_35 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB25_40
# %bb.34:                               # %for.body277
                                        #   in Loop: Header=BB25_33 Depth=1
	movl	$0, -12(%rbp)
.LBB25_35:                              # %for.cond278
                                        #   Parent Loop BB25_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB25_38
# %bb.36:                               # %for.body281
                                        #   in Loop: Header=BB25_35 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-24(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.37:                               # %for.inc305
                                        #   in Loop: Header=BB25_35 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB25_35
.LBB25_38:                              # %for.end307
                                        #   in Loop: Header=BB25_33 Depth=1
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-320(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.39:                               # %for.inc334
                                        #   in Loop: Header=BB25_33 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB25_33
.LBB25_40:                              # %for.end336
	movl	$0, -188(%rbp)
	movl	$-1, -64(%rbp)
	movl	$0, -108(%rbp)
	movl	$0, -68(%rbp)
.LBB25_41:                              # %for.cond337
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -68(%rbp)
	jge	.LBB25_80
# %bb.42:                               # %for.body340
                                        #   in Loop: Header=BB25_41 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB25_45
# %bb.43:                               # %lor.lhs.false
                                        #   in Loop: Header=BB25_41 Depth=1
	cmpl	$0, mb_adaptive
	je	.LBB25_46
# %bb.44:                               # %land.lhs.true
                                        #   in Loop: Header=BB25_41 Depth=1
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB25_46
.LBB25_45:                              # %if.then
                                        #   in Loop: Header=BB25_41 Depth=1
	movslq	-68(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-68(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB25_47
.LBB25_46:                              # %if.else
                                        #   in Loop: Header=BB25_41 Depth=1
	movslq	-68(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-68(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB25_47:                              # %if.end
                                        #   in Loop: Header=BB25_41 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	movl	$0, -100(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-180(%rbp), %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	cltd
	idivl	(%rsi,%rcx,4)
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-20(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -112(%rbp)
	movl	-112(%rbp), %edi
	callq	abs
	movslq	-104(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-192(%rbp), %eax
	movl	-148(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movl	%eax, -128(%rbp)
	movl	-128(%rbp), %edi
	callq	abs
	movslq	-104(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-192(%rbp), %eax
	movl	-148(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -56(%rbp)
	movl	-20(%rbp), %eax
	cmpl	-56(%rbp), %eax
	je	.LBB25_63
# %bb.48:                               # %land.lhs.true424
                                        #   in Loop: Header=BB25_41 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB25_63
# %bb.49:                               # %land.lhs.true427
                                        #   in Loop: Header=BB25_41 Depth=1
	cmpl	$0, -56(%rbp)
	je	.LBB25_63
# %bb.50:                               # %if.then430
                                        #   in Loop: Header=BB25_41 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-20(%rbp), %edi
	movl	-112(%rbp), %esi
	callq	sign
	movslq	-104(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-136(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -168(%rbp)
	movl	-20(%rbp), %edi
	movl	-64(%rbp), %esi
	leaq	-144(%rbp), %rdx
	leaq	-216(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	vmovsd	-232(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-144(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -168(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-56(%rbp), %edi
	movl	-128(%rbp), %esi
	callq	sign
	movslq	-104(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-136(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
	movl	-56(%rbp), %edi
	movl	-64(%rbp), %esi
	leaq	-144(%rbp), %rdx
	leaq	-216(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	-232(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-144(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-160(%rbp), %xmm0
	jne	.LBB25_55
	jp	.LBB25_55
# %bb.51:                               # %if.then495
                                        #   in Loop: Header=BB25_41 Depth=1
	movl	-20(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-56(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB25_53
# %bb.52:                               # %cond.true
                                        #   in Loop: Header=BB25_41 Depth=1
	movl	-20(%rbp), %eax
	jmp	.LBB25_54
.LBB25_53:                              # %cond.false
                                        #   in Loop: Header=BB25_41 Depth=1
	movl	-56(%rbp), %eax
.LBB25_54:                              # %cond.end
                                        #   in Loop: Header=BB25_41 Depth=1
	movl	%eax, -60(%rbp)
	jmp	.LBB25_59
.LBB25_55:                              # %if.else500
                                        #   in Loop: Header=BB25_41 Depth=1
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-160(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB25_57
# %bb.56:                               # %if.then503
                                        #   in Loop: Header=BB25_41 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB25_58
.LBB25_57:                              # %if.else504
                                        #   in Loop: Header=BB25_41 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB25_58:                              # %if.end505
                                        #   in Loop: Header=BB25_41 Depth=1
	jmp	.LBB25_59
.LBB25_59:                              # %if.end506
                                        #   in Loop: Header=BB25_41 Depth=1
	movl	-60(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jne	.LBB25_61
# %bb.60:                               # %cond.true509
                                        #   in Loop: Header=BB25_41 Depth=1
	movl	-112(%rbp), %eax
	jmp	.LBB25_62
.LBB25_61:                              # %cond.false510
                                        #   in Loop: Header=BB25_41 Depth=1
	movl	-128(%rbp), %eax
.LBB25_62:                              # %cond.end511
                                        #   in Loop: Header=BB25_41 Depth=1
	movl	%eax, -120(%rbp)
	jmp	.LBB25_73
.LBB25_63:                              # %if.else513
                                        #   in Loop: Header=BB25_41 Depth=1
	movl	-20(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jne	.LBB25_65
# %bb.64:                               # %if.then516
                                        #   in Loop: Header=BB25_41 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	jmp	.LBB25_72
.LBB25_65:                              # %if.else517
                                        #   in Loop: Header=BB25_41 Depth=1
	cmpl	$0, -20(%rbp)
	jne	.LBB25_67
# %bb.66:                               # %cond.true520
                                        #   in Loop: Header=BB25_41 Depth=1
	movl	-20(%rbp), %eax
	jmp	.LBB25_68
.LBB25_67:                              # %cond.false521
                                        #   in Loop: Header=BB25_41 Depth=1
	movl	-56(%rbp), %eax
.LBB25_68:                              # %cond.end522
                                        #   in Loop: Header=BB25_41 Depth=1
	movl	%eax, -60(%rbp)
	cmpl	$0, -20(%rbp)
	jne	.LBB25_70
# %bb.69:                               # %cond.true526
                                        #   in Loop: Header=BB25_41 Depth=1
	movl	-112(%rbp), %eax
	jmp	.LBB25_71
.LBB25_70:                              # %cond.false527
                                        #   in Loop: Header=BB25_41 Depth=1
	movl	-128(%rbp), %eax
.LBB25_71:                              # %cond.end528
                                        #   in Loop: Header=BB25_41 Depth=1
	movl	%eax, -120(%rbp)
.LBB25_72:                              # %if.end530
                                        #   in Loop: Header=BB25_41 Depth=1
	jmp	.LBB25_73
.LBB25_73:                              # %if.end531
                                        #   in Loop: Header=BB25_41 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB25_78
# %bb.74:                               # %if.then534
                                        #   in Loop: Header=BB25_41 Depth=1
	movl	$1, -188(%rbp)
	cmpl	$1, -60(%rbp)
	jle	.LBB25_76
# %bb.75:                               # %if.then537
                                        #   in Loop: Header=BB25_41 Depth=1
	movq	-224(%rbp), %rax
	movl	(%rax), %ecx
	addl	$999999, %ecx           # imm = 0xF423F
	movl	%ecx, (%rax)
	jmp	.LBB25_77
.LBB25_76:                              # %if.else539
                                        #   in Loop: Header=BB25_41 Depth=1
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-64(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-224(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB25_77:                              # %if.end546
                                        #   in Loop: Header=BB25_41 Depth=1
	movl	-60(%rbp), %edi
	movl	-120(%rbp), %esi
	callq	sign
	movq	-240(%rbp), %rcx
	movslq	-108(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	movq	-248(%rbp), %rcx
	movslq	-108(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	movl	$-1, -64(%rbp)
	movl	-60(%rbp), %edi
	movl	-120(%rbp), %esi
	callq	sign
	movslq	-104(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-136(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	movl	%eax, -100(%rbp)
.LBB25_78:                              # %if.end568
                                        #   in Loop: Header=BB25_41 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	-100(%rbp), %eax
	movl	%eax, -100(%rbp)
	movl	-100(%rbp), %edi
	callq	abs
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-180(%rbp), %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-100(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-204(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.79:                               # %for.inc598
                                        #   in Loop: Header=BB25_41 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB25_41
.LBB25_80:                              # %for.end600
	movq	-240(%rbp), %rax
	movslq	-108(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB25_81:                              # %for.cond603
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_83 Depth 2
                                        #     Child Loop BB25_87 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB25_92
# %bb.82:                               # %for.body606
                                        #   in Loop: Header=BB25_81 Depth=1
	movl	$0, -16(%rbp)
.LBB25_83:                              # %for.cond607
                                        #   Parent Loop BB25_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB25_86
# %bb.84:                               # %for.body610
                                        #   in Loop: Header=BB25_83 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.85:                               # %for.inc618
                                        #   in Loop: Header=BB25_83 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB25_83
.LBB25_86:                              # %for.end620
                                        #   in Loop: Header=BB25_81 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB25_87:                              # %for.cond639
                                        #   Parent Loop BB25_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB25_90
# %bb.88:                               # %for.body642
                                        #   in Loop: Header=BB25_87 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.89:                               # %for.inc664
                                        #   in Loop: Header=BB25_87 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB25_87
.LBB25_90:                              # %for.end666
                                        #   in Loop: Header=BB25_81 Depth=1
	jmp	.LBB25_91
.LBB25_91:                              # %for.inc667
                                        #   in Loop: Header=BB25_81 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB25_81
.LBB25_92:                              # %for.end669
	movl	$0, -16(%rbp)
.LBB25_93:                              # %for.cond670
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_95 Depth 2
                                        #     Child Loop BB25_99 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB25_122
# %bb.94:                               # %for.body673
                                        #   in Loop: Header=BB25_93 Depth=1
	movl	$0, -12(%rbp)
.LBB25_95:                              # %for.cond674
                                        #   Parent Loop BB25_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB25_98
# %bb.96:                               # %for.body677
                                        #   in Loop: Header=BB25_95 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.97:                               # %for.inc685
                                        #   in Loop: Header=BB25_95 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB25_95
.LBB25_98:                              # %for.end687
                                        #   in Loop: Header=BB25_93 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB25_99:                              # %for.cond706
                                        #   Parent Loop BB25_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB25_120
# %bb.100:                              # %for.body709
                                        #   in Loop: Header=BB25_99 Depth=2
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-24(%rbp), %rsi
	addl	-96(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB25_102
# %bb.101:                              # %cond.true720
                                        #   in Loop: Header=BB25_99 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB25_103
.LBB25_102:                             # %cond.false721
                                        #   in Loop: Header=BB25_99 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-24(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB25_103:                             # %cond.end729
                                        #   in Loop: Header=BB25_99 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB25_105
# %bb.104:                              # %cond.true733
                                        #   in Loop: Header=BB25_99 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB25_109
.LBB25_105:                             # %cond.false735
                                        #   in Loop: Header=BB25_99 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-24(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB25_107
# %bb.106:                              # %cond.true745
                                        #   in Loop: Header=BB25_99 Depth=2
	xorl	%eax, %eax
	jmp	.LBB25_108
.LBB25_107:                             # %cond.false746
                                        #   in Loop: Header=BB25_99 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-24(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB25_108:                             # %cond.end754
                                        #   in Loop: Header=BB25_99 Depth=2
.LBB25_109:                             # %cond.end756
                                        #   in Loop: Header=BB25_99 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-24(%rbp), %rsi
	subl	-96(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB25_111
# %bb.110:                              # %cond.true773
                                        #   in Loop: Header=BB25_99 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB25_112
.LBB25_111:                             # %cond.false774
                                        #   in Loop: Header=BB25_99 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-24(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB25_112:                             # %cond.end782
                                        #   in Loop: Header=BB25_99 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB25_114
# %bb.113:                              # %cond.true786
                                        #   in Loop: Header=BB25_99 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB25_118
.LBB25_114:                             # %cond.false788
                                        #   in Loop: Header=BB25_99 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-24(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB25_116
# %bb.115:                              # %cond.true798
                                        #   in Loop: Header=BB25_99 Depth=2
	xorl	%eax, %eax
	jmp	.LBB25_117
.LBB25_116:                             # %cond.false799
                                        #   in Loop: Header=BB25_99 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-24(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB25_117:                             # %cond.end807
                                        #   in Loop: Header=BB25_99 Depth=2
.LBB25_118:                             # %cond.end809
                                        #   in Loop: Header=BB25_99 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.119:                              # %for.inc816
                                        #   in Loop: Header=BB25_99 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB25_99
.LBB25_120:                             # %for.end818
                                        #   in Loop: Header=BB25_93 Depth=1
	jmp	.LBB25_121
.LBB25_121:                             # %for.inc819
                                        #   in Loop: Header=BB25_93 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB25_93
.LBB25_122:                             # %for.end821
	movl	$0, -12(%rbp)
.LBB25_123:                             # %for.cond822
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_125 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB25_130
# %bb.124:                              # %for.body825
                                        #   in Loop: Header=BB25_123 Depth=1
	movl	$0, -16(%rbp)
.LBB25_125:                             # %for.cond826
                                        #   Parent Loop BB25_123 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB25_128
# %bb.126:                              # %for.body829
                                        #   in Loop: Header=BB25_125 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-116(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-140(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.127:                              # %for.inc844
                                        #   in Loop: Header=BB25_125 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB25_125
.LBB25_128:                             # %for.end846
                                        #   in Loop: Header=BB25_123 Depth=1
	jmp	.LBB25_129
.LBB25_129:                             # %for.inc847
                                        #   in Loop: Header=BB25_123 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB25_123
.LBB25_130:                             # %for.end849
	movl	-188(%rbp), %ebx
	cmpl	$1241144964, -212(%rbp) # imm = 0x49FA5E84
	jne	.LBB25_132
.LBB25_131:
	movl	%ebx, %eax
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_132:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB25_131
.Lfunc_end25:
	.size	dct_luma_sp.16, .Lfunc_end25-dct_luma_sp.16
	.cfi_endproc
                                        # -- End function
	.globl	copyblock_sp.17         # -- Begin function copyblock_sp.17
	.p2align	4, 0x90
	.type	copyblock_sp.17,@function
copyblock_sp.17:                        # @copyblock_sp.17
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movl	$1418709838, -88(%rbp)  # imm = 0x548FCB4E
	movl	%edi, -68(%rbp)
	movl	%esi, -80(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	-104(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -76(%rbp)
	movq	-104(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -72(%rbp)
	movl	-76(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -84(%rbp)
	movl	-84(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	movl	$0, -4(%rbp)
.LBB26_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB26_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB26_1 Depth=1
	movl	$0, -8(%rbp)
.LBB26_3:                               # %for.cond4
                                        #   Parent Loop BB26_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB26_6
# %bb.4:                                # %for.body6
                                        #   in Loop: Header=BB26_3 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-8(%rbp), %ecx
	addl	-68(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-4(%rbp), %ecx
	addl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-176(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB26_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_3
.LBB26_6:                               # %for.end
                                        #   in Loop: Header=BB26_1 Depth=1
	jmp	.LBB26_7
.LBB26_7:                               # %for.inc17
                                        #   in Loop: Header=BB26_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_1
.LBB26_8:                               # %for.end19
	movl	$0, -4(%rbp)
.LBB26_9:                               # %for.cond20
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_11 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB26_16
# %bb.10:                               # %for.body23
                                        #   in Loop: Header=BB26_9 Depth=1
	movl	$0, -8(%rbp)
.LBB26_11:                              # %for.cond24
                                        #   Parent Loop BB26_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -8(%rbp)
	jge	.LBB26_14
# %bb.12:                               # %for.body27
                                        #   in Loop: Header=BB26_11 Depth=2
	movl	$3, %eax
	subl	-8(%rbp), %eax
	movl	%eax, -36(%rbp)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-36(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-8(%rbp), %rdx
	movl	%eax, -32(%rbp,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-36(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-36(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.13:                               # %for.inc51
                                        #   in Loop: Header=BB26_11 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_11
.LBB26_14:                              # %for.end53
                                        #   in Loop: Header=BB26_9 Depth=1
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movl	-32(%rbp), %eax
	subl	-28(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -160(%rbp,%rcx,4)
	movl	-20(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
# %bb.15:                               # %for.inc79
                                        #   in Loop: Header=BB26_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_9
.LBB26_16:                              # %for.end81
	movl	$0, -8(%rbp)
.LBB26_17:                              # %for.cond82
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_19 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB26_24
# %bb.18:                               # %for.body85
                                        #   in Loop: Header=BB26_17 Depth=1
	movl	$0, -4(%rbp)
.LBB26_19:                              # %for.cond86
                                        #   Parent Loop BB26_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB26_22
# %bb.20:                               # %for.body89
                                        #   in Loop: Header=BB26_19 Depth=2
	movl	$3, %eax
	subl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-4(%rbp), %rdx
	movl	%eax, -32(%rbp,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.21:                               # %for.inc113
                                        #   in Loop: Header=BB26_19 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_19
.LBB26_22:                              # %for.end115
                                        #   in Loop: Header=BB26_17 Depth=1
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-176(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-32(%rbp), %ecx
	subl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	-24(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-20(%rbp), %ecx
	movl	-24(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.23:                               # %for.inc142
                                        #   in Loop: Header=BB26_17 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_17
.LBB26_24:                              # %for.end144
	movl	$0, -4(%rbp)
.LBB26_25:                              # %for.cond145
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_27 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB26_32
# %bb.26:                               # %for.body148
                                        #   in Loop: Header=BB26_25 Depth=1
	movl	$0, -8(%rbp)
.LBB26_27:                              # %for.cond149
                                        #   Parent Loop BB26_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB26_30
# %bb.28:                               # %for.body152
                                        #   in Loop: Header=BB26_27 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-72(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-92(%rbp), %eax
	movl	-84(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-176(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	(%rdx,%rcx,4), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-72(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-76(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.29:                               # %for.inc182
                                        #   in Loop: Header=BB26_27 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_27
.LBB26_30:                              # %for.end184
                                        #   in Loop: Header=BB26_25 Depth=1
	jmp	.LBB26_31
.LBB26_31:                              # %for.inc185
                                        #   in Loop: Header=BB26_25 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_25
.LBB26_32:                              # %for.end187
	movl	$0, -4(%rbp)
.LBB26_33:                              # %for.cond188
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_35 Depth 2
                                        #     Child Loop BB26_39 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB26_44
# %bb.34:                               # %for.body191
                                        #   in Loop: Header=BB26_33 Depth=1
	movl	$0, -8(%rbp)
.LBB26_35:                              # %for.cond192
                                        #   Parent Loop BB26_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB26_38
# %bb.36:                               # %for.body195
                                        #   in Loop: Header=BB26_35 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.37:                               # %for.inc203
                                        #   in Loop: Header=BB26_35 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_35
.LBB26_38:                              # %for.end205
                                        #   in Loop: Header=BB26_33 Depth=1
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-32(%rbp), %eax
	subl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	sarl	$1, %eax
	subl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	movl	-20(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -8(%rbp)
.LBB26_39:                              # %for.cond224
                                        #   Parent Loop BB26_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -8(%rbp)
	jge	.LBB26_42
# %bb.40:                               # %for.body227
                                        #   in Loop: Header=BB26_39 Depth=2
	movl	$3, %eax
	subl	-8(%rbp), %eax
	movl	%eax, -36(%rbp)
	movslq	-8(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-36(%rbp), %rcx
	addl	-64(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-36(%rbp), %rcx
	subl	-64(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-36(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.41:                               # %for.inc249
                                        #   in Loop: Header=BB26_39 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_39
.LBB26_42:                              # %for.end251
                                        #   in Loop: Header=BB26_33 Depth=1
	jmp	.LBB26_43
.LBB26_43:                              # %for.inc252
                                        #   in Loop: Header=BB26_33 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_33
.LBB26_44:                              # %for.end254
	movl	$0, -8(%rbp)
.LBB26_45:                              # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_47 Depth 2
                                        #     Child Loop BB26_51 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB26_74
# %bb.46:                               # %for.body258
                                        #   in Loop: Header=BB26_45 Depth=1
	movl	$0, -4(%rbp)
.LBB26_47:                              # %for.cond259
                                        #   Parent Loop BB26_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB26_50
# %bb.48:                               # %for.body262
                                        #   in Loop: Header=BB26_47 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.49:                               # %for.inc270
                                        #   in Loop: Header=BB26_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_47
.LBB26_50:                              # %for.end272
                                        #   in Loop: Header=BB26_45 Depth=1
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-32(%rbp), %eax
	subl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	sarl	$1, %eax
	subl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	movl	-20(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -4(%rbp)
.LBB26_51:                              # %for.cond291
                                        #   Parent Loop BB26_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB26_72
# %bb.52:                               # %for.body294
                                        #   in Loop: Header=BB26_51 Depth=2
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-4(%rbp), %rdx
	movl	-64(%rbp,%rdx,4), %edx
	movslq	-12(%rbp), %rsi
	addl	-64(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB26_54
# %bb.53:                               # %cond.true
                                        #   in Loop: Header=BB26_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB26_55
.LBB26_54:                              # %cond.false
                                        #   in Loop: Header=BB26_51 Depth=2
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	addl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB26_55:                              # %cond.end
                                        #   in Loop: Header=BB26_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB26_57
# %bb.56:                               # %cond.true314
                                        #   in Loop: Header=BB26_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB26_61
.LBB26_57:                              # %cond.false316
                                        #   in Loop: Header=BB26_51 Depth=2
	xorl	%eax, %eax
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	addl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB26_59
# %bb.58:                               # %cond.true326
                                        #   in Loop: Header=BB26_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB26_60
.LBB26_59:                              # %cond.false327
                                        #   in Loop: Header=BB26_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-64(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB26_60:                              # %cond.end335
                                        #   in Loop: Header=BB26_51 Depth=2
.LBB26_61:                              # %cond.end337
                                        #   in Loop: Header=BB26_51 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-4(%rbp), %rdx
	movl	-64(%rbp,%rdx,4), %edx
	movslq	-12(%rbp), %rsi
	subl	-64(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB26_63
# %bb.62:                               # %cond.true354
                                        #   in Loop: Header=BB26_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB26_64
.LBB26_63:                              # %cond.false355
                                        #   in Loop: Header=BB26_51 Depth=2
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	subl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB26_64:                              # %cond.end363
                                        #   in Loop: Header=BB26_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB26_66
# %bb.65:                               # %cond.true367
                                        #   in Loop: Header=BB26_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB26_70
.LBB26_66:                              # %cond.false369
                                        #   in Loop: Header=BB26_51 Depth=2
	xorl	%eax, %eax
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	subl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB26_68
# %bb.67:                               # %cond.true379
                                        #   in Loop: Header=BB26_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB26_69
.LBB26_68:                              # %cond.false380
                                        #   in Loop: Header=BB26_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-64(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB26_69:                              # %cond.end388
                                        #   in Loop: Header=BB26_51 Depth=2
.LBB26_70:                              # %cond.end390
                                        #   in Loop: Header=BB26_51 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.71:                               # %for.inc397
                                        #   in Loop: Header=BB26_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_51
.LBB26_72:                              # %for.end399
                                        #   in Loop: Header=BB26_45 Depth=1
	jmp	.LBB26_73
.LBB26_73:                              # %for.inc400
                                        #   in Loop: Header=BB26_45 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_45
.LBB26_74:                              # %for.end402
	movl	$0, -4(%rbp)
.LBB26_75:                              # %for.cond403
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_77 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB26_82
# %bb.76:                               # %for.body406
                                        #   in Loop: Header=BB26_75 Depth=1
	movl	$0, -8(%rbp)
.LBB26_77:                              # %for.cond407
                                        #   Parent Loop BB26_75 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB26_80
# %bb.78:                               # %for.body410
                                        #   in Loop: Header=BB26_77 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-80(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-68(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.79:                               # %for.inc425
                                        #   in Loop: Header=BB26_77 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_77
.LBB26_80:                              # %for.end427
                                        #   in Loop: Header=BB26_75 Depth=1
	jmp	.LBB26_81
.LBB26_81:                              # %for.inc428
                                        #   in Loop: Header=BB26_75 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_75
.LBB26_82:                              # %for.end430
	cmpl	$1418709838, -88(%rbp)  # imm = 0x548FCB4E
	jne	.LBB26_84
.LBB26_83:
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_84:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB26_83
.Lfunc_end26:
	.size	copyblock_sp.17, .Lfunc_end26-copyblock_sp.17
	.cfi_endproc
                                        # -- End function
	.globl	intrapred_luma_16x16.18 # -- Begin function intrapred_luma_16x16.18
	.p2align	4, 0x90
	.type	intrapred_luma_16x16.18,@function
intrapred_luma_16x16.18:                # @intrapred_luma_16x16.18
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$640, %rsp              # imm = 0x280
	movl	$1727537109, -92(%rbp)  # imm = 0x66F81FD5
	movl	$0, -28(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB27_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -4(%rbp)
	jge	.LBB27_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB27_1 Depth=1
	movl	-64(%rbp), %edi
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-512(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB27_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_1
.LBB27_4:                               # %for.end
	movl	-64(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	leaq	-88(%rbp), %r8
	callq	getNeighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	jne	.LBB27_6
# %bb.5:                                # %if.then
	movl	-88(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	-488(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-512(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB27_20
.LBB27_6:                               # %if.else
	cmpl	$0, -88(%rbp)
	je	.LBB27_8
# %bb.7:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-84(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB27_9
.LBB27_8:                               # %cond.false
	xorl	%eax, %eax
	jmp	.LBB27_9
.LBB27_9:                               # %cond.end
	movl	%eax, -16(%rbp)
	movl	$1, -4(%rbp)
	movl	$1, -12(%rbp)
.LBB27_10:                              # %for.cond9
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -4(%rbp)
	jge	.LBB27_16
# %bb.11:                               # %for.body11
                                        #   in Loop: Header=BB27_10 Depth=1
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-512(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB27_13
# %bb.12:                               # %cond.true16
                                        #   in Loop: Header=BB27_10 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB27_14
.LBB27_13:                              # %cond.false23
                                        #   in Loop: Header=BB27_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB27_14
.LBB27_14:                              # %cond.end24
                                        #   in Loop: Header=BB27_10 Depth=1
	andl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.15:                               # %for.inc26
                                        #   in Loop: Header=BB27_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_10
.LBB27_16:                              # %for.end28
	cmpl	$0, -512(%rbp)
	je	.LBB27_18
# %bb.17:                               # %cond.true32
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-508(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB27_19
.LBB27_18:                              # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB27_19
.LBB27_19:                              # %cond.end39
	movl	%eax, -60(%rbp)
.LBB27_20:                              # %if.end
	movl	$0, -36(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB27_21:                              # %for.cond41
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -4(%rbp)
	jge	.LBB27_28
# %bb.22:                               # %for.body43
                                        #   in Loop: Header=BB27_21 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB27_24
# %bb.23:                               # %if.then45
                                        #   in Loop: Header=BB27_21 Depth=1
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB27_24:                              # %if.end51
                                        #   in Loop: Header=BB27_21 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB27_26
# %bb.25:                               # %if.then53
                                        #   in Loop: Header=BB27_21 Depth=1
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB27_26:                              # %if.end68
                                        #   in Loop: Header=BB27_21 Depth=1
	jmp	.LBB27_27
.LBB27_27:                              # %for.inc69
                                        #   in Loop: Header=BB27_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_21
.LBB27_28:                              # %for.end71
	cmpl	$0, -16(%rbp)
	je	.LBB27_31
# %bb.29:                               # %land.lhs.true
	cmpl	$0, -12(%rbp)
	je	.LBB27_31
# %bb.30:                               # %if.then74
	movl	-48(%rbp), %eax
	addl	-36(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
.LBB27_31:                              # %if.end77
	cmpl	$0, -16(%rbp)
	jne	.LBB27_34
# %bb.32:                               # %land.lhs.true79
	cmpl	$0, -12(%rbp)
	je	.LBB27_34
# %bb.33:                               # %if.then81
	movl	-36(%rbp), %eax
	addl	$8, %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
.LBB27_34:                              # %if.end84
	cmpl	$0, -16(%rbp)
	je	.LBB27_37
# %bb.35:                               # %land.lhs.true86
	cmpl	$0, -12(%rbp)
	jne	.LBB27_37
# %bb.36:                               # %if.then88
	movl	-48(%rbp), %eax
	addl	$8, %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
.LBB27_37:                              # %if.end91
	cmpl	$0, -16(%rbp)
	jne	.LBB27_40
# %bb.38:                               # %land.lhs.true93
	cmpl	$0, -12(%rbp)
	jne	.LBB27_40
# %bb.39:                               # %if.then95
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -28(%rbp)
.LBB27_40:                              # %if.end96
	movl	$0, -4(%rbp)
.LBB27_41:                              # %for.cond97
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -4(%rbp)
	jge	.LBB27_48
# %bb.42:                               # %for.body100
                                        #   in Loop: Header=BB27_41 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB27_44
# %bb.43:                               # %if.then102
                                        #   in Loop: Header=BB27_41 Depth=1
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -640(%rbp,%rcx,8)
.LBB27_44:                              # %if.end114
                                        #   in Loop: Header=BB27_41 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB27_46
# %bb.45:                               # %if.then116
                                        #   in Loop: Header=BB27_41 Depth=1
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -636(%rbp,%rcx,8)
.LBB27_46:                              # %if.end133
                                        #   in Loop: Header=BB27_41 Depth=1
	jmp	.LBB27_47
.LBB27_47:                              # %for.inc134
                                        #   in Loop: Header=BB27_41 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_41
.LBB27_48:                              # %for.end136
	movl	$0, -8(%rbp)
.LBB27_49:                              # %for.cond137
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_51 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB27_56
# %bb.50:                               # %for.body140
                                        #   in Loop: Header=BB27_49 Depth=1
	movl	$0, -4(%rbp)
.LBB27_51:                              # %for.cond141
                                        #   Parent Loop BB27_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB27_54
# %bb.52:                               # %for.body144
                                        #   in Loop: Header=BB27_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-640(%rbp,%rax,8), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-8(%rbp), %rax
	movl	-636(%rbp,%rax,8), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$512, %rcx              # imm = 0x200
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	-28(%rbp), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$1024, %rcx             # imm = 0x400
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.53:                               # %for.inc171
                                        #   in Loop: Header=BB27_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_51
.LBB27_54:                              # %for.end173
                                        #   in Loop: Header=BB27_49 Depth=1
	jmp	.LBB27_55
.LBB27_55:                              # %for.inc174
                                        #   in Loop: Header=BB27_49 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_49
.LBB27_56:                              # %for.end176
	cmpl	$0, -16(%rbp)
	je	.LBB27_59
# %bb.57:                               # %lor.lhs.false
	cmpl	$0, -12(%rbp)
	je	.LBB27_59
# %bb.58:                               # %lor.lhs.false179
	cmpl	$0, -60(%rbp)
	jne	.LBB27_60
.LBB27_59:                              # %if.then181
	jmp	.LBB27_85
.LBB27_60:                              # %if.end182
	movl	$0, -32(%rbp)
	movl	$0, -56(%rbp)
	movl	$1, -4(%rbp)
.LBB27_61:                              # %for.cond183
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$9, -4(%rbp)
	jge	.LBB27_67
# %bb.62:                               # %for.body186
                                        #   in Loop: Header=BB27_61 Depth=1
	cmpl	$8, -4(%rbp)
	jge	.LBB27_64
# %bb.63:                               # %if.then189
                                        #   in Loop: Header=BB27_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	addl	$7, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-24(%rbp), %rdx
	movslq	-68(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-72(%rbp), %esi
	addl	$7, %esi
	subl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB27_65
.LBB27_64:                              # %if.else210
                                        #   in Loop: Header=BB27_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	addl	$7, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-24(%rbp), %rdx
	movslq	-492(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-496(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
.LBB27_65:                              # %if.end232
                                        #   in Loop: Header=BB27_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	leaq	-512(%rbp), %rcx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movslq	20(%rdi), %rdx
	movq	(%rsi,%rdx,8), %rsi
	movl	-4(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movslq	16(%rdi), %rdx
	movzwl	(%rsi,%rdx,2), %r9d
	movq	-24(%rbp), %r8
	movl	$8, %edi
	movl	$8, %edx
	subl	-4(%rbp), %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	20(%rsi), %rdx
	movq	(%r8,%rdx,8), %rdx
	subl	-4(%rbp), %edi
	movslq	%edi, %rsi
	imulq	$24, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	16(%rcx), %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %r9d
	imull	%r9d, %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.66:                               # %for.inc262
                                        #   in Loop: Header=BB27_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_61
.LBB27_67:                              # %for.end264
	imull	$5, -32(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movl	%eax, -44(%rbp)
	imull	$5, -56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movl	%eax, -52(%rbp)
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	$15, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-108(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-112(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	shll	$4, %eax
	movl	%eax, -40(%rbp)
	movl	$0, -8(%rbp)
.LBB27_68:                              # %for.cond289
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_70 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB27_84
# %bb.69:                               # %for.body292
                                        #   in Loop: Header=BB27_68 Depth=1
	movl	$0, -4(%rbp)
.LBB27_70:                              # %for.cond293
                                        #   Parent Loop BB27_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB27_82
# %bb.71:                               # %for.body296
                                        #   in Loop: Header=BB27_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-40(%rbp), %eax
	movl	-4(%rbp), %edx
	subl	$7, %edx
	imull	-44(%rbp), %edx
	addl	%edx, %eax
	movl	-8(%rbp), %edx
	subl	$7, %edx
	imull	-52(%rbp), %edx
	addl	%edx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB27_73
# %bb.72:                               # %cond.true307
                                        #   in Loop: Header=BB27_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB27_74
.LBB27_73:                              # %cond.false309
                                        #   in Loop: Header=BB27_70 Depth=2
	movl	-40(%rbp), %eax
	movl	-4(%rbp), %ecx
	subl	$7, %ecx
	imull	-44(%rbp), %ecx
	addl	%ecx, %eax
	movl	-8(%rbp), %ecx
	subl	$7, %ecx
	imull	-52(%rbp), %ecx
	addl	%ecx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB27_74:                              # %cond.end318
                                        #   in Loop: Header=BB27_70 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB27_76
# %bb.75:                               # %cond.true322
                                        #   in Loop: Header=BB27_70 Depth=2
	xorl	%eax, %eax
	jmp	.LBB27_80
.LBB27_76:                              # %cond.false323
                                        #   in Loop: Header=BB27_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-40(%rbp), %eax
	movl	-4(%rbp), %edx
	subl	$7, %edx
	imull	-44(%rbp), %edx
	addl	%edx, %eax
	movl	-8(%rbp), %edx
	subl	$7, %edx
	imull	-52(%rbp), %edx
	addl	%edx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB27_78
# %bb.77:                               # %cond.true335
                                        #   in Loop: Header=BB27_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB27_79
.LBB27_78:                              # %cond.false337
                                        #   in Loop: Header=BB27_70 Depth=2
	movl	-40(%rbp), %eax
	movl	-4(%rbp), %ecx
	subl	$7, %ecx
	imull	-44(%rbp), %ecx
	addl	%ecx, %eax
	movl	-8(%rbp), %ecx
	subl	$7, %ecx
	imull	-52(%rbp), %ecx
	addl	%ecx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB27_79:                              # %cond.end346
                                        #   in Loop: Header=BB27_70 Depth=2
.LBB27_80:                              # %cond.end348
                                        #   in Loop: Header=BB27_70 Depth=2
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$1536, %rcx             # imm = 0x600
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.81:                               # %for.inc357
                                        #   in Loop: Header=BB27_70 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_70
.LBB27_82:                              # %for.end359
                                        #   in Loop: Header=BB27_68 Depth=1
	jmp	.LBB27_83
.LBB27_83:                              # %for.inc360
                                        #   in Loop: Header=BB27_68 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_68
.LBB27_84:                              # %for.end362.loopexit
	jmp	.LBB27_85
.LBB27_85:                              # %for.end362
	cmpl	$1727537109, -92(%rbp)  # imm = 0x66F81FD5
	jne	.LBB27_87
.LBB27_86:
	addq	$640, %rsp              # imm = 0x280
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB27_87:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB27_86
.Lfunc_end27:
	.size	intrapred_luma_16x16.18, .Lfunc_end27-intrapred_luma_16x16.18
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma.19           # -- Begin function dct_chroma.19
	.p2align	4, 0x90
	.type	dct_chroma.19,@function
dct_chroma.19:                          # @dct_chroma.19
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$424, %rsp              # imm = 0x1A8
	.cfi_offset %rbx, -24
	movl	$2024535468, -380(%rbp) # imm = 0x78ABF5AC
	movl	%edi, -20(%rbp)
	movl	%esi, -132(%rbp)
	movl	$0, -204(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -192(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -224(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -376(%rbp)
	movq	-192(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB28_3
# %bb.1:                                # %lor.lhs.false
	movq	-192(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB28_3
# %bb.2:                                # %lor.rhs
	movq	-192(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB28_3:                               # %lor.end
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -124(%rbp)
	movl	-20(%rbp), %esi
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	imull	%eax, %esi
	movl	%esi, -200(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern, %rax
	movq	%rax, -432(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+8, %rax
	movq	%rax, -424(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+16, %rax
	movq	%rax, -416(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+24, %rax
	movq	%rax, -408(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	movl	%eax, -144(%rbp)
	movl	$0, -104(%rbp)
	movl	$0, -136(%rbp)
	movl	$0, -208(%rbp)
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	cmpl	$0, %eax
	jne	.LBB28_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%cl
.LBB28_5:                               # %land.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -108(%rbp)
	movq	-192(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	img, %rdx
	movslq	-20(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	movl	%ecx, -128(%rbp)
	movl	-128(%rbp), %ecx
	movq	img, %rdx
	subl	72672(%rdx), %eax
	cmpl	%eax, %ecx
	jge	.LBB28_7
# %bb.6:                                # %cond.true
	xorl	%eax, %eax
	movq	img, %rcx
	subl	72672(%rcx), %eax
	jmp	.LBB28_11
.LBB28_7:                               # %cond.false
	cmpl	$51, -128(%rbp)
	jle	.LBB28_9
# %bb.8:                                # %cond.true24
	movl	$51, %eax
	jmp	.LBB28_10
.LBB28_9:                               # %cond.false25
	movl	-128(%rbp), %eax
.LBB28_10:                              # %cond.end
.LBB28_11:                              # %cond.end26
	movl	%eax, -128(%rbp)
	cmpl	$0, -128(%rbp)
	jge	.LBB28_13
# %bb.12:                               # %cond.true29
	movl	-128(%rbp), %eax
	jmp	.LBB28_14
.LBB28_13:                              # %cond.false30
	movl	-128(%rbp), %eax
	subl	$0, %eax
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB28_14:                              # %cond.end34
	movl	%eax, -128(%rbp)
	movl	-128(%rbp), %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movl	-128(%rbp), %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -76(%rbp)
	movl	-40(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -180(%rbp)
	movq	img, %rax
	cmpl	$2, 72700(%rax)
	jne	.LBB28_16
# %bb.15:                               # %if.then
	movl	-128(%rbp), %eax
	addl	$3, %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -104(%rbp)
	movl	-128(%rbp), %eax
	addl	$3, %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -136(%rbp)
	movl	-104(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -208(%rbp)
.LBB28_16:                              # %if.end
	movl	$0, -24(%rbp)
.LBB28_17:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_19 Depth 2
                                        #       Child Loop BB28_21 Depth 3
                                        #         Child Loop BB28_25 Depth 4
                                        #       Child Loop BB28_31 Depth 3
                                        #         Child Loop BB28_35 Depth 4
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB28_44
# %bb.18:                               # %for.body
                                        #   in Loop: Header=BB28_17 Depth=1
	movl	$0, -28(%rbp)
.LBB28_19:                              # %for.cond56
                                        #   Parent Loop BB28_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB28_21 Depth 3
                                        #         Child Loop BB28_25 Depth 4
                                        #       Child Loop BB28_31 Depth 3
                                        #         Child Loop BB28_35 Depth 4
	movl	-28(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB28_42
# %bb.20:                               # %for.body59
                                        #   in Loop: Header=BB28_19 Depth=2
	movl	$0, -12(%rbp)
.LBB28_21:                              # %for.cond60
                                        #   Parent Loop BB28_17 Depth=1
                                        #     Parent Loop BB28_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB28_25 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB28_23
# %bb.22:                               # %land.rhs63
                                        #   in Loop: Header=BB28_21 Depth=3
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB28_23:                              # %land.end64
                                        #   in Loop: Header=BB28_21 Depth=3
	testb	$1, %al
	jne	.LBB28_24
	jmp	.LBB28_30
.LBB28_24:                              # %for.body66
                                        #   in Loop: Header=BB28_21 Depth=3
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -148(%rbp)
	movl	$0, -16(%rbp)
.LBB28_25:                              # %for.cond68
                                        #   Parent Loop BB28_17 Depth=1
                                        #     Parent Loop BB28_19 Depth=2
                                        #       Parent Loop BB28_21 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB28_28
# %bb.26:                               # %for.body71
                                        #   in Loop: Header=BB28_25 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-148(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-120(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-148(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-120(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-120(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.27:                               # %for.inc
                                        #   in Loop: Header=BB28_25 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_25
.LBB28_28:                              # %for.end
                                        #   in Loop: Header=BB28_21 Depth=3
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-28(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.29:                               # %for.inc139
                                        #   in Loop: Header=BB28_21 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_21
.LBB28_30:                              # %for.end141
                                        #   in Loop: Header=BB28_19 Depth=2
	movl	$0, -16(%rbp)
.LBB28_31:                              # %for.cond142
                                        #   Parent Loop BB28_17 Depth=1
                                        #     Parent Loop BB28_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB28_35 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB28_33
# %bb.32:                               # %land.rhs145
                                        #   in Loop: Header=BB28_31 Depth=3
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB28_33:                              # %land.end148
                                        #   in Loop: Header=BB28_31 Depth=3
	testb	$1, %al
	jne	.LBB28_34
	jmp	.LBB28_40
.LBB28_34:                              # %for.body150
                                        #   in Loop: Header=BB28_31 Depth=3
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	$0, -12(%rbp)
.LBB28_35:                              # %for.cond152
                                        #   Parent Loop BB28_17 Depth=1
                                        #     Parent Loop BB28_19 Depth=2
                                        #       Parent Loop BB28_31 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB28_38
# %bb.36:                               # %for.body155
                                        #   in Loop: Header=BB28_35 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-72(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.37:                               # %for.inc187
                                        #   in Loop: Header=BB28_35 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_35
.LBB28_38:                              # %for.end189
                                        #   in Loop: Header=BB28_31 Depth=3
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.39:                               # %for.inc228
                                        #   in Loop: Header=BB28_31 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_31
.LBB28_40:                              # %for.end230
                                        #   in Loop: Header=BB28_19 Depth=2
	jmp	.LBB28_41
.LBB28_41:                              # %for.inc231
                                        #   in Loop: Header=BB28_19 Depth=2
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB28_19
.LBB28_42:                              # %for.end233
                                        #   in Loop: Header=BB28_17 Depth=1
	jmp	.LBB28_43
.LBB28_43:                              # %for.inc234
                                        #   in Loop: Header=BB28_17 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB28_17
.LBB28_44:                              # %for.end236
	cmpl	$1, -144(%rbp)
	jne	.LBB28_76
# %bb.45:                               # %if.then239
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -176(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -172(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -168(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -164(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -36(%rbp)
.LBB28_46:                              # %for.cond304
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -36(%rbp)
	jge	.LBB28_62
# %bb.47:                               # %for.body307
                                        #   in Loop: Header=BB28_46 Depth=1
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -140(%rbp)
	cmpl	$1, -124(%rbp)
	jne	.LBB28_49
# %bb.48:                               # %if.then311
                                        #   in Loop: Header=BB28_46 Depth=1
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB28_50
.LBB28_49:                              # %if.else
                                        #   in Loop: Header=BB28_46 Depth=1
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB28_50:                              # %if.end349
                                        #   in Loop: Header=BB28_46 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB28_55
# %bb.51:                               # %land.lhs.true
                                        #   in Loop: Header=BB28_46 Depth=1
	movq	img, %rax
	cmpl	$4, 40(%rax)
	jge	.LBB28_55
# %bb.52:                               # %if.then355
                                        #   in Loop: Header=BB28_46 Depth=1
	cmpl	$2063, -44(%rbp)        # imm = 0x80F
	jle	.LBB28_54
# %bb.53:                               # %if.then358
                                        #   in Loop: Header=BB28_46 Depth=1
	movl	$2063, -44(%rbp)        # imm = 0x80F
.LBB28_54:                              # %if.end359
                                        #   in Loop: Header=BB28_46 Depth=1
	jmp	.LBB28_55
.LBB28_55:                              # %if.end360
                                        #   in Loop: Header=BB28_46 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB28_60
# %bb.56:                               # %if.then363
                                        #   in Loop: Header=BB28_46 Depth=1
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
                                        # kill: def $cl killed $ecx
	movl	$983040, %eax           # imm = 0xF0000
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-132(%rbp), %eax
	jle	.LBB28_58
# %bb.57:                               # %cond.true369
                                        #   in Loop: Header=BB28_46 Depth=1
	movl	$1, %eax
	jmp	.LBB28_59
.LBB28_58:                              # %cond.false370
                                        #   in Loop: Header=BB28_46 Depth=1
	movl	-132(%rbp), %eax
.LBB28_59:                              # %cond.end371
                                        #   in Loop: Header=BB28_46 Depth=1
	movl	%eax, -132(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	$-1, -100(%rbp)
	movl	-44(%rbp), %edi
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %esi
	callq	sign
	movl	%eax, -140(%rbp)
.LBB28_60:                              # %if.end384
                                        #   in Loop: Header=BB28_46 Depth=1
	movl	-140(%rbp), %eax
	movslq	-36(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.61:                               # %for.inc387
                                        #   in Loop: Header=BB28_46 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB28_46
.LBB28_62:                              # %for.end389
	movq	-224(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -16(%rbp)
.LBB28_63:                              # %for.cond424
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB28_75
# %bb.64:                               # %for.body427
                                        #   in Loop: Header=BB28_63 Depth=1
	cmpl	$5, -40(%rbp)
	jge	.LBB28_69
# %bb.65:                               # %if.then430
                                        #   in Loop: Header=BB28_63 Depth=1
	cmpl	$1, -124(%rbp)
	jne	.LBB28_67
# %bb.66:                               # %if.then433
                                        #   in Loop: Header=BB28_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	$5, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	jmp	.LBB28_68
.LBB28_67:                              # %if.else447
                                        #   in Loop: Header=BB28_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	$5, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
.LBB28_68:                              # %if.end461
                                        #   in Loop: Header=BB28_63 Depth=1
	jmp	.LBB28_73
.LBB28_69:                              # %if.else462
                                        #   in Loop: Header=BB28_63 Depth=1
	cmpl	$1, -124(%rbp)
	jne	.LBB28_71
# %bb.70:                               # %if.then465
                                        #   in Loop: Header=BB28_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-40(%rbp), %ecx
	subl	$5, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	jmp	.LBB28_72
.LBB28_71:                              # %if.else479
                                        #   in Loop: Header=BB28_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-40(%rbp), %ecx
	subl	$5, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
.LBB28_72:                              # %if.end493
                                        #   in Loop: Header=BB28_63 Depth=1
	jmp	.LBB28_73
.LBB28_73:                              # %if.end494
                                        #   in Loop: Header=BB28_63 Depth=1
	jmp	.LBB28_74
.LBB28_74:                              # %for.inc495
                                        #   in Loop: Header=BB28_63 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_63
.LBB28_75:                              # %for.end497
	movl	-176(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	movl	-172(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13368(%rcx)
	movl	-168(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13128(%rcx)
	movl	-164(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13384(%rcx)
	jmp	.LBB28_213
.LBB28_76:                              # %if.else514
	cmpl	$2, -144(%rbp)
	jne	.LBB28_127
# %bb.77:                               # %if.then517
	movl	$0, -12(%rbp)
.LBB28_78:                              # %for.cond518
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_80 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB28_85
# %bb.79:                               # %for.body522
                                        #   in Loop: Header=BB28_78 Depth=1
	movl	$0, -16(%rbp)
.LBB28_80:                              # %for.cond523
                                        #   Parent Loop BB28_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB28_83
# %bb.81:                               # %for.body527
                                        #   in Loop: Header=BB28_80 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$4, %rcx
	leaq	-368(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.82:                               # %for.inc539
                                        #   in Loop: Header=BB28_80 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_80
.LBB28_83:                              # %for.end541
                                        #   in Loop: Header=BB28_78 Depth=1
	jmp	.LBB28_84
.LBB28_84:                              # %for.inc542
                                        #   in Loop: Header=BB28_78 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_78
.LBB28_85:                              # %for.end544
	movl	-368(%rbp), %eax
	addl	-352(%rbp), %eax
	movl	%eax, -304(%rbp)
	movl	-364(%rbp), %eax
	addl	-348(%rbp), %eax
	movl	%eax, -300(%rbp)
	movl	-360(%rbp), %eax
	addl	-344(%rbp), %eax
	movl	%eax, -296(%rbp)
	movl	-356(%rbp), %eax
	addl	-340(%rbp), %eax
	movl	%eax, -292(%rbp)
	movl	-368(%rbp), %eax
	subl	-352(%rbp), %eax
	movl	%eax, -288(%rbp)
	movl	-364(%rbp), %eax
	subl	-348(%rbp), %eax
	movl	%eax, -284(%rbp)
	movl	-360(%rbp), %eax
	subl	-344(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-356(%rbp), %eax
	subl	-340(%rbp), %eax
	movl	%eax, -276(%rbp)
	movl	$0, -16(%rbp)
.LBB28_86:                              # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_88 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB28_93
# %bb.87:                               # %for.body604
                                        #   in Loop: Header=BB28_86 Depth=1
	movl	$0, -12(%rbp)
.LBB28_88:                              # %for.cond605
                                        #   Parent Loop BB28_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB28_91
# %bb.89:                               # %for.body608
                                        #   in Loop: Header=BB28_88 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-32(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-32(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.90:                               # %for.inc632
                                        #   in Loop: Header=BB28_88 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_88
.LBB28_91:                              # %for.end634
                                        #   in Loop: Header=BB28_86 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, 8(%rsi)
	movl	-52(%rbp), %eax
	addl	-56(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-52(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movl	%eax, 12(%rdx)
# %bb.92:                               # %for.inc659
                                        #   in Loop: Header=BB28_86 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_86
.LBB28_93:                              # %for.end661
	movl	$-1, -100(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -36(%rbp)
.LBB28_94:                              # %for.cond662
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -36(%rbp)
	jge	.LBB28_105
# %bb.95:                               # %for.body665
                                        #   in Loop: Header=BB28_94 Depth=1
	movslq	-36(%rbp), %rax
	movzbl	SCAN_YUV422(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SCAN_YUV422+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	cmpl	$1, -124(%rbp)
	jne	.LBB28_97
# %bb.96:                               # %if.then677
                                        #   in Loop: Header=BB28_94 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-104(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-208(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB28_98
.LBB28_97:                              # %if.else700
                                        #   in Loop: Header=BB28_94 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-104(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-208(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB28_98:                              # %if.end723
                                        #   in Loop: Header=BB28_94 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB28_103
# %bb.99:                               # %if.then726
                                        #   in Loop: Header=BB28_94 Depth=1
	movl	-20(%rbp), %ecx
	shll	$3, %ecx
                                        # kill: def $cl killed $ecx
	movl	$16711680, %eax         # imm = 0xFF0000
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-132(%rbp), %eax
	jle	.LBB28_101
# %bb.100:                              # %cond.true734
                                        #   in Loop: Header=BB28_94 Depth=1
	movl	$1, %eax
	jmp	.LBB28_102
.LBB28_101:                             # %cond.false735
                                        #   in Loop: Header=BB28_94 Depth=1
	movl	-132(%rbp), %eax
.LBB28_102:                             # %cond.end736
                                        #   in Loop: Header=BB28_94 Depth=1
	movl	%eax, -132(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	$-1, -100(%rbp)
.LBB28_103:                             # %if.end748
                                        #   in Loop: Header=BB28_94 Depth=1
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-368(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.104:                              # %for.inc758
                                        #   in Loop: Header=BB28_94 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB28_94
.LBB28_105:                             # %for.end760
	movq	-224(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-368(%rbp), %eax
	addl	-352(%rbp), %eax
	movl	%eax, -304(%rbp)
	movl	-364(%rbp), %eax
	addl	-348(%rbp), %eax
	movl	%eax, -300(%rbp)
	movl	-360(%rbp), %eax
	addl	-344(%rbp), %eax
	movl	%eax, -296(%rbp)
	movl	-356(%rbp), %eax
	addl	-340(%rbp), %eax
	movl	%eax, -292(%rbp)
	movl	-368(%rbp), %eax
	subl	-352(%rbp), %eax
	movl	%eax, -288(%rbp)
	movl	-364(%rbp), %eax
	subl	-348(%rbp), %eax
	movl	%eax, -284(%rbp)
	movl	-360(%rbp), %eax
	subl	-344(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-356(%rbp), %eax
	subl	-340(%rbp), %eax
	movl	%eax, -276(%rbp)
	movl	$0, -16(%rbp)
.LBB28_106:                             # %for.cond819
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_108 Depth 2
                                        #     Child Loop BB28_112 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB28_126
# %bb.107:                              # %for.body822
                                        #   in Loop: Header=BB28_106 Depth=1
	movl	$0, -12(%rbp)
.LBB28_108:                             # %for.cond823
                                        #   Parent Loop BB28_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB28_111
# %bb.109:                              # %for.body826
                                        #   in Loop: Header=BB28_108 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.110:                              # %for.inc833
                                        #   in Loop: Header=BB28_108 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_108
.LBB28_111:                             # %for.end835
                                        #   in Loop: Header=BB28_106 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB28_112:                             # %for.cond852
                                        #   Parent Loop BB28_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB28_124
# %bb.113:                              # %for.body855
                                        #   in Loop: Header=BB28_112 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	cmpl	$4, -104(%rbp)
	jge	.LBB28_118
# %bb.114:                              # %if.then859
                                        #   in Loop: Header=BB28_112 Depth=2
	cmpl	$1, -124(%rbp)
	jne	.LBB28_116
# %bb.115:                              # %if.then862
                                        #   in Loop: Header=BB28_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-136(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-104(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-104(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
	jmp	.LBB28_117
.LBB28_116:                             # %if.else915
                                        #   in Loop: Header=BB28_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-136(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-104(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-104(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
.LBB28_117:                             # %if.end968
                                        #   in Loop: Header=BB28_112 Depth=2
	jmp	.LBB28_122
.LBB28_118:                             # %if.else969
                                        #   in Loop: Header=BB28_112 Depth=2
	cmpl	$1, -124(%rbp)
	jne	.LBB28_120
# %bb.119:                              # %if.then972
                                        #   in Loop: Header=BB28_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-104(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-104(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB28_121
.LBB28_120:                             # %if.else1019
                                        #   in Loop: Header=BB28_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-104(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-104(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB28_121:                             # %if.end1066
                                        #   in Loop: Header=BB28_112 Depth=2
	jmp	.LBB28_122
.LBB28_122:                             # %if.end1067
                                        #   in Loop: Header=BB28_112 Depth=2
	jmp	.LBB28_123
.LBB28_123:                             # %for.inc1068
                                        #   in Loop: Header=BB28_112 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_112
.LBB28_124:                             # %for.end1070
                                        #   in Loop: Header=BB28_106 Depth=1
	jmp	.LBB28_125
.LBB28_125:                             # %for.inc1071
                                        #   in Loop: Header=BB28_106 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_106
.LBB28_126:                             # %for.end1073
	jmp	.LBB28_212
.LBB28_127:                             # %if.else1074
	cmpl	$3, -144(%rbp)
	jne	.LBB28_211
# %bb.128:                              # %if.then1077
	movl	$0, -12(%rbp)
.LBB28_129:                             # %for.cond1078
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_131 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB28_136
# %bb.130:                              # %for.body1082
                                        #   in Loop: Header=BB28_129 Depth=1
	movl	$0, -16(%rbp)
.LBB28_131:                             # %for.cond1083
                                        #   Parent Loop BB28_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB28_134
# %bb.132:                              # %for.body1087
                                        #   in Loop: Header=BB28_131 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.133:                              # %for.inc1099
                                        #   in Loop: Header=BB28_131 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_131
.LBB28_134:                             # %for.end1101
                                        #   in Loop: Header=BB28_129 Depth=1
	jmp	.LBB28_135
.LBB28_135:                             # %for.inc1102
                                        #   in Loop: Header=BB28_129 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_129
.LBB28_136:                             # %for.end1104
	movl	$0, -12(%rbp)
.LBB28_137:                             # %for.cond1105
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_141 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB28_139
# %bb.138:                              # %land.rhs1108
                                        #   in Loop: Header=BB28_137 Depth=1
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB28_139:                             # %land.end1111
                                        #   in Loop: Header=BB28_137 Depth=1
	testb	$1, %al
	jne	.LBB28_140
	jmp	.LBB28_146
.LBB28_140:                             # %for.body1113
                                        #   in Loop: Header=BB28_137 Depth=1
	movl	$0, -16(%rbp)
.LBB28_141:                             # %for.cond1114
                                        #   Parent Loop BB28_137 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB28_144
# %bb.142:                              # %for.body1117
                                        #   in Loop: Header=BB28_141 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-120(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-120(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-120(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.143:                              # %for.inc1141
                                        #   in Loop: Header=BB28_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_141
.LBB28_144:                             # %for.end1143
                                        #   in Loop: Header=BB28_137 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -304(%rbp,%rcx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
	movl	-52(%rbp), %eax
	addl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -288(%rbp,%rcx,4)
	movl	-52(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -256(%rbp,%rcx,4)
# %bb.145:                              # %for.inc1168
                                        #   in Loop: Header=BB28_137 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_137
.LBB28_146:                             # %for.end1170
	movl	$0, -16(%rbp)
.LBB28_147:                             # %for.cond1171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_151 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB28_149
# %bb.148:                              # %land.rhs1174
                                        #   in Loop: Header=BB28_147 Depth=1
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB28_149:                             # %land.end1177
                                        #   in Loop: Header=BB28_147 Depth=1
	testb	$1, %al
	jne	.LBB28_150
	jmp	.LBB28_156
.LBB28_150:                             # %for.body1179
                                        #   in Loop: Header=BB28_147 Depth=1
	movl	$0, -12(%rbp)
.LBB28_151:                             # %for.cond1180
                                        #   Parent Loop BB28_147 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB28_154
# %bb.152:                              # %for.body1183
                                        #   in Loop: Header=BB28_151 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-32(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-32(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.153:                              # %for.inc1207
                                        #   in Loop: Header=BB28_151 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_151
.LBB28_154:                             # %for.end1209
                                        #   in Loop: Header=BB28_147 Depth=1
	movl	-64(%rbp), %ecx
	addl	-60(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-304(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-64(%rbp), %ecx
	subl	-60(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-52(%rbp), %ecx
	addl	-56(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-52(%rbp), %ecx
	subl	-56(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.155:                              # %for.inc1238
                                        #   in Loop: Header=BB28_147 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_147
.LBB28_156:                             # %for.end1240
	movl	$-1, -100(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -36(%rbp)
.LBB28_157:                             # %for.cond1241
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -36(%rbp)
	jge	.LBB28_173
# %bb.158:                              # %for.body1244
                                        #   in Loop: Header=BB28_157 Depth=1
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB28_160
# %bb.159:                              # %if.then1255
                                        #   in Loop: Header=BB28_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -44(%rbp)
	jmp	.LBB28_164
.LBB28_160:                             # %if.else1261
                                        #   in Loop: Header=BB28_157 Depth=1
	cmpl	$1, -124(%rbp)
	jne	.LBB28_162
# %bb.161:                              # %if.then1264
                                        #   in Loop: Header=BB28_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB28_163
.LBB28_162:                             # %if.else1287
                                        #   in Loop: Header=BB28_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB28_163:                             # %if.end1310
                                        #   in Loop: Header=BB28_157 Depth=1
	jmp	.LBB28_164
.LBB28_164:                             # %if.end1311
                                        #   in Loop: Header=BB28_157 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB28_169
# %bb.165:                              # %if.then1314
                                        #   in Loop: Header=BB28_157 Depth=1
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $rcx
	movl	$4294901760, %eax       # imm = 0xFFFF0000
	shlq	%cl, %rax
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-132(%rbp), %eax
	jle	.LBB28_167
# %bb.166:                              # %cond.true1321
                                        #   in Loop: Header=BB28_157 Depth=1
	movl	$1, %eax
	jmp	.LBB28_168
.LBB28_167:                             # %cond.false1322
                                        #   in Loop: Header=BB28_157 Depth=1
	movl	-132(%rbp), %eax
.LBB28_168:                             # %cond.end1323
                                        #   in Loop: Header=BB28_157 Depth=1
	movl	%eax, -132(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	$-1, -100(%rbp)
.LBB28_169:                             # %if.end1335
                                        #   in Loop: Header=BB28_157 Depth=1
	cmpl	$0, -108(%rbp)
	jne	.LBB28_171
# %bb.170:                              # %if.then1337
                                        #   in Loop: Header=BB28_157 Depth=1
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB28_171:                             # %if.end1347
                                        #   in Loop: Header=BB28_157 Depth=1
	jmp	.LBB28_172
.LBB28_172:                             # %for.inc1348
                                        #   in Loop: Header=BB28_157 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB28_157
.LBB28_173:                             # %for.end1350
	movq	-224(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB28_174:                             # %for.cond1353
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_178 Depth 2
                                        #     Child Loop BB28_182 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB28_176
# %bb.175:                              # %land.rhs1356
                                        #   in Loop: Header=BB28_174 Depth=1
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB28_176:                             # %land.end1359
                                        #   in Loop: Header=BB28_174 Depth=1
	testb	$1, %al
	jne	.LBB28_177
	jmp	.LBB28_187
.LBB28_177:                             # %for.body1361
                                        #   in Loop: Header=BB28_174 Depth=1
	movl	$0, -16(%rbp)
.LBB28_178:                             # %for.cond1362
                                        #   Parent Loop BB28_174 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB28_181
# %bb.179:                              # %for.body1365
                                        #   in Loop: Header=BB28_178 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.180:                              # %for.inc1372
                                        #   in Loop: Header=BB28_178 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_178
.LBB28_181:                             # %for.end1374
                                        #   in Loop: Header=BB28_174 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB28_182:                             # %for.cond1391
                                        #   Parent Loop BB28_174 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB28_185
# %bb.183:                              # %for.body1394
                                        #   in Loop: Header=BB28_182 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movslq	-120(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.184:                              # %for.inc1414
                                        #   in Loop: Header=BB28_182 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_182
.LBB28_185:                             # %for.end1416
                                        #   in Loop: Header=BB28_174 Depth=1
	jmp	.LBB28_186
.LBB28_186:                             # %for.inc1417
                                        #   in Loop: Header=BB28_174 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_174
.LBB28_187:                             # %for.end1419
	movl	$0, -16(%rbp)
.LBB28_188:                             # %for.cond1420
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_192 Depth 2
                                        #     Child Loop BB28_196 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB28_190
# %bb.189:                              # %land.rhs1423
                                        #   in Loop: Header=BB28_188 Depth=1
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB28_190:                             # %land.end1426
                                        #   in Loop: Header=BB28_188 Depth=1
	testb	$1, %al
	jne	.LBB28_191
	jmp	.LBB28_210
.LBB28_191:                             # %for.body1428
                                        #   in Loop: Header=BB28_188 Depth=1
	movl	$0, -12(%rbp)
.LBB28_192:                             # %for.cond1429
                                        #   Parent Loop BB28_188 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB28_195
# %bb.193:                              # %for.body1432
                                        #   in Loop: Header=BB28_192 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.194:                              # %for.inc1439
                                        #   in Loop: Header=BB28_192 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_192
.LBB28_195:                             # %for.end1441
                                        #   in Loop: Header=BB28_188 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB28_196:                             # %for.cond1458
                                        #   Parent Loop BB28_188 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB28_208
# %bb.197:                              # %for.body1461
                                        #   in Loop: Header=BB28_196 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	cmpl	$4, -40(%rbp)
	jge	.LBB28_202
# %bb.198:                              # %if.then1465
                                        #   in Loop: Header=BB28_196 Depth=2
	cmpl	$1, -124(%rbp)
	jne	.LBB28_200
# %bb.199:                              # %if.then1468
                                        #   in Loop: Header=BB28_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-76(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-40(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-40(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
	jmp	.LBB28_201
.LBB28_200:                             # %if.else1521
                                        #   in Loop: Header=BB28_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-76(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-40(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-40(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
.LBB28_201:                             # %if.end1574
                                        #   in Loop: Header=BB28_196 Depth=2
	jmp	.LBB28_206
.LBB28_202:                             # %if.else1575
                                        #   in Loop: Header=BB28_196 Depth=2
	cmpl	$1, -124(%rbp)
	jne	.LBB28_204
# %bb.203:                              # %if.then1578
                                        #   in Loop: Header=BB28_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB28_205
.LBB28_204:                             # %if.else1625
                                        #   in Loop: Header=BB28_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB28_205:                             # %if.end1672
                                        #   in Loop: Header=BB28_196 Depth=2
	jmp	.LBB28_206
.LBB28_206:                             # %if.end1673
                                        #   in Loop: Header=BB28_196 Depth=2
	jmp	.LBB28_207
.LBB28_207:                             # %for.inc1674
                                        #   in Loop: Header=BB28_196 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_196
.LBB28_208:                             # %for.end1676
                                        #   in Loop: Header=BB28_188 Depth=1
	jmp	.LBB28_209
.LBB28_209:                             # %for.inc1677
                                        #   in Loop: Header=BB28_188 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_188
.LBB28_210:                             # %for.end1679
	jmp	.LBB28_211
.LBB28_211:                             # %if.end1680
	jmp	.LBB28_212
.LBB28_212:                             # %if.end1681
	jmp	.LBB28_213
.LBB28_213:                             # %if.end1682
	movl	$0, -196(%rbp)
	movl	$0, -212(%rbp)
	movl	$0, -112(%rbp)
.LBB28_214:                             # %for.cond1683
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_216 Depth 2
                                        #       Child Loop BB28_218 Depth 3
	movl	-112(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB28_256
# %bb.215:                              # %for.body1688
                                        #   in Loop: Header=BB28_214 Depth=1
	movl	$0, -116(%rbp)
.LBB28_216:                             # %for.cond1689
                                        #   Parent Loop BB28_214 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB28_218 Depth 3
	cmpl	$4, -116(%rbp)
	jge	.LBB28_254
# %bb.217:                              # %for.body1692
                                        #   in Loop: Header=BB28_216 Depth=2
	movslq	-144(%rbp), %rax
	shlq	$4, %rax
	movabsq	$hor_offset, %rcx
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -28(%rbp)
	movslq	-144(%rbp), %rax
	shlq	$4, %rax
	movabsq	$ver_offset, %rcx
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$4, %ecx
	addl	-200(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -232(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$4, %ecx
	addl	-200(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -392(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -68(%rbp)
	movl	$1, -36(%rbp)
.LBB28_218:                             # %for.cond1722
                                        #   Parent Loop BB28_214 Depth=1
                                        #     Parent Loop BB28_216 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -36(%rbp)
	jge	.LBB28_252
# %bb.219:                              # %for.body1725
                                        #   in Loop: Header=BB28_218 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB28_222
# %bb.220:                              # %lor.lhs.false1727
                                        #   in Loop: Header=BB28_218 Depth=3
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB28_223
# %bb.221:                              # %land.lhs.true1729
                                        #   in Loop: Header=BB28_218 Depth=3
	movq	-192(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB28_223
.LBB28_222:                             # %if.then1731
                                        #   in Loop: Header=BB28_218 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_224
.LBB28_223:                             # %if.else1740
                                        #   in Loop: Header=BB28_218 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB28_224:                             # %if.end1749
                                        #   in Loop: Header=BB28_218 Depth=3
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -140(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB28_226
# %bb.225:                              # %if.then1752
                                        #   in Loop: Header=BB28_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -44(%rbp)
	jmp	.LBB28_230
.LBB28_226:                             # %if.else1761
                                        #   in Loop: Header=BB28_218 Depth=3
	cmpl	$1, -124(%rbp)
	jne	.LBB28_228
# %bb.227:                              # %if.then1764
                                        #   in Loop: Header=BB28_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-180(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB28_229
.LBB28_228:                             # %if.else1792
                                        #   in Loop: Header=BB28_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-180(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB28_229:                             # %if.end1820
                                        #   in Loop: Header=BB28_218 Depth=3
	jmp	.LBB28_230
.LBB28_230:                             # %if.end1821
                                        #   in Loop: Header=BB28_218 Depth=3
	cmpl	$0, -44(%rbp)
	je	.LBB28_248
# %bb.231:                              # %if.then1824
                                        #   in Loop: Header=BB28_218 Depth=3
	movl	-112(%rbp), %eax
	addl	-200(%rbp), %eax
	cltq
	shlq	$2, %rax
	movabsq	$cbp_blk_chroma, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $rcx
	movl	$1, %eax
	shlq	%cl, %rax
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	cmpl	$1, -44(%rbp)
	jg	.LBB28_233
# %bb.232:                              # %lor.lhs.false1837
                                        #   in Loop: Header=BB28_218 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB28_234
.LBB28_233:                             # %if.then1839
                                        #   in Loop: Header=BB28_218 Depth=3
	movl	-196(%rbp), %eax
	addl	$999999, %eax           # imm = 0xF423F
	movl	%eax, -196(%rbp)
	jmp	.LBB28_235
.LBB28_234:                             # %if.else1841
                                        #   in Loop: Header=BB28_218 Depth=3
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-100(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	-196(%rbp), %eax
	movl	%eax, -196(%rbp)
.LBB28_235:                             # %if.end1848
                                        #   in Loop: Header=BB28_218 Depth=3
	movl	$2, -212(%rbp)
	movl	-44(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-232(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-392(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	$-1, -100(%rbp)
	movl	-44(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -44(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB28_237
# %bb.236:                              # %if.then1871
                                        #   in Loop: Header=BB28_218 Depth=3
	movl	-44(%rbp), %eax
	movl	%eax, -140(%rbp)
	jmp	.LBB28_247
.LBB28_237:                             # %if.else1872
                                        #   in Loop: Header=BB28_218 Depth=3
	cmpl	$4, -40(%rbp)
	jge	.LBB28_242
# %bb.238:                              # %if.then1875
                                        #   in Loop: Header=BB28_218 Depth=3
	cmpl	$1, -124(%rbp)
	jne	.LBB28_240
# %bb.239:                              # %if.then1878
                                        #   in Loop: Header=BB28_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -140(%rbp)
	jmp	.LBB28_241
.LBB28_240:                             # %if.else1893
                                        #   in Loop: Header=BB28_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -140(%rbp)
.LBB28_241:                             # %if.end1908
                                        #   in Loop: Header=BB28_218 Depth=3
	jmp	.LBB28_246
.LBB28_242:                             # %if.else1909
                                        #   in Loop: Header=BB28_218 Depth=3
	cmpl	$1, -124(%rbp)
	jne	.LBB28_244
# %bb.243:                              # %if.then1912
                                        #   in Loop: Header=BB28_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -140(%rbp)
	jmp	.LBB28_245
.LBB28_244:                             # %if.else1924
                                        #   in Loop: Header=BB28_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -140(%rbp)
.LBB28_245:                             # %if.end1936
                                        #   in Loop: Header=BB28_218 Depth=3
	jmp	.LBB28_246
.LBB28_246:                             # %if.end1937
                                        #   in Loop: Header=BB28_218 Depth=3
	jmp	.LBB28_247
.LBB28_247:                             # %if.end1938
                                        #   in Loop: Header=BB28_218 Depth=3
	jmp	.LBB28_248
.LBB28_248:                             # %if.end1939
                                        #   in Loop: Header=BB28_218 Depth=3
	cmpl	$0, -108(%rbp)
	jne	.LBB28_250
# %bb.249:                              # %if.then1941
                                        #   in Loop: Header=BB28_218 Depth=3
	movl	-140(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB28_250:                             # %if.end1949
                                        #   in Loop: Header=BB28_218 Depth=3
	jmp	.LBB28_251
.LBB28_251:                             # %for.inc1950
                                        #   in Loop: Header=BB28_218 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB28_218
.LBB28_252:                             # %for.end1952
                                        #   in Loop: Header=BB28_216 Depth=2
	movq	-232(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.253:                              # %for.inc1955
                                        #   in Loop: Header=BB28_216 Depth=2
	movl	-116(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB28_216
.LBB28_254:                             # %for.end1957
                                        #   in Loop: Header=BB28_214 Depth=1
	jmp	.LBB28_255
.LBB28_255:                             # %for.inc1958
                                        #   in Loop: Header=BB28_214 Depth=1
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB28_214
.LBB28_256:                             # %for.end1960
	cmpl	$4, -196(%rbp)
	jge	.LBB28_278
# %bb.257:                              # %land.lhs.true1963
	cmpl	$0, -108(%rbp)
	jne	.LBB28_278
# %bb.258:                              # %if.then1965
	movl	$0, -212(%rbp)
	movl	$0, -112(%rbp)
.LBB28_259:                             # %for.cond1966
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_261 Depth 2
                                        #       Child Loop BB28_265 Depth 3
	movl	-112(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB28_277
# %bb.260:                              # %for.body1971
                                        #   in Loop: Header=BB28_259 Depth=1
	movl	$0, -116(%rbp)
.LBB28_261:                             # %for.cond1972
                                        #   Parent Loop BB28_259 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB28_265 Depth 3
	cmpl	$4, -116(%rbp)
	jge	.LBB28_275
# %bb.262:                              # %for.body1975
                                        #   in Loop: Header=BB28_261 Depth=2
	movslq	-144(%rbp), %rax
	shlq	$4, %rax
	movabsq	$hor_offset, %rcx
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -28(%rbp)
	movslq	-144(%rbp), %rax
	shlq	$4, %rax
	movabsq	$ver_offset, %rcx
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$4, %ecx
	addl	-200(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -232(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$4, %ecx
	addl	-200(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -392(%rbp)
	cmpl	$0, -204(%rbp)
	jne	.LBB28_264
# %bb.263:                              # %if.then2008
                                        #   in Loop: Header=BB28_261 Depth=2
	movslq	-144(%rbp), %rax
	movq	-432(%rbp,%rax,8), %rax
	movl	-20(%rbp), %edx
	movl	-144(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $rcx
	shlq	%cl, %rax
	xorq	$-1, %rax
	movq	-192(%rbp), %rcx
	andq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
.LBB28_264:                             # %if.end2016
                                        #   in Loop: Header=BB28_261 Depth=2
	movq	-232(%rbp), %rax
	movl	$0, (%rax)
	movl	$1, -36(%rbp)
.LBB28_265:                             # %for.cond2018
                                        #   Parent Loop BB28_259 Depth=1
                                        #     Parent Loop BB28_261 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -36(%rbp)
	jge	.LBB28_273
# %bb.266:                              # %for.body2021
                                        #   in Loop: Header=BB28_265 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB28_269
# %bb.267:                              # %lor.lhs.false2024
                                        #   in Loop: Header=BB28_265 Depth=3
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB28_270
# %bb.268:                              # %land.lhs.true2027
                                        #   in Loop: Header=BB28_265 Depth=3
	movq	-192(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB28_270
.LBB28_269:                             # %if.then2030
                                        #   in Loop: Header=BB28_265 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_271
.LBB28_270:                             # %if.else2039
                                        #   in Loop: Header=BB28_265 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB28_271:                             # %if.end2048
                                        #   in Loop: Header=BB28_265 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	$0, (%rax,%rcx,4)
	movq	-232(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.272:                              # %for.inc2058
                                        #   in Loop: Header=BB28_265 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB28_265
.LBB28_273:                             # %for.end2060
                                        #   in Loop: Header=BB28_261 Depth=2
	jmp	.LBB28_274
.LBB28_274:                             # %for.inc2061
                                        #   in Loop: Header=BB28_261 Depth=2
	movl	-116(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB28_261
.LBB28_275:                             # %for.end2063
                                        #   in Loop: Header=BB28_259 Depth=1
	jmp	.LBB28_276
.LBB28_276:                             # %for.inc2064
                                        #   in Loop: Header=BB28_259 Depth=1
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB28_259
.LBB28_277:                             # %for.end2066
	jmp	.LBB28_278
.LBB28_278:                             # %if.end2067
	cmpl	$2, -212(%rbp)
	jne	.LBB28_280
# %bb.279:                              # %if.then2070
	movl	$2, -132(%rbp)
.LBB28_280:                             # %if.end2071
	movl	$0, -24(%rbp)
.LBB28_281:                             # %for.cond2072
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_285 Depth 2
                                        #       Child Loop BB28_287 Depth 3
                                        #         Child Loop BB28_289 Depth 4
                                        #         Child Loop BB28_293 Depth 4
                                        #       Child Loop BB28_299 Depth 3
                                        #         Child Loop BB28_303 Depth 4
                                        #         Child Loop BB28_307 Depth 4
	xorl	%eax, %eax
	movl	-24(%rbp), %ecx
	movq	img, %rdx
	cmpl	72712(%rdx), %ecx
	jge	.LBB28_283
# %bb.282:                              # %land.rhs2076
                                        #   in Loop: Header=BB28_281 Depth=1
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB28_283:                             # %land.end2079
                                        #   in Loop: Header=BB28_281 Depth=1
	testb	$1, %al
	jne	.LBB28_284
	jmp	.LBB28_340
.LBB28_284:                             # %for.body2081
                                        #   in Loop: Header=BB28_281 Depth=1
	movl	$0, -28(%rbp)
.LBB28_285:                             # %for.cond2082
                                        #   Parent Loop BB28_281 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB28_287 Depth 3
                                        #         Child Loop BB28_289 Depth 4
                                        #         Child Loop BB28_293 Depth 4
                                        #       Child Loop BB28_299 Depth 3
                                        #         Child Loop BB28_303 Depth 4
                                        #         Child Loop BB28_307 Depth 4
	movl	-28(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB28_338
# %bb.286:                              # %for.body2086
                                        #   in Loop: Header=BB28_285 Depth=2
	movl	$0, -12(%rbp)
.LBB28_287:                             # %for.cond2087
                                        #   Parent Loop BB28_281 Depth=1
                                        #     Parent Loop BB28_285 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB28_289 Depth 4
                                        #         Child Loop BB28_293 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB28_298
# %bb.288:                              # %for.body2090
                                        #   in Loop: Header=BB28_287 Depth=3
	movl	$0, -16(%rbp)
.LBB28_289:                             # %for.cond2091
                                        #   Parent Loop BB28_281 Depth=1
                                        #     Parent Loop BB28_285 Depth=2
                                        #       Parent Loop BB28_287 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB28_292
# %bb.290:                              # %for.body2094
                                        #   in Loop: Header=BB28_289 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.291:                              # %for.inc2104
                                        #   in Loop: Header=BB28_289 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_289
.LBB28_292:                             # %for.end2106
                                        #   in Loop: Header=BB28_287 Depth=3
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB28_293:                             # %for.cond2125
                                        #   Parent Loop BB28_281 Depth=1
                                        #     Parent Loop BB28_285 Depth=2
                                        #       Parent Loop BB28_287 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB28_296
# %bb.294:                              # %for.body2128
                                        #   in Loop: Header=BB28_293 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-120(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.295:                              # %for.inc2154
                                        #   in Loop: Header=BB28_293 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_293
.LBB28_296:                             # %for.end2156
                                        #   in Loop: Header=BB28_287 Depth=3
	jmp	.LBB28_297
.LBB28_297:                             # %for.inc2157
                                        #   in Loop: Header=BB28_287 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_287
.LBB28_298:                             # %for.end2159
                                        #   in Loop: Header=BB28_285 Depth=2
	movl	$0, -16(%rbp)
.LBB28_299:                             # %for.cond2160
                                        #   Parent Loop BB28_281 Depth=1
                                        #     Parent Loop BB28_285 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB28_303 Depth 4
                                        #         Child Loop BB28_307 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB28_301
# %bb.300:                              # %land.rhs2163
                                        #   in Loop: Header=BB28_299 Depth=3
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB28_301:                             # %land.end2166
                                        #   in Loop: Header=BB28_299 Depth=3
	testb	$1, %al
	jne	.LBB28_302
	jmp	.LBB28_336
.LBB28_302:                             # %for.body2168
                                        #   in Loop: Header=BB28_299 Depth=3
	movl	$0, -12(%rbp)
.LBB28_303:                             # %for.cond2169
                                        #   Parent Loop BB28_281 Depth=1
                                        #     Parent Loop BB28_285 Depth=2
                                        #       Parent Loop BB28_299 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB28_306
# %bb.304:                              # %for.body2172
                                        #   in Loop: Header=BB28_303 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.305:                              # %for.inc2182
                                        #   in Loop: Header=BB28_303 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_303
.LBB28_306:                             # %for.end2184
                                        #   in Loop: Header=BB28_299 Depth=3
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB28_307:                             # %for.cond2203
                                        #   Parent Loop BB28_281 Depth=1
                                        #     Parent Loop BB28_285 Depth=2
                                        #       Parent Loop BB28_299 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB28_334
# %bb.308:                              # %for.body2206
                                        #   in Loop: Header=BB28_307 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB28_328
# %bb.309:                              # %if.then2209
                                        #   in Loop: Header=BB28_307 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72688(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-72(%rbp), %rsi
	addl	-96(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-28(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-24(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB28_311
# %bb.310:                              # %cond.true2230
                                        #   in Loop: Header=BB28_307 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB28_312
.LBB28_311:                             # %cond.false2231
                                        #   in Loop: Header=BB28_307 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-72(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-28(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB28_312:                             # %cond.end2250
                                        #   in Loop: Header=BB28_307 Depth=4
	cmpq	%rcx, %rax
	jge	.LBB28_314
# %bb.313:                              # %cond.true2254
                                        #   in Loop: Header=BB28_307 Depth=4
	movq	img, %rax
	movslq	72688(%rax), %rax
	jmp	.LBB28_318
.LBB28_314:                             # %cond.false2257
                                        #   in Loop: Header=BB28_307 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-72(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-28(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB28_316
# %bb.315:                              # %cond.true2278
                                        #   in Loop: Header=BB28_307 Depth=4
	xorl	%eax, %eax
	jmp	.LBB28_317
.LBB28_316:                             # %cond.false2279
                                        #   in Loop: Header=BB28_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB28_317:                             # %cond.end2298
                                        #   in Loop: Header=BB28_307 Depth=4
.LBB28_318:                             # %cond.end2300
                                        #   in Loop: Header=BB28_307 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movl	-28(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movslq	72688(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-72(%rbp), %rsi
	subl	-96(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-28(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-24(%rbp), %edi
	addl	-72(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB28_320
# %bb.319:                              # %cond.true2332
                                        #   in Loop: Header=BB28_307 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB28_321
.LBB28_320:                             # %cond.false2333
                                        #   in Loop: Header=BB28_307 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-72(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-28(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-72(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB28_321:                             # %cond.end2352
                                        #   in Loop: Header=BB28_307 Depth=4
	cmpq	%rcx, %rax
	jge	.LBB28_323
# %bb.322:                              # %cond.true2356
                                        #   in Loop: Header=BB28_307 Depth=4
	movq	img, %rax
	movslq	72688(%rax), %rax
	jmp	.LBB28_327
.LBB28_323:                             # %cond.false2359
                                        #   in Loop: Header=BB28_307 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-72(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-28(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-72(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB28_325
# %bb.324:                              # %cond.true2380
                                        #   in Loop: Header=BB28_307 Depth=4
	xorl	%eax, %eax
	jmp	.LBB28_326
.LBB28_325:                             # %cond.false2381
                                        #   in Loop: Header=BB28_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB28_326:                             # %cond.end2400
                                        #   in Loop: Header=BB28_307 Depth=4
.LBB28_327:                             # %cond.end2402
                                        #   in Loop: Header=BB28_307 Depth=4
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB28_332
.LBB28_328:                             # %if.else2412
                                        #   in Loop: Header=BB28_307 Depth=4
	cmpl	$0, -108(%rbp)
	je	.LBB28_330
# %bb.329:                              # %if.then2414
                                        #   in Loop: Header=BB28_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB28_331
.LBB28_330:                             # %if.else2439
                                        #   in Loop: Header=BB28_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB28_331:                             # %if.end2468
                                        #   in Loop: Header=BB28_307 Depth=4
	jmp	.LBB28_332
.LBB28_332:                             # %if.end2469
                                        #   in Loop: Header=BB28_307 Depth=4
	jmp	.LBB28_333
.LBB28_333:                             # %for.inc2470
                                        #   in Loop: Header=BB28_307 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_307
.LBB28_334:                             # %for.end2472
                                        #   in Loop: Header=BB28_299 Depth=3
	jmp	.LBB28_335
.LBB28_335:                             # %for.inc2473
                                        #   in Loop: Header=BB28_299 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_299
.LBB28_336:                             # %for.end2475
                                        #   in Loop: Header=BB28_285 Depth=2
	jmp	.LBB28_337
.LBB28_337:                             # %for.inc2476
                                        #   in Loop: Header=BB28_285 Depth=2
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB28_285
.LBB28_338:                             # %for.end2478
                                        #   in Loop: Header=BB28_281 Depth=1
	jmp	.LBB28_339
.LBB28_339:                             # %for.inc2479
                                        #   in Loop: Header=BB28_281 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB28_281
.LBB28_340:                             # %for.end2481
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB28_353
# %bb.341:                              # %if.then2484
	movl	$0, -12(%rbp)
.LBB28_342:                             # %for.cond2485
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_344 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB28_352
# %bb.343:                              # %for.body2489
                                        #   in Loop: Header=BB28_342 Depth=1
	movl	$0, -16(%rbp)
.LBB28_344:                             # %for.cond2490
                                        #   Parent Loop BB28_342 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB28_350
# %bb.345:                              # %for.body2494
                                        #   in Loop: Header=BB28_344 Depth=2
	cmpl	$0, -108(%rbp)
	je	.LBB28_347
# %bb.346:                              # %if.then2496
                                        #   in Loop: Header=BB28_344 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB28_348
.LBB28_347:                             # %if.else2518
                                        #   in Loop: Header=BB28_344 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB28_348:                             # %if.end2536
                                        #   in Loop: Header=BB28_344 Depth=2
	jmp	.LBB28_349
.LBB28_349:                             # %for.inc2537
                                        #   in Loop: Header=BB28_344 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_344
.LBB28_350:                             # %for.end2539
                                        #   in Loop: Header=BB28_342 Depth=1
	jmp	.LBB28_351
.LBB28_351:                             # %for.inc2540
                                        #   in Loop: Header=BB28_342 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_342
.LBB28_352:                             # %for.end2542
	jmp	.LBB28_353
.LBB28_353:                             # %if.end2543
	movl	-132(%rbp), %ebx
	cmpl	$2024535468, -380(%rbp) # imm = 0x78ABF5AC
	jne	.LBB28_355
.LBB28_354:
	movl	%ebx, %eax
	addq	$424, %rsp              # imm = 0x1A8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_355:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB28_354
.Lfunc_end28:
	.size	dct_chroma.19, .Lfunc_end28-dct_chroma.19
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma_DC.20        # -- Begin function dct_chroma_DC.20
	.p2align	4, 0x90
	.type	dct_chroma_DC.20,@function
dct_chroma_DC.20:                       # @dct_chroma_DC.20
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1324561420, -44(%rbp)  # imm = 0x4EF3340C
	movl	%edi, -20(%rbp)
	movl	%esi, -28(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$-1, -24(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB29_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB29_9
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB29_1 Depth=1
	movslq	-12(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -40(%rbp)
	movslq	-12(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -32(%rbp)
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rcx
	addq	%rax, %rcx
	movslq	-40(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -36(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB29_7
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB29_1 Depth=1
	movl	$1, %eax
	cmpl	-28(%rbp), %eax
	jle	.LBB29_5
# %bb.4:                                # %cond.true
                                        #   in Loop: Header=BB29_1 Depth=1
	movl	$1, %eax
	jmp	.LBB29_6
.LBB29_5:                               # %cond.false
                                        #   in Loop: Header=BB29_1 Depth=1
	movl	-28(%rbp), %eax
.LBB29_6:                               # %cond.end
                                        #   in Loop: Header=BB29_1 Depth=1
	movl	%eax, -28(%rbp)
	movl	-36(%rbp), %edi
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rcx
	addq	%rax, %rcx
	movslq	-40(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-56(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-24(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	$-1, -24(%rbp)
.LBB29_7:                               # %if.end
                                        #   in Loop: Header=BB29_1 Depth=1
	jmp	.LBB29_8
.LBB29_8:                               # %for.inc
                                        #   in Loop: Header=BB29_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB29_1
.LBB29_9:                               # %for.end
	movq	-56(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-28(%rbp), %ebx
	cmpl	$1324561420, -44(%rbp)  # imm = 0x4EF3340C
	jne	.LBB29_11
.LBB29_10:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB29_11:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB29_10
.Lfunc_end29:
	.size	dct_chroma_DC.20, .Lfunc_end29-dct_chroma_DC.20
	.cfi_endproc
                                        # -- End function
	.globl	copyblock_sp.21         # -- Begin function copyblock_sp.21
	.p2align	4, 0x90
	.type	copyblock_sp.21,@function
copyblock_sp.21:                        # @copyblock_sp.21
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movl	$1067060353, -88(%rbp)  # imm = 0x3F9A0C81
	movl	%edi, -68(%rbp)
	movl	%esi, -80(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	-104(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -72(%rbp)
	movq	-104(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -84(%rbp)
	movl	-72(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -76(%rbp)
	movl	-76(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	movl	$0, -4(%rbp)
.LBB30_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB30_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB30_1 Depth=1
	movl	$0, -8(%rbp)
.LBB30_3:                               # %for.cond4
                                        #   Parent Loop BB30_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB30_6
# %bb.4:                                # %for.body6
                                        #   in Loop: Header=BB30_3 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-8(%rbp), %ecx
	addl	-68(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-4(%rbp), %ecx
	addl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-176(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB30_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_3
.LBB30_6:                               # %for.end
                                        #   in Loop: Header=BB30_1 Depth=1
	jmp	.LBB30_7
.LBB30_7:                               # %for.inc17
                                        #   in Loop: Header=BB30_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_1
.LBB30_8:                               # %for.end19
	movl	$0, -4(%rbp)
.LBB30_9:                               # %for.cond20
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_11 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB30_16
# %bb.10:                               # %for.body23
                                        #   in Loop: Header=BB30_9 Depth=1
	movl	$0, -8(%rbp)
.LBB30_11:                              # %for.cond24
                                        #   Parent Loop BB30_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -8(%rbp)
	jge	.LBB30_14
# %bb.12:                               # %for.body27
                                        #   in Loop: Header=BB30_11 Depth=2
	movl	$3, %eax
	subl	-8(%rbp), %eax
	movl	%eax, -36(%rbp)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-36(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-8(%rbp), %rdx
	movl	%eax, -32(%rbp,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-36(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-36(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.13:                               # %for.inc51
                                        #   in Loop: Header=BB30_11 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_11
.LBB30_14:                              # %for.end53
                                        #   in Loop: Header=BB30_9 Depth=1
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movl	-32(%rbp), %eax
	subl	-28(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -160(%rbp,%rcx,4)
	movl	-20(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
# %bb.15:                               # %for.inc79
                                        #   in Loop: Header=BB30_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_9
.LBB30_16:                              # %for.end81
	movl	$0, -8(%rbp)
.LBB30_17:                              # %for.cond82
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_19 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB30_24
# %bb.18:                               # %for.body85
                                        #   in Loop: Header=BB30_17 Depth=1
	movl	$0, -4(%rbp)
.LBB30_19:                              # %for.cond86
                                        #   Parent Loop BB30_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB30_22
# %bb.20:                               # %for.body89
                                        #   in Loop: Header=BB30_19 Depth=2
	movl	$3, %eax
	subl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-4(%rbp), %rdx
	movl	%eax, -32(%rbp,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.21:                               # %for.inc113
                                        #   in Loop: Header=BB30_19 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_19
.LBB30_22:                              # %for.end115
                                        #   in Loop: Header=BB30_17 Depth=1
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-176(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-32(%rbp), %ecx
	subl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	-24(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-20(%rbp), %ecx
	movl	-24(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.23:                               # %for.inc142
                                        #   in Loop: Header=BB30_17 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_17
.LBB30_24:                              # %for.end144
	movl	$0, -4(%rbp)
.LBB30_25:                              # %for.cond145
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_27 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB30_32
# %bb.26:                               # %for.body148
                                        #   in Loop: Header=BB30_25 Depth=1
	movl	$0, -8(%rbp)
.LBB30_27:                              # %for.cond149
                                        #   Parent Loop BB30_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB30_30
# %bb.28:                               # %for.body152
                                        #   in Loop: Header=BB30_27 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-84(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-92(%rbp), %eax
	movl	-76(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-176(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	(%rdx,%rcx,4), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-84(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-72(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.29:                               # %for.inc182
                                        #   in Loop: Header=BB30_27 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_27
.LBB30_30:                              # %for.end184
                                        #   in Loop: Header=BB30_25 Depth=1
	jmp	.LBB30_31
.LBB30_31:                              # %for.inc185
                                        #   in Loop: Header=BB30_25 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_25
.LBB30_32:                              # %for.end187
	movl	$0, -4(%rbp)
.LBB30_33:                              # %for.cond188
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_35 Depth 2
                                        #     Child Loop BB30_39 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB30_44
# %bb.34:                               # %for.body191
                                        #   in Loop: Header=BB30_33 Depth=1
	movl	$0, -8(%rbp)
.LBB30_35:                              # %for.cond192
                                        #   Parent Loop BB30_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB30_38
# %bb.36:                               # %for.body195
                                        #   in Loop: Header=BB30_35 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.37:                               # %for.inc203
                                        #   in Loop: Header=BB30_35 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_35
.LBB30_38:                              # %for.end205
                                        #   in Loop: Header=BB30_33 Depth=1
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-32(%rbp), %eax
	subl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	sarl	$1, %eax
	subl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	movl	-20(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -8(%rbp)
.LBB30_39:                              # %for.cond224
                                        #   Parent Loop BB30_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -8(%rbp)
	jge	.LBB30_42
# %bb.40:                               # %for.body227
                                        #   in Loop: Header=BB30_39 Depth=2
	movl	$3, %eax
	subl	-8(%rbp), %eax
	movl	%eax, -36(%rbp)
	movslq	-8(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-36(%rbp), %rcx
	addl	-64(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-36(%rbp), %rcx
	subl	-64(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-36(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.41:                               # %for.inc249
                                        #   in Loop: Header=BB30_39 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_39
.LBB30_42:                              # %for.end251
                                        #   in Loop: Header=BB30_33 Depth=1
	jmp	.LBB30_43
.LBB30_43:                              # %for.inc252
                                        #   in Loop: Header=BB30_33 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_33
.LBB30_44:                              # %for.end254
	movl	$0, -8(%rbp)
.LBB30_45:                              # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_47 Depth 2
                                        #     Child Loop BB30_51 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB30_74
# %bb.46:                               # %for.body258
                                        #   in Loop: Header=BB30_45 Depth=1
	movl	$0, -4(%rbp)
.LBB30_47:                              # %for.cond259
                                        #   Parent Loop BB30_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB30_50
# %bb.48:                               # %for.body262
                                        #   in Loop: Header=BB30_47 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.49:                               # %for.inc270
                                        #   in Loop: Header=BB30_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_47
.LBB30_50:                              # %for.end272
                                        #   in Loop: Header=BB30_45 Depth=1
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-32(%rbp), %eax
	subl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	sarl	$1, %eax
	subl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	movl	-20(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -4(%rbp)
.LBB30_51:                              # %for.cond291
                                        #   Parent Loop BB30_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB30_72
# %bb.52:                               # %for.body294
                                        #   in Loop: Header=BB30_51 Depth=2
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-4(%rbp), %rdx
	movl	-64(%rbp,%rdx,4), %edx
	movslq	-12(%rbp), %rsi
	addl	-64(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB30_54
# %bb.53:                               # %cond.true
                                        #   in Loop: Header=BB30_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB30_55
.LBB30_54:                              # %cond.false
                                        #   in Loop: Header=BB30_51 Depth=2
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	addl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB30_55:                              # %cond.end
                                        #   in Loop: Header=BB30_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB30_57
# %bb.56:                               # %cond.true314
                                        #   in Loop: Header=BB30_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB30_61
.LBB30_57:                              # %cond.false316
                                        #   in Loop: Header=BB30_51 Depth=2
	xorl	%eax, %eax
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	addl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB30_59
# %bb.58:                               # %cond.true326
                                        #   in Loop: Header=BB30_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB30_60
.LBB30_59:                              # %cond.false327
                                        #   in Loop: Header=BB30_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-64(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB30_60:                              # %cond.end335
                                        #   in Loop: Header=BB30_51 Depth=2
.LBB30_61:                              # %cond.end337
                                        #   in Loop: Header=BB30_51 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-4(%rbp), %rdx
	movl	-64(%rbp,%rdx,4), %edx
	movslq	-12(%rbp), %rsi
	subl	-64(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB30_63
# %bb.62:                               # %cond.true354
                                        #   in Loop: Header=BB30_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB30_64
.LBB30_63:                              # %cond.false355
                                        #   in Loop: Header=BB30_51 Depth=2
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	subl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB30_64:                              # %cond.end363
                                        #   in Loop: Header=BB30_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB30_66
# %bb.65:                               # %cond.true367
                                        #   in Loop: Header=BB30_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB30_70
.LBB30_66:                              # %cond.false369
                                        #   in Loop: Header=BB30_51 Depth=2
	xorl	%eax, %eax
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	subl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB30_68
# %bb.67:                               # %cond.true379
                                        #   in Loop: Header=BB30_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB30_69
.LBB30_68:                              # %cond.false380
                                        #   in Loop: Header=BB30_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-64(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB30_69:                              # %cond.end388
                                        #   in Loop: Header=BB30_51 Depth=2
.LBB30_70:                              # %cond.end390
                                        #   in Loop: Header=BB30_51 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.71:                               # %for.inc397
                                        #   in Loop: Header=BB30_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_51
.LBB30_72:                              # %for.end399
                                        #   in Loop: Header=BB30_45 Depth=1
	jmp	.LBB30_73
.LBB30_73:                              # %for.inc400
                                        #   in Loop: Header=BB30_45 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_45
.LBB30_74:                              # %for.end402
	movl	$0, -4(%rbp)
.LBB30_75:                              # %for.cond403
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_77 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB30_82
# %bb.76:                               # %for.body406
                                        #   in Loop: Header=BB30_75 Depth=1
	movl	$0, -8(%rbp)
.LBB30_77:                              # %for.cond407
                                        #   Parent Loop BB30_75 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB30_80
# %bb.78:                               # %for.body410
                                        #   in Loop: Header=BB30_77 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-80(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-68(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.79:                               # %for.inc425
                                        #   in Loop: Header=BB30_77 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_77
.LBB30_80:                              # %for.end427
                                        #   in Loop: Header=BB30_75 Depth=1
	jmp	.LBB30_81
.LBB30_81:                              # %for.inc428
                                        #   in Loop: Header=BB30_75 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_75
.LBB30_82:                              # %for.end430
	cmpl	$1067060353, -88(%rbp)  # imm = 0x3F9A0C81
	jne	.LBB30_84
.LBB30_83:
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_84:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB30_83
.Lfunc_end30:
	.size	copyblock_sp.21, .Lfunc_end30-copyblock_sp.21
	.cfi_endproc
                                        # -- End function
	.globl	copyblock_sp.22         # -- Begin function copyblock_sp.22
	.p2align	4, 0x90
	.type	copyblock_sp.22,@function
copyblock_sp.22:                        # @copyblock_sp.22
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movl	$1074333054, -92(%rbp)  # imm = 0x4009057E
	movl	%edi, -80(%rbp)
	movl	%esi, -76(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	-104(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -84(%rbp)
	movq	-104(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -68(%rbp)
	movl	-84(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -88(%rbp)
	movl	$0, -4(%rbp)
.LBB31_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB31_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	$0, -8(%rbp)
.LBB31_3:                               # %for.cond4
                                        #   Parent Loop BB31_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB31_6
# %bb.4:                                # %for.body6
                                        #   in Loop: Header=BB31_3 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-8(%rbp), %ecx
	addl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-4(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-176(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB31_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_3
.LBB31_6:                               # %for.end
                                        #   in Loop: Header=BB31_1 Depth=1
	jmp	.LBB31_7
.LBB31_7:                               # %for.inc17
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_1
.LBB31_8:                               # %for.end19
	movl	$0, -4(%rbp)
.LBB31_9:                               # %for.cond20
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_11 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB31_16
# %bb.10:                               # %for.body23
                                        #   in Loop: Header=BB31_9 Depth=1
	movl	$0, -8(%rbp)
.LBB31_11:                              # %for.cond24
                                        #   Parent Loop BB31_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -8(%rbp)
	jge	.LBB31_14
# %bb.12:                               # %for.body27
                                        #   in Loop: Header=BB31_11 Depth=2
	movl	$3, %eax
	subl	-8(%rbp), %eax
	movl	%eax, -36(%rbp)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-36(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-8(%rbp), %rdx
	movl	%eax, -32(%rbp,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-36(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-36(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.13:                               # %for.inc51
                                        #   in Loop: Header=BB31_11 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_11
.LBB31_14:                              # %for.end53
                                        #   in Loop: Header=BB31_9 Depth=1
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movl	-32(%rbp), %eax
	subl	-28(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -160(%rbp,%rcx,4)
	movl	-20(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
# %bb.15:                               # %for.inc79
                                        #   in Loop: Header=BB31_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_9
.LBB31_16:                              # %for.end81
	movl	$0, -8(%rbp)
.LBB31_17:                              # %for.cond82
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_19 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB31_24
# %bb.18:                               # %for.body85
                                        #   in Loop: Header=BB31_17 Depth=1
	movl	$0, -4(%rbp)
.LBB31_19:                              # %for.cond86
                                        #   Parent Loop BB31_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB31_22
# %bb.20:                               # %for.body89
                                        #   in Loop: Header=BB31_19 Depth=2
	movl	$3, %eax
	subl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-4(%rbp), %rdx
	movl	%eax, -32(%rbp,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.21:                               # %for.inc113
                                        #   in Loop: Header=BB31_19 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_19
.LBB31_22:                              # %for.end115
                                        #   in Loop: Header=BB31_17 Depth=1
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-176(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-32(%rbp), %ecx
	subl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	-24(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-20(%rbp), %ecx
	movl	-24(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.23:                               # %for.inc142
                                        #   in Loop: Header=BB31_17 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_17
.LBB31_24:                              # %for.end144
	movl	$0, -4(%rbp)
.LBB31_25:                              # %for.cond145
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_27 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB31_32
# %bb.26:                               # %for.body148
                                        #   in Loop: Header=BB31_25 Depth=1
	movl	$0, -8(%rbp)
.LBB31_27:                              # %for.cond149
                                        #   Parent Loop BB31_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB31_30
# %bb.28:                               # %for.body152
                                        #   in Loop: Header=BB31_27 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-68(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-88(%rbp), %eax
	movl	-72(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-176(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	(%rdx,%rcx,4), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-68(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-84(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.29:                               # %for.inc182
                                        #   in Loop: Header=BB31_27 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_27
.LBB31_30:                              # %for.end184
                                        #   in Loop: Header=BB31_25 Depth=1
	jmp	.LBB31_31
.LBB31_31:                              # %for.inc185
                                        #   in Loop: Header=BB31_25 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_25
.LBB31_32:                              # %for.end187
	movl	$0, -4(%rbp)
.LBB31_33:                              # %for.cond188
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_35 Depth 2
                                        #     Child Loop BB31_39 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB31_44
# %bb.34:                               # %for.body191
                                        #   in Loop: Header=BB31_33 Depth=1
	movl	$0, -8(%rbp)
.LBB31_35:                              # %for.cond192
                                        #   Parent Loop BB31_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB31_38
# %bb.36:                               # %for.body195
                                        #   in Loop: Header=BB31_35 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.37:                               # %for.inc203
                                        #   in Loop: Header=BB31_35 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_35
.LBB31_38:                              # %for.end205
                                        #   in Loop: Header=BB31_33 Depth=1
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-32(%rbp), %eax
	subl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	sarl	$1, %eax
	subl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	movl	-20(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -8(%rbp)
.LBB31_39:                              # %for.cond224
                                        #   Parent Loop BB31_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -8(%rbp)
	jge	.LBB31_42
# %bb.40:                               # %for.body227
                                        #   in Loop: Header=BB31_39 Depth=2
	movl	$3, %eax
	subl	-8(%rbp), %eax
	movl	%eax, -36(%rbp)
	movslq	-8(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-36(%rbp), %rcx
	addl	-64(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-36(%rbp), %rcx
	subl	-64(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-36(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.41:                               # %for.inc249
                                        #   in Loop: Header=BB31_39 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_39
.LBB31_42:                              # %for.end251
                                        #   in Loop: Header=BB31_33 Depth=1
	jmp	.LBB31_43
.LBB31_43:                              # %for.inc252
                                        #   in Loop: Header=BB31_33 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_33
.LBB31_44:                              # %for.end254
	movl	$0, -8(%rbp)
.LBB31_45:                              # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_47 Depth 2
                                        #     Child Loop BB31_51 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB31_74
# %bb.46:                               # %for.body258
                                        #   in Loop: Header=BB31_45 Depth=1
	movl	$0, -4(%rbp)
.LBB31_47:                              # %for.cond259
                                        #   Parent Loop BB31_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB31_50
# %bb.48:                               # %for.body262
                                        #   in Loop: Header=BB31_47 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.49:                               # %for.inc270
                                        #   in Loop: Header=BB31_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_47
.LBB31_50:                              # %for.end272
                                        #   in Loop: Header=BB31_45 Depth=1
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-32(%rbp), %eax
	subl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	sarl	$1, %eax
	subl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	movl	-20(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -4(%rbp)
.LBB31_51:                              # %for.cond291
                                        #   Parent Loop BB31_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB31_72
# %bb.52:                               # %for.body294
                                        #   in Loop: Header=BB31_51 Depth=2
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-4(%rbp), %rdx
	movl	-64(%rbp,%rdx,4), %edx
	movslq	-12(%rbp), %rsi
	addl	-64(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB31_54
# %bb.53:                               # %cond.true
                                        #   in Loop: Header=BB31_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB31_55
.LBB31_54:                              # %cond.false
                                        #   in Loop: Header=BB31_51 Depth=2
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	addl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB31_55:                              # %cond.end
                                        #   in Loop: Header=BB31_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB31_57
# %bb.56:                               # %cond.true314
                                        #   in Loop: Header=BB31_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_61
.LBB31_57:                              # %cond.false316
                                        #   in Loop: Header=BB31_51 Depth=2
	xorl	%eax, %eax
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	addl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB31_59
# %bb.58:                               # %cond.true326
                                        #   in Loop: Header=BB31_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB31_60
.LBB31_59:                              # %cond.false327
                                        #   in Loop: Header=BB31_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-64(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB31_60:                              # %cond.end335
                                        #   in Loop: Header=BB31_51 Depth=2
.LBB31_61:                              # %cond.end337
                                        #   in Loop: Header=BB31_51 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-4(%rbp), %rdx
	movl	-64(%rbp,%rdx,4), %edx
	movslq	-12(%rbp), %rsi
	subl	-64(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB31_63
# %bb.62:                               # %cond.true354
                                        #   in Loop: Header=BB31_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB31_64
.LBB31_63:                              # %cond.false355
                                        #   in Loop: Header=BB31_51 Depth=2
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	subl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB31_64:                              # %cond.end363
                                        #   in Loop: Header=BB31_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB31_66
# %bb.65:                               # %cond.true367
                                        #   in Loop: Header=BB31_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_70
.LBB31_66:                              # %cond.false369
                                        #   in Loop: Header=BB31_51 Depth=2
	xorl	%eax, %eax
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	subl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB31_68
# %bb.67:                               # %cond.true379
                                        #   in Loop: Header=BB31_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB31_69
.LBB31_68:                              # %cond.false380
                                        #   in Loop: Header=BB31_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-64(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB31_69:                              # %cond.end388
                                        #   in Loop: Header=BB31_51 Depth=2
.LBB31_70:                              # %cond.end390
                                        #   in Loop: Header=BB31_51 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.71:                               # %for.inc397
                                        #   in Loop: Header=BB31_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_51
.LBB31_72:                              # %for.end399
                                        #   in Loop: Header=BB31_45 Depth=1
	jmp	.LBB31_73
.LBB31_73:                              # %for.inc400
                                        #   in Loop: Header=BB31_45 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_45
.LBB31_74:                              # %for.end402
	movl	$0, -4(%rbp)
.LBB31_75:                              # %for.cond403
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_77 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB31_82
# %bb.76:                               # %for.body406
                                        #   in Loop: Header=BB31_75 Depth=1
	movl	$0, -8(%rbp)
.LBB31_77:                              # %for.cond407
                                        #   Parent Loop BB31_75 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB31_80
# %bb.78:                               # %for.body410
                                        #   in Loop: Header=BB31_77 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-76(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-80(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.79:                               # %for.inc425
                                        #   in Loop: Header=BB31_77 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_77
.LBB31_80:                              # %for.end427
                                        #   in Loop: Header=BB31_75 Depth=1
	jmp	.LBB31_81
.LBB31_81:                              # %for.inc428
                                        #   in Loop: Header=BB31_75 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_75
.LBB31_82:                              # %for.end430
	cmpl	$1074333054, -92(%rbp)  # imm = 0x4009057E
	jne	.LBB31_84
.LBB31_83:
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_84:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB31_83
.Lfunc_end31:
	.size	copyblock_sp.22, .Lfunc_end31-copyblock_sp.22
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma_DC.23        # -- Begin function dct_chroma_DC.23
	.p2align	4, 0x90
	.type	dct_chroma_DC.23,@function
dct_chroma_DC.23:                       # @dct_chroma_DC.23
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$2079172548, -44(%rbp)  # imm = 0x7BEDA7C4
	movl	%edi, -28(%rbp)
	movl	%esi, -24(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
.LBB32_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -16(%rbp)
	jge	.LBB32_9
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB32_1 Depth=1
	movslq	-16(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -36(%rbp)
	movslq	-16(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movslq	-28(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -40(%rbp)
	cmpl	$0, -40(%rbp)
	je	.LBB32_7
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB32_1 Depth=1
	movl	$1, %eax
	cmpl	-24(%rbp), %eax
	jle	.LBB32_5
# %bb.4:                                # %cond.true
                                        #   in Loop: Header=BB32_1 Depth=1
	movl	$1, %eax
	jmp	.LBB32_6
.LBB32_5:                               # %cond.false
                                        #   in Loop: Header=BB32_1 Depth=1
	movl	-24(%rbp), %eax
.LBB32_6:                               # %cond.end
                                        #   in Loop: Header=BB32_1 Depth=1
	movl	%eax, -24(%rbp)
	movl	-40(%rbp), %edi
	movslq	-28(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-56(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-20(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	$-1, -20(%rbp)
.LBB32_7:                               # %if.end
                                        #   in Loop: Header=BB32_1 Depth=1
	jmp	.LBB32_8
.LBB32_8:                               # %for.inc
                                        #   in Loop: Header=BB32_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB32_1
.LBB32_9:                               # %for.end
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-24(%rbp), %ebx
	cmpl	$2079172548, -44(%rbp)  # imm = 0x7BEDA7C4
	jne	.LBB32_11
.LBB32_10:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_11:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB32_10
.Lfunc_end32:
	.size	dct_chroma_DC.23, .Lfunc_end32-dct_chroma_DC.23
	.cfi_endproc
                                        # -- End function
	.globl	intrapred_luma_16x16.24 # -- Begin function intrapred_luma_16x16.24
	.p2align	4, 0x90
	.type	intrapred_luma_16x16.24,@function
intrapred_luma_16x16.24:                # @intrapred_luma_16x16.24
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$640, %rsp              # imm = 0x280
	movl	$484938975, -92(%rbp)   # imm = 0x1CE794DF
	movl	$0, -28(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB33_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -4(%rbp)
	jge	.LBB33_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB33_1 Depth=1
	movl	-64(%rbp), %edi
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-512(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB33_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_1
.LBB33_4:                               # %for.end
	movl	-64(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	leaq	-88(%rbp), %r8
	callq	getNeighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	jne	.LBB33_6
# %bb.5:                                # %if.then
	movl	-88(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	-488(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-512(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB33_20
.LBB33_6:                               # %if.else
	cmpl	$0, -88(%rbp)
	je	.LBB33_8
# %bb.7:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-84(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB33_9
.LBB33_8:                               # %cond.false
	xorl	%eax, %eax
	jmp	.LBB33_9
.LBB33_9:                               # %cond.end
	movl	%eax, -16(%rbp)
	movl	$1, -4(%rbp)
	movl	$1, -12(%rbp)
.LBB33_10:                              # %for.cond9
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -4(%rbp)
	jge	.LBB33_16
# %bb.11:                               # %for.body11
                                        #   in Loop: Header=BB33_10 Depth=1
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-512(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB33_13
# %bb.12:                               # %cond.true16
                                        #   in Loop: Header=BB33_10 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB33_14
.LBB33_13:                              # %cond.false23
                                        #   in Loop: Header=BB33_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB33_14
.LBB33_14:                              # %cond.end24
                                        #   in Loop: Header=BB33_10 Depth=1
	andl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.15:                               # %for.inc26
                                        #   in Loop: Header=BB33_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_10
.LBB33_16:                              # %for.end28
	cmpl	$0, -512(%rbp)
	je	.LBB33_18
# %bb.17:                               # %cond.true32
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-508(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB33_19
.LBB33_18:                              # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB33_19
.LBB33_19:                              # %cond.end39
	movl	%eax, -60(%rbp)
.LBB33_20:                              # %if.end
	movl	$0, -36(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -4(%rbp)
.LBB33_21:                              # %for.cond41
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -4(%rbp)
	jge	.LBB33_28
# %bb.22:                               # %for.body43
                                        #   in Loop: Header=BB33_21 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB33_24
# %bb.23:                               # %if.then45
                                        #   in Loop: Header=BB33_21 Depth=1
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB33_24:                              # %if.end51
                                        #   in Loop: Header=BB33_21 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB33_26
# %bb.25:                               # %if.then53
                                        #   in Loop: Header=BB33_21 Depth=1
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB33_26:                              # %if.end68
                                        #   in Loop: Header=BB33_21 Depth=1
	jmp	.LBB33_27
.LBB33_27:                              # %for.inc69
                                        #   in Loop: Header=BB33_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_21
.LBB33_28:                              # %for.end71
	cmpl	$0, -16(%rbp)
	je	.LBB33_31
# %bb.29:                               # %land.lhs.true
	cmpl	$0, -12(%rbp)
	je	.LBB33_31
# %bb.30:                               # %if.then74
	movl	-40(%rbp), %eax
	addl	-36(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
.LBB33_31:                              # %if.end77
	cmpl	$0, -16(%rbp)
	jne	.LBB33_34
# %bb.32:                               # %land.lhs.true79
	cmpl	$0, -12(%rbp)
	je	.LBB33_34
# %bb.33:                               # %if.then81
	movl	-36(%rbp), %eax
	addl	$8, %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
.LBB33_34:                              # %if.end84
	cmpl	$0, -16(%rbp)
	je	.LBB33_37
# %bb.35:                               # %land.lhs.true86
	cmpl	$0, -12(%rbp)
	jne	.LBB33_37
# %bb.36:                               # %if.then88
	movl	-40(%rbp), %eax
	addl	$8, %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
.LBB33_37:                              # %if.end91
	cmpl	$0, -16(%rbp)
	jne	.LBB33_40
# %bb.38:                               # %land.lhs.true93
	cmpl	$0, -12(%rbp)
	jne	.LBB33_40
# %bb.39:                               # %if.then95
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -28(%rbp)
.LBB33_40:                              # %if.end96
	movl	$0, -4(%rbp)
.LBB33_41:                              # %for.cond97
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -4(%rbp)
	jge	.LBB33_48
# %bb.42:                               # %for.body100
                                        #   in Loop: Header=BB33_41 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB33_44
# %bb.43:                               # %if.then102
                                        #   in Loop: Header=BB33_41 Depth=1
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -640(%rbp,%rcx,8)
.LBB33_44:                              # %if.end114
                                        #   in Loop: Header=BB33_41 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB33_46
# %bb.45:                               # %if.then116
                                        #   in Loop: Header=BB33_41 Depth=1
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -636(%rbp,%rcx,8)
.LBB33_46:                              # %if.end133
                                        #   in Loop: Header=BB33_41 Depth=1
	jmp	.LBB33_47
.LBB33_47:                              # %for.inc134
                                        #   in Loop: Header=BB33_41 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_41
.LBB33_48:                              # %for.end136
	movl	$0, -8(%rbp)
.LBB33_49:                              # %for.cond137
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_51 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB33_56
# %bb.50:                               # %for.body140
                                        #   in Loop: Header=BB33_49 Depth=1
	movl	$0, -4(%rbp)
.LBB33_51:                              # %for.cond141
                                        #   Parent Loop BB33_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB33_54
# %bb.52:                               # %for.body144
                                        #   in Loop: Header=BB33_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-640(%rbp,%rax,8), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-8(%rbp), %rax
	movl	-636(%rbp,%rax,8), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$512, %rcx              # imm = 0x200
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	-28(%rbp), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$1024, %rcx             # imm = 0x400
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.53:                               # %for.inc171
                                        #   in Loop: Header=BB33_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_51
.LBB33_54:                              # %for.end173
                                        #   in Loop: Header=BB33_49 Depth=1
	jmp	.LBB33_55
.LBB33_55:                              # %for.inc174
                                        #   in Loop: Header=BB33_49 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB33_49
.LBB33_56:                              # %for.end176
	cmpl	$0, -16(%rbp)
	je	.LBB33_59
# %bb.57:                               # %lor.lhs.false
	cmpl	$0, -12(%rbp)
	je	.LBB33_59
# %bb.58:                               # %lor.lhs.false179
	cmpl	$0, -60(%rbp)
	jne	.LBB33_60
.LBB33_59:                              # %if.then181
	jmp	.LBB33_85
.LBB33_60:                              # %if.end182
	movl	$0, -32(%rbp)
	movl	$0, -56(%rbp)
	movl	$1, -4(%rbp)
.LBB33_61:                              # %for.cond183
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$9, -4(%rbp)
	jge	.LBB33_67
# %bb.62:                               # %for.body186
                                        #   in Loop: Header=BB33_61 Depth=1
	cmpl	$8, -4(%rbp)
	jge	.LBB33_64
# %bb.63:                               # %if.then189
                                        #   in Loop: Header=BB33_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	addl	$7, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-24(%rbp), %rdx
	movslq	-68(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-72(%rbp), %esi
	addl	$7, %esi
	subl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB33_65
.LBB33_64:                              # %if.else210
                                        #   in Loop: Header=BB33_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	addl	$7, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-24(%rbp), %rdx
	movslq	-492(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-496(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
.LBB33_65:                              # %if.end232
                                        #   in Loop: Header=BB33_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	leaq	-512(%rbp), %rcx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movslq	20(%rdi), %rdx
	movq	(%rsi,%rdx,8), %rsi
	movl	-4(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movslq	16(%rdi), %rdx
	movzwl	(%rsi,%rdx,2), %r9d
	movq	-24(%rbp), %r8
	movl	$8, %edi
	movl	$8, %edx
	subl	-4(%rbp), %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	20(%rsi), %rdx
	movq	(%r8,%rdx,8), %rdx
	subl	-4(%rbp), %edi
	movslq	%edi, %rsi
	imulq	$24, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	16(%rcx), %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %r9d
	imull	%r9d, %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.66:                               # %for.inc262
                                        #   in Loop: Header=BB33_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_61
.LBB33_67:                              # %for.end264
	imull	$5, -32(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movl	%eax, -52(%rbp)
	imull	$5, -56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movl	%eax, -44(%rbp)
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	$15, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-108(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-112(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	shll	$4, %eax
	movl	%eax, -48(%rbp)
	movl	$0, -8(%rbp)
.LBB33_68:                              # %for.cond289
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_70 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB33_84
# %bb.69:                               # %for.body292
                                        #   in Loop: Header=BB33_68 Depth=1
	movl	$0, -4(%rbp)
.LBB33_70:                              # %for.cond293
                                        #   Parent Loop BB33_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB33_82
# %bb.71:                               # %for.body296
                                        #   in Loop: Header=BB33_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-48(%rbp), %eax
	movl	-4(%rbp), %edx
	subl	$7, %edx
	imull	-52(%rbp), %edx
	addl	%edx, %eax
	movl	-8(%rbp), %edx
	subl	$7, %edx
	imull	-44(%rbp), %edx
	addl	%edx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB33_73
# %bb.72:                               # %cond.true307
                                        #   in Loop: Header=BB33_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB33_74
.LBB33_73:                              # %cond.false309
                                        #   in Loop: Header=BB33_70 Depth=2
	movl	-48(%rbp), %eax
	movl	-4(%rbp), %ecx
	subl	$7, %ecx
	imull	-52(%rbp), %ecx
	addl	%ecx, %eax
	movl	-8(%rbp), %ecx
	subl	$7, %ecx
	imull	-44(%rbp), %ecx
	addl	%ecx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB33_74:                              # %cond.end318
                                        #   in Loop: Header=BB33_70 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB33_76
# %bb.75:                               # %cond.true322
                                        #   in Loop: Header=BB33_70 Depth=2
	xorl	%eax, %eax
	jmp	.LBB33_80
.LBB33_76:                              # %cond.false323
                                        #   in Loop: Header=BB33_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-48(%rbp), %eax
	movl	-4(%rbp), %edx
	subl	$7, %edx
	imull	-52(%rbp), %edx
	addl	%edx, %eax
	movl	-8(%rbp), %edx
	subl	$7, %edx
	imull	-44(%rbp), %edx
	addl	%edx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB33_78
# %bb.77:                               # %cond.true335
                                        #   in Loop: Header=BB33_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB33_79
.LBB33_78:                              # %cond.false337
                                        #   in Loop: Header=BB33_70 Depth=2
	movl	-48(%rbp), %eax
	movl	-4(%rbp), %ecx
	subl	$7, %ecx
	imull	-52(%rbp), %ecx
	addl	%ecx, %eax
	movl	-8(%rbp), %ecx
	subl	$7, %ecx
	imull	-44(%rbp), %ecx
	addl	%ecx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB33_79:                              # %cond.end346
                                        #   in Loop: Header=BB33_70 Depth=2
.LBB33_80:                              # %cond.end348
                                        #   in Loop: Header=BB33_70 Depth=2
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$1536, %rcx             # imm = 0x600
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.81:                               # %for.inc357
                                        #   in Loop: Header=BB33_70 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_70
.LBB33_82:                              # %for.end359
                                        #   in Loop: Header=BB33_68 Depth=1
	jmp	.LBB33_83
.LBB33_83:                              # %for.inc360
                                        #   in Loop: Header=BB33_68 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB33_68
.LBB33_84:                              # %for.end362.loopexit
	jmp	.LBB33_85
.LBB33_85:                              # %for.end362
	cmpl	$484938975, -92(%rbp)   # imm = 0x1CE794DF
	jne	.LBB33_87
.LBB33_86:
	addq	$640, %rsp              # imm = 0x280
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_87:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB33_86
.Lfunc_end33:
	.size	intrapred_luma_16x16.24, .Lfunc_end33-intrapred_luma_16x16.24
	.cfi_endproc
                                        # -- End function
	.globl	copyblock_sp.25         # -- Begin function copyblock_sp.25
	.p2align	4, 0x90
	.type	copyblock_sp.25,@function
copyblock_sp.25:                        # @copyblock_sp.25
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movl	$1024186062, -88(%rbp)  # imm = 0x3D0BD6CE
	movl	%edi, -80(%rbp)
	movl	%esi, -72(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	-104(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -84(%rbp)
	movq	-104(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -68(%rbp)
	movl	-84(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -76(%rbp)
	movl	-76(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	movl	$0, -4(%rbp)
.LBB34_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB34_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB34_1 Depth=1
	movl	$0, -8(%rbp)
.LBB34_3:                               # %for.cond4
                                        #   Parent Loop BB34_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB34_6
# %bb.4:                                # %for.body6
                                        #   in Loop: Header=BB34_3 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-8(%rbp), %ecx
	addl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-4(%rbp), %ecx
	addl	-72(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-176(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB34_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB34_3
.LBB34_6:                               # %for.end
                                        #   in Loop: Header=BB34_1 Depth=1
	jmp	.LBB34_7
.LBB34_7:                               # %for.inc17
                                        #   in Loop: Header=BB34_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_1
.LBB34_8:                               # %for.end19
	movl	$0, -4(%rbp)
.LBB34_9:                               # %for.cond20
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_11 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB34_16
# %bb.10:                               # %for.body23
                                        #   in Loop: Header=BB34_9 Depth=1
	movl	$0, -8(%rbp)
.LBB34_11:                              # %for.cond24
                                        #   Parent Loop BB34_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -8(%rbp)
	jge	.LBB34_14
# %bb.12:                               # %for.body27
                                        #   in Loop: Header=BB34_11 Depth=2
	movl	$3, %eax
	subl	-8(%rbp), %eax
	movl	%eax, -36(%rbp)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-36(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-8(%rbp), %rdx
	movl	%eax, -32(%rbp,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-36(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-36(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.13:                               # %for.inc51
                                        #   in Loop: Header=BB34_11 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB34_11
.LBB34_14:                              # %for.end53
                                        #   in Loop: Header=BB34_9 Depth=1
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movl	-32(%rbp), %eax
	subl	-28(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -160(%rbp,%rcx,4)
	movl	-20(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
# %bb.15:                               # %for.inc79
                                        #   in Loop: Header=BB34_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_9
.LBB34_16:                              # %for.end81
	movl	$0, -8(%rbp)
.LBB34_17:                              # %for.cond82
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_19 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB34_24
# %bb.18:                               # %for.body85
                                        #   in Loop: Header=BB34_17 Depth=1
	movl	$0, -4(%rbp)
.LBB34_19:                              # %for.cond86
                                        #   Parent Loop BB34_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB34_22
# %bb.20:                               # %for.body89
                                        #   in Loop: Header=BB34_19 Depth=2
	movl	$3, %eax
	subl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-4(%rbp), %rdx
	movl	%eax, -32(%rbp,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.21:                               # %for.inc113
                                        #   in Loop: Header=BB34_19 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_19
.LBB34_22:                              # %for.end115
                                        #   in Loop: Header=BB34_17 Depth=1
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-176(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-32(%rbp), %ecx
	subl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	-24(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-20(%rbp), %ecx
	movl	-24(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.23:                               # %for.inc142
                                        #   in Loop: Header=BB34_17 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB34_17
.LBB34_24:                              # %for.end144
	movl	$0, -4(%rbp)
.LBB34_25:                              # %for.cond145
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_27 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB34_32
# %bb.26:                               # %for.body148
                                        #   in Loop: Header=BB34_25 Depth=1
	movl	$0, -8(%rbp)
.LBB34_27:                              # %for.cond149
                                        #   Parent Loop BB34_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB34_30
# %bb.28:                               # %for.body152
                                        #   in Loop: Header=BB34_27 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-68(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-92(%rbp), %eax
	movl	-76(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-176(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	(%rdx,%rcx,4), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-68(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-84(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.29:                               # %for.inc182
                                        #   in Loop: Header=BB34_27 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB34_27
.LBB34_30:                              # %for.end184
                                        #   in Loop: Header=BB34_25 Depth=1
	jmp	.LBB34_31
.LBB34_31:                              # %for.inc185
                                        #   in Loop: Header=BB34_25 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_25
.LBB34_32:                              # %for.end187
	movl	$0, -4(%rbp)
.LBB34_33:                              # %for.cond188
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_35 Depth 2
                                        #     Child Loop BB34_39 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB34_44
# %bb.34:                               # %for.body191
                                        #   in Loop: Header=BB34_33 Depth=1
	movl	$0, -8(%rbp)
.LBB34_35:                              # %for.cond192
                                        #   Parent Loop BB34_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB34_38
# %bb.36:                               # %for.body195
                                        #   in Loop: Header=BB34_35 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.37:                               # %for.inc203
                                        #   in Loop: Header=BB34_35 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB34_35
.LBB34_38:                              # %for.end205
                                        #   in Loop: Header=BB34_33 Depth=1
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-32(%rbp), %eax
	subl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	sarl	$1, %eax
	subl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	movl	-20(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -8(%rbp)
.LBB34_39:                              # %for.cond224
                                        #   Parent Loop BB34_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -8(%rbp)
	jge	.LBB34_42
# %bb.40:                               # %for.body227
                                        #   in Loop: Header=BB34_39 Depth=2
	movl	$3, %eax
	subl	-8(%rbp), %eax
	movl	%eax, -36(%rbp)
	movslq	-8(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-36(%rbp), %rcx
	addl	-64(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-36(%rbp), %rcx
	subl	-64(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-36(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.41:                               # %for.inc249
                                        #   in Loop: Header=BB34_39 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB34_39
.LBB34_42:                              # %for.end251
                                        #   in Loop: Header=BB34_33 Depth=1
	jmp	.LBB34_43
.LBB34_43:                              # %for.inc252
                                        #   in Loop: Header=BB34_33 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_33
.LBB34_44:                              # %for.end254
	movl	$0, -8(%rbp)
.LBB34_45:                              # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_47 Depth 2
                                        #     Child Loop BB34_51 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB34_74
# %bb.46:                               # %for.body258
                                        #   in Loop: Header=BB34_45 Depth=1
	movl	$0, -4(%rbp)
.LBB34_47:                              # %for.cond259
                                        #   Parent Loop BB34_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB34_50
# %bb.48:                               # %for.body262
                                        #   in Loop: Header=BB34_47 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.49:                               # %for.inc270
                                        #   in Loop: Header=BB34_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_47
.LBB34_50:                              # %for.end272
                                        #   in Loop: Header=BB34_45 Depth=1
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-32(%rbp), %eax
	subl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	sarl	$1, %eax
	subl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	movl	-20(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -4(%rbp)
.LBB34_51:                              # %for.cond291
                                        #   Parent Loop BB34_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB34_72
# %bb.52:                               # %for.body294
                                        #   in Loop: Header=BB34_51 Depth=2
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-4(%rbp), %rdx
	movl	-64(%rbp,%rdx,4), %edx
	movslq	-12(%rbp), %rsi
	addl	-64(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB34_54
# %bb.53:                               # %cond.true
                                        #   in Loop: Header=BB34_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB34_55
.LBB34_54:                              # %cond.false
                                        #   in Loop: Header=BB34_51 Depth=2
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	addl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB34_55:                              # %cond.end
                                        #   in Loop: Header=BB34_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB34_57
# %bb.56:                               # %cond.true314
                                        #   in Loop: Header=BB34_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB34_61
.LBB34_57:                              # %cond.false316
                                        #   in Loop: Header=BB34_51 Depth=2
	xorl	%eax, %eax
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	addl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB34_59
# %bb.58:                               # %cond.true326
                                        #   in Loop: Header=BB34_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB34_60
.LBB34_59:                              # %cond.false327
                                        #   in Loop: Header=BB34_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-64(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB34_60:                              # %cond.end335
                                        #   in Loop: Header=BB34_51 Depth=2
.LBB34_61:                              # %cond.end337
                                        #   in Loop: Header=BB34_51 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-4(%rbp), %rdx
	movl	-64(%rbp,%rdx,4), %edx
	movslq	-12(%rbp), %rsi
	subl	-64(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB34_63
# %bb.62:                               # %cond.true354
                                        #   in Loop: Header=BB34_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB34_64
.LBB34_63:                              # %cond.false355
                                        #   in Loop: Header=BB34_51 Depth=2
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	subl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB34_64:                              # %cond.end363
                                        #   in Loop: Header=BB34_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB34_66
# %bb.65:                               # %cond.true367
                                        #   in Loop: Header=BB34_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB34_70
.LBB34_66:                              # %cond.false369
                                        #   in Loop: Header=BB34_51 Depth=2
	xorl	%eax, %eax
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	subl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB34_68
# %bb.67:                               # %cond.true379
                                        #   in Loop: Header=BB34_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB34_69
.LBB34_68:                              # %cond.false380
                                        #   in Loop: Header=BB34_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-64(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB34_69:                              # %cond.end388
                                        #   in Loop: Header=BB34_51 Depth=2
.LBB34_70:                              # %cond.end390
                                        #   in Loop: Header=BB34_51 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.71:                               # %for.inc397
                                        #   in Loop: Header=BB34_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_51
.LBB34_72:                              # %for.end399
                                        #   in Loop: Header=BB34_45 Depth=1
	jmp	.LBB34_73
.LBB34_73:                              # %for.inc400
                                        #   in Loop: Header=BB34_45 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB34_45
.LBB34_74:                              # %for.end402
	movl	$0, -4(%rbp)
.LBB34_75:                              # %for.cond403
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_77 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB34_82
# %bb.76:                               # %for.body406
                                        #   in Loop: Header=BB34_75 Depth=1
	movl	$0, -8(%rbp)
.LBB34_77:                              # %for.cond407
                                        #   Parent Loop BB34_75 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB34_80
# %bb.78:                               # %for.body410
                                        #   in Loop: Header=BB34_77 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-72(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-80(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.79:                               # %for.inc425
                                        #   in Loop: Header=BB34_77 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB34_77
.LBB34_80:                              # %for.end427
                                        #   in Loop: Header=BB34_75 Depth=1
	jmp	.LBB34_81
.LBB34_81:                              # %for.inc428
                                        #   in Loop: Header=BB34_75 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_75
.LBB34_82:                              # %for.end430
	cmpl	$1024186062, -88(%rbp)  # imm = 0x3D0BD6CE
	jne	.LBB34_84
.LBB34_83:
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_84:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB34_83
.Lfunc_end34:
	.size	copyblock_sp.25, .Lfunc_end34-copyblock_sp.25
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma.26           # -- Begin function dct_chroma.26
	.p2align	4, 0x90
	.type	dct_chroma.26,@function
dct_chroma.26:                          # @dct_chroma.26
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$424, %rsp              # imm = 0x1A8
	.cfi_offset %rbx, -24
	movl	$1197208689, -380(%rbp) # imm = 0x475BF471
	movl	%edi, -20(%rbp)
	movl	%esi, -132(%rbp)
	movl	$0, -204(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -192(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -224(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -376(%rbp)
	movq	-192(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB35_3
# %bb.1:                                # %lor.lhs.false
	movq	-192(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB35_3
# %bb.2:                                # %lor.rhs
	movq	-192(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB35_3:                               # %lor.end
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -124(%rbp)
	movl	-20(%rbp), %esi
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	imull	%eax, %esi
	movl	%esi, -200(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern, %rax
	movq	%rax, -432(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+8, %rax
	movq	%rax, -424(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+16, %rax
	movq	%rax, -416(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+24, %rax
	movq	%rax, -408(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	movl	%eax, -144(%rbp)
	movl	$0, -104(%rbp)
	movl	$0, -136(%rbp)
	movl	$0, -212(%rbp)
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	cmpl	$0, %eax
	jne	.LBB35_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%cl
.LBB35_5:                               # %land.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -108(%rbp)
	movq	-192(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	img, %rdx
	movslq	-20(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	movl	%ecx, -128(%rbp)
	movl	-128(%rbp), %ecx
	movq	img, %rdx
	subl	72672(%rdx), %eax
	cmpl	%eax, %ecx
	jge	.LBB35_7
# %bb.6:                                # %cond.true
	xorl	%eax, %eax
	movq	img, %rcx
	subl	72672(%rcx), %eax
	jmp	.LBB35_11
.LBB35_7:                               # %cond.false
	cmpl	$51, -128(%rbp)
	jle	.LBB35_9
# %bb.8:                                # %cond.true24
	movl	$51, %eax
	jmp	.LBB35_10
.LBB35_9:                               # %cond.false25
	movl	-128(%rbp), %eax
.LBB35_10:                              # %cond.end
.LBB35_11:                              # %cond.end26
	movl	%eax, -128(%rbp)
	cmpl	$0, -128(%rbp)
	jge	.LBB35_13
# %bb.12:                               # %cond.true29
	movl	-128(%rbp), %eax
	jmp	.LBB35_14
.LBB35_13:                              # %cond.false30
	movl	-128(%rbp), %eax
	subl	$0, %eax
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB35_14:                              # %cond.end34
	movl	%eax, -128(%rbp)
	movl	-128(%rbp), %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movl	-128(%rbp), %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -76(%rbp)
	movl	-40(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -180(%rbp)
	movq	img, %rax
	cmpl	$2, 72700(%rax)
	jne	.LBB35_16
# %bb.15:                               # %if.then
	movl	-128(%rbp), %eax
	addl	$3, %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -104(%rbp)
	movl	-128(%rbp), %eax
	addl	$3, %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -136(%rbp)
	movl	-104(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -212(%rbp)
.LBB35_16:                              # %if.end
	movl	$0, -28(%rbp)
.LBB35_17:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_19 Depth 2
                                        #       Child Loop BB35_21 Depth 3
                                        #         Child Loop BB35_25 Depth 4
                                        #       Child Loop BB35_31 Depth 3
                                        #         Child Loop BB35_35 Depth 4
	movl	-28(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB35_44
# %bb.18:                               # %for.body
                                        #   in Loop: Header=BB35_17 Depth=1
	movl	$0, -24(%rbp)
.LBB35_19:                              # %for.cond56
                                        #   Parent Loop BB35_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB35_21 Depth 3
                                        #         Child Loop BB35_25 Depth 4
                                        #       Child Loop BB35_31 Depth 3
                                        #         Child Loop BB35_35 Depth 4
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB35_42
# %bb.20:                               # %for.body59
                                        #   in Loop: Header=BB35_19 Depth=2
	movl	$0, -12(%rbp)
.LBB35_21:                              # %for.cond60
                                        #   Parent Loop BB35_17 Depth=1
                                        #     Parent Loop BB35_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB35_25 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB35_23
# %bb.22:                               # %land.rhs63
                                        #   in Loop: Header=BB35_21 Depth=3
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB35_23:                              # %land.end64
                                        #   in Loop: Header=BB35_21 Depth=3
	testb	$1, %al
	jne	.LBB35_24
	jmp	.LBB35_30
.LBB35_24:                              # %for.body66
                                        #   in Loop: Header=BB35_21 Depth=3
	movl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -148(%rbp)
	movl	$0, -16(%rbp)
.LBB35_25:                              # %for.cond68
                                        #   Parent Loop BB35_17 Depth=1
                                        #     Parent Loop BB35_19 Depth=2
                                        #       Parent Loop BB35_21 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB35_28
# %bb.26:                               # %for.body71
                                        #   in Loop: Header=BB35_25 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-148(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-148(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-120(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.27:                               # %for.inc
                                        #   in Loop: Header=BB35_25 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB35_25
.LBB35_28:                              # %for.end
                                        #   in Loop: Header=BB35_21 Depth=3
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.29:                               # %for.inc139
                                        #   in Loop: Header=BB35_21 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB35_21
.LBB35_30:                              # %for.end141
                                        #   in Loop: Header=BB35_19 Depth=2
	movl	$0, -16(%rbp)
.LBB35_31:                              # %for.cond142
                                        #   Parent Loop BB35_17 Depth=1
                                        #     Parent Loop BB35_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB35_35 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB35_33
# %bb.32:                               # %land.rhs145
                                        #   in Loop: Header=BB35_31 Depth=3
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB35_33:                              # %land.end148
                                        #   in Loop: Header=BB35_31 Depth=3
	testb	$1, %al
	jne	.LBB35_34
	jmp	.LBB35_40
.LBB35_34:                              # %for.body150
                                        #   in Loop: Header=BB35_31 Depth=3
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	$0, -12(%rbp)
.LBB35_35:                              # %for.cond152
                                        #   Parent Loop BB35_17 Depth=1
                                        #     Parent Loop BB35_19 Depth=2
                                        #       Parent Loop BB35_31 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB35_38
# %bb.36:                               # %for.body155
                                        #   in Loop: Header=BB35_35 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-72(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.37:                               # %for.inc187
                                        #   in Loop: Header=BB35_35 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB35_35
.LBB35_38:                              # %for.end189
                                        #   in Loop: Header=BB35_31 Depth=3
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.39:                               # %for.inc228
                                        #   in Loop: Header=BB35_31 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB35_31
.LBB35_40:                              # %for.end230
                                        #   in Loop: Header=BB35_19 Depth=2
	jmp	.LBB35_41
.LBB35_41:                              # %for.inc231
                                        #   in Loop: Header=BB35_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB35_19
.LBB35_42:                              # %for.end233
                                        #   in Loop: Header=BB35_17 Depth=1
	jmp	.LBB35_43
.LBB35_43:                              # %for.inc234
                                        #   in Loop: Header=BB35_17 Depth=1
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB35_17
.LBB35_44:                              # %for.end236
	cmpl	$1, -144(%rbp)
	jne	.LBB35_76
# %bb.45:                               # %if.then239
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -176(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -172(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -168(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -164(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -36(%rbp)
.LBB35_46:                              # %for.cond304
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -36(%rbp)
	jge	.LBB35_62
# %bb.47:                               # %for.body307
                                        #   in Loop: Header=BB35_46 Depth=1
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -140(%rbp)
	cmpl	$1, -124(%rbp)
	jne	.LBB35_49
# %bb.48:                               # %if.then311
                                        #   in Loop: Header=BB35_46 Depth=1
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB35_50
.LBB35_49:                              # %if.else
                                        #   in Loop: Header=BB35_46 Depth=1
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB35_50:                              # %if.end349
                                        #   in Loop: Header=BB35_46 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB35_55
# %bb.51:                               # %land.lhs.true
                                        #   in Loop: Header=BB35_46 Depth=1
	movq	img, %rax
	cmpl	$4, 40(%rax)
	jge	.LBB35_55
# %bb.52:                               # %if.then355
                                        #   in Loop: Header=BB35_46 Depth=1
	cmpl	$2063, -44(%rbp)        # imm = 0x80F
	jle	.LBB35_54
# %bb.53:                               # %if.then358
                                        #   in Loop: Header=BB35_46 Depth=1
	movl	$2063, -44(%rbp)        # imm = 0x80F
.LBB35_54:                              # %if.end359
                                        #   in Loop: Header=BB35_46 Depth=1
	jmp	.LBB35_55
.LBB35_55:                              # %if.end360
                                        #   in Loop: Header=BB35_46 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB35_60
# %bb.56:                               # %if.then363
                                        #   in Loop: Header=BB35_46 Depth=1
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
                                        # kill: def $cl killed $ecx
	movl	$983040, %eax           # imm = 0xF0000
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-132(%rbp), %eax
	jle	.LBB35_58
# %bb.57:                               # %cond.true369
                                        #   in Loop: Header=BB35_46 Depth=1
	movl	$1, %eax
	jmp	.LBB35_59
.LBB35_58:                              # %cond.false370
                                        #   in Loop: Header=BB35_46 Depth=1
	movl	-132(%rbp), %eax
.LBB35_59:                              # %cond.end371
                                        #   in Loop: Header=BB35_46 Depth=1
	movl	%eax, -132(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	$-1, -100(%rbp)
	movl	-44(%rbp), %edi
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %esi
	callq	sign
	movl	%eax, -140(%rbp)
.LBB35_60:                              # %if.end384
                                        #   in Loop: Header=BB35_46 Depth=1
	movl	-140(%rbp), %eax
	movslq	-36(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.61:                               # %for.inc387
                                        #   in Loop: Header=BB35_46 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB35_46
.LBB35_62:                              # %for.end389
	movq	-224(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -16(%rbp)
.LBB35_63:                              # %for.cond424
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB35_75
# %bb.64:                               # %for.body427
                                        #   in Loop: Header=BB35_63 Depth=1
	cmpl	$5, -40(%rbp)
	jge	.LBB35_69
# %bb.65:                               # %if.then430
                                        #   in Loop: Header=BB35_63 Depth=1
	cmpl	$1, -124(%rbp)
	jne	.LBB35_67
# %bb.66:                               # %if.then433
                                        #   in Loop: Header=BB35_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	$5, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	jmp	.LBB35_68
.LBB35_67:                              # %if.else447
                                        #   in Loop: Header=BB35_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	$5, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
.LBB35_68:                              # %if.end461
                                        #   in Loop: Header=BB35_63 Depth=1
	jmp	.LBB35_73
.LBB35_69:                              # %if.else462
                                        #   in Loop: Header=BB35_63 Depth=1
	cmpl	$1, -124(%rbp)
	jne	.LBB35_71
# %bb.70:                               # %if.then465
                                        #   in Loop: Header=BB35_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-40(%rbp), %ecx
	subl	$5, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	jmp	.LBB35_72
.LBB35_71:                              # %if.else479
                                        #   in Loop: Header=BB35_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-40(%rbp), %ecx
	subl	$5, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
.LBB35_72:                              # %if.end493
                                        #   in Loop: Header=BB35_63 Depth=1
	jmp	.LBB35_73
.LBB35_73:                              # %if.end494
                                        #   in Loop: Header=BB35_63 Depth=1
	jmp	.LBB35_74
.LBB35_74:                              # %for.inc495
                                        #   in Loop: Header=BB35_63 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB35_63
.LBB35_75:                              # %for.end497
	movl	-176(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	movl	-172(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13368(%rcx)
	movl	-168(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13128(%rcx)
	movl	-164(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13384(%rcx)
	jmp	.LBB35_213
.LBB35_76:                              # %if.else514
	cmpl	$2, -144(%rbp)
	jne	.LBB35_127
# %bb.77:                               # %if.then517
	movl	$0, -12(%rbp)
.LBB35_78:                              # %for.cond518
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_80 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB35_85
# %bb.79:                               # %for.body522
                                        #   in Loop: Header=BB35_78 Depth=1
	movl	$0, -16(%rbp)
.LBB35_80:                              # %for.cond523
                                        #   Parent Loop BB35_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB35_83
# %bb.81:                               # %for.body527
                                        #   in Loop: Header=BB35_80 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$4, %rcx
	leaq	-368(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.82:                               # %for.inc539
                                        #   in Loop: Header=BB35_80 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB35_80
.LBB35_83:                              # %for.end541
                                        #   in Loop: Header=BB35_78 Depth=1
	jmp	.LBB35_84
.LBB35_84:                              # %for.inc542
                                        #   in Loop: Header=BB35_78 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB35_78
.LBB35_85:                              # %for.end544
	movl	-368(%rbp), %eax
	addl	-352(%rbp), %eax
	movl	%eax, -304(%rbp)
	movl	-364(%rbp), %eax
	addl	-348(%rbp), %eax
	movl	%eax, -300(%rbp)
	movl	-360(%rbp), %eax
	addl	-344(%rbp), %eax
	movl	%eax, -296(%rbp)
	movl	-356(%rbp), %eax
	addl	-340(%rbp), %eax
	movl	%eax, -292(%rbp)
	movl	-368(%rbp), %eax
	subl	-352(%rbp), %eax
	movl	%eax, -288(%rbp)
	movl	-364(%rbp), %eax
	subl	-348(%rbp), %eax
	movl	%eax, -284(%rbp)
	movl	-360(%rbp), %eax
	subl	-344(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-356(%rbp), %eax
	subl	-340(%rbp), %eax
	movl	%eax, -276(%rbp)
	movl	$0, -16(%rbp)
.LBB35_86:                              # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_88 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB35_93
# %bb.87:                               # %for.body604
                                        #   in Loop: Header=BB35_86 Depth=1
	movl	$0, -12(%rbp)
.LBB35_88:                              # %for.cond605
                                        #   Parent Loop BB35_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB35_91
# %bb.89:                               # %for.body608
                                        #   in Loop: Header=BB35_88 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-32(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-32(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.90:                               # %for.inc632
                                        #   in Loop: Header=BB35_88 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB35_88
.LBB35_91:                              # %for.end634
                                        #   in Loop: Header=BB35_86 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, 8(%rsi)
	movl	-52(%rbp), %eax
	addl	-56(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-52(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movl	%eax, 12(%rdx)
# %bb.92:                               # %for.inc659
                                        #   in Loop: Header=BB35_86 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB35_86
.LBB35_93:                              # %for.end661
	movl	$-1, -100(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -36(%rbp)
.LBB35_94:                              # %for.cond662
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -36(%rbp)
	jge	.LBB35_105
# %bb.95:                               # %for.body665
                                        #   in Loop: Header=BB35_94 Depth=1
	movslq	-36(%rbp), %rax
	movzbl	SCAN_YUV422(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SCAN_YUV422+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	cmpl	$1, -124(%rbp)
	jne	.LBB35_97
# %bb.96:                               # %if.then677
                                        #   in Loop: Header=BB35_94 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-104(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-212(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB35_98
.LBB35_97:                              # %if.else700
                                        #   in Loop: Header=BB35_94 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-104(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-212(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB35_98:                              # %if.end723
                                        #   in Loop: Header=BB35_94 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB35_103
# %bb.99:                               # %if.then726
                                        #   in Loop: Header=BB35_94 Depth=1
	movl	-20(%rbp), %ecx
	shll	$3, %ecx
                                        # kill: def $cl killed $ecx
	movl	$16711680, %eax         # imm = 0xFF0000
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-132(%rbp), %eax
	jle	.LBB35_101
# %bb.100:                              # %cond.true734
                                        #   in Loop: Header=BB35_94 Depth=1
	movl	$1, %eax
	jmp	.LBB35_102
.LBB35_101:                             # %cond.false735
                                        #   in Loop: Header=BB35_94 Depth=1
	movl	-132(%rbp), %eax
.LBB35_102:                             # %cond.end736
                                        #   in Loop: Header=BB35_94 Depth=1
	movl	%eax, -132(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	$-1, -100(%rbp)
.LBB35_103:                             # %if.end748
                                        #   in Loop: Header=BB35_94 Depth=1
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-368(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.104:                              # %for.inc758
                                        #   in Loop: Header=BB35_94 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB35_94
.LBB35_105:                             # %for.end760
	movq	-224(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-368(%rbp), %eax
	addl	-352(%rbp), %eax
	movl	%eax, -304(%rbp)
	movl	-364(%rbp), %eax
	addl	-348(%rbp), %eax
	movl	%eax, -300(%rbp)
	movl	-360(%rbp), %eax
	addl	-344(%rbp), %eax
	movl	%eax, -296(%rbp)
	movl	-356(%rbp), %eax
	addl	-340(%rbp), %eax
	movl	%eax, -292(%rbp)
	movl	-368(%rbp), %eax
	subl	-352(%rbp), %eax
	movl	%eax, -288(%rbp)
	movl	-364(%rbp), %eax
	subl	-348(%rbp), %eax
	movl	%eax, -284(%rbp)
	movl	-360(%rbp), %eax
	subl	-344(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-356(%rbp), %eax
	subl	-340(%rbp), %eax
	movl	%eax, -276(%rbp)
	movl	$0, -16(%rbp)
.LBB35_106:                             # %for.cond819
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_108 Depth 2
                                        #     Child Loop BB35_112 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB35_126
# %bb.107:                              # %for.body822
                                        #   in Loop: Header=BB35_106 Depth=1
	movl	$0, -12(%rbp)
.LBB35_108:                             # %for.cond823
                                        #   Parent Loop BB35_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB35_111
# %bb.109:                              # %for.body826
                                        #   in Loop: Header=BB35_108 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.110:                              # %for.inc833
                                        #   in Loop: Header=BB35_108 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB35_108
.LBB35_111:                             # %for.end835
                                        #   in Loop: Header=BB35_106 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB35_112:                             # %for.cond852
                                        #   Parent Loop BB35_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB35_124
# %bb.113:                              # %for.body855
                                        #   in Loop: Header=BB35_112 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	cmpl	$4, -104(%rbp)
	jge	.LBB35_118
# %bb.114:                              # %if.then859
                                        #   in Loop: Header=BB35_112 Depth=2
	cmpl	$1, -124(%rbp)
	jne	.LBB35_116
# %bb.115:                              # %if.then862
                                        #   in Loop: Header=BB35_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-136(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-104(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-104(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
	jmp	.LBB35_117
.LBB35_116:                             # %if.else915
                                        #   in Loop: Header=BB35_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-136(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-104(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-104(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
.LBB35_117:                             # %if.end968
                                        #   in Loop: Header=BB35_112 Depth=2
	jmp	.LBB35_122
.LBB35_118:                             # %if.else969
                                        #   in Loop: Header=BB35_112 Depth=2
	cmpl	$1, -124(%rbp)
	jne	.LBB35_120
# %bb.119:                              # %if.then972
                                        #   in Loop: Header=BB35_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-104(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-104(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB35_121
.LBB35_120:                             # %if.else1019
                                        #   in Loop: Header=BB35_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-104(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-104(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB35_121:                             # %if.end1066
                                        #   in Loop: Header=BB35_112 Depth=2
	jmp	.LBB35_122
.LBB35_122:                             # %if.end1067
                                        #   in Loop: Header=BB35_112 Depth=2
	jmp	.LBB35_123
.LBB35_123:                             # %for.inc1068
                                        #   in Loop: Header=BB35_112 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB35_112
.LBB35_124:                             # %for.end1070
                                        #   in Loop: Header=BB35_106 Depth=1
	jmp	.LBB35_125
.LBB35_125:                             # %for.inc1071
                                        #   in Loop: Header=BB35_106 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB35_106
.LBB35_126:                             # %for.end1073
	jmp	.LBB35_212
.LBB35_127:                             # %if.else1074
	cmpl	$3, -144(%rbp)
	jne	.LBB35_211
# %bb.128:                              # %if.then1077
	movl	$0, -12(%rbp)
.LBB35_129:                             # %for.cond1078
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_131 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB35_136
# %bb.130:                              # %for.body1082
                                        #   in Loop: Header=BB35_129 Depth=1
	movl	$0, -16(%rbp)
.LBB35_131:                             # %for.cond1083
                                        #   Parent Loop BB35_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB35_134
# %bb.132:                              # %for.body1087
                                        #   in Loop: Header=BB35_131 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.133:                              # %for.inc1099
                                        #   in Loop: Header=BB35_131 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB35_131
.LBB35_134:                             # %for.end1101
                                        #   in Loop: Header=BB35_129 Depth=1
	jmp	.LBB35_135
.LBB35_135:                             # %for.inc1102
                                        #   in Loop: Header=BB35_129 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB35_129
.LBB35_136:                             # %for.end1104
	movl	$0, -12(%rbp)
.LBB35_137:                             # %for.cond1105
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_141 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB35_139
# %bb.138:                              # %land.rhs1108
                                        #   in Loop: Header=BB35_137 Depth=1
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB35_139:                             # %land.end1111
                                        #   in Loop: Header=BB35_137 Depth=1
	testb	$1, %al
	jne	.LBB35_140
	jmp	.LBB35_146
.LBB35_140:                             # %for.body1113
                                        #   in Loop: Header=BB35_137 Depth=1
	movl	$0, -16(%rbp)
.LBB35_141:                             # %for.cond1114
                                        #   Parent Loop BB35_137 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB35_144
# %bb.142:                              # %for.body1117
                                        #   in Loop: Header=BB35_141 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-120(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-120(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-120(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.143:                              # %for.inc1141
                                        #   in Loop: Header=BB35_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB35_141
.LBB35_144:                             # %for.end1143
                                        #   in Loop: Header=BB35_137 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -304(%rbp,%rcx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
	movl	-52(%rbp), %eax
	addl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -288(%rbp,%rcx,4)
	movl	-52(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -256(%rbp,%rcx,4)
# %bb.145:                              # %for.inc1168
                                        #   in Loop: Header=BB35_137 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB35_137
.LBB35_146:                             # %for.end1170
	movl	$0, -16(%rbp)
.LBB35_147:                             # %for.cond1171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_151 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB35_149
# %bb.148:                              # %land.rhs1174
                                        #   in Loop: Header=BB35_147 Depth=1
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB35_149:                             # %land.end1177
                                        #   in Loop: Header=BB35_147 Depth=1
	testb	$1, %al
	jne	.LBB35_150
	jmp	.LBB35_156
.LBB35_150:                             # %for.body1179
                                        #   in Loop: Header=BB35_147 Depth=1
	movl	$0, -12(%rbp)
.LBB35_151:                             # %for.cond1180
                                        #   Parent Loop BB35_147 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB35_154
# %bb.152:                              # %for.body1183
                                        #   in Loop: Header=BB35_151 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-32(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-32(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.153:                              # %for.inc1207
                                        #   in Loop: Header=BB35_151 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB35_151
.LBB35_154:                             # %for.end1209
                                        #   in Loop: Header=BB35_147 Depth=1
	movl	-64(%rbp), %ecx
	addl	-60(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-304(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-64(%rbp), %ecx
	subl	-60(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-52(%rbp), %ecx
	addl	-56(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-52(%rbp), %ecx
	subl	-56(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.155:                              # %for.inc1238
                                        #   in Loop: Header=BB35_147 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB35_147
.LBB35_156:                             # %for.end1240
	movl	$-1, -100(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -36(%rbp)
.LBB35_157:                             # %for.cond1241
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -36(%rbp)
	jge	.LBB35_173
# %bb.158:                              # %for.body1244
                                        #   in Loop: Header=BB35_157 Depth=1
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB35_160
# %bb.159:                              # %if.then1255
                                        #   in Loop: Header=BB35_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -44(%rbp)
	jmp	.LBB35_164
.LBB35_160:                             # %if.else1261
                                        #   in Loop: Header=BB35_157 Depth=1
	cmpl	$1, -124(%rbp)
	jne	.LBB35_162
# %bb.161:                              # %if.then1264
                                        #   in Loop: Header=BB35_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB35_163
.LBB35_162:                             # %if.else1287
                                        #   in Loop: Header=BB35_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB35_163:                             # %if.end1310
                                        #   in Loop: Header=BB35_157 Depth=1
	jmp	.LBB35_164
.LBB35_164:                             # %if.end1311
                                        #   in Loop: Header=BB35_157 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB35_169
# %bb.165:                              # %if.then1314
                                        #   in Loop: Header=BB35_157 Depth=1
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $rcx
	movl	$4294901760, %eax       # imm = 0xFFFF0000
	shlq	%cl, %rax
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-132(%rbp), %eax
	jle	.LBB35_167
# %bb.166:                              # %cond.true1321
                                        #   in Loop: Header=BB35_157 Depth=1
	movl	$1, %eax
	jmp	.LBB35_168
.LBB35_167:                             # %cond.false1322
                                        #   in Loop: Header=BB35_157 Depth=1
	movl	-132(%rbp), %eax
.LBB35_168:                             # %cond.end1323
                                        #   in Loop: Header=BB35_157 Depth=1
	movl	%eax, -132(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	$-1, -100(%rbp)
.LBB35_169:                             # %if.end1335
                                        #   in Loop: Header=BB35_157 Depth=1
	cmpl	$0, -108(%rbp)
	jne	.LBB35_171
# %bb.170:                              # %if.then1337
                                        #   in Loop: Header=BB35_157 Depth=1
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB35_171:                             # %if.end1347
                                        #   in Loop: Header=BB35_157 Depth=1
	jmp	.LBB35_172
.LBB35_172:                             # %for.inc1348
                                        #   in Loop: Header=BB35_157 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB35_157
.LBB35_173:                             # %for.end1350
	movq	-224(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB35_174:                             # %for.cond1353
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_178 Depth 2
                                        #     Child Loop BB35_182 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB35_176
# %bb.175:                              # %land.rhs1356
                                        #   in Loop: Header=BB35_174 Depth=1
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB35_176:                             # %land.end1359
                                        #   in Loop: Header=BB35_174 Depth=1
	testb	$1, %al
	jne	.LBB35_177
	jmp	.LBB35_187
.LBB35_177:                             # %for.body1361
                                        #   in Loop: Header=BB35_174 Depth=1
	movl	$0, -16(%rbp)
.LBB35_178:                             # %for.cond1362
                                        #   Parent Loop BB35_174 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB35_181
# %bb.179:                              # %for.body1365
                                        #   in Loop: Header=BB35_178 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.180:                              # %for.inc1372
                                        #   in Loop: Header=BB35_178 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB35_178
.LBB35_181:                             # %for.end1374
                                        #   in Loop: Header=BB35_174 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB35_182:                             # %for.cond1391
                                        #   Parent Loop BB35_174 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB35_185
# %bb.183:                              # %for.body1394
                                        #   in Loop: Header=BB35_182 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movslq	-120(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.184:                              # %for.inc1414
                                        #   in Loop: Header=BB35_182 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB35_182
.LBB35_185:                             # %for.end1416
                                        #   in Loop: Header=BB35_174 Depth=1
	jmp	.LBB35_186
.LBB35_186:                             # %for.inc1417
                                        #   in Loop: Header=BB35_174 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB35_174
.LBB35_187:                             # %for.end1419
	movl	$0, -16(%rbp)
.LBB35_188:                             # %for.cond1420
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_192 Depth 2
                                        #     Child Loop BB35_196 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB35_190
# %bb.189:                              # %land.rhs1423
                                        #   in Loop: Header=BB35_188 Depth=1
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB35_190:                             # %land.end1426
                                        #   in Loop: Header=BB35_188 Depth=1
	testb	$1, %al
	jne	.LBB35_191
	jmp	.LBB35_210
.LBB35_191:                             # %for.body1428
                                        #   in Loop: Header=BB35_188 Depth=1
	movl	$0, -12(%rbp)
.LBB35_192:                             # %for.cond1429
                                        #   Parent Loop BB35_188 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB35_195
# %bb.193:                              # %for.body1432
                                        #   in Loop: Header=BB35_192 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.194:                              # %for.inc1439
                                        #   in Loop: Header=BB35_192 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB35_192
.LBB35_195:                             # %for.end1441
                                        #   in Loop: Header=BB35_188 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB35_196:                             # %for.cond1458
                                        #   Parent Loop BB35_188 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB35_208
# %bb.197:                              # %for.body1461
                                        #   in Loop: Header=BB35_196 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	cmpl	$4, -40(%rbp)
	jge	.LBB35_202
# %bb.198:                              # %if.then1465
                                        #   in Loop: Header=BB35_196 Depth=2
	cmpl	$1, -124(%rbp)
	jne	.LBB35_200
# %bb.199:                              # %if.then1468
                                        #   in Loop: Header=BB35_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-76(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-40(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-40(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
	jmp	.LBB35_201
.LBB35_200:                             # %if.else1521
                                        #   in Loop: Header=BB35_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-76(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-40(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-40(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
.LBB35_201:                             # %if.end1574
                                        #   in Loop: Header=BB35_196 Depth=2
	jmp	.LBB35_206
.LBB35_202:                             # %if.else1575
                                        #   in Loop: Header=BB35_196 Depth=2
	cmpl	$1, -124(%rbp)
	jne	.LBB35_204
# %bb.203:                              # %if.then1578
                                        #   in Loop: Header=BB35_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB35_205
.LBB35_204:                             # %if.else1625
                                        #   in Loop: Header=BB35_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB35_205:                             # %if.end1672
                                        #   in Loop: Header=BB35_196 Depth=2
	jmp	.LBB35_206
.LBB35_206:                             # %if.end1673
                                        #   in Loop: Header=BB35_196 Depth=2
	jmp	.LBB35_207
.LBB35_207:                             # %for.inc1674
                                        #   in Loop: Header=BB35_196 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB35_196
.LBB35_208:                             # %for.end1676
                                        #   in Loop: Header=BB35_188 Depth=1
	jmp	.LBB35_209
.LBB35_209:                             # %for.inc1677
                                        #   in Loop: Header=BB35_188 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB35_188
.LBB35_210:                             # %for.end1679
	jmp	.LBB35_211
.LBB35_211:                             # %if.end1680
	jmp	.LBB35_212
.LBB35_212:                             # %if.end1681
	jmp	.LBB35_213
.LBB35_213:                             # %if.end1682
	movl	$0, -196(%rbp)
	movl	$0, -208(%rbp)
	movl	$0, -116(%rbp)
.LBB35_214:                             # %for.cond1683
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_216 Depth 2
                                        #       Child Loop BB35_218 Depth 3
	movl	-116(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB35_256
# %bb.215:                              # %for.body1688
                                        #   in Loop: Header=BB35_214 Depth=1
	movl	$0, -112(%rbp)
.LBB35_216:                             # %for.cond1689
                                        #   Parent Loop BB35_214 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB35_218 Depth 3
	cmpl	$4, -112(%rbp)
	jge	.LBB35_254
# %bb.217:                              # %for.body1692
                                        #   in Loop: Header=BB35_216 Depth=2
	movslq	-144(%rbp), %rax
	shlq	$4, %rax
	movabsq	$hor_offset, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -24(%rbp)
	movslq	-144(%rbp), %rax
	shlq	$4, %rax
	movabsq	$ver_offset, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$4, %ecx
	addl	-200(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -232(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$4, %ecx
	addl	-200(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -392(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -68(%rbp)
	movl	$1, -36(%rbp)
.LBB35_218:                             # %for.cond1722
                                        #   Parent Loop BB35_214 Depth=1
                                        #     Parent Loop BB35_216 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -36(%rbp)
	jge	.LBB35_252
# %bb.219:                              # %for.body1725
                                        #   in Loop: Header=BB35_218 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB35_222
# %bb.220:                              # %lor.lhs.false1727
                                        #   in Loop: Header=BB35_218 Depth=3
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB35_223
# %bb.221:                              # %land.lhs.true1729
                                        #   in Loop: Header=BB35_218 Depth=3
	movq	-192(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB35_223
.LBB35_222:                             # %if.then1731
                                        #   in Loop: Header=BB35_218 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB35_224
.LBB35_223:                             # %if.else1740
                                        #   in Loop: Header=BB35_218 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB35_224:                             # %if.end1749
                                        #   in Loop: Header=BB35_218 Depth=3
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -140(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB35_226
# %bb.225:                              # %if.then1752
                                        #   in Loop: Header=BB35_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -44(%rbp)
	jmp	.LBB35_230
.LBB35_226:                             # %if.else1761
                                        #   in Loop: Header=BB35_218 Depth=3
	cmpl	$1, -124(%rbp)
	jne	.LBB35_228
# %bb.227:                              # %if.then1764
                                        #   in Loop: Header=BB35_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-180(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB35_229
.LBB35_228:                             # %if.else1792
                                        #   in Loop: Header=BB35_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-180(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB35_229:                             # %if.end1820
                                        #   in Loop: Header=BB35_218 Depth=3
	jmp	.LBB35_230
.LBB35_230:                             # %if.end1821
                                        #   in Loop: Header=BB35_218 Depth=3
	cmpl	$0, -44(%rbp)
	je	.LBB35_248
# %bb.231:                              # %if.then1824
                                        #   in Loop: Header=BB35_218 Depth=3
	movl	-116(%rbp), %eax
	addl	-200(%rbp), %eax
	cltq
	shlq	$2, %rax
	movabsq	$cbp_blk_chroma, %rcx
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $rcx
	movl	$1, %eax
	shlq	%cl, %rax
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	cmpl	$1, -44(%rbp)
	jg	.LBB35_233
# %bb.232:                              # %lor.lhs.false1837
                                        #   in Loop: Header=BB35_218 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB35_234
.LBB35_233:                             # %if.then1839
                                        #   in Loop: Header=BB35_218 Depth=3
	movl	-196(%rbp), %eax
	addl	$999999, %eax           # imm = 0xF423F
	movl	%eax, -196(%rbp)
	jmp	.LBB35_235
.LBB35_234:                             # %if.else1841
                                        #   in Loop: Header=BB35_218 Depth=3
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-100(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	-196(%rbp), %eax
	movl	%eax, -196(%rbp)
.LBB35_235:                             # %if.end1848
                                        #   in Loop: Header=BB35_218 Depth=3
	movl	$2, -208(%rbp)
	movl	-44(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-232(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-392(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	$-1, -100(%rbp)
	movl	-44(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -44(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB35_237
# %bb.236:                              # %if.then1871
                                        #   in Loop: Header=BB35_218 Depth=3
	movl	-44(%rbp), %eax
	movl	%eax, -140(%rbp)
	jmp	.LBB35_247
.LBB35_237:                             # %if.else1872
                                        #   in Loop: Header=BB35_218 Depth=3
	cmpl	$4, -40(%rbp)
	jge	.LBB35_242
# %bb.238:                              # %if.then1875
                                        #   in Loop: Header=BB35_218 Depth=3
	cmpl	$1, -124(%rbp)
	jne	.LBB35_240
# %bb.239:                              # %if.then1878
                                        #   in Loop: Header=BB35_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -140(%rbp)
	jmp	.LBB35_241
.LBB35_240:                             # %if.else1893
                                        #   in Loop: Header=BB35_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -140(%rbp)
.LBB35_241:                             # %if.end1908
                                        #   in Loop: Header=BB35_218 Depth=3
	jmp	.LBB35_246
.LBB35_242:                             # %if.else1909
                                        #   in Loop: Header=BB35_218 Depth=3
	cmpl	$1, -124(%rbp)
	jne	.LBB35_244
# %bb.243:                              # %if.then1912
                                        #   in Loop: Header=BB35_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -140(%rbp)
	jmp	.LBB35_245
.LBB35_244:                             # %if.else1924
                                        #   in Loop: Header=BB35_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -140(%rbp)
.LBB35_245:                             # %if.end1936
                                        #   in Loop: Header=BB35_218 Depth=3
	jmp	.LBB35_246
.LBB35_246:                             # %if.end1937
                                        #   in Loop: Header=BB35_218 Depth=3
	jmp	.LBB35_247
.LBB35_247:                             # %if.end1938
                                        #   in Loop: Header=BB35_218 Depth=3
	jmp	.LBB35_248
.LBB35_248:                             # %if.end1939
                                        #   in Loop: Header=BB35_218 Depth=3
	cmpl	$0, -108(%rbp)
	jne	.LBB35_250
# %bb.249:                              # %if.then1941
                                        #   in Loop: Header=BB35_218 Depth=3
	movl	-140(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB35_250:                             # %if.end1949
                                        #   in Loop: Header=BB35_218 Depth=3
	jmp	.LBB35_251
.LBB35_251:                             # %for.inc1950
                                        #   in Loop: Header=BB35_218 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB35_218
.LBB35_252:                             # %for.end1952
                                        #   in Loop: Header=BB35_216 Depth=2
	movq	-232(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.253:                              # %for.inc1955
                                        #   in Loop: Header=BB35_216 Depth=2
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB35_216
.LBB35_254:                             # %for.end1957
                                        #   in Loop: Header=BB35_214 Depth=1
	jmp	.LBB35_255
.LBB35_255:                             # %for.inc1958
                                        #   in Loop: Header=BB35_214 Depth=1
	movl	-116(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB35_214
.LBB35_256:                             # %for.end1960
	cmpl	$4, -196(%rbp)
	jge	.LBB35_278
# %bb.257:                              # %land.lhs.true1963
	cmpl	$0, -108(%rbp)
	jne	.LBB35_278
# %bb.258:                              # %if.then1965
	movl	$0, -208(%rbp)
	movl	$0, -116(%rbp)
.LBB35_259:                             # %for.cond1966
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_261 Depth 2
                                        #       Child Loop BB35_265 Depth 3
	movl	-116(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB35_277
# %bb.260:                              # %for.body1971
                                        #   in Loop: Header=BB35_259 Depth=1
	movl	$0, -112(%rbp)
.LBB35_261:                             # %for.cond1972
                                        #   Parent Loop BB35_259 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB35_265 Depth 3
	cmpl	$4, -112(%rbp)
	jge	.LBB35_275
# %bb.262:                              # %for.body1975
                                        #   in Loop: Header=BB35_261 Depth=2
	movslq	-144(%rbp), %rax
	shlq	$4, %rax
	movabsq	$hor_offset, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -24(%rbp)
	movslq	-144(%rbp), %rax
	shlq	$4, %rax
	movabsq	$ver_offset, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$4, %ecx
	addl	-200(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -232(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$4, %ecx
	addl	-200(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -392(%rbp)
	cmpl	$0, -204(%rbp)
	jne	.LBB35_264
# %bb.263:                              # %if.then2008
                                        #   in Loop: Header=BB35_261 Depth=2
	movslq	-144(%rbp), %rax
	movq	-432(%rbp,%rax,8), %rax
	movl	-20(%rbp), %edx
	movl	-144(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $rcx
	shlq	%cl, %rax
	xorq	$-1, %rax
	movq	-192(%rbp), %rcx
	andq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
.LBB35_264:                             # %if.end2016
                                        #   in Loop: Header=BB35_261 Depth=2
	movq	-232(%rbp), %rax
	movl	$0, (%rax)
	movl	$1, -36(%rbp)
.LBB35_265:                             # %for.cond2018
                                        #   Parent Loop BB35_259 Depth=1
                                        #     Parent Loop BB35_261 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -36(%rbp)
	jge	.LBB35_273
# %bb.266:                              # %for.body2021
                                        #   in Loop: Header=BB35_265 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB35_269
# %bb.267:                              # %lor.lhs.false2024
                                        #   in Loop: Header=BB35_265 Depth=3
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB35_270
# %bb.268:                              # %land.lhs.true2027
                                        #   in Loop: Header=BB35_265 Depth=3
	movq	-192(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB35_270
.LBB35_269:                             # %if.then2030
                                        #   in Loop: Header=BB35_265 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB35_271
.LBB35_270:                             # %if.else2039
                                        #   in Loop: Header=BB35_265 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB35_271:                             # %if.end2048
                                        #   in Loop: Header=BB35_265 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	$0, (%rax,%rcx,4)
	movq	-232(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.272:                              # %for.inc2058
                                        #   in Loop: Header=BB35_265 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB35_265
.LBB35_273:                             # %for.end2060
                                        #   in Loop: Header=BB35_261 Depth=2
	jmp	.LBB35_274
.LBB35_274:                             # %for.inc2061
                                        #   in Loop: Header=BB35_261 Depth=2
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB35_261
.LBB35_275:                             # %for.end2063
                                        #   in Loop: Header=BB35_259 Depth=1
	jmp	.LBB35_276
.LBB35_276:                             # %for.inc2064
                                        #   in Loop: Header=BB35_259 Depth=1
	movl	-116(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB35_259
.LBB35_277:                             # %for.end2066
	jmp	.LBB35_278
.LBB35_278:                             # %if.end2067
	cmpl	$2, -208(%rbp)
	jne	.LBB35_280
# %bb.279:                              # %if.then2070
	movl	$2, -132(%rbp)
.LBB35_280:                             # %if.end2071
	movl	$0, -28(%rbp)
.LBB35_281:                             # %for.cond2072
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_285 Depth 2
                                        #       Child Loop BB35_287 Depth 3
                                        #         Child Loop BB35_289 Depth 4
                                        #         Child Loop BB35_293 Depth 4
                                        #       Child Loop BB35_299 Depth 3
                                        #         Child Loop BB35_303 Depth 4
                                        #         Child Loop BB35_307 Depth 4
	xorl	%eax, %eax
	movl	-28(%rbp), %ecx
	movq	img, %rdx
	cmpl	72712(%rdx), %ecx
	jge	.LBB35_283
# %bb.282:                              # %land.rhs2076
                                        #   in Loop: Header=BB35_281 Depth=1
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB35_283:                             # %land.end2079
                                        #   in Loop: Header=BB35_281 Depth=1
	testb	$1, %al
	jne	.LBB35_284
	jmp	.LBB35_340
.LBB35_284:                             # %for.body2081
                                        #   in Loop: Header=BB35_281 Depth=1
	movl	$0, -24(%rbp)
.LBB35_285:                             # %for.cond2082
                                        #   Parent Loop BB35_281 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB35_287 Depth 3
                                        #         Child Loop BB35_289 Depth 4
                                        #         Child Loop BB35_293 Depth 4
                                        #       Child Loop BB35_299 Depth 3
                                        #         Child Loop BB35_303 Depth 4
                                        #         Child Loop BB35_307 Depth 4
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB35_338
# %bb.286:                              # %for.body2086
                                        #   in Loop: Header=BB35_285 Depth=2
	movl	$0, -12(%rbp)
.LBB35_287:                             # %for.cond2087
                                        #   Parent Loop BB35_281 Depth=1
                                        #     Parent Loop BB35_285 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB35_289 Depth 4
                                        #         Child Loop BB35_293 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB35_298
# %bb.288:                              # %for.body2090
                                        #   in Loop: Header=BB35_287 Depth=3
	movl	$0, -16(%rbp)
.LBB35_289:                             # %for.cond2091
                                        #   Parent Loop BB35_281 Depth=1
                                        #     Parent Loop BB35_285 Depth=2
                                        #       Parent Loop BB35_287 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB35_292
# %bb.290:                              # %for.body2094
                                        #   in Loop: Header=BB35_289 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.291:                              # %for.inc2104
                                        #   in Loop: Header=BB35_289 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB35_289
.LBB35_292:                             # %for.end2106
                                        #   in Loop: Header=BB35_287 Depth=3
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB35_293:                             # %for.cond2125
                                        #   Parent Loop BB35_281 Depth=1
                                        #     Parent Loop BB35_285 Depth=2
                                        #       Parent Loop BB35_287 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB35_296
# %bb.294:                              # %for.body2128
                                        #   in Loop: Header=BB35_293 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-120(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.295:                              # %for.inc2154
                                        #   in Loop: Header=BB35_293 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB35_293
.LBB35_296:                             # %for.end2156
                                        #   in Loop: Header=BB35_287 Depth=3
	jmp	.LBB35_297
.LBB35_297:                             # %for.inc2157
                                        #   in Loop: Header=BB35_287 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB35_287
.LBB35_298:                             # %for.end2159
                                        #   in Loop: Header=BB35_285 Depth=2
	movl	$0, -16(%rbp)
.LBB35_299:                             # %for.cond2160
                                        #   Parent Loop BB35_281 Depth=1
                                        #     Parent Loop BB35_285 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB35_303 Depth 4
                                        #         Child Loop BB35_307 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB35_301
# %bb.300:                              # %land.rhs2163
                                        #   in Loop: Header=BB35_299 Depth=3
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB35_301:                             # %land.end2166
                                        #   in Loop: Header=BB35_299 Depth=3
	testb	$1, %al
	jne	.LBB35_302
	jmp	.LBB35_336
.LBB35_302:                             # %for.body2168
                                        #   in Loop: Header=BB35_299 Depth=3
	movl	$0, -12(%rbp)
.LBB35_303:                             # %for.cond2169
                                        #   Parent Loop BB35_281 Depth=1
                                        #     Parent Loop BB35_285 Depth=2
                                        #       Parent Loop BB35_299 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB35_306
# %bb.304:                              # %for.body2172
                                        #   in Loop: Header=BB35_303 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.305:                              # %for.inc2182
                                        #   in Loop: Header=BB35_303 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB35_303
.LBB35_306:                             # %for.end2184
                                        #   in Loop: Header=BB35_299 Depth=3
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB35_307:                             # %for.cond2203
                                        #   Parent Loop BB35_281 Depth=1
                                        #     Parent Loop BB35_285 Depth=2
                                        #       Parent Loop BB35_299 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB35_334
# %bb.308:                              # %for.body2206
                                        #   in Loop: Header=BB35_307 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB35_328
# %bb.309:                              # %if.then2209
                                        #   in Loop: Header=BB35_307 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72688(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-72(%rbp), %rsi
	addl	-96(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-24(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-28(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB35_311
# %bb.310:                              # %cond.true2230
                                        #   in Loop: Header=BB35_307 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB35_312
.LBB35_311:                             # %cond.false2231
                                        #   in Loop: Header=BB35_307 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-72(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB35_312:                             # %cond.end2250
                                        #   in Loop: Header=BB35_307 Depth=4
	cmpq	%rcx, %rax
	jge	.LBB35_314
# %bb.313:                              # %cond.true2254
                                        #   in Loop: Header=BB35_307 Depth=4
	movq	img, %rax
	movslq	72688(%rax), %rax
	jmp	.LBB35_318
.LBB35_314:                             # %cond.false2257
                                        #   in Loop: Header=BB35_307 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-72(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB35_316
# %bb.315:                              # %cond.true2278
                                        #   in Loop: Header=BB35_307 Depth=4
	xorl	%eax, %eax
	jmp	.LBB35_317
.LBB35_316:                             # %cond.false2279
                                        #   in Loop: Header=BB35_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB35_317:                             # %cond.end2298
                                        #   in Loop: Header=BB35_307 Depth=4
.LBB35_318:                             # %cond.end2300
                                        #   in Loop: Header=BB35_307 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movslq	72688(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-72(%rbp), %rsi
	subl	-96(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-24(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-28(%rbp), %edi
	addl	-72(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB35_320
# %bb.319:                              # %cond.true2332
                                        #   in Loop: Header=BB35_307 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB35_321
.LBB35_320:                             # %cond.false2333
                                        #   in Loop: Header=BB35_307 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-72(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-72(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB35_321:                             # %cond.end2352
                                        #   in Loop: Header=BB35_307 Depth=4
	cmpq	%rcx, %rax
	jge	.LBB35_323
# %bb.322:                              # %cond.true2356
                                        #   in Loop: Header=BB35_307 Depth=4
	movq	img, %rax
	movslq	72688(%rax), %rax
	jmp	.LBB35_327
.LBB35_323:                             # %cond.false2359
                                        #   in Loop: Header=BB35_307 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-72(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-72(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB35_325
# %bb.324:                              # %cond.true2380
                                        #   in Loop: Header=BB35_307 Depth=4
	xorl	%eax, %eax
	jmp	.LBB35_326
.LBB35_325:                             # %cond.false2381
                                        #   in Loop: Header=BB35_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB35_326:                             # %cond.end2400
                                        #   in Loop: Header=BB35_307 Depth=4
.LBB35_327:                             # %cond.end2402
                                        #   in Loop: Header=BB35_307 Depth=4
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB35_332
.LBB35_328:                             # %if.else2412
                                        #   in Loop: Header=BB35_307 Depth=4
	cmpl	$0, -108(%rbp)
	je	.LBB35_330
# %bb.329:                              # %if.then2414
                                        #   in Loop: Header=BB35_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB35_331
.LBB35_330:                             # %if.else2439
                                        #   in Loop: Header=BB35_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB35_331:                             # %if.end2468
                                        #   in Loop: Header=BB35_307 Depth=4
	jmp	.LBB35_332
.LBB35_332:                             # %if.end2469
                                        #   in Loop: Header=BB35_307 Depth=4
	jmp	.LBB35_333
.LBB35_333:                             # %for.inc2470
                                        #   in Loop: Header=BB35_307 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB35_307
.LBB35_334:                             # %for.end2472
                                        #   in Loop: Header=BB35_299 Depth=3
	jmp	.LBB35_335
.LBB35_335:                             # %for.inc2473
                                        #   in Loop: Header=BB35_299 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB35_299
.LBB35_336:                             # %for.end2475
                                        #   in Loop: Header=BB35_285 Depth=2
	jmp	.LBB35_337
.LBB35_337:                             # %for.inc2476
                                        #   in Loop: Header=BB35_285 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB35_285
.LBB35_338:                             # %for.end2478
                                        #   in Loop: Header=BB35_281 Depth=1
	jmp	.LBB35_339
.LBB35_339:                             # %for.inc2479
                                        #   in Loop: Header=BB35_281 Depth=1
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB35_281
.LBB35_340:                             # %for.end2481
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB35_353
# %bb.341:                              # %if.then2484
	movl	$0, -12(%rbp)
.LBB35_342:                             # %for.cond2485
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_344 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB35_352
# %bb.343:                              # %for.body2489
                                        #   in Loop: Header=BB35_342 Depth=1
	movl	$0, -16(%rbp)
.LBB35_344:                             # %for.cond2490
                                        #   Parent Loop BB35_342 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB35_350
# %bb.345:                              # %for.body2494
                                        #   in Loop: Header=BB35_344 Depth=2
	cmpl	$0, -108(%rbp)
	je	.LBB35_347
# %bb.346:                              # %if.then2496
                                        #   in Loop: Header=BB35_344 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB35_348
.LBB35_347:                             # %if.else2518
                                        #   in Loop: Header=BB35_344 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB35_348:                             # %if.end2536
                                        #   in Loop: Header=BB35_344 Depth=2
	jmp	.LBB35_349
.LBB35_349:                             # %for.inc2537
                                        #   in Loop: Header=BB35_344 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB35_344
.LBB35_350:                             # %for.end2539
                                        #   in Loop: Header=BB35_342 Depth=1
	jmp	.LBB35_351
.LBB35_351:                             # %for.inc2540
                                        #   in Loop: Header=BB35_342 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB35_342
.LBB35_352:                             # %for.end2542
	jmp	.LBB35_353
.LBB35_353:                             # %if.end2543
	movl	-132(%rbp), %ebx
	cmpl	$1197208689, -380(%rbp) # imm = 0x475BF471
	jne	.LBB35_355
.LBB35_354:
	movl	%ebx, %eax
	addq	$424, %rsp              # imm = 0x1A8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_355:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB35_354
.Lfunc_end35:
	.size	dct_chroma.26, .Lfunc_end35-dct_chroma.26
	.cfi_endproc
                                        # -- End function
	.globl	intrapred_luma.27       # -- Begin function intrapred_luma.27
	.p2align	4, 0x90
	.type	intrapred_luma.27,@function
intrapred_luma.27:                      # @intrapred_luma.27
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$320, %rsp              # imm = 0x140
	movl	$711608785, -172(%rbp)  # imm = 0x2A6A49D1
	movl	%edi, -108(%rbp)
	movl	%esi, -116(%rbp)
	movq	%rdx, -224(%rbp)
	movq	%rcx, -184(%rbp)
	movq	%r8, -216(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	-108(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -88(%rbp)
	movl	-116(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -104(%rbp)
	movl	$0, -4(%rbp)
.LBB36_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB36_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB36_1 Depth=1
	movl	-104(%rbp), %edi
	movl	-88(%rbp), %esi
	subl	$1, %esi
	movl	-84(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-320(%rbp), %r8
	addq	%rax, %r8
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB36_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_1
.LBB36_4:                               # %for.end
	movl	-104(%rbp), %edi
	movl	-88(%rbp), %esi
	movl	-84(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-168(%rbp), %r8
	callq	getNeighbour
	movl	-104(%rbp), %edi
	movl	-88(%rbp), %esi
	addl	$4, %esi
	movl	-84(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-144(%rbp), %r8
	callq	getNeighbour
	movl	-104(%rbp), %edi
	movl	-88(%rbp), %esi
	subl	$1, %esi
	movl	-84(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-208(%rbp), %r8
	callq	getNeighbour
	xorl	%eax, %eax
	cmpl	$0, -144(%rbp)
	je	.LBB36_11
# %bb.5:                                # %land.rhs
	cmpl	$4, -88(%rbp)
	je	.LBB36_7
# %bb.6:                                # %lor.lhs.false
	xorl	%eax, %eax
	cmpl	$12, -88(%rbp)
	jne	.LBB36_10
.LBB36_7:                               # %land.rhs10
	cmpl	$4, -84(%rbp)
	movb	$1, %al
	je	.LBB36_9
# %bb.8:                                # %lor.rhs
	cmpl	$12, -84(%rbp)
	sete	%al
.LBB36_9:                               # %lor.end
.LBB36_10:                              # %land.end
	xorb	$-1, %al
.LBB36_11:                              # %land.end13
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -144(%rbp)
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB36_29
# %bb.12:                               # %if.then
	movl	$0, -4(%rbp)
	movl	$1, -68(%rbp)
.LBB36_13:                              # %for.cond16
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB36_19
# %bb.14:                               # %for.body18
                                        #   in Loop: Header=BB36_13 Depth=1
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB36_16
# %bb.15:                               # %cond.true
                                        #   in Loop: Header=BB36_13 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB36_17
.LBB36_16:                              # %cond.false
                                        #   in Loop: Header=BB36_13 Depth=1
	xorl	%eax, %eax
	jmp	.LBB36_17
.LBB36_17:                              # %cond.end
                                        #   in Loop: Header=BB36_13 Depth=1
	andl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.18:                               # %for.inc28
                                        #   in Loop: Header=BB36_13 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_13
.LBB36_19:                              # %for.end30
	cmpl	$0, -168(%rbp)
	je	.LBB36_21
# %bb.20:                               # %cond.true33
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-164(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB36_22
.LBB36_21:                              # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB36_22
.LBB36_22:                              # %cond.end39
	movl	%eax, -72(%rbp)
	cmpl	$0, -144(%rbp)
	je	.LBB36_24
# %bb.23:                               # %cond.true43
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-140(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB36_25
.LBB36_24:                              # %cond.false48
	xorl	%eax, %eax
	jmp	.LBB36_25
.LBB36_25:                              # %cond.end49
	movl	%eax, -112(%rbp)
	cmpl	$0, -208(%rbp)
	je	.LBB36_27
# %bb.26:                               # %cond.true53
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-204(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB36_28
.LBB36_27:                              # %cond.false58
	xorl	%eax, %eax
	jmp	.LBB36_28
.LBB36_28:                              # %cond.end59
	movl	%eax, -100(%rbp)
	jmp	.LBB36_30
.LBB36_29:                              # %if.else
	movl	-320(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-168(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-144(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-208(%rbp), %eax
	movl	%eax, -100(%rbp)
.LBB36_30:                              # %if.end
	xorl	%eax, %eax
	movl	-68(%rbp), %ecx
	movq	-224(%rbp), %rdx
	movl	%ecx, (%rdx)
	movl	-72(%rbp), %ecx
	movq	-184(%rbp), %rdx
	movl	%ecx, (%rdx)
	cmpl	$0, -72(%rbp)
	je	.LBB36_33
# %bb.31:                               # %land.lhs.true
	xorl	%eax, %eax
	cmpl	$0, -68(%rbp)
	je	.LBB36_33
# %bb.32:                               # %land.rhs68
	cmpl	$0, -100(%rbp)
	setne	%al
.LBB36_33:                              # %land.end70
	andb	$1, %al
	movzbl	%al, %eax
	movq	-216(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-108(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -4(%rbp)
	movl	-116(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -92(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB36_35
# %bb.34:                               # %if.then75
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -60(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -56(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -52(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB36_36
.LBB36_35:                              # %if.else109
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -48(%rbp)
	movl	%eax, -52(%rbp)
	movl	%eax, -56(%rbp)
	movl	%eax, -60(%rbp)
.LBB36_36:                              # %if.end114
	cmpl	$0, -112(%rbp)
	je	.LBB36_38
# %bb.37:                               # %if.then116
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -44(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -40(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -36(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB36_39
.LBB36_38:                              # %if.else153
	movl	-48(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	%eax, -36(%rbp)
	movl	%eax, -40(%rbp)
	movl	%eax, -44(%rbp)
.LBB36_39:                              # %if.end159
	cmpl	$0, -68(%rbp)
	je	.LBB36_41
# %bb.40:                               # %if.then161
	movq	-80(%rbp), %rax
	movslq	-300(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-304(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -28(%rbp)
	movq	-80(%rbp), %rax
	movslq	-276(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-280(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-80(%rbp), %rax
	movslq	-252(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-256(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-80(%rbp), %rax
	movslq	-228(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-232(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB36_42
.LBB36_41:                              # %if.else202
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -16(%rbp)
	movl	%eax, -20(%rbp)
	movl	%eax, -24(%rbp)
	movl	%eax, -28(%rbp)
.LBB36_42:                              # %if.end208
	cmpl	$0, -100(%rbp)
	je	.LBB36_44
# %bb.43:                               # %if.then210
	movq	-80(%rbp), %rax
	movslq	-188(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-192(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB36_45
.LBB36_44:                              # %if.else219
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -64(%rbp)
.LBB36_45:                              # %if.end222
	movl	$0, -4(%rbp)
.LBB36_46:                              # %for.cond223
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$9, -4(%rbp)
	jge	.LBB36_49
# %bb.47:                               # %for.body226
                                        #   in Loop: Header=BB36_46 Depth=1
	movq	img, %rax
	addq	$184, %rax
	movslq	-4(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movw	$-1, (%rax)
# %bb.48:                               # %for.inc231
                                        #   in Loop: Header=BB36_46 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_46
.LBB36_49:                              # %for.end233
	movl	$0, -96(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB36_52
# %bb.50:                               # %land.lhs.true235
	cmpl	$0, -68(%rbp)
	je	.LBB36_52
# %bb.51:                               # %if.then237
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$4, %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	movl	%eax, -96(%rbp)
	jmp	.LBB36_61
.LBB36_52:                              # %if.else254
	cmpl	$0, -72(%rbp)
	jne	.LBB36_55
# %bb.53:                               # %land.lhs.true256
	cmpl	$0, -68(%rbp)
	je	.LBB36_55
# %bb.54:                               # %if.then258
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -96(%rbp)
	jmp	.LBB36_60
.LBB36_55:                              # %if.else268
	cmpl	$0, -72(%rbp)
	je	.LBB36_58
# %bb.56:                               # %land.lhs.true270
	cmpl	$0, -68(%rbp)
	jne	.LBB36_58
# %bb.57:                               # %if.then272
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -96(%rbp)
	jmp	.LBB36_59
.LBB36_58:                              # %if.else282
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -96(%rbp)
.LBB36_59:                              # %if.end284
	jmp	.LBB36_60
.LBB36_60:                              # %if.end285
	jmp	.LBB36_61
.LBB36_61:                              # %if.end286
	movl	$0, -92(%rbp)
.LBB36_62:                              # %for.cond287
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_64 Depth 2
	cmpl	$4, -92(%rbp)
	jge	.LBB36_69
# %bb.63:                               # %for.body290
                                        #   in Loop: Header=BB36_62 Depth=1
	movl	$0, -4(%rbp)
.LBB36_64:                              # %for.cond291
                                        #   Parent Loop BB36_62 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB36_67
# %bb.65:                               # %for.body294
                                        #   in Loop: Header=BB36_64 Depth=2
	movl	-96(%rbp), %eax
	movq	img, %rcx
	addq	$184, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-92(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.66:                               # %for.inc302
                                        #   in Loop: Header=BB36_64 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_64
.LBB36_67:                              # %for.end304
                                        #   in Loop: Header=BB36_62 Depth=1
	jmp	.LBB36_68
.LBB36_68:                              # %for.inc305
                                        #   in Loop: Header=BB36_62 Depth=1
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB36_62
.LBB36_69:                              # %for.end307
	movl	$0, -4(%rbp)
.LBB36_70:                              # %for.cond308
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB36_73
# %bb.71:                               # %for.body311
                                        #   in Loop: Header=BB36_70 Depth=1
	movslq	-4(%rbp), %rax
	movl	-60(%rbp,%rax,4), %eax
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 280(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 248(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 216(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 184(%rcx,%rdx,2)
	movslq	-4(%rbp), %rax
	movl	-28(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 6(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 4(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, (%rcx)
# %bb.72:                               # %for.inc360
                                        #   in Loop: Header=BB36_70 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_70
.LBB36_73:                              # %for.end362
	cmpl	$0, -72(%rbp)
	jne	.LBB36_75
# %bb.74:                               # %if.then364
	movq	img, %rax
	movw	$-1, 184(%rax)
.LBB36_75:                              # %if.end369
	cmpl	$0, -68(%rbp)
	jne	.LBB36_77
# %bb.76:                               # %if.then371
	movq	img, %rax
	movw	$-1, 696(%rax)
.LBB36_77:                              # %if.end376
	cmpl	$0, -72(%rbp)
	je	.LBB36_79
# %bb.78:                               # %if.then378
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1720(%rdx)
	movl	-56(%rbp), %eax
	addl	-48(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1752(%rdx)
	movq	img, %rdx
	movw	%ax, 1722(%rdx)
	movl	-52(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	-48(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1784(%rdx)
	movq	img, %rdx
	movw	%ax, 1754(%rdx)
	movq	img, %rdx
	movw	%ax, 1724(%rdx)
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	-44(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1816(%rdx)
	movq	img, %rdx
	movw	%ax, 1786(%rdx)
	movq	img, %rdx
	movw	%ax, 1756(%rdx)
	movq	img, %rdx
	movw	%ax, 1726(%rdx)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	-40(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1818(%rdx)
	movq	img, %rdx
	movw	%ax, 1788(%rdx)
	movq	img, %rdx
	movw	%ax, 1758(%rdx)
	movl	-40(%rbp), %eax
	addl	-32(%rbp), %eax
	movl	-36(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1820(%rdx)
	movq	img, %rdx
	movw	%ax, 1790(%rdx)
	movl	-36(%rbp), %eax
	imull	$3, -32(%rbp), %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1822(%rdx)
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3768(%rdx)
	movl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3832(%rdx)
	movq	img, %rdx
	movw	%ax, 3770(%rdx)
	movl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3834(%rdx)
	movq	img, %rdx
	movw	%ax, 3772(%rdx)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3836(%rdx)
	movq	img, %rdx
	movw	%ax, 3774(%rdx)
	movl	-44(%rbp), %eax
	addl	-40(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3838(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3800(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3864(%rdx)
	movq	img, %rdx
	movw	%ax, 3802(%rdx)
	movl	-52(%rbp), %eax
	movl	-48(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-44(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3866(%rdx)
	movq	img, %rdx
	movw	%ax, 3804(%rdx)
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-40(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3868(%rdx)
	movq	img, %rdx
	movw	%ax, 3806(%rdx)
	movl	-44(%rbp), %eax
	movl	-40(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-36(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 3870(%rcx)
.LBB36_79:                              # %if.end642
	cmpl	$0, -68(%rbp)
	je	.LBB36_81
# %bb.80:                               # %if.then644
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rcx
	movw	%ax, 4280(%rcx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 4282(%rdx)
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 4312(%rdx)
	movq	img, %rdx
	movw	%ax, 4284(%rdx)
	movl	-24(%rbp), %eax
	movl	-20(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 4314(%rdx)
	movq	img, %rdx
	movw	%ax, 4286(%rdx)
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 4344(%rdx)
	movq	img, %rdx
	movw	%ax, 4316(%rdx)
	movl	-20(%rbp), %eax
	movl	-16(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 4346(%rcx)
	movq	img, %rcx
	movw	%ax, 4318(%rcx)
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movw	%ax, 4382(%rcx)
	movq	img, %rcx
	movw	%ax, 4380(%rcx)
	movq	img, %rcx
	movw	%ax, 4378(%rcx)
	movq	img, %rcx
	movw	%ax, 4350(%rcx)
	movq	img, %rcx
	movw	%ax, 4348(%rcx)
	movq	img, %rcx
	movw	%ax, 4376(%rcx)
.LBB36_81:                              # %if.end756
	cmpl	$0, -72(%rbp)
	je	.LBB36_85
# %bb.82:                               # %land.lhs.true758
	cmpl	$0, -68(%rbp)
	je	.LBB36_85
# %bb.83:                               # %land.lhs.true760
	cmpl	$0, -100(%rbp)
	je	.LBB36_85
# %bb.84:                               # %if.then762
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2328(%rdx)
	movl	-20(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-28(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2330(%rdx)
	movq	img, %rdx
	movw	%ax, 2296(%rdx)
	movl	-24(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-64(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2332(%rdx)
	movq	img, %rdx
	movw	%ax, 2298(%rdx)
	movq	img, %rdx
	movw	%ax, 2264(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2334(%rdx)
	movq	img, %rdx
	movw	%ax, 2300(%rdx)
	movq	img, %rdx
	movw	%ax, 2266(%rdx)
	movq	img, %rdx
	movw	%ax, 2232(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2302(%rdx)
	movq	img, %rdx
	movw	%ax, 2268(%rdx)
	movq	img, %rdx
	movw	%ax, 2234(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2270(%rdx)
	movq	img, %rdx
	movw	%ax, 2236(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2238(%rdx)
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2810(%rdx)
	movq	img, %rdx
	movw	%ax, 2744(%rdx)
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2812(%rdx)
	movq	img, %rdx
	movw	%ax, 2746(%rdx)
	movl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2814(%rdx)
	movq	img, %rdx
	movw	%ax, 2748(%rdx)
	movl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2750(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2842(%rdx)
	movq	img, %rdx
	movw	%ax, 2776(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2844(%rdx)
	movq	img, %rdx
	movw	%ax, 2778(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2846(%rdx)
	movq	img, %rdx
	movw	%ax, 2780(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2782(%rdx)
	movl	-64(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2808(%rdx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2840(%rdx)
	movl	-64(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3292(%rdx)
	movq	img, %rdx
	movw	%ax, 3256(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3294(%rdx)
	movq	img, %rdx
	movw	%ax, 3258(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3260(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3262(%rdx)
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3324(%rdx)
	movq	img, %rdx
	movw	%ax, 3288(%rdx)
	movl	-64(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3326(%rdx)
	movq	img, %rdx
	movw	%ax, 3290(%rdx)
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3356(%rdx)
	movq	img, %rdx
	movw	%ax, 3320(%rdx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3358(%rdx)
	movq	img, %rdx
	movw	%ax, 3322(%rdx)
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3352(%rdx)
	movl	-24(%rbp), %eax
	movl	-20(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 3354(%rcx)
.LBB36_85:                              # %if.end1174
	cmpl	$711608785, -172(%rbp)  # imm = 0x2A6A49D1
	jne	.LBB36_87
.LBB36_86:
	addq	$320, %rsp              # imm = 0x140
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_87:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB36_86
.Lfunc_end36:
	.size	intrapred_luma.27, .Lfunc_end36-intrapred_luma.27
	.cfi_endproc
                                        # -- End function
	.globl	intrapred_luma_16x16.28 # -- Begin function intrapred_luma_16x16.28
	.p2align	4, 0x90
	.type	intrapred_luma_16x16.28,@function
intrapred_luma_16x16.28:                # @intrapred_luma_16x16.28
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$640, %rsp              # imm = 0x280
	movl	$1584269144, -92(%rbp)  # imm = 0x5E6E0758
	movl	$0, -32(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB37_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -4(%rbp)
	jge	.LBB37_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB37_1 Depth=1
	movl	-64(%rbp), %edi
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-512(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB37_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_1
.LBB37_4:                               # %for.end
	movl	-64(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	leaq	-88(%rbp), %r8
	callq	getNeighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	jne	.LBB37_6
# %bb.5:                                # %if.then
	movl	-88(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	-488(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-512(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB37_20
.LBB37_6:                               # %if.else
	cmpl	$0, -88(%rbp)
	je	.LBB37_8
# %bb.7:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-84(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB37_9
.LBB37_8:                               # %cond.false
	xorl	%eax, %eax
	jmp	.LBB37_9
.LBB37_9:                               # %cond.end
	movl	%eax, -16(%rbp)
	movl	$1, -4(%rbp)
	movl	$1, -12(%rbp)
.LBB37_10:                              # %for.cond9
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -4(%rbp)
	jge	.LBB37_16
# %bb.11:                               # %for.body11
                                        #   in Loop: Header=BB37_10 Depth=1
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-512(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB37_13
# %bb.12:                               # %cond.true16
                                        #   in Loop: Header=BB37_10 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB37_14
.LBB37_13:                              # %cond.false23
                                        #   in Loop: Header=BB37_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB37_14
.LBB37_14:                              # %cond.end24
                                        #   in Loop: Header=BB37_10 Depth=1
	andl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.15:                               # %for.inc26
                                        #   in Loop: Header=BB37_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_10
.LBB37_16:                              # %for.end28
	cmpl	$0, -512(%rbp)
	je	.LBB37_18
# %bb.17:                               # %cond.true32
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-508(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB37_19
.LBB37_18:                              # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB37_19
.LBB37_19:                              # %cond.end39
	movl	%eax, -60(%rbp)
.LBB37_20:                              # %if.end
	movl	$0, -48(%rbp)
	movl	$0, -44(%rbp)
	movl	$0, -4(%rbp)
.LBB37_21:                              # %for.cond41
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -4(%rbp)
	jge	.LBB37_28
# %bb.22:                               # %for.body43
                                        #   in Loop: Header=BB37_21 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB37_24
# %bb.23:                               # %if.then45
                                        #   in Loop: Header=BB37_21 Depth=1
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB37_24:                              # %if.end51
                                        #   in Loop: Header=BB37_21 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB37_26
# %bb.25:                               # %if.then53
                                        #   in Loop: Header=BB37_21 Depth=1
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB37_26:                              # %if.end68
                                        #   in Loop: Header=BB37_21 Depth=1
	jmp	.LBB37_27
.LBB37_27:                              # %for.inc69
                                        #   in Loop: Header=BB37_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_21
.LBB37_28:                              # %for.end71
	cmpl	$0, -16(%rbp)
	je	.LBB37_31
# %bb.29:                               # %land.lhs.true
	cmpl	$0, -12(%rbp)
	je	.LBB37_31
# %bb.30:                               # %if.then74
	movl	-44(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
	movl	%eax, -32(%rbp)
.LBB37_31:                              # %if.end77
	cmpl	$0, -16(%rbp)
	jne	.LBB37_34
# %bb.32:                               # %land.lhs.true79
	cmpl	$0, -12(%rbp)
	je	.LBB37_34
# %bb.33:                               # %if.then81
	movl	-48(%rbp), %eax
	addl	$8, %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -32(%rbp)
.LBB37_34:                              # %if.end84
	cmpl	$0, -16(%rbp)
	je	.LBB37_37
# %bb.35:                               # %land.lhs.true86
	cmpl	$0, -12(%rbp)
	jne	.LBB37_37
# %bb.36:                               # %if.then88
	movl	-44(%rbp), %eax
	addl	$8, %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -32(%rbp)
.LBB37_37:                              # %if.end91
	cmpl	$0, -16(%rbp)
	jne	.LBB37_40
# %bb.38:                               # %land.lhs.true93
	cmpl	$0, -12(%rbp)
	jne	.LBB37_40
# %bb.39:                               # %if.then95
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -32(%rbp)
.LBB37_40:                              # %if.end96
	movl	$0, -4(%rbp)
.LBB37_41:                              # %for.cond97
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -4(%rbp)
	jge	.LBB37_48
# %bb.42:                               # %for.body100
                                        #   in Loop: Header=BB37_41 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB37_44
# %bb.43:                               # %if.then102
                                        #   in Loop: Header=BB37_41 Depth=1
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -640(%rbp,%rcx,8)
.LBB37_44:                              # %if.end114
                                        #   in Loop: Header=BB37_41 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB37_46
# %bb.45:                               # %if.then116
                                        #   in Loop: Header=BB37_41 Depth=1
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -636(%rbp,%rcx,8)
.LBB37_46:                              # %if.end133
                                        #   in Loop: Header=BB37_41 Depth=1
	jmp	.LBB37_47
.LBB37_47:                              # %for.inc134
                                        #   in Loop: Header=BB37_41 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_41
.LBB37_48:                              # %for.end136
	movl	$0, -8(%rbp)
.LBB37_49:                              # %for.cond137
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_51 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB37_56
# %bb.50:                               # %for.body140
                                        #   in Loop: Header=BB37_49 Depth=1
	movl	$0, -4(%rbp)
.LBB37_51:                              # %for.cond141
                                        #   Parent Loop BB37_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB37_54
# %bb.52:                               # %for.body144
                                        #   in Loop: Header=BB37_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-640(%rbp,%rax,8), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-8(%rbp), %rax
	movl	-636(%rbp,%rax,8), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$512, %rcx              # imm = 0x200
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	-32(%rbp), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$1024, %rcx             # imm = 0x400
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.53:                               # %for.inc171
                                        #   in Loop: Header=BB37_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_51
.LBB37_54:                              # %for.end173
                                        #   in Loop: Header=BB37_49 Depth=1
	jmp	.LBB37_55
.LBB37_55:                              # %for.inc174
                                        #   in Loop: Header=BB37_49 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_49
.LBB37_56:                              # %for.end176
	cmpl	$0, -16(%rbp)
	je	.LBB37_59
# %bb.57:                               # %lor.lhs.false
	cmpl	$0, -12(%rbp)
	je	.LBB37_59
# %bb.58:                               # %lor.lhs.false179
	cmpl	$0, -60(%rbp)
	jne	.LBB37_60
.LBB37_59:                              # %if.then181
	jmp	.LBB37_85
.LBB37_60:                              # %if.end182
	movl	$0, -28(%rbp)
	movl	$0, -56(%rbp)
	movl	$1, -4(%rbp)
.LBB37_61:                              # %for.cond183
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$9, -4(%rbp)
	jge	.LBB37_67
# %bb.62:                               # %for.body186
                                        #   in Loop: Header=BB37_61 Depth=1
	cmpl	$8, -4(%rbp)
	jge	.LBB37_64
# %bb.63:                               # %if.then189
                                        #   in Loop: Header=BB37_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	addl	$7, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-24(%rbp), %rdx
	movslq	-68(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-72(%rbp), %esi
	addl	$7, %esi
	subl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB37_65
.LBB37_64:                              # %if.else210
                                        #   in Loop: Header=BB37_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	addl	$7, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-24(%rbp), %rdx
	movslq	-492(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-496(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB37_65:                              # %if.end232
                                        #   in Loop: Header=BB37_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	leaq	-512(%rbp), %rcx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movslq	20(%rdi), %rdx
	movq	(%rsi,%rdx,8), %rsi
	movl	-4(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movslq	16(%rdi), %rdx
	movzwl	(%rsi,%rdx,2), %r9d
	movq	-24(%rbp), %r8
	movl	$8, %edi
	movl	$8, %edx
	subl	-4(%rbp), %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	20(%rsi), %rdx
	movq	(%r8,%rdx,8), %rdx
	subl	-4(%rbp), %edi
	movslq	%edi, %rsi
	imulq	$24, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	16(%rcx), %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %r9d
	imull	%r9d, %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.66:                               # %for.inc262
                                        #   in Loop: Header=BB37_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_61
.LBB37_67:                              # %for.end264
	imull	$5, -28(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movl	%eax, -36(%rbp)
	imull	$5, -56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movl	%eax, -52(%rbp)
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	$15, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-108(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-112(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	shll	$4, %eax
	movl	%eax, -40(%rbp)
	movl	$0, -8(%rbp)
.LBB37_68:                              # %for.cond289
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_70 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB37_84
# %bb.69:                               # %for.body292
                                        #   in Loop: Header=BB37_68 Depth=1
	movl	$0, -4(%rbp)
.LBB37_70:                              # %for.cond293
                                        #   Parent Loop BB37_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB37_82
# %bb.71:                               # %for.body296
                                        #   in Loop: Header=BB37_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-40(%rbp), %eax
	movl	-4(%rbp), %edx
	subl	$7, %edx
	imull	-36(%rbp), %edx
	addl	%edx, %eax
	movl	-8(%rbp), %edx
	subl	$7, %edx
	imull	-52(%rbp), %edx
	addl	%edx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB37_73
# %bb.72:                               # %cond.true307
                                        #   in Loop: Header=BB37_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB37_74
.LBB37_73:                              # %cond.false309
                                        #   in Loop: Header=BB37_70 Depth=2
	movl	-40(%rbp), %eax
	movl	-4(%rbp), %ecx
	subl	$7, %ecx
	imull	-36(%rbp), %ecx
	addl	%ecx, %eax
	movl	-8(%rbp), %ecx
	subl	$7, %ecx
	imull	-52(%rbp), %ecx
	addl	%ecx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB37_74:                              # %cond.end318
                                        #   in Loop: Header=BB37_70 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB37_76
# %bb.75:                               # %cond.true322
                                        #   in Loop: Header=BB37_70 Depth=2
	xorl	%eax, %eax
	jmp	.LBB37_80
.LBB37_76:                              # %cond.false323
                                        #   in Loop: Header=BB37_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-40(%rbp), %eax
	movl	-4(%rbp), %edx
	subl	$7, %edx
	imull	-36(%rbp), %edx
	addl	%edx, %eax
	movl	-8(%rbp), %edx
	subl	$7, %edx
	imull	-52(%rbp), %edx
	addl	%edx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB37_78
# %bb.77:                               # %cond.true335
                                        #   in Loop: Header=BB37_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB37_79
.LBB37_78:                              # %cond.false337
                                        #   in Loop: Header=BB37_70 Depth=2
	movl	-40(%rbp), %eax
	movl	-4(%rbp), %ecx
	subl	$7, %ecx
	imull	-36(%rbp), %ecx
	addl	%ecx, %eax
	movl	-8(%rbp), %ecx
	subl	$7, %ecx
	imull	-52(%rbp), %ecx
	addl	%ecx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB37_79:                              # %cond.end346
                                        #   in Loop: Header=BB37_70 Depth=2
.LBB37_80:                              # %cond.end348
                                        #   in Loop: Header=BB37_70 Depth=2
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$1536, %rcx             # imm = 0x600
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.81:                               # %for.inc357
                                        #   in Loop: Header=BB37_70 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_70
.LBB37_82:                              # %for.end359
                                        #   in Loop: Header=BB37_68 Depth=1
	jmp	.LBB37_83
.LBB37_83:                              # %for.inc360
                                        #   in Loop: Header=BB37_68 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_68
.LBB37_84:                              # %for.end362.loopexit
	jmp	.LBB37_85
.LBB37_85:                              # %for.end362
	cmpl	$1584269144, -92(%rbp)  # imm = 0x5E6E0758
	jne	.LBB37_87
.LBB37_86:
	addq	$640, %rsp              # imm = 0x280
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_87:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB37_86
.Lfunc_end37:
	.size	intrapred_luma_16x16.28, .Lfunc_end37-intrapred_luma_16x16.28
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma_DC.29        # -- Begin function dct_chroma_DC.29
	.p2align	4, 0x90
	.type	dct_chroma_DC.29,@function
dct_chroma_DC.29:                       # @dct_chroma_DC.29
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1905311500, -44(%rbp)  # imm = 0x7190BF0C
	movl	%edi, -28(%rbp)
	movl	%esi, -20(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$-1, -24(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB38_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB38_9
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB38_1 Depth=1
	movslq	-12(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -36(%rbp)
	movslq	-12(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -40(%rbp)
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movslq	-28(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-40(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -32(%rbp)
	cmpl	$0, -32(%rbp)
	je	.LBB38_7
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB38_1 Depth=1
	movl	$1, %eax
	cmpl	-20(%rbp), %eax
	jle	.LBB38_5
# %bb.4:                                # %cond.true
                                        #   in Loop: Header=BB38_1 Depth=1
	movl	$1, %eax
	jmp	.LBB38_6
.LBB38_5:                               # %cond.false
                                        #   in Loop: Header=BB38_1 Depth=1
	movl	-20(%rbp), %eax
.LBB38_6:                               # %cond.end
                                        #   in Loop: Header=BB38_1 Depth=1
	movl	%eax, -20(%rbp)
	movl	-32(%rbp), %edi
	movslq	-28(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-40(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-56(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-24(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	$-1, -24(%rbp)
.LBB38_7:                               # %if.end
                                        #   in Loop: Header=BB38_1 Depth=1
	jmp	.LBB38_8
.LBB38_8:                               # %for.inc
                                        #   in Loop: Header=BB38_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_1
.LBB38_9:                               # %for.end
	movq	-56(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-20(%rbp), %ebx
	cmpl	$1905311500, -44(%rbp)  # imm = 0x7190BF0C
	jne	.LBB38_11
.LBB38_10:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_11:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB38_10
.Lfunc_end38:
	.size	dct_chroma_DC.29, .Lfunc_end38-dct_chroma_DC.29
	.cfi_endproc
                                        # -- End function
	.globl	intrapred_luma.30       # -- Begin function intrapred_luma.30
	.p2align	4, 0x90
	.type	intrapred_luma.30,@function
intrapred_luma.30:                      # @intrapred_luma.30
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$320, %rsp              # imm = 0x140
	movl	$887497953, -172(%rbp)  # imm = 0x34E624E1
	movl	%edi, -108(%rbp)
	movl	%esi, -116(%rbp)
	movq	%rdx, -216(%rbp)
	movq	%rcx, -224(%rbp)
	movq	%r8, -208(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	-108(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -88(%rbp)
	movl	-116(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -100(%rbp)
	movl	$0, -4(%rbp)
.LBB39_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB39_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB39_1 Depth=1
	movl	-100(%rbp), %edi
	movl	-88(%rbp), %esi
	subl	$1, %esi
	movl	-84(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-320(%rbp), %r8
	addq	%rax, %r8
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB39_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_1
.LBB39_4:                               # %for.end
	movl	-100(%rbp), %edi
	movl	-88(%rbp), %esi
	movl	-84(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-168(%rbp), %r8
	callq	getNeighbour
	movl	-100(%rbp), %edi
	movl	-88(%rbp), %esi
	addl	$4, %esi
	movl	-84(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-144(%rbp), %r8
	callq	getNeighbour
	movl	-100(%rbp), %edi
	movl	-88(%rbp), %esi
	subl	$1, %esi
	movl	-84(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-200(%rbp), %r8
	callq	getNeighbour
	xorl	%eax, %eax
	cmpl	$0, -144(%rbp)
	je	.LBB39_11
# %bb.5:                                # %land.rhs
	cmpl	$4, -88(%rbp)
	je	.LBB39_7
# %bb.6:                                # %lor.lhs.false
	xorl	%eax, %eax
	cmpl	$12, -88(%rbp)
	jne	.LBB39_10
.LBB39_7:                               # %land.rhs10
	cmpl	$4, -84(%rbp)
	movb	$1, %al
	je	.LBB39_9
# %bb.8:                                # %lor.rhs
	cmpl	$12, -84(%rbp)
	sete	%al
.LBB39_9:                               # %lor.end
.LBB39_10:                              # %land.end
	xorb	$-1, %al
.LBB39_11:                              # %land.end13
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -144(%rbp)
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB39_29
# %bb.12:                               # %if.then
	movl	$0, -4(%rbp)
	movl	$1, -68(%rbp)
.LBB39_13:                              # %for.cond16
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB39_19
# %bb.14:                               # %for.body18
                                        #   in Loop: Header=BB39_13 Depth=1
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB39_16
# %bb.15:                               # %cond.true
                                        #   in Loop: Header=BB39_13 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB39_17
.LBB39_16:                              # %cond.false
                                        #   in Loop: Header=BB39_13 Depth=1
	xorl	%eax, %eax
	jmp	.LBB39_17
.LBB39_17:                              # %cond.end
                                        #   in Loop: Header=BB39_13 Depth=1
	andl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.18:                               # %for.inc28
                                        #   in Loop: Header=BB39_13 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_13
.LBB39_19:                              # %for.end30
	cmpl	$0, -168(%rbp)
	je	.LBB39_21
# %bb.20:                               # %cond.true33
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-164(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB39_22
.LBB39_21:                              # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB39_22
.LBB39_22:                              # %cond.end39
	movl	%eax, -72(%rbp)
	cmpl	$0, -144(%rbp)
	je	.LBB39_24
# %bb.23:                               # %cond.true43
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-140(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB39_25
.LBB39_24:                              # %cond.false48
	xorl	%eax, %eax
	jmp	.LBB39_25
.LBB39_25:                              # %cond.end49
	movl	%eax, -112(%rbp)
	cmpl	$0, -200(%rbp)
	je	.LBB39_27
# %bb.26:                               # %cond.true53
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-196(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB39_28
.LBB39_27:                              # %cond.false58
	xorl	%eax, %eax
	jmp	.LBB39_28
.LBB39_28:                              # %cond.end59
	movl	%eax, -104(%rbp)
	jmp	.LBB39_30
.LBB39_29:                              # %if.else
	movl	-320(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-168(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-144(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-200(%rbp), %eax
	movl	%eax, -104(%rbp)
.LBB39_30:                              # %if.end
	xorl	%eax, %eax
	movl	-68(%rbp), %ecx
	movq	-216(%rbp), %rdx
	movl	%ecx, (%rdx)
	movl	-72(%rbp), %ecx
	movq	-224(%rbp), %rdx
	movl	%ecx, (%rdx)
	cmpl	$0, -72(%rbp)
	je	.LBB39_33
# %bb.31:                               # %land.lhs.true
	xorl	%eax, %eax
	cmpl	$0, -68(%rbp)
	je	.LBB39_33
# %bb.32:                               # %land.rhs68
	cmpl	$0, -104(%rbp)
	setne	%al
.LBB39_33:                              # %land.end70
	andb	$1, %al
	movzbl	%al, %eax
	movq	-208(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-108(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -4(%rbp)
	movl	-116(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -96(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB39_35
# %bb.34:                               # %if.then75
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -60(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -56(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -52(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB39_36
.LBB39_35:                              # %if.else109
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -48(%rbp)
	movl	%eax, -52(%rbp)
	movl	%eax, -56(%rbp)
	movl	%eax, -60(%rbp)
.LBB39_36:                              # %if.end114
	cmpl	$0, -112(%rbp)
	je	.LBB39_38
# %bb.37:                               # %if.then116
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -44(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -40(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -36(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB39_39
.LBB39_38:                              # %if.else153
	movl	-48(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	%eax, -36(%rbp)
	movl	%eax, -40(%rbp)
	movl	%eax, -44(%rbp)
.LBB39_39:                              # %if.end159
	cmpl	$0, -68(%rbp)
	je	.LBB39_41
# %bb.40:                               # %if.then161
	movq	-80(%rbp), %rax
	movslq	-300(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-304(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -28(%rbp)
	movq	-80(%rbp), %rax
	movslq	-276(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-280(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-80(%rbp), %rax
	movslq	-252(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-256(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-80(%rbp), %rax
	movslq	-228(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-232(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB39_42
.LBB39_41:                              # %if.else202
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -16(%rbp)
	movl	%eax, -20(%rbp)
	movl	%eax, -24(%rbp)
	movl	%eax, -28(%rbp)
.LBB39_42:                              # %if.end208
	cmpl	$0, -104(%rbp)
	je	.LBB39_44
# %bb.43:                               # %if.then210
	movq	-80(%rbp), %rax
	movslq	-180(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-184(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB39_45
.LBB39_44:                              # %if.else219
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -64(%rbp)
.LBB39_45:                              # %if.end222
	movl	$0, -4(%rbp)
.LBB39_46:                              # %for.cond223
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$9, -4(%rbp)
	jge	.LBB39_49
# %bb.47:                               # %for.body226
                                        #   in Loop: Header=BB39_46 Depth=1
	movq	img, %rax
	addq	$184, %rax
	movslq	-4(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movw	$-1, (%rax)
# %bb.48:                               # %for.inc231
                                        #   in Loop: Header=BB39_46 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_46
.LBB39_49:                              # %for.end233
	movl	$0, -92(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB39_52
# %bb.50:                               # %land.lhs.true235
	cmpl	$0, -68(%rbp)
	je	.LBB39_52
# %bb.51:                               # %if.then237
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$4, %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	jmp	.LBB39_61
.LBB39_52:                              # %if.else254
	cmpl	$0, -72(%rbp)
	jne	.LBB39_55
# %bb.53:                               # %land.lhs.true256
	cmpl	$0, -68(%rbp)
	je	.LBB39_55
# %bb.54:                               # %if.then258
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	jmp	.LBB39_60
.LBB39_55:                              # %if.else268
	cmpl	$0, -72(%rbp)
	je	.LBB39_58
# %bb.56:                               # %land.lhs.true270
	cmpl	$0, -68(%rbp)
	jne	.LBB39_58
# %bb.57:                               # %if.then272
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	jmp	.LBB39_59
.LBB39_58:                              # %if.else282
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -92(%rbp)
.LBB39_59:                              # %if.end284
	jmp	.LBB39_60
.LBB39_60:                              # %if.end285
	jmp	.LBB39_61
.LBB39_61:                              # %if.end286
	movl	$0, -96(%rbp)
.LBB39_62:                              # %for.cond287
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_64 Depth 2
	cmpl	$4, -96(%rbp)
	jge	.LBB39_69
# %bb.63:                               # %for.body290
                                        #   in Loop: Header=BB39_62 Depth=1
	movl	$0, -4(%rbp)
.LBB39_64:                              # %for.cond291
                                        #   Parent Loop BB39_62 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB39_67
# %bb.65:                               # %for.body294
                                        #   in Loop: Header=BB39_64 Depth=2
	movl	-92(%rbp), %eax
	movq	img, %rcx
	addq	$184, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-96(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.66:                               # %for.inc302
                                        #   in Loop: Header=BB39_64 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_64
.LBB39_67:                              # %for.end304
                                        #   in Loop: Header=BB39_62 Depth=1
	jmp	.LBB39_68
.LBB39_68:                              # %for.inc305
                                        #   in Loop: Header=BB39_62 Depth=1
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB39_62
.LBB39_69:                              # %for.end307
	movl	$0, -4(%rbp)
.LBB39_70:                              # %for.cond308
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB39_73
# %bb.71:                               # %for.body311
                                        #   in Loop: Header=BB39_70 Depth=1
	movslq	-4(%rbp), %rax
	movl	-60(%rbp,%rax,4), %eax
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 280(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 248(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 216(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 184(%rcx,%rdx,2)
	movslq	-4(%rbp), %rax
	movl	-28(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 6(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 4(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, (%rcx)
# %bb.72:                               # %for.inc360
                                        #   in Loop: Header=BB39_70 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_70
.LBB39_73:                              # %for.end362
	cmpl	$0, -72(%rbp)
	jne	.LBB39_75
# %bb.74:                               # %if.then364
	movq	img, %rax
	movw	$-1, 184(%rax)
.LBB39_75:                              # %if.end369
	cmpl	$0, -68(%rbp)
	jne	.LBB39_77
# %bb.76:                               # %if.then371
	movq	img, %rax
	movw	$-1, 696(%rax)
.LBB39_77:                              # %if.end376
	cmpl	$0, -72(%rbp)
	je	.LBB39_79
# %bb.78:                               # %if.then378
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1720(%rdx)
	movl	-56(%rbp), %eax
	addl	-48(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1752(%rdx)
	movq	img, %rdx
	movw	%ax, 1722(%rdx)
	movl	-52(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	-48(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1784(%rdx)
	movq	img, %rdx
	movw	%ax, 1754(%rdx)
	movq	img, %rdx
	movw	%ax, 1724(%rdx)
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	-44(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1816(%rdx)
	movq	img, %rdx
	movw	%ax, 1786(%rdx)
	movq	img, %rdx
	movw	%ax, 1756(%rdx)
	movq	img, %rdx
	movw	%ax, 1726(%rdx)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	-40(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1818(%rdx)
	movq	img, %rdx
	movw	%ax, 1788(%rdx)
	movq	img, %rdx
	movw	%ax, 1758(%rdx)
	movl	-40(%rbp), %eax
	addl	-32(%rbp), %eax
	movl	-36(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1820(%rdx)
	movq	img, %rdx
	movw	%ax, 1790(%rdx)
	movl	-36(%rbp), %eax
	imull	$3, -32(%rbp), %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1822(%rdx)
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3768(%rdx)
	movl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3832(%rdx)
	movq	img, %rdx
	movw	%ax, 3770(%rdx)
	movl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3834(%rdx)
	movq	img, %rdx
	movw	%ax, 3772(%rdx)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3836(%rdx)
	movq	img, %rdx
	movw	%ax, 3774(%rdx)
	movl	-44(%rbp), %eax
	addl	-40(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3838(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3800(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3864(%rdx)
	movq	img, %rdx
	movw	%ax, 3802(%rdx)
	movl	-52(%rbp), %eax
	movl	-48(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-44(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3866(%rdx)
	movq	img, %rdx
	movw	%ax, 3804(%rdx)
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-40(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3868(%rdx)
	movq	img, %rdx
	movw	%ax, 3806(%rdx)
	movl	-44(%rbp), %eax
	movl	-40(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-36(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 3870(%rcx)
.LBB39_79:                              # %if.end642
	cmpl	$0, -68(%rbp)
	je	.LBB39_81
# %bb.80:                               # %if.then644
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rcx
	movw	%ax, 4280(%rcx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 4282(%rdx)
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 4312(%rdx)
	movq	img, %rdx
	movw	%ax, 4284(%rdx)
	movl	-24(%rbp), %eax
	movl	-20(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 4314(%rdx)
	movq	img, %rdx
	movw	%ax, 4286(%rdx)
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 4344(%rdx)
	movq	img, %rdx
	movw	%ax, 4316(%rdx)
	movl	-20(%rbp), %eax
	movl	-16(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 4346(%rcx)
	movq	img, %rcx
	movw	%ax, 4318(%rcx)
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movw	%ax, 4382(%rcx)
	movq	img, %rcx
	movw	%ax, 4380(%rcx)
	movq	img, %rcx
	movw	%ax, 4378(%rcx)
	movq	img, %rcx
	movw	%ax, 4350(%rcx)
	movq	img, %rcx
	movw	%ax, 4348(%rcx)
	movq	img, %rcx
	movw	%ax, 4376(%rcx)
.LBB39_81:                              # %if.end756
	cmpl	$0, -72(%rbp)
	je	.LBB39_85
# %bb.82:                               # %land.lhs.true758
	cmpl	$0, -68(%rbp)
	je	.LBB39_85
# %bb.83:                               # %land.lhs.true760
	cmpl	$0, -104(%rbp)
	je	.LBB39_85
# %bb.84:                               # %if.then762
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2328(%rdx)
	movl	-20(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-28(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2330(%rdx)
	movq	img, %rdx
	movw	%ax, 2296(%rdx)
	movl	-24(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-64(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2332(%rdx)
	movq	img, %rdx
	movw	%ax, 2298(%rdx)
	movq	img, %rdx
	movw	%ax, 2264(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2334(%rdx)
	movq	img, %rdx
	movw	%ax, 2300(%rdx)
	movq	img, %rdx
	movw	%ax, 2266(%rdx)
	movq	img, %rdx
	movw	%ax, 2232(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2302(%rdx)
	movq	img, %rdx
	movw	%ax, 2268(%rdx)
	movq	img, %rdx
	movw	%ax, 2234(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2270(%rdx)
	movq	img, %rdx
	movw	%ax, 2236(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2238(%rdx)
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2810(%rdx)
	movq	img, %rdx
	movw	%ax, 2744(%rdx)
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2812(%rdx)
	movq	img, %rdx
	movw	%ax, 2746(%rdx)
	movl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2814(%rdx)
	movq	img, %rdx
	movw	%ax, 2748(%rdx)
	movl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2750(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2842(%rdx)
	movq	img, %rdx
	movw	%ax, 2776(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2844(%rdx)
	movq	img, %rdx
	movw	%ax, 2778(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2846(%rdx)
	movq	img, %rdx
	movw	%ax, 2780(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2782(%rdx)
	movl	-64(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2808(%rdx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2840(%rdx)
	movl	-64(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3292(%rdx)
	movq	img, %rdx
	movw	%ax, 3256(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3294(%rdx)
	movq	img, %rdx
	movw	%ax, 3258(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3260(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3262(%rdx)
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3324(%rdx)
	movq	img, %rdx
	movw	%ax, 3288(%rdx)
	movl	-64(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3326(%rdx)
	movq	img, %rdx
	movw	%ax, 3290(%rdx)
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3356(%rdx)
	movq	img, %rdx
	movw	%ax, 3320(%rdx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3358(%rdx)
	movq	img, %rdx
	movw	%ax, 3322(%rdx)
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3352(%rdx)
	movl	-24(%rbp), %eax
	movl	-20(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 3354(%rcx)
.LBB39_85:                              # %if.end1174
	cmpl	$887497953, -172(%rbp)  # imm = 0x34E624E1
	jne	.LBB39_87
.LBB39_86:
	addq	$320, %rsp              # imm = 0x140
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_87:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB39_86
.Lfunc_end39:
	.size	intrapred_luma.30, .Lfunc_end39-intrapred_luma.30
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma4x4.31        # -- Begin function dct_chroma4x4.31
	.p2align	4, 0x90
	.type	dct_chroma4x4.31,@function
dct_chroma4x4.31:                       # @dct_chroma4x4.31
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$45240335, -148(%rbp)   # imm = 0x2B2500F
	movl	%edi, -28(%rbp)
	movl	%esi, -84(%rbp)
	movl	%edx, -108(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %cl
	je	.LBB40_3
# %bb.1:                                # %lor.lhs.false
	movq	-144(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %cl
	je	.LBB40_3
# %bb.2:                                # %lor.rhs
	movq	-144(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%cl
.LBB40_3:                               # %lor.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -80(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-84(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-108(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -160(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-84(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-108(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -168(%rbp)
	movq	img, %rcx
	movl	40(%rcx), %ecx
	movq	img, %rdx
	addl	72668(%rdx), %ecx
	cmpl	$0, %ecx
	jne	.LBB40_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%al
.LBB40_5:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movslq	-28(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	movl	%eax, -88(%rbp)
	cmpl	$0, -88(%rbp)
	jge	.LBB40_7
# %bb.6:                                # %cond.true
	movl	-88(%rbp), %eax
	jmp	.LBB40_8
.LBB40_7:                               # %cond.false
	movl	-88(%rbp), %eax
	subl	$0, %eax
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB40_8:                               # %cond.end
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-88(%rbp), %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -32(%rbp)
	movl	-24(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -36(%rbp)
	jne	.LBB40_18
# %bb.9:                                # %if.then
	movl	$0, -16(%rbp)
.LBB40_10:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_12 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB40_17
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB40_10 Depth=1
	movl	$0, -12(%rbp)
.LBB40_12:                              # %for.cond31
                                        #   Parent Loop BB40_10 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB40_15
# %bb.13:                               # %for.body34
                                        #   in Loop: Header=BB40_12 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-72(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-72(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-72(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB40_12 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB40_12
.LBB40_15:                              # %for.end
                                        #   in Loop: Header=BB40_10 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.16:                               # %for.inc90
                                        #   in Loop: Header=BB40_10 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB40_10
.LBB40_17:                              # %for.end92
	jmp	.LBB40_18
.LBB40_18:                              # %if.end
	cmpl	$0, -36(%rbp)
	jne	.LBB40_28
# %bb.19:                               # %if.then94
	movl	$0, -12(%rbp)
.LBB40_20:                              # %for.cond95
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_22 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB40_27
# %bb.21:                               # %for.body98
                                        #   in Loop: Header=BB40_20 Depth=1
	movl	$0, -16(%rbp)
.LBB40_22:                              # %for.cond99
                                        #   Parent Loop BB40_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB40_25
# %bb.23:                               # %for.body102
                                        #   in Loop: Header=BB40_22 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-68(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-68(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-68(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.24:                               # %for.inc130
                                        #   in Loop: Header=BB40_22 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB40_22
.LBB40_25:                              # %for.end132
                                        #   in Loop: Header=BB40_20 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.26:                               # %for.inc163
                                        #   in Loop: Header=BB40_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB40_20
.LBB40_27:                              # %for.end165
	jmp	.LBB40_28
.LBB40_28:                              # %if.end166
	movl	$0, -132(%rbp)
	movl	$-1, -104(%rbp)
	movl	$0, -96(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB40_30
# %bb.29:                               # %if.then168
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movl	%eax, -20(%rbp)
	jmp	.LBB40_34
.LBB40_30:                              # %if.else
	cmpl	$1, -80(%rbp)
	jne	.LBB40_32
# %bb.31:                               # %if.then174
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-28(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movl	-100(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB40_33
.LBB40_32:                              # %if.else193
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-28(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movl	-100(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
.LBB40_33:                              # %if.end213
	jmp	.LBB40_34
.LBB40_34:                              # %if.end214
	movl	-28(%rbp), %eax
	addl	$1, %eax
	shll	$2, %eax
	movl	-84(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -84(%rbp)
	movl	-20(%rbp), %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movl	%eax, %ecx
	movslq	-28(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level_temp, %rdi
	addq	%rax, %rdi
	movl	-84(%rbp), %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %esi
	shll	$1, %esi
	movl	-108(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-84(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %esi
	shll	$1, %esi
	movl	-108(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%ecx, (%rdi,%rax,4)
	cmpl	$0, -36(%rbp)
	je	.LBB40_36
# %bb.35:                               # %if.then237
	movl	-20(%rbp), %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB40_46
.LBB40_36:                              # %if.else245
	cmpl	$4, -24(%rbp)
	jge	.LBB40_41
# %bb.37:                               # %if.then248
	cmpl	$1, -80(%rbp)
	jne	.LBB40_39
# %bb.38:                               # %if.then251
	movl	-20(%rbp), %edi
	movslq	-28(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	$3, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	addl	%eax, %edi
	movl	$4, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB40_40
.LBB40_39:                              # %if.else270
	movl	-20(%rbp), %edi
	movslq	-28(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	$3, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	addl	%eax, %edi
	movl	$4, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
.LBB40_40:                              # %if.end290
	jmp	.LBB40_45
.LBB40_41:                              # %if.else291
	cmpl	$1, -80(%rbp)
	jne	.LBB40_43
# %bb.42:                               # %if.then294
	movl	-20(%rbp), %edi
	movslq	-28(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	-24(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB40_44
.LBB40_43:                              # %if.else311
	movl	-20(%rbp), %edi
	movslq	-28(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	-24(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
.LBB40_44:                              # %if.end328
	jmp	.LBB40_45
.LBB40_45:                              # %if.end329
	jmp	.LBB40_46
.LBB40_46:                              # %if.end330
	movl	$1, -92(%rbp)
.LBB40_47:                              # %for.cond331
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -92(%rbp)
	jge	.LBB40_75
# %bb.48:                               # %for.body334
                                        #   in Loop: Header=BB40_47 Depth=1
	movslq	-92(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movslq	-92(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movl	-104(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -104(%rbp)
	movl	$0, -76(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB40_50
# %bb.49:                               # %if.then345
                                        #   in Loop: Header=BB40_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -20(%rbp)
	jmp	.LBB40_54
.LBB40_50:                              # %if.else352
                                        #   in Loop: Header=BB40_47 Depth=1
	cmpl	$1, -80(%rbp)
	jne	.LBB40_52
# %bb.51:                               # %if.then355
                                        #   in Loop: Header=BB40_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-28(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-100(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB40_53
.LBB40_52:                              # %if.else381
                                        #   in Loop: Header=BB40_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-28(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-100(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
.LBB40_53:                              # %if.end407
                                        #   in Loop: Header=BB40_47 Depth=1
	jmp	.LBB40_54
.LBB40_54:                              # %if.end408
                                        #   in Loop: Header=BB40_47 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB40_71
# %bb.55:                               # %if.then411
                                        #   in Loop: Header=BB40_47 Depth=1
	cmpl	$0, -12(%rbp)
	jne	.LBB40_57
# %bb.56:                               # %lor.lhs.false413
                                        #   in Loop: Header=BB40_47 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB40_58
.LBB40_57:                              # %if.then415
                                        #   in Loop: Header=BB40_47 Depth=1
	movl	$1, -132(%rbp)
.LBB40_58:                              # %if.end416
                                        #   in Loop: Header=BB40_47 Depth=1
	movl	-20(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-160(%rbp), %rcx
	movslq	-96(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-104(%rbp), %eax
	movq	-168(%rbp), %rcx
	movslq	-96(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	movl	$-1, -104(%rbp)
	movl	-20(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -20(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB40_60
# %bb.59:                               # %if.then435
                                        #   in Loop: Header=BB40_47 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB40_70
.LBB40_60:                              # %if.else436
                                        #   in Loop: Header=BB40_47 Depth=1
	cmpl	$4, -24(%rbp)
	jge	.LBB40_65
# %bb.61:                               # %if.then439
                                        #   in Loop: Header=BB40_47 Depth=1
	cmpl	$1, -80(%rbp)
	jne	.LBB40_63
# %bb.62:                               # %if.then442
                                        #   in Loop: Header=BB40_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB40_64
.LBB40_63:                              # %if.else457
                                        #   in Loop: Header=BB40_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -76(%rbp)
.LBB40_64:                              # %if.end472
                                        #   in Loop: Header=BB40_47 Depth=1
	jmp	.LBB40_69
.LBB40_65:                              # %if.else473
                                        #   in Loop: Header=BB40_47 Depth=1
	cmpl	$1, -80(%rbp)
	jne	.LBB40_67
# %bb.66:                               # %if.then476
                                        #   in Loop: Header=BB40_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-24(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB40_68
.LBB40_67:                              # %if.else488
                                        #   in Loop: Header=BB40_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-24(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -76(%rbp)
.LBB40_68:                              # %if.end500
                                        #   in Loop: Header=BB40_47 Depth=1
	jmp	.LBB40_69
.LBB40_69:                              # %if.end501
                                        #   in Loop: Header=BB40_47 Depth=1
	jmp	.LBB40_70
.LBB40_70:                              # %if.end502
                                        #   in Loop: Header=BB40_47 Depth=1
	jmp	.LBB40_71
.LBB40_71:                              # %if.end503
                                        #   in Loop: Header=BB40_47 Depth=1
	cmpl	$0, -36(%rbp)
	jne	.LBB40_73
# %bb.72:                               # %if.then505
                                        #   in Loop: Header=BB40_47 Depth=1
	movl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB40_73:                              # %if.end511
                                        #   in Loop: Header=BB40_47 Depth=1
	jmp	.LBB40_74
.LBB40_74:                              # %for.inc512
                                        #   in Loop: Header=BB40_47 Depth=1
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB40_47
.LBB40_75:                              # %for.end514
	movq	-160(%rbp), %rax
	movslq	-96(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	cmpl	$0, -36(%rbp)
	jne	.LBB40_89
# %bb.76:                               # %if.then518
	movl	$0, -16(%rbp)
.LBB40_77:                              # %for.cond519
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_79 Depth 2
                                        #     Child Loop BB40_83 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB40_88
# %bb.78:                               # %for.body522
                                        #   in Loop: Header=BB40_77 Depth=1
	movl	$0, -12(%rbp)
.LBB40_79:                              # %for.cond523
                                        #   Parent Loop BB40_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB40_82
# %bb.80:                               # %for.body526
                                        #   in Loop: Header=BB40_79 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.81:                               # %for.inc534
                                        #   in Loop: Header=BB40_79 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB40_79
.LBB40_82:                              # %for.end536
                                        #   in Loop: Header=BB40_77 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -12(%rbp)
.LBB40_83:                              # %for.cond555
                                        #   Parent Loop BB40_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB40_86
# %bb.84:                               # %for.body558
                                        #   in Loop: Header=BB40_83 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movslq	-12(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-72(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.85:                               # %for.inc580
                                        #   in Loop: Header=BB40_83 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB40_83
.LBB40_86:                              # %for.end582
                                        #   in Loop: Header=BB40_77 Depth=1
	jmp	.LBB40_87
.LBB40_87:                              # %for.inc583
                                        #   in Loop: Header=BB40_77 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB40_77
.LBB40_88:                              # %for.end585
	jmp	.LBB40_89
.LBB40_89:                              # %if.end586
	cmpl	$0, -36(%rbp)
	jne	.LBB40_103
# %bb.90:                               # %if.then588
	movl	$0, -12(%rbp)
.LBB40_91:                              # %for.cond589
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_93 Depth 2
                                        #     Child Loop BB40_97 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB40_102
# %bb.92:                               # %for.body592
                                        #   in Loop: Header=BB40_91 Depth=1
	movl	$0, -16(%rbp)
.LBB40_93:                              # %for.cond593
                                        #   Parent Loop BB40_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB40_96
# %bb.94:                               # %for.body596
                                        #   in Loop: Header=BB40_93 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.95:                               # %for.inc604
                                        #   in Loop: Header=BB40_93 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB40_93
.LBB40_96:                              # %for.end606
                                        #   in Loop: Header=BB40_91 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -16(%rbp)
.LBB40_97:                              # %for.cond625
                                        #   Parent Loop BB40_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB40_100
# %bb.98:                               # %for.body628
                                        #   in Loop: Header=BB40_97 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -68(%rbp)
	movslq	-16(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.99:                               # %for.inc654
                                        #   in Loop: Header=BB40_97 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB40_97
.LBB40_100:                             # %for.end656
                                        #   in Loop: Header=BB40_91 Depth=1
	jmp	.LBB40_101
.LBB40_101:                             # %for.inc657
                                        #   in Loop: Header=BB40_91 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB40_91
.LBB40_102:                             # %for.end659
	jmp	.LBB40_103
.LBB40_103:                             # %if.end660
	movl	-132(%rbp), %ebx
	cmpl	$45240335, -148(%rbp)   # imm = 0x2B2500F
	jne	.LBB40_105
.LBB40_104:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_105:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB40_104
.Lfunc_end40:
	.size	dct_chroma4x4.31, .Lfunc_end40-dct_chroma4x4.31
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma.32           # -- Begin function dct_chroma.32
	.p2align	4, 0x90
	.type	dct_chroma.32,@function
dct_chroma.32:                          # @dct_chroma.32
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$424, %rsp              # imm = 0x1A8
	.cfi_offset %rbx, -24
	movl	$1201648768, -380(%rbp) # imm = 0x479FB480
	movl	%edi, -20(%rbp)
	movl	%esi, -132(%rbp)
	movl	$0, -204(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -192(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -224(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -376(%rbp)
	movq	-192(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB41_3
# %bb.1:                                # %lor.lhs.false
	movq	-192(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB41_3
# %bb.2:                                # %lor.rhs
	movq	-192(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB41_3:                               # %lor.end
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -128(%rbp)
	movl	-20(%rbp), %esi
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	imull	%eax, %esi
	movl	%esi, -200(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern, %rax
	movq	%rax, -432(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+8, %rax
	movq	%rax, -424(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+16, %rax
	movq	%rax, -416(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+24, %rax
	movq	%rax, -408(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	movl	%eax, -144(%rbp)
	movl	$0, -108(%rbp)
	movl	$0, -136(%rbp)
	movl	$0, -212(%rbp)
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	cmpl	$0, %eax
	jne	.LBB41_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%cl
.LBB41_5:                               # %land.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -104(%rbp)
	movq	-192(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	img, %rdx
	movslq	-20(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	movl	%ecx, -124(%rbp)
	movl	-124(%rbp), %ecx
	movq	img, %rdx
	subl	72672(%rdx), %eax
	cmpl	%eax, %ecx
	jge	.LBB41_7
# %bb.6:                                # %cond.true
	xorl	%eax, %eax
	movq	img, %rcx
	subl	72672(%rcx), %eax
	jmp	.LBB41_11
.LBB41_7:                               # %cond.false
	cmpl	$51, -124(%rbp)
	jle	.LBB41_9
# %bb.8:                                # %cond.true24
	movl	$51, %eax
	jmp	.LBB41_10
.LBB41_9:                               # %cond.false25
	movl	-124(%rbp), %eax
.LBB41_10:                              # %cond.end
.LBB41_11:                              # %cond.end26
	movl	%eax, -124(%rbp)
	cmpl	$0, -124(%rbp)
	jge	.LBB41_13
# %bb.12:                               # %cond.true29
	movl	-124(%rbp), %eax
	jmp	.LBB41_14
.LBB41_13:                              # %cond.false30
	movl	-124(%rbp), %eax
	subl	$0, %eax
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB41_14:                              # %cond.end34
	movl	%eax, -124(%rbp)
	movl	-124(%rbp), %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movl	-124(%rbp), %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -76(%rbp)
	movl	-40(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -180(%rbp)
	movq	img, %rax
	cmpl	$2, 72700(%rax)
	jne	.LBB41_16
# %bb.15:                               # %if.then
	movl	-124(%rbp), %eax
	addl	$3, %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -108(%rbp)
	movl	-124(%rbp), %eax
	addl	$3, %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -136(%rbp)
	movl	-108(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -212(%rbp)
.LBB41_16:                              # %if.end
	movl	$0, -28(%rbp)
.LBB41_17:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_19 Depth 2
                                        #       Child Loop BB41_21 Depth 3
                                        #         Child Loop BB41_25 Depth 4
                                        #       Child Loop BB41_31 Depth 3
                                        #         Child Loop BB41_35 Depth 4
	movl	-28(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB41_44
# %bb.18:                               # %for.body
                                        #   in Loop: Header=BB41_17 Depth=1
	movl	$0, -24(%rbp)
.LBB41_19:                              # %for.cond56
                                        #   Parent Loop BB41_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_21 Depth 3
                                        #         Child Loop BB41_25 Depth 4
                                        #       Child Loop BB41_31 Depth 3
                                        #         Child Loop BB41_35 Depth 4
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB41_42
# %bb.20:                               # %for.body59
                                        #   in Loop: Header=BB41_19 Depth=2
	movl	$0, -12(%rbp)
.LBB41_21:                              # %for.cond60
                                        #   Parent Loop BB41_17 Depth=1
                                        #     Parent Loop BB41_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB41_25 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB41_23
# %bb.22:                               # %land.rhs63
                                        #   in Loop: Header=BB41_21 Depth=3
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB41_23:                              # %land.end64
                                        #   in Loop: Header=BB41_21 Depth=3
	testb	$1, %al
	jne	.LBB41_24
	jmp	.LBB41_30
.LBB41_24:                              # %for.body66
                                        #   in Loop: Header=BB41_21 Depth=3
	movl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -148(%rbp)
	movl	$0, -16(%rbp)
.LBB41_25:                              # %for.cond68
                                        #   Parent Loop BB41_17 Depth=1
                                        #     Parent Loop BB41_19 Depth=2
                                        #       Parent Loop BB41_21 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB41_28
# %bb.26:                               # %for.body71
                                        #   in Loop: Header=BB41_25 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-148(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-148(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-120(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.27:                               # %for.inc
                                        #   in Loop: Header=BB41_25 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_25
.LBB41_28:                              # %for.end
                                        #   in Loop: Header=BB41_21 Depth=3
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.29:                               # %for.inc139
                                        #   in Loop: Header=BB41_21 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_21
.LBB41_30:                              # %for.end141
                                        #   in Loop: Header=BB41_19 Depth=2
	movl	$0, -16(%rbp)
.LBB41_31:                              # %for.cond142
                                        #   Parent Loop BB41_17 Depth=1
                                        #     Parent Loop BB41_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB41_35 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB41_33
# %bb.32:                               # %land.rhs145
                                        #   in Loop: Header=BB41_31 Depth=3
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB41_33:                              # %land.end148
                                        #   in Loop: Header=BB41_31 Depth=3
	testb	$1, %al
	jne	.LBB41_34
	jmp	.LBB41_40
.LBB41_34:                              # %for.body150
                                        #   in Loop: Header=BB41_31 Depth=3
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	$0, -12(%rbp)
.LBB41_35:                              # %for.cond152
                                        #   Parent Loop BB41_17 Depth=1
                                        #     Parent Loop BB41_19 Depth=2
                                        #       Parent Loop BB41_31 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB41_38
# %bb.36:                               # %for.body155
                                        #   in Loop: Header=BB41_35 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-68(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.37:                               # %for.inc187
                                        #   in Loop: Header=BB41_35 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_35
.LBB41_38:                              # %for.end189
                                        #   in Loop: Header=BB41_31 Depth=3
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.39:                               # %for.inc228
                                        #   in Loop: Header=BB41_31 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_31
.LBB41_40:                              # %for.end230
                                        #   in Loop: Header=BB41_19 Depth=2
	jmp	.LBB41_41
.LBB41_41:                              # %for.inc231
                                        #   in Loop: Header=BB41_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB41_19
.LBB41_42:                              # %for.end233
                                        #   in Loop: Header=BB41_17 Depth=1
	jmp	.LBB41_43
.LBB41_43:                              # %for.inc234
                                        #   in Loop: Header=BB41_17 Depth=1
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB41_17
.LBB41_44:                              # %for.end236
	cmpl	$1, -144(%rbp)
	jne	.LBB41_76
# %bb.45:                               # %if.then239
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -176(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -172(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -168(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -164(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -36(%rbp)
.LBB41_46:                              # %for.cond304
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -36(%rbp)
	jge	.LBB41_62
# %bb.47:                               # %for.body307
                                        #   in Loop: Header=BB41_46 Depth=1
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -140(%rbp)
	cmpl	$1, -128(%rbp)
	jne	.LBB41_49
# %bb.48:                               # %if.then311
                                        #   in Loop: Header=BB41_46 Depth=1
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB41_50
.LBB41_49:                              # %if.else
                                        #   in Loop: Header=BB41_46 Depth=1
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB41_50:                              # %if.end349
                                        #   in Loop: Header=BB41_46 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB41_55
# %bb.51:                               # %land.lhs.true
                                        #   in Loop: Header=BB41_46 Depth=1
	movq	img, %rax
	cmpl	$4, 40(%rax)
	jge	.LBB41_55
# %bb.52:                               # %if.then355
                                        #   in Loop: Header=BB41_46 Depth=1
	cmpl	$2063, -44(%rbp)        # imm = 0x80F
	jle	.LBB41_54
# %bb.53:                               # %if.then358
                                        #   in Loop: Header=BB41_46 Depth=1
	movl	$2063, -44(%rbp)        # imm = 0x80F
.LBB41_54:                              # %if.end359
                                        #   in Loop: Header=BB41_46 Depth=1
	jmp	.LBB41_55
.LBB41_55:                              # %if.end360
                                        #   in Loop: Header=BB41_46 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB41_60
# %bb.56:                               # %if.then363
                                        #   in Loop: Header=BB41_46 Depth=1
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
                                        # kill: def $cl killed $ecx
	movl	$983040, %eax           # imm = 0xF0000
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-132(%rbp), %eax
	jle	.LBB41_58
# %bb.57:                               # %cond.true369
                                        #   in Loop: Header=BB41_46 Depth=1
	movl	$1, %eax
	jmp	.LBB41_59
.LBB41_58:                              # %cond.false370
                                        #   in Loop: Header=BB41_46 Depth=1
	movl	-132(%rbp), %eax
.LBB41_59:                              # %cond.end371
                                        #   in Loop: Header=BB41_46 Depth=1
	movl	%eax, -132(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	$-1, -100(%rbp)
	movl	-44(%rbp), %edi
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %esi
	callq	sign
	movl	%eax, -140(%rbp)
.LBB41_60:                              # %if.end384
                                        #   in Loop: Header=BB41_46 Depth=1
	movl	-140(%rbp), %eax
	movslq	-36(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.61:                               # %for.inc387
                                        #   in Loop: Header=BB41_46 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB41_46
.LBB41_62:                              # %for.end389
	movq	-224(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -16(%rbp)
.LBB41_63:                              # %for.cond424
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB41_75
# %bb.64:                               # %for.body427
                                        #   in Loop: Header=BB41_63 Depth=1
	cmpl	$5, -40(%rbp)
	jge	.LBB41_69
# %bb.65:                               # %if.then430
                                        #   in Loop: Header=BB41_63 Depth=1
	cmpl	$1, -128(%rbp)
	jne	.LBB41_67
# %bb.66:                               # %if.then433
                                        #   in Loop: Header=BB41_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	$5, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	jmp	.LBB41_68
.LBB41_67:                              # %if.else447
                                        #   in Loop: Header=BB41_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	$5, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
.LBB41_68:                              # %if.end461
                                        #   in Loop: Header=BB41_63 Depth=1
	jmp	.LBB41_73
.LBB41_69:                              # %if.else462
                                        #   in Loop: Header=BB41_63 Depth=1
	cmpl	$1, -128(%rbp)
	jne	.LBB41_71
# %bb.70:                               # %if.then465
                                        #   in Loop: Header=BB41_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-40(%rbp), %ecx
	subl	$5, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	jmp	.LBB41_72
.LBB41_71:                              # %if.else479
                                        #   in Loop: Header=BB41_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-40(%rbp), %ecx
	subl	$5, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
.LBB41_72:                              # %if.end493
                                        #   in Loop: Header=BB41_63 Depth=1
	jmp	.LBB41_73
.LBB41_73:                              # %if.end494
                                        #   in Loop: Header=BB41_63 Depth=1
	jmp	.LBB41_74
.LBB41_74:                              # %for.inc495
                                        #   in Loop: Header=BB41_63 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_63
.LBB41_75:                              # %for.end497
	movl	-176(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	movl	-172(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13368(%rcx)
	movl	-168(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13128(%rcx)
	movl	-164(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13384(%rcx)
	jmp	.LBB41_213
.LBB41_76:                              # %if.else514
	cmpl	$2, -144(%rbp)
	jne	.LBB41_127
# %bb.77:                               # %if.then517
	movl	$0, -12(%rbp)
.LBB41_78:                              # %for.cond518
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_80 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB41_85
# %bb.79:                               # %for.body522
                                        #   in Loop: Header=BB41_78 Depth=1
	movl	$0, -16(%rbp)
.LBB41_80:                              # %for.cond523
                                        #   Parent Loop BB41_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB41_83
# %bb.81:                               # %for.body527
                                        #   in Loop: Header=BB41_80 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$4, %rcx
	leaq	-368(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.82:                               # %for.inc539
                                        #   in Loop: Header=BB41_80 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_80
.LBB41_83:                              # %for.end541
                                        #   in Loop: Header=BB41_78 Depth=1
	jmp	.LBB41_84
.LBB41_84:                              # %for.inc542
                                        #   in Loop: Header=BB41_78 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_78
.LBB41_85:                              # %for.end544
	movl	-368(%rbp), %eax
	addl	-352(%rbp), %eax
	movl	%eax, -304(%rbp)
	movl	-364(%rbp), %eax
	addl	-348(%rbp), %eax
	movl	%eax, -300(%rbp)
	movl	-360(%rbp), %eax
	addl	-344(%rbp), %eax
	movl	%eax, -296(%rbp)
	movl	-356(%rbp), %eax
	addl	-340(%rbp), %eax
	movl	%eax, -292(%rbp)
	movl	-368(%rbp), %eax
	subl	-352(%rbp), %eax
	movl	%eax, -288(%rbp)
	movl	-364(%rbp), %eax
	subl	-348(%rbp), %eax
	movl	%eax, -284(%rbp)
	movl	-360(%rbp), %eax
	subl	-344(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-356(%rbp), %eax
	subl	-340(%rbp), %eax
	movl	%eax, -276(%rbp)
	movl	$0, -16(%rbp)
.LBB41_86:                              # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_88 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB41_93
# %bb.87:                               # %for.body604
                                        #   in Loop: Header=BB41_86 Depth=1
	movl	$0, -12(%rbp)
.LBB41_88:                              # %for.cond605
                                        #   Parent Loop BB41_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB41_91
# %bb.89:                               # %for.body608
                                        #   in Loop: Header=BB41_88 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-32(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-32(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.90:                               # %for.inc632
                                        #   in Loop: Header=BB41_88 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_88
.LBB41_91:                              # %for.end634
                                        #   in Loop: Header=BB41_86 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, 8(%rsi)
	movl	-52(%rbp), %eax
	addl	-56(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-52(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movl	%eax, 12(%rdx)
# %bb.92:                               # %for.inc659
                                        #   in Loop: Header=BB41_86 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_86
.LBB41_93:                              # %for.end661
	movl	$-1, -100(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -36(%rbp)
.LBB41_94:                              # %for.cond662
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -36(%rbp)
	jge	.LBB41_105
# %bb.95:                               # %for.body665
                                        #   in Loop: Header=BB41_94 Depth=1
	movslq	-36(%rbp), %rax
	movzbl	SCAN_YUV422(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SCAN_YUV422+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	cmpl	$1, -128(%rbp)
	jne	.LBB41_97
# %bb.96:                               # %if.then677
                                        #   in Loop: Header=BB41_94 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-212(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB41_98
.LBB41_97:                              # %if.else700
                                        #   in Loop: Header=BB41_94 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-212(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB41_98:                              # %if.end723
                                        #   in Loop: Header=BB41_94 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB41_103
# %bb.99:                               # %if.then726
                                        #   in Loop: Header=BB41_94 Depth=1
	movl	-20(%rbp), %ecx
	shll	$3, %ecx
                                        # kill: def $cl killed $ecx
	movl	$16711680, %eax         # imm = 0xFF0000
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-132(%rbp), %eax
	jle	.LBB41_101
# %bb.100:                              # %cond.true734
                                        #   in Loop: Header=BB41_94 Depth=1
	movl	$1, %eax
	jmp	.LBB41_102
.LBB41_101:                             # %cond.false735
                                        #   in Loop: Header=BB41_94 Depth=1
	movl	-132(%rbp), %eax
.LBB41_102:                             # %cond.end736
                                        #   in Loop: Header=BB41_94 Depth=1
	movl	%eax, -132(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	$-1, -100(%rbp)
.LBB41_103:                             # %if.end748
                                        #   in Loop: Header=BB41_94 Depth=1
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-368(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.104:                              # %for.inc758
                                        #   in Loop: Header=BB41_94 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB41_94
.LBB41_105:                             # %for.end760
	movq	-224(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-368(%rbp), %eax
	addl	-352(%rbp), %eax
	movl	%eax, -304(%rbp)
	movl	-364(%rbp), %eax
	addl	-348(%rbp), %eax
	movl	%eax, -300(%rbp)
	movl	-360(%rbp), %eax
	addl	-344(%rbp), %eax
	movl	%eax, -296(%rbp)
	movl	-356(%rbp), %eax
	addl	-340(%rbp), %eax
	movl	%eax, -292(%rbp)
	movl	-368(%rbp), %eax
	subl	-352(%rbp), %eax
	movl	%eax, -288(%rbp)
	movl	-364(%rbp), %eax
	subl	-348(%rbp), %eax
	movl	%eax, -284(%rbp)
	movl	-360(%rbp), %eax
	subl	-344(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-356(%rbp), %eax
	subl	-340(%rbp), %eax
	movl	%eax, -276(%rbp)
	movl	$0, -16(%rbp)
.LBB41_106:                             # %for.cond819
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_108 Depth 2
                                        #     Child Loop BB41_112 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB41_126
# %bb.107:                              # %for.body822
                                        #   in Loop: Header=BB41_106 Depth=1
	movl	$0, -12(%rbp)
.LBB41_108:                             # %for.cond823
                                        #   Parent Loop BB41_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB41_111
# %bb.109:                              # %for.body826
                                        #   in Loop: Header=BB41_108 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.110:                              # %for.inc833
                                        #   in Loop: Header=BB41_108 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_108
.LBB41_111:                             # %for.end835
                                        #   in Loop: Header=BB41_106 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB41_112:                             # %for.cond852
                                        #   Parent Loop BB41_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB41_124
# %bb.113:                              # %for.body855
                                        #   in Loop: Header=BB41_112 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	cmpl	$4, -108(%rbp)
	jge	.LBB41_118
# %bb.114:                              # %if.then859
                                        #   in Loop: Header=BB41_112 Depth=2
	cmpl	$1, -128(%rbp)
	jne	.LBB41_116
# %bb.115:                              # %if.then862
                                        #   in Loop: Header=BB41_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-136(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-108(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-108(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
	jmp	.LBB41_117
.LBB41_116:                             # %if.else915
                                        #   in Loop: Header=BB41_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-136(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-108(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-108(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
.LBB41_117:                             # %if.end968
                                        #   in Loop: Header=BB41_112 Depth=2
	jmp	.LBB41_122
.LBB41_118:                             # %if.else969
                                        #   in Loop: Header=BB41_112 Depth=2
	cmpl	$1, -128(%rbp)
	jne	.LBB41_120
# %bb.119:                              # %if.then972
                                        #   in Loop: Header=BB41_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-108(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-108(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB41_121
.LBB41_120:                             # %if.else1019
                                        #   in Loop: Header=BB41_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-108(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-108(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB41_121:                             # %if.end1066
                                        #   in Loop: Header=BB41_112 Depth=2
	jmp	.LBB41_122
.LBB41_122:                             # %if.end1067
                                        #   in Loop: Header=BB41_112 Depth=2
	jmp	.LBB41_123
.LBB41_123:                             # %for.inc1068
                                        #   in Loop: Header=BB41_112 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_112
.LBB41_124:                             # %for.end1070
                                        #   in Loop: Header=BB41_106 Depth=1
	jmp	.LBB41_125
.LBB41_125:                             # %for.inc1071
                                        #   in Loop: Header=BB41_106 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_106
.LBB41_126:                             # %for.end1073
	jmp	.LBB41_212
.LBB41_127:                             # %if.else1074
	cmpl	$3, -144(%rbp)
	jne	.LBB41_211
# %bb.128:                              # %if.then1077
	movl	$0, -12(%rbp)
.LBB41_129:                             # %for.cond1078
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_131 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB41_136
# %bb.130:                              # %for.body1082
                                        #   in Loop: Header=BB41_129 Depth=1
	movl	$0, -16(%rbp)
.LBB41_131:                             # %for.cond1083
                                        #   Parent Loop BB41_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB41_134
# %bb.132:                              # %for.body1087
                                        #   in Loop: Header=BB41_131 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.133:                              # %for.inc1099
                                        #   in Loop: Header=BB41_131 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_131
.LBB41_134:                             # %for.end1101
                                        #   in Loop: Header=BB41_129 Depth=1
	jmp	.LBB41_135
.LBB41_135:                             # %for.inc1102
                                        #   in Loop: Header=BB41_129 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_129
.LBB41_136:                             # %for.end1104
	movl	$0, -12(%rbp)
.LBB41_137:                             # %for.cond1105
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_141 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB41_139
# %bb.138:                              # %land.rhs1108
                                        #   in Loop: Header=BB41_137 Depth=1
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB41_139:                             # %land.end1111
                                        #   in Loop: Header=BB41_137 Depth=1
	testb	$1, %al
	jne	.LBB41_140
	jmp	.LBB41_146
.LBB41_140:                             # %for.body1113
                                        #   in Loop: Header=BB41_137 Depth=1
	movl	$0, -16(%rbp)
.LBB41_141:                             # %for.cond1114
                                        #   Parent Loop BB41_137 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB41_144
# %bb.142:                              # %for.body1117
                                        #   in Loop: Header=BB41_141 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-120(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-120(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-120(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.143:                              # %for.inc1141
                                        #   in Loop: Header=BB41_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_141
.LBB41_144:                             # %for.end1143
                                        #   in Loop: Header=BB41_137 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -304(%rbp,%rcx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
	movl	-52(%rbp), %eax
	addl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -288(%rbp,%rcx,4)
	movl	-52(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -256(%rbp,%rcx,4)
# %bb.145:                              # %for.inc1168
                                        #   in Loop: Header=BB41_137 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_137
.LBB41_146:                             # %for.end1170
	movl	$0, -16(%rbp)
.LBB41_147:                             # %for.cond1171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_151 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB41_149
# %bb.148:                              # %land.rhs1174
                                        #   in Loop: Header=BB41_147 Depth=1
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB41_149:                             # %land.end1177
                                        #   in Loop: Header=BB41_147 Depth=1
	testb	$1, %al
	jne	.LBB41_150
	jmp	.LBB41_156
.LBB41_150:                             # %for.body1179
                                        #   in Loop: Header=BB41_147 Depth=1
	movl	$0, -12(%rbp)
.LBB41_151:                             # %for.cond1180
                                        #   Parent Loop BB41_147 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB41_154
# %bb.152:                              # %for.body1183
                                        #   in Loop: Header=BB41_151 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-32(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-32(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.153:                              # %for.inc1207
                                        #   in Loop: Header=BB41_151 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_151
.LBB41_154:                             # %for.end1209
                                        #   in Loop: Header=BB41_147 Depth=1
	movl	-64(%rbp), %ecx
	addl	-60(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-304(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-64(%rbp), %ecx
	subl	-60(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-52(%rbp), %ecx
	addl	-56(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-52(%rbp), %ecx
	subl	-56(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.155:                              # %for.inc1238
                                        #   in Loop: Header=BB41_147 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_147
.LBB41_156:                             # %for.end1240
	movl	$-1, -100(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -36(%rbp)
.LBB41_157:                             # %for.cond1241
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -36(%rbp)
	jge	.LBB41_173
# %bb.158:                              # %for.body1244
                                        #   in Loop: Header=BB41_157 Depth=1
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -104(%rbp)
	je	.LBB41_160
# %bb.159:                              # %if.then1255
                                        #   in Loop: Header=BB41_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -44(%rbp)
	jmp	.LBB41_164
.LBB41_160:                             # %if.else1261
                                        #   in Loop: Header=BB41_157 Depth=1
	cmpl	$1, -128(%rbp)
	jne	.LBB41_162
# %bb.161:                              # %if.then1264
                                        #   in Loop: Header=BB41_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB41_163
.LBB41_162:                             # %if.else1287
                                        #   in Loop: Header=BB41_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB41_163:                             # %if.end1310
                                        #   in Loop: Header=BB41_157 Depth=1
	jmp	.LBB41_164
.LBB41_164:                             # %if.end1311
                                        #   in Loop: Header=BB41_157 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB41_169
# %bb.165:                              # %if.then1314
                                        #   in Loop: Header=BB41_157 Depth=1
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $rcx
	movl	$4294901760, %eax       # imm = 0xFFFF0000
	shlq	%cl, %rax
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-132(%rbp), %eax
	jle	.LBB41_167
# %bb.166:                              # %cond.true1321
                                        #   in Loop: Header=BB41_157 Depth=1
	movl	$1, %eax
	jmp	.LBB41_168
.LBB41_167:                             # %cond.false1322
                                        #   in Loop: Header=BB41_157 Depth=1
	movl	-132(%rbp), %eax
.LBB41_168:                             # %cond.end1323
                                        #   in Loop: Header=BB41_157 Depth=1
	movl	%eax, -132(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	$-1, -100(%rbp)
.LBB41_169:                             # %if.end1335
                                        #   in Loop: Header=BB41_157 Depth=1
	cmpl	$0, -104(%rbp)
	jne	.LBB41_171
# %bb.170:                              # %if.then1337
                                        #   in Loop: Header=BB41_157 Depth=1
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB41_171:                             # %if.end1347
                                        #   in Loop: Header=BB41_157 Depth=1
	jmp	.LBB41_172
.LBB41_172:                             # %for.inc1348
                                        #   in Loop: Header=BB41_157 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB41_157
.LBB41_173:                             # %for.end1350
	movq	-224(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB41_174:                             # %for.cond1353
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_178 Depth 2
                                        #     Child Loop BB41_182 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB41_176
# %bb.175:                              # %land.rhs1356
                                        #   in Loop: Header=BB41_174 Depth=1
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB41_176:                             # %land.end1359
                                        #   in Loop: Header=BB41_174 Depth=1
	testb	$1, %al
	jne	.LBB41_177
	jmp	.LBB41_187
.LBB41_177:                             # %for.body1361
                                        #   in Loop: Header=BB41_174 Depth=1
	movl	$0, -16(%rbp)
.LBB41_178:                             # %for.cond1362
                                        #   Parent Loop BB41_174 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB41_181
# %bb.179:                              # %for.body1365
                                        #   in Loop: Header=BB41_178 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.180:                              # %for.inc1372
                                        #   in Loop: Header=BB41_178 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_178
.LBB41_181:                             # %for.end1374
                                        #   in Loop: Header=BB41_174 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB41_182:                             # %for.cond1391
                                        #   Parent Loop BB41_174 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB41_185
# %bb.183:                              # %for.body1394
                                        #   in Loop: Header=BB41_182 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movslq	-120(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.184:                              # %for.inc1414
                                        #   in Loop: Header=BB41_182 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_182
.LBB41_185:                             # %for.end1416
                                        #   in Loop: Header=BB41_174 Depth=1
	jmp	.LBB41_186
.LBB41_186:                             # %for.inc1417
                                        #   in Loop: Header=BB41_174 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_174
.LBB41_187:                             # %for.end1419
	movl	$0, -16(%rbp)
.LBB41_188:                             # %for.cond1420
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_192 Depth 2
                                        #     Child Loop BB41_196 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB41_190
# %bb.189:                              # %land.rhs1423
                                        #   in Loop: Header=BB41_188 Depth=1
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB41_190:                             # %land.end1426
                                        #   in Loop: Header=BB41_188 Depth=1
	testb	$1, %al
	jne	.LBB41_191
	jmp	.LBB41_210
.LBB41_191:                             # %for.body1428
                                        #   in Loop: Header=BB41_188 Depth=1
	movl	$0, -12(%rbp)
.LBB41_192:                             # %for.cond1429
                                        #   Parent Loop BB41_188 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB41_195
# %bb.193:                              # %for.body1432
                                        #   in Loop: Header=BB41_192 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.194:                              # %for.inc1439
                                        #   in Loop: Header=BB41_192 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_192
.LBB41_195:                             # %for.end1441
                                        #   in Loop: Header=BB41_188 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB41_196:                             # %for.cond1458
                                        #   Parent Loop BB41_188 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB41_208
# %bb.197:                              # %for.body1461
                                        #   in Loop: Header=BB41_196 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	cmpl	$4, -40(%rbp)
	jge	.LBB41_202
# %bb.198:                              # %if.then1465
                                        #   in Loop: Header=BB41_196 Depth=2
	cmpl	$1, -128(%rbp)
	jne	.LBB41_200
# %bb.199:                              # %if.then1468
                                        #   in Loop: Header=BB41_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-76(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-40(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-40(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
	jmp	.LBB41_201
.LBB41_200:                             # %if.else1521
                                        #   in Loop: Header=BB41_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-76(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-40(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-40(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
.LBB41_201:                             # %if.end1574
                                        #   in Loop: Header=BB41_196 Depth=2
	jmp	.LBB41_206
.LBB41_202:                             # %if.else1575
                                        #   in Loop: Header=BB41_196 Depth=2
	cmpl	$1, -128(%rbp)
	jne	.LBB41_204
# %bb.203:                              # %if.then1578
                                        #   in Loop: Header=BB41_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB41_205
.LBB41_204:                             # %if.else1625
                                        #   in Loop: Header=BB41_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB41_205:                             # %if.end1672
                                        #   in Loop: Header=BB41_196 Depth=2
	jmp	.LBB41_206
.LBB41_206:                             # %if.end1673
                                        #   in Loop: Header=BB41_196 Depth=2
	jmp	.LBB41_207
.LBB41_207:                             # %for.inc1674
                                        #   in Loop: Header=BB41_196 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_196
.LBB41_208:                             # %for.end1676
                                        #   in Loop: Header=BB41_188 Depth=1
	jmp	.LBB41_209
.LBB41_209:                             # %for.inc1677
                                        #   in Loop: Header=BB41_188 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_188
.LBB41_210:                             # %for.end1679
	jmp	.LBB41_211
.LBB41_211:                             # %if.end1680
	jmp	.LBB41_212
.LBB41_212:                             # %if.end1681
	jmp	.LBB41_213
.LBB41_213:                             # %if.end1682
	movl	$0, -196(%rbp)
	movl	$0, -208(%rbp)
	movl	$0, -112(%rbp)
.LBB41_214:                             # %for.cond1683
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_216 Depth 2
                                        #       Child Loop BB41_218 Depth 3
	movl	-112(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB41_256
# %bb.215:                              # %for.body1688
                                        #   in Loop: Header=BB41_214 Depth=1
	movl	$0, -116(%rbp)
.LBB41_216:                             # %for.cond1689
                                        #   Parent Loop BB41_214 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_218 Depth 3
	cmpl	$4, -116(%rbp)
	jge	.LBB41_254
# %bb.217:                              # %for.body1692
                                        #   in Loop: Header=BB41_216 Depth=2
	movslq	-144(%rbp), %rax
	shlq	$4, %rax
	movabsq	$hor_offset, %rcx
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -24(%rbp)
	movslq	-144(%rbp), %rax
	shlq	$4, %rax
	movabsq	$ver_offset, %rcx
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$4, %ecx
	addl	-200(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -232(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$4, %ecx
	addl	-200(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -392(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -72(%rbp)
	movl	$1, -36(%rbp)
.LBB41_218:                             # %for.cond1722
                                        #   Parent Loop BB41_214 Depth=1
                                        #     Parent Loop BB41_216 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -36(%rbp)
	jge	.LBB41_252
# %bb.219:                              # %for.body1725
                                        #   in Loop: Header=BB41_218 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB41_222
# %bb.220:                              # %lor.lhs.false1727
                                        #   in Loop: Header=BB41_218 Depth=3
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB41_223
# %bb.221:                              # %land.lhs.true1729
                                        #   in Loop: Header=BB41_218 Depth=3
	movq	-192(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB41_223
.LBB41_222:                             # %if.then1731
                                        #   in Loop: Header=BB41_218 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_224
.LBB41_223:                             # %if.else1740
                                        #   in Loop: Header=BB41_218 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB41_224:                             # %if.end1749
                                        #   in Loop: Header=BB41_218 Depth=3
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -140(%rbp)
	cmpl	$0, -104(%rbp)
	je	.LBB41_226
# %bb.225:                              # %if.then1752
                                        #   in Loop: Header=BB41_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -44(%rbp)
	jmp	.LBB41_230
.LBB41_226:                             # %if.else1761
                                        #   in Loop: Header=BB41_218 Depth=3
	cmpl	$1, -128(%rbp)
	jne	.LBB41_228
# %bb.227:                              # %if.then1764
                                        #   in Loop: Header=BB41_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-180(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB41_229
.LBB41_228:                             # %if.else1792
                                        #   in Loop: Header=BB41_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-180(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB41_229:                             # %if.end1820
                                        #   in Loop: Header=BB41_218 Depth=3
	jmp	.LBB41_230
.LBB41_230:                             # %if.end1821
                                        #   in Loop: Header=BB41_218 Depth=3
	cmpl	$0, -44(%rbp)
	je	.LBB41_248
# %bb.231:                              # %if.then1824
                                        #   in Loop: Header=BB41_218 Depth=3
	movl	-112(%rbp), %eax
	addl	-200(%rbp), %eax
	cltq
	shlq	$2, %rax
	movabsq	$cbp_blk_chroma, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $rcx
	movl	$1, %eax
	shlq	%cl, %rax
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	cmpl	$1, -44(%rbp)
	jg	.LBB41_233
# %bb.232:                              # %lor.lhs.false1837
                                        #   in Loop: Header=BB41_218 Depth=3
	cmpl	$0, -104(%rbp)
	je	.LBB41_234
.LBB41_233:                             # %if.then1839
                                        #   in Loop: Header=BB41_218 Depth=3
	movl	-196(%rbp), %eax
	addl	$999999, %eax           # imm = 0xF423F
	movl	%eax, -196(%rbp)
	jmp	.LBB41_235
.LBB41_234:                             # %if.else1841
                                        #   in Loop: Header=BB41_218 Depth=3
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-100(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	-196(%rbp), %eax
	movl	%eax, -196(%rbp)
.LBB41_235:                             # %if.end1848
                                        #   in Loop: Header=BB41_218 Depth=3
	movl	$2, -208(%rbp)
	movl	-44(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-232(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-392(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	$-1, -100(%rbp)
	movl	-44(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -44(%rbp)
	cmpl	$0, -104(%rbp)
	je	.LBB41_237
# %bb.236:                              # %if.then1871
                                        #   in Loop: Header=BB41_218 Depth=3
	movl	-44(%rbp), %eax
	movl	%eax, -140(%rbp)
	jmp	.LBB41_247
.LBB41_237:                             # %if.else1872
                                        #   in Loop: Header=BB41_218 Depth=3
	cmpl	$4, -40(%rbp)
	jge	.LBB41_242
# %bb.238:                              # %if.then1875
                                        #   in Loop: Header=BB41_218 Depth=3
	cmpl	$1, -128(%rbp)
	jne	.LBB41_240
# %bb.239:                              # %if.then1878
                                        #   in Loop: Header=BB41_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -140(%rbp)
	jmp	.LBB41_241
.LBB41_240:                             # %if.else1893
                                        #   in Loop: Header=BB41_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -140(%rbp)
.LBB41_241:                             # %if.end1908
                                        #   in Loop: Header=BB41_218 Depth=3
	jmp	.LBB41_246
.LBB41_242:                             # %if.else1909
                                        #   in Loop: Header=BB41_218 Depth=3
	cmpl	$1, -128(%rbp)
	jne	.LBB41_244
# %bb.243:                              # %if.then1912
                                        #   in Loop: Header=BB41_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -140(%rbp)
	jmp	.LBB41_245
.LBB41_244:                             # %if.else1924
                                        #   in Loop: Header=BB41_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -140(%rbp)
.LBB41_245:                             # %if.end1936
                                        #   in Loop: Header=BB41_218 Depth=3
	jmp	.LBB41_246
.LBB41_246:                             # %if.end1937
                                        #   in Loop: Header=BB41_218 Depth=3
	jmp	.LBB41_247
.LBB41_247:                             # %if.end1938
                                        #   in Loop: Header=BB41_218 Depth=3
	jmp	.LBB41_248
.LBB41_248:                             # %if.end1939
                                        #   in Loop: Header=BB41_218 Depth=3
	cmpl	$0, -104(%rbp)
	jne	.LBB41_250
# %bb.249:                              # %if.then1941
                                        #   in Loop: Header=BB41_218 Depth=3
	movl	-140(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB41_250:                             # %if.end1949
                                        #   in Loop: Header=BB41_218 Depth=3
	jmp	.LBB41_251
.LBB41_251:                             # %for.inc1950
                                        #   in Loop: Header=BB41_218 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB41_218
.LBB41_252:                             # %for.end1952
                                        #   in Loop: Header=BB41_216 Depth=2
	movq	-232(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.253:                              # %for.inc1955
                                        #   in Loop: Header=BB41_216 Depth=2
	movl	-116(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB41_216
.LBB41_254:                             # %for.end1957
                                        #   in Loop: Header=BB41_214 Depth=1
	jmp	.LBB41_255
.LBB41_255:                             # %for.inc1958
                                        #   in Loop: Header=BB41_214 Depth=1
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB41_214
.LBB41_256:                             # %for.end1960
	cmpl	$4, -196(%rbp)
	jge	.LBB41_278
# %bb.257:                              # %land.lhs.true1963
	cmpl	$0, -104(%rbp)
	jne	.LBB41_278
# %bb.258:                              # %if.then1965
	movl	$0, -208(%rbp)
	movl	$0, -112(%rbp)
.LBB41_259:                             # %for.cond1966
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_261 Depth 2
                                        #       Child Loop BB41_265 Depth 3
	movl	-112(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB41_277
# %bb.260:                              # %for.body1971
                                        #   in Loop: Header=BB41_259 Depth=1
	movl	$0, -116(%rbp)
.LBB41_261:                             # %for.cond1972
                                        #   Parent Loop BB41_259 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_265 Depth 3
	cmpl	$4, -116(%rbp)
	jge	.LBB41_275
# %bb.262:                              # %for.body1975
                                        #   in Loop: Header=BB41_261 Depth=2
	movslq	-144(%rbp), %rax
	shlq	$4, %rax
	movabsq	$hor_offset, %rcx
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -24(%rbp)
	movslq	-144(%rbp), %rax
	shlq	$4, %rax
	movabsq	$ver_offset, %rcx
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$4, %ecx
	addl	-200(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -232(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$4, %ecx
	addl	-200(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -392(%rbp)
	cmpl	$0, -204(%rbp)
	jne	.LBB41_264
# %bb.263:                              # %if.then2008
                                        #   in Loop: Header=BB41_261 Depth=2
	movslq	-144(%rbp), %rax
	movq	-432(%rbp,%rax,8), %rax
	movl	-20(%rbp), %edx
	movl	-144(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $rcx
	shlq	%cl, %rax
	xorq	$-1, %rax
	movq	-192(%rbp), %rcx
	andq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
.LBB41_264:                             # %if.end2016
                                        #   in Loop: Header=BB41_261 Depth=2
	movq	-232(%rbp), %rax
	movl	$0, (%rax)
	movl	$1, -36(%rbp)
.LBB41_265:                             # %for.cond2018
                                        #   Parent Loop BB41_259 Depth=1
                                        #     Parent Loop BB41_261 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -36(%rbp)
	jge	.LBB41_273
# %bb.266:                              # %for.body2021
                                        #   in Loop: Header=BB41_265 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB41_269
# %bb.267:                              # %lor.lhs.false2024
                                        #   in Loop: Header=BB41_265 Depth=3
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB41_270
# %bb.268:                              # %land.lhs.true2027
                                        #   in Loop: Header=BB41_265 Depth=3
	movq	-192(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB41_270
.LBB41_269:                             # %if.then2030
                                        #   in Loop: Header=BB41_265 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_271
.LBB41_270:                             # %if.else2039
                                        #   in Loop: Header=BB41_265 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB41_271:                             # %if.end2048
                                        #   in Loop: Header=BB41_265 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	$0, (%rax,%rcx,4)
	movq	-232(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.272:                              # %for.inc2058
                                        #   in Loop: Header=BB41_265 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB41_265
.LBB41_273:                             # %for.end2060
                                        #   in Loop: Header=BB41_261 Depth=2
	jmp	.LBB41_274
.LBB41_274:                             # %for.inc2061
                                        #   in Loop: Header=BB41_261 Depth=2
	movl	-116(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB41_261
.LBB41_275:                             # %for.end2063
                                        #   in Loop: Header=BB41_259 Depth=1
	jmp	.LBB41_276
.LBB41_276:                             # %for.inc2064
                                        #   in Loop: Header=BB41_259 Depth=1
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB41_259
.LBB41_277:                             # %for.end2066
	jmp	.LBB41_278
.LBB41_278:                             # %if.end2067
	cmpl	$2, -208(%rbp)
	jne	.LBB41_280
# %bb.279:                              # %if.then2070
	movl	$2, -132(%rbp)
.LBB41_280:                             # %if.end2071
	movl	$0, -28(%rbp)
.LBB41_281:                             # %for.cond2072
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_285 Depth 2
                                        #       Child Loop BB41_287 Depth 3
                                        #         Child Loop BB41_289 Depth 4
                                        #         Child Loop BB41_293 Depth 4
                                        #       Child Loop BB41_299 Depth 3
                                        #         Child Loop BB41_303 Depth 4
                                        #         Child Loop BB41_307 Depth 4
	xorl	%eax, %eax
	movl	-28(%rbp), %ecx
	movq	img, %rdx
	cmpl	72712(%rdx), %ecx
	jge	.LBB41_283
# %bb.282:                              # %land.rhs2076
                                        #   in Loop: Header=BB41_281 Depth=1
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB41_283:                             # %land.end2079
                                        #   in Loop: Header=BB41_281 Depth=1
	testb	$1, %al
	jne	.LBB41_284
	jmp	.LBB41_340
.LBB41_284:                             # %for.body2081
                                        #   in Loop: Header=BB41_281 Depth=1
	movl	$0, -24(%rbp)
.LBB41_285:                             # %for.cond2082
                                        #   Parent Loop BB41_281 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_287 Depth 3
                                        #         Child Loop BB41_289 Depth 4
                                        #         Child Loop BB41_293 Depth 4
                                        #       Child Loop BB41_299 Depth 3
                                        #         Child Loop BB41_303 Depth 4
                                        #         Child Loop BB41_307 Depth 4
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB41_338
# %bb.286:                              # %for.body2086
                                        #   in Loop: Header=BB41_285 Depth=2
	movl	$0, -12(%rbp)
.LBB41_287:                             # %for.cond2087
                                        #   Parent Loop BB41_281 Depth=1
                                        #     Parent Loop BB41_285 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB41_289 Depth 4
                                        #         Child Loop BB41_293 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB41_298
# %bb.288:                              # %for.body2090
                                        #   in Loop: Header=BB41_287 Depth=3
	movl	$0, -16(%rbp)
.LBB41_289:                             # %for.cond2091
                                        #   Parent Loop BB41_281 Depth=1
                                        #     Parent Loop BB41_285 Depth=2
                                        #       Parent Loop BB41_287 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB41_292
# %bb.290:                              # %for.body2094
                                        #   in Loop: Header=BB41_289 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.291:                              # %for.inc2104
                                        #   in Loop: Header=BB41_289 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_289
.LBB41_292:                             # %for.end2106
                                        #   in Loop: Header=BB41_287 Depth=3
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB41_293:                             # %for.cond2125
                                        #   Parent Loop BB41_281 Depth=1
                                        #     Parent Loop BB41_285 Depth=2
                                        #       Parent Loop BB41_287 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB41_296
# %bb.294:                              # %for.body2128
                                        #   in Loop: Header=BB41_293 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-120(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.295:                              # %for.inc2154
                                        #   in Loop: Header=BB41_293 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_293
.LBB41_296:                             # %for.end2156
                                        #   in Loop: Header=BB41_287 Depth=3
	jmp	.LBB41_297
.LBB41_297:                             # %for.inc2157
                                        #   in Loop: Header=BB41_287 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_287
.LBB41_298:                             # %for.end2159
                                        #   in Loop: Header=BB41_285 Depth=2
	movl	$0, -16(%rbp)
.LBB41_299:                             # %for.cond2160
                                        #   Parent Loop BB41_281 Depth=1
                                        #     Parent Loop BB41_285 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB41_303 Depth 4
                                        #         Child Loop BB41_307 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB41_301
# %bb.300:                              # %land.rhs2163
                                        #   in Loop: Header=BB41_299 Depth=3
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB41_301:                             # %land.end2166
                                        #   in Loop: Header=BB41_299 Depth=3
	testb	$1, %al
	jne	.LBB41_302
	jmp	.LBB41_336
.LBB41_302:                             # %for.body2168
                                        #   in Loop: Header=BB41_299 Depth=3
	movl	$0, -12(%rbp)
.LBB41_303:                             # %for.cond2169
                                        #   Parent Loop BB41_281 Depth=1
                                        #     Parent Loop BB41_285 Depth=2
                                        #       Parent Loop BB41_299 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB41_306
# %bb.304:                              # %for.body2172
                                        #   in Loop: Header=BB41_303 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.305:                              # %for.inc2182
                                        #   in Loop: Header=BB41_303 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_303
.LBB41_306:                             # %for.end2184
                                        #   in Loop: Header=BB41_299 Depth=3
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB41_307:                             # %for.cond2203
                                        #   Parent Loop BB41_281 Depth=1
                                        #     Parent Loop BB41_285 Depth=2
                                        #       Parent Loop BB41_299 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB41_334
# %bb.308:                              # %for.body2206
                                        #   in Loop: Header=BB41_307 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB41_328
# %bb.309:                              # %if.then2209
                                        #   in Loop: Header=BB41_307 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72688(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-68(%rbp), %rsi
	addl	-96(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-24(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-28(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB41_311
# %bb.310:                              # %cond.true2230
                                        #   in Loop: Header=BB41_307 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB41_312
.LBB41_311:                             # %cond.false2231
                                        #   in Loop: Header=BB41_307 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-68(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB41_312:                             # %cond.end2250
                                        #   in Loop: Header=BB41_307 Depth=4
	cmpq	%rcx, %rax
	jge	.LBB41_314
# %bb.313:                              # %cond.true2254
                                        #   in Loop: Header=BB41_307 Depth=4
	movq	img, %rax
	movslq	72688(%rax), %rax
	jmp	.LBB41_318
.LBB41_314:                             # %cond.false2257
                                        #   in Loop: Header=BB41_307 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-68(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB41_316
# %bb.315:                              # %cond.true2278
                                        #   in Loop: Header=BB41_307 Depth=4
	xorl	%eax, %eax
	jmp	.LBB41_317
.LBB41_316:                             # %cond.false2279
                                        #   in Loop: Header=BB41_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB41_317:                             # %cond.end2298
                                        #   in Loop: Header=BB41_307 Depth=4
.LBB41_318:                             # %cond.end2300
                                        #   in Loop: Header=BB41_307 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movslq	72688(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-68(%rbp), %rsi
	subl	-96(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-24(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-28(%rbp), %edi
	addl	-68(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB41_320
# %bb.319:                              # %cond.true2332
                                        #   in Loop: Header=BB41_307 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB41_321
.LBB41_320:                             # %cond.false2333
                                        #   in Loop: Header=BB41_307 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-68(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-68(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB41_321:                             # %cond.end2352
                                        #   in Loop: Header=BB41_307 Depth=4
	cmpq	%rcx, %rax
	jge	.LBB41_323
# %bb.322:                              # %cond.true2356
                                        #   in Loop: Header=BB41_307 Depth=4
	movq	img, %rax
	movslq	72688(%rax), %rax
	jmp	.LBB41_327
.LBB41_323:                             # %cond.false2359
                                        #   in Loop: Header=BB41_307 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-68(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-68(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB41_325
# %bb.324:                              # %cond.true2380
                                        #   in Loop: Header=BB41_307 Depth=4
	xorl	%eax, %eax
	jmp	.LBB41_326
.LBB41_325:                             # %cond.false2381
                                        #   in Loop: Header=BB41_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB41_326:                             # %cond.end2400
                                        #   in Loop: Header=BB41_307 Depth=4
.LBB41_327:                             # %cond.end2402
                                        #   in Loop: Header=BB41_307 Depth=4
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB41_332
.LBB41_328:                             # %if.else2412
                                        #   in Loop: Header=BB41_307 Depth=4
	cmpl	$0, -104(%rbp)
	je	.LBB41_330
# %bb.329:                              # %if.then2414
                                        #   in Loop: Header=BB41_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB41_331
.LBB41_330:                             # %if.else2439
                                        #   in Loop: Header=BB41_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB41_331:                             # %if.end2468
                                        #   in Loop: Header=BB41_307 Depth=4
	jmp	.LBB41_332
.LBB41_332:                             # %if.end2469
                                        #   in Loop: Header=BB41_307 Depth=4
	jmp	.LBB41_333
.LBB41_333:                             # %for.inc2470
                                        #   in Loop: Header=BB41_307 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_307
.LBB41_334:                             # %for.end2472
                                        #   in Loop: Header=BB41_299 Depth=3
	jmp	.LBB41_335
.LBB41_335:                             # %for.inc2473
                                        #   in Loop: Header=BB41_299 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_299
.LBB41_336:                             # %for.end2475
                                        #   in Loop: Header=BB41_285 Depth=2
	jmp	.LBB41_337
.LBB41_337:                             # %for.inc2476
                                        #   in Loop: Header=BB41_285 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB41_285
.LBB41_338:                             # %for.end2478
                                        #   in Loop: Header=BB41_281 Depth=1
	jmp	.LBB41_339
.LBB41_339:                             # %for.inc2479
                                        #   in Loop: Header=BB41_281 Depth=1
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB41_281
.LBB41_340:                             # %for.end2481
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB41_353
# %bb.341:                              # %if.then2484
	movl	$0, -12(%rbp)
.LBB41_342:                             # %for.cond2485
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_344 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB41_352
# %bb.343:                              # %for.body2489
                                        #   in Loop: Header=BB41_342 Depth=1
	movl	$0, -16(%rbp)
.LBB41_344:                             # %for.cond2490
                                        #   Parent Loop BB41_342 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB41_350
# %bb.345:                              # %for.body2494
                                        #   in Loop: Header=BB41_344 Depth=2
	cmpl	$0, -104(%rbp)
	je	.LBB41_347
# %bb.346:                              # %if.then2496
                                        #   in Loop: Header=BB41_344 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB41_348
.LBB41_347:                             # %if.else2518
                                        #   in Loop: Header=BB41_344 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB41_348:                             # %if.end2536
                                        #   in Loop: Header=BB41_344 Depth=2
	jmp	.LBB41_349
.LBB41_349:                             # %for.inc2537
                                        #   in Loop: Header=BB41_344 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_344
.LBB41_350:                             # %for.end2539
                                        #   in Loop: Header=BB41_342 Depth=1
	jmp	.LBB41_351
.LBB41_351:                             # %for.inc2540
                                        #   in Loop: Header=BB41_342 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_342
.LBB41_352:                             # %for.end2542
	jmp	.LBB41_353
.LBB41_353:                             # %if.end2543
	movl	-132(%rbp), %ebx
	cmpl	$1201648768, -380(%rbp) # imm = 0x479FB480
	jne	.LBB41_355
.LBB41_354:
	movl	%ebx, %eax
	addq	$424, %rsp              # imm = 0x1A8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_355:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB41_354
.Lfunc_end41:
	.size	dct_chroma.32, .Lfunc_end41-dct_chroma.32
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function dct_luma_sp.33
.LCPI42_0:
	.quad	4616189618054758400     # double 4
.LCPI42_1:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI42_2:
	.quad	4611686018427387904     # double 2
.LCPI42_3:
	.quad	4613937818241073152     # double 3
	.text
	.globl	dct_luma_sp.33
	.p2align	4, 0x90
	.type	dct_luma_sp.33,@function
dct_luma_sp.33:                         # @dct_luma_sp.33
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -24
	vmovsd	.LCPI42_2(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI42_3(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$1378675590, -212(%rbp) # imm = 0x522CEB86
	movl	%edi, -128(%rbp)
	movl	%esi, -116(%rbp)
	movq	%rdx, -240(%rbp)
	movl	-128(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -192(%rbp)
	movl	-116(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -180(%rbp)
	movl	-180(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-192(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -184(%rbp)
	movl	-180(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-192(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -196(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-184(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-196(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -232(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-184(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-196(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -248(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -168(%rbp)
	movq	-168(%rbp), %rax
	movl	12(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI42_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI42_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmulsd	%xmm0, %xmm2, %xmm0
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -224(%rbp)
	movq	-168(%rbp), %rax
	movl	12(%rax), %eax
	subl	$0, %eax
	cltd
	movl	$6, %edi
	idivl	%edi
	movl	%eax, -132(%rbp)
	movq	-168(%rbp), %rax
	movl	12(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%edx, -104(%rbp)
	movl	-132(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -144(%rbp)
	movq	-168(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%eax, -200(%rbp)
	movq	-168(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%edx, -124(%rbp)
	movl	-200(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -140(%rbp)
	movl	-144(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %esi
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	idivl	%edi
	movl	%eax, -204(%rbp)
	movl	-140(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movl	%esi, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -208(%rbp)
	movl	$0, -12(%rbp)
.LBB42_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_3 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB42_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB42_1 Depth=1
	movl	$0, -16(%rbp)
.LBB42_3:                               # %for.cond38
                                        #   Parent Loop BB42_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB42_6
# %bb.4:                                # %for.body41
                                        #   in Loop: Header=BB42_3 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-128(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-116(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-128(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-116(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB42_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB42_3
.LBB42_6:                               # %for.end
                                        #   in Loop: Header=BB42_1 Depth=1
	jmp	.LBB42_7
.LBB42_7:                               # %for.inc66
                                        #   in Loop: Header=BB42_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_1
.LBB42_8:                               # %for.end68
	movl	$0, -12(%rbp)
.LBB42_9:                               # %for.cond69
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_11 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB42_16
# %bb.10:                               # %for.body72
                                        #   in Loop: Header=BB42_9 Depth=1
	movl	$0, -16(%rbp)
.LBB42_11:                              # %for.cond73
                                        #   Parent Loop BB42_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB42_14
# %bb.12:                               # %for.body76
                                        #   in Loop: Header=BB42_11 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.13:                               # %for.inc104
                                        #   in Loop: Header=BB42_11 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB42_11
.LBB42_14:                              # %for.end106
                                        #   in Loop: Header=BB42_9 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.15:                               # %for.inc137
                                        #   in Loop: Header=BB42_9 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_9
.LBB42_16:                              # %for.end139
	movl	$0, -16(%rbp)
.LBB42_17:                              # %for.cond140
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_19 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB42_24
# %bb.18:                               # %for.body143
                                        #   in Loop: Header=BB42_17 Depth=1
	movl	$0, -12(%rbp)
.LBB42_19:                              # %for.cond144
                                        #   Parent Loop BB42_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB42_22
# %bb.20:                               # %for.body147
                                        #   in Loop: Header=BB42_19 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-20(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.21:                               # %for.inc175
                                        #   in Loop: Header=BB42_19 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_19
.LBB42_22:                              # %for.end177
                                        #   in Loop: Header=BB42_17 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.23:                               # %for.inc208
                                        #   in Loop: Header=BB42_17 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB42_17
.LBB42_24:                              # %for.end210
	movl	$0, -12(%rbp)
.LBB42_25:                              # %for.cond211
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_27 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB42_32
# %bb.26:                               # %for.body214
                                        #   in Loop: Header=BB42_25 Depth=1
	movl	$0, -16(%rbp)
.LBB42_27:                              # %for.cond215
                                        #   Parent Loop BB42_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB42_30
# %bb.28:                               # %for.body218
                                        #   in Loop: Header=BB42_27 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.29:                               # %for.inc242
                                        #   in Loop: Header=BB42_27 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB42_27
.LBB42_30:                              # %for.end244
                                        #   in Loop: Header=BB42_25 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -320(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -288(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -304(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
# %bb.31:                               # %for.inc271
                                        #   in Loop: Header=BB42_25 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_25
.LBB42_32:                              # %for.end273
	movl	$0, -16(%rbp)
.LBB42_33:                              # %for.cond274
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_35 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB42_40
# %bb.34:                               # %for.body277
                                        #   in Loop: Header=BB42_33 Depth=1
	movl	$0, -12(%rbp)
.LBB42_35:                              # %for.cond278
                                        #   Parent Loop BB42_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB42_38
# %bb.36:                               # %for.body281
                                        #   in Loop: Header=BB42_35 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-20(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.37:                               # %for.inc305
                                        #   in Loop: Header=BB42_35 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_35
.LBB42_38:                              # %for.end307
                                        #   in Loop: Header=BB42_33 Depth=1
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-320(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.39:                               # %for.inc334
                                        #   in Loop: Header=BB42_33 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB42_33
.LBB42_40:                              # %for.end336
	movl	$0, -188(%rbp)
	movl	$-1, -68(%rbp)
	movl	$0, -108(%rbp)
	movl	$0, -64(%rbp)
.LBB42_41:                              # %for.cond337
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -64(%rbp)
	jge	.LBB42_80
# %bb.42:                               # %for.body340
                                        #   in Loop: Header=BB42_41 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB42_45
# %bb.43:                               # %lor.lhs.false
                                        #   in Loop: Header=BB42_41 Depth=1
	cmpl	$0, mb_adaptive
	je	.LBB42_46
# %bb.44:                               # %land.lhs.true
                                        #   in Loop: Header=BB42_41 Depth=1
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB42_46
.LBB42_45:                              # %if.then
                                        #   in Loop: Header=BB42_41 Depth=1
	movslq	-64(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-64(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_47
.LBB42_46:                              # %if.else
                                        #   in Loop: Header=BB42_41 Depth=1
	movslq	-64(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-64(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB42_47:                              # %if.end
                                        #   in Loop: Header=BB42_41 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -100(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-124(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-208(%rbp), %eax
	movl	-140(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	movl	-140(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-124(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	cltd
	idivl	(%rsi,%rcx,4)
	movl	%eax, -24(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-24(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -112(%rbp)
	movl	-112(%rbp), %edi
	callq	abs
	movslq	-104(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-204(%rbp), %eax
	movl	-144(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movl	%eax, -120(%rbp)
	movl	-120(%rbp), %edi
	callq	abs
	movslq	-104(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-204(%rbp), %eax
	movl	-144(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -56(%rbp)
	movl	-24(%rbp), %eax
	cmpl	-56(%rbp), %eax
	je	.LBB42_63
# %bb.48:                               # %land.lhs.true424
                                        #   in Loop: Header=BB42_41 Depth=1
	cmpl	$0, -24(%rbp)
	je	.LBB42_63
# %bb.49:                               # %land.lhs.true427
                                        #   in Loop: Header=BB42_41 Depth=1
	cmpl	$0, -56(%rbp)
	je	.LBB42_63
# %bb.50:                               # %if.then430
                                        #   in Loop: Header=BB42_41 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-24(%rbp), %edi
	movl	-112(%rbp), %esi
	callq	sign
	movslq	-104(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-132(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
	movl	-24(%rbp), %edi
	movl	-68(%rbp), %esi
	leaq	-148(%rbp), %rdx
	leaq	-216(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	-224(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-148(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-56(%rbp), %edi
	movl	-120(%rbp), %esi
	callq	sign
	movslq	-104(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-132(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -176(%rbp)
	movl	-56(%rbp), %edi
	movl	-68(%rbp), %esi
	leaq	-148(%rbp), %rdx
	leaq	-216(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-176(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-176(%rbp), %xmm0, %xmm0
	vmovsd	-224(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-148(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -176(%rbp)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-176(%rbp), %xmm0
	jne	.LBB42_55
	jp	.LBB42_55
# %bb.51:                               # %if.then495
                                        #   in Loop: Header=BB42_41 Depth=1
	movl	-24(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-56(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB42_53
# %bb.52:                               # %cond.true
                                        #   in Loop: Header=BB42_41 Depth=1
	movl	-24(%rbp), %eax
	jmp	.LBB42_54
.LBB42_53:                              # %cond.false
                                        #   in Loop: Header=BB42_41 Depth=1
	movl	-56(%rbp), %eax
.LBB42_54:                              # %cond.end
                                        #   in Loop: Header=BB42_41 Depth=1
	movl	%eax, -60(%rbp)
	jmp	.LBB42_59
.LBB42_55:                              # %if.else500
                                        #   in Loop: Header=BB42_41 Depth=1
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-176(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB42_57
# %bb.56:                               # %if.then503
                                        #   in Loop: Header=BB42_41 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB42_58
.LBB42_57:                              # %if.else504
                                        #   in Loop: Header=BB42_41 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB42_58:                              # %if.end505
                                        #   in Loop: Header=BB42_41 Depth=1
	jmp	.LBB42_59
.LBB42_59:                              # %if.end506
                                        #   in Loop: Header=BB42_41 Depth=1
	movl	-60(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jne	.LBB42_61
# %bb.60:                               # %cond.true509
                                        #   in Loop: Header=BB42_41 Depth=1
	movl	-112(%rbp), %eax
	jmp	.LBB42_62
.LBB42_61:                              # %cond.false510
                                        #   in Loop: Header=BB42_41 Depth=1
	movl	-120(%rbp), %eax
.LBB42_62:                              # %cond.end511
                                        #   in Loop: Header=BB42_41 Depth=1
	movl	%eax, -136(%rbp)
	jmp	.LBB42_73
.LBB42_63:                              # %if.else513
                                        #   in Loop: Header=BB42_41 Depth=1
	movl	-24(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jne	.LBB42_65
# %bb.64:                               # %if.then516
                                        #   in Loop: Header=BB42_41 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-112(%rbp), %eax
	movl	%eax, -136(%rbp)
	jmp	.LBB42_72
.LBB42_65:                              # %if.else517
                                        #   in Loop: Header=BB42_41 Depth=1
	cmpl	$0, -24(%rbp)
	jne	.LBB42_67
# %bb.66:                               # %cond.true520
                                        #   in Loop: Header=BB42_41 Depth=1
	movl	-24(%rbp), %eax
	jmp	.LBB42_68
.LBB42_67:                              # %cond.false521
                                        #   in Loop: Header=BB42_41 Depth=1
	movl	-56(%rbp), %eax
.LBB42_68:                              # %cond.end522
                                        #   in Loop: Header=BB42_41 Depth=1
	movl	%eax, -60(%rbp)
	cmpl	$0, -24(%rbp)
	jne	.LBB42_70
# %bb.69:                               # %cond.true526
                                        #   in Loop: Header=BB42_41 Depth=1
	movl	-112(%rbp), %eax
	jmp	.LBB42_71
.LBB42_70:                              # %cond.false527
                                        #   in Loop: Header=BB42_41 Depth=1
	movl	-120(%rbp), %eax
.LBB42_71:                              # %cond.end528
                                        #   in Loop: Header=BB42_41 Depth=1
	movl	%eax, -136(%rbp)
.LBB42_72:                              # %if.end530
                                        #   in Loop: Header=BB42_41 Depth=1
	jmp	.LBB42_73
.LBB42_73:                              # %if.end531
                                        #   in Loop: Header=BB42_41 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB42_78
# %bb.74:                               # %if.then534
                                        #   in Loop: Header=BB42_41 Depth=1
	movl	$1, -188(%rbp)
	cmpl	$1, -60(%rbp)
	jle	.LBB42_76
# %bb.75:                               # %if.then537
                                        #   in Loop: Header=BB42_41 Depth=1
	movq	-240(%rbp), %rax
	movl	(%rax), %ecx
	addl	$999999, %ecx           # imm = 0xF423F
	movl	%ecx, (%rax)
	jmp	.LBB42_77
.LBB42_76:                              # %if.else539
                                        #   in Loop: Header=BB42_41 Depth=1
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-68(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-240(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB42_77:                              # %if.end546
                                        #   in Loop: Header=BB42_41 Depth=1
	movl	-60(%rbp), %edi
	movl	-136(%rbp), %esi
	callq	sign
	movq	-232(%rbp), %rcx
	movslq	-108(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	movq	-248(%rbp), %rcx
	movslq	-108(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	movl	$-1, -68(%rbp)
	movl	-60(%rbp), %edi
	movl	-136(%rbp), %esi
	callq	sign
	movslq	-104(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-132(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	movl	%eax, -100(%rbp)
.LBB42_78:                              # %if.end568
                                        #   in Loop: Header=BB42_41 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	-100(%rbp), %eax
	movl	%eax, -100(%rbp)
	movl	-100(%rbp), %edi
	callq	abs
	movslq	-124(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-208(%rbp), %eax
	movl	-140(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-100(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-124(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-200(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.79:                               # %for.inc598
                                        #   in Loop: Header=BB42_41 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB42_41
.LBB42_80:                              # %for.end600
	movq	-232(%rbp), %rax
	movslq	-108(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB42_81:                              # %for.cond603
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_83 Depth 2
                                        #     Child Loop BB42_87 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB42_92
# %bb.82:                               # %for.body606
                                        #   in Loop: Header=BB42_81 Depth=1
	movl	$0, -16(%rbp)
.LBB42_83:                              # %for.cond607
                                        #   Parent Loop BB42_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB42_86
# %bb.84:                               # %for.body610
                                        #   in Loop: Header=BB42_83 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.85:                               # %for.inc618
                                        #   in Loop: Header=BB42_83 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB42_83
.LBB42_86:                              # %for.end620
                                        #   in Loop: Header=BB42_81 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB42_87:                              # %for.cond639
                                        #   Parent Loop BB42_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB42_90
# %bb.88:                               # %for.body642
                                        #   in Loop: Header=BB42_87 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.89:                               # %for.inc664
                                        #   in Loop: Header=BB42_87 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB42_87
.LBB42_90:                              # %for.end666
                                        #   in Loop: Header=BB42_81 Depth=1
	jmp	.LBB42_91
.LBB42_91:                              # %for.inc667
                                        #   in Loop: Header=BB42_81 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_81
.LBB42_92:                              # %for.end669
	movl	$0, -16(%rbp)
.LBB42_93:                              # %for.cond670
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_95 Depth 2
                                        #     Child Loop BB42_99 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB42_122
# %bb.94:                               # %for.body673
                                        #   in Loop: Header=BB42_93 Depth=1
	movl	$0, -12(%rbp)
.LBB42_95:                              # %for.cond674
                                        #   Parent Loop BB42_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB42_98
# %bb.96:                               # %for.body677
                                        #   in Loop: Header=BB42_95 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.97:                               # %for.inc685
                                        #   in Loop: Header=BB42_95 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_95
.LBB42_98:                              # %for.end687
                                        #   in Loop: Header=BB42_93 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB42_99:                              # %for.cond706
                                        #   Parent Loop BB42_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB42_120
# %bb.100:                              # %for.body709
                                        #   in Loop: Header=BB42_99 Depth=2
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	addl	-96(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB42_102
# %bb.101:                              # %cond.true720
                                        #   in Loop: Header=BB42_99 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB42_103
.LBB42_102:                             # %cond.false721
                                        #   in Loop: Header=BB42_99 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB42_103:                             # %cond.end729
                                        #   in Loop: Header=BB42_99 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB42_105
# %bb.104:                              # %cond.true733
                                        #   in Loop: Header=BB42_99 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB42_109
.LBB42_105:                             # %cond.false735
                                        #   in Loop: Header=BB42_99 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB42_107
# %bb.106:                              # %cond.true745
                                        #   in Loop: Header=BB42_99 Depth=2
	xorl	%eax, %eax
	jmp	.LBB42_108
.LBB42_107:                             # %cond.false746
                                        #   in Loop: Header=BB42_99 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB42_108:                             # %cond.end754
                                        #   in Loop: Header=BB42_99 Depth=2
.LBB42_109:                             # %cond.end756
                                        #   in Loop: Header=BB42_99 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	subl	-96(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB42_111
# %bb.110:                              # %cond.true773
                                        #   in Loop: Header=BB42_99 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB42_112
.LBB42_111:                             # %cond.false774
                                        #   in Loop: Header=BB42_99 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB42_112:                             # %cond.end782
                                        #   in Loop: Header=BB42_99 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB42_114
# %bb.113:                              # %cond.true786
                                        #   in Loop: Header=BB42_99 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB42_118
.LBB42_114:                             # %cond.false788
                                        #   in Loop: Header=BB42_99 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB42_116
# %bb.115:                              # %cond.true798
                                        #   in Loop: Header=BB42_99 Depth=2
	xorl	%eax, %eax
	jmp	.LBB42_117
.LBB42_116:                             # %cond.false799
                                        #   in Loop: Header=BB42_99 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB42_117:                             # %cond.end807
                                        #   in Loop: Header=BB42_99 Depth=2
.LBB42_118:                             # %cond.end809
                                        #   in Loop: Header=BB42_99 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.119:                              # %for.inc816
                                        #   in Loop: Header=BB42_99 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_99
.LBB42_120:                             # %for.end818
                                        #   in Loop: Header=BB42_93 Depth=1
	jmp	.LBB42_121
.LBB42_121:                             # %for.inc819
                                        #   in Loop: Header=BB42_93 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB42_93
.LBB42_122:                             # %for.end821
	movl	$0, -12(%rbp)
.LBB42_123:                             # %for.cond822
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_125 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB42_130
# %bb.124:                              # %for.body825
                                        #   in Loop: Header=BB42_123 Depth=1
	movl	$0, -16(%rbp)
.LBB42_125:                             # %for.cond826
                                        #   Parent Loop BB42_123 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB42_128
# %bb.126:                              # %for.body829
                                        #   in Loop: Header=BB42_125 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-116(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-128(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.127:                              # %for.inc844
                                        #   in Loop: Header=BB42_125 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB42_125
.LBB42_128:                             # %for.end846
                                        #   in Loop: Header=BB42_123 Depth=1
	jmp	.LBB42_129
.LBB42_129:                             # %for.inc847
                                        #   in Loop: Header=BB42_123 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_123
.LBB42_130:                             # %for.end849
	movl	-188(%rbp), %ebx
	cmpl	$1378675590, -212(%rbp) # imm = 0x522CEB86
	jne	.LBB42_132
.LBB42_131:
	movl	%ebx, %eax
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_132:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB42_131
.Lfunc_end42:
	.size	dct_luma_sp.33, .Lfunc_end42-dct_luma_sp.33
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma4x4.34        # -- Begin function dct_chroma4x4.34
	.p2align	4, 0x90
	.type	dct_chroma4x4.34,@function
dct_chroma4x4.34:                       # @dct_chroma4x4.34
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$201905772, -148(%rbp)  # imm = 0xC08D66C
	movl	%edi, -28(%rbp)
	movl	%esi, -88(%rbp)
	movl	%edx, -104(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %cl
	je	.LBB43_3
# %bb.1:                                # %lor.lhs.false
	movq	-144(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %cl
	je	.LBB43_3
# %bb.2:                                # %lor.rhs
	movq	-144(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%cl
.LBB43_3:                               # %lor.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -76(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-88(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-104(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -160(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-88(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-104(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -168(%rbp)
	movq	img, %rcx
	movl	40(%rcx), %ecx
	movq	img, %rdx
	addl	72668(%rdx), %ecx
	cmpl	$0, %ecx
	jne	.LBB43_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%al
.LBB43_5:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movslq	-28(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -80(%rbp)
	jge	.LBB43_7
# %bb.6:                                # %cond.true
	movl	-80(%rbp), %eax
	jmp	.LBB43_8
.LBB43_7:                               # %cond.false
	movl	-80(%rbp), %eax
	subl	$0, %eax
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB43_8:                               # %cond.end
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-80(%rbp), %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -32(%rbp)
	movl	-24(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -36(%rbp)
	jne	.LBB43_18
# %bb.9:                                # %if.then
	movl	$0, -12(%rbp)
.LBB43_10:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_12 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB43_17
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB43_10 Depth=1
	movl	$0, -16(%rbp)
.LBB43_12:                              # %for.cond31
                                        #   Parent Loop BB43_10 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB43_15
# %bb.13:                               # %for.body34
                                        #   in Loop: Header=BB43_12 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-68(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-68(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-68(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB43_12 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_12
.LBB43_15:                              # %for.end
                                        #   in Loop: Header=BB43_10 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.16:                               # %for.inc90
                                        #   in Loop: Header=BB43_10 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_10
.LBB43_17:                              # %for.end92
	jmp	.LBB43_18
.LBB43_18:                              # %if.end
	cmpl	$0, -36(%rbp)
	jne	.LBB43_28
# %bb.19:                               # %if.then94
	movl	$0, -16(%rbp)
.LBB43_20:                              # %for.cond95
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_22 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB43_27
# %bb.21:                               # %for.body98
                                        #   in Loop: Header=BB43_20 Depth=1
	movl	$0, -12(%rbp)
.LBB43_22:                              # %for.cond99
                                        #   Parent Loop BB43_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB43_25
# %bb.23:                               # %for.body102
                                        #   in Loop: Header=BB43_22 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-72(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-72(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-72(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.24:                               # %for.inc130
                                        #   in Loop: Header=BB43_22 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_22
.LBB43_25:                              # %for.end132
                                        #   in Loop: Header=BB43_20 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.26:                               # %for.inc163
                                        #   in Loop: Header=BB43_20 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_20
.LBB43_27:                              # %for.end165
	jmp	.LBB43_28
.LBB43_28:                              # %if.end166
	movl	$0, -132(%rbp)
	movl	$-1, -108(%rbp)
	movl	$0, -92(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB43_30
# %bb.29:                               # %if.then168
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movl	%eax, -20(%rbp)
	jmp	.LBB43_34
.LBB43_30:                              # %if.else
	cmpl	$1, -76(%rbp)
	jne	.LBB43_32
# %bb.31:                               # %if.then174
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-28(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movl	-100(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB43_33
.LBB43_32:                              # %if.else193
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-28(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movl	-100(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
.LBB43_33:                              # %if.end213
	jmp	.LBB43_34
.LBB43_34:                              # %if.end214
	movl	-28(%rbp), %eax
	addl	$1, %eax
	shll	$2, %eax
	movl	-88(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -88(%rbp)
	movl	-20(%rbp), %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movl	%eax, %ecx
	movslq	-28(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level_temp, %rdi
	addq	%rax, %rdi
	movl	-88(%rbp), %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %esi
	shll	$1, %esi
	movl	-104(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-88(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %esi
	shll	$1, %esi
	movl	-104(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%ecx, (%rdi,%rax,4)
	cmpl	$0, -36(%rbp)
	je	.LBB43_36
# %bb.35:                               # %if.then237
	movl	-20(%rbp), %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB43_46
.LBB43_36:                              # %if.else245
	cmpl	$4, -24(%rbp)
	jge	.LBB43_41
# %bb.37:                               # %if.then248
	cmpl	$1, -76(%rbp)
	jne	.LBB43_39
# %bb.38:                               # %if.then251
	movl	-20(%rbp), %edi
	movslq	-28(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	$3, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	addl	%eax, %edi
	movl	$4, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB43_40
.LBB43_39:                              # %if.else270
	movl	-20(%rbp), %edi
	movslq	-28(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	$3, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	addl	%eax, %edi
	movl	$4, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
.LBB43_40:                              # %if.end290
	jmp	.LBB43_45
.LBB43_41:                              # %if.else291
	cmpl	$1, -76(%rbp)
	jne	.LBB43_43
# %bb.42:                               # %if.then294
	movl	-20(%rbp), %edi
	movslq	-28(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	-24(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB43_44
.LBB43_43:                              # %if.else311
	movl	-20(%rbp), %edi
	movslq	-28(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	-24(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
.LBB43_44:                              # %if.end328
	jmp	.LBB43_45
.LBB43_45:                              # %if.end329
	jmp	.LBB43_46
.LBB43_46:                              # %if.end330
	movl	$1, -96(%rbp)
.LBB43_47:                              # %for.cond331
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -96(%rbp)
	jge	.LBB43_75
# %bb.48:                               # %for.body334
                                        #   in Loop: Header=BB43_47 Depth=1
	movslq	-96(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-96(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	movl	$0, -84(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB43_50
# %bb.49:                               # %if.then345
                                        #   in Loop: Header=BB43_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -20(%rbp)
	jmp	.LBB43_54
.LBB43_50:                              # %if.else352
                                        #   in Loop: Header=BB43_47 Depth=1
	cmpl	$1, -76(%rbp)
	jne	.LBB43_52
# %bb.51:                               # %if.then355
                                        #   in Loop: Header=BB43_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-28(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-100(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB43_53
.LBB43_52:                              # %if.else381
                                        #   in Loop: Header=BB43_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-28(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-100(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
.LBB43_53:                              # %if.end407
                                        #   in Loop: Header=BB43_47 Depth=1
	jmp	.LBB43_54
.LBB43_54:                              # %if.end408
                                        #   in Loop: Header=BB43_47 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB43_71
# %bb.55:                               # %if.then411
                                        #   in Loop: Header=BB43_47 Depth=1
	cmpl	$0, -16(%rbp)
	jne	.LBB43_57
# %bb.56:                               # %lor.lhs.false413
                                        #   in Loop: Header=BB43_47 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB43_58
.LBB43_57:                              # %if.then415
                                        #   in Loop: Header=BB43_47 Depth=1
	movl	$1, -132(%rbp)
.LBB43_58:                              # %if.end416
                                        #   in Loop: Header=BB43_47 Depth=1
	movl	-20(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-160(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-108(%rbp), %eax
	movq	-168(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	movl	$-1, -108(%rbp)
	movl	-20(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -20(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB43_60
# %bb.59:                               # %if.then435
                                        #   in Loop: Header=BB43_47 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB43_70
.LBB43_60:                              # %if.else436
                                        #   in Loop: Header=BB43_47 Depth=1
	cmpl	$4, -24(%rbp)
	jge	.LBB43_65
# %bb.61:                               # %if.then439
                                        #   in Loop: Header=BB43_47 Depth=1
	cmpl	$1, -76(%rbp)
	jne	.LBB43_63
# %bb.62:                               # %if.then442
                                        #   in Loop: Header=BB43_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB43_64
.LBB43_63:                              # %if.else457
                                        #   in Loop: Header=BB43_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -84(%rbp)
.LBB43_64:                              # %if.end472
                                        #   in Loop: Header=BB43_47 Depth=1
	jmp	.LBB43_69
.LBB43_65:                              # %if.else473
                                        #   in Loop: Header=BB43_47 Depth=1
	cmpl	$1, -76(%rbp)
	jne	.LBB43_67
# %bb.66:                               # %if.then476
                                        #   in Loop: Header=BB43_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-24(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB43_68
.LBB43_67:                              # %if.else488
                                        #   in Loop: Header=BB43_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-24(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -84(%rbp)
.LBB43_68:                              # %if.end500
                                        #   in Loop: Header=BB43_47 Depth=1
	jmp	.LBB43_69
.LBB43_69:                              # %if.end501
                                        #   in Loop: Header=BB43_47 Depth=1
	jmp	.LBB43_70
.LBB43_70:                              # %if.end502
                                        #   in Loop: Header=BB43_47 Depth=1
	jmp	.LBB43_71
.LBB43_71:                              # %if.end503
                                        #   in Loop: Header=BB43_47 Depth=1
	cmpl	$0, -36(%rbp)
	jne	.LBB43_73
# %bb.72:                               # %if.then505
                                        #   in Loop: Header=BB43_47 Depth=1
	movl	-84(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB43_73:                              # %if.end511
                                        #   in Loop: Header=BB43_47 Depth=1
	jmp	.LBB43_74
.LBB43_74:                              # %for.inc512
                                        #   in Loop: Header=BB43_47 Depth=1
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB43_47
.LBB43_75:                              # %for.end514
	movq	-160(%rbp), %rax
	movslq	-92(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	cmpl	$0, -36(%rbp)
	jne	.LBB43_89
# %bb.76:                               # %if.then518
	movl	$0, -12(%rbp)
.LBB43_77:                              # %for.cond519
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_79 Depth 2
                                        #     Child Loop BB43_83 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB43_88
# %bb.78:                               # %for.body522
                                        #   in Loop: Header=BB43_77 Depth=1
	movl	$0, -16(%rbp)
.LBB43_79:                              # %for.cond523
                                        #   Parent Loop BB43_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB43_82
# %bb.80:                               # %for.body526
                                        #   in Loop: Header=BB43_79 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.81:                               # %for.inc534
                                        #   in Loop: Header=BB43_79 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_79
.LBB43_82:                              # %for.end536
                                        #   in Loop: Header=BB43_77 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -16(%rbp)
.LBB43_83:                              # %for.cond555
                                        #   Parent Loop BB43_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB43_86
# %bb.84:                               # %for.body558
                                        #   in Loop: Header=BB43_83 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -68(%rbp)
	movslq	-16(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-68(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.85:                               # %for.inc580
                                        #   in Loop: Header=BB43_83 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_83
.LBB43_86:                              # %for.end582
                                        #   in Loop: Header=BB43_77 Depth=1
	jmp	.LBB43_87
.LBB43_87:                              # %for.inc583
                                        #   in Loop: Header=BB43_77 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_77
.LBB43_88:                              # %for.end585
	jmp	.LBB43_89
.LBB43_89:                              # %if.end586
	cmpl	$0, -36(%rbp)
	jne	.LBB43_103
# %bb.90:                               # %if.then588
	movl	$0, -16(%rbp)
.LBB43_91:                              # %for.cond589
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_93 Depth 2
                                        #     Child Loop BB43_97 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB43_102
# %bb.92:                               # %for.body592
                                        #   in Loop: Header=BB43_91 Depth=1
	movl	$0, -12(%rbp)
.LBB43_93:                              # %for.cond593
                                        #   Parent Loop BB43_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB43_96
# %bb.94:                               # %for.body596
                                        #   in Loop: Header=BB43_93 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.95:                               # %for.inc604
                                        #   in Loop: Header=BB43_93 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_93
.LBB43_96:                              # %for.end606
                                        #   in Loop: Header=BB43_91 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -12(%rbp)
.LBB43_97:                              # %for.cond625
                                        #   Parent Loop BB43_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB43_100
# %bb.98:                               # %for.body628
                                        #   in Loop: Header=BB43_97 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movslq	-12(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.99:                               # %for.inc654
                                        #   in Loop: Header=BB43_97 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_97
.LBB43_100:                             # %for.end656
                                        #   in Loop: Header=BB43_91 Depth=1
	jmp	.LBB43_101
.LBB43_101:                             # %for.inc657
                                        #   in Loop: Header=BB43_91 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_91
.LBB43_102:                             # %for.end659
	jmp	.LBB43_103
.LBB43_103:                             # %if.end660
	movl	-132(%rbp), %ebx
	cmpl	$201905772, -148(%rbp)  # imm = 0xC08D66C
	jne	.LBB43_105
.LBB43_104:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB43_105:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB43_104
.Lfunc_end43:
	.size	dct_chroma4x4.34, .Lfunc_end43-dct_chroma4x4.34
	.cfi_endproc
                                        # -- End function
	.globl	intrapred_luma_16x16.35 # -- Begin function intrapred_luma_16x16.35
	.p2align	4, 0x90
	.type	intrapred_luma_16x16.35,@function
intrapred_luma_16x16.35:                # @intrapred_luma_16x16.35
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$640, %rsp              # imm = 0x280
	movl	$1193745069, -92(%rbp)  # imm = 0x47271AAD
	movl	$0, -28(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -60(%rbp)
	movl	$0, -4(%rbp)
.LBB44_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -4(%rbp)
	jge	.LBB44_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	-60(%rbp), %edi
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-512(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_1
.LBB44_4:                               # %for.end
	movl	-60(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	leaq	-88(%rbp), %r8
	callq	getNeighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	jne	.LBB44_6
# %bb.5:                                # %if.then
	movl	-88(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	-488(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-512(%rbp), %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB44_20
.LBB44_6:                               # %if.else
	cmpl	$0, -88(%rbp)
	je	.LBB44_8
# %bb.7:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-84(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB44_9
.LBB44_8:                               # %cond.false
	xorl	%eax, %eax
	jmp	.LBB44_9
.LBB44_9:                               # %cond.end
	movl	%eax, -16(%rbp)
	movl	$1, -4(%rbp)
	movl	$1, -12(%rbp)
.LBB44_10:                              # %for.cond9
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -4(%rbp)
	jge	.LBB44_16
# %bb.11:                               # %for.body11
                                        #   in Loop: Header=BB44_10 Depth=1
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-512(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB44_13
# %bb.12:                               # %cond.true16
                                        #   in Loop: Header=BB44_10 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB44_14
.LBB44_13:                              # %cond.false23
                                        #   in Loop: Header=BB44_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB44_14
.LBB44_14:                              # %cond.end24
                                        #   in Loop: Header=BB44_10 Depth=1
	andl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.15:                               # %for.inc26
                                        #   in Loop: Header=BB44_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_10
.LBB44_16:                              # %for.end28
	cmpl	$0, -512(%rbp)
	je	.LBB44_18
# %bb.17:                               # %cond.true32
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-508(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB44_19
.LBB44_18:                              # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB44_19
.LBB44_19:                              # %cond.end39
	movl	%eax, -64(%rbp)
.LBB44_20:                              # %if.end
	movl	$0, -44(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -4(%rbp)
.LBB44_21:                              # %for.cond41
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -4(%rbp)
	jge	.LBB44_28
# %bb.22:                               # %for.body43
                                        #   in Loop: Header=BB44_21 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB44_24
# %bb.23:                               # %if.then45
                                        #   in Loop: Header=BB44_21 Depth=1
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB44_24:                              # %if.end51
                                        #   in Loop: Header=BB44_21 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB44_26
# %bb.25:                               # %if.then53
                                        #   in Loop: Header=BB44_21 Depth=1
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB44_26:                              # %if.end68
                                        #   in Loop: Header=BB44_21 Depth=1
	jmp	.LBB44_27
.LBB44_27:                              # %for.inc69
                                        #   in Loop: Header=BB44_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_21
.LBB44_28:                              # %for.end71
	cmpl	$0, -16(%rbp)
	je	.LBB44_31
# %bb.29:                               # %land.lhs.true
	cmpl	$0, -12(%rbp)
	je	.LBB44_31
# %bb.30:                               # %if.then74
	movl	-36(%rbp), %eax
	addl	-44(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
.LBB44_31:                              # %if.end77
	cmpl	$0, -16(%rbp)
	jne	.LBB44_34
# %bb.32:                               # %land.lhs.true79
	cmpl	$0, -12(%rbp)
	je	.LBB44_34
# %bb.33:                               # %if.then81
	movl	-44(%rbp), %eax
	addl	$8, %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
.LBB44_34:                              # %if.end84
	cmpl	$0, -16(%rbp)
	je	.LBB44_37
# %bb.35:                               # %land.lhs.true86
	cmpl	$0, -12(%rbp)
	jne	.LBB44_37
# %bb.36:                               # %if.then88
	movl	-36(%rbp), %eax
	addl	$8, %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
.LBB44_37:                              # %if.end91
	cmpl	$0, -16(%rbp)
	jne	.LBB44_40
# %bb.38:                               # %land.lhs.true93
	cmpl	$0, -12(%rbp)
	jne	.LBB44_40
# %bb.39:                               # %if.then95
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -28(%rbp)
.LBB44_40:                              # %if.end96
	movl	$0, -4(%rbp)
.LBB44_41:                              # %for.cond97
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -4(%rbp)
	jge	.LBB44_48
# %bb.42:                               # %for.body100
                                        #   in Loop: Header=BB44_41 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB44_44
# %bb.43:                               # %if.then102
                                        #   in Loop: Header=BB44_41 Depth=1
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -640(%rbp,%rcx,8)
.LBB44_44:                              # %if.end114
                                        #   in Loop: Header=BB44_41 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB44_46
# %bb.45:                               # %if.then116
                                        #   in Loop: Header=BB44_41 Depth=1
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -636(%rbp,%rcx,8)
.LBB44_46:                              # %if.end133
                                        #   in Loop: Header=BB44_41 Depth=1
	jmp	.LBB44_47
.LBB44_47:                              # %for.inc134
                                        #   in Loop: Header=BB44_41 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_41
.LBB44_48:                              # %for.end136
	movl	$0, -8(%rbp)
.LBB44_49:                              # %for.cond137
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_51 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB44_56
# %bb.50:                               # %for.body140
                                        #   in Loop: Header=BB44_49 Depth=1
	movl	$0, -4(%rbp)
.LBB44_51:                              # %for.cond141
                                        #   Parent Loop BB44_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB44_54
# %bb.52:                               # %for.body144
                                        #   in Loop: Header=BB44_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-640(%rbp,%rax,8), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-8(%rbp), %rax
	movl	-636(%rbp,%rax,8), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$512, %rcx              # imm = 0x200
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	-28(%rbp), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$1024, %rcx             # imm = 0x400
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.53:                               # %for.inc171
                                        #   in Loop: Header=BB44_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_51
.LBB44_54:                              # %for.end173
                                        #   in Loop: Header=BB44_49 Depth=1
	jmp	.LBB44_55
.LBB44_55:                              # %for.inc174
                                        #   in Loop: Header=BB44_49 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_49
.LBB44_56:                              # %for.end176
	cmpl	$0, -16(%rbp)
	je	.LBB44_59
# %bb.57:                               # %lor.lhs.false
	cmpl	$0, -12(%rbp)
	je	.LBB44_59
# %bb.58:                               # %lor.lhs.false179
	cmpl	$0, -64(%rbp)
	jne	.LBB44_60
.LBB44_59:                              # %if.then181
	jmp	.LBB44_85
.LBB44_60:                              # %if.end182
	movl	$0, -32(%rbp)
	movl	$0, -56(%rbp)
	movl	$1, -4(%rbp)
.LBB44_61:                              # %for.cond183
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$9, -4(%rbp)
	jge	.LBB44_67
# %bb.62:                               # %for.body186
                                        #   in Loop: Header=BB44_61 Depth=1
	cmpl	$8, -4(%rbp)
	jge	.LBB44_64
# %bb.63:                               # %if.then189
                                        #   in Loop: Header=BB44_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	addl	$7, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-24(%rbp), %rdx
	movslq	-68(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-72(%rbp), %esi
	addl	$7, %esi
	subl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB44_65
.LBB44_64:                              # %if.else210
                                        #   in Loop: Header=BB44_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	addl	$7, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-24(%rbp), %rdx
	movslq	-492(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-496(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
.LBB44_65:                              # %if.end232
                                        #   in Loop: Header=BB44_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	leaq	-512(%rbp), %rcx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movslq	20(%rdi), %rdx
	movq	(%rsi,%rdx,8), %rsi
	movl	-4(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movslq	16(%rdi), %rdx
	movzwl	(%rsi,%rdx,2), %r9d
	movq	-24(%rbp), %r8
	movl	$8, %edi
	movl	$8, %edx
	subl	-4(%rbp), %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	20(%rsi), %rdx
	movq	(%r8,%rdx,8), %rdx
	subl	-4(%rbp), %edi
	movslq	%edi, %rsi
	imulq	$24, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	16(%rcx), %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %r9d
	imull	%r9d, %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.66:                               # %for.inc262
                                        #   in Loop: Header=BB44_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_61
.LBB44_67:                              # %for.end264
	imull	$5, -32(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movl	%eax, -52(%rbp)
	imull	$5, -56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movl	%eax, -48(%rbp)
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	$15, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-108(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-112(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	shll	$4, %eax
	movl	%eax, -40(%rbp)
	movl	$0, -8(%rbp)
.LBB44_68:                              # %for.cond289
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_70 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB44_84
# %bb.69:                               # %for.body292
                                        #   in Loop: Header=BB44_68 Depth=1
	movl	$0, -4(%rbp)
.LBB44_70:                              # %for.cond293
                                        #   Parent Loop BB44_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB44_82
# %bb.71:                               # %for.body296
                                        #   in Loop: Header=BB44_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-40(%rbp), %eax
	movl	-4(%rbp), %edx
	subl	$7, %edx
	imull	-52(%rbp), %edx
	addl	%edx, %eax
	movl	-8(%rbp), %edx
	subl	$7, %edx
	imull	-48(%rbp), %edx
	addl	%edx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB44_73
# %bb.72:                               # %cond.true307
                                        #   in Loop: Header=BB44_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB44_74
.LBB44_73:                              # %cond.false309
                                        #   in Loop: Header=BB44_70 Depth=2
	movl	-40(%rbp), %eax
	movl	-4(%rbp), %ecx
	subl	$7, %ecx
	imull	-52(%rbp), %ecx
	addl	%ecx, %eax
	movl	-8(%rbp), %ecx
	subl	$7, %ecx
	imull	-48(%rbp), %ecx
	addl	%ecx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB44_74:                              # %cond.end318
                                        #   in Loop: Header=BB44_70 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB44_76
# %bb.75:                               # %cond.true322
                                        #   in Loop: Header=BB44_70 Depth=2
	xorl	%eax, %eax
	jmp	.LBB44_80
.LBB44_76:                              # %cond.false323
                                        #   in Loop: Header=BB44_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-40(%rbp), %eax
	movl	-4(%rbp), %edx
	subl	$7, %edx
	imull	-52(%rbp), %edx
	addl	%edx, %eax
	movl	-8(%rbp), %edx
	subl	$7, %edx
	imull	-48(%rbp), %edx
	addl	%edx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB44_78
# %bb.77:                               # %cond.true335
                                        #   in Loop: Header=BB44_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB44_79
.LBB44_78:                              # %cond.false337
                                        #   in Loop: Header=BB44_70 Depth=2
	movl	-40(%rbp), %eax
	movl	-4(%rbp), %ecx
	subl	$7, %ecx
	imull	-52(%rbp), %ecx
	addl	%ecx, %eax
	movl	-8(%rbp), %ecx
	subl	$7, %ecx
	imull	-48(%rbp), %ecx
	addl	%ecx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB44_79:                              # %cond.end346
                                        #   in Loop: Header=BB44_70 Depth=2
.LBB44_80:                              # %cond.end348
                                        #   in Loop: Header=BB44_70 Depth=2
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$1536, %rcx             # imm = 0x600
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.81:                               # %for.inc357
                                        #   in Loop: Header=BB44_70 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_70
.LBB44_82:                              # %for.end359
                                        #   in Loop: Header=BB44_68 Depth=1
	jmp	.LBB44_83
.LBB44_83:                              # %for.inc360
                                        #   in Loop: Header=BB44_68 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_68
.LBB44_84:                              # %for.end362.loopexit
	jmp	.LBB44_85
.LBB44_85:                              # %for.end362
	cmpl	$1193745069, -92(%rbp)  # imm = 0x47271AAD
	jne	.LBB44_87
.LBB44_86:
	addq	$640, %rsp              # imm = 0x280
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_87:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB44_86
.Lfunc_end44:
	.size	intrapred_luma_16x16.35, .Lfunc_end44-intrapred_luma_16x16.35
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma4x4.36        # -- Begin function dct_chroma4x4.36
	.p2align	4, 0x90
	.type	dct_chroma4x4.36,@function
dct_chroma4x4.36:                       # @dct_chroma4x4.36
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$1496810500, -148(%rbp) # imm = 0x59378404
	movl	%edi, -28(%rbp)
	movl	%esi, -84(%rbp)
	movl	%edx, -108(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %cl
	je	.LBB45_3
# %bb.1:                                # %lor.lhs.false
	movq	-144(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %cl
	je	.LBB45_3
# %bb.2:                                # %lor.rhs
	movq	-144(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%cl
.LBB45_3:                               # %lor.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -80(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-84(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-108(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -160(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-84(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-108(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -168(%rbp)
	movq	img, %rcx
	movl	40(%rcx), %ecx
	movq	img, %rdx
	addl	72668(%rdx), %ecx
	cmpl	$0, %ecx
	jne	.LBB45_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%al
.LBB45_5:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movslq	-28(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	movl	%eax, -88(%rbp)
	cmpl	$0, -88(%rbp)
	jge	.LBB45_7
# %bb.6:                                # %cond.true
	movl	-88(%rbp), %eax
	jmp	.LBB45_8
.LBB45_7:                               # %cond.false
	movl	-88(%rbp), %eax
	subl	$0, %eax
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB45_8:                               # %cond.end
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-88(%rbp), %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -32(%rbp)
	movl	-24(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -36(%rbp)
	jne	.LBB45_18
# %bb.9:                                # %if.then
	movl	$0, -12(%rbp)
.LBB45_10:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_12 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB45_17
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB45_10 Depth=1
	movl	$0, -16(%rbp)
.LBB45_12:                              # %for.cond31
                                        #   Parent Loop BB45_10 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB45_15
# %bb.13:                               # %for.body34
                                        #   in Loop: Header=BB45_12 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-72(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-72(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-72(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB45_12 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB45_12
.LBB45_15:                              # %for.end
                                        #   in Loop: Header=BB45_10 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.16:                               # %for.inc90
                                        #   in Loop: Header=BB45_10 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB45_10
.LBB45_17:                              # %for.end92
	jmp	.LBB45_18
.LBB45_18:                              # %if.end
	cmpl	$0, -36(%rbp)
	jne	.LBB45_28
# %bb.19:                               # %if.then94
	movl	$0, -16(%rbp)
.LBB45_20:                              # %for.cond95
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_22 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB45_27
# %bb.21:                               # %for.body98
                                        #   in Loop: Header=BB45_20 Depth=1
	movl	$0, -12(%rbp)
.LBB45_22:                              # %for.cond99
                                        #   Parent Loop BB45_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB45_25
# %bb.23:                               # %for.body102
                                        #   in Loop: Header=BB45_22 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-68(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-68(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-68(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.24:                               # %for.inc130
                                        #   in Loop: Header=BB45_22 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB45_22
.LBB45_25:                              # %for.end132
                                        #   in Loop: Header=BB45_20 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.26:                               # %for.inc163
                                        #   in Loop: Header=BB45_20 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB45_20
.LBB45_27:                              # %for.end165
	jmp	.LBB45_28
.LBB45_28:                              # %if.end166
	movl	$0, -132(%rbp)
	movl	$-1, -104(%rbp)
	movl	$0, -92(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB45_30
# %bb.29:                               # %if.then168
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movl	%eax, -20(%rbp)
	jmp	.LBB45_34
.LBB45_30:                              # %if.else
	cmpl	$1, -80(%rbp)
	jne	.LBB45_32
# %bb.31:                               # %if.then174
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-28(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movl	-100(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB45_33
.LBB45_32:                              # %if.else193
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-28(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movl	-100(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
.LBB45_33:                              # %if.end213
	jmp	.LBB45_34
.LBB45_34:                              # %if.end214
	movl	-28(%rbp), %eax
	addl	$1, %eax
	shll	$2, %eax
	movl	-84(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -84(%rbp)
	movl	-20(%rbp), %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movl	%eax, %ecx
	movslq	-28(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level_temp, %rdi
	addq	%rax, %rdi
	movl	-84(%rbp), %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %esi
	shll	$1, %esi
	movl	-108(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-84(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %esi
	shll	$1, %esi
	movl	-108(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%ecx, (%rdi,%rax,4)
	cmpl	$0, -36(%rbp)
	je	.LBB45_36
# %bb.35:                               # %if.then237
	movl	-20(%rbp), %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB45_46
.LBB45_36:                              # %if.else245
	cmpl	$4, -24(%rbp)
	jge	.LBB45_41
# %bb.37:                               # %if.then248
	cmpl	$1, -80(%rbp)
	jne	.LBB45_39
# %bb.38:                               # %if.then251
	movl	-20(%rbp), %edi
	movslq	-28(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	$3, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	addl	%eax, %edi
	movl	$4, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB45_40
.LBB45_39:                              # %if.else270
	movl	-20(%rbp), %edi
	movslq	-28(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	$3, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	addl	%eax, %edi
	movl	$4, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
.LBB45_40:                              # %if.end290
	jmp	.LBB45_45
.LBB45_41:                              # %if.else291
	cmpl	$1, -80(%rbp)
	jne	.LBB45_43
# %bb.42:                               # %if.then294
	movl	-20(%rbp), %edi
	movslq	-28(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	-24(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB45_44
.LBB45_43:                              # %if.else311
	movl	-20(%rbp), %edi
	movslq	-28(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	-24(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
.LBB45_44:                              # %if.end328
	jmp	.LBB45_45
.LBB45_45:                              # %if.end329
	jmp	.LBB45_46
.LBB45_46:                              # %if.end330
	movl	$1, -96(%rbp)
.LBB45_47:                              # %for.cond331
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -96(%rbp)
	jge	.LBB45_75
# %bb.48:                               # %for.body334
                                        #   in Loop: Header=BB45_47 Depth=1
	movslq	-96(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-96(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movl	-104(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -104(%rbp)
	movl	$0, -76(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB45_50
# %bb.49:                               # %if.then345
                                        #   in Loop: Header=BB45_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -20(%rbp)
	jmp	.LBB45_54
.LBB45_50:                              # %if.else352
                                        #   in Loop: Header=BB45_47 Depth=1
	cmpl	$1, -80(%rbp)
	jne	.LBB45_52
# %bb.51:                               # %if.then355
                                        #   in Loop: Header=BB45_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-28(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-100(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB45_53
.LBB45_52:                              # %if.else381
                                        #   in Loop: Header=BB45_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-28(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-100(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
.LBB45_53:                              # %if.end407
                                        #   in Loop: Header=BB45_47 Depth=1
	jmp	.LBB45_54
.LBB45_54:                              # %if.end408
                                        #   in Loop: Header=BB45_47 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB45_71
# %bb.55:                               # %if.then411
                                        #   in Loop: Header=BB45_47 Depth=1
	cmpl	$0, -16(%rbp)
	jne	.LBB45_57
# %bb.56:                               # %lor.lhs.false413
                                        #   in Loop: Header=BB45_47 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB45_58
.LBB45_57:                              # %if.then415
                                        #   in Loop: Header=BB45_47 Depth=1
	movl	$1, -132(%rbp)
.LBB45_58:                              # %if.end416
                                        #   in Loop: Header=BB45_47 Depth=1
	movl	-20(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-160(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-104(%rbp), %eax
	movq	-168(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	movl	$-1, -104(%rbp)
	movl	-20(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -20(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB45_60
# %bb.59:                               # %if.then435
                                        #   in Loop: Header=BB45_47 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB45_70
.LBB45_60:                              # %if.else436
                                        #   in Loop: Header=BB45_47 Depth=1
	cmpl	$4, -24(%rbp)
	jge	.LBB45_65
# %bb.61:                               # %if.then439
                                        #   in Loop: Header=BB45_47 Depth=1
	cmpl	$1, -80(%rbp)
	jne	.LBB45_63
# %bb.62:                               # %if.then442
                                        #   in Loop: Header=BB45_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB45_64
.LBB45_63:                              # %if.else457
                                        #   in Loop: Header=BB45_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -76(%rbp)
.LBB45_64:                              # %if.end472
                                        #   in Loop: Header=BB45_47 Depth=1
	jmp	.LBB45_69
.LBB45_65:                              # %if.else473
                                        #   in Loop: Header=BB45_47 Depth=1
	cmpl	$1, -80(%rbp)
	jne	.LBB45_67
# %bb.66:                               # %if.then476
                                        #   in Loop: Header=BB45_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-24(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB45_68
.LBB45_67:                              # %if.else488
                                        #   in Loop: Header=BB45_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-24(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -76(%rbp)
.LBB45_68:                              # %if.end500
                                        #   in Loop: Header=BB45_47 Depth=1
	jmp	.LBB45_69
.LBB45_69:                              # %if.end501
                                        #   in Loop: Header=BB45_47 Depth=1
	jmp	.LBB45_70
.LBB45_70:                              # %if.end502
                                        #   in Loop: Header=BB45_47 Depth=1
	jmp	.LBB45_71
.LBB45_71:                              # %if.end503
                                        #   in Loop: Header=BB45_47 Depth=1
	cmpl	$0, -36(%rbp)
	jne	.LBB45_73
# %bb.72:                               # %if.then505
                                        #   in Loop: Header=BB45_47 Depth=1
	movl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB45_73:                              # %if.end511
                                        #   in Loop: Header=BB45_47 Depth=1
	jmp	.LBB45_74
.LBB45_74:                              # %for.inc512
                                        #   in Loop: Header=BB45_47 Depth=1
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB45_47
.LBB45_75:                              # %for.end514
	movq	-160(%rbp), %rax
	movslq	-92(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	cmpl	$0, -36(%rbp)
	jne	.LBB45_89
# %bb.76:                               # %if.then518
	movl	$0, -12(%rbp)
.LBB45_77:                              # %for.cond519
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_79 Depth 2
                                        #     Child Loop BB45_83 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB45_88
# %bb.78:                               # %for.body522
                                        #   in Loop: Header=BB45_77 Depth=1
	movl	$0, -16(%rbp)
.LBB45_79:                              # %for.cond523
                                        #   Parent Loop BB45_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB45_82
# %bb.80:                               # %for.body526
                                        #   in Loop: Header=BB45_79 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.81:                               # %for.inc534
                                        #   in Loop: Header=BB45_79 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB45_79
.LBB45_82:                              # %for.end536
                                        #   in Loop: Header=BB45_77 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -16(%rbp)
.LBB45_83:                              # %for.cond555
                                        #   Parent Loop BB45_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB45_86
# %bb.84:                               # %for.body558
                                        #   in Loop: Header=BB45_83 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -72(%rbp)
	movslq	-16(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-72(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.85:                               # %for.inc580
                                        #   in Loop: Header=BB45_83 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB45_83
.LBB45_86:                              # %for.end582
                                        #   in Loop: Header=BB45_77 Depth=1
	jmp	.LBB45_87
.LBB45_87:                              # %for.inc583
                                        #   in Loop: Header=BB45_77 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB45_77
.LBB45_88:                              # %for.end585
	jmp	.LBB45_89
.LBB45_89:                              # %if.end586
	cmpl	$0, -36(%rbp)
	jne	.LBB45_103
# %bb.90:                               # %if.then588
	movl	$0, -16(%rbp)
.LBB45_91:                              # %for.cond589
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_93 Depth 2
                                        #     Child Loop BB45_97 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB45_102
# %bb.92:                               # %for.body592
                                        #   in Loop: Header=BB45_91 Depth=1
	movl	$0, -12(%rbp)
.LBB45_93:                              # %for.cond593
                                        #   Parent Loop BB45_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB45_96
# %bb.94:                               # %for.body596
                                        #   in Loop: Header=BB45_93 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.95:                               # %for.inc604
                                        #   in Loop: Header=BB45_93 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB45_93
.LBB45_96:                              # %for.end606
                                        #   in Loop: Header=BB45_91 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -12(%rbp)
.LBB45_97:                              # %for.cond625
                                        #   Parent Loop BB45_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB45_100
# %bb.98:                               # %for.body628
                                        #   in Loop: Header=BB45_97 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movslq	-12(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.99:                               # %for.inc654
                                        #   in Loop: Header=BB45_97 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB45_97
.LBB45_100:                             # %for.end656
                                        #   in Loop: Header=BB45_91 Depth=1
	jmp	.LBB45_101
.LBB45_101:                             # %for.inc657
                                        #   in Loop: Header=BB45_91 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB45_91
.LBB45_102:                             # %for.end659
	jmp	.LBB45_103
.LBB45_103:                             # %if.end660
	movl	-132(%rbp), %ebx
	cmpl	$1496810500, -148(%rbp) # imm = 0x59378404
	jne	.LBB45_105
.LBB45_104:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_105:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB45_104
.Lfunc_end45:
	.size	dct_chroma4x4.36, .Lfunc_end45-dct_chroma4x4.36
	.cfi_endproc
                                        # -- End function
	.globl	intrapred_luma.37       # -- Begin function intrapred_luma.37
	.p2align	4, 0x90
	.type	intrapred_luma.37,@function
intrapred_luma.37:                      # @intrapred_luma.37
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$320, %rsp              # imm = 0x140
	movl	$293320616, -172(%rbp)  # imm = 0x117BB7A8
	movl	%edi, -112(%rbp)
	movl	%esi, -116(%rbp)
	movq	%rdx, -184(%rbp)
	movq	%rcx, -224(%rbp)
	movq	%r8, -192(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	-112(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -84(%rbp)
	movl	-116(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -88(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -104(%rbp)
	movl	$0, -4(%rbp)
.LBB46_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB46_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB46_1 Depth=1
	movl	-104(%rbp), %edi
	movl	-84(%rbp), %esi
	subl	$1, %esi
	movl	-88(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-320(%rbp), %r8
	addq	%rax, %r8
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB46_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_1
.LBB46_4:                               # %for.end
	movl	-104(%rbp), %edi
	movl	-84(%rbp), %esi
	movl	-88(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-168(%rbp), %r8
	callq	getNeighbour
	movl	-104(%rbp), %edi
	movl	-84(%rbp), %esi
	addl	$4, %esi
	movl	-88(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-144(%rbp), %r8
	callq	getNeighbour
	movl	-104(%rbp), %edi
	movl	-84(%rbp), %esi
	subl	$1, %esi
	movl	-88(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-216(%rbp), %r8
	callq	getNeighbour
	xorl	%eax, %eax
	cmpl	$0, -144(%rbp)
	je	.LBB46_11
# %bb.5:                                # %land.rhs
	cmpl	$4, -84(%rbp)
	je	.LBB46_7
# %bb.6:                                # %lor.lhs.false
	xorl	%eax, %eax
	cmpl	$12, -84(%rbp)
	jne	.LBB46_10
.LBB46_7:                               # %land.rhs10
	cmpl	$4, -88(%rbp)
	movb	$1, %al
	je	.LBB46_9
# %bb.8:                                # %lor.rhs
	cmpl	$12, -88(%rbp)
	sete	%al
.LBB46_9:                               # %lor.end
.LBB46_10:                              # %land.end
	xorb	$-1, %al
.LBB46_11:                              # %land.end13
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -144(%rbp)
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB46_29
# %bb.12:                               # %if.then
	movl	$0, -4(%rbp)
	movl	$1, -68(%rbp)
.LBB46_13:                              # %for.cond16
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB46_19
# %bb.14:                               # %for.body18
                                        #   in Loop: Header=BB46_13 Depth=1
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB46_16
# %bb.15:                               # %cond.true
                                        #   in Loop: Header=BB46_13 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB46_17
.LBB46_16:                              # %cond.false
                                        #   in Loop: Header=BB46_13 Depth=1
	xorl	%eax, %eax
	jmp	.LBB46_17
.LBB46_17:                              # %cond.end
                                        #   in Loop: Header=BB46_13 Depth=1
	andl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.18:                               # %for.inc28
                                        #   in Loop: Header=BB46_13 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_13
.LBB46_19:                              # %for.end30
	cmpl	$0, -168(%rbp)
	je	.LBB46_21
# %bb.20:                               # %cond.true33
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-164(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB46_22
.LBB46_21:                              # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB46_22
.LBB46_22:                              # %cond.end39
	movl	%eax, -72(%rbp)
	cmpl	$0, -144(%rbp)
	je	.LBB46_24
# %bb.23:                               # %cond.true43
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-140(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB46_25
.LBB46_24:                              # %cond.false48
	xorl	%eax, %eax
	jmp	.LBB46_25
.LBB46_25:                              # %cond.end49
	movl	%eax, -108(%rbp)
	cmpl	$0, -216(%rbp)
	je	.LBB46_27
# %bb.26:                               # %cond.true53
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-212(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB46_28
.LBB46_27:                              # %cond.false58
	xorl	%eax, %eax
	jmp	.LBB46_28
.LBB46_28:                              # %cond.end59
	movl	%eax, -100(%rbp)
	jmp	.LBB46_30
.LBB46_29:                              # %if.else
	movl	-320(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-168(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-144(%rbp), %eax
	movl	%eax, -108(%rbp)
	movl	-216(%rbp), %eax
	movl	%eax, -100(%rbp)
.LBB46_30:                              # %if.end
	xorl	%eax, %eax
	movl	-68(%rbp), %ecx
	movq	-184(%rbp), %rdx
	movl	%ecx, (%rdx)
	movl	-72(%rbp), %ecx
	movq	-224(%rbp), %rdx
	movl	%ecx, (%rdx)
	cmpl	$0, -72(%rbp)
	je	.LBB46_33
# %bb.31:                               # %land.lhs.true
	xorl	%eax, %eax
	cmpl	$0, -68(%rbp)
	je	.LBB46_33
# %bb.32:                               # %land.rhs68
	cmpl	$0, -100(%rbp)
	setne	%al
.LBB46_33:                              # %land.end70
	andb	$1, %al
	movzbl	%al, %eax
	movq	-192(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-112(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -4(%rbp)
	movl	-116(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -96(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB46_35
# %bb.34:                               # %if.then75
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -60(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -56(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -52(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB46_36
.LBB46_35:                              # %if.else109
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -48(%rbp)
	movl	%eax, -52(%rbp)
	movl	%eax, -56(%rbp)
	movl	%eax, -60(%rbp)
.LBB46_36:                              # %if.end114
	cmpl	$0, -108(%rbp)
	je	.LBB46_38
# %bb.37:                               # %if.then116
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -44(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -40(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -36(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB46_39
.LBB46_38:                              # %if.else153
	movl	-48(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	%eax, -36(%rbp)
	movl	%eax, -40(%rbp)
	movl	%eax, -44(%rbp)
.LBB46_39:                              # %if.end159
	cmpl	$0, -68(%rbp)
	je	.LBB46_41
# %bb.40:                               # %if.then161
	movq	-80(%rbp), %rax
	movslq	-300(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-304(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -28(%rbp)
	movq	-80(%rbp), %rax
	movslq	-276(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-280(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-80(%rbp), %rax
	movslq	-252(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-256(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-80(%rbp), %rax
	movslq	-228(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-232(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB46_42
.LBB46_41:                              # %if.else202
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -16(%rbp)
	movl	%eax, -20(%rbp)
	movl	%eax, -24(%rbp)
	movl	%eax, -28(%rbp)
.LBB46_42:                              # %if.end208
	cmpl	$0, -100(%rbp)
	je	.LBB46_44
# %bb.43:                               # %if.then210
	movq	-80(%rbp), %rax
	movslq	-196(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-200(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB46_45
.LBB46_44:                              # %if.else219
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -64(%rbp)
.LBB46_45:                              # %if.end222
	movl	$0, -4(%rbp)
.LBB46_46:                              # %for.cond223
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$9, -4(%rbp)
	jge	.LBB46_49
# %bb.47:                               # %for.body226
                                        #   in Loop: Header=BB46_46 Depth=1
	movq	img, %rax
	addq	$184, %rax
	movslq	-4(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movw	$-1, (%rax)
# %bb.48:                               # %for.inc231
                                        #   in Loop: Header=BB46_46 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_46
.LBB46_49:                              # %for.end233
	movl	$0, -92(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB46_52
# %bb.50:                               # %land.lhs.true235
	cmpl	$0, -68(%rbp)
	je	.LBB46_52
# %bb.51:                               # %if.then237
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$4, %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	jmp	.LBB46_61
.LBB46_52:                              # %if.else254
	cmpl	$0, -72(%rbp)
	jne	.LBB46_55
# %bb.53:                               # %land.lhs.true256
	cmpl	$0, -68(%rbp)
	je	.LBB46_55
# %bb.54:                               # %if.then258
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	jmp	.LBB46_60
.LBB46_55:                              # %if.else268
	cmpl	$0, -72(%rbp)
	je	.LBB46_58
# %bb.56:                               # %land.lhs.true270
	cmpl	$0, -68(%rbp)
	jne	.LBB46_58
# %bb.57:                               # %if.then272
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	jmp	.LBB46_59
.LBB46_58:                              # %if.else282
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -92(%rbp)
.LBB46_59:                              # %if.end284
	jmp	.LBB46_60
.LBB46_60:                              # %if.end285
	jmp	.LBB46_61
.LBB46_61:                              # %if.end286
	movl	$0, -96(%rbp)
.LBB46_62:                              # %for.cond287
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_64 Depth 2
	cmpl	$4, -96(%rbp)
	jge	.LBB46_69
# %bb.63:                               # %for.body290
                                        #   in Loop: Header=BB46_62 Depth=1
	movl	$0, -4(%rbp)
.LBB46_64:                              # %for.cond291
                                        #   Parent Loop BB46_62 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB46_67
# %bb.65:                               # %for.body294
                                        #   in Loop: Header=BB46_64 Depth=2
	movl	-92(%rbp), %eax
	movq	img, %rcx
	addq	$184, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-96(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.66:                               # %for.inc302
                                        #   in Loop: Header=BB46_64 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_64
.LBB46_67:                              # %for.end304
                                        #   in Loop: Header=BB46_62 Depth=1
	jmp	.LBB46_68
.LBB46_68:                              # %for.inc305
                                        #   in Loop: Header=BB46_62 Depth=1
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB46_62
.LBB46_69:                              # %for.end307
	movl	$0, -4(%rbp)
.LBB46_70:                              # %for.cond308
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB46_73
# %bb.71:                               # %for.body311
                                        #   in Loop: Header=BB46_70 Depth=1
	movslq	-4(%rbp), %rax
	movl	-60(%rbp,%rax,4), %eax
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 280(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 248(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 216(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 184(%rcx,%rdx,2)
	movslq	-4(%rbp), %rax
	movl	-28(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 6(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 4(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, (%rcx)
# %bb.72:                               # %for.inc360
                                        #   in Loop: Header=BB46_70 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_70
.LBB46_73:                              # %for.end362
	cmpl	$0, -72(%rbp)
	jne	.LBB46_75
# %bb.74:                               # %if.then364
	movq	img, %rax
	movw	$-1, 184(%rax)
.LBB46_75:                              # %if.end369
	cmpl	$0, -68(%rbp)
	jne	.LBB46_77
# %bb.76:                               # %if.then371
	movq	img, %rax
	movw	$-1, 696(%rax)
.LBB46_77:                              # %if.end376
	cmpl	$0, -72(%rbp)
	je	.LBB46_79
# %bb.78:                               # %if.then378
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1720(%rdx)
	movl	-56(%rbp), %eax
	addl	-48(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1752(%rdx)
	movq	img, %rdx
	movw	%ax, 1722(%rdx)
	movl	-52(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	-48(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1784(%rdx)
	movq	img, %rdx
	movw	%ax, 1754(%rdx)
	movq	img, %rdx
	movw	%ax, 1724(%rdx)
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	-44(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1816(%rdx)
	movq	img, %rdx
	movw	%ax, 1786(%rdx)
	movq	img, %rdx
	movw	%ax, 1756(%rdx)
	movq	img, %rdx
	movw	%ax, 1726(%rdx)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	-40(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1818(%rdx)
	movq	img, %rdx
	movw	%ax, 1788(%rdx)
	movq	img, %rdx
	movw	%ax, 1758(%rdx)
	movl	-40(%rbp), %eax
	addl	-32(%rbp), %eax
	movl	-36(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1820(%rdx)
	movq	img, %rdx
	movw	%ax, 1790(%rdx)
	movl	-36(%rbp), %eax
	imull	$3, -32(%rbp), %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1822(%rdx)
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3768(%rdx)
	movl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3832(%rdx)
	movq	img, %rdx
	movw	%ax, 3770(%rdx)
	movl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3834(%rdx)
	movq	img, %rdx
	movw	%ax, 3772(%rdx)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3836(%rdx)
	movq	img, %rdx
	movw	%ax, 3774(%rdx)
	movl	-44(%rbp), %eax
	addl	-40(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3838(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3800(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3864(%rdx)
	movq	img, %rdx
	movw	%ax, 3802(%rdx)
	movl	-52(%rbp), %eax
	movl	-48(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-44(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3866(%rdx)
	movq	img, %rdx
	movw	%ax, 3804(%rdx)
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-40(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3868(%rdx)
	movq	img, %rdx
	movw	%ax, 3806(%rdx)
	movl	-44(%rbp), %eax
	movl	-40(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-36(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 3870(%rcx)
.LBB46_79:                              # %if.end642
	cmpl	$0, -68(%rbp)
	je	.LBB46_81
# %bb.80:                               # %if.then644
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rcx
	movw	%ax, 4280(%rcx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 4282(%rdx)
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 4312(%rdx)
	movq	img, %rdx
	movw	%ax, 4284(%rdx)
	movl	-24(%rbp), %eax
	movl	-20(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 4314(%rdx)
	movq	img, %rdx
	movw	%ax, 4286(%rdx)
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 4344(%rdx)
	movq	img, %rdx
	movw	%ax, 4316(%rdx)
	movl	-20(%rbp), %eax
	movl	-16(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 4346(%rcx)
	movq	img, %rcx
	movw	%ax, 4318(%rcx)
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movw	%ax, 4382(%rcx)
	movq	img, %rcx
	movw	%ax, 4380(%rcx)
	movq	img, %rcx
	movw	%ax, 4378(%rcx)
	movq	img, %rcx
	movw	%ax, 4350(%rcx)
	movq	img, %rcx
	movw	%ax, 4348(%rcx)
	movq	img, %rcx
	movw	%ax, 4376(%rcx)
.LBB46_81:                              # %if.end756
	cmpl	$0, -72(%rbp)
	je	.LBB46_85
# %bb.82:                               # %land.lhs.true758
	cmpl	$0, -68(%rbp)
	je	.LBB46_85
# %bb.83:                               # %land.lhs.true760
	cmpl	$0, -100(%rbp)
	je	.LBB46_85
# %bb.84:                               # %if.then762
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2328(%rdx)
	movl	-20(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-28(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2330(%rdx)
	movq	img, %rdx
	movw	%ax, 2296(%rdx)
	movl	-24(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-64(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2332(%rdx)
	movq	img, %rdx
	movw	%ax, 2298(%rdx)
	movq	img, %rdx
	movw	%ax, 2264(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2334(%rdx)
	movq	img, %rdx
	movw	%ax, 2300(%rdx)
	movq	img, %rdx
	movw	%ax, 2266(%rdx)
	movq	img, %rdx
	movw	%ax, 2232(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2302(%rdx)
	movq	img, %rdx
	movw	%ax, 2268(%rdx)
	movq	img, %rdx
	movw	%ax, 2234(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2270(%rdx)
	movq	img, %rdx
	movw	%ax, 2236(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2238(%rdx)
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2810(%rdx)
	movq	img, %rdx
	movw	%ax, 2744(%rdx)
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2812(%rdx)
	movq	img, %rdx
	movw	%ax, 2746(%rdx)
	movl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2814(%rdx)
	movq	img, %rdx
	movw	%ax, 2748(%rdx)
	movl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2750(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2842(%rdx)
	movq	img, %rdx
	movw	%ax, 2776(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2844(%rdx)
	movq	img, %rdx
	movw	%ax, 2778(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2846(%rdx)
	movq	img, %rdx
	movw	%ax, 2780(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2782(%rdx)
	movl	-64(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2808(%rdx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2840(%rdx)
	movl	-64(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3292(%rdx)
	movq	img, %rdx
	movw	%ax, 3256(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3294(%rdx)
	movq	img, %rdx
	movw	%ax, 3258(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3260(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3262(%rdx)
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3324(%rdx)
	movq	img, %rdx
	movw	%ax, 3288(%rdx)
	movl	-64(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3326(%rdx)
	movq	img, %rdx
	movw	%ax, 3290(%rdx)
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3356(%rdx)
	movq	img, %rdx
	movw	%ax, 3320(%rdx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3358(%rdx)
	movq	img, %rdx
	movw	%ax, 3322(%rdx)
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3352(%rdx)
	movl	-24(%rbp), %eax
	movl	-20(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 3354(%rcx)
.LBB46_85:                              # %if.end1174
	cmpl	$293320616, -172(%rbp)  # imm = 0x117BB7A8
	jne	.LBB46_87
.LBB46_86:
	addq	$320, %rsp              # imm = 0x140
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB46_87:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB46_86
.Lfunc_end46:
	.size	intrapred_luma.37, .Lfunc_end46-intrapred_luma.37
	.cfi_endproc
                                        # -- End function
	.globl	intrapred_luma.38       # -- Begin function intrapred_luma.38
	.p2align	4, 0x90
	.type	intrapred_luma.38,@function
intrapred_luma.38:                      # @intrapred_luma.38
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$320, %rsp              # imm = 0x140
	movl	$1967355638, -172(%rbp) # imm = 0x754376F6
	movl	%edi, -112(%rbp)
	movl	%esi, -116(%rbp)
	movq	%rdx, -224(%rbp)
	movq	%rcx, -192(%rbp)
	movq	%r8, -184(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	-112(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -88(%rbp)
	movl	-116(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -100(%rbp)
	movl	$0, -4(%rbp)
.LBB47_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB47_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	-100(%rbp), %edi
	movl	-88(%rbp), %esi
	subl	$1, %esi
	movl	-84(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-320(%rbp), %r8
	addq	%rax, %r8
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_1
.LBB47_4:                               # %for.end
	movl	-100(%rbp), %edi
	movl	-88(%rbp), %esi
	movl	-84(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-168(%rbp), %r8
	callq	getNeighbour
	movl	-100(%rbp), %edi
	movl	-88(%rbp), %esi
	addl	$4, %esi
	movl	-84(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-144(%rbp), %r8
	callq	getNeighbour
	movl	-100(%rbp), %edi
	movl	-88(%rbp), %esi
	subl	$1, %esi
	movl	-84(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-216(%rbp), %r8
	callq	getNeighbour
	xorl	%eax, %eax
	cmpl	$0, -144(%rbp)
	je	.LBB47_11
# %bb.5:                                # %land.rhs
	cmpl	$4, -88(%rbp)
	je	.LBB47_7
# %bb.6:                                # %lor.lhs.false
	xorl	%eax, %eax
	cmpl	$12, -88(%rbp)
	jne	.LBB47_10
.LBB47_7:                               # %land.rhs10
	cmpl	$4, -84(%rbp)
	movb	$1, %al
	je	.LBB47_9
# %bb.8:                                # %lor.rhs
	cmpl	$12, -84(%rbp)
	sete	%al
.LBB47_9:                               # %lor.end
.LBB47_10:                              # %land.end
	xorb	$-1, %al
.LBB47_11:                              # %land.end13
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -144(%rbp)
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB47_29
# %bb.12:                               # %if.then
	movl	$0, -4(%rbp)
	movl	$1, -68(%rbp)
.LBB47_13:                              # %for.cond16
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB47_19
# %bb.14:                               # %for.body18
                                        #   in Loop: Header=BB47_13 Depth=1
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB47_16
# %bb.15:                               # %cond.true
                                        #   in Loop: Header=BB47_13 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB47_17
.LBB47_16:                              # %cond.false
                                        #   in Loop: Header=BB47_13 Depth=1
	xorl	%eax, %eax
	jmp	.LBB47_17
.LBB47_17:                              # %cond.end
                                        #   in Loop: Header=BB47_13 Depth=1
	andl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.18:                               # %for.inc28
                                        #   in Loop: Header=BB47_13 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_13
.LBB47_19:                              # %for.end30
	cmpl	$0, -168(%rbp)
	je	.LBB47_21
# %bb.20:                               # %cond.true33
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-164(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB47_22
.LBB47_21:                              # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB47_22
.LBB47_22:                              # %cond.end39
	movl	%eax, -72(%rbp)
	cmpl	$0, -144(%rbp)
	je	.LBB47_24
# %bb.23:                               # %cond.true43
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-140(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB47_25
.LBB47_24:                              # %cond.false48
	xorl	%eax, %eax
	jmp	.LBB47_25
.LBB47_25:                              # %cond.end49
	movl	%eax, -108(%rbp)
	cmpl	$0, -216(%rbp)
	je	.LBB47_27
# %bb.26:                               # %cond.true53
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-212(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB47_28
.LBB47_27:                              # %cond.false58
	xorl	%eax, %eax
	jmp	.LBB47_28
.LBB47_28:                              # %cond.end59
	movl	%eax, -104(%rbp)
	jmp	.LBB47_30
.LBB47_29:                              # %if.else
	movl	-320(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-168(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-144(%rbp), %eax
	movl	%eax, -108(%rbp)
	movl	-216(%rbp), %eax
	movl	%eax, -104(%rbp)
.LBB47_30:                              # %if.end
	xorl	%eax, %eax
	movl	-68(%rbp), %ecx
	movq	-224(%rbp), %rdx
	movl	%ecx, (%rdx)
	movl	-72(%rbp), %ecx
	movq	-192(%rbp), %rdx
	movl	%ecx, (%rdx)
	cmpl	$0, -72(%rbp)
	je	.LBB47_33
# %bb.31:                               # %land.lhs.true
	xorl	%eax, %eax
	cmpl	$0, -68(%rbp)
	je	.LBB47_33
# %bb.32:                               # %land.rhs68
	cmpl	$0, -104(%rbp)
	setne	%al
.LBB47_33:                              # %land.end70
	andb	$1, %al
	movzbl	%al, %eax
	movq	-184(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-112(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -4(%rbp)
	movl	-116(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -96(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB47_35
# %bb.34:                               # %if.then75
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -60(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -56(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -52(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB47_36
.LBB47_35:                              # %if.else109
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -48(%rbp)
	movl	%eax, -52(%rbp)
	movl	%eax, -56(%rbp)
	movl	%eax, -60(%rbp)
.LBB47_36:                              # %if.end114
	cmpl	$0, -108(%rbp)
	je	.LBB47_38
# %bb.37:                               # %if.then116
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -44(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -40(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -36(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB47_39
.LBB47_38:                              # %if.else153
	movl	-48(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	%eax, -36(%rbp)
	movl	%eax, -40(%rbp)
	movl	%eax, -44(%rbp)
.LBB47_39:                              # %if.end159
	cmpl	$0, -68(%rbp)
	je	.LBB47_41
# %bb.40:                               # %if.then161
	movq	-80(%rbp), %rax
	movslq	-300(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-304(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -28(%rbp)
	movq	-80(%rbp), %rax
	movslq	-276(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-280(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-80(%rbp), %rax
	movslq	-252(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-256(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-80(%rbp), %rax
	movslq	-228(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-232(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB47_42
.LBB47_41:                              # %if.else202
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -16(%rbp)
	movl	%eax, -20(%rbp)
	movl	%eax, -24(%rbp)
	movl	%eax, -28(%rbp)
.LBB47_42:                              # %if.end208
	cmpl	$0, -104(%rbp)
	je	.LBB47_44
# %bb.43:                               # %if.then210
	movq	-80(%rbp), %rax
	movslq	-196(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-200(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB47_45
.LBB47_44:                              # %if.else219
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -64(%rbp)
.LBB47_45:                              # %if.end222
	movl	$0, -4(%rbp)
.LBB47_46:                              # %for.cond223
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$9, -4(%rbp)
	jge	.LBB47_49
# %bb.47:                               # %for.body226
                                        #   in Loop: Header=BB47_46 Depth=1
	movq	img, %rax
	addq	$184, %rax
	movslq	-4(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movw	$-1, (%rax)
# %bb.48:                               # %for.inc231
                                        #   in Loop: Header=BB47_46 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_46
.LBB47_49:                              # %for.end233
	movl	$0, -92(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB47_52
# %bb.50:                               # %land.lhs.true235
	cmpl	$0, -68(%rbp)
	je	.LBB47_52
# %bb.51:                               # %if.then237
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$4, %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	jmp	.LBB47_61
.LBB47_52:                              # %if.else254
	cmpl	$0, -72(%rbp)
	jne	.LBB47_55
# %bb.53:                               # %land.lhs.true256
	cmpl	$0, -68(%rbp)
	je	.LBB47_55
# %bb.54:                               # %if.then258
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	jmp	.LBB47_60
.LBB47_55:                              # %if.else268
	cmpl	$0, -72(%rbp)
	je	.LBB47_58
# %bb.56:                               # %land.lhs.true270
	cmpl	$0, -68(%rbp)
	jne	.LBB47_58
# %bb.57:                               # %if.then272
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	jmp	.LBB47_59
.LBB47_58:                              # %if.else282
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -92(%rbp)
.LBB47_59:                              # %if.end284
	jmp	.LBB47_60
.LBB47_60:                              # %if.end285
	jmp	.LBB47_61
.LBB47_61:                              # %if.end286
	movl	$0, -96(%rbp)
.LBB47_62:                              # %for.cond287
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_64 Depth 2
	cmpl	$4, -96(%rbp)
	jge	.LBB47_69
# %bb.63:                               # %for.body290
                                        #   in Loop: Header=BB47_62 Depth=1
	movl	$0, -4(%rbp)
.LBB47_64:                              # %for.cond291
                                        #   Parent Loop BB47_62 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB47_67
# %bb.65:                               # %for.body294
                                        #   in Loop: Header=BB47_64 Depth=2
	movl	-92(%rbp), %eax
	movq	img, %rcx
	addq	$184, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-96(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.66:                               # %for.inc302
                                        #   in Loop: Header=BB47_64 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_64
.LBB47_67:                              # %for.end304
                                        #   in Loop: Header=BB47_62 Depth=1
	jmp	.LBB47_68
.LBB47_68:                              # %for.inc305
                                        #   in Loop: Header=BB47_62 Depth=1
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB47_62
.LBB47_69:                              # %for.end307
	movl	$0, -4(%rbp)
.LBB47_70:                              # %for.cond308
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB47_73
# %bb.71:                               # %for.body311
                                        #   in Loop: Header=BB47_70 Depth=1
	movslq	-4(%rbp), %rax
	movl	-60(%rbp,%rax,4), %eax
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 280(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 248(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 216(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 184(%rcx,%rdx,2)
	movslq	-4(%rbp), %rax
	movl	-28(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 6(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 4(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, (%rcx)
# %bb.72:                               # %for.inc360
                                        #   in Loop: Header=BB47_70 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_70
.LBB47_73:                              # %for.end362
	cmpl	$0, -72(%rbp)
	jne	.LBB47_75
# %bb.74:                               # %if.then364
	movq	img, %rax
	movw	$-1, 184(%rax)
.LBB47_75:                              # %if.end369
	cmpl	$0, -68(%rbp)
	jne	.LBB47_77
# %bb.76:                               # %if.then371
	movq	img, %rax
	movw	$-1, 696(%rax)
.LBB47_77:                              # %if.end376
	cmpl	$0, -72(%rbp)
	je	.LBB47_79
# %bb.78:                               # %if.then378
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1720(%rdx)
	movl	-56(%rbp), %eax
	addl	-48(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1752(%rdx)
	movq	img, %rdx
	movw	%ax, 1722(%rdx)
	movl	-52(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	-48(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1784(%rdx)
	movq	img, %rdx
	movw	%ax, 1754(%rdx)
	movq	img, %rdx
	movw	%ax, 1724(%rdx)
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	-44(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1816(%rdx)
	movq	img, %rdx
	movw	%ax, 1786(%rdx)
	movq	img, %rdx
	movw	%ax, 1756(%rdx)
	movq	img, %rdx
	movw	%ax, 1726(%rdx)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	-40(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1818(%rdx)
	movq	img, %rdx
	movw	%ax, 1788(%rdx)
	movq	img, %rdx
	movw	%ax, 1758(%rdx)
	movl	-40(%rbp), %eax
	addl	-32(%rbp), %eax
	movl	-36(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1820(%rdx)
	movq	img, %rdx
	movw	%ax, 1790(%rdx)
	movl	-36(%rbp), %eax
	imull	$3, -32(%rbp), %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1822(%rdx)
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3768(%rdx)
	movl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3832(%rdx)
	movq	img, %rdx
	movw	%ax, 3770(%rdx)
	movl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3834(%rdx)
	movq	img, %rdx
	movw	%ax, 3772(%rdx)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3836(%rdx)
	movq	img, %rdx
	movw	%ax, 3774(%rdx)
	movl	-44(%rbp), %eax
	addl	-40(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3838(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3800(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3864(%rdx)
	movq	img, %rdx
	movw	%ax, 3802(%rdx)
	movl	-52(%rbp), %eax
	movl	-48(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-44(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3866(%rdx)
	movq	img, %rdx
	movw	%ax, 3804(%rdx)
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-40(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3868(%rdx)
	movq	img, %rdx
	movw	%ax, 3806(%rdx)
	movl	-44(%rbp), %eax
	movl	-40(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-36(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 3870(%rcx)
.LBB47_79:                              # %if.end642
	cmpl	$0, -68(%rbp)
	je	.LBB47_81
# %bb.80:                               # %if.then644
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rcx
	movw	%ax, 4280(%rcx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 4282(%rdx)
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 4312(%rdx)
	movq	img, %rdx
	movw	%ax, 4284(%rdx)
	movl	-24(%rbp), %eax
	movl	-20(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 4314(%rdx)
	movq	img, %rdx
	movw	%ax, 4286(%rdx)
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 4344(%rdx)
	movq	img, %rdx
	movw	%ax, 4316(%rdx)
	movl	-20(%rbp), %eax
	movl	-16(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 4346(%rcx)
	movq	img, %rcx
	movw	%ax, 4318(%rcx)
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movw	%ax, 4382(%rcx)
	movq	img, %rcx
	movw	%ax, 4380(%rcx)
	movq	img, %rcx
	movw	%ax, 4378(%rcx)
	movq	img, %rcx
	movw	%ax, 4350(%rcx)
	movq	img, %rcx
	movw	%ax, 4348(%rcx)
	movq	img, %rcx
	movw	%ax, 4376(%rcx)
.LBB47_81:                              # %if.end756
	cmpl	$0, -72(%rbp)
	je	.LBB47_85
# %bb.82:                               # %land.lhs.true758
	cmpl	$0, -68(%rbp)
	je	.LBB47_85
# %bb.83:                               # %land.lhs.true760
	cmpl	$0, -104(%rbp)
	je	.LBB47_85
# %bb.84:                               # %if.then762
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2328(%rdx)
	movl	-20(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-28(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2330(%rdx)
	movq	img, %rdx
	movw	%ax, 2296(%rdx)
	movl	-24(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-64(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2332(%rdx)
	movq	img, %rdx
	movw	%ax, 2298(%rdx)
	movq	img, %rdx
	movw	%ax, 2264(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2334(%rdx)
	movq	img, %rdx
	movw	%ax, 2300(%rdx)
	movq	img, %rdx
	movw	%ax, 2266(%rdx)
	movq	img, %rdx
	movw	%ax, 2232(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2302(%rdx)
	movq	img, %rdx
	movw	%ax, 2268(%rdx)
	movq	img, %rdx
	movw	%ax, 2234(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2270(%rdx)
	movq	img, %rdx
	movw	%ax, 2236(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2238(%rdx)
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2810(%rdx)
	movq	img, %rdx
	movw	%ax, 2744(%rdx)
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2812(%rdx)
	movq	img, %rdx
	movw	%ax, 2746(%rdx)
	movl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2814(%rdx)
	movq	img, %rdx
	movw	%ax, 2748(%rdx)
	movl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2750(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2842(%rdx)
	movq	img, %rdx
	movw	%ax, 2776(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2844(%rdx)
	movq	img, %rdx
	movw	%ax, 2778(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2846(%rdx)
	movq	img, %rdx
	movw	%ax, 2780(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2782(%rdx)
	movl	-64(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2808(%rdx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2840(%rdx)
	movl	-64(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3292(%rdx)
	movq	img, %rdx
	movw	%ax, 3256(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3294(%rdx)
	movq	img, %rdx
	movw	%ax, 3258(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3260(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3262(%rdx)
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3324(%rdx)
	movq	img, %rdx
	movw	%ax, 3288(%rdx)
	movl	-64(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3326(%rdx)
	movq	img, %rdx
	movw	%ax, 3290(%rdx)
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3356(%rdx)
	movq	img, %rdx
	movw	%ax, 3320(%rdx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3358(%rdx)
	movq	img, %rdx
	movw	%ax, 3322(%rdx)
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3352(%rdx)
	movl	-24(%rbp), %eax
	movl	-20(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 3354(%rcx)
.LBB47_85:                              # %if.end1174
	cmpl	$1967355638, -172(%rbp) # imm = 0x754376F6
	jne	.LBB47_87
.LBB47_86:
	addq	$320, %rsp              # imm = 0x140
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_87:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB47_86
.Lfunc_end47:
	.size	intrapred_luma.38, .Lfunc_end47-intrapred_luma.38
	.cfi_endproc
                                        # -- End function
	.globl	dct_luma.39             # -- Begin function dct_luma.39
	.p2align	4, 0x90
	.type	dct_luma.39,@function
dct_luma.39:                            # @dct_luma.39
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	xorl	%ebx, %ebx
	movl	$2067153800, -148(%rbp) # imm = 0x7B364388
	movl	%edi, -24(%rbp)
	movl	%esi, -32(%rbp)
	movq	%rdx, -168(%rbp)
	movl	%ecx, -108(%rbp)
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -124(%rbp)
	movl	-32(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-124(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -128(%rbp)
	movl	-132(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-124(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -116(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-128(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -160(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-128(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -176(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB48_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%bl
.LBB48_2:                               # %land.end
	andb	$1, %bl
	movzbl	%bl, %eax
	movl	%eax, -36(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -92(%rbp)
	movl	-40(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -112(%rbp)
	movl	$0, -12(%rbp)
.LBB48_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_7 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB48_5
# %bb.4:                                # %land.rhs31
                                        #   in Loop: Header=BB48_3 Depth=1
	cmpl	$0, -36(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB48_5:                               # %land.end32
                                        #   in Loop: Header=BB48_3 Depth=1
	testb	$1, %al
	jne	.LBB48_6
	jmp	.LBB48_12
.LBB48_6:                               # %for.body
                                        #   in Loop: Header=BB48_3 Depth=1
	movl	$0, -16(%rbp)
.LBB48_7:                               # %for.cond34
                                        #   Parent Loop BB48_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB48_10
# %bb.8:                                # %for.body36
                                        #   in Loop: Header=BB48_7 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-88(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-88(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-88(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB48_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB48_7
.LBB48_10:                              # %for.end
                                        #   in Loop: Header=BB48_3 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.11:                               # %for.inc93
                                        #   in Loop: Header=BB48_3 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB48_3
.LBB48_12:                              # %for.end95
	movl	$0, -16(%rbp)
.LBB48_13:                              # %for.cond96
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_17 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB48_15
# %bb.14:                               # %land.rhs98
                                        #   in Loop: Header=BB48_13 Depth=1
	cmpl	$0, -36(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB48_15:                              # %land.end101
                                        #   in Loop: Header=BB48_13 Depth=1
	testb	$1, %al
	jne	.LBB48_16
	jmp	.LBB48_22
.LBB48_16:                              # %for.body103
                                        #   in Loop: Header=BB48_13 Depth=1
	movl	$0, -12(%rbp)
.LBB48_17:                              # %for.cond104
                                        #   Parent Loop BB48_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB48_20
# %bb.18:                               # %for.body106
                                        #   in Loop: Header=BB48_17 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-20(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.19:                               # %for.inc134
                                        #   in Loop: Header=BB48_17 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB48_17
.LBB48_20:                              # %for.end136
                                        #   in Loop: Header=BB48_13 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.21:                               # %for.inc167
                                        #   in Loop: Header=BB48_13 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB48_13
.LBB48_22:                              # %for.end169
	movl	$0, -120(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -104(%rbp)
	movl	$0, -84(%rbp)
.LBB48_23:                              # %for.cond170
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -84(%rbp)
	jge	.LBB48_57
# %bb.24:                               # %for.body172
                                        #   in Loop: Header=BB48_23 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB48_27
# %bb.25:                               # %lor.lhs.false
                                        #   in Loop: Header=BB48_23 Depth=1
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB48_28
# %bb.26:                               # %land.lhs.true
                                        #   in Loop: Header=BB48_23 Depth=1
	movq	-144(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB48_28
.LBB48_27:                              # %if.then
                                        #   in Loop: Header=BB48_23 Depth=1
	movslq	-84(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-84(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB48_29
.LBB48_28:                              # %if.else
                                        #   in Loop: Header=BB48_23 Depth=1
	movslq	-84(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-84(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB48_29:                              # %if.end
                                        #   in Loop: Header=BB48_23 Depth=1
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -96(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB48_31
# %bb.30:                               # %if.then193
                                        #   in Loop: Header=BB48_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -28(%rbp)
	jmp	.LBB48_35
.LBB48_31:                              # %if.else199
                                        #   in Loop: Header=BB48_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB48_33
# %bb.32:                               # %if.then202
                                        #   in Loop: Header=BB48_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB48_34
.LBB48_33:                              # %if.else223
                                        #   in Loop: Header=BB48_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
.LBB48_34:                              # %if.end245
                                        #   in Loop: Header=BB48_23 Depth=1
	jmp	.LBB48_35
.LBB48_35:                              # %if.end246
                                        #   in Loop: Header=BB48_23 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB48_53
# %bb.36:                               # %if.then249
                                        #   in Loop: Header=BB48_23 Depth=1
	movl	$1, -120(%rbp)
	cmpl	$1, -28(%rbp)
	jg	.LBB48_38
# %bb.37:                               # %lor.lhs.false252
                                        #   in Loop: Header=BB48_23 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB48_39
.LBB48_38:                              # %if.then254
                                        #   in Loop: Header=BB48_23 Depth=1
	movq	-168(%rbp), %rax
	movl	(%rax), %ecx
	addl	$999999, %ecx           # imm = 0xF423F
	movl	%ecx, (%rax)
	jmp	.LBB48_40
.LBB48_39:                              # %if.else256
                                        #   in Loop: Header=BB48_23 Depth=1
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-100(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-168(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB48_40:                              # %if.end263
                                        #   in Loop: Header=BB48_23 Depth=1
	movl	-28(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-160(%rbp), %rcx
	movslq	-104(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-176(%rbp), %rcx
	movslq	-104(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-104(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -104(%rbp)
	movl	$-1, -100(%rbp)
	movl	-28(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -28(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB48_42
# %bb.41:                               # %if.then282
                                        #   in Loop: Header=BB48_23 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB48_52
.LBB48_42:                              # %if.else283
                                        #   in Loop: Header=BB48_23 Depth=1
	cmpl	$4, -40(%rbp)
	jge	.LBB48_47
# %bb.43:                               # %if.then286
                                        #   in Loop: Header=BB48_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB48_45
# %bb.44:                               # %if.then289
                                        #   in Loop: Header=BB48_23 Depth=1
	movl	-28(%rbp), %eax
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB48_46
.LBB48_45:                              # %if.else301
                                        #   in Loop: Header=BB48_23 Depth=1
	movl	-28(%rbp), %eax
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -96(%rbp)
.LBB48_46:                              # %if.end314
                                        #   in Loop: Header=BB48_23 Depth=1
	jmp	.LBB48_51
.LBB48_47:                              # %if.else315
                                        #   in Loop: Header=BB48_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB48_49
# %bb.48:                               # %if.then318
                                        #   in Loop: Header=BB48_23 Depth=1
	movl	-28(%rbp), %eax
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB48_50
.LBB48_49:                              # %if.else328
                                        #   in Loop: Header=BB48_23 Depth=1
	movl	-28(%rbp), %eax
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -96(%rbp)
.LBB48_50:                              # %if.end338
                                        #   in Loop: Header=BB48_23 Depth=1
	jmp	.LBB48_51
.LBB48_51:                              # %if.end339
                                        #   in Loop: Header=BB48_23 Depth=1
	jmp	.LBB48_52
.LBB48_52:                              # %if.end340
                                        #   in Loop: Header=BB48_23 Depth=1
	jmp	.LBB48_53
.LBB48_53:                              # %if.end341
                                        #   in Loop: Header=BB48_23 Depth=1
	cmpl	$0, -36(%rbp)
	jne	.LBB48_55
# %bb.54:                               # %if.then343
                                        #   in Loop: Header=BB48_23 Depth=1
	movl	-96(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB48_55:                              # %if.end349
                                        #   in Loop: Header=BB48_23 Depth=1
	jmp	.LBB48_56
.LBB48_56:                              # %for.inc350
                                        #   in Loop: Header=BB48_23 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB48_23
.LBB48_57:                              # %for.end352
	movq	-160(%rbp), %rax
	movslq	-104(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB48_58:                              # %for.cond355
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_62 Depth 2
                                        #     Child Loop BB48_66 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB48_60
# %bb.59:                               # %land.rhs358
                                        #   in Loop: Header=BB48_58 Depth=1
	cmpl	$0, -36(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB48_60:                              # %land.end361
                                        #   in Loop: Header=BB48_58 Depth=1
	testb	$1, %al
	jne	.LBB48_61
	jmp	.LBB48_71
.LBB48_61:                              # %for.body363
                                        #   in Loop: Header=BB48_58 Depth=1
	movl	$0, -16(%rbp)
.LBB48_62:                              # %for.cond364
                                        #   Parent Loop BB48_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB48_65
# %bb.63:                               # %for.body367
                                        #   in Loop: Header=BB48_62 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.64:                               # %for.inc375
                                        #   in Loop: Header=BB48_62 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB48_62
.LBB48_65:                              # %for.end377
                                        #   in Loop: Header=BB48_58 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -16(%rbp)
.LBB48_66:                              # %for.cond396
                                        #   Parent Loop BB48_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB48_69
# %bb.67:                               # %for.body399
                                        #   in Loop: Header=BB48_66 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -88(%rbp)
	movslq	-16(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-88(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-88(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-88(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.68:                               # %for.inc421
                                        #   in Loop: Header=BB48_66 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB48_66
.LBB48_69:                              # %for.end423
                                        #   in Loop: Header=BB48_58 Depth=1
	jmp	.LBB48_70
.LBB48_70:                              # %for.inc424
                                        #   in Loop: Header=BB48_58 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB48_58
.LBB48_71:                              # %for.end426
	movl	$0, -16(%rbp)
.LBB48_72:                              # %for.cond427
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_76 Depth 2
                                        #     Child Loop BB48_80 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB48_74
# %bb.73:                               # %land.rhs430
                                        #   in Loop: Header=BB48_72 Depth=1
	cmpl	$0, -36(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB48_74:                              # %land.end433
                                        #   in Loop: Header=BB48_72 Depth=1
	testb	$1, %al
	jne	.LBB48_75
	jmp	.LBB48_109
.LBB48_75:                              # %for.body435
                                        #   in Loop: Header=BB48_72 Depth=1
	movl	$0, -12(%rbp)
.LBB48_76:                              # %for.cond436
                                        #   Parent Loop BB48_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB48_79
# %bb.77:                               # %for.body439
                                        #   in Loop: Header=BB48_76 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.78:                               # %for.inc447
                                        #   in Loop: Header=BB48_76 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB48_76
.LBB48_79:                              # %for.end449
                                        #   in Loop: Header=BB48_72 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -12(%rbp)
.LBB48_80:                              # %for.cond468
                                        #   Parent Loop BB48_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB48_107
# %bb.81:                               # %for.body471
                                        #   in Loop: Header=BB48_80 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB48_101
# %bb.82:                               # %if.then474
                                        #   in Loop: Header=BB48_80 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-80(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	addl	-80(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-16(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-12(%rbp), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB48_84
# %bb.83:                               # %cond.true
                                        #   in Loop: Header=BB48_80 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB48_85
.LBB48_84:                              # %cond.false
                                        #   in Loop: Header=BB48_80 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-12(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB48_85:                              # %cond.end
                                        #   in Loop: Header=BB48_80 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB48_87
# %bb.86:                               # %cond.true515
                                        #   in Loop: Header=BB48_80 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB48_91
.LBB48_87:                              # %cond.false518
                                        #   in Loop: Header=BB48_80 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-12(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB48_89
# %bb.88:                               # %cond.true539
                                        #   in Loop: Header=BB48_80 Depth=2
	xorl	%eax, %eax
	jmp	.LBB48_90
.LBB48_89:                              # %cond.false540
                                        #   in Loop: Header=BB48_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB48_90:                              # %cond.end559
                                        #   in Loop: Header=BB48_80 Depth=2
.LBB48_91:                              # %cond.end561
                                        #   in Loop: Header=BB48_80 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-80(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	subl	-80(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-16(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-20(%rbp), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB48_93
# %bb.92:                               # %cond.true591
                                        #   in Loop: Header=BB48_80 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB48_94
.LBB48_93:                              # %cond.false592
                                        #   in Loop: Header=BB48_80 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-20(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB48_94:                              # %cond.end611
                                        #   in Loop: Header=BB48_80 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB48_96
# %bb.95:                               # %cond.true615
                                        #   in Loop: Header=BB48_80 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB48_100
.LBB48_96:                              # %cond.false618
                                        #   in Loop: Header=BB48_80 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-20(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB48_98
# %bb.97:                               # %cond.true639
                                        #   in Loop: Header=BB48_80 Depth=2
	xorl	%eax, %eax
	jmp	.LBB48_99
.LBB48_98:                              # %cond.false640
                                        #   in Loop: Header=BB48_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB48_99:                              # %cond.end659
                                        #   in Loop: Header=BB48_80 Depth=2
.LBB48_100:                             # %cond.end661
                                        #   in Loop: Header=BB48_80 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB48_105
.LBB48_101:                             # %if.else669
                                        #   in Loop: Header=BB48_80 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB48_103
# %bb.102:                              # %if.then671
                                        #   in Loop: Header=BB48_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB48_104
.LBB48_103:                             # %if.else692
                                        #   in Loop: Header=BB48_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB48_104:                             # %if.end717
                                        #   in Loop: Header=BB48_80 Depth=2
	jmp	.LBB48_105
.LBB48_105:                             # %if.end718
                                        #   in Loop: Header=BB48_80 Depth=2
	jmp	.LBB48_106
.LBB48_106:                             # %for.inc719
                                        #   in Loop: Header=BB48_80 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB48_80
.LBB48_107:                             # %for.end721
                                        #   in Loop: Header=BB48_72 Depth=1
	jmp	.LBB48_108
.LBB48_108:                             # %for.inc722
                                        #   in Loop: Header=BB48_72 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB48_72
.LBB48_109:                             # %for.end724
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB48_122
# %bb.110:                              # %if.then727
	movl	$0, -12(%rbp)
.LBB48_111:                             # %for.cond728
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_113 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB48_121
# %bb.112:                              # %for.body731
                                        #   in Loop: Header=BB48_111 Depth=1
	movl	$0, -16(%rbp)
.LBB48_113:                             # %for.cond732
                                        #   Parent Loop BB48_111 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB48_119
# %bb.114:                              # %for.body735
                                        #   in Loop: Header=BB48_113 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB48_116
# %bb.115:                              # %if.then737
                                        #   in Loop: Header=BB48_113 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-32(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB48_117
.LBB48_116:                             # %if.else761
                                        #   in Loop: Header=BB48_113 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-32(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB48_117:                             # %if.end779
                                        #   in Loop: Header=BB48_113 Depth=2
	jmp	.LBB48_118
.LBB48_118:                             # %for.inc780
                                        #   in Loop: Header=BB48_113 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB48_113
.LBB48_119:                             # %for.end782
                                        #   in Loop: Header=BB48_111 Depth=1
	jmp	.LBB48_120
.LBB48_120:                             # %for.inc783
                                        #   in Loop: Header=BB48_111 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB48_111
.LBB48_121:                             # %for.end785
	jmp	.LBB48_122
.LBB48_122:                             # %if.end786
	movl	-120(%rbp), %ebx
	cmpl	$2067153800, -148(%rbp) # imm = 0x7B364388
	jne	.LBB48_124
.LBB48_123:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB48_124:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB48_123
.Lfunc_end48:
	.size	dct_luma.39, .Lfunc_end48-dct_luma.39
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function dct_luma_sp.40
.LCPI49_0:
	.quad	4616189618054758400     # double 4
.LCPI49_1:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI49_2:
	.quad	4611686018427387904     # double 2
.LCPI49_3:
	.quad	4613937818241073152     # double 3
	.text
	.globl	dct_luma_sp.40
	.p2align	4, 0x90
	.type	dct_luma_sp.40,@function
dct_luma_sp.40:                         # @dct_luma_sp.40
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -24
	vmovsd	.LCPI49_2(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI49_3(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$618724190, -212(%rbp)  # imm = 0x24E0FB5E
	movl	%edi, -132(%rbp)
	movl	%esi, -128(%rbp)
	movq	%rdx, -224(%rbp)
	movl	-132(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -188(%rbp)
	movl	-128(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -196(%rbp)
	movl	-196(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-188(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -184(%rbp)
	movl	-196(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-188(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -180(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-184(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-180(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -240(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-184(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-180(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -248(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -176(%rbp)
	movq	-176(%rbp), %rax
	movl	12(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI49_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI49_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmulsd	%xmm0, %xmm2, %xmm0
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -232(%rbp)
	movq	-176(%rbp), %rax
	movl	12(%rax), %eax
	subl	$0, %eax
	cltd
	movl	$6, %edi
	idivl	%edi
	movl	%eax, -140(%rbp)
	movq	-176(%rbp), %rax
	movl	12(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%edx, -104(%rbp)
	movl	-140(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -148(%rbp)
	movq	-176(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%eax, -200(%rbp)
	movq	-176(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%edx, -136(%rbp)
	movl	-200(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -124(%rbp)
	movl	-148(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %esi
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	idivl	%edi
	movl	%eax, -204(%rbp)
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movl	%esi, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -208(%rbp)
	movl	$0, -12(%rbp)
.LBB49_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_3 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB49_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB49_1 Depth=1
	movl	$0, -16(%rbp)
.LBB49_3:                               # %for.cond38
                                        #   Parent Loop BB49_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB49_6
# %bb.4:                                # %for.body41
                                        #   in Loop: Header=BB49_3 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-132(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-128(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-132(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-128(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB49_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB49_3
.LBB49_6:                               # %for.end
                                        #   in Loop: Header=BB49_1 Depth=1
	jmp	.LBB49_7
.LBB49_7:                               # %for.inc66
                                        #   in Loop: Header=BB49_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB49_1
.LBB49_8:                               # %for.end68
	movl	$0, -12(%rbp)
.LBB49_9:                               # %for.cond69
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_11 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB49_16
# %bb.10:                               # %for.body72
                                        #   in Loop: Header=BB49_9 Depth=1
	movl	$0, -16(%rbp)
.LBB49_11:                              # %for.cond73
                                        #   Parent Loop BB49_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB49_14
# %bb.12:                               # %for.body76
                                        #   in Loop: Header=BB49_11 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.13:                               # %for.inc104
                                        #   in Loop: Header=BB49_11 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB49_11
.LBB49_14:                              # %for.end106
                                        #   in Loop: Header=BB49_9 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.15:                               # %for.inc137
                                        #   in Loop: Header=BB49_9 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB49_9
.LBB49_16:                              # %for.end139
	movl	$0, -16(%rbp)
.LBB49_17:                              # %for.cond140
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_19 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB49_24
# %bb.18:                               # %for.body143
                                        #   in Loop: Header=BB49_17 Depth=1
	movl	$0, -12(%rbp)
.LBB49_19:                              # %for.cond144
                                        #   Parent Loop BB49_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB49_22
# %bb.20:                               # %for.body147
                                        #   in Loop: Header=BB49_19 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-24(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.21:                               # %for.inc175
                                        #   in Loop: Header=BB49_19 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB49_19
.LBB49_22:                              # %for.end177
                                        #   in Loop: Header=BB49_17 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.23:                               # %for.inc208
                                        #   in Loop: Header=BB49_17 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB49_17
.LBB49_24:                              # %for.end210
	movl	$0, -12(%rbp)
.LBB49_25:                              # %for.cond211
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_27 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB49_32
# %bb.26:                               # %for.body214
                                        #   in Loop: Header=BB49_25 Depth=1
	movl	$0, -16(%rbp)
.LBB49_27:                              # %for.cond215
                                        #   Parent Loop BB49_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB49_30
# %bb.28:                               # %for.body218
                                        #   in Loop: Header=BB49_27 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.29:                               # %for.inc242
                                        #   in Loop: Header=BB49_27 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB49_27
.LBB49_30:                              # %for.end244
                                        #   in Loop: Header=BB49_25 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -320(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -288(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -304(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
# %bb.31:                               # %for.inc271
                                        #   in Loop: Header=BB49_25 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB49_25
.LBB49_32:                              # %for.end273
	movl	$0, -16(%rbp)
.LBB49_33:                              # %for.cond274
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_35 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB49_40
# %bb.34:                               # %for.body277
                                        #   in Loop: Header=BB49_33 Depth=1
	movl	$0, -12(%rbp)
.LBB49_35:                              # %for.cond278
                                        #   Parent Loop BB49_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB49_38
# %bb.36:                               # %for.body281
                                        #   in Loop: Header=BB49_35 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-24(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.37:                               # %for.inc305
                                        #   in Loop: Header=BB49_35 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB49_35
.LBB49_38:                              # %for.end307
                                        #   in Loop: Header=BB49_33 Depth=1
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-320(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.39:                               # %for.inc334
                                        #   in Loop: Header=BB49_33 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB49_33
.LBB49_40:                              # %for.end336
	movl	$0, -192(%rbp)
	movl	$-1, -64(%rbp)
	movl	$0, -112(%rbp)
	movl	$0, -68(%rbp)
.LBB49_41:                              # %for.cond337
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -68(%rbp)
	jge	.LBB49_80
# %bb.42:                               # %for.body340
                                        #   in Loop: Header=BB49_41 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB49_45
# %bb.43:                               # %lor.lhs.false
                                        #   in Loop: Header=BB49_41 Depth=1
	cmpl	$0, mb_adaptive
	je	.LBB49_46
# %bb.44:                               # %land.lhs.true
                                        #   in Loop: Header=BB49_41 Depth=1
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB49_46
.LBB49_45:                              # %if.then
                                        #   in Loop: Header=BB49_41 Depth=1
	movslq	-68(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-68(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB49_47
.LBB49_46:                              # %if.else
                                        #   in Loop: Header=BB49_41 Depth=1
	movslq	-68(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-68(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB49_47:                              # %if.end
                                        #   in Loop: Header=BB49_41 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	movl	$0, -100(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-208(%rbp), %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	cltd
	idivl	(%rsi,%rcx,4)
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-20(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -108(%rbp)
	movl	-108(%rbp), %edi
	callq	abs
	movslq	-104(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-204(%rbp), %eax
	movl	-148(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movl	%eax, -116(%rbp)
	movl	-116(%rbp), %edi
	callq	abs
	movslq	-104(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-204(%rbp), %eax
	movl	-148(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -56(%rbp)
	movl	-20(%rbp), %eax
	cmpl	-56(%rbp), %eax
	je	.LBB49_63
# %bb.48:                               # %land.lhs.true424
                                        #   in Loop: Header=BB49_41 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB49_63
# %bb.49:                               # %land.lhs.true427
                                        #   in Loop: Header=BB49_41 Depth=1
	cmpl	$0, -56(%rbp)
	je	.LBB49_63
# %bb.50:                               # %if.then430
                                        #   in Loop: Header=BB49_41 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-20(%rbp), %edi
	movl	-108(%rbp), %esi
	callq	sign
	movslq	-104(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-140(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
	movl	-20(%rbp), %edi
	movl	-64(%rbp), %esi
	leaq	-144(%rbp), %rdx
	leaq	-216(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	-232(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-144(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-56(%rbp), %edi
	movl	-116(%rbp), %esi
	callq	sign
	movslq	-104(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-140(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -168(%rbp)
	movl	-56(%rbp), %edi
	movl	-64(%rbp), %esi
	leaq	-144(%rbp), %rdx
	leaq	-216(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	vmovsd	-232(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-144(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -168(%rbp)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-168(%rbp), %xmm0
	jne	.LBB49_55
	jp	.LBB49_55
# %bb.51:                               # %if.then495
                                        #   in Loop: Header=BB49_41 Depth=1
	movl	-20(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-56(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB49_53
# %bb.52:                               # %cond.true
                                        #   in Loop: Header=BB49_41 Depth=1
	movl	-20(%rbp), %eax
	jmp	.LBB49_54
.LBB49_53:                              # %cond.false
                                        #   in Loop: Header=BB49_41 Depth=1
	movl	-56(%rbp), %eax
.LBB49_54:                              # %cond.end
                                        #   in Loop: Header=BB49_41 Depth=1
	movl	%eax, -60(%rbp)
	jmp	.LBB49_59
.LBB49_55:                              # %if.else500
                                        #   in Loop: Header=BB49_41 Depth=1
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-168(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB49_57
# %bb.56:                               # %if.then503
                                        #   in Loop: Header=BB49_41 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB49_58
.LBB49_57:                              # %if.else504
                                        #   in Loop: Header=BB49_41 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB49_58:                              # %if.end505
                                        #   in Loop: Header=BB49_41 Depth=1
	jmp	.LBB49_59
.LBB49_59:                              # %if.end506
                                        #   in Loop: Header=BB49_41 Depth=1
	movl	-60(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jne	.LBB49_61
# %bb.60:                               # %cond.true509
                                        #   in Loop: Header=BB49_41 Depth=1
	movl	-108(%rbp), %eax
	jmp	.LBB49_62
.LBB49_61:                              # %cond.false510
                                        #   in Loop: Header=BB49_41 Depth=1
	movl	-116(%rbp), %eax
.LBB49_62:                              # %cond.end511
                                        #   in Loop: Header=BB49_41 Depth=1
	movl	%eax, -120(%rbp)
	jmp	.LBB49_73
.LBB49_63:                              # %if.else513
                                        #   in Loop: Header=BB49_41 Depth=1
	movl	-20(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jne	.LBB49_65
# %bb.64:                               # %if.then516
                                        #   in Loop: Header=BB49_41 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-108(%rbp), %eax
	movl	%eax, -120(%rbp)
	jmp	.LBB49_72
.LBB49_65:                              # %if.else517
                                        #   in Loop: Header=BB49_41 Depth=1
	cmpl	$0, -20(%rbp)
	jne	.LBB49_67
# %bb.66:                               # %cond.true520
                                        #   in Loop: Header=BB49_41 Depth=1
	movl	-20(%rbp), %eax
	jmp	.LBB49_68
.LBB49_67:                              # %cond.false521
                                        #   in Loop: Header=BB49_41 Depth=1
	movl	-56(%rbp), %eax
.LBB49_68:                              # %cond.end522
                                        #   in Loop: Header=BB49_41 Depth=1
	movl	%eax, -60(%rbp)
	cmpl	$0, -20(%rbp)
	jne	.LBB49_70
# %bb.69:                               # %cond.true526
                                        #   in Loop: Header=BB49_41 Depth=1
	movl	-108(%rbp), %eax
	jmp	.LBB49_71
.LBB49_70:                              # %cond.false527
                                        #   in Loop: Header=BB49_41 Depth=1
	movl	-116(%rbp), %eax
.LBB49_71:                              # %cond.end528
                                        #   in Loop: Header=BB49_41 Depth=1
	movl	%eax, -120(%rbp)
.LBB49_72:                              # %if.end530
                                        #   in Loop: Header=BB49_41 Depth=1
	jmp	.LBB49_73
.LBB49_73:                              # %if.end531
                                        #   in Loop: Header=BB49_41 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB49_78
# %bb.74:                               # %if.then534
                                        #   in Loop: Header=BB49_41 Depth=1
	movl	$1, -192(%rbp)
	cmpl	$1, -60(%rbp)
	jle	.LBB49_76
# %bb.75:                               # %if.then537
                                        #   in Loop: Header=BB49_41 Depth=1
	movq	-224(%rbp), %rax
	movl	(%rax), %ecx
	addl	$999999, %ecx           # imm = 0xF423F
	movl	%ecx, (%rax)
	jmp	.LBB49_77
.LBB49_76:                              # %if.else539
                                        #   in Loop: Header=BB49_41 Depth=1
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-64(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-224(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB49_77:                              # %if.end546
                                        #   in Loop: Header=BB49_41 Depth=1
	movl	-60(%rbp), %edi
	movl	-120(%rbp), %esi
	callq	sign
	movq	-240(%rbp), %rcx
	movslq	-112(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	movq	-248(%rbp), %rcx
	movslq	-112(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	movl	$-1, -64(%rbp)
	movl	-60(%rbp), %edi
	movl	-120(%rbp), %esi
	callq	sign
	movslq	-104(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-140(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	movl	%eax, -100(%rbp)
.LBB49_78:                              # %if.end568
                                        #   in Loop: Header=BB49_41 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	-100(%rbp), %eax
	movl	%eax, -100(%rbp)
	movl	-100(%rbp), %edi
	callq	abs
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-208(%rbp), %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-100(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-200(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.79:                               # %for.inc598
                                        #   in Loop: Header=BB49_41 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB49_41
.LBB49_80:                              # %for.end600
	movq	-240(%rbp), %rax
	movslq	-112(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB49_81:                              # %for.cond603
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_83 Depth 2
                                        #     Child Loop BB49_87 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB49_92
# %bb.82:                               # %for.body606
                                        #   in Loop: Header=BB49_81 Depth=1
	movl	$0, -16(%rbp)
.LBB49_83:                              # %for.cond607
                                        #   Parent Loop BB49_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB49_86
# %bb.84:                               # %for.body610
                                        #   in Loop: Header=BB49_83 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.85:                               # %for.inc618
                                        #   in Loop: Header=BB49_83 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB49_83
.LBB49_86:                              # %for.end620
                                        #   in Loop: Header=BB49_81 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB49_87:                              # %for.cond639
                                        #   Parent Loop BB49_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB49_90
# %bb.88:                               # %for.body642
                                        #   in Loop: Header=BB49_87 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.89:                               # %for.inc664
                                        #   in Loop: Header=BB49_87 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB49_87
.LBB49_90:                              # %for.end666
                                        #   in Loop: Header=BB49_81 Depth=1
	jmp	.LBB49_91
.LBB49_91:                              # %for.inc667
                                        #   in Loop: Header=BB49_81 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB49_81
.LBB49_92:                              # %for.end669
	movl	$0, -16(%rbp)
.LBB49_93:                              # %for.cond670
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_95 Depth 2
                                        #     Child Loop BB49_99 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB49_122
# %bb.94:                               # %for.body673
                                        #   in Loop: Header=BB49_93 Depth=1
	movl	$0, -12(%rbp)
.LBB49_95:                              # %for.cond674
                                        #   Parent Loop BB49_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB49_98
# %bb.96:                               # %for.body677
                                        #   in Loop: Header=BB49_95 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.97:                               # %for.inc685
                                        #   in Loop: Header=BB49_95 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB49_95
.LBB49_98:                              # %for.end687
                                        #   in Loop: Header=BB49_93 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB49_99:                              # %for.cond706
                                        #   Parent Loop BB49_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB49_120
# %bb.100:                              # %for.body709
                                        #   in Loop: Header=BB49_99 Depth=2
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-24(%rbp), %rsi
	addl	-96(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB49_102
# %bb.101:                              # %cond.true720
                                        #   in Loop: Header=BB49_99 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB49_103
.LBB49_102:                             # %cond.false721
                                        #   in Loop: Header=BB49_99 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-24(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB49_103:                             # %cond.end729
                                        #   in Loop: Header=BB49_99 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB49_105
# %bb.104:                              # %cond.true733
                                        #   in Loop: Header=BB49_99 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB49_109
.LBB49_105:                             # %cond.false735
                                        #   in Loop: Header=BB49_99 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-24(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB49_107
# %bb.106:                              # %cond.true745
                                        #   in Loop: Header=BB49_99 Depth=2
	xorl	%eax, %eax
	jmp	.LBB49_108
.LBB49_107:                             # %cond.false746
                                        #   in Loop: Header=BB49_99 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-24(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB49_108:                             # %cond.end754
                                        #   in Loop: Header=BB49_99 Depth=2
.LBB49_109:                             # %cond.end756
                                        #   in Loop: Header=BB49_99 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-24(%rbp), %rsi
	subl	-96(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB49_111
# %bb.110:                              # %cond.true773
                                        #   in Loop: Header=BB49_99 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB49_112
.LBB49_111:                             # %cond.false774
                                        #   in Loop: Header=BB49_99 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-24(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB49_112:                             # %cond.end782
                                        #   in Loop: Header=BB49_99 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB49_114
# %bb.113:                              # %cond.true786
                                        #   in Loop: Header=BB49_99 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB49_118
.LBB49_114:                             # %cond.false788
                                        #   in Loop: Header=BB49_99 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-24(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB49_116
# %bb.115:                              # %cond.true798
                                        #   in Loop: Header=BB49_99 Depth=2
	xorl	%eax, %eax
	jmp	.LBB49_117
.LBB49_116:                             # %cond.false799
                                        #   in Loop: Header=BB49_99 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-24(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB49_117:                             # %cond.end807
                                        #   in Loop: Header=BB49_99 Depth=2
.LBB49_118:                             # %cond.end809
                                        #   in Loop: Header=BB49_99 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.119:                              # %for.inc816
                                        #   in Loop: Header=BB49_99 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB49_99
.LBB49_120:                             # %for.end818
                                        #   in Loop: Header=BB49_93 Depth=1
	jmp	.LBB49_121
.LBB49_121:                             # %for.inc819
                                        #   in Loop: Header=BB49_93 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB49_93
.LBB49_122:                             # %for.end821
	movl	$0, -12(%rbp)
.LBB49_123:                             # %for.cond822
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_125 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB49_130
# %bb.124:                              # %for.body825
                                        #   in Loop: Header=BB49_123 Depth=1
	movl	$0, -16(%rbp)
.LBB49_125:                             # %for.cond826
                                        #   Parent Loop BB49_123 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB49_128
# %bb.126:                              # %for.body829
                                        #   in Loop: Header=BB49_125 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-128(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-132(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.127:                              # %for.inc844
                                        #   in Loop: Header=BB49_125 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB49_125
.LBB49_128:                             # %for.end846
                                        #   in Loop: Header=BB49_123 Depth=1
	jmp	.LBB49_129
.LBB49_129:                             # %for.inc847
                                        #   in Loop: Header=BB49_123 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB49_123
.LBB49_130:                             # %for.end849
	movl	-192(%rbp), %ebx
	cmpl	$618724190, -212(%rbp)  # imm = 0x24E0FB5E
	jne	.LBB49_132
.LBB49_131:
	movl	%ebx, %eax
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB49_132:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB49_131
.Lfunc_end49:
	.size	dct_luma_sp.40, .Lfunc_end49-dct_luma_sp.40
	.cfi_endproc
                                        # -- End function
	.globl	dct_luma_16x16.41       # -- Begin function dct_luma_16x16.41
	.p2align	4, 0x90
	.type	dct_luma_16x16.41,@function
dct_luma_16x16.41:                      # @dct_luma_16x16.41
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$2280, %rsp             # imm = 0x8E8
	.cfi_offset %rbx, -24
	xorl	%eax, %eax
	movl	$740059433, -132(%rbp)  # imm = 0x2C1C6929
	movl	%edi, -104(%rbp)
	movl	$0, -108(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -128(%rbp)
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -144(%rbp)
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -240(%rbp)
	movq	-128(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	img, %rdx
	addl	72668(%rdx), %ecx
	cmpl	$0, %ecx
	jne	.LBB50_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%al
.LBB50_2:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -68(%rbp)
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -100(%rbp)
	movl	-68(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -12(%rbp)
.LBB50_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_5 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB50_13
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB50_3 Depth=1
	movl	$0, -16(%rbp)
.LBB50_5:                               # %for.cond16
                                        #   Parent Loop BB50_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB50_11
# %bb.6:                                # %for.body18
                                        #   in Loop: Header=BB50_5 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB50_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB50_5 Depth=2
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB50_9
.LBB50_8:                               # %if.else
                                        #   in Loop: Header=BB50_5 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB50_9:                               # %if.end
                                        #   in Loop: Header=BB50_5 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rdi
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	shlq	$6, %rax
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movl	%ecx, (%rdi,%rax,4)
# %bb.10:                               # %for.inc
                                        #   in Loop: Header=BB50_5 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB50_5
.LBB50_11:                              # %for.end
                                        #   in Loop: Header=BB50_3 Depth=1
	jmp	.LBB50_12
.LBB50_12:                              # %for.inc61
                                        #   in Loop: Header=BB50_3 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB50_3
.LBB50_13:                              # %for.end63
	movl	$0, -24(%rbp)
.LBB50_14:                              # %for.cond64
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_18 Depth 2
                                        #       Child Loop BB50_20 Depth 3
                                        #         Child Loop BB50_22 Depth 4
                                        #       Child Loop BB50_28 Depth 3
                                        #         Child Loop BB50_30 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -24(%rbp)
	jge	.LBB50_16
# %bb.15:                               # %land.rhs67
                                        #   in Loop: Header=BB50_14 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB50_16:                              # %land.end69
                                        #   in Loop: Header=BB50_14 Depth=1
	testb	$1, %al
	jne	.LBB50_17
	jmp	.LBB50_39
.LBB50_17:                              # %for.body71
                                        #   in Loop: Header=BB50_14 Depth=1
	movl	$0, -20(%rbp)
.LBB50_18:                              # %for.cond72
                                        #   Parent Loop BB50_14 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB50_20 Depth 3
                                        #         Child Loop BB50_22 Depth 4
                                        #       Child Loop BB50_28 Depth 3
                                        #         Child Loop BB50_30 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB50_37
# %bb.19:                               # %for.body75
                                        #   in Loop: Header=BB50_18 Depth=2
	movl	$0, -12(%rbp)
.LBB50_20:                              # %for.cond76
                                        #   Parent Loop BB50_14 Depth=1
                                        #     Parent Loop BB50_18 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB50_22 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB50_27
# %bb.21:                               # %for.body79
                                        #   in Loop: Header=BB50_20 Depth=3
	movl	$0, -16(%rbp)
.LBB50_22:                              # %for.cond80
                                        #   Parent Loop BB50_14 Depth=1
                                        #     Parent Loop BB50_18 Depth=2
                                        #       Parent Loop BB50_20 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB50_25
# %bb.23:                               # %for.body83
                                        #   in Loop: Header=BB50_22 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	movl	%ecx, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-56(%rbp), %rax
	movl	%ecx, -48(%rbp,%rax,4)
# %bb.24:                               # %for.inc123
                                        #   in Loop: Header=BB50_22 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB50_22
.LBB50_25:                              # %for.end125
                                        #   in Loop: Header=BB50_20 Depth=3
	leaq	-1264(%rbp), %rax
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movq	%rax, %rdx
	addq	$256, %rdx              # imm = 0x100
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	addq	$768, %rax              # imm = 0x300
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.26:                               # %for.inc167
                                        #   in Loop: Header=BB50_20 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB50_20
.LBB50_27:                              # %for.end169
                                        #   in Loop: Header=BB50_18 Depth=2
	movl	$0, -16(%rbp)
.LBB50_28:                              # %for.cond170
                                        #   Parent Loop BB50_14 Depth=1
                                        #     Parent Loop BB50_18 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB50_30 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB50_35
# %bb.29:                               # %for.body173
                                        #   in Loop: Header=BB50_28 Depth=3
	movl	$0, -12(%rbp)
.LBB50_30:                              # %for.cond174
                                        #   Parent Loop BB50_14 Depth=1
                                        #     Parent Loop BB50_18 Depth=2
                                        #       Parent Loop BB50_28 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB50_33
# %bb.31:                               # %for.body177
                                        #   in Loop: Header=BB50_30 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-12(%rbp), %rdx
	movl	%ecx, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-52(%rbp), %rax
	movl	%ecx, -48(%rbp,%rax,4)
# %bb.32:                               # %for.inc217
                                        #   in Loop: Header=BB50_30 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB50_30
.LBB50_33:                              # %for.end219
                                        #   in Loop: Header=BB50_28 Depth=3
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, 32(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, 16(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, 48(%rax,%rdx,4)
# %bb.34:                               # %for.inc262
                                        #   in Loop: Header=BB50_28 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB50_28
.LBB50_35:                              # %for.end264
                                        #   in Loop: Header=BB50_18 Depth=2
	jmp	.LBB50_36
.LBB50_36:                              # %for.inc265
                                        #   in Loop: Header=BB50_18 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB50_18
.LBB50_37:                              # %for.end267
                                        #   in Loop: Header=BB50_14 Depth=1
	jmp	.LBB50_38
.LBB50_38:                              # %for.inc268
                                        #   in Loop: Header=BB50_14 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB50_14
.LBB50_39:                              # %for.end270
	movl	$0, -12(%rbp)
.LBB50_40:                              # %for.cond271
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_42 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB50_47
# %bb.41:                               # %for.body274
                                        #   in Loop: Header=BB50_40 Depth=1
	movl	$0, -16(%rbp)
.LBB50_42:                              # %for.cond275
                                        #   Parent Loop BB50_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB50_45
# %bb.43:                               # %for.body278
                                        #   in Loop: Header=BB50_42 Depth=2
	leaq	-1264(%rbp), %rax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.44:                               # %for.inc289
                                        #   in Loop: Header=BB50_42 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB50_42
.LBB50_45:                              # %for.end291
                                        #   in Loop: Header=BB50_40 Depth=1
	jmp	.LBB50_46
.LBB50_46:                              # %for.inc292
                                        #   in Loop: Header=BB50_40 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB50_40
.LBB50_47:                              # %for.end294
	movl	$0, -12(%rbp)
.LBB50_48:                              # %for.cond295
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_52 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB50_50
# %bb.49:                               # %land.rhs298
                                        #   in Loop: Header=BB50_48 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB50_50:                              # %land.end301
                                        #   in Loop: Header=BB50_48 Depth=1
	testb	$1, %al
	jne	.LBB50_51
	jmp	.LBB50_57
.LBB50_51:                              # %for.body303
                                        #   in Loop: Header=BB50_48 Depth=1
	movl	$0, -16(%rbp)
.LBB50_52:                              # %for.cond304
                                        #   Parent Loop BB50_48 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB50_55
# %bb.53:                               # %for.body307
                                        #   in Loop: Header=BB50_52 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-56(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-56(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-56(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.54:                               # %for.inc331
                                        #   in Loop: Header=BB50_52 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB50_52
.LBB50_55:                              # %for.end333
                                        #   in Loop: Header=BB50_48 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -224(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -192(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	addl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -208(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.56:                               # %for.inc358
                                        #   in Loop: Header=BB50_48 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB50_48
.LBB50_57:                              # %for.end360
	movl	$0, -16(%rbp)
.LBB50_58:                              # %for.cond361
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_62 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB50_60
# %bb.59:                               # %land.rhs364
                                        #   in Loop: Header=BB50_58 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB50_60:                              # %land.end367
                                        #   in Loop: Header=BB50_58 Depth=1
	testb	$1, %al
	jne	.LBB50_61
	jmp	.LBB50_67
.LBB50_61:                              # %for.body369
                                        #   in Loop: Header=BB50_58 Depth=1
	movl	$0, -12(%rbp)
.LBB50_62:                              # %for.cond370
                                        #   Parent Loop BB50_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB50_65
# %bb.63:                               # %for.body373
                                        #   in Loop: Header=BB50_62 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.64:                               # %for.inc397
                                        #   in Loop: Header=BB50_62 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB50_62
.LBB50_65:                              # %for.end399
                                        #   in Loop: Header=BB50_58 Depth=1
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-224(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-36(%rbp), %ecx
	addl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.66:                               # %for.inc427
                                        #   in Loop: Header=BB50_58 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB50_58
.LBB50_67:                              # %for.end429
	movl	$-1, -80(%rbp)
	movl	$0, -76(%rbp)
	movl	$0, -60(%rbp)
.LBB50_68:                              # %for.cond430
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -60(%rbp)
	jge	.LBB50_88
# %bb.69:                               # %for.body433
                                        #   in Loop: Header=BB50_68 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB50_72
# %bb.70:                               # %lor.lhs.false
                                        #   in Loop: Header=BB50_68 Depth=1
	cmpl	$0, mb_adaptive
	je	.LBB50_73
# %bb.71:                               # %land.lhs.true
                                        #   in Loop: Header=BB50_68 Depth=1
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB50_73
.LBB50_72:                              # %if.then437
                                        #   in Loop: Header=BB50_68 Depth=1
	movslq	-60(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-60(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB50_74
.LBB50_73:                              # %if.else446
                                        #   in Loop: Header=BB50_68 Depth=1
	movslq	-60(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-60(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB50_74:                              # %if.end455
                                        #   in Loop: Header=BB50_68 Depth=1
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB50_76
# %bb.75:                               # %if.then458
                                        #   in Loop: Header=BB50_68 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -64(%rbp)
	jmp	.LBB50_77
.LBB50_76:                              # %if.else463
                                        #   in Loop: Header=BB50_68 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-68(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-116(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -64(%rbp)
.LBB50_77:                              # %if.end481
                                        #   in Loop: Header=BB50_68 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB50_82
# %bb.78:                               # %land.lhs.true484
                                        #   in Loop: Header=BB50_68 Depth=1
	movq	img, %rax
	cmpl	$10, 40(%rax)
	jge	.LBB50_82
# %bb.79:                               # %if.then488
                                        #   in Loop: Header=BB50_68 Depth=1
	cmpl	$2063, -64(%rbp)        # imm = 0x80F
	jle	.LBB50_81
# %bb.80:                               # %if.then491
                                        #   in Loop: Header=BB50_68 Depth=1
	movl	$2063, -64(%rbp)        # imm = 0x80F
.LBB50_81:                              # %if.end492
                                        #   in Loop: Header=BB50_68 Depth=1
	jmp	.LBB50_82
.LBB50_82:                              # %if.end493
                                        #   in Loop: Header=BB50_68 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB50_84
# %bb.83:                               # %if.then496
                                        #   in Loop: Header=BB50_68 Depth=1
	movl	-64(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-144(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	movq	-240(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	movl	$-1, -80(%rbp)
.LBB50_84:                              # %if.end507
                                        #   in Loop: Header=BB50_68 Depth=1
	cmpl	$0, -72(%rbp)
	jne	.LBB50_86
# %bb.85:                               # %if.then509
                                        #   in Loop: Header=BB50_68 Depth=1
	movl	-64(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB50_86:                              # %if.end519
                                        #   in Loop: Header=BB50_68 Depth=1
	jmp	.LBB50_87
.LBB50_87:                              # %for.inc520
                                        #   in Loop: Header=BB50_68 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB50_68
.LBB50_88:                              # %for.end522
	movq	-144(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB50_89:                              # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_93 Depth 2
                                        #     Child Loop BB50_97 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB50_91
# %bb.90:                               # %land.rhs528
                                        #   in Loop: Header=BB50_89 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB50_91:                              # %land.end531
                                        #   in Loop: Header=BB50_89 Depth=1
	testb	$1, %al
	jne	.LBB50_92
	jmp	.LBB50_102
.LBB50_92:                              # %for.body533
                                        #   in Loop: Header=BB50_89 Depth=1
	movl	$0, -16(%rbp)
.LBB50_93:                              # %for.cond534
                                        #   Parent Loop BB50_89 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB50_96
# %bb.94:                               # %for.body537
                                        #   in Loop: Header=BB50_93 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.95:                               # %for.inc544
                                        #   in Loop: Header=BB50_93 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB50_93
.LBB50_96:                              # %for.end546
                                        #   in Loop: Header=BB50_89 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB50_97:                              # %for.cond563
                                        #   Parent Loop BB50_89 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB50_100
# %bb.98:                               # %for.body566
                                        #   in Loop: Header=BB50_97 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-56(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-56(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movslq	-56(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.99:                               # %for.inc586
                                        #   in Loop: Header=BB50_97 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB50_97
.LBB50_100:                             # %for.end588
                                        #   in Loop: Header=BB50_89 Depth=1
	jmp	.LBB50_101
.LBB50_101:                             # %for.inc589
                                        #   in Loop: Header=BB50_89 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB50_89
.LBB50_102:                             # %for.end591
	movl	$0, -16(%rbp)
.LBB50_103:                             # %for.cond592
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_107 Depth 2
                                        #     Child Loop BB50_111 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB50_105
# %bb.104:                              # %land.rhs595
                                        #   in Loop: Header=BB50_103 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB50_105:                             # %land.end598
                                        #   in Loop: Header=BB50_103 Depth=1
	testb	$1, %al
	jne	.LBB50_106
	jmp	.LBB50_119
.LBB50_106:                             # %for.body600
                                        #   in Loop: Header=BB50_103 Depth=1
	movl	$0, -12(%rbp)
.LBB50_107:                             # %for.cond601
                                        #   Parent Loop BB50_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB50_110
# %bb.108:                              # %for.body604
                                        #   in Loop: Header=BB50_107 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.109:                              # %for.inc611
                                        #   in Loop: Header=BB50_107 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB50_107
.LBB50_110:                             # %for.end613
                                        #   in Loop: Header=BB50_103 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB50_111:                             # %for.cond630
                                        #   Parent Loop BB50_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB50_117
# %bb.112:                              # %for.body633
                                        #   in Loop: Header=BB50_111 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	cmpl	$6, -68(%rbp)
	jge	.LBB50_114
# %bb.113:                              # %if.then637
                                        #   in Loop: Header=BB50_111 Depth=2
	leaq	-1264(%rbp), %r8
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %esi
	movslq	-52(%rbp), %rax
	addl	-96(%rbp,%rax,4), %esi
	movslq	-100(%rbp), %rax
	shlq	$6, %rax
	movabsq	$InvLevelScale4x4Luma_Intra, %rdi
	movq	%rdi, %rcx
	addq	%rax, %rcx
	imull	(%rcx), %esi
	movl	$5, %eax
	movl	$5, %ecx
	subl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r9d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %esi
	movl	$6, %edx
	movl	$6, %ecx
	subl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %esi
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movq	%r8, %rbx
	addq	%rcx, %rbx
	movslq	-12(%rbp), %rcx
	movl	%esi, (%rbx,%rcx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %esi
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %esi
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdi
	imull	(%rdi), %esi
	subl	-68(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r9d
	addl	%r9d, %esi
	subl	-68(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %esi
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r8
	movslq	-52(%rbp), %rax
	movl	%esi, (%r8,%rax,4)
	jmp	.LBB50_115
.LBB50_114:                             # %if.else680
                                        #   in Loop: Header=BB50_111 Depth=2
	leaq	-1264(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-52(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %edx
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rsi
	movq	%rsi, %rdi
	addq	%rcx, %rdi
	imull	(%rdi), %edx
	movl	-68(%rbp), %ecx
	subl	$6, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdi
	addq	%rcx, %rdi
	movslq	-12(%rbp), %rcx
	movl	%edx, (%rdi,%rcx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-68(%rbp), %ecx
	subl	$6, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-52(%rbp), %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB50_115:                             # %if.end717
                                        #   in Loop: Header=BB50_111 Depth=2
	jmp	.LBB50_116
.LBB50_116:                             # %for.inc718
                                        #   in Loop: Header=BB50_111 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB50_111
.LBB50_117:                             # %for.end720
                                        #   in Loop: Header=BB50_103 Depth=1
	jmp	.LBB50_118
.LBB50_118:                             # %for.inc721
                                        #   in Loop: Header=BB50_103 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB50_103
.LBB50_119:                             # %for.end723
	movl	$0, -24(%rbp)
.LBB50_120:                             # %for.cond724
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_122 Depth 2
                                        #       Child Loop BB50_124 Depth 3
                                        #       Child Loop BB50_143 Depth 3
                                        #         Child Loop BB50_147 Depth 4
                                        #         Child Loop BB50_151 Depth 4
                                        #       Child Loop BB50_157 Depth 3
                                        #         Child Loop BB50_161 Depth 4
                                        #         Child Loop BB50_165 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB50_174
# %bb.121:                              # %for.body727
                                        #   in Loop: Header=BB50_120 Depth=1
	movl	$0, -20(%rbp)
.LBB50_122:                             # %for.cond728
                                        #   Parent Loop BB50_120 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB50_124 Depth 3
                                        #       Child Loop BB50_143 Depth 3
                                        #         Child Loop BB50_147 Depth 4
                                        #         Child Loop BB50_151 Depth 4
                                        #       Child Loop BB50_157 Depth 3
                                        #         Child Loop BB50_161 Depth 4
                                        #         Child Loop BB50_165 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB50_172
# %bb.123:                              # %for.body731
                                        #   in Loop: Header=BB50_122 Depth=2
	movl	$-1, -80(%rbp)
	movl	$0, -76(%rbp)
	movl	-24(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -120(%rbp)
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -112(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -152(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -232(%rbp)
	movl	$1, -60(%rbp)
.LBB50_124:                             # %for.cond751
                                        #   Parent Loop BB50_120 Depth=1
                                        #     Parent Loop BB50_122 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -60(%rbp)
	jge	.LBB50_142
# %bb.125:                              # %for.body754
                                        #   in Loop: Header=BB50_124 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB50_128
# %bb.126:                              # %lor.lhs.false757
                                        #   in Loop: Header=BB50_124 Depth=3
	cmpl	$0, mb_adaptive
	je	.LBB50_129
# %bb.127:                              # %land.lhs.true759
                                        #   in Loop: Header=BB50_124 Depth=3
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB50_129
.LBB50_128:                             # %if.then762
                                        #   in Loop: Header=BB50_124 Depth=3
	movslq	-60(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-60(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB50_130
.LBB50_129:                             # %if.else771
                                        #   in Loop: Header=BB50_124 Depth=3
	movslq	-60(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-60(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB50_130:                             # %if.end780
                                        #   in Loop: Header=BB50_124 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB50_132
# %bb.131:                              # %if.then783
                                        #   in Loop: Header=BB50_124 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -64(%rbp)
	jmp	.LBB50_133
.LBB50_132:                             # %if.else793
                                        #   in Loop: Header=BB50_124 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-68(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -64(%rbp)
.LBB50_133:                             # %if.end818
                                        #   in Loop: Header=BB50_124 Depth=3
	cmpl	$0, -64(%rbp)
	je	.LBB50_135
# %bb.134:                              # %if.then821
                                        #   in Loop: Header=BB50_124 Depth=3
	movl	$15, -108(%rbp)
	movl	-64(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-152(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	movq	-232(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	movl	$-1, -80(%rbp)
.LBB50_135:                             # %if.end836
                                        #   in Loop: Header=BB50_124 Depth=3
	cmpl	$0, -72(%rbp)
	jne	.LBB50_140
# %bb.136:                              # %if.then838
                                        #   in Loop: Header=BB50_124 Depth=3
	movl	-64(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movl	%eax, -64(%rbp)
	cmpl	$4, -68(%rbp)
	jge	.LBB50_138
# %bb.137:                              # %if.then850
                                        #   in Loop: Header=BB50_124 Depth=3
	movl	-64(%rbp), %eax
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB50_139
.LBB50_138:                             # %if.else871
                                        #   in Loop: Header=BB50_124 Depth=3
	movl	-64(%rbp), %eax
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-68(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB50_139:                             # %if.end889
                                        #   in Loop: Header=BB50_124 Depth=3
	jmp	.LBB50_140
.LBB50_140:                             # %if.end890
                                        #   in Loop: Header=BB50_124 Depth=3
	jmp	.LBB50_141
.LBB50_141:                             # %for.inc891
                                        #   in Loop: Header=BB50_124 Depth=3
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB50_124
.LBB50_142:                             # %for.end893
                                        #   in Loop: Header=BB50_122 Depth=2
	movq	-152(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB50_143:                             # %for.cond896
                                        #   Parent Loop BB50_120 Depth=1
                                        #     Parent Loop BB50_122 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB50_147 Depth 4
                                        #         Child Loop BB50_151 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB50_145
# %bb.144:                              # %land.rhs899
                                        #   in Loop: Header=BB50_143 Depth=3
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB50_145:                             # %land.end902
                                        #   in Loop: Header=BB50_143 Depth=3
	testb	$1, %al
	jne	.LBB50_146
	jmp	.LBB50_156
.LBB50_146:                             # %for.body904
                                        #   in Loop: Header=BB50_143 Depth=3
	movl	$0, -16(%rbp)
.LBB50_147:                             # %for.cond905
                                        #   Parent Loop BB50_120 Depth=1
                                        #     Parent Loop BB50_122 Depth=2
                                        #       Parent Loop BB50_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB50_150
# %bb.148:                              # %for.body908
                                        #   in Loop: Header=BB50_147 Depth=4
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.149:                              # %for.inc919
                                        #   in Loop: Header=BB50_147 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB50_147
.LBB50_150:                             # %for.end921
                                        #   in Loop: Header=BB50_143 Depth=3
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB50_151:                             # %for.cond940
                                        #   Parent Loop BB50_120 Depth=1
                                        #     Parent Loop BB50_122 Depth=2
                                        #       Parent Loop BB50_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB50_154
# %bb.152:                              # %for.body943
                                        #   in Loop: Header=BB50_151 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ecx
	movslq	-56(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movslq	-16(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.153:                              # %for.inc971
                                        #   in Loop: Header=BB50_151 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB50_151
.LBB50_154:                             # %for.end973
                                        #   in Loop: Header=BB50_143 Depth=3
	jmp	.LBB50_155
.LBB50_155:                             # %for.inc974
                                        #   in Loop: Header=BB50_143 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB50_143
.LBB50_156:                             # %for.end976
                                        #   in Loop: Header=BB50_122 Depth=2
	movl	$0, -16(%rbp)
.LBB50_157:                             # %for.cond977
                                        #   Parent Loop BB50_120 Depth=1
                                        #     Parent Loop BB50_122 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB50_161 Depth 4
                                        #         Child Loop BB50_165 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB50_159
# %bb.158:                              # %land.rhs980
                                        #   in Loop: Header=BB50_157 Depth=3
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB50_159:                             # %land.end983
                                        #   in Loop: Header=BB50_157 Depth=3
	testb	$1, %al
	jne	.LBB50_160
	jmp	.LBB50_170
.LBB50_160:                             # %for.body985
                                        #   in Loop: Header=BB50_157 Depth=3
	movl	$0, -12(%rbp)
.LBB50_161:                             # %for.cond986
                                        #   Parent Loop BB50_120 Depth=1
                                        #     Parent Loop BB50_122 Depth=2
                                        #       Parent Loop BB50_157 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB50_164
# %bb.162:                              # %for.body989
                                        #   in Loop: Header=BB50_161 Depth=4
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.163:                              # %for.inc1000
                                        #   in Loop: Header=BB50_161 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB50_161
.LBB50_164:                             # %for.end1002
                                        #   in Loop: Header=BB50_157 Depth=3
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB50_165:                             # %for.cond1021
                                        #   Parent Loop BB50_120 Depth=1
                                        #     Parent Loop BB50_122 Depth=2
                                        #       Parent Loop BB50_157 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB50_168
# %bb.166:                              # %for.body1024
                                        #   in Loop: Header=BB50_165 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ecx
	movslq	-52(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.167:                              # %for.inc1052
                                        #   in Loop: Header=BB50_165 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB50_165
.LBB50_168:                             # %for.end1054
                                        #   in Loop: Header=BB50_157 Depth=3
	jmp	.LBB50_169
.LBB50_169:                             # %for.inc1055
                                        #   in Loop: Header=BB50_157 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB50_157
.LBB50_170:                             # %for.end1057
                                        #   in Loop: Header=BB50_122 Depth=2
	jmp	.LBB50_171
.LBB50_171:                             # %for.inc1058
                                        #   in Loop: Header=BB50_122 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB50_122
.LBB50_172:                             # %for.end1060
                                        #   in Loop: Header=BB50_120 Depth=1
	jmp	.LBB50_173
.LBB50_173:                             # %for.inc1061
                                        #   in Loop: Header=BB50_120 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB50_120
.LBB50_174:                             # %for.end1063
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB50_184
# %bb.175:                              # %if.then1066
	movl	$0, -12(%rbp)
.LBB50_176:                             # %for.cond1067
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_178 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB50_183
# %bb.177:                              # %for.body1070
                                        #   in Loop: Header=BB50_176 Depth=1
	movl	$0, -16(%rbp)
.LBB50_178:                             # %for.cond1071
                                        #   Parent Loop BB50_176 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB50_181
# %bb.179:                              # %for.body1074
                                        #   in Loop: Header=BB50_178 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.180:                              # %for.inc1091
                                        #   in Loop: Header=BB50_178 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB50_178
.LBB50_181:                             # %for.end1093
                                        #   in Loop: Header=BB50_176 Depth=1
	jmp	.LBB50_182
.LBB50_182:                             # %for.inc1094
                                        #   in Loop: Header=BB50_176 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB50_176
.LBB50_183:                             # %for.end1096
	jmp	.LBB50_196
.LBB50_184:                             # %if.else1097
	movl	$0, -12(%rbp)
.LBB50_185:                             # %for.cond1098
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_187 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB50_195
# %bb.186:                              # %for.body1101
                                        #   in Loop: Header=BB50_185 Depth=1
	movl	$0, -16(%rbp)
.LBB50_187:                             # %for.cond1102
                                        #   Parent Loop BB50_185 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB50_193
# %bb.188:                              # %for.body1105
                                        #   in Loop: Header=BB50_187 Depth=2
	cmpl	$0, -72(%rbp)
	je	.LBB50_190
# %bb.189:                              # %if.then1107
                                        #   in Loop: Header=BB50_187 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB50_191
.LBB50_190:                             # %if.else1125
                                        #   in Loop: Header=BB50_187 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB50_191:                             # %if.end1145
                                        #   in Loop: Header=BB50_187 Depth=2
	jmp	.LBB50_192
.LBB50_192:                             # %for.inc1146
                                        #   in Loop: Header=BB50_187 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB50_187
.LBB50_193:                             # %for.end1148
                                        #   in Loop: Header=BB50_185 Depth=1
	jmp	.LBB50_194
.LBB50_194:                             # %for.inc1149
                                        #   in Loop: Header=BB50_185 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB50_185
.LBB50_195:                             # %for.end1151
	jmp	.LBB50_196
.LBB50_196:                             # %if.end1152
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB50_218
# %bb.197:                              # %if.then1155
	movl	$0, -12(%rbp)
.LBB50_198:                             # %for.cond1156
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_200 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB50_217
# %bb.199:                              # %for.body1159
                                        #   in Loop: Header=BB50_198 Depth=1
	movl	$0, -16(%rbp)
.LBB50_200:                             # %for.cond1160
                                        #   Parent Loop BB50_198 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB50_215
# %bb.201:                              # %for.body1163
                                        #   in Loop: Header=BB50_200 Depth=2
	cmpl	$0, -72(%rbp)
	je	.LBB50_203
# %bb.202:                              # %if.then1165
                                        #   in Loop: Header=BB50_200 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB50_213
.LBB50_203:                             # %if.else1186
                                        #   in Loop: Header=BB50_200 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	leaq	-2288(%rbp), %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movslq	(%rsi,%rdx,4), %rdx
	movq	img, %rsi
	addq	$4792, %rsi             # imm = 0x12B8
	movslq	-104(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-12(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB50_205
# %bb.204:                              # %cond.true
                                        #   in Loop: Header=BB50_200 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB50_206
.LBB50_205:                             # %cond.false
                                        #   in Loop: Header=BB50_200 Depth=2
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movslq	(%rdx,%rcx,4), %rcx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-104(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB50_206:                             # %cond.end
                                        #   in Loop: Header=BB50_200 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB50_208
# %bb.207:                              # %cond.true1226
                                        #   in Loop: Header=BB50_200 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB50_212
.LBB50_208:                             # %cond.false1229
                                        #   in Loop: Header=BB50_200 Depth=2
	xorl	%eax, %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movslq	(%rdx,%rcx,4), %rcx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-104(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB50_210
# %bb.209:                              # %cond.true1249
                                        #   in Loop: Header=BB50_200 Depth=2
	xorl	%eax, %eax
	jmp	.LBB50_211
.LBB50_210:                             # %cond.false1250
                                        #   in Loop: Header=BB50_200 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movslq	(%rcx,%rax,4), %rax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB50_211:                             # %cond.end1268
                                        #   in Loop: Header=BB50_200 Depth=2
.LBB50_212:                             # %cond.end1270
                                        #   in Loop: Header=BB50_200 Depth=2
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB50_213:                             # %if.end1282
                                        #   in Loop: Header=BB50_200 Depth=2
	jmp	.LBB50_214
.LBB50_214:                             # %for.inc1283
                                        #   in Loop: Header=BB50_200 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB50_200
.LBB50_215:                             # %for.end1285
                                        #   in Loop: Header=BB50_198 Depth=1
	jmp	.LBB50_216
.LBB50_216:                             # %for.inc1286
                                        #   in Loop: Header=BB50_198 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB50_198
.LBB50_217:                             # %for.end1288
	jmp	.LBB50_218
.LBB50_218:                             # %if.end1289
	movl	-108(%rbp), %ebx
	cmpl	$740059433, -132(%rbp)  # imm = 0x2C1C6929
	jne	.LBB50_220
.LBB50_219:
	movl	%ebx, %eax
	addq	$2280, %rsp             # imm = 0x8E8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB50_220:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB50_219
.Lfunc_end50:
	.size	dct_luma_16x16.41, .Lfunc_end50-dct_luma_16x16.41
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma_DC.42        # -- Begin function dct_chroma_DC.42
	.p2align	4, 0x90
	.type	dct_chroma_DC.42,@function
dct_chroma_DC.42:                       # @dct_chroma_DC.42
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$346394893, -44(%rbp)   # imm = 0x14A5910D
	movl	%edi, -20(%rbp)
	movl	%esi, -28(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$-1, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
.LBB51_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -16(%rbp)
	jge	.LBB51_9
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB51_1 Depth=1
	movslq	-16(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -36(%rbp)
	movslq	-16(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -40(%rbp)
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-40(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -32(%rbp)
	cmpl	$0, -32(%rbp)
	je	.LBB51_7
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	$1, %eax
	cmpl	-28(%rbp), %eax
	jle	.LBB51_5
# %bb.4:                                # %cond.true
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	$1, %eax
	jmp	.LBB51_6
.LBB51_5:                               # %cond.false
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	-28(%rbp), %eax
.LBB51_6:                               # %cond.end
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	%eax, -28(%rbp)
	movl	-32(%rbp), %edi
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-40(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-56(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-24(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	$-1, -24(%rbp)
.LBB51_7:                               # %if.end
                                        #   in Loop: Header=BB51_1 Depth=1
	jmp	.LBB51_8
.LBB51_8:                               # %for.inc
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB51_1
.LBB51_9:                               # %for.end
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-28(%rbp), %ebx
	cmpl	$346394893, -44(%rbp)   # imm = 0x14A5910D
	jne	.LBB51_11
.LBB51_10:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB51_11:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB51_10
.Lfunc_end51:
	.size	dct_chroma_DC.42, .Lfunc_end51-dct_chroma_DC.42
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function dct_chroma_sp.43
.LCPI52_0:
	.quad	4616189618054758400     # double 4
.LCPI52_1:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI52_2:
	.quad	4611686018427387904     # double 2
.LCPI52_3:
	.quad	4613937818241073152     # double 3
	.text
	.globl	dct_chroma_sp.43
	.p2align	4, 0x90
	.type	dct_chroma_sp.43,@function
dct_chroma_sp.43:                       # @dct_chroma_sp.43
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$552, %rsp              # imm = 0x228
	.cfi_offset %rbx, -24
	vmovsd	.LCPI52_2(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI52_3(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$807981897, -268(%rbp)  # imm = 0x3028D349
	movl	%edi, -116(%rbp)
	movl	%esi, -204(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -192(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -288(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -296(%rbp)
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI52_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI52_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmulsd	%xmm0, %xmm2, %xmm0
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -264(%rbp)
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB52_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB52_6
.LBB52_2:                               # %cond.false
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB52_4
# %bb.3:                                # %cond.true18
	movl	$51, %eax
	jmp	.LBB52_5
.LBB52_4:                               # %cond.false19
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
.LBB52_5:                               # %cond.end
.LBB52_6:                               # %cond.end23
	movl	%eax, -148(%rbp)
	movq	-192(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB52_8
# %bb.7:                                # %cond.true29
	xorl	%eax, %eax
	jmp	.LBB52_12
.LBB52_8:                               # %cond.false30
	movq	-192(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB52_10
# %bb.9:                                # %cond.true36
	movl	$51, %eax
	jmp	.LBB52_11
.LBB52_10:                              # %cond.false37
	movq	-192(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
.LBB52_11:                              # %cond.end41
.LBB52_12:                              # %cond.end43
	movl	%eax, -212(%rbp)
	cmpl	$0, -148(%rbp)
	jge	.LBB52_14
# %bb.13:                               # %cond.true47
	movl	-148(%rbp), %eax
	jmp	.LBB52_15
.LBB52_14:                              # %cond.false48
	movslq	-148(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB52_15:                              # %cond.end52
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -124(%rbp)
	cmpl	$0, -148(%rbp)
	jge	.LBB52_17
# %bb.16:                               # %cond.true58
	movl	-148(%rbp), %eax
	jmp	.LBB52_18
.LBB52_17:                              # %cond.false59
	movslq	-148(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB52_18:                              # %cond.end63
	subl	$0, %eax
	cltd
	movl	$6, %esi
	idivl	%esi
	movl	%edx, -96(%rbp)
	movl	-124(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -208(%rbp)
	movl	-208(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	idivl	%esi
	movl	%eax, -224(%rbp)
	cmpl	$0, -212(%rbp)
	jge	.LBB52_20
# %bb.19:                               # %cond.true70
	movq	-192(%rbp), %rax
	movl	16(%rax), %eax
	jmp	.LBB52_21
.LBB52_20:                              # %cond.false72
	movslq	-212(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB52_21:                              # %cond.end76
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -232(%rbp)
	cmpl	$0, -212(%rbp)
	jge	.LBB52_23
# %bb.22:                               # %cond.true82
	movq	-192(%rbp), %rax
	movl	16(%rax), %eax
	jmp	.LBB52_24
.LBB52_23:                              # %cond.false84
	movslq	-212(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB52_24:                              # %cond.end88
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%edx, -108(%rbp)
	movl	-232(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -112(%rbp)
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -216(%rbp)
	movl	$0, -12(%rbp)
.LBB52_25:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_27 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB52_32
# %bb.26:                               # %for.body
                                        #   in Loop: Header=BB52_25 Depth=1
	movl	$0, -16(%rbp)
.LBB52_27:                              # %for.cond97
                                        #   Parent Loop BB52_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB52_30
# %bb.28:                               # %for.body100
                                        #   in Loop: Header=BB52_27 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.29:                               # %for.inc
                                        #   in Loop: Header=BB52_27 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_27
.LBB52_30:                              # %for.end
                                        #   in Loop: Header=BB52_25 Depth=1
	jmp	.LBB52_31
.LBB52_31:                              # %for.inc121
                                        #   in Loop: Header=BB52_25 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_25
.LBB52_32:                              # %for.end123
	movl	$0, -20(%rbp)
.LBB52_33:                              # %for.cond124
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_35 Depth 2
                                        #       Child Loop BB52_37 Depth 3
                                        #         Child Loop BB52_39 Depth 4
                                        #       Child Loop BB52_45 Depth 3
                                        #         Child Loop BB52_47 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB52_56
# %bb.34:                               # %for.body127
                                        #   in Loop: Header=BB52_33 Depth=1
	movl	$0, -24(%rbp)
.LBB52_35:                              # %for.cond128
                                        #   Parent Loop BB52_33 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_37 Depth 3
                                        #         Child Loop BB52_39 Depth 4
                                        #       Child Loop BB52_45 Depth 3
                                        #         Child Loop BB52_47 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB52_54
# %bb.36:                               # %for.body131
                                        #   in Loop: Header=BB52_35 Depth=2
	movl	$0, -12(%rbp)
.LBB52_37:                              # %for.cond132
                                        #   Parent Loop BB52_33 Depth=1
                                        #     Parent Loop BB52_35 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB52_39 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB52_44
# %bb.38:                               # %for.body135
                                        #   in Loop: Header=BB52_37 Depth=3
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	$0, -16(%rbp)
.LBB52_39:                              # %for.cond137
                                        #   Parent Loop BB52_33 Depth=1
                                        #     Parent Loop BB52_35 Depth=2
                                        #       Parent Loop BB52_37 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB52_42
# %bb.40:                               # %for.body140
                                        #   in Loop: Header=BB52_39 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-48(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-88(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-48(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-88(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-48(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-88(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.41:                               # %for.inc172
                                        #   in Loop: Header=BB52_39 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_39
.LBB52_42:                              # %for.end174
                                        #   in Loop: Header=BB52_37 Depth=3
	movl	-80(%rbp), %eax
	addl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-48(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	subl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-48(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	shll	$1, %eax
	addl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-48(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	movl	-72(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-48(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.43:                               # %for.inc212
                                        #   in Loop: Header=BB52_37 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_37
.LBB52_44:                              # %for.end214
                                        #   in Loop: Header=BB52_35 Depth=2
	movl	$0, -16(%rbp)
.LBB52_45:                              # %for.cond215
                                        #   Parent Loop BB52_33 Depth=1
                                        #     Parent Loop BB52_35 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB52_47 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB52_52
# %bb.46:                               # %for.body218
                                        #   in Loop: Header=BB52_45 Depth=3
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -12(%rbp)
.LBB52_47:                              # %for.cond220
                                        #   Parent Loop BB52_33 Depth=1
                                        #     Parent Loop BB52_35 Depth=2
                                        #       Parent Loop BB52_45 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB52_50
# %bb.48:                               # %for.body223
                                        #   in Loop: Header=BB52_47 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-52(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-56(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-52(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-56(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-56(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.49:                               # %for.inc255
                                        #   in Loop: Header=BB52_47 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_47
.LBB52_50:                              # %for.end257
                                        #   in Loop: Header=BB52_45 Depth=3
	movl	-80(%rbp), %eax
	addl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	subl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	shll	$1, %eax
	addl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	movl	-72(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.51:                               # %for.inc296
                                        #   in Loop: Header=BB52_45 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_45
.LBB52_52:                              # %for.end298
                                        #   in Loop: Header=BB52_35 Depth=2
	jmp	.LBB52_53
.LBB52_53:                              # %for.inc299
                                        #   in Loop: Header=BB52_35 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB52_35
.LBB52_54:                              # %for.end301
                                        #   in Loop: Header=BB52_33 Depth=1
	jmp	.LBB52_55
.LBB52_55:                              # %for.inc302
                                        #   in Loop: Header=BB52_33 Depth=1
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB52_33
.LBB52_56:                              # %for.end304
	movl	$0, -20(%rbp)
.LBB52_57:                              # %for.cond305
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_59 Depth 2
                                        #       Child Loop BB52_61 Depth 3
                                        #         Child Loop BB52_63 Depth 4
                                        #       Child Loop BB52_69 Depth 3
                                        #         Child Loop BB52_71 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB52_80
# %bb.58:                               # %for.body308
                                        #   in Loop: Header=BB52_57 Depth=1
	movl	$0, -24(%rbp)
.LBB52_59:                              # %for.cond309
                                        #   Parent Loop BB52_57 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_61 Depth 3
                                        #         Child Loop BB52_63 Depth 4
                                        #       Child Loop BB52_69 Depth 3
                                        #         Child Loop BB52_71 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB52_78
# %bb.60:                               # %for.body312
                                        #   in Loop: Header=BB52_59 Depth=2
	movl	$0, -12(%rbp)
.LBB52_61:                              # %for.cond313
                                        #   Parent Loop BB52_57 Depth=1
                                        #     Parent Loop BB52_59 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB52_63 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB52_68
# %bb.62:                               # %for.body316
                                        #   in Loop: Header=BB52_61 Depth=3
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	$0, -16(%rbp)
.LBB52_63:                              # %for.cond318
                                        #   Parent Loop BB52_57 Depth=1
                                        #     Parent Loop BB52_59 Depth=2
                                        #       Parent Loop BB52_61 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB52_66
# %bb.64:                               # %for.body321
                                        #   in Loop: Header=BB52_63 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
	movslq	%eax, %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-48(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movl	-88(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-48(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	movl	%ecx, -80(%rbp,%rdx,4)
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-48(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movl	-88(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-48(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-88(%rbp), %rax
	movl	%ecx, -80(%rbp,%rax,4)
# %bb.65:                               # %for.inc349
                                        #   in Loop: Header=BB52_63 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_63
.LBB52_66:                              # %for.end351
                                        #   in Loop: Header=BB52_61 Depth=3
	movl	-80(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	leaq	-560(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-48(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-80(%rbp), %ecx
	subl	-76(%rbp), %ecx
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-48(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	shll	$1, %ecx
	addl	-72(%rbp), %ecx
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-48(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-48(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.67:                               # %for.inc385
                                        #   in Loop: Header=BB52_61 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_61
.LBB52_68:                              # %for.end387
                                        #   in Loop: Header=BB52_59 Depth=2
	movl	$0, -16(%rbp)
.LBB52_69:                              # %for.cond388
                                        #   Parent Loop BB52_57 Depth=1
                                        #     Parent Loop BB52_59 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB52_71 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB52_76
# %bb.70:                               # %for.body391
                                        #   in Loop: Header=BB52_69 Depth=3
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -12(%rbp)
.LBB52_71:                              # %for.cond393
                                        #   Parent Loop BB52_57 Depth=1
                                        #     Parent Loop BB52_59 Depth=2
                                        #       Parent Loop BB52_69 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB52_74
# %bb.72:                               # %for.body396
                                        #   in Loop: Header=BB52_71 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-52(%rbp), %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-20(%rbp), %edx
	addl	-56(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-12(%rbp), %rdx
	movl	%ecx, -80(%rbp,%rdx,4)
	movslq	-52(%rbp), %rcx
	shlq	$5, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movl	-20(%rbp), %edx
	addl	-56(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-56(%rbp), %rax
	movl	%ecx, -80(%rbp,%rax,4)
# %bb.73:                               # %for.inc424
                                        #   in Loop: Header=BB52_71 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_71
.LBB52_74:                              # %for.end426
                                        #   in Loop: Header=BB52_69 Depth=3
	movl	-80(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	-52(%rbp), %rdx
	shlq	$5, %rdx
	leaq	-560(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-20(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-80(%rbp), %ecx
	subl	-76(%rbp), %ecx
	movslq	-52(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-20(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	shll	$1, %ecx
	addl	-72(%rbp), %ecx
	movslq	-52(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-20(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-52(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movl	-20(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.75:                               # %for.inc461
                                        #   in Loop: Header=BB52_69 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_69
.LBB52_76:                              # %for.end463
                                        #   in Loop: Header=BB52_59 Depth=2
	jmp	.LBB52_77
.LBB52_77:                              # %for.inc464
                                        #   in Loop: Header=BB52_59 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB52_59
.LBB52_78:                              # %for.end466
                                        #   in Loop: Header=BB52_57 Depth=1
	jmp	.LBB52_79
.LBB52_79:                              # %for.inc467
                                        #   in Loop: Header=BB52_57 Depth=1
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB52_57
.LBB52_80:                              # %for.end469
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -176(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -172(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -168(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -164(%rbp)
	movl	-560(%rbp), %eax
	addl	-432(%rbp), %eax
	addl	-544(%rbp), %eax
	addl	-416(%rbp), %eax
	movl	%eax, -256(%rbp)
	movl	-560(%rbp), %eax
	subl	-432(%rbp), %eax
	addl	-544(%rbp), %eax
	subl	-416(%rbp), %eax
	movl	%eax, -252(%rbp)
	movl	-560(%rbp), %eax
	addl	-432(%rbp), %eax
	subl	-544(%rbp), %eax
	subl	-416(%rbp), %eax
	movl	%eax, -248(%rbp)
	movl	-560(%rbp), %eax
	subl	-432(%rbp), %eax
	subl	-544(%rbp), %eax
	addl	-416(%rbp), %eax
	movl	%eax, -244(%rbp)
	movl	$-1, -60(%rbp)
	movl	$0, -84(%rbp)
	movl	$0, -32(%rbp)
.LBB52_81:                              # %for.cond582
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -32(%rbp)
	jge	.LBB52_120
# %bb.82:                               # %for.body585
                                        #   in Loop: Header=BB52_81 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -92(%rbp)
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-216(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-112(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	movl	-112(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	cltd
	idivl	(%rsi)
	movl	%eax, -40(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-40(%rbp), %edi
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -40(%rbp)
	movl	-40(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-224(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-208(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %eax
	movslq	-32(%rbp), %rcx
	subl	-256(%rbp,%rcx,4), %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-224(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-208(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	je	.LBB52_98
# %bb.83:                               # %land.lhs.true
                                        #   in Loop: Header=BB52_81 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB52_98
# %bb.84:                               # %land.lhs.true640
                                        #   in Loop: Header=BB52_81 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB52_98
# %bb.85:                               # %if.then
                                        #   in Loop: Header=BB52_81 Depth=1
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-28(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	subl	%eax, %ebx
	movslq	-32(%rbp), %rax
	subl	-256(%rbp,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movl	-28(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-120(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_c2x2
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-200(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-120(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-44(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	subl	%eax, %ebx
	movslq	-32(%rbp), %rax
	subl	-256(%rbp,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	movl	-44(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-120(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_c2x2
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-184(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-120(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-184(%rbp), %xmm0
	jne	.LBB52_90
	jp	.LBB52_90
# %bb.86:                               # %if.then685
                                        #   in Loop: Header=BB52_81 Depth=1
	movl	-28(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB52_88
# %bb.87:                               # %cond.true690
                                        #   in Loop: Header=BB52_81 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB52_89
.LBB52_88:                              # %cond.false691
                                        #   in Loop: Header=BB52_81 Depth=1
	movl	-44(%rbp), %eax
.LBB52_89:                              # %cond.end692
                                        #   in Loop: Header=BB52_81 Depth=1
	movl	%eax, -36(%rbp)
	jmp	.LBB52_94
.LBB52_90:                              # %if.else
                                        #   in Loop: Header=BB52_81 Depth=1
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-184(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB52_92
# %bb.91:                               # %if.then696
                                        #   in Loop: Header=BB52_81 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB52_93
.LBB52_92:                              # %if.else697
                                        #   in Loop: Header=BB52_81 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB52_93:                              # %if.end
                                        #   in Loop: Header=BB52_81 Depth=1
	jmp	.LBB52_94
.LBB52_94:                              # %if.end698
                                        #   in Loop: Header=BB52_81 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB52_96
# %bb.95:                               # %cond.true701
                                        #   in Loop: Header=BB52_81 Depth=1
	movl	-40(%rbp), %eax
	jmp	.LBB52_97
.LBB52_96:                              # %cond.false702
                                        #   in Loop: Header=BB52_81 Depth=1
	movl	-104(%rbp), %eax
.LBB52_97:                              # %cond.end703
                                        #   in Loop: Header=BB52_81 Depth=1
	movl	%eax, -100(%rbp)
	jmp	.LBB52_108
.LBB52_98:                              # %if.else705
                                        #   in Loop: Header=BB52_81 Depth=1
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jne	.LBB52_100
# %bb.99:                               # %if.then708
                                        #   in Loop: Header=BB52_81 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB52_107
.LBB52_100:                             # %if.else709
                                        #   in Loop: Header=BB52_81 Depth=1
	cmpl	$0, -28(%rbp)
	jne	.LBB52_102
# %bb.101:                              # %cond.true712
                                        #   in Loop: Header=BB52_81 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB52_103
.LBB52_102:                             # %cond.false713
                                        #   in Loop: Header=BB52_81 Depth=1
	movl	-44(%rbp), %eax
.LBB52_103:                             # %cond.end714
                                        #   in Loop: Header=BB52_81 Depth=1
	movl	%eax, -36(%rbp)
	cmpl	$0, -28(%rbp)
	jne	.LBB52_105
# %bb.104:                              # %cond.true718
                                        #   in Loop: Header=BB52_81 Depth=1
	movl	-40(%rbp), %eax
	jmp	.LBB52_106
.LBB52_105:                             # %cond.false719
                                        #   in Loop: Header=BB52_81 Depth=1
	movl	-104(%rbp), %eax
.LBB52_106:                             # %cond.end720
                                        #   in Loop: Header=BB52_81 Depth=1
	movl	%eax, -100(%rbp)
.LBB52_107:                             # %if.end722
                                        #   in Loop: Header=BB52_81 Depth=1
	jmp	.LBB52_108
.LBB52_108:                             # %if.end723
                                        #   in Loop: Header=BB52_81 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB52_113
# %bb.109:                              # %land.lhs.true726
                                        #   in Loop: Header=BB52_81 Depth=1
	movq	img, %rax
	cmpl	$4, 40(%rax)
	jge	.LBB52_113
# %bb.110:                              # %if.then730
                                        #   in Loop: Header=BB52_81 Depth=1
	cmpl	$2063, -36(%rbp)        # imm = 0x80F
	jle	.LBB52_112
# %bb.111:                              # %if.then733
                                        #   in Loop: Header=BB52_81 Depth=1
	movl	$2063, -36(%rbp)        # imm = 0x80F
.LBB52_112:                             # %if.end734
                                        #   in Loop: Header=BB52_81 Depth=1
	jmp	.LBB52_113
.LBB52_113:                             # %if.end735
                                        #   in Loop: Header=BB52_81 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB52_118
# %bb.114:                              # %if.then738
                                        #   in Loop: Header=BB52_81 Depth=1
	movl	-116(%rbp), %ecx
	shll	$2, %ecx
                                        # kill: def $cl killed $ecx
	movl	$983040, %eax           # imm = 0xF0000
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-204(%rbp), %eax
	jle	.LBB52_116
# %bb.115:                              # %cond.true744
                                        #   in Loop: Header=BB52_81 Depth=1
	movl	$1, %eax
	jmp	.LBB52_117
.LBB52_116:                             # %cond.false745
                                        #   in Loop: Header=BB52_81 Depth=1
	movl	-204(%rbp), %eax
.LBB52_117:                             # %cond.end746
                                        #   in Loop: Header=BB52_81 Depth=1
	movl	%eax, -204(%rbp)
	movl	-36(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movq	-288(%rbp), %rcx
	movslq	-84(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-60(%rbp), %eax
	movq	-296(%rbp), %rcx
	movslq	-84(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	movl	$-1, -60(%rbp)
	movl	-36(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	movl	%eax, -92(%rbp)
.LBB52_118:                             # %if.end763
                                        #   in Loop: Header=BB52_81 Depth=1
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %eax
	addl	-92(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-216(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-112(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-92(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-232(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.119:                              # %for.inc786
                                        #   in Loop: Header=BB52_81 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB52_81
.LBB52_120:                             # %for.end788
	movq	-288(%rbp), %rax
	movslq	-84(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13112(%rdx)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13368(%rdx)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13128(%rdx)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 13384(%rcx)
	movl	$0, -220(%rbp)
	movl	$0, -236(%rbp)
	movl	$0, -20(%rbp)
.LBB52_121:                             # %for.cond835
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_123 Depth 2
                                        #       Child Loop BB52_125 Depth 3
	cmpl	$4, -20(%rbp)
	jg	.LBB52_168
# %bb.122:                              # %for.body838
                                        #   in Loop: Header=BB52_121 Depth=1
	movl	$0, -24(%rbp)
.LBB52_123:                             # %for.cond839
                                        #   Parent Loop BB52_121 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_125 Depth 3
	cmpl	$4, -24(%rbp)
	jg	.LBB52_166
# %bb.124:                              # %for.body842
                                        #   in Loop: Header=BB52_123 Depth=2
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -240(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-240(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -280(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-240(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -304(%rbp)
	movl	$-1, -60(%rbp)
	movl	$0, -84(%rbp)
	movl	$1, -32(%rbp)
.LBB52_125:                             # %for.cond860
                                        #   Parent Loop BB52_121 Depth=1
                                        #     Parent Loop BB52_123 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -32(%rbp)
	jge	.LBB52_164
# %bb.126:                              # %for.body863
                                        #   in Loop: Header=BB52_125 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB52_129
# %bb.127:                              # %lor.lhs.false
                                        #   in Loop: Header=BB52_125 Depth=3
	cmpl	$0, mb_adaptive
	je	.LBB52_130
# %bb.128:                              # %land.lhs.true865
                                        #   in Loop: Header=BB52_125 Depth=3
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB52_130
.LBB52_129:                             # %if.then867
                                        #   in Loop: Header=BB52_125 Depth=3
	movslq	-32(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-32(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_131
.LBB52_130:                             # %if.else876
                                        #   in Loop: Header=BB52_125 Depth=3
	movslq	-32(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-32(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB52_131:                             # %if.end885
                                        #   in Loop: Header=BB52_125 Depth=3
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -92(%rbp)
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-216(%rbp), %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	cltd
	idivl	(%rsi,%rcx,4)
	movl	%eax, -40(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-40(%rbp), %edi
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -40(%rbp)
	movl	-40(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-224(%rbp), %eax
	movl	-208(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	subl	(%rdx,%rcx,4), %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-224(%rbp), %eax
	movl	-208(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	je	.LBB52_147
# %bb.132:                              # %land.lhs.true962
                                        #   in Loop: Header=BB52_125 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB52_147
# %bb.133:                              # %land.lhs.true965
                                        #   in Loop: Header=BB52_125 Depth=3
	cmpl	$0, -44(%rbp)
	je	.LBB52_147
# %bb.134:                              # %if.then968
                                        #   in Loop: Header=BB52_125 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-28(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movl	-28(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-120(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-200(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-120(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-44(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	movl	-44(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-120(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-184(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-120(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-184(%rbp), %xmm0
	jne	.LBB52_139
	jp	.LBB52_139
# %bb.135:                              # %if.then1041
                                        #   in Loop: Header=BB52_125 Depth=3
	movl	-28(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB52_137
# %bb.136:                              # %cond.true1046
                                        #   in Loop: Header=BB52_125 Depth=3
	movl	-28(%rbp), %eax
	jmp	.LBB52_138
.LBB52_137:                             # %cond.false1047
                                        #   in Loop: Header=BB52_125 Depth=3
	movl	-44(%rbp), %eax
.LBB52_138:                             # %cond.end1048
                                        #   in Loop: Header=BB52_125 Depth=3
	movl	%eax, -36(%rbp)
	jmp	.LBB52_143
.LBB52_139:                             # %if.else1050
                                        #   in Loop: Header=BB52_125 Depth=3
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-184(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB52_141
# %bb.140:                              # %if.then1053
                                        #   in Loop: Header=BB52_125 Depth=3
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB52_142
.LBB52_141:                             # %if.else1054
                                        #   in Loop: Header=BB52_125 Depth=3
	movl	-44(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB52_142:                             # %if.end1055
                                        #   in Loop: Header=BB52_125 Depth=3
	jmp	.LBB52_143
.LBB52_143:                             # %if.end1056
                                        #   in Loop: Header=BB52_125 Depth=3
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB52_145
# %bb.144:                              # %cond.true1059
                                        #   in Loop: Header=BB52_125 Depth=3
	movl	-40(%rbp), %eax
	jmp	.LBB52_146
.LBB52_145:                             # %cond.false1060
                                        #   in Loop: Header=BB52_125 Depth=3
	movl	-104(%rbp), %eax
.LBB52_146:                             # %cond.end1061
                                        #   in Loop: Header=BB52_125 Depth=3
	movl	%eax, -100(%rbp)
	jmp	.LBB52_157
.LBB52_147:                             # %if.else1063
                                        #   in Loop: Header=BB52_125 Depth=3
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jne	.LBB52_149
# %bb.148:                              # %if.then1066
                                        #   in Loop: Header=BB52_125 Depth=3
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB52_156
.LBB52_149:                             # %if.else1067
                                        #   in Loop: Header=BB52_125 Depth=3
	cmpl	$0, -28(%rbp)
	jne	.LBB52_151
# %bb.150:                              # %cond.true1070
                                        #   in Loop: Header=BB52_125 Depth=3
	movl	-28(%rbp), %eax
	jmp	.LBB52_152
.LBB52_151:                             # %cond.false1071
                                        #   in Loop: Header=BB52_125 Depth=3
	movl	-44(%rbp), %eax
.LBB52_152:                             # %cond.end1072
                                        #   in Loop: Header=BB52_125 Depth=3
	movl	%eax, -36(%rbp)
	cmpl	$0, -28(%rbp)
	jne	.LBB52_154
# %bb.153:                              # %cond.true1076
                                        #   in Loop: Header=BB52_125 Depth=3
	movl	-40(%rbp), %eax
	jmp	.LBB52_155
.LBB52_154:                             # %cond.false1077
                                        #   in Loop: Header=BB52_125 Depth=3
	movl	-104(%rbp), %eax
.LBB52_155:                             # %cond.end1078
                                        #   in Loop: Header=BB52_125 Depth=3
	movl	%eax, -100(%rbp)
.LBB52_156:                             # %if.end1080
                                        #   in Loop: Header=BB52_125 Depth=3
	jmp	.LBB52_157
.LBB52_157:                             # %if.end1081
                                        #   in Loop: Header=BB52_125 Depth=3
	cmpl	$0, -36(%rbp)
	je	.LBB52_162
# %bb.158:                              # %if.then1084
                                        #   in Loop: Header=BB52_125 Depth=3
	movl	-116(%rbp), %ecx
	shll	$2, %ecx
	addl	$16, %ecx
	movl	-20(%rbp), %eax
	sarl	$1, %eax
	movl	-24(%rbp), %edx
	sarl	$2, %edx
	addl	%edx, %eax
	addl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	cmpl	$1, -36(%rbp)
	jle	.LBB52_160
# %bb.159:                              # %if.then1097
                                        #   in Loop: Header=BB52_125 Depth=3
	movl	-220(%rbp), %eax
	addl	$999999, %eax           # imm = 0xF423F
	movl	%eax, -220(%rbp)
	jmp	.LBB52_161
.LBB52_160:                             # %if.else1099
                                        #   in Loop: Header=BB52_125 Depth=3
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-60(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	-220(%rbp), %eax
	movl	%eax, -220(%rbp)
.LBB52_161:                             # %if.end1106
                                        #   in Loop: Header=BB52_125 Depth=3
	movl	$2, -236(%rbp)
	movl	-36(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movq	-280(%rbp), %rcx
	movslq	-84(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-60(%rbp), %eax
	movq	-304(%rbp), %rcx
	movslq	-84(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	movl	$-1, -60(%rbp)
	movl	-36(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	movl	%eax, -92(%rbp)
.LBB52_162:                             # %if.end1128
                                        #   in Loop: Header=BB52_125 Depth=3
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	addl	-92(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-216(%rbp), %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-92(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-232(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.163:                              # %for.inc1162
                                        #   in Loop: Header=BB52_125 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB52_125
.LBB52_164:                             # %for.end1164
                                        #   in Loop: Header=BB52_123 Depth=2
	movq	-280(%rbp), %rax
	movslq	-84(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.165:                              # %for.inc1167
                                        #   in Loop: Header=BB52_123 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB52_123
.LBB52_166:                             # %for.end1169
                                        #   in Loop: Header=BB52_121 Depth=1
	jmp	.LBB52_167
.LBB52_167:                             # %for.inc1170
                                        #   in Loop: Header=BB52_121 Depth=1
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB52_121
.LBB52_168:                             # %for.end1172
	cmpl	$2, -236(%rbp)
	jne	.LBB52_170
# %bb.169:                              # %if.then1175
	movl	$2, -204(%rbp)
.LBB52_170:                             # %if.end1176
	movl	$0, -20(%rbp)
.LBB52_171:                             # %for.cond1177
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_173 Depth 2
                                        #       Child Loop BB52_175 Depth 3
                                        #         Child Loop BB52_177 Depth 4
                                        #         Child Loop BB52_181 Depth 4
                                        #       Child Loop BB52_187 Depth 3
                                        #         Child Loop BB52_189 Depth 4
                                        #         Child Loop BB52_193 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB52_220
# %bb.172:                              # %for.body1180
                                        #   in Loop: Header=BB52_171 Depth=1
	movl	$0, -24(%rbp)
.LBB52_173:                             # %for.cond1181
                                        #   Parent Loop BB52_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_175 Depth 3
                                        #         Child Loop BB52_177 Depth 4
                                        #         Child Loop BB52_181 Depth 4
                                        #       Child Loop BB52_187 Depth 3
                                        #         Child Loop BB52_189 Depth 4
                                        #         Child Loop BB52_193 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB52_218
# %bb.174:                              # %for.body1184
                                        #   in Loop: Header=BB52_173 Depth=2
	movl	$0, -12(%rbp)
.LBB52_175:                             # %for.cond1185
                                        #   Parent Loop BB52_171 Depth=1
                                        #     Parent Loop BB52_173 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB52_177 Depth 4
                                        #         Child Loop BB52_181 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB52_186
# %bb.176:                              # %for.body1188
                                        #   in Loop: Header=BB52_175 Depth=3
	movl	$0, -16(%rbp)
.LBB52_177:                             # %for.cond1189
                                        #   Parent Loop BB52_171 Depth=1
                                        #     Parent Loop BB52_173 Depth=2
                                        #       Parent Loop BB52_175 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB52_180
# %bb.178:                              # %for.body1192
                                        #   in Loop: Header=BB52_177 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.179:                              # %for.inc1202
                                        #   in Loop: Header=BB52_177 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_177
.LBB52_180:                             # %for.end1204
                                        #   in Loop: Header=BB52_175 Depth=3
	movl	-80(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-80(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-76(%rbp), %eax
	sarl	$1, %eax
	subl	-68(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-76(%rbp), %eax
	movl	-68(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -132(%rbp)
	movl	$0, -16(%rbp)
.LBB52_181:                             # %for.cond1223
                                        #   Parent Loop BB52_171 Depth=1
                                        #     Parent Loop BB52_173 Depth=2
                                        #       Parent Loop BB52_175 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB52_184
# %bb.182:                              # %for.body1226
                                        #   in Loop: Header=BB52_181 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -88(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-88(%rbp), %rcx
	addl	-144(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-88(%rbp), %rcx
	subl	-144(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-88(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.183:                              # %for.inc1252
                                        #   in Loop: Header=BB52_181 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_181
.LBB52_184:                             # %for.end1254
                                        #   in Loop: Header=BB52_175 Depth=3
	jmp	.LBB52_185
.LBB52_185:                             # %for.inc1255
                                        #   in Loop: Header=BB52_175 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_175
.LBB52_186:                             # %for.end1257
                                        #   in Loop: Header=BB52_173 Depth=2
	movl	$0, -16(%rbp)
.LBB52_187:                             # %for.cond1258
                                        #   Parent Loop BB52_171 Depth=1
                                        #     Parent Loop BB52_173 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB52_189 Depth 4
                                        #         Child Loop BB52_193 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB52_216
# %bb.188:                              # %for.body1261
                                        #   in Loop: Header=BB52_187 Depth=3
	movl	$0, -12(%rbp)
.LBB52_189:                             # %for.cond1262
                                        #   Parent Loop BB52_171 Depth=1
                                        #     Parent Loop BB52_173 Depth=2
                                        #       Parent Loop BB52_187 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB52_192
# %bb.190:                              # %for.body1265
                                        #   in Loop: Header=BB52_189 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.191:                              # %for.inc1275
                                        #   in Loop: Header=BB52_189 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_189
.LBB52_192:                             # %for.end1277
                                        #   in Loop: Header=BB52_187 Depth=3
	movl	-80(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-80(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-76(%rbp), %eax
	sarl	$1, %eax
	subl	-68(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-76(%rbp), %eax
	movl	-68(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -132(%rbp)
	movl	$0, -12(%rbp)
.LBB52_193:                             # %for.cond1296
                                        #   Parent Loop BB52_171 Depth=1
                                        #     Parent Loop BB52_173 Depth=2
                                        #       Parent Loop BB52_187 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB52_214
# %bb.194:                              # %for.body1299
                                        #   in Loop: Header=BB52_193 Depth=4
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	movl	72688(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-144(%rbp,%rdx,4), %edx
	movslq	-56(%rbp), %rsi
	addl	-144(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB52_196
# %bb.195:                              # %cond.true1310
                                        #   in Loop: Header=BB52_193 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB52_197
.LBB52_196:                             # %cond.false1311
                                        #   in Loop: Header=BB52_193 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	addl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB52_197:                             # %cond.end1319
                                        #   in Loop: Header=BB52_193 Depth=4
	cmpl	%ecx, %eax
	jge	.LBB52_199
# %bb.198:                              # %cond.true1323
                                        #   in Loop: Header=BB52_193 Depth=4
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB52_203
.LBB52_199:                             # %cond.false1325
                                        #   in Loop: Header=BB52_193 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	addl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB52_201
# %bb.200:                              # %cond.true1335
                                        #   in Loop: Header=BB52_193 Depth=4
	xorl	%eax, %eax
	jmp	.LBB52_202
.LBB52_201:                             # %cond.false1336
                                        #   in Loop: Header=BB52_193 Depth=4
	movslq	-12(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-56(%rbp), %rcx
	addl	-144(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB52_202:                             # %cond.end1344
                                        #   in Loop: Header=BB52_193 Depth=4
.LBB52_203:                             # %cond.end1346
                                        #   in Loop: Header=BB52_193 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movl	-20(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72688(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-144(%rbp,%rdx,4), %edx
	movslq	-56(%rbp), %rsi
	subl	-144(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB52_205
# %bb.204:                              # %cond.true1365
                                        #   in Loop: Header=BB52_193 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB52_206
.LBB52_205:                             # %cond.false1366
                                        #   in Loop: Header=BB52_193 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	subl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB52_206:                             # %cond.end1374
                                        #   in Loop: Header=BB52_193 Depth=4
	cmpl	%ecx, %eax
	jge	.LBB52_208
# %bb.207:                              # %cond.true1378
                                        #   in Loop: Header=BB52_193 Depth=4
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB52_212
.LBB52_208:                             # %cond.false1380
                                        #   in Loop: Header=BB52_193 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	subl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB52_210
# %bb.209:                              # %cond.true1390
                                        #   in Loop: Header=BB52_193 Depth=4
	xorl	%eax, %eax
	jmp	.LBB52_211
.LBB52_210:                             # %cond.false1391
                                        #   in Loop: Header=BB52_193 Depth=4
	movslq	-12(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-56(%rbp), %rcx
	subl	-144(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB52_211:                             # %cond.end1399
                                        #   in Loop: Header=BB52_193 Depth=4
.LBB52_212:                             # %cond.end1401
                                        #   in Loop: Header=BB52_193 Depth=4
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-56(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.213:                              # %for.inc1410
                                        #   in Loop: Header=BB52_193 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_193
.LBB52_214:                             # %for.end1412
                                        #   in Loop: Header=BB52_187 Depth=3
	jmp	.LBB52_215
.LBB52_215:                             # %for.inc1413
                                        #   in Loop: Header=BB52_187 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_187
.LBB52_216:                             # %for.end1415
                                        #   in Loop: Header=BB52_173 Depth=2
	jmp	.LBB52_217
.LBB52_217:                             # %for.inc1416
                                        #   in Loop: Header=BB52_173 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB52_173
.LBB52_218:                             # %for.end1418
                                        #   in Loop: Header=BB52_171 Depth=1
	jmp	.LBB52_219
.LBB52_219:                             # %for.inc1419
                                        #   in Loop: Header=BB52_171 Depth=1
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB52_171
.LBB52_220:                             # %for.end1421
	movl	$0, -12(%rbp)
.LBB52_221:                             # %for.cond1422
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_223 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB52_228
# %bb.222:                              # %for.body1425
                                        #   in Loop: Header=BB52_221 Depth=1
	movl	$0, -16(%rbp)
.LBB52_223:                             # %for.cond1426
                                        #   Parent Loop BB52_221 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB52_226
# %bb.224:                              # %for.body1429
                                        #   in Loop: Header=BB52_223 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-116(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.225:                              # %for.inc1444
                                        #   in Loop: Header=BB52_223 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_223
.LBB52_226:                             # %for.end1446
                                        #   in Loop: Header=BB52_221 Depth=1
	jmp	.LBB52_227
.LBB52_227:                             # %for.inc1447
                                        #   in Loop: Header=BB52_221 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_221
.LBB52_228:                             # %for.end1449
	movl	-204(%rbp), %ebx
	cmpl	$807981897, -268(%rbp)  # imm = 0x3028D349
	jne	.LBB52_230
.LBB52_229:
	movl	%ebx, %eax
	addq	$552, %rsp              # imm = 0x228
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB52_230:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB52_229
.Lfunc_end52:
	.size	dct_chroma_sp.43, .Lfunc_end52-dct_chroma_sp.43
	.cfi_endproc
                                        # -- End function
	.globl	copyblock_sp.44         # -- Begin function copyblock_sp.44
	.p2align	4, 0x90
	.type	copyblock_sp.44,@function
copyblock_sp.44:                        # @copyblock_sp.44
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movl	$526895186, -88(%rbp)   # imm = 0x1F67C852
	movl	%edi, -84(%rbp)
	movl	%esi, -72(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	-104(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -76(%rbp)
	movq	-104(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -68(%rbp)
	movl	-76(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	movl	$0, -4(%rbp)
.LBB53_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB53_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB53_1 Depth=1
	movl	$0, -8(%rbp)
.LBB53_3:                               # %for.cond4
                                        #   Parent Loop BB53_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB53_6
# %bb.4:                                # %for.body6
                                        #   in Loop: Header=BB53_3 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-8(%rbp), %ecx
	addl	-84(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-4(%rbp), %ecx
	addl	-72(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-176(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB53_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_3
.LBB53_6:                               # %for.end
                                        #   in Loop: Header=BB53_1 Depth=1
	jmp	.LBB53_7
.LBB53_7:                               # %for.inc17
                                        #   in Loop: Header=BB53_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_1
.LBB53_8:                               # %for.end19
	movl	$0, -4(%rbp)
.LBB53_9:                               # %for.cond20
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_11 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB53_16
# %bb.10:                               # %for.body23
                                        #   in Loop: Header=BB53_9 Depth=1
	movl	$0, -8(%rbp)
.LBB53_11:                              # %for.cond24
                                        #   Parent Loop BB53_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -8(%rbp)
	jge	.LBB53_14
# %bb.12:                               # %for.body27
                                        #   in Loop: Header=BB53_11 Depth=2
	movl	$3, %eax
	subl	-8(%rbp), %eax
	movl	%eax, -36(%rbp)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-36(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-8(%rbp), %rdx
	movl	%eax, -32(%rbp,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-36(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-36(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.13:                               # %for.inc51
                                        #   in Loop: Header=BB53_11 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_11
.LBB53_14:                              # %for.end53
                                        #   in Loop: Header=BB53_9 Depth=1
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movl	-32(%rbp), %eax
	subl	-28(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -160(%rbp,%rcx,4)
	movl	-20(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
# %bb.15:                               # %for.inc79
                                        #   in Loop: Header=BB53_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_9
.LBB53_16:                              # %for.end81
	movl	$0, -8(%rbp)
.LBB53_17:                              # %for.cond82
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_19 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB53_24
# %bb.18:                               # %for.body85
                                        #   in Loop: Header=BB53_17 Depth=1
	movl	$0, -4(%rbp)
.LBB53_19:                              # %for.cond86
                                        #   Parent Loop BB53_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB53_22
# %bb.20:                               # %for.body89
                                        #   in Loop: Header=BB53_19 Depth=2
	movl	$3, %eax
	subl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-4(%rbp), %rdx
	movl	%eax, -32(%rbp,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.21:                               # %for.inc113
                                        #   in Loop: Header=BB53_19 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_19
.LBB53_22:                              # %for.end115
                                        #   in Loop: Header=BB53_17 Depth=1
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-176(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-32(%rbp), %ecx
	subl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	-24(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-20(%rbp), %ecx
	movl	-24(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.23:                               # %for.inc142
                                        #   in Loop: Header=BB53_17 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_17
.LBB53_24:                              # %for.end144
	movl	$0, -4(%rbp)
.LBB53_25:                              # %for.cond145
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_27 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB53_32
# %bb.26:                               # %for.body148
                                        #   in Loop: Header=BB53_25 Depth=1
	movl	$0, -8(%rbp)
.LBB53_27:                              # %for.cond149
                                        #   Parent Loop BB53_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB53_30
# %bb.28:                               # %for.body152
                                        #   in Loop: Header=BB53_27 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-68(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-92(%rbp), %eax
	movl	-80(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-176(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	(%rdx,%rcx,4), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-68(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-76(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.29:                               # %for.inc182
                                        #   in Loop: Header=BB53_27 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_27
.LBB53_30:                              # %for.end184
                                        #   in Loop: Header=BB53_25 Depth=1
	jmp	.LBB53_31
.LBB53_31:                              # %for.inc185
                                        #   in Loop: Header=BB53_25 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_25
.LBB53_32:                              # %for.end187
	movl	$0, -4(%rbp)
.LBB53_33:                              # %for.cond188
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_35 Depth 2
                                        #     Child Loop BB53_39 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB53_44
# %bb.34:                               # %for.body191
                                        #   in Loop: Header=BB53_33 Depth=1
	movl	$0, -8(%rbp)
.LBB53_35:                              # %for.cond192
                                        #   Parent Loop BB53_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB53_38
# %bb.36:                               # %for.body195
                                        #   in Loop: Header=BB53_35 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.37:                               # %for.inc203
                                        #   in Loop: Header=BB53_35 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_35
.LBB53_38:                              # %for.end205
                                        #   in Loop: Header=BB53_33 Depth=1
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-32(%rbp), %eax
	subl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	sarl	$1, %eax
	subl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	movl	-20(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -8(%rbp)
.LBB53_39:                              # %for.cond224
                                        #   Parent Loop BB53_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -8(%rbp)
	jge	.LBB53_42
# %bb.40:                               # %for.body227
                                        #   in Loop: Header=BB53_39 Depth=2
	movl	$3, %eax
	subl	-8(%rbp), %eax
	movl	%eax, -36(%rbp)
	movslq	-8(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-36(%rbp), %rcx
	addl	-64(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-36(%rbp), %rcx
	subl	-64(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-36(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.41:                               # %for.inc249
                                        #   in Loop: Header=BB53_39 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_39
.LBB53_42:                              # %for.end251
                                        #   in Loop: Header=BB53_33 Depth=1
	jmp	.LBB53_43
.LBB53_43:                              # %for.inc252
                                        #   in Loop: Header=BB53_33 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_33
.LBB53_44:                              # %for.end254
	movl	$0, -8(%rbp)
.LBB53_45:                              # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_47 Depth 2
                                        #     Child Loop BB53_51 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB53_74
# %bb.46:                               # %for.body258
                                        #   in Loop: Header=BB53_45 Depth=1
	movl	$0, -4(%rbp)
.LBB53_47:                              # %for.cond259
                                        #   Parent Loop BB53_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB53_50
# %bb.48:                               # %for.body262
                                        #   in Loop: Header=BB53_47 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.49:                               # %for.inc270
                                        #   in Loop: Header=BB53_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_47
.LBB53_50:                              # %for.end272
                                        #   in Loop: Header=BB53_45 Depth=1
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-32(%rbp), %eax
	subl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	sarl	$1, %eax
	subl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	movl	-20(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -4(%rbp)
.LBB53_51:                              # %for.cond291
                                        #   Parent Loop BB53_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB53_72
# %bb.52:                               # %for.body294
                                        #   in Loop: Header=BB53_51 Depth=2
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-4(%rbp), %rdx
	movl	-64(%rbp,%rdx,4), %edx
	movslq	-12(%rbp), %rsi
	addl	-64(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB53_54
# %bb.53:                               # %cond.true
                                        #   in Loop: Header=BB53_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB53_55
.LBB53_54:                              # %cond.false
                                        #   in Loop: Header=BB53_51 Depth=2
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	addl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB53_55:                              # %cond.end
                                        #   in Loop: Header=BB53_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB53_57
# %bb.56:                               # %cond.true314
                                        #   in Loop: Header=BB53_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB53_61
.LBB53_57:                              # %cond.false316
                                        #   in Loop: Header=BB53_51 Depth=2
	xorl	%eax, %eax
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	addl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB53_59
# %bb.58:                               # %cond.true326
                                        #   in Loop: Header=BB53_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB53_60
.LBB53_59:                              # %cond.false327
                                        #   in Loop: Header=BB53_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-64(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB53_60:                              # %cond.end335
                                        #   in Loop: Header=BB53_51 Depth=2
.LBB53_61:                              # %cond.end337
                                        #   in Loop: Header=BB53_51 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-4(%rbp), %rdx
	movl	-64(%rbp,%rdx,4), %edx
	movslq	-12(%rbp), %rsi
	subl	-64(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB53_63
# %bb.62:                               # %cond.true354
                                        #   in Loop: Header=BB53_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB53_64
.LBB53_63:                              # %cond.false355
                                        #   in Loop: Header=BB53_51 Depth=2
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	subl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB53_64:                              # %cond.end363
                                        #   in Loop: Header=BB53_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB53_66
# %bb.65:                               # %cond.true367
                                        #   in Loop: Header=BB53_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB53_70
.LBB53_66:                              # %cond.false369
                                        #   in Loop: Header=BB53_51 Depth=2
	xorl	%eax, %eax
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	subl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB53_68
# %bb.67:                               # %cond.true379
                                        #   in Loop: Header=BB53_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB53_69
.LBB53_68:                              # %cond.false380
                                        #   in Loop: Header=BB53_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-64(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB53_69:                              # %cond.end388
                                        #   in Loop: Header=BB53_51 Depth=2
.LBB53_70:                              # %cond.end390
                                        #   in Loop: Header=BB53_51 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.71:                               # %for.inc397
                                        #   in Loop: Header=BB53_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_51
.LBB53_72:                              # %for.end399
                                        #   in Loop: Header=BB53_45 Depth=1
	jmp	.LBB53_73
.LBB53_73:                              # %for.inc400
                                        #   in Loop: Header=BB53_45 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_45
.LBB53_74:                              # %for.end402
	movl	$0, -4(%rbp)
.LBB53_75:                              # %for.cond403
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_77 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB53_82
# %bb.76:                               # %for.body406
                                        #   in Loop: Header=BB53_75 Depth=1
	movl	$0, -8(%rbp)
.LBB53_77:                              # %for.cond407
                                        #   Parent Loop BB53_75 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB53_80
# %bb.78:                               # %for.body410
                                        #   in Loop: Header=BB53_77 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-72(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-84(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.79:                               # %for.inc425
                                        #   in Loop: Header=BB53_77 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_77
.LBB53_80:                              # %for.end427
                                        #   in Loop: Header=BB53_75 Depth=1
	jmp	.LBB53_81
.LBB53_81:                              # %for.inc428
                                        #   in Loop: Header=BB53_75 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_75
.LBB53_82:                              # %for.end430
	cmpl	$526895186, -88(%rbp)   # imm = 0x1F67C852
	jne	.LBB53_84
.LBB53_83:
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB53_84:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB53_83
.Lfunc_end53:
	.size	copyblock_sp.44, .Lfunc_end53-copyblock_sp.44
	.cfi_endproc
                                        # -- End function
	.globl	intrapred_luma.45       # -- Begin function intrapred_luma.45
	.p2align	4, 0x90
	.type	intrapred_luma.45,@function
intrapred_luma.45:                      # @intrapred_luma.45
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$320, %rsp              # imm = 0x140
	movl	$812412439, -172(%rbp)  # imm = 0x306C6E17
	movl	%edi, -116(%rbp)
	movl	%esi, -108(%rbp)
	movq	%rdx, -224(%rbp)
	movq	%rcx, -184(%rbp)
	movq	%r8, -216(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	-116(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -84(%rbp)
	movl	-108(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -88(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -100(%rbp)
	movl	$0, -4(%rbp)
.LBB54_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB54_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB54_1 Depth=1
	movl	-100(%rbp), %edi
	movl	-84(%rbp), %esi
	subl	$1, %esi
	movl	-88(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-320(%rbp), %r8
	addq	%rax, %r8
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB54_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_1
.LBB54_4:                               # %for.end
	movl	-100(%rbp), %edi
	movl	-84(%rbp), %esi
	movl	-88(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-168(%rbp), %r8
	callq	getNeighbour
	movl	-100(%rbp), %edi
	movl	-84(%rbp), %esi
	addl	$4, %esi
	movl	-88(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-144(%rbp), %r8
	callq	getNeighbour
	movl	-100(%rbp), %edi
	movl	-84(%rbp), %esi
	subl	$1, %esi
	movl	-88(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-208(%rbp), %r8
	callq	getNeighbour
	xorl	%eax, %eax
	cmpl	$0, -144(%rbp)
	je	.LBB54_11
# %bb.5:                                # %land.rhs
	cmpl	$4, -84(%rbp)
	je	.LBB54_7
# %bb.6:                                # %lor.lhs.false
	xorl	%eax, %eax
	cmpl	$12, -84(%rbp)
	jne	.LBB54_10
.LBB54_7:                               # %land.rhs10
	cmpl	$4, -88(%rbp)
	movb	$1, %al
	je	.LBB54_9
# %bb.8:                                # %lor.rhs
	cmpl	$12, -88(%rbp)
	sete	%al
.LBB54_9:                               # %lor.end
.LBB54_10:                              # %land.end
	xorb	$-1, %al
.LBB54_11:                              # %land.end13
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -144(%rbp)
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB54_29
# %bb.12:                               # %if.then
	movl	$0, -4(%rbp)
	movl	$1, -68(%rbp)
.LBB54_13:                              # %for.cond16
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB54_19
# %bb.14:                               # %for.body18
                                        #   in Loop: Header=BB54_13 Depth=1
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB54_16
# %bb.15:                               # %cond.true
                                        #   in Loop: Header=BB54_13 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB54_17
.LBB54_16:                              # %cond.false
                                        #   in Loop: Header=BB54_13 Depth=1
	xorl	%eax, %eax
	jmp	.LBB54_17
.LBB54_17:                              # %cond.end
                                        #   in Loop: Header=BB54_13 Depth=1
	andl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.18:                               # %for.inc28
                                        #   in Loop: Header=BB54_13 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_13
.LBB54_19:                              # %for.end30
	cmpl	$0, -168(%rbp)
	je	.LBB54_21
# %bb.20:                               # %cond.true33
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-164(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB54_22
.LBB54_21:                              # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB54_22
.LBB54_22:                              # %cond.end39
	movl	%eax, -72(%rbp)
	cmpl	$0, -144(%rbp)
	je	.LBB54_24
# %bb.23:                               # %cond.true43
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-140(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB54_25
.LBB54_24:                              # %cond.false48
	xorl	%eax, %eax
	jmp	.LBB54_25
.LBB54_25:                              # %cond.end49
	movl	%eax, -112(%rbp)
	cmpl	$0, -208(%rbp)
	je	.LBB54_27
# %bb.26:                               # %cond.true53
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-204(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB54_28
.LBB54_27:                              # %cond.false58
	xorl	%eax, %eax
	jmp	.LBB54_28
.LBB54_28:                              # %cond.end59
	movl	%eax, -104(%rbp)
	jmp	.LBB54_30
.LBB54_29:                              # %if.else
	movl	-320(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-168(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-144(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-208(%rbp), %eax
	movl	%eax, -104(%rbp)
.LBB54_30:                              # %if.end
	xorl	%eax, %eax
	movl	-68(%rbp), %ecx
	movq	-224(%rbp), %rdx
	movl	%ecx, (%rdx)
	movl	-72(%rbp), %ecx
	movq	-184(%rbp), %rdx
	movl	%ecx, (%rdx)
	cmpl	$0, -72(%rbp)
	je	.LBB54_33
# %bb.31:                               # %land.lhs.true
	xorl	%eax, %eax
	cmpl	$0, -68(%rbp)
	je	.LBB54_33
# %bb.32:                               # %land.rhs68
	cmpl	$0, -104(%rbp)
	setne	%al
.LBB54_33:                              # %land.end70
	andb	$1, %al
	movzbl	%al, %eax
	movq	-216(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-116(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -4(%rbp)
	movl	-108(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -96(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB54_35
# %bb.34:                               # %if.then75
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -60(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -56(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -52(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB54_36
.LBB54_35:                              # %if.else109
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -48(%rbp)
	movl	%eax, -52(%rbp)
	movl	%eax, -56(%rbp)
	movl	%eax, -60(%rbp)
.LBB54_36:                              # %if.end114
	cmpl	$0, -112(%rbp)
	je	.LBB54_38
# %bb.37:                               # %if.then116
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -44(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -40(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -36(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB54_39
.LBB54_38:                              # %if.else153
	movl	-48(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	%eax, -36(%rbp)
	movl	%eax, -40(%rbp)
	movl	%eax, -44(%rbp)
.LBB54_39:                              # %if.end159
	cmpl	$0, -68(%rbp)
	je	.LBB54_41
# %bb.40:                               # %if.then161
	movq	-80(%rbp), %rax
	movslq	-300(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-304(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -28(%rbp)
	movq	-80(%rbp), %rax
	movslq	-276(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-280(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-80(%rbp), %rax
	movslq	-252(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-256(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-80(%rbp), %rax
	movslq	-228(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-232(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB54_42
.LBB54_41:                              # %if.else202
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -16(%rbp)
	movl	%eax, -20(%rbp)
	movl	%eax, -24(%rbp)
	movl	%eax, -28(%rbp)
.LBB54_42:                              # %if.end208
	cmpl	$0, -104(%rbp)
	je	.LBB54_44
# %bb.43:                               # %if.then210
	movq	-80(%rbp), %rax
	movslq	-188(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-192(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB54_45
.LBB54_44:                              # %if.else219
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -64(%rbp)
.LBB54_45:                              # %if.end222
	movl	$0, -4(%rbp)
.LBB54_46:                              # %for.cond223
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$9, -4(%rbp)
	jge	.LBB54_49
# %bb.47:                               # %for.body226
                                        #   in Loop: Header=BB54_46 Depth=1
	movq	img, %rax
	addq	$184, %rax
	movslq	-4(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movw	$-1, (%rax)
# %bb.48:                               # %for.inc231
                                        #   in Loop: Header=BB54_46 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_46
.LBB54_49:                              # %for.end233
	movl	$0, -92(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB54_52
# %bb.50:                               # %land.lhs.true235
	cmpl	$0, -68(%rbp)
	je	.LBB54_52
# %bb.51:                               # %if.then237
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$4, %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	jmp	.LBB54_61
.LBB54_52:                              # %if.else254
	cmpl	$0, -72(%rbp)
	jne	.LBB54_55
# %bb.53:                               # %land.lhs.true256
	cmpl	$0, -68(%rbp)
	je	.LBB54_55
# %bb.54:                               # %if.then258
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	jmp	.LBB54_60
.LBB54_55:                              # %if.else268
	cmpl	$0, -72(%rbp)
	je	.LBB54_58
# %bb.56:                               # %land.lhs.true270
	cmpl	$0, -68(%rbp)
	jne	.LBB54_58
# %bb.57:                               # %if.then272
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	jmp	.LBB54_59
.LBB54_58:                              # %if.else282
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -92(%rbp)
.LBB54_59:                              # %if.end284
	jmp	.LBB54_60
.LBB54_60:                              # %if.end285
	jmp	.LBB54_61
.LBB54_61:                              # %if.end286
	movl	$0, -96(%rbp)
.LBB54_62:                              # %for.cond287
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_64 Depth 2
	cmpl	$4, -96(%rbp)
	jge	.LBB54_69
# %bb.63:                               # %for.body290
                                        #   in Loop: Header=BB54_62 Depth=1
	movl	$0, -4(%rbp)
.LBB54_64:                              # %for.cond291
                                        #   Parent Loop BB54_62 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB54_67
# %bb.65:                               # %for.body294
                                        #   in Loop: Header=BB54_64 Depth=2
	movl	-92(%rbp), %eax
	movq	img, %rcx
	addq	$184, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-96(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.66:                               # %for.inc302
                                        #   in Loop: Header=BB54_64 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_64
.LBB54_67:                              # %for.end304
                                        #   in Loop: Header=BB54_62 Depth=1
	jmp	.LBB54_68
.LBB54_68:                              # %for.inc305
                                        #   in Loop: Header=BB54_62 Depth=1
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB54_62
.LBB54_69:                              # %for.end307
	movl	$0, -4(%rbp)
.LBB54_70:                              # %for.cond308
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB54_73
# %bb.71:                               # %for.body311
                                        #   in Loop: Header=BB54_70 Depth=1
	movslq	-4(%rbp), %rax
	movl	-60(%rbp,%rax,4), %eax
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 280(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 248(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 216(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 184(%rcx,%rdx,2)
	movslq	-4(%rbp), %rax
	movl	-28(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 6(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 4(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, (%rcx)
# %bb.72:                               # %for.inc360
                                        #   in Loop: Header=BB54_70 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_70
.LBB54_73:                              # %for.end362
	cmpl	$0, -72(%rbp)
	jne	.LBB54_75
# %bb.74:                               # %if.then364
	movq	img, %rax
	movw	$-1, 184(%rax)
.LBB54_75:                              # %if.end369
	cmpl	$0, -68(%rbp)
	jne	.LBB54_77
# %bb.76:                               # %if.then371
	movq	img, %rax
	movw	$-1, 696(%rax)
.LBB54_77:                              # %if.end376
	cmpl	$0, -72(%rbp)
	je	.LBB54_79
# %bb.78:                               # %if.then378
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1720(%rdx)
	movl	-56(%rbp), %eax
	addl	-48(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1752(%rdx)
	movq	img, %rdx
	movw	%ax, 1722(%rdx)
	movl	-52(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	-48(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1784(%rdx)
	movq	img, %rdx
	movw	%ax, 1754(%rdx)
	movq	img, %rdx
	movw	%ax, 1724(%rdx)
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	-44(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1816(%rdx)
	movq	img, %rdx
	movw	%ax, 1786(%rdx)
	movq	img, %rdx
	movw	%ax, 1756(%rdx)
	movq	img, %rdx
	movw	%ax, 1726(%rdx)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	-40(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1818(%rdx)
	movq	img, %rdx
	movw	%ax, 1788(%rdx)
	movq	img, %rdx
	movw	%ax, 1758(%rdx)
	movl	-40(%rbp), %eax
	addl	-32(%rbp), %eax
	movl	-36(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1820(%rdx)
	movq	img, %rdx
	movw	%ax, 1790(%rdx)
	movl	-36(%rbp), %eax
	imull	$3, -32(%rbp), %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1822(%rdx)
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3768(%rdx)
	movl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3832(%rdx)
	movq	img, %rdx
	movw	%ax, 3770(%rdx)
	movl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3834(%rdx)
	movq	img, %rdx
	movw	%ax, 3772(%rdx)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3836(%rdx)
	movq	img, %rdx
	movw	%ax, 3774(%rdx)
	movl	-44(%rbp), %eax
	addl	-40(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3838(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3800(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3864(%rdx)
	movq	img, %rdx
	movw	%ax, 3802(%rdx)
	movl	-52(%rbp), %eax
	movl	-48(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-44(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3866(%rdx)
	movq	img, %rdx
	movw	%ax, 3804(%rdx)
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-40(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3868(%rdx)
	movq	img, %rdx
	movw	%ax, 3806(%rdx)
	movl	-44(%rbp), %eax
	movl	-40(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-36(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 3870(%rcx)
.LBB54_79:                              # %if.end642
	cmpl	$0, -68(%rbp)
	je	.LBB54_81
# %bb.80:                               # %if.then644
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rcx
	movw	%ax, 4280(%rcx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 4282(%rdx)
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 4312(%rdx)
	movq	img, %rdx
	movw	%ax, 4284(%rdx)
	movl	-24(%rbp), %eax
	movl	-20(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 4314(%rdx)
	movq	img, %rdx
	movw	%ax, 4286(%rdx)
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 4344(%rdx)
	movq	img, %rdx
	movw	%ax, 4316(%rdx)
	movl	-20(%rbp), %eax
	movl	-16(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 4346(%rcx)
	movq	img, %rcx
	movw	%ax, 4318(%rcx)
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movw	%ax, 4382(%rcx)
	movq	img, %rcx
	movw	%ax, 4380(%rcx)
	movq	img, %rcx
	movw	%ax, 4378(%rcx)
	movq	img, %rcx
	movw	%ax, 4350(%rcx)
	movq	img, %rcx
	movw	%ax, 4348(%rcx)
	movq	img, %rcx
	movw	%ax, 4376(%rcx)
.LBB54_81:                              # %if.end756
	cmpl	$0, -72(%rbp)
	je	.LBB54_85
# %bb.82:                               # %land.lhs.true758
	cmpl	$0, -68(%rbp)
	je	.LBB54_85
# %bb.83:                               # %land.lhs.true760
	cmpl	$0, -104(%rbp)
	je	.LBB54_85
# %bb.84:                               # %if.then762
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2328(%rdx)
	movl	-20(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-28(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2330(%rdx)
	movq	img, %rdx
	movw	%ax, 2296(%rdx)
	movl	-24(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-64(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2332(%rdx)
	movq	img, %rdx
	movw	%ax, 2298(%rdx)
	movq	img, %rdx
	movw	%ax, 2264(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2334(%rdx)
	movq	img, %rdx
	movw	%ax, 2300(%rdx)
	movq	img, %rdx
	movw	%ax, 2266(%rdx)
	movq	img, %rdx
	movw	%ax, 2232(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2302(%rdx)
	movq	img, %rdx
	movw	%ax, 2268(%rdx)
	movq	img, %rdx
	movw	%ax, 2234(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2270(%rdx)
	movq	img, %rdx
	movw	%ax, 2236(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2238(%rdx)
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2810(%rdx)
	movq	img, %rdx
	movw	%ax, 2744(%rdx)
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2812(%rdx)
	movq	img, %rdx
	movw	%ax, 2746(%rdx)
	movl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2814(%rdx)
	movq	img, %rdx
	movw	%ax, 2748(%rdx)
	movl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2750(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2842(%rdx)
	movq	img, %rdx
	movw	%ax, 2776(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2844(%rdx)
	movq	img, %rdx
	movw	%ax, 2778(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2846(%rdx)
	movq	img, %rdx
	movw	%ax, 2780(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2782(%rdx)
	movl	-64(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2808(%rdx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2840(%rdx)
	movl	-64(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3292(%rdx)
	movq	img, %rdx
	movw	%ax, 3256(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3294(%rdx)
	movq	img, %rdx
	movw	%ax, 3258(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3260(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3262(%rdx)
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3324(%rdx)
	movq	img, %rdx
	movw	%ax, 3288(%rdx)
	movl	-64(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3326(%rdx)
	movq	img, %rdx
	movw	%ax, 3290(%rdx)
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3356(%rdx)
	movq	img, %rdx
	movw	%ax, 3320(%rdx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3358(%rdx)
	movq	img, %rdx
	movw	%ax, 3322(%rdx)
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3352(%rdx)
	movl	-24(%rbp), %eax
	movl	-20(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 3354(%rcx)
.LBB54_85:                              # %if.end1174
	cmpl	$812412439, -172(%rbp)  # imm = 0x306C6E17
	jne	.LBB54_87
.LBB54_86:
	addq	$320, %rsp              # imm = 0x140
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB54_87:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB54_86
.Lfunc_end54:
	.size	intrapred_luma.45, .Lfunc_end54-intrapred_luma.45
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma_DC.46        # -- Begin function dct_chroma_DC.46
	.p2align	4, 0x90
	.type	dct_chroma_DC.46,@function
dct_chroma_DC.46:                       # @dct_chroma_DC.46
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$806569325, -44(%rbp)   # imm = 0x3013456D
	movl	%edi, -24(%rbp)
	movl	%esi, -20(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$-1, -28(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
.LBB55_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -16(%rbp)
	jge	.LBB55_9
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB55_1 Depth=1
	movslq	-16(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -40(%rbp)
	movslq	-16(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rcx
	addq	%rax, %rcx
	movslq	-40(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -36(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB55_7
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	$1, %eax
	cmpl	-20(%rbp), %eax
	jle	.LBB55_5
# %bb.4:                                # %cond.true
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	$1, %eax
	jmp	.LBB55_6
.LBB55_5:                               # %cond.false
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	-20(%rbp), %eax
.LBB55_6:                               # %cond.end
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	%eax, -20(%rbp)
	movl	-36(%rbp), %edi
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rcx
	addq	%rax, %rcx
	movslq	-40(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-56(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-28(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	$-1, -28(%rbp)
.LBB55_7:                               # %if.end
                                        #   in Loop: Header=BB55_1 Depth=1
	jmp	.LBB55_8
.LBB55_8:                               # %for.inc
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB55_1
.LBB55_9:                               # %for.end
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-20(%rbp), %ebx
	cmpl	$806569325, -44(%rbp)   # imm = 0x3013456D
	jne	.LBB55_11
.LBB55_10:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB55_11:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB55_10
.Lfunc_end55:
	.size	dct_chroma_DC.46, .Lfunc_end55-dct_chroma_DC.46
	.cfi_endproc
                                        # -- End function
	.globl	intrapred_luma_16x16.47 # -- Begin function intrapred_luma_16x16.47
	.p2align	4, 0x90
	.type	intrapred_luma_16x16.47,@function
intrapred_luma_16x16.47:                # @intrapred_luma_16x16.47
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$640, %rsp              # imm = 0x280
	movl	$490152603, -92(%rbp)   # imm = 0x1D37229B
	movl	$0, -28(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -60(%rbp)
	movl	$0, -4(%rbp)
.LBB56_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -4(%rbp)
	jge	.LBB56_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB56_1 Depth=1
	movl	-60(%rbp), %edi
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-512(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB56_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_1
.LBB56_4:                               # %for.end
	movl	-60(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	leaq	-88(%rbp), %r8
	callq	getNeighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	jne	.LBB56_6
# %bb.5:                                # %if.then
	movl	-88(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	-488(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-512(%rbp), %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB56_20
.LBB56_6:                               # %if.else
	cmpl	$0, -88(%rbp)
	je	.LBB56_8
# %bb.7:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-84(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB56_9
.LBB56_8:                               # %cond.false
	xorl	%eax, %eax
	jmp	.LBB56_9
.LBB56_9:                               # %cond.end
	movl	%eax, -16(%rbp)
	movl	$1, -4(%rbp)
	movl	$1, -12(%rbp)
.LBB56_10:                              # %for.cond9
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -4(%rbp)
	jge	.LBB56_16
# %bb.11:                               # %for.body11
                                        #   in Loop: Header=BB56_10 Depth=1
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-512(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB56_13
# %bb.12:                               # %cond.true16
                                        #   in Loop: Header=BB56_10 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB56_14
.LBB56_13:                              # %cond.false23
                                        #   in Loop: Header=BB56_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB56_14
.LBB56_14:                              # %cond.end24
                                        #   in Loop: Header=BB56_10 Depth=1
	andl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.15:                               # %for.inc26
                                        #   in Loop: Header=BB56_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_10
.LBB56_16:                              # %for.end28
	cmpl	$0, -512(%rbp)
	je	.LBB56_18
# %bb.17:                               # %cond.true32
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-508(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB56_19
.LBB56_18:                              # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB56_19
.LBB56_19:                              # %cond.end39
	movl	%eax, -64(%rbp)
.LBB56_20:                              # %if.end
	movl	$0, -44(%rbp)
	movl	$0, -52(%rbp)
	movl	$0, -4(%rbp)
.LBB56_21:                              # %for.cond41
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -4(%rbp)
	jge	.LBB56_28
# %bb.22:                               # %for.body43
                                        #   in Loop: Header=BB56_21 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB56_24
# %bb.23:                               # %if.then45
                                        #   in Loop: Header=BB56_21 Depth=1
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
.LBB56_24:                              # %if.end51
                                        #   in Loop: Header=BB56_21 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB56_26
# %bb.25:                               # %if.then53
                                        #   in Loop: Header=BB56_21 Depth=1
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB56_26:                              # %if.end68
                                        #   in Loop: Header=BB56_21 Depth=1
	jmp	.LBB56_27
.LBB56_27:                              # %for.inc69
                                        #   in Loop: Header=BB56_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_21
.LBB56_28:                              # %for.end71
	cmpl	$0, -16(%rbp)
	je	.LBB56_31
# %bb.29:                               # %land.lhs.true
	cmpl	$0, -12(%rbp)
	je	.LBB56_31
# %bb.30:                               # %if.then74
	movl	-52(%rbp), %eax
	addl	-44(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
.LBB56_31:                              # %if.end77
	cmpl	$0, -16(%rbp)
	jne	.LBB56_34
# %bb.32:                               # %land.lhs.true79
	cmpl	$0, -12(%rbp)
	je	.LBB56_34
# %bb.33:                               # %if.then81
	movl	-44(%rbp), %eax
	addl	$8, %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
.LBB56_34:                              # %if.end84
	cmpl	$0, -16(%rbp)
	je	.LBB56_37
# %bb.35:                               # %land.lhs.true86
	cmpl	$0, -12(%rbp)
	jne	.LBB56_37
# %bb.36:                               # %if.then88
	movl	-52(%rbp), %eax
	addl	$8, %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
.LBB56_37:                              # %if.end91
	cmpl	$0, -16(%rbp)
	jne	.LBB56_40
# %bb.38:                               # %land.lhs.true93
	cmpl	$0, -12(%rbp)
	jne	.LBB56_40
# %bb.39:                               # %if.then95
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -28(%rbp)
.LBB56_40:                              # %if.end96
	movl	$0, -4(%rbp)
.LBB56_41:                              # %for.cond97
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -4(%rbp)
	jge	.LBB56_48
# %bb.42:                               # %for.body100
                                        #   in Loop: Header=BB56_41 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB56_44
# %bb.43:                               # %if.then102
                                        #   in Loop: Header=BB56_41 Depth=1
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -640(%rbp,%rcx,8)
.LBB56_44:                              # %if.end114
                                        #   in Loop: Header=BB56_41 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB56_46
# %bb.45:                               # %if.then116
                                        #   in Loop: Header=BB56_41 Depth=1
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -636(%rbp,%rcx,8)
.LBB56_46:                              # %if.end133
                                        #   in Loop: Header=BB56_41 Depth=1
	jmp	.LBB56_47
.LBB56_47:                              # %for.inc134
                                        #   in Loop: Header=BB56_41 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_41
.LBB56_48:                              # %for.end136
	movl	$0, -8(%rbp)
.LBB56_49:                              # %for.cond137
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_51 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB56_56
# %bb.50:                               # %for.body140
                                        #   in Loop: Header=BB56_49 Depth=1
	movl	$0, -4(%rbp)
.LBB56_51:                              # %for.cond141
                                        #   Parent Loop BB56_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB56_54
# %bb.52:                               # %for.body144
                                        #   in Loop: Header=BB56_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-640(%rbp,%rax,8), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-8(%rbp), %rax
	movl	-636(%rbp,%rax,8), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$512, %rcx              # imm = 0x200
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	-28(%rbp), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$1024, %rcx             # imm = 0x400
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.53:                               # %for.inc171
                                        #   in Loop: Header=BB56_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_51
.LBB56_54:                              # %for.end173
                                        #   in Loop: Header=BB56_49 Depth=1
	jmp	.LBB56_55
.LBB56_55:                              # %for.inc174
                                        #   in Loop: Header=BB56_49 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_49
.LBB56_56:                              # %for.end176
	cmpl	$0, -16(%rbp)
	je	.LBB56_59
# %bb.57:                               # %lor.lhs.false
	cmpl	$0, -12(%rbp)
	je	.LBB56_59
# %bb.58:                               # %lor.lhs.false179
	cmpl	$0, -64(%rbp)
	jne	.LBB56_60
.LBB56_59:                              # %if.then181
	jmp	.LBB56_85
.LBB56_60:                              # %if.end182
	movl	$0, -32(%rbp)
	movl	$0, -56(%rbp)
	movl	$1, -4(%rbp)
.LBB56_61:                              # %for.cond183
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$9, -4(%rbp)
	jge	.LBB56_67
# %bb.62:                               # %for.body186
                                        #   in Loop: Header=BB56_61 Depth=1
	cmpl	$8, -4(%rbp)
	jge	.LBB56_64
# %bb.63:                               # %if.then189
                                        #   in Loop: Header=BB56_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	addl	$7, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-24(%rbp), %rdx
	movslq	-68(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-72(%rbp), %esi
	addl	$7, %esi
	subl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB56_65
.LBB56_64:                              # %if.else210
                                        #   in Loop: Header=BB56_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	addl	$7, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-24(%rbp), %rdx
	movslq	-492(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-496(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
.LBB56_65:                              # %if.end232
                                        #   in Loop: Header=BB56_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	leaq	-512(%rbp), %rcx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movslq	20(%rdi), %rdx
	movq	(%rsi,%rdx,8), %rsi
	movl	-4(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movslq	16(%rdi), %rdx
	movzwl	(%rsi,%rdx,2), %r9d
	movq	-24(%rbp), %r8
	movl	$8, %edi
	movl	$8, %edx
	subl	-4(%rbp), %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	20(%rsi), %rdx
	movq	(%r8,%rdx,8), %rdx
	subl	-4(%rbp), %edi
	movslq	%edi, %rsi
	imulq	$24, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	16(%rcx), %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %r9d
	imull	%r9d, %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.66:                               # %for.inc262
                                        #   in Loop: Header=BB56_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_61
.LBB56_67:                              # %for.end264
	imull	$5, -32(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movl	%eax, -48(%rbp)
	imull	$5, -56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	$15, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-108(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-112(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	shll	$4, %eax
	movl	%eax, -40(%rbp)
	movl	$0, -8(%rbp)
.LBB56_68:                              # %for.cond289
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_70 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB56_84
# %bb.69:                               # %for.body292
                                        #   in Loop: Header=BB56_68 Depth=1
	movl	$0, -4(%rbp)
.LBB56_70:                              # %for.cond293
                                        #   Parent Loop BB56_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB56_82
# %bb.71:                               # %for.body296
                                        #   in Loop: Header=BB56_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-40(%rbp), %eax
	movl	-4(%rbp), %edx
	subl	$7, %edx
	imull	-48(%rbp), %edx
	addl	%edx, %eax
	movl	-8(%rbp), %edx
	subl	$7, %edx
	imull	-36(%rbp), %edx
	addl	%edx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB56_73
# %bb.72:                               # %cond.true307
                                        #   in Loop: Header=BB56_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB56_74
.LBB56_73:                              # %cond.false309
                                        #   in Loop: Header=BB56_70 Depth=2
	movl	-40(%rbp), %eax
	movl	-4(%rbp), %ecx
	subl	$7, %ecx
	imull	-48(%rbp), %ecx
	addl	%ecx, %eax
	movl	-8(%rbp), %ecx
	subl	$7, %ecx
	imull	-36(%rbp), %ecx
	addl	%ecx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB56_74:                              # %cond.end318
                                        #   in Loop: Header=BB56_70 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB56_76
# %bb.75:                               # %cond.true322
                                        #   in Loop: Header=BB56_70 Depth=2
	xorl	%eax, %eax
	jmp	.LBB56_80
.LBB56_76:                              # %cond.false323
                                        #   in Loop: Header=BB56_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-40(%rbp), %eax
	movl	-4(%rbp), %edx
	subl	$7, %edx
	imull	-48(%rbp), %edx
	addl	%edx, %eax
	movl	-8(%rbp), %edx
	subl	$7, %edx
	imull	-36(%rbp), %edx
	addl	%edx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB56_78
# %bb.77:                               # %cond.true335
                                        #   in Loop: Header=BB56_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB56_79
.LBB56_78:                              # %cond.false337
                                        #   in Loop: Header=BB56_70 Depth=2
	movl	-40(%rbp), %eax
	movl	-4(%rbp), %ecx
	subl	$7, %ecx
	imull	-48(%rbp), %ecx
	addl	%ecx, %eax
	movl	-8(%rbp), %ecx
	subl	$7, %ecx
	imull	-36(%rbp), %ecx
	addl	%ecx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB56_79:                              # %cond.end346
                                        #   in Loop: Header=BB56_70 Depth=2
.LBB56_80:                              # %cond.end348
                                        #   in Loop: Header=BB56_70 Depth=2
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$1536, %rcx             # imm = 0x600
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.81:                               # %for.inc357
                                        #   in Loop: Header=BB56_70 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_70
.LBB56_82:                              # %for.end359
                                        #   in Loop: Header=BB56_68 Depth=1
	jmp	.LBB56_83
.LBB56_83:                              # %for.inc360
                                        #   in Loop: Header=BB56_68 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_68
.LBB56_84:                              # %for.end362.loopexit
	jmp	.LBB56_85
.LBB56_85:                              # %for.end362
	cmpl	$490152603, -92(%rbp)   # imm = 0x1D37229B
	jne	.LBB56_87
.LBB56_86:
	addq	$640, %rsp              # imm = 0x280
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB56_87:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB56_86
.Lfunc_end56:
	.size	intrapred_luma_16x16.47, .Lfunc_end56-intrapred_luma_16x16.47
	.cfi_endproc
                                        # -- End function
	.globl	intrapred_luma_16x16.48 # -- Begin function intrapred_luma_16x16.48
	.p2align	4, 0x90
	.type	intrapred_luma_16x16.48,@function
intrapred_luma_16x16.48:                # @intrapred_luma_16x16.48
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$640, %rsp              # imm = 0x280
	movl	$957982588, -92(%rbp)   # imm = 0x3919A77C
	movl	$0, -28(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB57_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -4(%rbp)
	jge	.LBB57_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB57_1 Depth=1
	movl	-64(%rbp), %edi
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-512(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB57_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_1
.LBB57_4:                               # %for.end
	movl	-64(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	leaq	-88(%rbp), %r8
	callq	getNeighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	jne	.LBB57_6
# %bb.5:                                # %if.then
	movl	-88(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	-488(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-512(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB57_20
.LBB57_6:                               # %if.else
	cmpl	$0, -88(%rbp)
	je	.LBB57_8
# %bb.7:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-84(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB57_9
.LBB57_8:                               # %cond.false
	xorl	%eax, %eax
	jmp	.LBB57_9
.LBB57_9:                               # %cond.end
	movl	%eax, -16(%rbp)
	movl	$1, -4(%rbp)
	movl	$1, -12(%rbp)
.LBB57_10:                              # %for.cond9
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -4(%rbp)
	jge	.LBB57_16
# %bb.11:                               # %for.body11
                                        #   in Loop: Header=BB57_10 Depth=1
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-512(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB57_13
# %bb.12:                               # %cond.true16
                                        #   in Loop: Header=BB57_10 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB57_14
.LBB57_13:                              # %cond.false23
                                        #   in Loop: Header=BB57_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB57_14
.LBB57_14:                              # %cond.end24
                                        #   in Loop: Header=BB57_10 Depth=1
	andl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.15:                               # %for.inc26
                                        #   in Loop: Header=BB57_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_10
.LBB57_16:                              # %for.end28
	cmpl	$0, -512(%rbp)
	je	.LBB57_18
# %bb.17:                               # %cond.true32
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-508(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB57_19
.LBB57_18:                              # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB57_19
.LBB57_19:                              # %cond.end39
	movl	%eax, -60(%rbp)
.LBB57_20:                              # %if.end
	movl	$0, -48(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -4(%rbp)
.LBB57_21:                              # %for.cond41
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -4(%rbp)
	jge	.LBB57_28
# %bb.22:                               # %for.body43
                                        #   in Loop: Header=BB57_21 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB57_24
# %bb.23:                               # %if.then45
                                        #   in Loop: Header=BB57_21 Depth=1
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB57_24:                              # %if.end51
                                        #   in Loop: Header=BB57_21 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB57_26
# %bb.25:                               # %if.then53
                                        #   in Loop: Header=BB57_21 Depth=1
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB57_26:                              # %if.end68
                                        #   in Loop: Header=BB57_21 Depth=1
	jmp	.LBB57_27
.LBB57_27:                              # %for.inc69
                                        #   in Loop: Header=BB57_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_21
.LBB57_28:                              # %for.end71
	cmpl	$0, -16(%rbp)
	je	.LBB57_31
# %bb.29:                               # %land.lhs.true
	cmpl	$0, -12(%rbp)
	je	.LBB57_31
# %bb.30:                               # %if.then74
	movl	-36(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
.LBB57_31:                              # %if.end77
	cmpl	$0, -16(%rbp)
	jne	.LBB57_34
# %bb.32:                               # %land.lhs.true79
	cmpl	$0, -12(%rbp)
	je	.LBB57_34
# %bb.33:                               # %if.then81
	movl	-48(%rbp), %eax
	addl	$8, %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
.LBB57_34:                              # %if.end84
	cmpl	$0, -16(%rbp)
	je	.LBB57_37
# %bb.35:                               # %land.lhs.true86
	cmpl	$0, -12(%rbp)
	jne	.LBB57_37
# %bb.36:                               # %if.then88
	movl	-36(%rbp), %eax
	addl	$8, %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
.LBB57_37:                              # %if.end91
	cmpl	$0, -16(%rbp)
	jne	.LBB57_40
# %bb.38:                               # %land.lhs.true93
	cmpl	$0, -12(%rbp)
	jne	.LBB57_40
# %bb.39:                               # %if.then95
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -28(%rbp)
.LBB57_40:                              # %if.end96
	movl	$0, -4(%rbp)
.LBB57_41:                              # %for.cond97
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -4(%rbp)
	jge	.LBB57_48
# %bb.42:                               # %for.body100
                                        #   in Loop: Header=BB57_41 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB57_44
# %bb.43:                               # %if.then102
                                        #   in Loop: Header=BB57_41 Depth=1
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -640(%rbp,%rcx,8)
.LBB57_44:                              # %if.end114
                                        #   in Loop: Header=BB57_41 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB57_46
# %bb.45:                               # %if.then116
                                        #   in Loop: Header=BB57_41 Depth=1
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -636(%rbp,%rcx,8)
.LBB57_46:                              # %if.end133
                                        #   in Loop: Header=BB57_41 Depth=1
	jmp	.LBB57_47
.LBB57_47:                              # %for.inc134
                                        #   in Loop: Header=BB57_41 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_41
.LBB57_48:                              # %for.end136
	movl	$0, -8(%rbp)
.LBB57_49:                              # %for.cond137
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_51 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB57_56
# %bb.50:                               # %for.body140
                                        #   in Loop: Header=BB57_49 Depth=1
	movl	$0, -4(%rbp)
.LBB57_51:                              # %for.cond141
                                        #   Parent Loop BB57_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB57_54
# %bb.52:                               # %for.body144
                                        #   in Loop: Header=BB57_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-640(%rbp,%rax,8), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-8(%rbp), %rax
	movl	-636(%rbp,%rax,8), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$512, %rcx              # imm = 0x200
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	-28(%rbp), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$1024, %rcx             # imm = 0x400
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.53:                               # %for.inc171
                                        #   in Loop: Header=BB57_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_51
.LBB57_54:                              # %for.end173
                                        #   in Loop: Header=BB57_49 Depth=1
	jmp	.LBB57_55
.LBB57_55:                              # %for.inc174
                                        #   in Loop: Header=BB57_49 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_49
.LBB57_56:                              # %for.end176
	cmpl	$0, -16(%rbp)
	je	.LBB57_59
# %bb.57:                               # %lor.lhs.false
	cmpl	$0, -12(%rbp)
	je	.LBB57_59
# %bb.58:                               # %lor.lhs.false179
	cmpl	$0, -60(%rbp)
	jne	.LBB57_60
.LBB57_59:                              # %if.then181
	jmp	.LBB57_85
.LBB57_60:                              # %if.end182
	movl	$0, -32(%rbp)
	movl	$0, -56(%rbp)
	movl	$1, -4(%rbp)
.LBB57_61:                              # %for.cond183
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$9, -4(%rbp)
	jge	.LBB57_67
# %bb.62:                               # %for.body186
                                        #   in Loop: Header=BB57_61 Depth=1
	cmpl	$8, -4(%rbp)
	jge	.LBB57_64
# %bb.63:                               # %if.then189
                                        #   in Loop: Header=BB57_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	addl	$7, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-24(%rbp), %rdx
	movslq	-68(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-72(%rbp), %esi
	addl	$7, %esi
	subl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB57_65
.LBB57_64:                              # %if.else210
                                        #   in Loop: Header=BB57_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	addl	$7, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-24(%rbp), %rdx
	movslq	-492(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-496(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
.LBB57_65:                              # %if.end232
                                        #   in Loop: Header=BB57_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	leaq	-512(%rbp), %rcx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movslq	20(%rdi), %rdx
	movq	(%rsi,%rdx,8), %rsi
	movl	-4(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movslq	16(%rdi), %rdx
	movzwl	(%rsi,%rdx,2), %r9d
	movq	-24(%rbp), %r8
	movl	$8, %edi
	movl	$8, %edx
	subl	-4(%rbp), %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	20(%rsi), %rdx
	movq	(%r8,%rdx,8), %rdx
	subl	-4(%rbp), %edi
	movslq	%edi, %rsi
	imulq	$24, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	16(%rcx), %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %r9d
	imull	%r9d, %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.66:                               # %for.inc262
                                        #   in Loop: Header=BB57_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_61
.LBB57_67:                              # %for.end264
	imull	$5, -32(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movl	%eax, -40(%rbp)
	imull	$5, -56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movl	%eax, -44(%rbp)
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	$15, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-108(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-112(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	shll	$4, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -8(%rbp)
.LBB57_68:                              # %for.cond289
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_70 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB57_84
# %bb.69:                               # %for.body292
                                        #   in Loop: Header=BB57_68 Depth=1
	movl	$0, -4(%rbp)
.LBB57_70:                              # %for.cond293
                                        #   Parent Loop BB57_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB57_82
# %bb.71:                               # %for.body296
                                        #   in Loop: Header=BB57_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-52(%rbp), %eax
	movl	-4(%rbp), %edx
	subl	$7, %edx
	imull	-40(%rbp), %edx
	addl	%edx, %eax
	movl	-8(%rbp), %edx
	subl	$7, %edx
	imull	-44(%rbp), %edx
	addl	%edx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB57_73
# %bb.72:                               # %cond.true307
                                        #   in Loop: Header=BB57_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB57_74
.LBB57_73:                              # %cond.false309
                                        #   in Loop: Header=BB57_70 Depth=2
	movl	-52(%rbp), %eax
	movl	-4(%rbp), %ecx
	subl	$7, %ecx
	imull	-40(%rbp), %ecx
	addl	%ecx, %eax
	movl	-8(%rbp), %ecx
	subl	$7, %ecx
	imull	-44(%rbp), %ecx
	addl	%ecx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB57_74:                              # %cond.end318
                                        #   in Loop: Header=BB57_70 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB57_76
# %bb.75:                               # %cond.true322
                                        #   in Loop: Header=BB57_70 Depth=2
	xorl	%eax, %eax
	jmp	.LBB57_80
.LBB57_76:                              # %cond.false323
                                        #   in Loop: Header=BB57_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-52(%rbp), %eax
	movl	-4(%rbp), %edx
	subl	$7, %edx
	imull	-40(%rbp), %edx
	addl	%edx, %eax
	movl	-8(%rbp), %edx
	subl	$7, %edx
	imull	-44(%rbp), %edx
	addl	%edx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB57_78
# %bb.77:                               # %cond.true335
                                        #   in Loop: Header=BB57_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB57_79
.LBB57_78:                              # %cond.false337
                                        #   in Loop: Header=BB57_70 Depth=2
	movl	-52(%rbp), %eax
	movl	-4(%rbp), %ecx
	subl	$7, %ecx
	imull	-40(%rbp), %ecx
	addl	%ecx, %eax
	movl	-8(%rbp), %ecx
	subl	$7, %ecx
	imull	-44(%rbp), %ecx
	addl	%ecx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB57_79:                              # %cond.end346
                                        #   in Loop: Header=BB57_70 Depth=2
.LBB57_80:                              # %cond.end348
                                        #   in Loop: Header=BB57_70 Depth=2
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$1536, %rcx             # imm = 0x600
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.81:                               # %for.inc357
                                        #   in Loop: Header=BB57_70 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_70
.LBB57_82:                              # %for.end359
                                        #   in Loop: Header=BB57_68 Depth=1
	jmp	.LBB57_83
.LBB57_83:                              # %for.inc360
                                        #   in Loop: Header=BB57_68 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_68
.LBB57_84:                              # %for.end362.loopexit
	jmp	.LBB57_85
.LBB57_85:                              # %for.end362
	cmpl	$957982588, -92(%rbp)   # imm = 0x3919A77C
	jne	.LBB57_87
.LBB57_86:
	addq	$640, %rsp              # imm = 0x280
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB57_87:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB57_86
.Lfunc_end57:
	.size	intrapred_luma_16x16.48, .Lfunc_end57-intrapred_luma_16x16.48
	.cfi_endproc
                                        # -- End function
	.globl	copyblock_sp.49         # -- Begin function copyblock_sp.49
	.p2align	4, 0x90
	.type	copyblock_sp.49,@function
copyblock_sp.49:                        # @copyblock_sp.49
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movl	$1671031048, -88(%rbp)  # imm = 0x6399E908
	movl	%edi, -84(%rbp)
	movl	%esi, -76(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	-104(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -68(%rbp)
	movq	-104(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -72(%rbp)
	movl	-68(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	movl	$0, -4(%rbp)
.LBB58_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB58_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB58_1 Depth=1
	movl	$0, -8(%rbp)
.LBB58_3:                               # %for.cond4
                                        #   Parent Loop BB58_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB58_6
# %bb.4:                                # %for.body6
                                        #   in Loop: Header=BB58_3 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-8(%rbp), %ecx
	addl	-84(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-4(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-176(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB58_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_3
.LBB58_6:                               # %for.end
                                        #   in Loop: Header=BB58_1 Depth=1
	jmp	.LBB58_7
.LBB58_7:                               # %for.inc17
                                        #   in Loop: Header=BB58_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_1
.LBB58_8:                               # %for.end19
	movl	$0, -4(%rbp)
.LBB58_9:                               # %for.cond20
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_11 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB58_16
# %bb.10:                               # %for.body23
                                        #   in Loop: Header=BB58_9 Depth=1
	movl	$0, -8(%rbp)
.LBB58_11:                              # %for.cond24
                                        #   Parent Loop BB58_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -8(%rbp)
	jge	.LBB58_14
# %bb.12:                               # %for.body27
                                        #   in Loop: Header=BB58_11 Depth=2
	movl	$3, %eax
	subl	-8(%rbp), %eax
	movl	%eax, -36(%rbp)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-36(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-8(%rbp), %rdx
	movl	%eax, -32(%rbp,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-36(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-36(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.13:                               # %for.inc51
                                        #   in Loop: Header=BB58_11 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_11
.LBB58_14:                              # %for.end53
                                        #   in Loop: Header=BB58_9 Depth=1
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movl	-32(%rbp), %eax
	subl	-28(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -160(%rbp,%rcx,4)
	movl	-20(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
# %bb.15:                               # %for.inc79
                                        #   in Loop: Header=BB58_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_9
.LBB58_16:                              # %for.end81
	movl	$0, -8(%rbp)
.LBB58_17:                              # %for.cond82
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_19 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB58_24
# %bb.18:                               # %for.body85
                                        #   in Loop: Header=BB58_17 Depth=1
	movl	$0, -4(%rbp)
.LBB58_19:                              # %for.cond86
                                        #   Parent Loop BB58_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB58_22
# %bb.20:                               # %for.body89
                                        #   in Loop: Header=BB58_19 Depth=2
	movl	$3, %eax
	subl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-4(%rbp), %rdx
	movl	%eax, -32(%rbp,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.21:                               # %for.inc113
                                        #   in Loop: Header=BB58_19 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_19
.LBB58_22:                              # %for.end115
                                        #   in Loop: Header=BB58_17 Depth=1
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-176(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-32(%rbp), %ecx
	subl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	-24(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-20(%rbp), %ecx
	movl	-24(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.23:                               # %for.inc142
                                        #   in Loop: Header=BB58_17 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_17
.LBB58_24:                              # %for.end144
	movl	$0, -4(%rbp)
.LBB58_25:                              # %for.cond145
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_27 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB58_32
# %bb.26:                               # %for.body148
                                        #   in Loop: Header=BB58_25 Depth=1
	movl	$0, -8(%rbp)
.LBB58_27:                              # %for.cond149
                                        #   Parent Loop BB58_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB58_30
# %bb.28:                               # %for.body152
                                        #   in Loop: Header=BB58_27 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-72(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-92(%rbp), %eax
	movl	-80(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-176(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	(%rdx,%rcx,4), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-72(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.29:                               # %for.inc182
                                        #   in Loop: Header=BB58_27 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_27
.LBB58_30:                              # %for.end184
                                        #   in Loop: Header=BB58_25 Depth=1
	jmp	.LBB58_31
.LBB58_31:                              # %for.inc185
                                        #   in Loop: Header=BB58_25 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_25
.LBB58_32:                              # %for.end187
	movl	$0, -4(%rbp)
.LBB58_33:                              # %for.cond188
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_35 Depth 2
                                        #     Child Loop BB58_39 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB58_44
# %bb.34:                               # %for.body191
                                        #   in Loop: Header=BB58_33 Depth=1
	movl	$0, -8(%rbp)
.LBB58_35:                              # %for.cond192
                                        #   Parent Loop BB58_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB58_38
# %bb.36:                               # %for.body195
                                        #   in Loop: Header=BB58_35 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.37:                               # %for.inc203
                                        #   in Loop: Header=BB58_35 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_35
.LBB58_38:                              # %for.end205
                                        #   in Loop: Header=BB58_33 Depth=1
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-32(%rbp), %eax
	subl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	sarl	$1, %eax
	subl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	movl	-20(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -8(%rbp)
.LBB58_39:                              # %for.cond224
                                        #   Parent Loop BB58_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -8(%rbp)
	jge	.LBB58_42
# %bb.40:                               # %for.body227
                                        #   in Loop: Header=BB58_39 Depth=2
	movl	$3, %eax
	subl	-8(%rbp), %eax
	movl	%eax, -36(%rbp)
	movslq	-8(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-36(%rbp), %rcx
	addl	-64(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-36(%rbp), %rcx
	subl	-64(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-36(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.41:                               # %for.inc249
                                        #   in Loop: Header=BB58_39 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_39
.LBB58_42:                              # %for.end251
                                        #   in Loop: Header=BB58_33 Depth=1
	jmp	.LBB58_43
.LBB58_43:                              # %for.inc252
                                        #   in Loop: Header=BB58_33 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_33
.LBB58_44:                              # %for.end254
	movl	$0, -8(%rbp)
.LBB58_45:                              # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_47 Depth 2
                                        #     Child Loop BB58_51 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB58_74
# %bb.46:                               # %for.body258
                                        #   in Loop: Header=BB58_45 Depth=1
	movl	$0, -4(%rbp)
.LBB58_47:                              # %for.cond259
                                        #   Parent Loop BB58_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB58_50
# %bb.48:                               # %for.body262
                                        #   in Loop: Header=BB58_47 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.49:                               # %for.inc270
                                        #   in Loop: Header=BB58_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_47
.LBB58_50:                              # %for.end272
                                        #   in Loop: Header=BB58_45 Depth=1
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-32(%rbp), %eax
	subl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	sarl	$1, %eax
	subl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	movl	-20(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -4(%rbp)
.LBB58_51:                              # %for.cond291
                                        #   Parent Loop BB58_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB58_72
# %bb.52:                               # %for.body294
                                        #   in Loop: Header=BB58_51 Depth=2
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-4(%rbp), %rdx
	movl	-64(%rbp,%rdx,4), %edx
	movslq	-12(%rbp), %rsi
	addl	-64(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB58_54
# %bb.53:                               # %cond.true
                                        #   in Loop: Header=BB58_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB58_55
.LBB58_54:                              # %cond.false
                                        #   in Loop: Header=BB58_51 Depth=2
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	addl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB58_55:                              # %cond.end
                                        #   in Loop: Header=BB58_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB58_57
# %bb.56:                               # %cond.true314
                                        #   in Loop: Header=BB58_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB58_61
.LBB58_57:                              # %cond.false316
                                        #   in Loop: Header=BB58_51 Depth=2
	xorl	%eax, %eax
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	addl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB58_59
# %bb.58:                               # %cond.true326
                                        #   in Loop: Header=BB58_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB58_60
.LBB58_59:                              # %cond.false327
                                        #   in Loop: Header=BB58_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-64(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB58_60:                              # %cond.end335
                                        #   in Loop: Header=BB58_51 Depth=2
.LBB58_61:                              # %cond.end337
                                        #   in Loop: Header=BB58_51 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-4(%rbp), %rdx
	movl	-64(%rbp,%rdx,4), %edx
	movslq	-12(%rbp), %rsi
	subl	-64(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB58_63
# %bb.62:                               # %cond.true354
                                        #   in Loop: Header=BB58_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB58_64
.LBB58_63:                              # %cond.false355
                                        #   in Loop: Header=BB58_51 Depth=2
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	subl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB58_64:                              # %cond.end363
                                        #   in Loop: Header=BB58_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB58_66
# %bb.65:                               # %cond.true367
                                        #   in Loop: Header=BB58_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB58_70
.LBB58_66:                              # %cond.false369
                                        #   in Loop: Header=BB58_51 Depth=2
	xorl	%eax, %eax
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	subl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB58_68
# %bb.67:                               # %cond.true379
                                        #   in Loop: Header=BB58_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB58_69
.LBB58_68:                              # %cond.false380
                                        #   in Loop: Header=BB58_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-64(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB58_69:                              # %cond.end388
                                        #   in Loop: Header=BB58_51 Depth=2
.LBB58_70:                              # %cond.end390
                                        #   in Loop: Header=BB58_51 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.71:                               # %for.inc397
                                        #   in Loop: Header=BB58_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_51
.LBB58_72:                              # %for.end399
                                        #   in Loop: Header=BB58_45 Depth=1
	jmp	.LBB58_73
.LBB58_73:                              # %for.inc400
                                        #   in Loop: Header=BB58_45 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_45
.LBB58_74:                              # %for.end402
	movl	$0, -4(%rbp)
.LBB58_75:                              # %for.cond403
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_77 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB58_82
# %bb.76:                               # %for.body406
                                        #   in Loop: Header=BB58_75 Depth=1
	movl	$0, -8(%rbp)
.LBB58_77:                              # %for.cond407
                                        #   Parent Loop BB58_75 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB58_80
# %bb.78:                               # %for.body410
                                        #   in Loop: Header=BB58_77 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-76(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-84(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.79:                               # %for.inc425
                                        #   in Loop: Header=BB58_77 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_77
.LBB58_80:                              # %for.end427
                                        #   in Loop: Header=BB58_75 Depth=1
	jmp	.LBB58_81
.LBB58_81:                              # %for.inc428
                                        #   in Loop: Header=BB58_75 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_75
.LBB58_82:                              # %for.end430
	cmpl	$1671031048, -88(%rbp)  # imm = 0x6399E908
	jne	.LBB58_84
.LBB58_83:
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB58_84:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB58_83
.Lfunc_end58:
	.size	copyblock_sp.49, .Lfunc_end58-copyblock_sp.49
	.cfi_endproc
                                        # -- End function
	.globl	dct_luma.50             # -- Begin function dct_luma.50
	.p2align	4, 0x90
	.type	dct_luma.50,@function
dct_luma.50:                            # @dct_luma.50
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	xorl	%ebx, %ebx
	movl	$1016723471, -148(%rbp) # imm = 0x3C99F80F
	movl	%edi, -24(%rbp)
	movl	%esi, -32(%rbp)
	movq	%rdx, -160(%rbp)
	movl	%ecx, -108(%rbp)
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -116(%rbp)
	movl	-32(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-116(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -124(%rbp)
	movl	-132(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-116(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-128(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -168(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-128(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -176(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB59_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%bl
.LBB59_2:                               # %land.end
	andb	$1, %bl
	movzbl	%bl, %eax
	movl	%eax, -36(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -96(%rbp)
	movl	-40(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -112(%rbp)
	movl	$0, -12(%rbp)
.LBB59_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_7 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB59_5
# %bb.4:                                # %land.rhs31
                                        #   in Loop: Header=BB59_3 Depth=1
	cmpl	$0, -36(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB59_5:                               # %land.end32
                                        #   in Loop: Header=BB59_3 Depth=1
	testb	$1, %al
	jne	.LBB59_6
	jmp	.LBB59_12
.LBB59_6:                               # %for.body
                                        #   in Loop: Header=BB59_3 Depth=1
	movl	$0, -16(%rbp)
.LBB59_7:                               # %for.cond34
                                        #   Parent Loop BB59_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB59_10
# %bb.8:                                # %for.body36
                                        #   in Loop: Header=BB59_7 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-88(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-88(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-88(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB59_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB59_7
.LBB59_10:                              # %for.end
                                        #   in Loop: Header=BB59_3 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.11:                               # %for.inc93
                                        #   in Loop: Header=BB59_3 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB59_3
.LBB59_12:                              # %for.end95
	movl	$0, -16(%rbp)
.LBB59_13:                              # %for.cond96
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_17 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB59_15
# %bb.14:                               # %land.rhs98
                                        #   in Loop: Header=BB59_13 Depth=1
	cmpl	$0, -36(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB59_15:                              # %land.end101
                                        #   in Loop: Header=BB59_13 Depth=1
	testb	$1, %al
	jne	.LBB59_16
	jmp	.LBB59_22
.LBB59_16:                              # %for.body103
                                        #   in Loop: Header=BB59_13 Depth=1
	movl	$0, -12(%rbp)
.LBB59_17:                              # %for.cond104
                                        #   Parent Loop BB59_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB59_20
# %bb.18:                               # %for.body106
                                        #   in Loop: Header=BB59_17 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-20(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.19:                               # %for.inc134
                                        #   in Loop: Header=BB59_17 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB59_17
.LBB59_20:                              # %for.end136
                                        #   in Loop: Header=BB59_13 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.21:                               # %for.inc167
                                        #   in Loop: Header=BB59_13 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB59_13
.LBB59_22:                              # %for.end169
	movl	$0, -120(%rbp)
	movl	$-1, -104(%rbp)
	movl	$0, -100(%rbp)
	movl	$0, -84(%rbp)
.LBB59_23:                              # %for.cond170
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -84(%rbp)
	jge	.LBB59_57
# %bb.24:                               # %for.body172
                                        #   in Loop: Header=BB59_23 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB59_27
# %bb.25:                               # %lor.lhs.false
                                        #   in Loop: Header=BB59_23 Depth=1
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB59_28
# %bb.26:                               # %land.lhs.true
                                        #   in Loop: Header=BB59_23 Depth=1
	movq	-144(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB59_28
.LBB59_27:                              # %if.then
                                        #   in Loop: Header=BB59_23 Depth=1
	movslq	-84(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-84(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB59_29
.LBB59_28:                              # %if.else
                                        #   in Loop: Header=BB59_23 Depth=1
	movslq	-84(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-84(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB59_29:                              # %if.end
                                        #   in Loop: Header=BB59_23 Depth=1
	movl	-104(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -104(%rbp)
	movl	$0, -92(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB59_31
# %bb.30:                               # %if.then193
                                        #   in Loop: Header=BB59_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -28(%rbp)
	jmp	.LBB59_35
.LBB59_31:                              # %if.else199
                                        #   in Loop: Header=BB59_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB59_33
# %bb.32:                               # %if.then202
                                        #   in Loop: Header=BB59_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB59_34
.LBB59_33:                              # %if.else223
                                        #   in Loop: Header=BB59_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
.LBB59_34:                              # %if.end245
                                        #   in Loop: Header=BB59_23 Depth=1
	jmp	.LBB59_35
.LBB59_35:                              # %if.end246
                                        #   in Loop: Header=BB59_23 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB59_53
# %bb.36:                               # %if.then249
                                        #   in Loop: Header=BB59_23 Depth=1
	movl	$1, -120(%rbp)
	cmpl	$1, -28(%rbp)
	jg	.LBB59_38
# %bb.37:                               # %lor.lhs.false252
                                        #   in Loop: Header=BB59_23 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB59_39
.LBB59_38:                              # %if.then254
                                        #   in Loop: Header=BB59_23 Depth=1
	movq	-160(%rbp), %rax
	movl	(%rax), %ecx
	addl	$999999, %ecx           # imm = 0xF423F
	movl	%ecx, (%rax)
	jmp	.LBB59_40
.LBB59_39:                              # %if.else256
                                        #   in Loop: Header=BB59_23 Depth=1
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-104(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-160(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB59_40:                              # %if.end263
                                        #   in Loop: Header=BB59_23 Depth=1
	movl	-28(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-168(%rbp), %rcx
	movslq	-100(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-104(%rbp), %eax
	movq	-176(%rbp), %rcx
	movslq	-100(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$-1, -104(%rbp)
	movl	-28(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -28(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB59_42
# %bb.41:                               # %if.then282
                                        #   in Loop: Header=BB59_23 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB59_52
.LBB59_42:                              # %if.else283
                                        #   in Loop: Header=BB59_23 Depth=1
	cmpl	$4, -40(%rbp)
	jge	.LBB59_47
# %bb.43:                               # %if.then286
                                        #   in Loop: Header=BB59_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB59_45
# %bb.44:                               # %if.then289
                                        #   in Loop: Header=BB59_23 Depth=1
	movl	-28(%rbp), %eax
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB59_46
.LBB59_45:                              # %if.else301
                                        #   in Loop: Header=BB59_23 Depth=1
	movl	-28(%rbp), %eax
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -92(%rbp)
.LBB59_46:                              # %if.end314
                                        #   in Loop: Header=BB59_23 Depth=1
	jmp	.LBB59_51
.LBB59_47:                              # %if.else315
                                        #   in Loop: Header=BB59_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB59_49
# %bb.48:                               # %if.then318
                                        #   in Loop: Header=BB59_23 Depth=1
	movl	-28(%rbp), %eax
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB59_50
.LBB59_49:                              # %if.else328
                                        #   in Loop: Header=BB59_23 Depth=1
	movl	-28(%rbp), %eax
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -92(%rbp)
.LBB59_50:                              # %if.end338
                                        #   in Loop: Header=BB59_23 Depth=1
	jmp	.LBB59_51
.LBB59_51:                              # %if.end339
                                        #   in Loop: Header=BB59_23 Depth=1
	jmp	.LBB59_52
.LBB59_52:                              # %if.end340
                                        #   in Loop: Header=BB59_23 Depth=1
	jmp	.LBB59_53
.LBB59_53:                              # %if.end341
                                        #   in Loop: Header=BB59_23 Depth=1
	cmpl	$0, -36(%rbp)
	jne	.LBB59_55
# %bb.54:                               # %if.then343
                                        #   in Loop: Header=BB59_23 Depth=1
	movl	-92(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB59_55:                              # %if.end349
                                        #   in Loop: Header=BB59_23 Depth=1
	jmp	.LBB59_56
.LBB59_56:                              # %for.inc350
                                        #   in Loop: Header=BB59_23 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB59_23
.LBB59_57:                              # %for.end352
	movq	-168(%rbp), %rax
	movslq	-100(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB59_58:                              # %for.cond355
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_62 Depth 2
                                        #     Child Loop BB59_66 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB59_60
# %bb.59:                               # %land.rhs358
                                        #   in Loop: Header=BB59_58 Depth=1
	cmpl	$0, -36(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB59_60:                              # %land.end361
                                        #   in Loop: Header=BB59_58 Depth=1
	testb	$1, %al
	jne	.LBB59_61
	jmp	.LBB59_71
.LBB59_61:                              # %for.body363
                                        #   in Loop: Header=BB59_58 Depth=1
	movl	$0, -16(%rbp)
.LBB59_62:                              # %for.cond364
                                        #   Parent Loop BB59_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB59_65
# %bb.63:                               # %for.body367
                                        #   in Loop: Header=BB59_62 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.64:                               # %for.inc375
                                        #   in Loop: Header=BB59_62 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB59_62
.LBB59_65:                              # %for.end377
                                        #   in Loop: Header=BB59_58 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -16(%rbp)
.LBB59_66:                              # %for.cond396
                                        #   Parent Loop BB59_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB59_69
# %bb.67:                               # %for.body399
                                        #   in Loop: Header=BB59_66 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -88(%rbp)
	movslq	-16(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-88(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-88(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-88(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.68:                               # %for.inc421
                                        #   in Loop: Header=BB59_66 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB59_66
.LBB59_69:                              # %for.end423
                                        #   in Loop: Header=BB59_58 Depth=1
	jmp	.LBB59_70
.LBB59_70:                              # %for.inc424
                                        #   in Loop: Header=BB59_58 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB59_58
.LBB59_71:                              # %for.end426
	movl	$0, -16(%rbp)
.LBB59_72:                              # %for.cond427
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_76 Depth 2
                                        #     Child Loop BB59_80 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB59_74
# %bb.73:                               # %land.rhs430
                                        #   in Loop: Header=BB59_72 Depth=1
	cmpl	$0, -36(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB59_74:                              # %land.end433
                                        #   in Loop: Header=BB59_72 Depth=1
	testb	$1, %al
	jne	.LBB59_75
	jmp	.LBB59_109
.LBB59_75:                              # %for.body435
                                        #   in Loop: Header=BB59_72 Depth=1
	movl	$0, -12(%rbp)
.LBB59_76:                              # %for.cond436
                                        #   Parent Loop BB59_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB59_79
# %bb.77:                               # %for.body439
                                        #   in Loop: Header=BB59_76 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.78:                               # %for.inc447
                                        #   in Loop: Header=BB59_76 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB59_76
.LBB59_79:                              # %for.end449
                                        #   in Loop: Header=BB59_72 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -12(%rbp)
.LBB59_80:                              # %for.cond468
                                        #   Parent Loop BB59_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB59_107
# %bb.81:                               # %for.body471
                                        #   in Loop: Header=BB59_80 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB59_101
# %bb.82:                               # %if.then474
                                        #   in Loop: Header=BB59_80 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-80(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	addl	-80(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-16(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-12(%rbp), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB59_84
# %bb.83:                               # %cond.true
                                        #   in Loop: Header=BB59_80 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB59_85
.LBB59_84:                              # %cond.false
                                        #   in Loop: Header=BB59_80 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-12(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB59_85:                              # %cond.end
                                        #   in Loop: Header=BB59_80 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB59_87
# %bb.86:                               # %cond.true515
                                        #   in Loop: Header=BB59_80 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB59_91
.LBB59_87:                              # %cond.false518
                                        #   in Loop: Header=BB59_80 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-12(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB59_89
# %bb.88:                               # %cond.true539
                                        #   in Loop: Header=BB59_80 Depth=2
	xorl	%eax, %eax
	jmp	.LBB59_90
.LBB59_89:                              # %cond.false540
                                        #   in Loop: Header=BB59_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB59_90:                              # %cond.end559
                                        #   in Loop: Header=BB59_80 Depth=2
.LBB59_91:                              # %cond.end561
                                        #   in Loop: Header=BB59_80 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-80(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	subl	-80(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-16(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-20(%rbp), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB59_93
# %bb.92:                               # %cond.true591
                                        #   in Loop: Header=BB59_80 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB59_94
.LBB59_93:                              # %cond.false592
                                        #   in Loop: Header=BB59_80 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-20(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB59_94:                              # %cond.end611
                                        #   in Loop: Header=BB59_80 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB59_96
# %bb.95:                               # %cond.true615
                                        #   in Loop: Header=BB59_80 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB59_100
.LBB59_96:                              # %cond.false618
                                        #   in Loop: Header=BB59_80 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-20(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB59_98
# %bb.97:                               # %cond.true639
                                        #   in Loop: Header=BB59_80 Depth=2
	xorl	%eax, %eax
	jmp	.LBB59_99
.LBB59_98:                              # %cond.false640
                                        #   in Loop: Header=BB59_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB59_99:                              # %cond.end659
                                        #   in Loop: Header=BB59_80 Depth=2
.LBB59_100:                             # %cond.end661
                                        #   in Loop: Header=BB59_80 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB59_105
.LBB59_101:                             # %if.else669
                                        #   in Loop: Header=BB59_80 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB59_103
# %bb.102:                              # %if.then671
                                        #   in Loop: Header=BB59_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB59_104
.LBB59_103:                             # %if.else692
                                        #   in Loop: Header=BB59_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB59_104:                             # %if.end717
                                        #   in Loop: Header=BB59_80 Depth=2
	jmp	.LBB59_105
.LBB59_105:                             # %if.end718
                                        #   in Loop: Header=BB59_80 Depth=2
	jmp	.LBB59_106
.LBB59_106:                             # %for.inc719
                                        #   in Loop: Header=BB59_80 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB59_80
.LBB59_107:                             # %for.end721
                                        #   in Loop: Header=BB59_72 Depth=1
	jmp	.LBB59_108
.LBB59_108:                             # %for.inc722
                                        #   in Loop: Header=BB59_72 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB59_72
.LBB59_109:                             # %for.end724
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB59_122
# %bb.110:                              # %if.then727
	movl	$0, -12(%rbp)
.LBB59_111:                             # %for.cond728
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_113 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB59_121
# %bb.112:                              # %for.body731
                                        #   in Loop: Header=BB59_111 Depth=1
	movl	$0, -16(%rbp)
.LBB59_113:                             # %for.cond732
                                        #   Parent Loop BB59_111 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB59_119
# %bb.114:                              # %for.body735
                                        #   in Loop: Header=BB59_113 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB59_116
# %bb.115:                              # %if.then737
                                        #   in Loop: Header=BB59_113 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-32(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB59_117
.LBB59_116:                             # %if.else761
                                        #   in Loop: Header=BB59_113 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-32(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB59_117:                             # %if.end779
                                        #   in Loop: Header=BB59_113 Depth=2
	jmp	.LBB59_118
.LBB59_118:                             # %for.inc780
                                        #   in Loop: Header=BB59_113 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB59_113
.LBB59_119:                             # %for.end782
                                        #   in Loop: Header=BB59_111 Depth=1
	jmp	.LBB59_120
.LBB59_120:                             # %for.inc783
                                        #   in Loop: Header=BB59_111 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB59_111
.LBB59_121:                             # %for.end785
	jmp	.LBB59_122
.LBB59_122:                             # %if.end786
	movl	-120(%rbp), %ebx
	cmpl	$1016723471, -148(%rbp) # imm = 0x3C99F80F
	jne	.LBB59_124
.LBB59_123:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB59_124:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB59_123
.Lfunc_end59:
	.size	dct_luma.50, .Lfunc_end59-dct_luma.50
	.cfi_endproc
                                        # -- End function
	.globl	dct_luma_16x16.51       # -- Begin function dct_luma_16x16.51
	.p2align	4, 0x90
	.type	dct_luma_16x16.51,@function
dct_luma_16x16.51:                      # @dct_luma_16x16.51
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$2280, %rsp             # imm = 0x8E8
	.cfi_offset %rbx, -24
	xorl	%eax, %eax
	movl	$1388740253, -132(%rbp) # imm = 0x52C67E9D
	movl	%edi, -104(%rbp)
	movl	$0, -116(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -128(%rbp)
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -152(%rbp)
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -232(%rbp)
	movq	-128(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	img, %rdx
	addl	72668(%rdx), %ecx
	cmpl	$0, %ecx
	jne	.LBB60_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%al
.LBB60_2:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -64(%rbp)
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -100(%rbp)
	movl	-64(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -120(%rbp)
	movl	$0, -12(%rbp)
.LBB60_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_5 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB60_13
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB60_3 Depth=1
	movl	$0, -16(%rbp)
.LBB60_5:                               # %for.cond16
                                        #   Parent Loop BB60_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB60_11
# %bb.6:                                # %for.body18
                                        #   in Loop: Header=BB60_5 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB60_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB60_5 Depth=2
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB60_9
.LBB60_8:                               # %if.else
                                        #   in Loop: Header=BB60_5 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB60_9:                               # %if.end
                                        #   in Loop: Header=BB60_5 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rdi
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	shlq	$6, %rax
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movl	%ecx, (%rdi,%rax,4)
# %bb.10:                               # %for.inc
                                        #   in Loop: Header=BB60_5 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_5
.LBB60_11:                              # %for.end
                                        #   in Loop: Header=BB60_3 Depth=1
	jmp	.LBB60_12
.LBB60_12:                              # %for.inc61
                                        #   in Loop: Header=BB60_3 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_3
.LBB60_13:                              # %for.end63
	movl	$0, -20(%rbp)
.LBB60_14:                              # %for.cond64
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_18 Depth 2
                                        #       Child Loop BB60_20 Depth 3
                                        #         Child Loop BB60_22 Depth 4
                                        #       Child Loop BB60_28 Depth 3
                                        #         Child Loop BB60_30 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -20(%rbp)
	jge	.LBB60_16
# %bb.15:                               # %land.rhs67
                                        #   in Loop: Header=BB60_14 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB60_16:                              # %land.end69
                                        #   in Loop: Header=BB60_14 Depth=1
	testb	$1, %al
	jne	.LBB60_17
	jmp	.LBB60_39
.LBB60_17:                              # %for.body71
                                        #   in Loop: Header=BB60_14 Depth=1
	movl	$0, -24(%rbp)
.LBB60_18:                              # %for.cond72
                                        #   Parent Loop BB60_14 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_20 Depth 3
                                        #         Child Loop BB60_22 Depth 4
                                        #       Child Loop BB60_28 Depth 3
                                        #         Child Loop BB60_30 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB60_37
# %bb.19:                               # %for.body75
                                        #   in Loop: Header=BB60_18 Depth=2
	movl	$0, -12(%rbp)
.LBB60_20:                              # %for.cond76
                                        #   Parent Loop BB60_14 Depth=1
                                        #     Parent Loop BB60_18 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB60_22 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB60_27
# %bb.21:                               # %for.body79
                                        #   in Loop: Header=BB60_20 Depth=3
	movl	$0, -16(%rbp)
.LBB60_22:                              # %for.cond80
                                        #   Parent Loop BB60_14 Depth=1
                                        #     Parent Loop BB60_18 Depth=2
                                        #       Parent Loop BB60_20 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB60_25
# %bb.23:                               # %for.body83
                                        #   in Loop: Header=BB60_22 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	movl	%ecx, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-56(%rbp), %rax
	movl	%ecx, -48(%rbp,%rax,4)
# %bb.24:                               # %for.inc123
                                        #   in Loop: Header=BB60_22 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_22
.LBB60_25:                              # %for.end125
                                        #   in Loop: Header=BB60_20 Depth=3
	leaq	-1264(%rbp), %rax
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movq	%rax, %rdx
	addq	$256, %rdx              # imm = 0x100
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	addq	$768, %rax              # imm = 0x300
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.26:                               # %for.inc167
                                        #   in Loop: Header=BB60_20 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_20
.LBB60_27:                              # %for.end169
                                        #   in Loop: Header=BB60_18 Depth=2
	movl	$0, -16(%rbp)
.LBB60_28:                              # %for.cond170
                                        #   Parent Loop BB60_14 Depth=1
                                        #     Parent Loop BB60_18 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB60_30 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB60_35
# %bb.29:                               # %for.body173
                                        #   in Loop: Header=BB60_28 Depth=3
	movl	$0, -12(%rbp)
.LBB60_30:                              # %for.cond174
                                        #   Parent Loop BB60_14 Depth=1
                                        #     Parent Loop BB60_18 Depth=2
                                        #       Parent Loop BB60_28 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB60_33
# %bb.31:                               # %for.body177
                                        #   in Loop: Header=BB60_30 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-12(%rbp), %rdx
	movl	%ecx, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-52(%rbp), %rax
	movl	%ecx, -48(%rbp,%rax,4)
# %bb.32:                               # %for.inc217
                                        #   in Loop: Header=BB60_30 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_30
.LBB60_33:                              # %for.end219
                                        #   in Loop: Header=BB60_28 Depth=3
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, 32(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, 16(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, 48(%rax,%rdx,4)
# %bb.34:                               # %for.inc262
                                        #   in Loop: Header=BB60_28 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_28
.LBB60_35:                              # %for.end264
                                        #   in Loop: Header=BB60_18 Depth=2
	jmp	.LBB60_36
.LBB60_36:                              # %for.inc265
                                        #   in Loop: Header=BB60_18 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB60_18
.LBB60_37:                              # %for.end267
                                        #   in Loop: Header=BB60_14 Depth=1
	jmp	.LBB60_38
.LBB60_38:                              # %for.inc268
                                        #   in Loop: Header=BB60_14 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB60_14
.LBB60_39:                              # %for.end270
	movl	$0, -12(%rbp)
.LBB60_40:                              # %for.cond271
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_42 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB60_47
# %bb.41:                               # %for.body274
                                        #   in Loop: Header=BB60_40 Depth=1
	movl	$0, -16(%rbp)
.LBB60_42:                              # %for.cond275
                                        #   Parent Loop BB60_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB60_45
# %bb.43:                               # %for.body278
                                        #   in Loop: Header=BB60_42 Depth=2
	leaq	-1264(%rbp), %rax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.44:                               # %for.inc289
                                        #   in Loop: Header=BB60_42 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_42
.LBB60_45:                              # %for.end291
                                        #   in Loop: Header=BB60_40 Depth=1
	jmp	.LBB60_46
.LBB60_46:                              # %for.inc292
                                        #   in Loop: Header=BB60_40 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_40
.LBB60_47:                              # %for.end294
	movl	$0, -12(%rbp)
.LBB60_48:                              # %for.cond295
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_52 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB60_50
# %bb.49:                               # %land.rhs298
                                        #   in Loop: Header=BB60_48 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB60_50:                              # %land.end301
                                        #   in Loop: Header=BB60_48 Depth=1
	testb	$1, %al
	jne	.LBB60_51
	jmp	.LBB60_57
.LBB60_51:                              # %for.body303
                                        #   in Loop: Header=BB60_48 Depth=1
	movl	$0, -16(%rbp)
.LBB60_52:                              # %for.cond304
                                        #   Parent Loop BB60_48 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB60_55
# %bb.53:                               # %for.body307
                                        #   in Loop: Header=BB60_52 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-56(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-56(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-56(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.54:                               # %for.inc331
                                        #   in Loop: Header=BB60_52 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_52
.LBB60_55:                              # %for.end333
                                        #   in Loop: Header=BB60_48 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -224(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -192(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	addl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -208(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.56:                               # %for.inc358
                                        #   in Loop: Header=BB60_48 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_48
.LBB60_57:                              # %for.end360
	movl	$0, -16(%rbp)
.LBB60_58:                              # %for.cond361
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_62 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB60_60
# %bb.59:                               # %land.rhs364
                                        #   in Loop: Header=BB60_58 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB60_60:                              # %land.end367
                                        #   in Loop: Header=BB60_58 Depth=1
	testb	$1, %al
	jne	.LBB60_61
	jmp	.LBB60_67
.LBB60_61:                              # %for.body369
                                        #   in Loop: Header=BB60_58 Depth=1
	movl	$0, -12(%rbp)
.LBB60_62:                              # %for.cond370
                                        #   Parent Loop BB60_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB60_65
# %bb.63:                               # %for.body373
                                        #   in Loop: Header=BB60_62 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.64:                               # %for.inc397
                                        #   in Loop: Header=BB60_62 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_62
.LBB60_65:                              # %for.end399
                                        #   in Loop: Header=BB60_58 Depth=1
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-224(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-36(%rbp), %ecx
	addl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.66:                               # %for.inc427
                                        #   in Loop: Header=BB60_58 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_58
.LBB60_67:                              # %for.end429
	movl	$-1, -80(%rbp)
	movl	$0, -76(%rbp)
	movl	$0, -60(%rbp)
.LBB60_68:                              # %for.cond430
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -60(%rbp)
	jge	.LBB60_88
# %bb.69:                               # %for.body433
                                        #   in Loop: Header=BB60_68 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB60_72
# %bb.70:                               # %lor.lhs.false
                                        #   in Loop: Header=BB60_68 Depth=1
	cmpl	$0, mb_adaptive
	je	.LBB60_73
# %bb.71:                               # %land.lhs.true
                                        #   in Loop: Header=BB60_68 Depth=1
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB60_73
.LBB60_72:                              # %if.then437
                                        #   in Loop: Header=BB60_68 Depth=1
	movslq	-60(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-60(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_74
.LBB60_73:                              # %if.else446
                                        #   in Loop: Header=BB60_68 Depth=1
	movslq	-60(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-60(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB60_74:                              # %if.end455
                                        #   in Loop: Header=BB60_68 Depth=1
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB60_76
# %bb.75:                               # %if.then458
                                        #   in Loop: Header=BB60_68 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -68(%rbp)
	jmp	.LBB60_77
.LBB60_76:                              # %if.else463
                                        #   in Loop: Header=BB60_68 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-64(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-120(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -68(%rbp)
.LBB60_77:                              # %if.end481
                                        #   in Loop: Header=BB60_68 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB60_82
# %bb.78:                               # %land.lhs.true484
                                        #   in Loop: Header=BB60_68 Depth=1
	movq	img, %rax
	cmpl	$10, 40(%rax)
	jge	.LBB60_82
# %bb.79:                               # %if.then488
                                        #   in Loop: Header=BB60_68 Depth=1
	cmpl	$2063, -68(%rbp)        # imm = 0x80F
	jle	.LBB60_81
# %bb.80:                               # %if.then491
                                        #   in Loop: Header=BB60_68 Depth=1
	movl	$2063, -68(%rbp)        # imm = 0x80F
.LBB60_81:                              # %if.end492
                                        #   in Loop: Header=BB60_68 Depth=1
	jmp	.LBB60_82
.LBB60_82:                              # %if.end493
                                        #   in Loop: Header=BB60_68 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB60_84
# %bb.83:                               # %if.then496
                                        #   in Loop: Header=BB60_68 Depth=1
	movl	-68(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-152(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	movq	-232(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	movl	$-1, -80(%rbp)
.LBB60_84:                              # %if.end507
                                        #   in Loop: Header=BB60_68 Depth=1
	cmpl	$0, -72(%rbp)
	jne	.LBB60_86
# %bb.85:                               # %if.then509
                                        #   in Loop: Header=BB60_68 Depth=1
	movl	-68(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB60_86:                              # %if.end519
                                        #   in Loop: Header=BB60_68 Depth=1
	jmp	.LBB60_87
.LBB60_87:                              # %for.inc520
                                        #   in Loop: Header=BB60_68 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB60_68
.LBB60_88:                              # %for.end522
	movq	-152(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB60_89:                              # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_93 Depth 2
                                        #     Child Loop BB60_97 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB60_91
# %bb.90:                               # %land.rhs528
                                        #   in Loop: Header=BB60_89 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB60_91:                              # %land.end531
                                        #   in Loop: Header=BB60_89 Depth=1
	testb	$1, %al
	jne	.LBB60_92
	jmp	.LBB60_102
.LBB60_92:                              # %for.body533
                                        #   in Loop: Header=BB60_89 Depth=1
	movl	$0, -16(%rbp)
.LBB60_93:                              # %for.cond534
                                        #   Parent Loop BB60_89 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB60_96
# %bb.94:                               # %for.body537
                                        #   in Loop: Header=BB60_93 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.95:                               # %for.inc544
                                        #   in Loop: Header=BB60_93 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_93
.LBB60_96:                              # %for.end546
                                        #   in Loop: Header=BB60_89 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB60_97:                              # %for.cond563
                                        #   Parent Loop BB60_89 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB60_100
# %bb.98:                               # %for.body566
                                        #   in Loop: Header=BB60_97 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-56(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-56(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movslq	-56(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.99:                               # %for.inc586
                                        #   in Loop: Header=BB60_97 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_97
.LBB60_100:                             # %for.end588
                                        #   in Loop: Header=BB60_89 Depth=1
	jmp	.LBB60_101
.LBB60_101:                             # %for.inc589
                                        #   in Loop: Header=BB60_89 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_89
.LBB60_102:                             # %for.end591
	movl	$0, -16(%rbp)
.LBB60_103:                             # %for.cond592
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_107 Depth 2
                                        #     Child Loop BB60_111 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB60_105
# %bb.104:                              # %land.rhs595
                                        #   in Loop: Header=BB60_103 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB60_105:                             # %land.end598
                                        #   in Loop: Header=BB60_103 Depth=1
	testb	$1, %al
	jne	.LBB60_106
	jmp	.LBB60_119
.LBB60_106:                             # %for.body600
                                        #   in Loop: Header=BB60_103 Depth=1
	movl	$0, -12(%rbp)
.LBB60_107:                             # %for.cond601
                                        #   Parent Loop BB60_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB60_110
# %bb.108:                              # %for.body604
                                        #   in Loop: Header=BB60_107 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.109:                              # %for.inc611
                                        #   in Loop: Header=BB60_107 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_107
.LBB60_110:                             # %for.end613
                                        #   in Loop: Header=BB60_103 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB60_111:                             # %for.cond630
                                        #   Parent Loop BB60_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB60_117
# %bb.112:                              # %for.body633
                                        #   in Loop: Header=BB60_111 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	cmpl	$6, -64(%rbp)
	jge	.LBB60_114
# %bb.113:                              # %if.then637
                                        #   in Loop: Header=BB60_111 Depth=2
	leaq	-1264(%rbp), %r8
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %esi
	movslq	-52(%rbp), %rax
	addl	-96(%rbp,%rax,4), %esi
	movslq	-100(%rbp), %rax
	shlq	$6, %rax
	movabsq	$InvLevelScale4x4Luma_Intra, %rdi
	movq	%rdi, %rcx
	addq	%rax, %rcx
	imull	(%rcx), %esi
	movl	$5, %eax
	movl	$5, %ecx
	subl	-64(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r9d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %esi
	movl	$6, %edx
	movl	$6, %ecx
	subl	-64(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %esi
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movq	%r8, %rbx
	addq	%rcx, %rbx
	movslq	-12(%rbp), %rcx
	movl	%esi, (%rbx,%rcx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %esi
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %esi
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdi
	imull	(%rdi), %esi
	subl	-64(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r9d
	addl	%r9d, %esi
	subl	-64(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %esi
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r8
	movslq	-52(%rbp), %rax
	movl	%esi, (%r8,%rax,4)
	jmp	.LBB60_115
.LBB60_114:                             # %if.else680
                                        #   in Loop: Header=BB60_111 Depth=2
	leaq	-1264(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-52(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %edx
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rsi
	movq	%rsi, %rdi
	addq	%rcx, %rdi
	imull	(%rdi), %edx
	movl	-64(%rbp), %ecx
	subl	$6, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdi
	addq	%rcx, %rdi
	movslq	-12(%rbp), %rcx
	movl	%edx, (%rdi,%rcx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-64(%rbp), %ecx
	subl	$6, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-52(%rbp), %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB60_115:                             # %if.end717
                                        #   in Loop: Header=BB60_111 Depth=2
	jmp	.LBB60_116
.LBB60_116:                             # %for.inc718
                                        #   in Loop: Header=BB60_111 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_111
.LBB60_117:                             # %for.end720
                                        #   in Loop: Header=BB60_103 Depth=1
	jmp	.LBB60_118
.LBB60_118:                             # %for.inc721
                                        #   in Loop: Header=BB60_103 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_103
.LBB60_119:                             # %for.end723
	movl	$0, -20(%rbp)
.LBB60_120:                             # %for.cond724
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_122 Depth 2
                                        #       Child Loop BB60_124 Depth 3
                                        #       Child Loop BB60_143 Depth 3
                                        #         Child Loop BB60_147 Depth 4
                                        #         Child Loop BB60_151 Depth 4
                                        #       Child Loop BB60_157 Depth 3
                                        #         Child Loop BB60_161 Depth 4
                                        #         Child Loop BB60_165 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB60_174
# %bb.121:                              # %for.body727
                                        #   in Loop: Header=BB60_120 Depth=1
	movl	$0, -24(%rbp)
.LBB60_122:                             # %for.cond728
                                        #   Parent Loop BB60_120 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_124 Depth 3
                                        #       Child Loop BB60_143 Depth 3
                                        #         Child Loop BB60_147 Depth 4
                                        #         Child Loop BB60_151 Depth 4
                                        #       Child Loop BB60_157 Depth 3
                                        #         Child Loop BB60_161 Depth 4
                                        #         Child Loop BB60_165 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB60_172
# %bb.123:                              # %for.body731
                                        #   in Loop: Header=BB60_122 Depth=2
	movl	$-1, -80(%rbp)
	movl	$0, -76(%rbp)
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -112(%rbp)
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -108(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-108(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-108(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -240(%rbp)
	movl	$1, -60(%rbp)
.LBB60_124:                             # %for.cond751
                                        #   Parent Loop BB60_120 Depth=1
                                        #     Parent Loop BB60_122 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -60(%rbp)
	jge	.LBB60_142
# %bb.125:                              # %for.body754
                                        #   in Loop: Header=BB60_124 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB60_128
# %bb.126:                              # %lor.lhs.false757
                                        #   in Loop: Header=BB60_124 Depth=3
	cmpl	$0, mb_adaptive
	je	.LBB60_129
# %bb.127:                              # %land.lhs.true759
                                        #   in Loop: Header=BB60_124 Depth=3
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB60_129
.LBB60_128:                             # %if.then762
                                        #   in Loop: Header=BB60_124 Depth=3
	movslq	-60(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-60(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_130
.LBB60_129:                             # %if.else771
                                        #   in Loop: Header=BB60_124 Depth=3
	movslq	-60(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-60(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB60_130:                             # %if.end780
                                        #   in Loop: Header=BB60_124 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB60_132
# %bb.131:                              # %if.then783
                                        #   in Loop: Header=BB60_124 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -68(%rbp)
	jmp	.LBB60_133
.LBB60_132:                             # %if.else793
                                        #   in Loop: Header=BB60_124 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-64(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -68(%rbp)
.LBB60_133:                             # %if.end818
                                        #   in Loop: Header=BB60_124 Depth=3
	cmpl	$0, -68(%rbp)
	je	.LBB60_135
# %bb.134:                              # %if.then821
                                        #   in Loop: Header=BB60_124 Depth=3
	movl	$15, -116(%rbp)
	movl	-68(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-144(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	movq	-240(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	movl	$-1, -80(%rbp)
.LBB60_135:                             # %if.end836
                                        #   in Loop: Header=BB60_124 Depth=3
	cmpl	$0, -72(%rbp)
	jne	.LBB60_140
# %bb.136:                              # %if.then838
                                        #   in Loop: Header=BB60_124 Depth=3
	movl	-68(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movl	%eax, -68(%rbp)
	cmpl	$4, -64(%rbp)
	jge	.LBB60_138
# %bb.137:                              # %if.then850
                                        #   in Loop: Header=BB60_124 Depth=3
	movl	-68(%rbp), %eax
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-64(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-64(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB60_139
.LBB60_138:                             # %if.else871
                                        #   in Loop: Header=BB60_124 Depth=3
	movl	-68(%rbp), %eax
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-64(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB60_139:                             # %if.end889
                                        #   in Loop: Header=BB60_124 Depth=3
	jmp	.LBB60_140
.LBB60_140:                             # %if.end890
                                        #   in Loop: Header=BB60_124 Depth=3
	jmp	.LBB60_141
.LBB60_141:                             # %for.inc891
                                        #   in Loop: Header=BB60_124 Depth=3
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB60_124
.LBB60_142:                             # %for.end893
                                        #   in Loop: Header=BB60_122 Depth=2
	movq	-144(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB60_143:                             # %for.cond896
                                        #   Parent Loop BB60_120 Depth=1
                                        #     Parent Loop BB60_122 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB60_147 Depth 4
                                        #         Child Loop BB60_151 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB60_145
# %bb.144:                              # %land.rhs899
                                        #   in Loop: Header=BB60_143 Depth=3
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB60_145:                             # %land.end902
                                        #   in Loop: Header=BB60_143 Depth=3
	testb	$1, %al
	jne	.LBB60_146
	jmp	.LBB60_156
.LBB60_146:                             # %for.body904
                                        #   in Loop: Header=BB60_143 Depth=3
	movl	$0, -16(%rbp)
.LBB60_147:                             # %for.cond905
                                        #   Parent Loop BB60_120 Depth=1
                                        #     Parent Loop BB60_122 Depth=2
                                        #       Parent Loop BB60_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB60_150
# %bb.148:                              # %for.body908
                                        #   in Loop: Header=BB60_147 Depth=4
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.149:                              # %for.inc919
                                        #   in Loop: Header=BB60_147 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_147
.LBB60_150:                             # %for.end921
                                        #   in Loop: Header=BB60_143 Depth=3
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB60_151:                             # %for.cond940
                                        #   Parent Loop BB60_120 Depth=1
                                        #     Parent Loop BB60_122 Depth=2
                                        #       Parent Loop BB60_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB60_154
# %bb.152:                              # %for.body943
                                        #   in Loop: Header=BB60_151 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ecx
	movslq	-56(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movslq	-16(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.153:                              # %for.inc971
                                        #   in Loop: Header=BB60_151 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_151
.LBB60_154:                             # %for.end973
                                        #   in Loop: Header=BB60_143 Depth=3
	jmp	.LBB60_155
.LBB60_155:                             # %for.inc974
                                        #   in Loop: Header=BB60_143 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_143
.LBB60_156:                             # %for.end976
                                        #   in Loop: Header=BB60_122 Depth=2
	movl	$0, -16(%rbp)
.LBB60_157:                             # %for.cond977
                                        #   Parent Loop BB60_120 Depth=1
                                        #     Parent Loop BB60_122 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB60_161 Depth 4
                                        #         Child Loop BB60_165 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB60_159
# %bb.158:                              # %land.rhs980
                                        #   in Loop: Header=BB60_157 Depth=3
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB60_159:                             # %land.end983
                                        #   in Loop: Header=BB60_157 Depth=3
	testb	$1, %al
	jne	.LBB60_160
	jmp	.LBB60_170
.LBB60_160:                             # %for.body985
                                        #   in Loop: Header=BB60_157 Depth=3
	movl	$0, -12(%rbp)
.LBB60_161:                             # %for.cond986
                                        #   Parent Loop BB60_120 Depth=1
                                        #     Parent Loop BB60_122 Depth=2
                                        #       Parent Loop BB60_157 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB60_164
# %bb.162:                              # %for.body989
                                        #   in Loop: Header=BB60_161 Depth=4
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.163:                              # %for.inc1000
                                        #   in Loop: Header=BB60_161 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_161
.LBB60_164:                             # %for.end1002
                                        #   in Loop: Header=BB60_157 Depth=3
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB60_165:                             # %for.cond1021
                                        #   Parent Loop BB60_120 Depth=1
                                        #     Parent Loop BB60_122 Depth=2
                                        #       Parent Loop BB60_157 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB60_168
# %bb.166:                              # %for.body1024
                                        #   in Loop: Header=BB60_165 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ecx
	movslq	-52(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.167:                              # %for.inc1052
                                        #   in Loop: Header=BB60_165 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_165
.LBB60_168:                             # %for.end1054
                                        #   in Loop: Header=BB60_157 Depth=3
	jmp	.LBB60_169
.LBB60_169:                             # %for.inc1055
                                        #   in Loop: Header=BB60_157 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_157
.LBB60_170:                             # %for.end1057
                                        #   in Loop: Header=BB60_122 Depth=2
	jmp	.LBB60_171
.LBB60_171:                             # %for.inc1058
                                        #   in Loop: Header=BB60_122 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB60_122
.LBB60_172:                             # %for.end1060
                                        #   in Loop: Header=BB60_120 Depth=1
	jmp	.LBB60_173
.LBB60_173:                             # %for.inc1061
                                        #   in Loop: Header=BB60_120 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB60_120
.LBB60_174:                             # %for.end1063
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB60_184
# %bb.175:                              # %if.then1066
	movl	$0, -12(%rbp)
.LBB60_176:                             # %for.cond1067
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_178 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB60_183
# %bb.177:                              # %for.body1070
                                        #   in Loop: Header=BB60_176 Depth=1
	movl	$0, -16(%rbp)
.LBB60_178:                             # %for.cond1071
                                        #   Parent Loop BB60_176 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB60_181
# %bb.179:                              # %for.body1074
                                        #   in Loop: Header=BB60_178 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.180:                              # %for.inc1091
                                        #   in Loop: Header=BB60_178 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_178
.LBB60_181:                             # %for.end1093
                                        #   in Loop: Header=BB60_176 Depth=1
	jmp	.LBB60_182
.LBB60_182:                             # %for.inc1094
                                        #   in Loop: Header=BB60_176 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_176
.LBB60_183:                             # %for.end1096
	jmp	.LBB60_196
.LBB60_184:                             # %if.else1097
	movl	$0, -12(%rbp)
.LBB60_185:                             # %for.cond1098
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_187 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB60_195
# %bb.186:                              # %for.body1101
                                        #   in Loop: Header=BB60_185 Depth=1
	movl	$0, -16(%rbp)
.LBB60_187:                             # %for.cond1102
                                        #   Parent Loop BB60_185 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB60_193
# %bb.188:                              # %for.body1105
                                        #   in Loop: Header=BB60_187 Depth=2
	cmpl	$0, -72(%rbp)
	je	.LBB60_190
# %bb.189:                              # %if.then1107
                                        #   in Loop: Header=BB60_187 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB60_191
.LBB60_190:                             # %if.else1125
                                        #   in Loop: Header=BB60_187 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB60_191:                             # %if.end1145
                                        #   in Loop: Header=BB60_187 Depth=2
	jmp	.LBB60_192
.LBB60_192:                             # %for.inc1146
                                        #   in Loop: Header=BB60_187 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_187
.LBB60_193:                             # %for.end1148
                                        #   in Loop: Header=BB60_185 Depth=1
	jmp	.LBB60_194
.LBB60_194:                             # %for.inc1149
                                        #   in Loop: Header=BB60_185 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_185
.LBB60_195:                             # %for.end1151
	jmp	.LBB60_196
.LBB60_196:                             # %if.end1152
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB60_218
# %bb.197:                              # %if.then1155
	movl	$0, -12(%rbp)
.LBB60_198:                             # %for.cond1156
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_200 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB60_217
# %bb.199:                              # %for.body1159
                                        #   in Loop: Header=BB60_198 Depth=1
	movl	$0, -16(%rbp)
.LBB60_200:                             # %for.cond1160
                                        #   Parent Loop BB60_198 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB60_215
# %bb.201:                              # %for.body1163
                                        #   in Loop: Header=BB60_200 Depth=2
	cmpl	$0, -72(%rbp)
	je	.LBB60_203
# %bb.202:                              # %if.then1165
                                        #   in Loop: Header=BB60_200 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB60_213
.LBB60_203:                             # %if.else1186
                                        #   in Loop: Header=BB60_200 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	leaq	-2288(%rbp), %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movslq	(%rsi,%rdx,4), %rdx
	movq	img, %rsi
	addq	$4792, %rsi             # imm = 0x12B8
	movslq	-104(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-12(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB60_205
# %bb.204:                              # %cond.true
                                        #   in Loop: Header=BB60_200 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB60_206
.LBB60_205:                             # %cond.false
                                        #   in Loop: Header=BB60_200 Depth=2
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movslq	(%rdx,%rcx,4), %rcx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-104(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB60_206:                             # %cond.end
                                        #   in Loop: Header=BB60_200 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB60_208
# %bb.207:                              # %cond.true1226
                                        #   in Loop: Header=BB60_200 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB60_212
.LBB60_208:                             # %cond.false1229
                                        #   in Loop: Header=BB60_200 Depth=2
	xorl	%eax, %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movslq	(%rdx,%rcx,4), %rcx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-104(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB60_210
# %bb.209:                              # %cond.true1249
                                        #   in Loop: Header=BB60_200 Depth=2
	xorl	%eax, %eax
	jmp	.LBB60_211
.LBB60_210:                             # %cond.false1250
                                        #   in Loop: Header=BB60_200 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movslq	(%rcx,%rax,4), %rax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB60_211:                             # %cond.end1268
                                        #   in Loop: Header=BB60_200 Depth=2
.LBB60_212:                             # %cond.end1270
                                        #   in Loop: Header=BB60_200 Depth=2
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB60_213:                             # %if.end1282
                                        #   in Loop: Header=BB60_200 Depth=2
	jmp	.LBB60_214
.LBB60_214:                             # %for.inc1283
                                        #   in Loop: Header=BB60_200 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_200
.LBB60_215:                             # %for.end1285
                                        #   in Loop: Header=BB60_198 Depth=1
	jmp	.LBB60_216
.LBB60_216:                             # %for.inc1286
                                        #   in Loop: Header=BB60_198 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_198
.LBB60_217:                             # %for.end1288
	jmp	.LBB60_218
.LBB60_218:                             # %if.end1289
	movl	-116(%rbp), %ebx
	cmpl	$1388740253, -132(%rbp) # imm = 0x52C67E9D
	jne	.LBB60_220
.LBB60_219:
	movl	%ebx, %eax
	addq	$2280, %rsp             # imm = 0x8E8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB60_220:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB60_219
.Lfunc_end60:
	.size	dct_luma_16x16.51, .Lfunc_end60-dct_luma_16x16.51
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma4x4.52        # -- Begin function dct_chroma4x4.52
	.p2align	4, 0x90
	.type	dct_chroma4x4.52,@function
dct_chroma4x4.52:                       # @dct_chroma4x4.52
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$782420154, -148(%rbp)  # imm = 0x2EA2C8BA
	movl	%edi, -24(%rbp)
	movl	%esi, -80(%rbp)
	movl	%edx, -100(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %cl
	je	.LBB61_3
# %bb.1:                                # %lor.lhs.false
	movq	-144(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %cl
	je	.LBB61_3
# %bb.2:                                # %lor.rhs
	movq	-144(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%cl
.LBB61_3:                               # %lor.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -88(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-80(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-100(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -160(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-80(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-100(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -168(%rbp)
	movq	img, %rcx
	movl	40(%rcx), %ecx
	movq	img, %rdx
	addl	72668(%rdx), %ecx
	cmpl	$0, %ecx
	jne	.LBB61_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%al
.LBB61_5:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movslq	-24(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	movl	%eax, -76(%rbp)
	cmpl	$0, -76(%rbp)
	jge	.LBB61_7
# %bb.6:                                # %cond.true
	movl	-76(%rbp), %eax
	jmp	.LBB61_8
.LBB61_7:                               # %cond.false
	movl	-76(%rbp), %eax
	subl	$0, %eax
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB61_8:                               # %cond.end
	movl	%eax, -76(%rbp)
	movl	-76(%rbp), %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-76(%rbp), %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -32(%rbp)
	movl	-28(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -104(%rbp)
	cmpl	$0, -36(%rbp)
	jne	.LBB61_18
# %bb.9:                                # %if.then
	movl	$0, -12(%rbp)
.LBB61_10:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_12 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB61_17
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB61_10 Depth=1
	movl	$0, -16(%rbp)
.LBB61_12:                              # %for.cond31
                                        #   Parent Loop BB61_10 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB61_15
# %bb.13:                               # %for.body34
                                        #   in Loop: Header=BB61_12 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-72(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-72(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-72(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB61_12 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB61_12
.LBB61_15:                              # %for.end
                                        #   in Loop: Header=BB61_10 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.16:                               # %for.inc90
                                        #   in Loop: Header=BB61_10 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB61_10
.LBB61_17:                              # %for.end92
	jmp	.LBB61_18
.LBB61_18:                              # %if.end
	cmpl	$0, -36(%rbp)
	jne	.LBB61_28
# %bb.19:                               # %if.then94
	movl	$0, -16(%rbp)
.LBB61_20:                              # %for.cond95
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_22 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB61_27
# %bb.21:                               # %for.body98
                                        #   in Loop: Header=BB61_20 Depth=1
	movl	$0, -12(%rbp)
.LBB61_22:                              # %for.cond99
                                        #   Parent Loop BB61_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB61_25
# %bb.23:                               # %for.body102
                                        #   in Loop: Header=BB61_22 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-68(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-68(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-68(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.24:                               # %for.inc130
                                        #   in Loop: Header=BB61_22 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB61_22
.LBB61_25:                              # %for.end132
                                        #   in Loop: Header=BB61_20 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.26:                               # %for.inc163
                                        #   in Loop: Header=BB61_20 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB61_20
.LBB61_27:                              # %for.end165
	jmp	.LBB61_28
.LBB61_28:                              # %if.end166
	movl	$0, -132(%rbp)
	movl	$-1, -108(%rbp)
	movl	$0, -92(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB61_30
# %bb.29:                               # %if.then168
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movl	%eax, -20(%rbp)
	jmp	.LBB61_34
.LBB61_30:                              # %if.else
	cmpl	$1, -88(%rbp)
	jne	.LBB61_32
# %bb.31:                               # %if.then174
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-24(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-28(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB61_33
.LBB61_32:                              # %if.else193
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-24(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-28(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
.LBB61_33:                              # %if.end213
	jmp	.LBB61_34
.LBB61_34:                              # %if.end214
	movl	-24(%rbp), %eax
	addl	$1, %eax
	shll	$2, %eax
	movl	-80(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -80(%rbp)
	movl	-20(%rbp), %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movl	%eax, %ecx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level_temp, %rdi
	addq	%rax, %rdi
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %esi
	shll	$1, %esi
	movl	-100(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-80(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %esi
	shll	$1, %esi
	movl	-100(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%ecx, (%rdi,%rax,4)
	cmpl	$0, -36(%rbp)
	je	.LBB61_36
# %bb.35:                               # %if.then237
	movl	-20(%rbp), %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB61_46
.LBB61_36:                              # %if.else245
	cmpl	$4, -28(%rbp)
	jge	.LBB61_41
# %bb.37:                               # %if.then248
	cmpl	$1, -88(%rbp)
	jne	.LBB61_39
# %bb.38:                               # %if.then251
	movl	-20(%rbp), %edi
	movslq	-24(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	$3, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	addl	%eax, %edi
	movl	$4, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB61_40
.LBB61_39:                              # %if.else270
	movl	-20(%rbp), %edi
	movslq	-24(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	$3, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	addl	%eax, %edi
	movl	$4, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
.LBB61_40:                              # %if.end290
	jmp	.LBB61_45
.LBB61_41:                              # %if.else291
	cmpl	$1, -88(%rbp)
	jne	.LBB61_43
# %bb.42:                               # %if.then294
	movl	-20(%rbp), %edi
	movslq	-24(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	-28(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB61_44
.LBB61_43:                              # %if.else311
	movl	-20(%rbp), %edi
	movslq	-24(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	-28(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
.LBB61_44:                              # %if.end328
	jmp	.LBB61_45
.LBB61_45:                              # %if.end329
	jmp	.LBB61_46
.LBB61_46:                              # %if.end330
	movl	$1, -96(%rbp)
.LBB61_47:                              # %for.cond331
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -96(%rbp)
	jge	.LBB61_75
# %bb.48:                               # %for.body334
                                        #   in Loop: Header=BB61_47 Depth=1
	movslq	-96(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-96(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	movl	$0, -84(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB61_50
# %bb.49:                               # %if.then345
                                        #   in Loop: Header=BB61_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -20(%rbp)
	jmp	.LBB61_54
.LBB61_50:                              # %if.else352
                                        #   in Loop: Header=BB61_47 Depth=1
	cmpl	$1, -88(%rbp)
	jne	.LBB61_52
# %bb.51:                               # %if.then355
                                        #   in Loop: Header=BB61_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-28(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB61_53
.LBB61_52:                              # %if.else381
                                        #   in Loop: Header=BB61_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-28(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
.LBB61_53:                              # %if.end407
                                        #   in Loop: Header=BB61_47 Depth=1
	jmp	.LBB61_54
.LBB61_54:                              # %if.end408
                                        #   in Loop: Header=BB61_47 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB61_71
# %bb.55:                               # %if.then411
                                        #   in Loop: Header=BB61_47 Depth=1
	cmpl	$0, -16(%rbp)
	jne	.LBB61_57
# %bb.56:                               # %lor.lhs.false413
                                        #   in Loop: Header=BB61_47 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB61_58
.LBB61_57:                              # %if.then415
                                        #   in Loop: Header=BB61_47 Depth=1
	movl	$1, -132(%rbp)
.LBB61_58:                              # %if.end416
                                        #   in Loop: Header=BB61_47 Depth=1
	movl	-20(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-160(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-108(%rbp), %eax
	movq	-168(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	movl	$-1, -108(%rbp)
	movl	-20(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -20(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB61_60
# %bb.59:                               # %if.then435
                                        #   in Loop: Header=BB61_47 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB61_70
.LBB61_60:                              # %if.else436
                                        #   in Loop: Header=BB61_47 Depth=1
	cmpl	$4, -28(%rbp)
	jge	.LBB61_65
# %bb.61:                               # %if.then439
                                        #   in Loop: Header=BB61_47 Depth=1
	cmpl	$1, -88(%rbp)
	jne	.LBB61_63
# %bb.62:                               # %if.then442
                                        #   in Loop: Header=BB61_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB61_64
.LBB61_63:                              # %if.else457
                                        #   in Loop: Header=BB61_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -84(%rbp)
.LBB61_64:                              # %if.end472
                                        #   in Loop: Header=BB61_47 Depth=1
	jmp	.LBB61_69
.LBB61_65:                              # %if.else473
                                        #   in Loop: Header=BB61_47 Depth=1
	cmpl	$1, -88(%rbp)
	jne	.LBB61_67
# %bb.66:                               # %if.then476
                                        #   in Loop: Header=BB61_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-28(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB61_68
.LBB61_67:                              # %if.else488
                                        #   in Loop: Header=BB61_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-28(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -84(%rbp)
.LBB61_68:                              # %if.end500
                                        #   in Loop: Header=BB61_47 Depth=1
	jmp	.LBB61_69
.LBB61_69:                              # %if.end501
                                        #   in Loop: Header=BB61_47 Depth=1
	jmp	.LBB61_70
.LBB61_70:                              # %if.end502
                                        #   in Loop: Header=BB61_47 Depth=1
	jmp	.LBB61_71
.LBB61_71:                              # %if.end503
                                        #   in Loop: Header=BB61_47 Depth=1
	cmpl	$0, -36(%rbp)
	jne	.LBB61_73
# %bb.72:                               # %if.then505
                                        #   in Loop: Header=BB61_47 Depth=1
	movl	-84(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB61_73:                              # %if.end511
                                        #   in Loop: Header=BB61_47 Depth=1
	jmp	.LBB61_74
.LBB61_74:                              # %for.inc512
                                        #   in Loop: Header=BB61_47 Depth=1
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB61_47
.LBB61_75:                              # %for.end514
	movq	-160(%rbp), %rax
	movslq	-92(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	cmpl	$0, -36(%rbp)
	jne	.LBB61_89
# %bb.76:                               # %if.then518
	movl	$0, -12(%rbp)
.LBB61_77:                              # %for.cond519
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_79 Depth 2
                                        #     Child Loop BB61_83 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB61_88
# %bb.78:                               # %for.body522
                                        #   in Loop: Header=BB61_77 Depth=1
	movl	$0, -16(%rbp)
.LBB61_79:                              # %for.cond523
                                        #   Parent Loop BB61_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB61_82
# %bb.80:                               # %for.body526
                                        #   in Loop: Header=BB61_79 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.81:                               # %for.inc534
                                        #   in Loop: Header=BB61_79 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB61_79
.LBB61_82:                              # %for.end536
                                        #   in Loop: Header=BB61_77 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -16(%rbp)
.LBB61_83:                              # %for.cond555
                                        #   Parent Loop BB61_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB61_86
# %bb.84:                               # %for.body558
                                        #   in Loop: Header=BB61_83 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -72(%rbp)
	movslq	-16(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-72(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.85:                               # %for.inc580
                                        #   in Loop: Header=BB61_83 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB61_83
.LBB61_86:                              # %for.end582
                                        #   in Loop: Header=BB61_77 Depth=1
	jmp	.LBB61_87
.LBB61_87:                              # %for.inc583
                                        #   in Loop: Header=BB61_77 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB61_77
.LBB61_88:                              # %for.end585
	jmp	.LBB61_89
.LBB61_89:                              # %if.end586
	cmpl	$0, -36(%rbp)
	jne	.LBB61_103
# %bb.90:                               # %if.then588
	movl	$0, -16(%rbp)
.LBB61_91:                              # %for.cond589
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_93 Depth 2
                                        #     Child Loop BB61_97 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB61_102
# %bb.92:                               # %for.body592
                                        #   in Loop: Header=BB61_91 Depth=1
	movl	$0, -12(%rbp)
.LBB61_93:                              # %for.cond593
                                        #   Parent Loop BB61_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB61_96
# %bb.94:                               # %for.body596
                                        #   in Loop: Header=BB61_93 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.95:                               # %for.inc604
                                        #   in Loop: Header=BB61_93 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB61_93
.LBB61_96:                              # %for.end606
                                        #   in Loop: Header=BB61_91 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -12(%rbp)
.LBB61_97:                              # %for.cond625
                                        #   Parent Loop BB61_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB61_100
# %bb.98:                               # %for.body628
                                        #   in Loop: Header=BB61_97 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movslq	-12(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.99:                               # %for.inc654
                                        #   in Loop: Header=BB61_97 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB61_97
.LBB61_100:                             # %for.end656
                                        #   in Loop: Header=BB61_91 Depth=1
	jmp	.LBB61_101
.LBB61_101:                             # %for.inc657
                                        #   in Loop: Header=BB61_91 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB61_91
.LBB61_102:                             # %for.end659
	jmp	.LBB61_103
.LBB61_103:                             # %if.end660
	movl	-132(%rbp), %ebx
	cmpl	$782420154, -148(%rbp)  # imm = 0x2EA2C8BA
	jne	.LBB61_105
.LBB61_104:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB61_105:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB61_104
.Lfunc_end61:
	.size	dct_chroma4x4.52, .Lfunc_end61-dct_chroma4x4.52
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma.53           # -- Begin function dct_chroma.53
	.p2align	4, 0x90
	.type	dct_chroma.53,@function
dct_chroma.53:                          # @dct_chroma.53
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$424, %rsp              # imm = 0x1A8
	.cfi_offset %rbx, -24
	movl	$1883335215, -380(%rbp) # imm = 0x70416A2F
	movl	%edi, -20(%rbp)
	movl	%esi, -132(%rbp)
	movl	$0, -204(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -192(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -224(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -376(%rbp)
	movq	-192(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB62_3
# %bb.1:                                # %lor.lhs.false
	movq	-192(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB62_3
# %bb.2:                                # %lor.rhs
	movq	-192(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB62_3:                               # %lor.end
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -124(%rbp)
	movl	-20(%rbp), %esi
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	imull	%eax, %esi
	movl	%esi, -200(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern, %rax
	movq	%rax, -432(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+8, %rax
	movq	%rax, -424(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+16, %rax
	movq	%rax, -416(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+24, %rax
	movq	%rax, -408(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	movl	%eax, -140(%rbp)
	movl	$0, -104(%rbp)
	movl	$0, -136(%rbp)
	movl	$0, -212(%rbp)
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	cmpl	$0, %eax
	jne	.LBB62_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%cl
.LBB62_5:                               # %land.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -108(%rbp)
	movq	-192(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	img, %rdx
	movslq	-20(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	movl	%ecx, -128(%rbp)
	movl	-128(%rbp), %ecx
	movq	img, %rdx
	subl	72672(%rdx), %eax
	cmpl	%eax, %ecx
	jge	.LBB62_7
# %bb.6:                                # %cond.true
	xorl	%eax, %eax
	movq	img, %rcx
	subl	72672(%rcx), %eax
	jmp	.LBB62_11
.LBB62_7:                               # %cond.false
	cmpl	$51, -128(%rbp)
	jle	.LBB62_9
# %bb.8:                                # %cond.true24
	movl	$51, %eax
	jmp	.LBB62_10
.LBB62_9:                               # %cond.false25
	movl	-128(%rbp), %eax
.LBB62_10:                              # %cond.end
.LBB62_11:                              # %cond.end26
	movl	%eax, -128(%rbp)
	cmpl	$0, -128(%rbp)
	jge	.LBB62_13
# %bb.12:                               # %cond.true29
	movl	-128(%rbp), %eax
	jmp	.LBB62_14
.LBB62_13:                              # %cond.false30
	movl	-128(%rbp), %eax
	subl	$0, %eax
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB62_14:                              # %cond.end34
	movl	%eax, -128(%rbp)
	movl	-128(%rbp), %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movl	-128(%rbp), %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -76(%rbp)
	movl	-40(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -180(%rbp)
	movq	img, %rax
	cmpl	$2, 72700(%rax)
	jne	.LBB62_16
# %bb.15:                               # %if.then
	movl	-128(%rbp), %eax
	addl	$3, %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -104(%rbp)
	movl	-128(%rbp), %eax
	addl	$3, %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -136(%rbp)
	movl	-104(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -212(%rbp)
.LBB62_16:                              # %if.end
	movl	$0, -24(%rbp)
.LBB62_17:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_19 Depth 2
                                        #       Child Loop BB62_21 Depth 3
                                        #         Child Loop BB62_25 Depth 4
                                        #       Child Loop BB62_31 Depth 3
                                        #         Child Loop BB62_35 Depth 4
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB62_44
# %bb.18:                               # %for.body
                                        #   in Loop: Header=BB62_17 Depth=1
	movl	$0, -28(%rbp)
.LBB62_19:                              # %for.cond56
                                        #   Parent Loop BB62_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB62_21 Depth 3
                                        #         Child Loop BB62_25 Depth 4
                                        #       Child Loop BB62_31 Depth 3
                                        #         Child Loop BB62_35 Depth 4
	movl	-28(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB62_42
# %bb.20:                               # %for.body59
                                        #   in Loop: Header=BB62_19 Depth=2
	movl	$0, -12(%rbp)
.LBB62_21:                              # %for.cond60
                                        #   Parent Loop BB62_17 Depth=1
                                        #     Parent Loop BB62_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB62_25 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB62_23
# %bb.22:                               # %land.rhs63
                                        #   in Loop: Header=BB62_21 Depth=3
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB62_23:                              # %land.end64
                                        #   in Loop: Header=BB62_21 Depth=3
	testb	$1, %al
	jne	.LBB62_24
	jmp	.LBB62_30
.LBB62_24:                              # %for.body66
                                        #   in Loop: Header=BB62_21 Depth=3
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -148(%rbp)
	movl	$0, -16(%rbp)
.LBB62_25:                              # %for.cond68
                                        #   Parent Loop BB62_17 Depth=1
                                        #     Parent Loop BB62_19 Depth=2
                                        #       Parent Loop BB62_21 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB62_28
# %bb.26:                               # %for.body71
                                        #   in Loop: Header=BB62_25 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-148(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-120(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-148(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-120(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-120(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.27:                               # %for.inc
                                        #   in Loop: Header=BB62_25 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB62_25
.LBB62_28:                              # %for.end
                                        #   in Loop: Header=BB62_21 Depth=3
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-28(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.29:                               # %for.inc139
                                        #   in Loop: Header=BB62_21 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB62_21
.LBB62_30:                              # %for.end141
                                        #   in Loop: Header=BB62_19 Depth=2
	movl	$0, -16(%rbp)
.LBB62_31:                              # %for.cond142
                                        #   Parent Loop BB62_17 Depth=1
                                        #     Parent Loop BB62_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB62_35 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB62_33
# %bb.32:                               # %land.rhs145
                                        #   in Loop: Header=BB62_31 Depth=3
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB62_33:                              # %land.end148
                                        #   in Loop: Header=BB62_31 Depth=3
	testb	$1, %al
	jne	.LBB62_34
	jmp	.LBB62_40
.LBB62_34:                              # %for.body150
                                        #   in Loop: Header=BB62_31 Depth=3
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	$0, -12(%rbp)
.LBB62_35:                              # %for.cond152
                                        #   Parent Loop BB62_17 Depth=1
                                        #     Parent Loop BB62_19 Depth=2
                                        #       Parent Loop BB62_31 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB62_38
# %bb.36:                               # %for.body155
                                        #   in Loop: Header=BB62_35 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-68(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.37:                               # %for.inc187
                                        #   in Loop: Header=BB62_35 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB62_35
.LBB62_38:                              # %for.end189
                                        #   in Loop: Header=BB62_31 Depth=3
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.39:                               # %for.inc228
                                        #   in Loop: Header=BB62_31 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB62_31
.LBB62_40:                              # %for.end230
                                        #   in Loop: Header=BB62_19 Depth=2
	jmp	.LBB62_41
.LBB62_41:                              # %for.inc231
                                        #   in Loop: Header=BB62_19 Depth=2
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB62_19
.LBB62_42:                              # %for.end233
                                        #   in Loop: Header=BB62_17 Depth=1
	jmp	.LBB62_43
.LBB62_43:                              # %for.inc234
                                        #   in Loop: Header=BB62_17 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB62_17
.LBB62_44:                              # %for.end236
	cmpl	$1, -140(%rbp)
	jne	.LBB62_76
# %bb.45:                               # %if.then239
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -176(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -172(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -168(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -164(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -36(%rbp)
.LBB62_46:                              # %for.cond304
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -36(%rbp)
	jge	.LBB62_62
# %bb.47:                               # %for.body307
                                        #   in Loop: Header=BB62_46 Depth=1
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -144(%rbp)
	cmpl	$1, -124(%rbp)
	jne	.LBB62_49
# %bb.48:                               # %if.then311
                                        #   in Loop: Header=BB62_46 Depth=1
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB62_50
.LBB62_49:                              # %if.else
                                        #   in Loop: Header=BB62_46 Depth=1
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB62_50:                              # %if.end349
                                        #   in Loop: Header=BB62_46 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB62_55
# %bb.51:                               # %land.lhs.true
                                        #   in Loop: Header=BB62_46 Depth=1
	movq	img, %rax
	cmpl	$4, 40(%rax)
	jge	.LBB62_55
# %bb.52:                               # %if.then355
                                        #   in Loop: Header=BB62_46 Depth=1
	cmpl	$2063, -44(%rbp)        # imm = 0x80F
	jle	.LBB62_54
# %bb.53:                               # %if.then358
                                        #   in Loop: Header=BB62_46 Depth=1
	movl	$2063, -44(%rbp)        # imm = 0x80F
.LBB62_54:                              # %if.end359
                                        #   in Loop: Header=BB62_46 Depth=1
	jmp	.LBB62_55
.LBB62_55:                              # %if.end360
                                        #   in Loop: Header=BB62_46 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB62_60
# %bb.56:                               # %if.then363
                                        #   in Loop: Header=BB62_46 Depth=1
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
                                        # kill: def $cl killed $ecx
	movl	$983040, %eax           # imm = 0xF0000
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-132(%rbp), %eax
	jle	.LBB62_58
# %bb.57:                               # %cond.true369
                                        #   in Loop: Header=BB62_46 Depth=1
	movl	$1, %eax
	jmp	.LBB62_59
.LBB62_58:                              # %cond.false370
                                        #   in Loop: Header=BB62_46 Depth=1
	movl	-132(%rbp), %eax
.LBB62_59:                              # %cond.end371
                                        #   in Loop: Header=BB62_46 Depth=1
	movl	%eax, -132(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	$-1, -100(%rbp)
	movl	-44(%rbp), %edi
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %esi
	callq	sign
	movl	%eax, -144(%rbp)
.LBB62_60:                              # %if.end384
                                        #   in Loop: Header=BB62_46 Depth=1
	movl	-144(%rbp), %eax
	movslq	-36(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.61:                               # %for.inc387
                                        #   in Loop: Header=BB62_46 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB62_46
.LBB62_62:                              # %for.end389
	movq	-224(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -16(%rbp)
.LBB62_63:                              # %for.cond424
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB62_75
# %bb.64:                               # %for.body427
                                        #   in Loop: Header=BB62_63 Depth=1
	cmpl	$5, -40(%rbp)
	jge	.LBB62_69
# %bb.65:                               # %if.then430
                                        #   in Loop: Header=BB62_63 Depth=1
	cmpl	$1, -124(%rbp)
	jne	.LBB62_67
# %bb.66:                               # %if.then433
                                        #   in Loop: Header=BB62_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	$5, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	jmp	.LBB62_68
.LBB62_67:                              # %if.else447
                                        #   in Loop: Header=BB62_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	$5, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
.LBB62_68:                              # %if.end461
                                        #   in Loop: Header=BB62_63 Depth=1
	jmp	.LBB62_73
.LBB62_69:                              # %if.else462
                                        #   in Loop: Header=BB62_63 Depth=1
	cmpl	$1, -124(%rbp)
	jne	.LBB62_71
# %bb.70:                               # %if.then465
                                        #   in Loop: Header=BB62_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-40(%rbp), %ecx
	subl	$5, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	jmp	.LBB62_72
.LBB62_71:                              # %if.else479
                                        #   in Loop: Header=BB62_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-40(%rbp), %ecx
	subl	$5, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
.LBB62_72:                              # %if.end493
                                        #   in Loop: Header=BB62_63 Depth=1
	jmp	.LBB62_73
.LBB62_73:                              # %if.end494
                                        #   in Loop: Header=BB62_63 Depth=1
	jmp	.LBB62_74
.LBB62_74:                              # %for.inc495
                                        #   in Loop: Header=BB62_63 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB62_63
.LBB62_75:                              # %for.end497
	movl	-176(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	movl	-172(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13368(%rcx)
	movl	-168(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13128(%rcx)
	movl	-164(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13384(%rcx)
	jmp	.LBB62_213
.LBB62_76:                              # %if.else514
	cmpl	$2, -140(%rbp)
	jne	.LBB62_127
# %bb.77:                               # %if.then517
	movl	$0, -12(%rbp)
.LBB62_78:                              # %for.cond518
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_80 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB62_85
# %bb.79:                               # %for.body522
                                        #   in Loop: Header=BB62_78 Depth=1
	movl	$0, -16(%rbp)
.LBB62_80:                              # %for.cond523
                                        #   Parent Loop BB62_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB62_83
# %bb.81:                               # %for.body527
                                        #   in Loop: Header=BB62_80 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$4, %rcx
	leaq	-368(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.82:                               # %for.inc539
                                        #   in Loop: Header=BB62_80 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB62_80
.LBB62_83:                              # %for.end541
                                        #   in Loop: Header=BB62_78 Depth=1
	jmp	.LBB62_84
.LBB62_84:                              # %for.inc542
                                        #   in Loop: Header=BB62_78 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB62_78
.LBB62_85:                              # %for.end544
	movl	-368(%rbp), %eax
	addl	-352(%rbp), %eax
	movl	%eax, -304(%rbp)
	movl	-364(%rbp), %eax
	addl	-348(%rbp), %eax
	movl	%eax, -300(%rbp)
	movl	-360(%rbp), %eax
	addl	-344(%rbp), %eax
	movl	%eax, -296(%rbp)
	movl	-356(%rbp), %eax
	addl	-340(%rbp), %eax
	movl	%eax, -292(%rbp)
	movl	-368(%rbp), %eax
	subl	-352(%rbp), %eax
	movl	%eax, -288(%rbp)
	movl	-364(%rbp), %eax
	subl	-348(%rbp), %eax
	movl	%eax, -284(%rbp)
	movl	-360(%rbp), %eax
	subl	-344(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-356(%rbp), %eax
	subl	-340(%rbp), %eax
	movl	%eax, -276(%rbp)
	movl	$0, -16(%rbp)
.LBB62_86:                              # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_88 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB62_93
# %bb.87:                               # %for.body604
                                        #   in Loop: Header=BB62_86 Depth=1
	movl	$0, -12(%rbp)
.LBB62_88:                              # %for.cond605
                                        #   Parent Loop BB62_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB62_91
# %bb.89:                               # %for.body608
                                        #   in Loop: Header=BB62_88 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-32(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-32(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.90:                               # %for.inc632
                                        #   in Loop: Header=BB62_88 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB62_88
.LBB62_91:                              # %for.end634
                                        #   in Loop: Header=BB62_86 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, 8(%rsi)
	movl	-52(%rbp), %eax
	addl	-56(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-52(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movl	%eax, 12(%rdx)
# %bb.92:                               # %for.inc659
                                        #   in Loop: Header=BB62_86 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB62_86
.LBB62_93:                              # %for.end661
	movl	$-1, -100(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -36(%rbp)
.LBB62_94:                              # %for.cond662
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -36(%rbp)
	jge	.LBB62_105
# %bb.95:                               # %for.body665
                                        #   in Loop: Header=BB62_94 Depth=1
	movslq	-36(%rbp), %rax
	movzbl	SCAN_YUV422(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SCAN_YUV422+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	cmpl	$1, -124(%rbp)
	jne	.LBB62_97
# %bb.96:                               # %if.then677
                                        #   in Loop: Header=BB62_94 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-104(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-212(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB62_98
.LBB62_97:                              # %if.else700
                                        #   in Loop: Header=BB62_94 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-104(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-212(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB62_98:                              # %if.end723
                                        #   in Loop: Header=BB62_94 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB62_103
# %bb.99:                               # %if.then726
                                        #   in Loop: Header=BB62_94 Depth=1
	movl	-20(%rbp), %ecx
	shll	$3, %ecx
                                        # kill: def $cl killed $ecx
	movl	$16711680, %eax         # imm = 0xFF0000
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-132(%rbp), %eax
	jle	.LBB62_101
# %bb.100:                              # %cond.true734
                                        #   in Loop: Header=BB62_94 Depth=1
	movl	$1, %eax
	jmp	.LBB62_102
.LBB62_101:                             # %cond.false735
                                        #   in Loop: Header=BB62_94 Depth=1
	movl	-132(%rbp), %eax
.LBB62_102:                             # %cond.end736
                                        #   in Loop: Header=BB62_94 Depth=1
	movl	%eax, -132(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	$-1, -100(%rbp)
.LBB62_103:                             # %if.end748
                                        #   in Loop: Header=BB62_94 Depth=1
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-368(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.104:                              # %for.inc758
                                        #   in Loop: Header=BB62_94 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB62_94
.LBB62_105:                             # %for.end760
	movq	-224(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-368(%rbp), %eax
	addl	-352(%rbp), %eax
	movl	%eax, -304(%rbp)
	movl	-364(%rbp), %eax
	addl	-348(%rbp), %eax
	movl	%eax, -300(%rbp)
	movl	-360(%rbp), %eax
	addl	-344(%rbp), %eax
	movl	%eax, -296(%rbp)
	movl	-356(%rbp), %eax
	addl	-340(%rbp), %eax
	movl	%eax, -292(%rbp)
	movl	-368(%rbp), %eax
	subl	-352(%rbp), %eax
	movl	%eax, -288(%rbp)
	movl	-364(%rbp), %eax
	subl	-348(%rbp), %eax
	movl	%eax, -284(%rbp)
	movl	-360(%rbp), %eax
	subl	-344(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-356(%rbp), %eax
	subl	-340(%rbp), %eax
	movl	%eax, -276(%rbp)
	movl	$0, -16(%rbp)
.LBB62_106:                             # %for.cond819
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_108 Depth 2
                                        #     Child Loop BB62_112 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB62_126
# %bb.107:                              # %for.body822
                                        #   in Loop: Header=BB62_106 Depth=1
	movl	$0, -12(%rbp)
.LBB62_108:                             # %for.cond823
                                        #   Parent Loop BB62_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB62_111
# %bb.109:                              # %for.body826
                                        #   in Loop: Header=BB62_108 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.110:                              # %for.inc833
                                        #   in Loop: Header=BB62_108 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB62_108
.LBB62_111:                             # %for.end835
                                        #   in Loop: Header=BB62_106 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB62_112:                             # %for.cond852
                                        #   Parent Loop BB62_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB62_124
# %bb.113:                              # %for.body855
                                        #   in Loop: Header=BB62_112 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	cmpl	$4, -104(%rbp)
	jge	.LBB62_118
# %bb.114:                              # %if.then859
                                        #   in Loop: Header=BB62_112 Depth=2
	cmpl	$1, -124(%rbp)
	jne	.LBB62_116
# %bb.115:                              # %if.then862
                                        #   in Loop: Header=BB62_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-136(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-104(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-104(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
	jmp	.LBB62_117
.LBB62_116:                             # %if.else915
                                        #   in Loop: Header=BB62_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-136(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-104(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-104(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
.LBB62_117:                             # %if.end968
                                        #   in Loop: Header=BB62_112 Depth=2
	jmp	.LBB62_122
.LBB62_118:                             # %if.else969
                                        #   in Loop: Header=BB62_112 Depth=2
	cmpl	$1, -124(%rbp)
	jne	.LBB62_120
# %bb.119:                              # %if.then972
                                        #   in Loop: Header=BB62_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-104(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-104(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB62_121
.LBB62_120:                             # %if.else1019
                                        #   in Loop: Header=BB62_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-104(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-104(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB62_121:                             # %if.end1066
                                        #   in Loop: Header=BB62_112 Depth=2
	jmp	.LBB62_122
.LBB62_122:                             # %if.end1067
                                        #   in Loop: Header=BB62_112 Depth=2
	jmp	.LBB62_123
.LBB62_123:                             # %for.inc1068
                                        #   in Loop: Header=BB62_112 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB62_112
.LBB62_124:                             # %for.end1070
                                        #   in Loop: Header=BB62_106 Depth=1
	jmp	.LBB62_125
.LBB62_125:                             # %for.inc1071
                                        #   in Loop: Header=BB62_106 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB62_106
.LBB62_126:                             # %for.end1073
	jmp	.LBB62_212
.LBB62_127:                             # %if.else1074
	cmpl	$3, -140(%rbp)
	jne	.LBB62_211
# %bb.128:                              # %if.then1077
	movl	$0, -12(%rbp)
.LBB62_129:                             # %for.cond1078
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_131 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB62_136
# %bb.130:                              # %for.body1082
                                        #   in Loop: Header=BB62_129 Depth=1
	movl	$0, -16(%rbp)
.LBB62_131:                             # %for.cond1083
                                        #   Parent Loop BB62_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB62_134
# %bb.132:                              # %for.body1087
                                        #   in Loop: Header=BB62_131 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.133:                              # %for.inc1099
                                        #   in Loop: Header=BB62_131 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB62_131
.LBB62_134:                             # %for.end1101
                                        #   in Loop: Header=BB62_129 Depth=1
	jmp	.LBB62_135
.LBB62_135:                             # %for.inc1102
                                        #   in Loop: Header=BB62_129 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB62_129
.LBB62_136:                             # %for.end1104
	movl	$0, -12(%rbp)
.LBB62_137:                             # %for.cond1105
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_141 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB62_139
# %bb.138:                              # %land.rhs1108
                                        #   in Loop: Header=BB62_137 Depth=1
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB62_139:                             # %land.end1111
                                        #   in Loop: Header=BB62_137 Depth=1
	testb	$1, %al
	jne	.LBB62_140
	jmp	.LBB62_146
.LBB62_140:                             # %for.body1113
                                        #   in Loop: Header=BB62_137 Depth=1
	movl	$0, -16(%rbp)
.LBB62_141:                             # %for.cond1114
                                        #   Parent Loop BB62_137 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB62_144
# %bb.142:                              # %for.body1117
                                        #   in Loop: Header=BB62_141 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-120(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-120(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-120(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.143:                              # %for.inc1141
                                        #   in Loop: Header=BB62_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB62_141
.LBB62_144:                             # %for.end1143
                                        #   in Loop: Header=BB62_137 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -304(%rbp,%rcx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
	movl	-52(%rbp), %eax
	addl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -288(%rbp,%rcx,4)
	movl	-52(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -256(%rbp,%rcx,4)
# %bb.145:                              # %for.inc1168
                                        #   in Loop: Header=BB62_137 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB62_137
.LBB62_146:                             # %for.end1170
	movl	$0, -16(%rbp)
.LBB62_147:                             # %for.cond1171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_151 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB62_149
# %bb.148:                              # %land.rhs1174
                                        #   in Loop: Header=BB62_147 Depth=1
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB62_149:                             # %land.end1177
                                        #   in Loop: Header=BB62_147 Depth=1
	testb	$1, %al
	jne	.LBB62_150
	jmp	.LBB62_156
.LBB62_150:                             # %for.body1179
                                        #   in Loop: Header=BB62_147 Depth=1
	movl	$0, -12(%rbp)
.LBB62_151:                             # %for.cond1180
                                        #   Parent Loop BB62_147 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB62_154
# %bb.152:                              # %for.body1183
                                        #   in Loop: Header=BB62_151 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-32(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-32(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.153:                              # %for.inc1207
                                        #   in Loop: Header=BB62_151 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB62_151
.LBB62_154:                             # %for.end1209
                                        #   in Loop: Header=BB62_147 Depth=1
	movl	-64(%rbp), %ecx
	addl	-60(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-304(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-64(%rbp), %ecx
	subl	-60(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-52(%rbp), %ecx
	addl	-56(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-52(%rbp), %ecx
	subl	-56(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.155:                              # %for.inc1238
                                        #   in Loop: Header=BB62_147 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB62_147
.LBB62_156:                             # %for.end1240
	movl	$-1, -100(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -36(%rbp)
.LBB62_157:                             # %for.cond1241
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -36(%rbp)
	jge	.LBB62_173
# %bb.158:                              # %for.body1244
                                        #   in Loop: Header=BB62_157 Depth=1
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB62_160
# %bb.159:                              # %if.then1255
                                        #   in Loop: Header=BB62_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -44(%rbp)
	jmp	.LBB62_164
.LBB62_160:                             # %if.else1261
                                        #   in Loop: Header=BB62_157 Depth=1
	cmpl	$1, -124(%rbp)
	jne	.LBB62_162
# %bb.161:                              # %if.then1264
                                        #   in Loop: Header=BB62_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB62_163
.LBB62_162:                             # %if.else1287
                                        #   in Loop: Header=BB62_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB62_163:                             # %if.end1310
                                        #   in Loop: Header=BB62_157 Depth=1
	jmp	.LBB62_164
.LBB62_164:                             # %if.end1311
                                        #   in Loop: Header=BB62_157 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB62_169
# %bb.165:                              # %if.then1314
                                        #   in Loop: Header=BB62_157 Depth=1
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $rcx
	movl	$4294901760, %eax       # imm = 0xFFFF0000
	shlq	%cl, %rax
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-132(%rbp), %eax
	jle	.LBB62_167
# %bb.166:                              # %cond.true1321
                                        #   in Loop: Header=BB62_157 Depth=1
	movl	$1, %eax
	jmp	.LBB62_168
.LBB62_167:                             # %cond.false1322
                                        #   in Loop: Header=BB62_157 Depth=1
	movl	-132(%rbp), %eax
.LBB62_168:                             # %cond.end1323
                                        #   in Loop: Header=BB62_157 Depth=1
	movl	%eax, -132(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	$-1, -100(%rbp)
.LBB62_169:                             # %if.end1335
                                        #   in Loop: Header=BB62_157 Depth=1
	cmpl	$0, -108(%rbp)
	jne	.LBB62_171
# %bb.170:                              # %if.then1337
                                        #   in Loop: Header=BB62_157 Depth=1
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB62_171:                             # %if.end1347
                                        #   in Loop: Header=BB62_157 Depth=1
	jmp	.LBB62_172
.LBB62_172:                             # %for.inc1348
                                        #   in Loop: Header=BB62_157 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB62_157
.LBB62_173:                             # %for.end1350
	movq	-224(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB62_174:                             # %for.cond1353
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_178 Depth 2
                                        #     Child Loop BB62_182 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB62_176
# %bb.175:                              # %land.rhs1356
                                        #   in Loop: Header=BB62_174 Depth=1
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB62_176:                             # %land.end1359
                                        #   in Loop: Header=BB62_174 Depth=1
	testb	$1, %al
	jne	.LBB62_177
	jmp	.LBB62_187
.LBB62_177:                             # %for.body1361
                                        #   in Loop: Header=BB62_174 Depth=1
	movl	$0, -16(%rbp)
.LBB62_178:                             # %for.cond1362
                                        #   Parent Loop BB62_174 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB62_181
# %bb.179:                              # %for.body1365
                                        #   in Loop: Header=BB62_178 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.180:                              # %for.inc1372
                                        #   in Loop: Header=BB62_178 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB62_178
.LBB62_181:                             # %for.end1374
                                        #   in Loop: Header=BB62_174 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB62_182:                             # %for.cond1391
                                        #   Parent Loop BB62_174 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB62_185
# %bb.183:                              # %for.body1394
                                        #   in Loop: Header=BB62_182 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movslq	-120(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.184:                              # %for.inc1414
                                        #   in Loop: Header=BB62_182 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB62_182
.LBB62_185:                             # %for.end1416
                                        #   in Loop: Header=BB62_174 Depth=1
	jmp	.LBB62_186
.LBB62_186:                             # %for.inc1417
                                        #   in Loop: Header=BB62_174 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB62_174
.LBB62_187:                             # %for.end1419
	movl	$0, -16(%rbp)
.LBB62_188:                             # %for.cond1420
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_192 Depth 2
                                        #     Child Loop BB62_196 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB62_190
# %bb.189:                              # %land.rhs1423
                                        #   in Loop: Header=BB62_188 Depth=1
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB62_190:                             # %land.end1426
                                        #   in Loop: Header=BB62_188 Depth=1
	testb	$1, %al
	jne	.LBB62_191
	jmp	.LBB62_210
.LBB62_191:                             # %for.body1428
                                        #   in Loop: Header=BB62_188 Depth=1
	movl	$0, -12(%rbp)
.LBB62_192:                             # %for.cond1429
                                        #   Parent Loop BB62_188 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB62_195
# %bb.193:                              # %for.body1432
                                        #   in Loop: Header=BB62_192 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.194:                              # %for.inc1439
                                        #   in Loop: Header=BB62_192 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB62_192
.LBB62_195:                             # %for.end1441
                                        #   in Loop: Header=BB62_188 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB62_196:                             # %for.cond1458
                                        #   Parent Loop BB62_188 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB62_208
# %bb.197:                              # %for.body1461
                                        #   in Loop: Header=BB62_196 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	cmpl	$4, -40(%rbp)
	jge	.LBB62_202
# %bb.198:                              # %if.then1465
                                        #   in Loop: Header=BB62_196 Depth=2
	cmpl	$1, -124(%rbp)
	jne	.LBB62_200
# %bb.199:                              # %if.then1468
                                        #   in Loop: Header=BB62_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-76(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-40(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-40(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
	jmp	.LBB62_201
.LBB62_200:                             # %if.else1521
                                        #   in Loop: Header=BB62_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-76(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-40(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-40(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
.LBB62_201:                             # %if.end1574
                                        #   in Loop: Header=BB62_196 Depth=2
	jmp	.LBB62_206
.LBB62_202:                             # %if.else1575
                                        #   in Loop: Header=BB62_196 Depth=2
	cmpl	$1, -124(%rbp)
	jne	.LBB62_204
# %bb.203:                              # %if.then1578
                                        #   in Loop: Header=BB62_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB62_205
.LBB62_204:                             # %if.else1625
                                        #   in Loop: Header=BB62_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB62_205:                             # %if.end1672
                                        #   in Loop: Header=BB62_196 Depth=2
	jmp	.LBB62_206
.LBB62_206:                             # %if.end1673
                                        #   in Loop: Header=BB62_196 Depth=2
	jmp	.LBB62_207
.LBB62_207:                             # %for.inc1674
                                        #   in Loop: Header=BB62_196 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB62_196
.LBB62_208:                             # %for.end1676
                                        #   in Loop: Header=BB62_188 Depth=1
	jmp	.LBB62_209
.LBB62_209:                             # %for.inc1677
                                        #   in Loop: Header=BB62_188 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB62_188
.LBB62_210:                             # %for.end1679
	jmp	.LBB62_211
.LBB62_211:                             # %if.end1680
	jmp	.LBB62_212
.LBB62_212:                             # %if.end1681
	jmp	.LBB62_213
.LBB62_213:                             # %if.end1682
	movl	$0, -196(%rbp)
	movl	$0, -208(%rbp)
	movl	$0, -112(%rbp)
.LBB62_214:                             # %for.cond1683
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_216 Depth 2
                                        #       Child Loop BB62_218 Depth 3
	movl	-112(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB62_256
# %bb.215:                              # %for.body1688
                                        #   in Loop: Header=BB62_214 Depth=1
	movl	$0, -116(%rbp)
.LBB62_216:                             # %for.cond1689
                                        #   Parent Loop BB62_214 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB62_218 Depth 3
	cmpl	$4, -116(%rbp)
	jge	.LBB62_254
# %bb.217:                              # %for.body1692
                                        #   in Loop: Header=BB62_216 Depth=2
	movslq	-140(%rbp), %rax
	shlq	$4, %rax
	movabsq	$hor_offset, %rcx
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -28(%rbp)
	movslq	-140(%rbp), %rax
	shlq	$4, %rax
	movabsq	$ver_offset, %rcx
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$4, %ecx
	addl	-200(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -232(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$4, %ecx
	addl	-200(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -392(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -72(%rbp)
	movl	$1, -36(%rbp)
.LBB62_218:                             # %for.cond1722
                                        #   Parent Loop BB62_214 Depth=1
                                        #     Parent Loop BB62_216 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -36(%rbp)
	jge	.LBB62_252
# %bb.219:                              # %for.body1725
                                        #   in Loop: Header=BB62_218 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB62_222
# %bb.220:                              # %lor.lhs.false1727
                                        #   in Loop: Header=BB62_218 Depth=3
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB62_223
# %bb.221:                              # %land.lhs.true1729
                                        #   in Loop: Header=BB62_218 Depth=3
	movq	-192(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB62_223
.LBB62_222:                             # %if.then1731
                                        #   in Loop: Header=BB62_218 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB62_224
.LBB62_223:                             # %if.else1740
                                        #   in Loop: Header=BB62_218 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB62_224:                             # %if.end1749
                                        #   in Loop: Header=BB62_218 Depth=3
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -144(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB62_226
# %bb.225:                              # %if.then1752
                                        #   in Loop: Header=BB62_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -44(%rbp)
	jmp	.LBB62_230
.LBB62_226:                             # %if.else1761
                                        #   in Loop: Header=BB62_218 Depth=3
	cmpl	$1, -124(%rbp)
	jne	.LBB62_228
# %bb.227:                              # %if.then1764
                                        #   in Loop: Header=BB62_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-180(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB62_229
.LBB62_228:                             # %if.else1792
                                        #   in Loop: Header=BB62_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-180(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB62_229:                             # %if.end1820
                                        #   in Loop: Header=BB62_218 Depth=3
	jmp	.LBB62_230
.LBB62_230:                             # %if.end1821
                                        #   in Loop: Header=BB62_218 Depth=3
	cmpl	$0, -44(%rbp)
	je	.LBB62_248
# %bb.231:                              # %if.then1824
                                        #   in Loop: Header=BB62_218 Depth=3
	movl	-112(%rbp), %eax
	addl	-200(%rbp), %eax
	cltq
	shlq	$2, %rax
	movabsq	$cbp_blk_chroma, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $rcx
	movl	$1, %eax
	shlq	%cl, %rax
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	cmpl	$1, -44(%rbp)
	jg	.LBB62_233
# %bb.232:                              # %lor.lhs.false1837
                                        #   in Loop: Header=BB62_218 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB62_234
.LBB62_233:                             # %if.then1839
                                        #   in Loop: Header=BB62_218 Depth=3
	movl	-196(%rbp), %eax
	addl	$999999, %eax           # imm = 0xF423F
	movl	%eax, -196(%rbp)
	jmp	.LBB62_235
.LBB62_234:                             # %if.else1841
                                        #   in Loop: Header=BB62_218 Depth=3
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-100(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	-196(%rbp), %eax
	movl	%eax, -196(%rbp)
.LBB62_235:                             # %if.end1848
                                        #   in Loop: Header=BB62_218 Depth=3
	movl	$2, -208(%rbp)
	movl	-44(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-232(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-392(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	$-1, -100(%rbp)
	movl	-44(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -44(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB62_237
# %bb.236:                              # %if.then1871
                                        #   in Loop: Header=BB62_218 Depth=3
	movl	-44(%rbp), %eax
	movl	%eax, -144(%rbp)
	jmp	.LBB62_247
.LBB62_237:                             # %if.else1872
                                        #   in Loop: Header=BB62_218 Depth=3
	cmpl	$4, -40(%rbp)
	jge	.LBB62_242
# %bb.238:                              # %if.then1875
                                        #   in Loop: Header=BB62_218 Depth=3
	cmpl	$1, -124(%rbp)
	jne	.LBB62_240
# %bb.239:                              # %if.then1878
                                        #   in Loop: Header=BB62_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -144(%rbp)
	jmp	.LBB62_241
.LBB62_240:                             # %if.else1893
                                        #   in Loop: Header=BB62_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -144(%rbp)
.LBB62_241:                             # %if.end1908
                                        #   in Loop: Header=BB62_218 Depth=3
	jmp	.LBB62_246
.LBB62_242:                             # %if.else1909
                                        #   in Loop: Header=BB62_218 Depth=3
	cmpl	$1, -124(%rbp)
	jne	.LBB62_244
# %bb.243:                              # %if.then1912
                                        #   in Loop: Header=BB62_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -144(%rbp)
	jmp	.LBB62_245
.LBB62_244:                             # %if.else1924
                                        #   in Loop: Header=BB62_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -144(%rbp)
.LBB62_245:                             # %if.end1936
                                        #   in Loop: Header=BB62_218 Depth=3
	jmp	.LBB62_246
.LBB62_246:                             # %if.end1937
                                        #   in Loop: Header=BB62_218 Depth=3
	jmp	.LBB62_247
.LBB62_247:                             # %if.end1938
                                        #   in Loop: Header=BB62_218 Depth=3
	jmp	.LBB62_248
.LBB62_248:                             # %if.end1939
                                        #   in Loop: Header=BB62_218 Depth=3
	cmpl	$0, -108(%rbp)
	jne	.LBB62_250
# %bb.249:                              # %if.then1941
                                        #   in Loop: Header=BB62_218 Depth=3
	movl	-144(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB62_250:                             # %if.end1949
                                        #   in Loop: Header=BB62_218 Depth=3
	jmp	.LBB62_251
.LBB62_251:                             # %for.inc1950
                                        #   in Loop: Header=BB62_218 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB62_218
.LBB62_252:                             # %for.end1952
                                        #   in Loop: Header=BB62_216 Depth=2
	movq	-232(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.253:                              # %for.inc1955
                                        #   in Loop: Header=BB62_216 Depth=2
	movl	-116(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB62_216
.LBB62_254:                             # %for.end1957
                                        #   in Loop: Header=BB62_214 Depth=1
	jmp	.LBB62_255
.LBB62_255:                             # %for.inc1958
                                        #   in Loop: Header=BB62_214 Depth=1
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB62_214
.LBB62_256:                             # %for.end1960
	cmpl	$4, -196(%rbp)
	jge	.LBB62_278
# %bb.257:                              # %land.lhs.true1963
	cmpl	$0, -108(%rbp)
	jne	.LBB62_278
# %bb.258:                              # %if.then1965
	movl	$0, -208(%rbp)
	movl	$0, -112(%rbp)
.LBB62_259:                             # %for.cond1966
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_261 Depth 2
                                        #       Child Loop BB62_265 Depth 3
	movl	-112(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB62_277
# %bb.260:                              # %for.body1971
                                        #   in Loop: Header=BB62_259 Depth=1
	movl	$0, -116(%rbp)
.LBB62_261:                             # %for.cond1972
                                        #   Parent Loop BB62_259 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB62_265 Depth 3
	cmpl	$4, -116(%rbp)
	jge	.LBB62_275
# %bb.262:                              # %for.body1975
                                        #   in Loop: Header=BB62_261 Depth=2
	movslq	-140(%rbp), %rax
	shlq	$4, %rax
	movabsq	$hor_offset, %rcx
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -28(%rbp)
	movslq	-140(%rbp), %rax
	shlq	$4, %rax
	movabsq	$ver_offset, %rcx
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$4, %ecx
	addl	-200(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -232(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$4, %ecx
	addl	-200(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -392(%rbp)
	cmpl	$0, -204(%rbp)
	jne	.LBB62_264
# %bb.263:                              # %if.then2008
                                        #   in Loop: Header=BB62_261 Depth=2
	movslq	-140(%rbp), %rax
	movq	-432(%rbp,%rax,8), %rax
	movl	-20(%rbp), %edx
	movl	-140(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $rcx
	shlq	%cl, %rax
	xorq	$-1, %rax
	movq	-192(%rbp), %rcx
	andq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
.LBB62_264:                             # %if.end2016
                                        #   in Loop: Header=BB62_261 Depth=2
	movq	-232(%rbp), %rax
	movl	$0, (%rax)
	movl	$1, -36(%rbp)
.LBB62_265:                             # %for.cond2018
                                        #   Parent Loop BB62_259 Depth=1
                                        #     Parent Loop BB62_261 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -36(%rbp)
	jge	.LBB62_273
# %bb.266:                              # %for.body2021
                                        #   in Loop: Header=BB62_265 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB62_269
# %bb.267:                              # %lor.lhs.false2024
                                        #   in Loop: Header=BB62_265 Depth=3
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB62_270
# %bb.268:                              # %land.lhs.true2027
                                        #   in Loop: Header=BB62_265 Depth=3
	movq	-192(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB62_270
.LBB62_269:                             # %if.then2030
                                        #   in Loop: Header=BB62_265 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB62_271
.LBB62_270:                             # %if.else2039
                                        #   in Loop: Header=BB62_265 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB62_271:                             # %if.end2048
                                        #   in Loop: Header=BB62_265 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	$0, (%rax,%rcx,4)
	movq	-232(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.272:                              # %for.inc2058
                                        #   in Loop: Header=BB62_265 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB62_265
.LBB62_273:                             # %for.end2060
                                        #   in Loop: Header=BB62_261 Depth=2
	jmp	.LBB62_274
.LBB62_274:                             # %for.inc2061
                                        #   in Loop: Header=BB62_261 Depth=2
	movl	-116(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB62_261
.LBB62_275:                             # %for.end2063
                                        #   in Loop: Header=BB62_259 Depth=1
	jmp	.LBB62_276
.LBB62_276:                             # %for.inc2064
                                        #   in Loop: Header=BB62_259 Depth=1
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB62_259
.LBB62_277:                             # %for.end2066
	jmp	.LBB62_278
.LBB62_278:                             # %if.end2067
	cmpl	$2, -208(%rbp)
	jne	.LBB62_280
# %bb.279:                              # %if.then2070
	movl	$2, -132(%rbp)
.LBB62_280:                             # %if.end2071
	movl	$0, -24(%rbp)
.LBB62_281:                             # %for.cond2072
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_285 Depth 2
                                        #       Child Loop BB62_287 Depth 3
                                        #         Child Loop BB62_289 Depth 4
                                        #         Child Loop BB62_293 Depth 4
                                        #       Child Loop BB62_299 Depth 3
                                        #         Child Loop BB62_303 Depth 4
                                        #         Child Loop BB62_307 Depth 4
	xorl	%eax, %eax
	movl	-24(%rbp), %ecx
	movq	img, %rdx
	cmpl	72712(%rdx), %ecx
	jge	.LBB62_283
# %bb.282:                              # %land.rhs2076
                                        #   in Loop: Header=BB62_281 Depth=1
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB62_283:                             # %land.end2079
                                        #   in Loop: Header=BB62_281 Depth=1
	testb	$1, %al
	jne	.LBB62_284
	jmp	.LBB62_340
.LBB62_284:                             # %for.body2081
                                        #   in Loop: Header=BB62_281 Depth=1
	movl	$0, -28(%rbp)
.LBB62_285:                             # %for.cond2082
                                        #   Parent Loop BB62_281 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB62_287 Depth 3
                                        #         Child Loop BB62_289 Depth 4
                                        #         Child Loop BB62_293 Depth 4
                                        #       Child Loop BB62_299 Depth 3
                                        #         Child Loop BB62_303 Depth 4
                                        #         Child Loop BB62_307 Depth 4
	movl	-28(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB62_338
# %bb.286:                              # %for.body2086
                                        #   in Loop: Header=BB62_285 Depth=2
	movl	$0, -12(%rbp)
.LBB62_287:                             # %for.cond2087
                                        #   Parent Loop BB62_281 Depth=1
                                        #     Parent Loop BB62_285 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB62_289 Depth 4
                                        #         Child Loop BB62_293 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB62_298
# %bb.288:                              # %for.body2090
                                        #   in Loop: Header=BB62_287 Depth=3
	movl	$0, -16(%rbp)
.LBB62_289:                             # %for.cond2091
                                        #   Parent Loop BB62_281 Depth=1
                                        #     Parent Loop BB62_285 Depth=2
                                        #       Parent Loop BB62_287 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB62_292
# %bb.290:                              # %for.body2094
                                        #   in Loop: Header=BB62_289 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.291:                              # %for.inc2104
                                        #   in Loop: Header=BB62_289 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB62_289
.LBB62_292:                             # %for.end2106
                                        #   in Loop: Header=BB62_287 Depth=3
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB62_293:                             # %for.cond2125
                                        #   Parent Loop BB62_281 Depth=1
                                        #     Parent Loop BB62_285 Depth=2
                                        #       Parent Loop BB62_287 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB62_296
# %bb.294:                              # %for.body2128
                                        #   in Loop: Header=BB62_293 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-120(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.295:                              # %for.inc2154
                                        #   in Loop: Header=BB62_293 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB62_293
.LBB62_296:                             # %for.end2156
                                        #   in Loop: Header=BB62_287 Depth=3
	jmp	.LBB62_297
.LBB62_297:                             # %for.inc2157
                                        #   in Loop: Header=BB62_287 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB62_287
.LBB62_298:                             # %for.end2159
                                        #   in Loop: Header=BB62_285 Depth=2
	movl	$0, -16(%rbp)
.LBB62_299:                             # %for.cond2160
                                        #   Parent Loop BB62_281 Depth=1
                                        #     Parent Loop BB62_285 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB62_303 Depth 4
                                        #         Child Loop BB62_307 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB62_301
# %bb.300:                              # %land.rhs2163
                                        #   in Loop: Header=BB62_299 Depth=3
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB62_301:                             # %land.end2166
                                        #   in Loop: Header=BB62_299 Depth=3
	testb	$1, %al
	jne	.LBB62_302
	jmp	.LBB62_336
.LBB62_302:                             # %for.body2168
                                        #   in Loop: Header=BB62_299 Depth=3
	movl	$0, -12(%rbp)
.LBB62_303:                             # %for.cond2169
                                        #   Parent Loop BB62_281 Depth=1
                                        #     Parent Loop BB62_285 Depth=2
                                        #       Parent Loop BB62_299 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB62_306
# %bb.304:                              # %for.body2172
                                        #   in Loop: Header=BB62_303 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.305:                              # %for.inc2182
                                        #   in Loop: Header=BB62_303 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB62_303
.LBB62_306:                             # %for.end2184
                                        #   in Loop: Header=BB62_299 Depth=3
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB62_307:                             # %for.cond2203
                                        #   Parent Loop BB62_281 Depth=1
                                        #     Parent Loop BB62_285 Depth=2
                                        #       Parent Loop BB62_299 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB62_334
# %bb.308:                              # %for.body2206
                                        #   in Loop: Header=BB62_307 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB62_328
# %bb.309:                              # %if.then2209
                                        #   in Loop: Header=BB62_307 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72688(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-68(%rbp), %rsi
	addl	-96(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-28(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-24(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB62_311
# %bb.310:                              # %cond.true2230
                                        #   in Loop: Header=BB62_307 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB62_312
.LBB62_311:                             # %cond.false2231
                                        #   in Loop: Header=BB62_307 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-68(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-28(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB62_312:                             # %cond.end2250
                                        #   in Loop: Header=BB62_307 Depth=4
	cmpq	%rcx, %rax
	jge	.LBB62_314
# %bb.313:                              # %cond.true2254
                                        #   in Loop: Header=BB62_307 Depth=4
	movq	img, %rax
	movslq	72688(%rax), %rax
	jmp	.LBB62_318
.LBB62_314:                             # %cond.false2257
                                        #   in Loop: Header=BB62_307 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-68(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-28(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB62_316
# %bb.315:                              # %cond.true2278
                                        #   in Loop: Header=BB62_307 Depth=4
	xorl	%eax, %eax
	jmp	.LBB62_317
.LBB62_316:                             # %cond.false2279
                                        #   in Loop: Header=BB62_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB62_317:                             # %cond.end2298
                                        #   in Loop: Header=BB62_307 Depth=4
.LBB62_318:                             # %cond.end2300
                                        #   in Loop: Header=BB62_307 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movl	-28(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movslq	72688(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-68(%rbp), %rsi
	subl	-96(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-28(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-24(%rbp), %edi
	addl	-68(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB62_320
# %bb.319:                              # %cond.true2332
                                        #   in Loop: Header=BB62_307 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB62_321
.LBB62_320:                             # %cond.false2333
                                        #   in Loop: Header=BB62_307 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-68(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-28(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-68(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB62_321:                             # %cond.end2352
                                        #   in Loop: Header=BB62_307 Depth=4
	cmpq	%rcx, %rax
	jge	.LBB62_323
# %bb.322:                              # %cond.true2356
                                        #   in Loop: Header=BB62_307 Depth=4
	movq	img, %rax
	movslq	72688(%rax), %rax
	jmp	.LBB62_327
.LBB62_323:                             # %cond.false2359
                                        #   in Loop: Header=BB62_307 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-68(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-28(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-68(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB62_325
# %bb.324:                              # %cond.true2380
                                        #   in Loop: Header=BB62_307 Depth=4
	xorl	%eax, %eax
	jmp	.LBB62_326
.LBB62_325:                             # %cond.false2381
                                        #   in Loop: Header=BB62_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB62_326:                             # %cond.end2400
                                        #   in Loop: Header=BB62_307 Depth=4
.LBB62_327:                             # %cond.end2402
                                        #   in Loop: Header=BB62_307 Depth=4
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB62_332
.LBB62_328:                             # %if.else2412
                                        #   in Loop: Header=BB62_307 Depth=4
	cmpl	$0, -108(%rbp)
	je	.LBB62_330
# %bb.329:                              # %if.then2414
                                        #   in Loop: Header=BB62_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB62_331
.LBB62_330:                             # %if.else2439
                                        #   in Loop: Header=BB62_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB62_331:                             # %if.end2468
                                        #   in Loop: Header=BB62_307 Depth=4
	jmp	.LBB62_332
.LBB62_332:                             # %if.end2469
                                        #   in Loop: Header=BB62_307 Depth=4
	jmp	.LBB62_333
.LBB62_333:                             # %for.inc2470
                                        #   in Loop: Header=BB62_307 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB62_307
.LBB62_334:                             # %for.end2472
                                        #   in Loop: Header=BB62_299 Depth=3
	jmp	.LBB62_335
.LBB62_335:                             # %for.inc2473
                                        #   in Loop: Header=BB62_299 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB62_299
.LBB62_336:                             # %for.end2475
                                        #   in Loop: Header=BB62_285 Depth=2
	jmp	.LBB62_337
.LBB62_337:                             # %for.inc2476
                                        #   in Loop: Header=BB62_285 Depth=2
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB62_285
.LBB62_338:                             # %for.end2478
                                        #   in Loop: Header=BB62_281 Depth=1
	jmp	.LBB62_339
.LBB62_339:                             # %for.inc2479
                                        #   in Loop: Header=BB62_281 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB62_281
.LBB62_340:                             # %for.end2481
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB62_353
# %bb.341:                              # %if.then2484
	movl	$0, -12(%rbp)
.LBB62_342:                             # %for.cond2485
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_344 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB62_352
# %bb.343:                              # %for.body2489
                                        #   in Loop: Header=BB62_342 Depth=1
	movl	$0, -16(%rbp)
.LBB62_344:                             # %for.cond2490
                                        #   Parent Loop BB62_342 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB62_350
# %bb.345:                              # %for.body2494
                                        #   in Loop: Header=BB62_344 Depth=2
	cmpl	$0, -108(%rbp)
	je	.LBB62_347
# %bb.346:                              # %if.then2496
                                        #   in Loop: Header=BB62_344 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB62_348
.LBB62_347:                             # %if.else2518
                                        #   in Loop: Header=BB62_344 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB62_348:                             # %if.end2536
                                        #   in Loop: Header=BB62_344 Depth=2
	jmp	.LBB62_349
.LBB62_349:                             # %for.inc2537
                                        #   in Loop: Header=BB62_344 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB62_344
.LBB62_350:                             # %for.end2539
                                        #   in Loop: Header=BB62_342 Depth=1
	jmp	.LBB62_351
.LBB62_351:                             # %for.inc2540
                                        #   in Loop: Header=BB62_342 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB62_342
.LBB62_352:                             # %for.end2542
	jmp	.LBB62_353
.LBB62_353:                             # %if.end2543
	movl	-132(%rbp), %ebx
	cmpl	$1883335215, -380(%rbp) # imm = 0x70416A2F
	jne	.LBB62_355
.LBB62_354:
	movl	%ebx, %eax
	addq	$424, %rsp              # imm = 0x1A8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB62_355:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB62_354
.Lfunc_end62:
	.size	dct_chroma.53, .Lfunc_end62-dct_chroma.53
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma_DC.54        # -- Begin function dct_chroma_DC.54
	.p2align	4, 0x90
	.type	dct_chroma_DC.54,@function
dct_chroma_DC.54:                       # @dct_chroma_DC.54
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1810832895, -44(%rbp)  # imm = 0x6BEF1DFF
	movl	%edi, -20(%rbp)
	movl	%esi, -24(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$-1, -28(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB63_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB63_9
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB63_1 Depth=1
	movslq	-12(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -32(%rbp)
	movslq	-12(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -36(%rbp)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -40(%rbp)
	cmpl	$0, -40(%rbp)
	je	.LBB63_7
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB63_1 Depth=1
	movl	$1, %eax
	cmpl	-24(%rbp), %eax
	jle	.LBB63_5
# %bb.4:                                # %cond.true
                                        #   in Loop: Header=BB63_1 Depth=1
	movl	$1, %eax
	jmp	.LBB63_6
.LBB63_5:                               # %cond.false
                                        #   in Loop: Header=BB63_1 Depth=1
	movl	-24(%rbp), %eax
.LBB63_6:                               # %cond.end
                                        #   in Loop: Header=BB63_1 Depth=1
	movl	%eax, -24(%rbp)
	movl	-40(%rbp), %edi
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-56(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-28(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	$-1, -28(%rbp)
.LBB63_7:                               # %if.end
                                        #   in Loop: Header=BB63_1 Depth=1
	jmp	.LBB63_8
.LBB63_8:                               # %for.inc
                                        #   in Loop: Header=BB63_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB63_1
.LBB63_9:                               # %for.end
	movq	-56(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-24(%rbp), %ebx
	cmpl	$1810832895, -44(%rbp)  # imm = 0x6BEF1DFF
	jne	.LBB63_11
.LBB63_10:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB63_11:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB63_10
.Lfunc_end63:
	.size	dct_chroma_DC.54, .Lfunc_end63-dct_chroma_DC.54
	.cfi_endproc
                                        # -- End function
	.globl	dct_luma.55             # -- Begin function dct_luma.55
	.p2align	4, 0x90
	.type	dct_luma.55,@function
dct_luma.55:                            # @dct_luma.55
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	xorl	%ebx, %ebx
	movl	$1348289626, -148(%rbp) # imm = 0x505D445A
	movl	%edi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movq	%rdx, -160(%rbp)
	movl	%ecx, -108(%rbp)
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -112(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -116(%rbp)
	movl	-116(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-112(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -124(%rbp)
	movl	-116(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-112(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -168(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -176(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB64_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%bl
.LBB64_2:                               # %land.end
	andb	$1, %bl
	movzbl	%bl, %eax
	movl	%eax, -36(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -96(%rbp)
	movl	-40(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -132(%rbp)
	movl	$0, -12(%rbp)
.LBB64_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_7 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB64_5
# %bb.4:                                # %land.rhs31
                                        #   in Loop: Header=BB64_3 Depth=1
	cmpl	$0, -36(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB64_5:                               # %land.end32
                                        #   in Loop: Header=BB64_3 Depth=1
	testb	$1, %al
	jne	.LBB64_6
	jmp	.LBB64_12
.LBB64_6:                               # %for.body
                                        #   in Loop: Header=BB64_3 Depth=1
	movl	$0, -16(%rbp)
.LBB64_7:                               # %for.cond34
                                        #   Parent Loop BB64_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB64_10
# %bb.8:                                # %for.body36
                                        #   in Loop: Header=BB64_7 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-88(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-88(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-88(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB64_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB64_7
.LBB64_10:                              # %for.end
                                        #   in Loop: Header=BB64_3 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.11:                               # %for.inc93
                                        #   in Loop: Header=BB64_3 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB64_3
.LBB64_12:                              # %for.end95
	movl	$0, -16(%rbp)
.LBB64_13:                              # %for.cond96
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_17 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB64_15
# %bb.14:                               # %land.rhs98
                                        #   in Loop: Header=BB64_13 Depth=1
	cmpl	$0, -36(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB64_15:                              # %land.end101
                                        #   in Loop: Header=BB64_13 Depth=1
	testb	$1, %al
	jne	.LBB64_16
	jmp	.LBB64_22
.LBB64_16:                              # %for.body103
                                        #   in Loop: Header=BB64_13 Depth=1
	movl	$0, -12(%rbp)
.LBB64_17:                              # %for.cond104
                                        #   Parent Loop BB64_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB64_20
# %bb.18:                               # %for.body106
                                        #   in Loop: Header=BB64_17 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-20(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.19:                               # %for.inc134
                                        #   in Loop: Header=BB64_17 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB64_17
.LBB64_20:                              # %for.end136
                                        #   in Loop: Header=BB64_13 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.21:                               # %for.inc167
                                        #   in Loop: Header=BB64_13 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB64_13
.LBB64_22:                              # %for.end169
	movl	$0, -128(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -104(%rbp)
	movl	$0, -84(%rbp)
.LBB64_23:                              # %for.cond170
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -84(%rbp)
	jge	.LBB64_57
# %bb.24:                               # %for.body172
                                        #   in Loop: Header=BB64_23 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB64_27
# %bb.25:                               # %lor.lhs.false
                                        #   in Loop: Header=BB64_23 Depth=1
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB64_28
# %bb.26:                               # %land.lhs.true
                                        #   in Loop: Header=BB64_23 Depth=1
	movq	-144(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB64_28
.LBB64_27:                              # %if.then
                                        #   in Loop: Header=BB64_23 Depth=1
	movslq	-84(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-84(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB64_29
.LBB64_28:                              # %if.else
                                        #   in Loop: Header=BB64_23 Depth=1
	movslq	-84(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-84(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB64_29:                              # %if.end
                                        #   in Loop: Header=BB64_23 Depth=1
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -92(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB64_31
# %bb.30:                               # %if.then193
                                        #   in Loop: Header=BB64_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -32(%rbp)
	jmp	.LBB64_35
.LBB64_31:                              # %if.else199
                                        #   in Loop: Header=BB64_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB64_33
# %bb.32:                               # %if.then202
                                        #   in Loop: Header=BB64_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-132(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB64_34
.LBB64_33:                              # %if.else223
                                        #   in Loop: Header=BB64_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-132(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -32(%rbp)
.LBB64_34:                              # %if.end245
                                        #   in Loop: Header=BB64_23 Depth=1
	jmp	.LBB64_35
.LBB64_35:                              # %if.end246
                                        #   in Loop: Header=BB64_23 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB64_53
# %bb.36:                               # %if.then249
                                        #   in Loop: Header=BB64_23 Depth=1
	movl	$1, -128(%rbp)
	cmpl	$1, -32(%rbp)
	jg	.LBB64_38
# %bb.37:                               # %lor.lhs.false252
                                        #   in Loop: Header=BB64_23 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB64_39
.LBB64_38:                              # %if.then254
                                        #   in Loop: Header=BB64_23 Depth=1
	movq	-160(%rbp), %rax
	movl	(%rax), %ecx
	addl	$999999, %ecx           # imm = 0xF423F
	movl	%ecx, (%rax)
	jmp	.LBB64_40
.LBB64_39:                              # %if.else256
                                        #   in Loop: Header=BB64_23 Depth=1
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-100(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-160(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB64_40:                              # %if.end263
                                        #   in Loop: Header=BB64_23 Depth=1
	movl	-32(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-168(%rbp), %rcx
	movslq	-104(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-176(%rbp), %rcx
	movslq	-104(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-104(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -104(%rbp)
	movl	$-1, -100(%rbp)
	movl	-32(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -32(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB64_42
# %bb.41:                               # %if.then282
                                        #   in Loop: Header=BB64_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB64_52
.LBB64_42:                              # %if.else283
                                        #   in Loop: Header=BB64_23 Depth=1
	cmpl	$4, -40(%rbp)
	jge	.LBB64_47
# %bb.43:                               # %if.then286
                                        #   in Loop: Header=BB64_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB64_45
# %bb.44:                               # %if.then289
                                        #   in Loop: Header=BB64_23 Depth=1
	movl	-32(%rbp), %eax
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB64_46
.LBB64_45:                              # %if.else301
                                        #   in Loop: Header=BB64_23 Depth=1
	movl	-32(%rbp), %eax
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -92(%rbp)
.LBB64_46:                              # %if.end314
                                        #   in Loop: Header=BB64_23 Depth=1
	jmp	.LBB64_51
.LBB64_47:                              # %if.else315
                                        #   in Loop: Header=BB64_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB64_49
# %bb.48:                               # %if.then318
                                        #   in Loop: Header=BB64_23 Depth=1
	movl	-32(%rbp), %eax
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB64_50
.LBB64_49:                              # %if.else328
                                        #   in Loop: Header=BB64_23 Depth=1
	movl	-32(%rbp), %eax
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -92(%rbp)
.LBB64_50:                              # %if.end338
                                        #   in Loop: Header=BB64_23 Depth=1
	jmp	.LBB64_51
.LBB64_51:                              # %if.end339
                                        #   in Loop: Header=BB64_23 Depth=1
	jmp	.LBB64_52
.LBB64_52:                              # %if.end340
                                        #   in Loop: Header=BB64_23 Depth=1
	jmp	.LBB64_53
.LBB64_53:                              # %if.end341
                                        #   in Loop: Header=BB64_23 Depth=1
	cmpl	$0, -36(%rbp)
	jne	.LBB64_55
# %bb.54:                               # %if.then343
                                        #   in Loop: Header=BB64_23 Depth=1
	movl	-92(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB64_55:                              # %if.end349
                                        #   in Loop: Header=BB64_23 Depth=1
	jmp	.LBB64_56
.LBB64_56:                              # %for.inc350
                                        #   in Loop: Header=BB64_23 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB64_23
.LBB64_57:                              # %for.end352
	movq	-168(%rbp), %rax
	movslq	-104(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB64_58:                              # %for.cond355
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_62 Depth 2
                                        #     Child Loop BB64_66 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB64_60
# %bb.59:                               # %land.rhs358
                                        #   in Loop: Header=BB64_58 Depth=1
	cmpl	$0, -36(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB64_60:                              # %land.end361
                                        #   in Loop: Header=BB64_58 Depth=1
	testb	$1, %al
	jne	.LBB64_61
	jmp	.LBB64_71
.LBB64_61:                              # %for.body363
                                        #   in Loop: Header=BB64_58 Depth=1
	movl	$0, -16(%rbp)
.LBB64_62:                              # %for.cond364
                                        #   Parent Loop BB64_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB64_65
# %bb.63:                               # %for.body367
                                        #   in Loop: Header=BB64_62 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.64:                               # %for.inc375
                                        #   in Loop: Header=BB64_62 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB64_62
.LBB64_65:                              # %for.end377
                                        #   in Loop: Header=BB64_58 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -16(%rbp)
.LBB64_66:                              # %for.cond396
                                        #   Parent Loop BB64_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB64_69
# %bb.67:                               # %for.body399
                                        #   in Loop: Header=BB64_66 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -88(%rbp)
	movslq	-16(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-88(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-88(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-88(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.68:                               # %for.inc421
                                        #   in Loop: Header=BB64_66 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB64_66
.LBB64_69:                              # %for.end423
                                        #   in Loop: Header=BB64_58 Depth=1
	jmp	.LBB64_70
.LBB64_70:                              # %for.inc424
                                        #   in Loop: Header=BB64_58 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB64_58
.LBB64_71:                              # %for.end426
	movl	$0, -16(%rbp)
.LBB64_72:                              # %for.cond427
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_76 Depth 2
                                        #     Child Loop BB64_80 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB64_74
# %bb.73:                               # %land.rhs430
                                        #   in Loop: Header=BB64_72 Depth=1
	cmpl	$0, -36(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB64_74:                              # %land.end433
                                        #   in Loop: Header=BB64_72 Depth=1
	testb	$1, %al
	jne	.LBB64_75
	jmp	.LBB64_109
.LBB64_75:                              # %for.body435
                                        #   in Loop: Header=BB64_72 Depth=1
	movl	$0, -12(%rbp)
.LBB64_76:                              # %for.cond436
                                        #   Parent Loop BB64_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB64_79
# %bb.77:                               # %for.body439
                                        #   in Loop: Header=BB64_76 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.78:                               # %for.inc447
                                        #   in Loop: Header=BB64_76 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB64_76
.LBB64_79:                              # %for.end449
                                        #   in Loop: Header=BB64_72 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -12(%rbp)
.LBB64_80:                              # %for.cond468
                                        #   Parent Loop BB64_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB64_107
# %bb.81:                               # %for.body471
                                        #   in Loop: Header=BB64_80 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB64_101
# %bb.82:                               # %if.then474
                                        #   in Loop: Header=BB64_80 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-80(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	addl	-80(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-16(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-12(%rbp), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB64_84
# %bb.83:                               # %cond.true
                                        #   in Loop: Header=BB64_80 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB64_85
.LBB64_84:                              # %cond.false
                                        #   in Loop: Header=BB64_80 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-12(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB64_85:                              # %cond.end
                                        #   in Loop: Header=BB64_80 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB64_87
# %bb.86:                               # %cond.true515
                                        #   in Loop: Header=BB64_80 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB64_91
.LBB64_87:                              # %cond.false518
                                        #   in Loop: Header=BB64_80 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-12(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB64_89
# %bb.88:                               # %cond.true539
                                        #   in Loop: Header=BB64_80 Depth=2
	xorl	%eax, %eax
	jmp	.LBB64_90
.LBB64_89:                              # %cond.false540
                                        #   in Loop: Header=BB64_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB64_90:                              # %cond.end559
                                        #   in Loop: Header=BB64_80 Depth=2
.LBB64_91:                              # %cond.end561
                                        #   in Loop: Header=BB64_80 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-80(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	subl	-80(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-16(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-20(%rbp), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB64_93
# %bb.92:                               # %cond.true591
                                        #   in Loop: Header=BB64_80 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB64_94
.LBB64_93:                              # %cond.false592
                                        #   in Loop: Header=BB64_80 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-20(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB64_94:                              # %cond.end611
                                        #   in Loop: Header=BB64_80 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB64_96
# %bb.95:                               # %cond.true615
                                        #   in Loop: Header=BB64_80 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB64_100
.LBB64_96:                              # %cond.false618
                                        #   in Loop: Header=BB64_80 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-20(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB64_98
# %bb.97:                               # %cond.true639
                                        #   in Loop: Header=BB64_80 Depth=2
	xorl	%eax, %eax
	jmp	.LBB64_99
.LBB64_98:                              # %cond.false640
                                        #   in Loop: Header=BB64_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB64_99:                              # %cond.end659
                                        #   in Loop: Header=BB64_80 Depth=2
.LBB64_100:                             # %cond.end661
                                        #   in Loop: Header=BB64_80 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB64_105
.LBB64_101:                             # %if.else669
                                        #   in Loop: Header=BB64_80 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB64_103
# %bb.102:                              # %if.then671
                                        #   in Loop: Header=BB64_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB64_104
.LBB64_103:                             # %if.else692
                                        #   in Loop: Header=BB64_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB64_104:                             # %if.end717
                                        #   in Loop: Header=BB64_80 Depth=2
	jmp	.LBB64_105
.LBB64_105:                             # %if.end718
                                        #   in Loop: Header=BB64_80 Depth=2
	jmp	.LBB64_106
.LBB64_106:                             # %for.inc719
                                        #   in Loop: Header=BB64_80 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB64_80
.LBB64_107:                             # %for.end721
                                        #   in Loop: Header=BB64_72 Depth=1
	jmp	.LBB64_108
.LBB64_108:                             # %for.inc722
                                        #   in Loop: Header=BB64_72 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB64_72
.LBB64_109:                             # %for.end724
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB64_122
# %bb.110:                              # %if.then727
	movl	$0, -12(%rbp)
.LBB64_111:                             # %for.cond728
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_113 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB64_121
# %bb.112:                              # %for.body731
                                        #   in Loop: Header=BB64_111 Depth=1
	movl	$0, -16(%rbp)
.LBB64_113:                             # %for.cond732
                                        #   Parent Loop BB64_111 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB64_119
# %bb.114:                              # %for.body735
                                        #   in Loop: Header=BB64_113 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB64_116
# %bb.115:                              # %if.then737
                                        #   in Loop: Header=BB64_113 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB64_117
.LBB64_116:                             # %if.else761
                                        #   in Loop: Header=BB64_113 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB64_117:                             # %if.end779
                                        #   in Loop: Header=BB64_113 Depth=2
	jmp	.LBB64_118
.LBB64_118:                             # %for.inc780
                                        #   in Loop: Header=BB64_113 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB64_113
.LBB64_119:                             # %for.end782
                                        #   in Loop: Header=BB64_111 Depth=1
	jmp	.LBB64_120
.LBB64_120:                             # %for.inc783
                                        #   in Loop: Header=BB64_111 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB64_111
.LBB64_121:                             # %for.end785
	jmp	.LBB64_122
.LBB64_122:                             # %if.end786
	movl	-128(%rbp), %ebx
	cmpl	$1348289626, -148(%rbp) # imm = 0x505D445A
	jne	.LBB64_124
.LBB64_123:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB64_124:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB64_123
.Lfunc_end64:
	.size	dct_luma.55, .Lfunc_end64-dct_luma.55
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function dct_chroma_sp.56
.LCPI65_0:
	.quad	4616189618054758400     # double 4
.LCPI65_1:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI65_2:
	.quad	4611686018427387904     # double 2
.LCPI65_3:
	.quad	4613937818241073152     # double 3
	.text
	.globl	dct_chroma_sp.56
	.p2align	4, 0x90
	.type	dct_chroma_sp.56,@function
dct_chroma_sp.56:                       # @dct_chroma_sp.56
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$552, %rsp              # imm = 0x228
	.cfi_offset %rbx, -24
	vmovsd	.LCPI65_2(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI65_3(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$481222044, -268(%rbp)  # imm = 0x1CAEDD9C
	movl	%edi, -124(%rbp)
	movl	%esi, -208(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -200(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-124(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -288(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-124(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -304(%rbp)
	movq	-200(%rbp), %rax
	movl	12(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI65_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI65_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmulsd	%xmm0, %xmm2, %xmm0
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -264(%rbp)
	movq	-200(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB65_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB65_6
.LBB65_2:                               # %cond.false
	movq	-200(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB65_4
# %bb.3:                                # %cond.true18
	movl	$51, %eax
	jmp	.LBB65_5
.LBB65_4:                               # %cond.false19
	movq	-200(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
.LBB65_5:                               # %cond.end
.LBB65_6:                               # %cond.end23
	movl	%eax, -148(%rbp)
	movq	-200(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB65_8
# %bb.7:                                # %cond.true29
	xorl	%eax, %eax
	jmp	.LBB65_12
.LBB65_8:                               # %cond.false30
	movq	-200(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB65_10
# %bb.9:                                # %cond.true36
	movl	$51, %eax
	jmp	.LBB65_11
.LBB65_10:                              # %cond.false37
	movq	-200(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
.LBB65_11:                              # %cond.end41
.LBB65_12:                              # %cond.end43
	movl	%eax, -216(%rbp)
	cmpl	$0, -148(%rbp)
	jge	.LBB65_14
# %bb.13:                               # %cond.true47
	movl	-148(%rbp), %eax
	jmp	.LBB65_15
.LBB65_14:                              # %cond.false48
	movslq	-148(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB65_15:                              # %cond.end52
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -112(%rbp)
	cmpl	$0, -148(%rbp)
	jge	.LBB65_17
# %bb.16:                               # %cond.true58
	movl	-148(%rbp), %eax
	jmp	.LBB65_18
.LBB65_17:                              # %cond.false59
	movslq	-148(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB65_18:                              # %cond.end63
	subl	$0, %eax
	cltd
	movl	$6, %esi
	idivl	%esi
	movl	%edx, -96(%rbp)
	movl	-112(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -204(%rbp)
	movl	-204(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	idivl	%esi
	movl	%eax, -224(%rbp)
	cmpl	$0, -216(%rbp)
	jge	.LBB65_20
# %bb.19:                               # %cond.true70
	movq	-200(%rbp), %rax
	movl	16(%rax), %eax
	jmp	.LBB65_21
.LBB65_20:                              # %cond.false72
	movslq	-216(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB65_21:                              # %cond.end76
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -228(%rbp)
	cmpl	$0, -216(%rbp)
	jge	.LBB65_23
# %bb.22:                               # %cond.true82
	movq	-200(%rbp), %rax
	movl	16(%rax), %eax
	jmp	.LBB65_24
.LBB65_23:                              # %cond.false84
	movslq	-216(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB65_24:                              # %cond.end88
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%edx, -108(%rbp)
	movl	-228(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -120(%rbp)
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -212(%rbp)
	movl	$0, -12(%rbp)
.LBB65_25:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_27 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB65_32
# %bb.26:                               # %for.body
                                        #   in Loop: Header=BB65_25 Depth=1
	movl	$0, -16(%rbp)
.LBB65_27:                              # %for.cond97
                                        #   Parent Loop BB65_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB65_30
# %bb.28:                               # %for.body100
                                        #   in Loop: Header=BB65_27 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.29:                               # %for.inc
                                        #   in Loop: Header=BB65_27 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB65_27
.LBB65_30:                              # %for.end
                                        #   in Loop: Header=BB65_25 Depth=1
	jmp	.LBB65_31
.LBB65_31:                              # %for.inc121
                                        #   in Loop: Header=BB65_25 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB65_25
.LBB65_32:                              # %for.end123
	movl	$0, -20(%rbp)
.LBB65_33:                              # %for.cond124
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_35 Depth 2
                                        #       Child Loop BB65_37 Depth 3
                                        #         Child Loop BB65_39 Depth 4
                                        #       Child Loop BB65_45 Depth 3
                                        #         Child Loop BB65_47 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB65_56
# %bb.34:                               # %for.body127
                                        #   in Loop: Header=BB65_33 Depth=1
	movl	$0, -24(%rbp)
.LBB65_35:                              # %for.cond128
                                        #   Parent Loop BB65_33 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_37 Depth 3
                                        #         Child Loop BB65_39 Depth 4
                                        #       Child Loop BB65_45 Depth 3
                                        #         Child Loop BB65_47 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB65_54
# %bb.36:                               # %for.body131
                                        #   in Loop: Header=BB65_35 Depth=2
	movl	$0, -12(%rbp)
.LBB65_37:                              # %for.cond132
                                        #   Parent Loop BB65_33 Depth=1
                                        #     Parent Loop BB65_35 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB65_39 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB65_44
# %bb.38:                               # %for.body135
                                        #   in Loop: Header=BB65_37 Depth=3
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -16(%rbp)
.LBB65_39:                              # %for.cond137
                                        #   Parent Loop BB65_33 Depth=1
                                        #     Parent Loop BB65_35 Depth=2
                                        #       Parent Loop BB65_37 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB65_42
# %bb.40:                               # %for.body140
                                        #   in Loop: Header=BB65_39 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -92(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-52(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-92(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-52(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-92(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-92(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.41:                               # %for.inc172
                                        #   in Loop: Header=BB65_39 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB65_39
.LBB65_42:                              # %for.end174
                                        #   in Loop: Header=BB65_37 Depth=3
	movl	-80(%rbp), %eax
	addl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	subl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	shll	$1, %eax
	addl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	movl	-72(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.43:                               # %for.inc212
                                        #   in Loop: Header=BB65_37 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB65_37
.LBB65_44:                              # %for.end214
                                        #   in Loop: Header=BB65_35 Depth=2
	movl	$0, -16(%rbp)
.LBB65_45:                              # %for.cond215
                                        #   Parent Loop BB65_33 Depth=1
                                        #     Parent Loop BB65_35 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB65_47 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB65_52
# %bb.46:                               # %for.body218
                                        #   in Loop: Header=BB65_45 Depth=3
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	$0, -12(%rbp)
.LBB65_47:                              # %for.cond220
                                        #   Parent Loop BB65_33 Depth=1
                                        #     Parent Loop BB65_35 Depth=2
                                        #       Parent Loop BB65_45 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB65_50
# %bb.48:                               # %for.body223
                                        #   in Loop: Header=BB65_47 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-48(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-48(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-56(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-48(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-48(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-56(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-56(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.49:                               # %for.inc255
                                        #   in Loop: Header=BB65_47 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB65_47
.LBB65_50:                              # %for.end257
                                        #   in Loop: Header=BB65_45 Depth=3
	movl	-80(%rbp), %eax
	addl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-48(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	subl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-48(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	shll	$1, %eax
	addl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-48(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	movl	-72(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-48(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.51:                               # %for.inc296
                                        #   in Loop: Header=BB65_45 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB65_45
.LBB65_52:                              # %for.end298
                                        #   in Loop: Header=BB65_35 Depth=2
	jmp	.LBB65_53
.LBB65_53:                              # %for.inc299
                                        #   in Loop: Header=BB65_35 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB65_35
.LBB65_54:                              # %for.end301
                                        #   in Loop: Header=BB65_33 Depth=1
	jmp	.LBB65_55
.LBB65_55:                              # %for.inc302
                                        #   in Loop: Header=BB65_33 Depth=1
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB65_33
.LBB65_56:                              # %for.end304
	movl	$0, -20(%rbp)
.LBB65_57:                              # %for.cond305
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_59 Depth 2
                                        #       Child Loop BB65_61 Depth 3
                                        #         Child Loop BB65_63 Depth 4
                                        #       Child Loop BB65_69 Depth 3
                                        #         Child Loop BB65_71 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB65_80
# %bb.58:                               # %for.body308
                                        #   in Loop: Header=BB65_57 Depth=1
	movl	$0, -24(%rbp)
.LBB65_59:                              # %for.cond309
                                        #   Parent Loop BB65_57 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_61 Depth 3
                                        #         Child Loop BB65_63 Depth 4
                                        #       Child Loop BB65_69 Depth 3
                                        #         Child Loop BB65_71 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB65_78
# %bb.60:                               # %for.body312
                                        #   in Loop: Header=BB65_59 Depth=2
	movl	$0, -12(%rbp)
.LBB65_61:                              # %for.cond313
                                        #   Parent Loop BB65_57 Depth=1
                                        #     Parent Loop BB65_59 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB65_63 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB65_68
# %bb.62:                               # %for.body316
                                        #   in Loop: Header=BB65_61 Depth=3
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -16(%rbp)
.LBB65_63:                              # %for.cond318
                                        #   Parent Loop BB65_57 Depth=1
                                        #     Parent Loop BB65_59 Depth=2
                                        #       Parent Loop BB65_61 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB65_66
# %bb.64:                               # %for.body321
                                        #   in Loop: Header=BB65_63 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
	movslq	%eax, %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-52(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movl	-92(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	movl	%ecx, -80(%rbp,%rdx,4)
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-52(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movl	-92(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-52(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-92(%rbp), %rax
	movl	%ecx, -80(%rbp,%rax,4)
# %bb.65:                               # %for.inc349
                                        #   in Loop: Header=BB65_63 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB65_63
.LBB65_66:                              # %for.end351
                                        #   in Loop: Header=BB65_61 Depth=3
	movl	-80(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	leaq	-560(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-80(%rbp), %ecx
	subl	-76(%rbp), %ecx
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	shll	$1, %ecx
	addl	-72(%rbp), %ecx
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-52(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.67:                               # %for.inc385
                                        #   in Loop: Header=BB65_61 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB65_61
.LBB65_68:                              # %for.end387
                                        #   in Loop: Header=BB65_59 Depth=2
	movl	$0, -16(%rbp)
.LBB65_69:                              # %for.cond388
                                        #   Parent Loop BB65_57 Depth=1
                                        #     Parent Loop BB65_59 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB65_71 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB65_76
# %bb.70:                               # %for.body391
                                        #   in Loop: Header=BB65_69 Depth=3
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	$0, -12(%rbp)
.LBB65_71:                              # %for.cond393
                                        #   Parent Loop BB65_57 Depth=1
                                        #     Parent Loop BB65_59 Depth=2
                                        #       Parent Loop BB65_69 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB65_74
# %bb.72:                               # %for.body396
                                        #   in Loop: Header=BB65_71 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-48(%rbp), %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-48(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-20(%rbp), %edx
	addl	-56(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-12(%rbp), %rdx
	movl	%ecx, -80(%rbp,%rdx,4)
	movslq	-48(%rbp), %rcx
	shlq	$5, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-48(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movl	-20(%rbp), %edx
	addl	-56(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-56(%rbp), %rax
	movl	%ecx, -80(%rbp,%rax,4)
# %bb.73:                               # %for.inc424
                                        #   in Loop: Header=BB65_71 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB65_71
.LBB65_74:                              # %for.end426
                                        #   in Loop: Header=BB65_69 Depth=3
	movl	-80(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	-48(%rbp), %rdx
	shlq	$5, %rdx
	leaq	-560(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-20(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-80(%rbp), %ecx
	subl	-76(%rbp), %ecx
	movslq	-48(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-20(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	shll	$1, %ecx
	addl	-72(%rbp), %ecx
	movslq	-48(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-20(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-48(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movl	-20(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.75:                               # %for.inc461
                                        #   in Loop: Header=BB65_69 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB65_69
.LBB65_76:                              # %for.end463
                                        #   in Loop: Header=BB65_59 Depth=2
	jmp	.LBB65_77
.LBB65_77:                              # %for.inc464
                                        #   in Loop: Header=BB65_59 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB65_59
.LBB65_78:                              # %for.end466
                                        #   in Loop: Header=BB65_57 Depth=1
	jmp	.LBB65_79
.LBB65_79:                              # %for.inc467
                                        #   in Loop: Header=BB65_57 Depth=1
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB65_57
.LBB65_80:                              # %for.end469
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -176(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -172(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -168(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -164(%rbp)
	movl	-560(%rbp), %eax
	addl	-432(%rbp), %eax
	addl	-544(%rbp), %eax
	addl	-416(%rbp), %eax
	movl	%eax, -256(%rbp)
	movl	-560(%rbp), %eax
	subl	-432(%rbp), %eax
	addl	-544(%rbp), %eax
	subl	-416(%rbp), %eax
	movl	%eax, -252(%rbp)
	movl	-560(%rbp), %eax
	addl	-432(%rbp), %eax
	subl	-544(%rbp), %eax
	subl	-416(%rbp), %eax
	movl	%eax, -248(%rbp)
	movl	-560(%rbp), %eax
	subl	-432(%rbp), %eax
	subl	-544(%rbp), %eax
	addl	-416(%rbp), %eax
	movl	%eax, -244(%rbp)
	movl	$-1, -60(%rbp)
	movl	$0, -88(%rbp)
	movl	$0, -32(%rbp)
.LBB65_81:                              # %for.cond582
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -32(%rbp)
	jge	.LBB65_120
# %bb.82:                               # %for.body585
                                        #   in Loop: Header=BB65_81 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -84(%rbp)
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-212(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-120(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	movl	-120(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	cltd
	idivl	(%rsi)
	movl	%eax, -40(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-40(%rbp), %edi
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -40(%rbp)
	movl	-40(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-224(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-204(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %eax
	movslq	-32(%rbp), %rcx
	subl	-256(%rbp,%rcx,4), %eax
	movl	%eax, -100(%rbp)
	movl	-100(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-224(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-204(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	je	.LBB65_98
# %bb.83:                               # %land.lhs.true
                                        #   in Loop: Header=BB65_81 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB65_98
# %bb.84:                               # %land.lhs.true640
                                        #   in Loop: Header=BB65_81 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB65_98
# %bb.85:                               # %if.then
                                        #   in Loop: Header=BB65_81 Depth=1
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-28(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	subl	%eax, %ebx
	movslq	-32(%rbp), %rax
	subl	-256(%rbp,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	movl	-28(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-116(%rbp), %rdx
	leaq	-232(%rbp), %rcx
	callq	levrun_linfo_c2x2
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-184(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-116(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-44(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	subl	%eax, %ebx
	movslq	-32(%rbp), %rax
	subl	-256(%rbp,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp)
	movl	-44(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-116(%rbp), %rdx
	leaq	-232(%rbp), %rcx
	callq	levrun_linfo_c2x2
	vmovsd	-192(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-192(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-116(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp)
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-192(%rbp), %xmm0
	jne	.LBB65_90
	jp	.LBB65_90
# %bb.86:                               # %if.then685
                                        #   in Loop: Header=BB65_81 Depth=1
	movl	-28(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB65_88
# %bb.87:                               # %cond.true690
                                        #   in Loop: Header=BB65_81 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB65_89
.LBB65_88:                              # %cond.false691
                                        #   in Loop: Header=BB65_81 Depth=1
	movl	-44(%rbp), %eax
.LBB65_89:                              # %cond.end692
                                        #   in Loop: Header=BB65_81 Depth=1
	movl	%eax, -36(%rbp)
	jmp	.LBB65_94
.LBB65_90:                              # %if.else
                                        #   in Loop: Header=BB65_81 Depth=1
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-192(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB65_92
# %bb.91:                               # %if.then696
                                        #   in Loop: Header=BB65_81 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB65_93
.LBB65_92:                              # %if.else697
                                        #   in Loop: Header=BB65_81 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB65_93:                              # %if.end
                                        #   in Loop: Header=BB65_81 Depth=1
	jmp	.LBB65_94
.LBB65_94:                              # %if.end698
                                        #   in Loop: Header=BB65_81 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB65_96
# %bb.95:                               # %cond.true701
                                        #   in Loop: Header=BB65_81 Depth=1
	movl	-40(%rbp), %eax
	jmp	.LBB65_97
.LBB65_96:                              # %cond.false702
                                        #   in Loop: Header=BB65_81 Depth=1
	movl	-100(%rbp), %eax
.LBB65_97:                              # %cond.end703
                                        #   in Loop: Header=BB65_81 Depth=1
	movl	%eax, -104(%rbp)
	jmp	.LBB65_108
.LBB65_98:                              # %if.else705
                                        #   in Loop: Header=BB65_81 Depth=1
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jne	.LBB65_100
# %bb.99:                               # %if.then708
                                        #   in Loop: Header=BB65_81 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -104(%rbp)
	jmp	.LBB65_107
.LBB65_100:                             # %if.else709
                                        #   in Loop: Header=BB65_81 Depth=1
	cmpl	$0, -28(%rbp)
	jne	.LBB65_102
# %bb.101:                              # %cond.true712
                                        #   in Loop: Header=BB65_81 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB65_103
.LBB65_102:                             # %cond.false713
                                        #   in Loop: Header=BB65_81 Depth=1
	movl	-44(%rbp), %eax
.LBB65_103:                             # %cond.end714
                                        #   in Loop: Header=BB65_81 Depth=1
	movl	%eax, -36(%rbp)
	cmpl	$0, -28(%rbp)
	jne	.LBB65_105
# %bb.104:                              # %cond.true718
                                        #   in Loop: Header=BB65_81 Depth=1
	movl	-40(%rbp), %eax
	jmp	.LBB65_106
.LBB65_105:                             # %cond.false719
                                        #   in Loop: Header=BB65_81 Depth=1
	movl	-100(%rbp), %eax
.LBB65_106:                             # %cond.end720
                                        #   in Loop: Header=BB65_81 Depth=1
	movl	%eax, -104(%rbp)
.LBB65_107:                             # %if.end722
                                        #   in Loop: Header=BB65_81 Depth=1
	jmp	.LBB65_108
.LBB65_108:                             # %if.end723
                                        #   in Loop: Header=BB65_81 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB65_113
# %bb.109:                              # %land.lhs.true726
                                        #   in Loop: Header=BB65_81 Depth=1
	movq	img, %rax
	cmpl	$4, 40(%rax)
	jge	.LBB65_113
# %bb.110:                              # %if.then730
                                        #   in Loop: Header=BB65_81 Depth=1
	cmpl	$2063, -36(%rbp)        # imm = 0x80F
	jle	.LBB65_112
# %bb.111:                              # %if.then733
                                        #   in Loop: Header=BB65_81 Depth=1
	movl	$2063, -36(%rbp)        # imm = 0x80F
.LBB65_112:                             # %if.end734
                                        #   in Loop: Header=BB65_81 Depth=1
	jmp	.LBB65_113
.LBB65_113:                             # %if.end735
                                        #   in Loop: Header=BB65_81 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB65_118
# %bb.114:                              # %if.then738
                                        #   in Loop: Header=BB65_81 Depth=1
	movl	-124(%rbp), %ecx
	shll	$2, %ecx
                                        # kill: def $cl killed $ecx
	movl	$983040, %eax           # imm = 0xF0000
	shll	%cl, %eax
	cltq
	movq	-200(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-208(%rbp), %eax
	jle	.LBB65_116
# %bb.115:                              # %cond.true744
                                        #   in Loop: Header=BB65_81 Depth=1
	movl	$1, %eax
	jmp	.LBB65_117
.LBB65_116:                             # %cond.false745
                                        #   in Loop: Header=BB65_81 Depth=1
	movl	-208(%rbp), %eax
.LBB65_117:                             # %cond.end746
                                        #   in Loop: Header=BB65_81 Depth=1
	movl	%eax, -208(%rbp)
	movl	-36(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movq	-288(%rbp), %rcx
	movslq	-88(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-60(%rbp), %eax
	movq	-304(%rbp), %rcx
	movslq	-88(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	movl	$-1, -60(%rbp)
	movl	-36(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	movl	%eax, -84(%rbp)
.LBB65_118:                             # %if.end763
                                        #   in Loop: Header=BB65_81 Depth=1
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %eax
	addl	-84(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-84(%rbp), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-212(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-120(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-84(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-228(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.119:                              # %for.inc786
                                        #   in Loop: Header=BB65_81 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB65_81
.LBB65_120:                             # %for.end788
	movq	-288(%rbp), %rax
	movslq	-88(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13112(%rdx)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13368(%rdx)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13128(%rdx)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 13384(%rcx)
	movl	$0, -220(%rbp)
	movl	$0, -240(%rbp)
	movl	$0, -20(%rbp)
.LBB65_121:                             # %for.cond835
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_123 Depth 2
                                        #       Child Loop BB65_125 Depth 3
	cmpl	$4, -20(%rbp)
	jg	.LBB65_168
# %bb.122:                              # %for.body838
                                        #   in Loop: Header=BB65_121 Depth=1
	movl	$0, -24(%rbp)
.LBB65_123:                             # %for.cond839
                                        #   Parent Loop BB65_121 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_125 Depth 3
	cmpl	$4, -24(%rbp)
	jg	.LBB65_166
# %bb.124:                              # %for.body842
                                        #   in Loop: Header=BB65_123 Depth=2
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -236(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-124(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-236(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -280(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-124(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-236(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -296(%rbp)
	movl	$-1, -60(%rbp)
	movl	$0, -88(%rbp)
	movl	$1, -32(%rbp)
.LBB65_125:                             # %for.cond860
                                        #   Parent Loop BB65_121 Depth=1
                                        #     Parent Loop BB65_123 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -32(%rbp)
	jge	.LBB65_164
# %bb.126:                              # %for.body863
                                        #   in Loop: Header=BB65_125 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB65_129
# %bb.127:                              # %lor.lhs.false
                                        #   in Loop: Header=BB65_125 Depth=3
	cmpl	$0, mb_adaptive
	je	.LBB65_130
# %bb.128:                              # %land.lhs.true865
                                        #   in Loop: Header=BB65_125 Depth=3
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB65_130
.LBB65_129:                             # %if.then867
                                        #   in Loop: Header=BB65_125 Depth=3
	movslq	-32(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-32(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB65_131
.LBB65_130:                             # %if.else876
                                        #   in Loop: Header=BB65_125 Depth=3
	movslq	-32(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-32(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB65_131:                             # %if.end885
                                        #   in Loop: Header=BB65_125 Depth=3
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -84(%rbp)
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-212(%rbp), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	cltd
	idivl	(%rsi,%rcx,4)
	movl	%eax, -40(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-40(%rbp), %edi
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -40(%rbp)
	movl	-40(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-224(%rbp), %eax
	movl	-204(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	subl	(%rdx,%rcx,4), %eax
	movl	%eax, -100(%rbp)
	movl	-100(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-224(%rbp), %eax
	movl	-204(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	je	.LBB65_147
# %bb.132:                              # %land.lhs.true962
                                        #   in Loop: Header=BB65_125 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB65_147
# %bb.133:                              # %land.lhs.true965
                                        #   in Loop: Header=BB65_125 Depth=3
	cmpl	$0, -44(%rbp)
	je	.LBB65_147
# %bb.134:                              # %if.then968
                                        #   in Loop: Header=BB65_125 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-28(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	movl	-28(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-116(%rbp), %rdx
	leaq	-232(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-184(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-116(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-44(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp)
	movl	-44(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-116(%rbp), %rdx
	leaq	-232(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-192(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-192(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-116(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp)
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-192(%rbp), %xmm0
	jne	.LBB65_139
	jp	.LBB65_139
# %bb.135:                              # %if.then1041
                                        #   in Loop: Header=BB65_125 Depth=3
	movl	-28(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB65_137
# %bb.136:                              # %cond.true1046
                                        #   in Loop: Header=BB65_125 Depth=3
	movl	-28(%rbp), %eax
	jmp	.LBB65_138
.LBB65_137:                             # %cond.false1047
                                        #   in Loop: Header=BB65_125 Depth=3
	movl	-44(%rbp), %eax
.LBB65_138:                             # %cond.end1048
                                        #   in Loop: Header=BB65_125 Depth=3
	movl	%eax, -36(%rbp)
	jmp	.LBB65_143
.LBB65_139:                             # %if.else1050
                                        #   in Loop: Header=BB65_125 Depth=3
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-192(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB65_141
# %bb.140:                              # %if.then1053
                                        #   in Loop: Header=BB65_125 Depth=3
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB65_142
.LBB65_141:                             # %if.else1054
                                        #   in Loop: Header=BB65_125 Depth=3
	movl	-44(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB65_142:                             # %if.end1055
                                        #   in Loop: Header=BB65_125 Depth=3
	jmp	.LBB65_143
.LBB65_143:                             # %if.end1056
                                        #   in Loop: Header=BB65_125 Depth=3
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB65_145
# %bb.144:                              # %cond.true1059
                                        #   in Loop: Header=BB65_125 Depth=3
	movl	-40(%rbp), %eax
	jmp	.LBB65_146
.LBB65_145:                             # %cond.false1060
                                        #   in Loop: Header=BB65_125 Depth=3
	movl	-100(%rbp), %eax
.LBB65_146:                             # %cond.end1061
                                        #   in Loop: Header=BB65_125 Depth=3
	movl	%eax, -104(%rbp)
	jmp	.LBB65_157
.LBB65_147:                             # %if.else1063
                                        #   in Loop: Header=BB65_125 Depth=3
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jne	.LBB65_149
# %bb.148:                              # %if.then1066
                                        #   in Loop: Header=BB65_125 Depth=3
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -104(%rbp)
	jmp	.LBB65_156
.LBB65_149:                             # %if.else1067
                                        #   in Loop: Header=BB65_125 Depth=3
	cmpl	$0, -28(%rbp)
	jne	.LBB65_151
# %bb.150:                              # %cond.true1070
                                        #   in Loop: Header=BB65_125 Depth=3
	movl	-28(%rbp), %eax
	jmp	.LBB65_152
.LBB65_151:                             # %cond.false1071
                                        #   in Loop: Header=BB65_125 Depth=3
	movl	-44(%rbp), %eax
.LBB65_152:                             # %cond.end1072
                                        #   in Loop: Header=BB65_125 Depth=3
	movl	%eax, -36(%rbp)
	cmpl	$0, -28(%rbp)
	jne	.LBB65_154
# %bb.153:                              # %cond.true1076
                                        #   in Loop: Header=BB65_125 Depth=3
	movl	-40(%rbp), %eax
	jmp	.LBB65_155
.LBB65_154:                             # %cond.false1077
                                        #   in Loop: Header=BB65_125 Depth=3
	movl	-100(%rbp), %eax
.LBB65_155:                             # %cond.end1078
                                        #   in Loop: Header=BB65_125 Depth=3
	movl	%eax, -104(%rbp)
.LBB65_156:                             # %if.end1080
                                        #   in Loop: Header=BB65_125 Depth=3
	jmp	.LBB65_157
.LBB65_157:                             # %if.end1081
                                        #   in Loop: Header=BB65_125 Depth=3
	cmpl	$0, -36(%rbp)
	je	.LBB65_162
# %bb.158:                              # %if.then1084
                                        #   in Loop: Header=BB65_125 Depth=3
	movl	-124(%rbp), %ecx
	shll	$2, %ecx
	addl	$16, %ecx
	movl	-20(%rbp), %eax
	sarl	$1, %eax
	movl	-24(%rbp), %edx
	sarl	$2, %edx
	addl	%edx, %eax
	addl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-200(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	cmpl	$1, -36(%rbp)
	jle	.LBB65_160
# %bb.159:                              # %if.then1097
                                        #   in Loop: Header=BB65_125 Depth=3
	movl	-220(%rbp), %eax
	addl	$999999, %eax           # imm = 0xF423F
	movl	%eax, -220(%rbp)
	jmp	.LBB65_161
.LBB65_160:                             # %if.else1099
                                        #   in Loop: Header=BB65_125 Depth=3
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-60(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	-220(%rbp), %eax
	movl	%eax, -220(%rbp)
.LBB65_161:                             # %if.end1106
                                        #   in Loop: Header=BB65_125 Depth=3
	movl	$2, -240(%rbp)
	movl	-36(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movq	-280(%rbp), %rcx
	movslq	-88(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-60(%rbp), %eax
	movq	-296(%rbp), %rcx
	movslq	-88(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	movl	$-1, -60(%rbp)
	movl	-36(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	movl	%eax, -84(%rbp)
.LBB65_162:                             # %if.end1128
                                        #   in Loop: Header=BB65_125 Depth=3
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	addl	-84(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-84(%rbp), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-212(%rbp), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-84(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-228(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.163:                              # %for.inc1162
                                        #   in Loop: Header=BB65_125 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB65_125
.LBB65_164:                             # %for.end1164
                                        #   in Loop: Header=BB65_123 Depth=2
	movq	-280(%rbp), %rax
	movslq	-88(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.165:                              # %for.inc1167
                                        #   in Loop: Header=BB65_123 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB65_123
.LBB65_166:                             # %for.end1169
                                        #   in Loop: Header=BB65_121 Depth=1
	jmp	.LBB65_167
.LBB65_167:                             # %for.inc1170
                                        #   in Loop: Header=BB65_121 Depth=1
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB65_121
.LBB65_168:                             # %for.end1172
	cmpl	$2, -240(%rbp)
	jne	.LBB65_170
# %bb.169:                              # %if.then1175
	movl	$2, -208(%rbp)
.LBB65_170:                             # %if.end1176
	movl	$0, -20(%rbp)
.LBB65_171:                             # %for.cond1177
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_173 Depth 2
                                        #       Child Loop BB65_175 Depth 3
                                        #         Child Loop BB65_177 Depth 4
                                        #         Child Loop BB65_181 Depth 4
                                        #       Child Loop BB65_187 Depth 3
                                        #         Child Loop BB65_189 Depth 4
                                        #         Child Loop BB65_193 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB65_220
# %bb.172:                              # %for.body1180
                                        #   in Loop: Header=BB65_171 Depth=1
	movl	$0, -24(%rbp)
.LBB65_173:                             # %for.cond1181
                                        #   Parent Loop BB65_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_175 Depth 3
                                        #         Child Loop BB65_177 Depth 4
                                        #         Child Loop BB65_181 Depth 4
                                        #       Child Loop BB65_187 Depth 3
                                        #         Child Loop BB65_189 Depth 4
                                        #         Child Loop BB65_193 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB65_218
# %bb.174:                              # %for.body1184
                                        #   in Loop: Header=BB65_173 Depth=2
	movl	$0, -12(%rbp)
.LBB65_175:                             # %for.cond1185
                                        #   Parent Loop BB65_171 Depth=1
                                        #     Parent Loop BB65_173 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB65_177 Depth 4
                                        #         Child Loop BB65_181 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB65_186
# %bb.176:                              # %for.body1188
                                        #   in Loop: Header=BB65_175 Depth=3
	movl	$0, -16(%rbp)
.LBB65_177:                             # %for.cond1189
                                        #   Parent Loop BB65_171 Depth=1
                                        #     Parent Loop BB65_173 Depth=2
                                        #       Parent Loop BB65_175 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB65_180
# %bb.178:                              # %for.body1192
                                        #   in Loop: Header=BB65_177 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.179:                              # %for.inc1202
                                        #   in Loop: Header=BB65_177 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB65_177
.LBB65_180:                             # %for.end1204
                                        #   in Loop: Header=BB65_175 Depth=3
	movl	-80(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-80(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-76(%rbp), %eax
	sarl	$1, %eax
	subl	-68(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-76(%rbp), %eax
	movl	-68(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -132(%rbp)
	movl	$0, -16(%rbp)
.LBB65_181:                             # %for.cond1223
                                        #   Parent Loop BB65_171 Depth=1
                                        #     Parent Loop BB65_173 Depth=2
                                        #       Parent Loop BB65_175 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB65_184
# %bb.182:                              # %for.body1226
                                        #   in Loop: Header=BB65_181 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -92(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-92(%rbp), %rcx
	addl	-144(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-92(%rbp), %rcx
	subl	-144(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-92(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.183:                              # %for.inc1252
                                        #   in Loop: Header=BB65_181 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB65_181
.LBB65_184:                             # %for.end1254
                                        #   in Loop: Header=BB65_175 Depth=3
	jmp	.LBB65_185
.LBB65_185:                             # %for.inc1255
                                        #   in Loop: Header=BB65_175 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB65_175
.LBB65_186:                             # %for.end1257
                                        #   in Loop: Header=BB65_173 Depth=2
	movl	$0, -16(%rbp)
.LBB65_187:                             # %for.cond1258
                                        #   Parent Loop BB65_171 Depth=1
                                        #     Parent Loop BB65_173 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB65_189 Depth 4
                                        #         Child Loop BB65_193 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB65_216
# %bb.188:                              # %for.body1261
                                        #   in Loop: Header=BB65_187 Depth=3
	movl	$0, -12(%rbp)
.LBB65_189:                             # %for.cond1262
                                        #   Parent Loop BB65_171 Depth=1
                                        #     Parent Loop BB65_173 Depth=2
                                        #       Parent Loop BB65_187 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB65_192
# %bb.190:                              # %for.body1265
                                        #   in Loop: Header=BB65_189 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.191:                              # %for.inc1275
                                        #   in Loop: Header=BB65_189 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB65_189
.LBB65_192:                             # %for.end1277
                                        #   in Loop: Header=BB65_187 Depth=3
	movl	-80(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-80(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-76(%rbp), %eax
	sarl	$1, %eax
	subl	-68(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-76(%rbp), %eax
	movl	-68(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -132(%rbp)
	movl	$0, -12(%rbp)
.LBB65_193:                             # %for.cond1296
                                        #   Parent Loop BB65_171 Depth=1
                                        #     Parent Loop BB65_173 Depth=2
                                        #       Parent Loop BB65_187 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB65_214
# %bb.194:                              # %for.body1299
                                        #   in Loop: Header=BB65_193 Depth=4
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	movl	72688(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-144(%rbp,%rdx,4), %edx
	movslq	-56(%rbp), %rsi
	addl	-144(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB65_196
# %bb.195:                              # %cond.true1310
                                        #   in Loop: Header=BB65_193 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB65_197
.LBB65_196:                             # %cond.false1311
                                        #   in Loop: Header=BB65_193 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	addl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB65_197:                             # %cond.end1319
                                        #   in Loop: Header=BB65_193 Depth=4
	cmpl	%ecx, %eax
	jge	.LBB65_199
# %bb.198:                              # %cond.true1323
                                        #   in Loop: Header=BB65_193 Depth=4
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB65_203
.LBB65_199:                             # %cond.false1325
                                        #   in Loop: Header=BB65_193 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	addl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB65_201
# %bb.200:                              # %cond.true1335
                                        #   in Loop: Header=BB65_193 Depth=4
	xorl	%eax, %eax
	jmp	.LBB65_202
.LBB65_201:                             # %cond.false1336
                                        #   in Loop: Header=BB65_193 Depth=4
	movslq	-12(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-56(%rbp), %rcx
	addl	-144(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB65_202:                             # %cond.end1344
                                        #   in Loop: Header=BB65_193 Depth=4
.LBB65_203:                             # %cond.end1346
                                        #   in Loop: Header=BB65_193 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movl	-20(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72688(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-144(%rbp,%rdx,4), %edx
	movslq	-56(%rbp), %rsi
	subl	-144(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB65_205
# %bb.204:                              # %cond.true1365
                                        #   in Loop: Header=BB65_193 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB65_206
.LBB65_205:                             # %cond.false1366
                                        #   in Loop: Header=BB65_193 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	subl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB65_206:                             # %cond.end1374
                                        #   in Loop: Header=BB65_193 Depth=4
	cmpl	%ecx, %eax
	jge	.LBB65_208
# %bb.207:                              # %cond.true1378
                                        #   in Loop: Header=BB65_193 Depth=4
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB65_212
.LBB65_208:                             # %cond.false1380
                                        #   in Loop: Header=BB65_193 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	subl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB65_210
# %bb.209:                              # %cond.true1390
                                        #   in Loop: Header=BB65_193 Depth=4
	xorl	%eax, %eax
	jmp	.LBB65_211
.LBB65_210:                             # %cond.false1391
                                        #   in Loop: Header=BB65_193 Depth=4
	movslq	-12(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-56(%rbp), %rcx
	subl	-144(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB65_211:                             # %cond.end1399
                                        #   in Loop: Header=BB65_193 Depth=4
.LBB65_212:                             # %cond.end1401
                                        #   in Loop: Header=BB65_193 Depth=4
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-56(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.213:                              # %for.inc1410
                                        #   in Loop: Header=BB65_193 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB65_193
.LBB65_214:                             # %for.end1412
                                        #   in Loop: Header=BB65_187 Depth=3
	jmp	.LBB65_215
.LBB65_215:                             # %for.inc1413
                                        #   in Loop: Header=BB65_187 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB65_187
.LBB65_216:                             # %for.end1415
                                        #   in Loop: Header=BB65_173 Depth=2
	jmp	.LBB65_217
.LBB65_217:                             # %for.inc1416
                                        #   in Loop: Header=BB65_173 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB65_173
.LBB65_218:                             # %for.end1418
                                        #   in Loop: Header=BB65_171 Depth=1
	jmp	.LBB65_219
.LBB65_219:                             # %for.inc1419
                                        #   in Loop: Header=BB65_171 Depth=1
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB65_171
.LBB65_220:                             # %for.end1421
	movl	$0, -12(%rbp)
.LBB65_221:                             # %for.cond1422
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_223 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB65_228
# %bb.222:                              # %for.body1425
                                        #   in Loop: Header=BB65_221 Depth=1
	movl	$0, -16(%rbp)
.LBB65_223:                             # %for.cond1426
                                        #   Parent Loop BB65_221 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB65_226
# %bb.224:                              # %for.body1429
                                        #   in Loop: Header=BB65_223 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-124(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.225:                              # %for.inc1444
                                        #   in Loop: Header=BB65_223 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB65_223
.LBB65_226:                             # %for.end1446
                                        #   in Loop: Header=BB65_221 Depth=1
	jmp	.LBB65_227
.LBB65_227:                             # %for.inc1447
                                        #   in Loop: Header=BB65_221 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB65_221
.LBB65_228:                             # %for.end1449
	movl	-208(%rbp), %ebx
	cmpl	$481222044, -268(%rbp)  # imm = 0x1CAEDD9C
	jne	.LBB65_230
.LBB65_229:
	movl	%ebx, %eax
	addq	$552, %rsp              # imm = 0x228
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB65_230:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB65_229
.Lfunc_end65:
	.size	dct_chroma_sp.56, .Lfunc_end65-dct_chroma_sp.56
	.cfi_endproc
                                        # -- End function
	.globl	dct_luma.57             # -- Begin function dct_luma.57
	.p2align	4, 0x90
	.type	dct_luma.57,@function
dct_luma.57:                            # @dct_luma.57
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	xorl	%ebx, %ebx
	movl	$975314361, -148(%rbp)  # imm = 0x3A221DB9
	movl	%edi, -24(%rbp)
	movl	%esi, -32(%rbp)
	movq	%rdx, -168(%rbp)
	movl	%ecx, -108(%rbp)
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -112(%rbp)
	movl	-32(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -128(%rbp)
	movl	-128(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-112(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -124(%rbp)
	movl	-128(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-112(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -132(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-132(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -160(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-132(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -176(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB66_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%bl
.LBB66_2:                               # %land.end
	andb	$1, %bl
	movzbl	%bl, %eax
	movl	%eax, -36(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -92(%rbp)
	movl	-40(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -120(%rbp)
	movl	$0, -12(%rbp)
.LBB66_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_7 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB66_5
# %bb.4:                                # %land.rhs31
                                        #   in Loop: Header=BB66_3 Depth=1
	cmpl	$0, -36(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB66_5:                               # %land.end32
                                        #   in Loop: Header=BB66_3 Depth=1
	testb	$1, %al
	jne	.LBB66_6
	jmp	.LBB66_12
.LBB66_6:                               # %for.body
                                        #   in Loop: Header=BB66_3 Depth=1
	movl	$0, -16(%rbp)
.LBB66_7:                               # %for.cond34
                                        #   Parent Loop BB66_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB66_10
# %bb.8:                                # %for.body36
                                        #   in Loop: Header=BB66_7 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-88(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-88(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-88(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB66_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_7
.LBB66_10:                              # %for.end
                                        #   in Loop: Header=BB66_3 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.11:                               # %for.inc93
                                        #   in Loop: Header=BB66_3 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_3
.LBB66_12:                              # %for.end95
	movl	$0, -16(%rbp)
.LBB66_13:                              # %for.cond96
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_17 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB66_15
# %bb.14:                               # %land.rhs98
                                        #   in Loop: Header=BB66_13 Depth=1
	cmpl	$0, -36(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB66_15:                              # %land.end101
                                        #   in Loop: Header=BB66_13 Depth=1
	testb	$1, %al
	jne	.LBB66_16
	jmp	.LBB66_22
.LBB66_16:                              # %for.body103
                                        #   in Loop: Header=BB66_13 Depth=1
	movl	$0, -12(%rbp)
.LBB66_17:                              # %for.cond104
                                        #   Parent Loop BB66_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB66_20
# %bb.18:                               # %for.body106
                                        #   in Loop: Header=BB66_17 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-20(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.19:                               # %for.inc134
                                        #   in Loop: Header=BB66_17 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_17
.LBB66_20:                              # %for.end136
                                        #   in Loop: Header=BB66_13 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.21:                               # %for.inc167
                                        #   in Loop: Header=BB66_13 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_13
.LBB66_22:                              # %for.end169
	movl	$0, -116(%rbp)
	movl	$-1, -104(%rbp)
	movl	$0, -100(%rbp)
	movl	$0, -84(%rbp)
.LBB66_23:                              # %for.cond170
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -84(%rbp)
	jge	.LBB66_57
# %bb.24:                               # %for.body172
                                        #   in Loop: Header=BB66_23 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB66_27
# %bb.25:                               # %lor.lhs.false
                                        #   in Loop: Header=BB66_23 Depth=1
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB66_28
# %bb.26:                               # %land.lhs.true
                                        #   in Loop: Header=BB66_23 Depth=1
	movq	-144(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB66_28
.LBB66_27:                              # %if.then
                                        #   in Loop: Header=BB66_23 Depth=1
	movslq	-84(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-84(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_29
.LBB66_28:                              # %if.else
                                        #   in Loop: Header=BB66_23 Depth=1
	movslq	-84(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-84(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB66_29:                              # %if.end
                                        #   in Loop: Header=BB66_23 Depth=1
	movl	-104(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -104(%rbp)
	movl	$0, -96(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB66_31
# %bb.30:                               # %if.then193
                                        #   in Loop: Header=BB66_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -28(%rbp)
	jmp	.LBB66_35
.LBB66_31:                              # %if.else199
                                        #   in Loop: Header=BB66_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB66_33
# %bb.32:                               # %if.then202
                                        #   in Loop: Header=BB66_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB66_34
.LBB66_33:                              # %if.else223
                                        #   in Loop: Header=BB66_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
.LBB66_34:                              # %if.end245
                                        #   in Loop: Header=BB66_23 Depth=1
	jmp	.LBB66_35
.LBB66_35:                              # %if.end246
                                        #   in Loop: Header=BB66_23 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB66_53
# %bb.36:                               # %if.then249
                                        #   in Loop: Header=BB66_23 Depth=1
	movl	$1, -116(%rbp)
	cmpl	$1, -28(%rbp)
	jg	.LBB66_38
# %bb.37:                               # %lor.lhs.false252
                                        #   in Loop: Header=BB66_23 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB66_39
.LBB66_38:                              # %if.then254
                                        #   in Loop: Header=BB66_23 Depth=1
	movq	-168(%rbp), %rax
	movl	(%rax), %ecx
	addl	$999999, %ecx           # imm = 0xF423F
	movl	%ecx, (%rax)
	jmp	.LBB66_40
.LBB66_39:                              # %if.else256
                                        #   in Loop: Header=BB66_23 Depth=1
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-104(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-168(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB66_40:                              # %if.end263
                                        #   in Loop: Header=BB66_23 Depth=1
	movl	-28(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-160(%rbp), %rcx
	movslq	-100(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-104(%rbp), %eax
	movq	-176(%rbp), %rcx
	movslq	-100(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$-1, -104(%rbp)
	movl	-28(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -28(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB66_42
# %bb.41:                               # %if.then282
                                        #   in Loop: Header=BB66_23 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB66_52
.LBB66_42:                              # %if.else283
                                        #   in Loop: Header=BB66_23 Depth=1
	cmpl	$4, -40(%rbp)
	jge	.LBB66_47
# %bb.43:                               # %if.then286
                                        #   in Loop: Header=BB66_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB66_45
# %bb.44:                               # %if.then289
                                        #   in Loop: Header=BB66_23 Depth=1
	movl	-28(%rbp), %eax
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB66_46
.LBB66_45:                              # %if.else301
                                        #   in Loop: Header=BB66_23 Depth=1
	movl	-28(%rbp), %eax
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -96(%rbp)
.LBB66_46:                              # %if.end314
                                        #   in Loop: Header=BB66_23 Depth=1
	jmp	.LBB66_51
.LBB66_47:                              # %if.else315
                                        #   in Loop: Header=BB66_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB66_49
# %bb.48:                               # %if.then318
                                        #   in Loop: Header=BB66_23 Depth=1
	movl	-28(%rbp), %eax
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB66_50
.LBB66_49:                              # %if.else328
                                        #   in Loop: Header=BB66_23 Depth=1
	movl	-28(%rbp), %eax
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -96(%rbp)
.LBB66_50:                              # %if.end338
                                        #   in Loop: Header=BB66_23 Depth=1
	jmp	.LBB66_51
.LBB66_51:                              # %if.end339
                                        #   in Loop: Header=BB66_23 Depth=1
	jmp	.LBB66_52
.LBB66_52:                              # %if.end340
                                        #   in Loop: Header=BB66_23 Depth=1
	jmp	.LBB66_53
.LBB66_53:                              # %if.end341
                                        #   in Loop: Header=BB66_23 Depth=1
	cmpl	$0, -36(%rbp)
	jne	.LBB66_55
# %bb.54:                               # %if.then343
                                        #   in Loop: Header=BB66_23 Depth=1
	movl	-96(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB66_55:                              # %if.end349
                                        #   in Loop: Header=BB66_23 Depth=1
	jmp	.LBB66_56
.LBB66_56:                              # %for.inc350
                                        #   in Loop: Header=BB66_23 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB66_23
.LBB66_57:                              # %for.end352
	movq	-160(%rbp), %rax
	movslq	-100(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB66_58:                              # %for.cond355
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_62 Depth 2
                                        #     Child Loop BB66_66 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB66_60
# %bb.59:                               # %land.rhs358
                                        #   in Loop: Header=BB66_58 Depth=1
	cmpl	$0, -36(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB66_60:                              # %land.end361
                                        #   in Loop: Header=BB66_58 Depth=1
	testb	$1, %al
	jne	.LBB66_61
	jmp	.LBB66_71
.LBB66_61:                              # %for.body363
                                        #   in Loop: Header=BB66_58 Depth=1
	movl	$0, -16(%rbp)
.LBB66_62:                              # %for.cond364
                                        #   Parent Loop BB66_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB66_65
# %bb.63:                               # %for.body367
                                        #   in Loop: Header=BB66_62 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.64:                               # %for.inc375
                                        #   in Loop: Header=BB66_62 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_62
.LBB66_65:                              # %for.end377
                                        #   in Loop: Header=BB66_58 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -16(%rbp)
.LBB66_66:                              # %for.cond396
                                        #   Parent Loop BB66_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB66_69
# %bb.67:                               # %for.body399
                                        #   in Loop: Header=BB66_66 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -88(%rbp)
	movslq	-16(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-88(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-88(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-88(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.68:                               # %for.inc421
                                        #   in Loop: Header=BB66_66 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_66
.LBB66_69:                              # %for.end423
                                        #   in Loop: Header=BB66_58 Depth=1
	jmp	.LBB66_70
.LBB66_70:                              # %for.inc424
                                        #   in Loop: Header=BB66_58 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_58
.LBB66_71:                              # %for.end426
	movl	$0, -16(%rbp)
.LBB66_72:                              # %for.cond427
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_76 Depth 2
                                        #     Child Loop BB66_80 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB66_74
# %bb.73:                               # %land.rhs430
                                        #   in Loop: Header=BB66_72 Depth=1
	cmpl	$0, -36(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB66_74:                              # %land.end433
                                        #   in Loop: Header=BB66_72 Depth=1
	testb	$1, %al
	jne	.LBB66_75
	jmp	.LBB66_109
.LBB66_75:                              # %for.body435
                                        #   in Loop: Header=BB66_72 Depth=1
	movl	$0, -12(%rbp)
.LBB66_76:                              # %for.cond436
                                        #   Parent Loop BB66_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB66_79
# %bb.77:                               # %for.body439
                                        #   in Loop: Header=BB66_76 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.78:                               # %for.inc447
                                        #   in Loop: Header=BB66_76 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_76
.LBB66_79:                              # %for.end449
                                        #   in Loop: Header=BB66_72 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -12(%rbp)
.LBB66_80:                              # %for.cond468
                                        #   Parent Loop BB66_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB66_107
# %bb.81:                               # %for.body471
                                        #   in Loop: Header=BB66_80 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB66_101
# %bb.82:                               # %if.then474
                                        #   in Loop: Header=BB66_80 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-80(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	addl	-80(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-16(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-12(%rbp), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB66_84
# %bb.83:                               # %cond.true
                                        #   in Loop: Header=BB66_80 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB66_85
.LBB66_84:                              # %cond.false
                                        #   in Loop: Header=BB66_80 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-12(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB66_85:                              # %cond.end
                                        #   in Loop: Header=BB66_80 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB66_87
# %bb.86:                               # %cond.true515
                                        #   in Loop: Header=BB66_80 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB66_91
.LBB66_87:                              # %cond.false518
                                        #   in Loop: Header=BB66_80 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-12(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB66_89
# %bb.88:                               # %cond.true539
                                        #   in Loop: Header=BB66_80 Depth=2
	xorl	%eax, %eax
	jmp	.LBB66_90
.LBB66_89:                              # %cond.false540
                                        #   in Loop: Header=BB66_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB66_90:                              # %cond.end559
                                        #   in Loop: Header=BB66_80 Depth=2
.LBB66_91:                              # %cond.end561
                                        #   in Loop: Header=BB66_80 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-80(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	subl	-80(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-16(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-20(%rbp), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB66_93
# %bb.92:                               # %cond.true591
                                        #   in Loop: Header=BB66_80 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB66_94
.LBB66_93:                              # %cond.false592
                                        #   in Loop: Header=BB66_80 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-20(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB66_94:                              # %cond.end611
                                        #   in Loop: Header=BB66_80 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB66_96
# %bb.95:                               # %cond.true615
                                        #   in Loop: Header=BB66_80 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB66_100
.LBB66_96:                              # %cond.false618
                                        #   in Loop: Header=BB66_80 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-20(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB66_98
# %bb.97:                               # %cond.true639
                                        #   in Loop: Header=BB66_80 Depth=2
	xorl	%eax, %eax
	jmp	.LBB66_99
.LBB66_98:                              # %cond.false640
                                        #   in Loop: Header=BB66_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB66_99:                              # %cond.end659
                                        #   in Loop: Header=BB66_80 Depth=2
.LBB66_100:                             # %cond.end661
                                        #   in Loop: Header=BB66_80 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB66_105
.LBB66_101:                             # %if.else669
                                        #   in Loop: Header=BB66_80 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB66_103
# %bb.102:                              # %if.then671
                                        #   in Loop: Header=BB66_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB66_104
.LBB66_103:                             # %if.else692
                                        #   in Loop: Header=BB66_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB66_104:                             # %if.end717
                                        #   in Loop: Header=BB66_80 Depth=2
	jmp	.LBB66_105
.LBB66_105:                             # %if.end718
                                        #   in Loop: Header=BB66_80 Depth=2
	jmp	.LBB66_106
.LBB66_106:                             # %for.inc719
                                        #   in Loop: Header=BB66_80 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_80
.LBB66_107:                             # %for.end721
                                        #   in Loop: Header=BB66_72 Depth=1
	jmp	.LBB66_108
.LBB66_108:                             # %for.inc722
                                        #   in Loop: Header=BB66_72 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_72
.LBB66_109:                             # %for.end724
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB66_122
# %bb.110:                              # %if.then727
	movl	$0, -12(%rbp)
.LBB66_111:                             # %for.cond728
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_113 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB66_121
# %bb.112:                              # %for.body731
                                        #   in Loop: Header=BB66_111 Depth=1
	movl	$0, -16(%rbp)
.LBB66_113:                             # %for.cond732
                                        #   Parent Loop BB66_111 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB66_119
# %bb.114:                              # %for.body735
                                        #   in Loop: Header=BB66_113 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB66_116
# %bb.115:                              # %if.then737
                                        #   in Loop: Header=BB66_113 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-32(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB66_117
.LBB66_116:                             # %if.else761
                                        #   in Loop: Header=BB66_113 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-32(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB66_117:                             # %if.end779
                                        #   in Loop: Header=BB66_113 Depth=2
	jmp	.LBB66_118
.LBB66_118:                             # %for.inc780
                                        #   in Loop: Header=BB66_113 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_113
.LBB66_119:                             # %for.end782
                                        #   in Loop: Header=BB66_111 Depth=1
	jmp	.LBB66_120
.LBB66_120:                             # %for.inc783
                                        #   in Loop: Header=BB66_111 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_111
.LBB66_121:                             # %for.end785
	jmp	.LBB66_122
.LBB66_122:                             # %if.end786
	movl	-116(%rbp), %ebx
	cmpl	$975314361, -148(%rbp)  # imm = 0x3A221DB9
	jne	.LBB66_124
.LBB66_123:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB66_124:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB66_123
.Lfunc_end66:
	.size	dct_luma.57, .Lfunc_end66-dct_luma.57
	.cfi_endproc
                                        # -- End function
	.globl	dct_luma.58             # -- Begin function dct_luma.58
	.p2align	4, 0x90
	.type	dct_luma.58,@function
dct_luma.58:                            # @dct_luma.58
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	xorl	%ebx, %ebx
	movl	$1696363523, -148(%rbp) # imm = 0x651C7403
	movl	%edi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movq	%rdx, -160(%rbp)
	movl	%ecx, -108(%rbp)
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -128(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -116(%rbp)
	movl	-116(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-128(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -120(%rbp)
	movl	-116(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-128(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -112(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -168(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -176(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB67_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%bl
.LBB67_2:                               # %land.end
	andb	$1, %bl
	movzbl	%bl, %eax
	movl	%eax, -36(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -96(%rbp)
	movl	-40(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -124(%rbp)
	movl	$0, -12(%rbp)
.LBB67_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_7 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB67_5
# %bb.4:                                # %land.rhs31
                                        #   in Loop: Header=BB67_3 Depth=1
	cmpl	$0, -36(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB67_5:                               # %land.end32
                                        #   in Loop: Header=BB67_3 Depth=1
	testb	$1, %al
	jne	.LBB67_6
	jmp	.LBB67_12
.LBB67_6:                               # %for.body
                                        #   in Loop: Header=BB67_3 Depth=1
	movl	$0, -16(%rbp)
.LBB67_7:                               # %for.cond34
                                        #   Parent Loop BB67_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB67_10
# %bb.8:                                # %for.body36
                                        #   in Loop: Header=BB67_7 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-88(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-88(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-88(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB67_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB67_7
.LBB67_10:                              # %for.end
                                        #   in Loop: Header=BB67_3 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.11:                               # %for.inc93
                                        #   in Loop: Header=BB67_3 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB67_3
.LBB67_12:                              # %for.end95
	movl	$0, -16(%rbp)
.LBB67_13:                              # %for.cond96
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_17 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB67_15
# %bb.14:                               # %land.rhs98
                                        #   in Loop: Header=BB67_13 Depth=1
	cmpl	$0, -36(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB67_15:                              # %land.end101
                                        #   in Loop: Header=BB67_13 Depth=1
	testb	$1, %al
	jne	.LBB67_16
	jmp	.LBB67_22
.LBB67_16:                              # %for.body103
                                        #   in Loop: Header=BB67_13 Depth=1
	movl	$0, -12(%rbp)
.LBB67_17:                              # %for.cond104
                                        #   Parent Loop BB67_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB67_20
# %bb.18:                               # %for.body106
                                        #   in Loop: Header=BB67_17 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-20(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.19:                               # %for.inc134
                                        #   in Loop: Header=BB67_17 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB67_17
.LBB67_20:                              # %for.end136
                                        #   in Loop: Header=BB67_13 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.21:                               # %for.inc167
                                        #   in Loop: Header=BB67_13 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB67_13
.LBB67_22:                              # %for.end169
	movl	$0, -132(%rbp)
	movl	$-1, -104(%rbp)
	movl	$0, -100(%rbp)
	movl	$0, -84(%rbp)
.LBB67_23:                              # %for.cond170
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -84(%rbp)
	jge	.LBB67_57
# %bb.24:                               # %for.body172
                                        #   in Loop: Header=BB67_23 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB67_27
# %bb.25:                               # %lor.lhs.false
                                        #   in Loop: Header=BB67_23 Depth=1
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB67_28
# %bb.26:                               # %land.lhs.true
                                        #   in Loop: Header=BB67_23 Depth=1
	movq	-144(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB67_28
.LBB67_27:                              # %if.then
                                        #   in Loop: Header=BB67_23 Depth=1
	movslq	-84(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-84(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB67_29
.LBB67_28:                              # %if.else
                                        #   in Loop: Header=BB67_23 Depth=1
	movslq	-84(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-84(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB67_29:                              # %if.end
                                        #   in Loop: Header=BB67_23 Depth=1
	movl	-104(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -104(%rbp)
	movl	$0, -92(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB67_31
# %bb.30:                               # %if.then193
                                        #   in Loop: Header=BB67_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -32(%rbp)
	jmp	.LBB67_35
.LBB67_31:                              # %if.else199
                                        #   in Loop: Header=BB67_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB67_33
# %bb.32:                               # %if.then202
                                        #   in Loop: Header=BB67_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB67_34
.LBB67_33:                              # %if.else223
                                        #   in Loop: Header=BB67_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -32(%rbp)
.LBB67_34:                              # %if.end245
                                        #   in Loop: Header=BB67_23 Depth=1
	jmp	.LBB67_35
.LBB67_35:                              # %if.end246
                                        #   in Loop: Header=BB67_23 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB67_53
# %bb.36:                               # %if.then249
                                        #   in Loop: Header=BB67_23 Depth=1
	movl	$1, -132(%rbp)
	cmpl	$1, -32(%rbp)
	jg	.LBB67_38
# %bb.37:                               # %lor.lhs.false252
                                        #   in Loop: Header=BB67_23 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB67_39
.LBB67_38:                              # %if.then254
                                        #   in Loop: Header=BB67_23 Depth=1
	movq	-160(%rbp), %rax
	movl	(%rax), %ecx
	addl	$999999, %ecx           # imm = 0xF423F
	movl	%ecx, (%rax)
	jmp	.LBB67_40
.LBB67_39:                              # %if.else256
                                        #   in Loop: Header=BB67_23 Depth=1
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-104(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-160(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB67_40:                              # %if.end263
                                        #   in Loop: Header=BB67_23 Depth=1
	movl	-32(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-168(%rbp), %rcx
	movslq	-100(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-104(%rbp), %eax
	movq	-176(%rbp), %rcx
	movslq	-100(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$-1, -104(%rbp)
	movl	-32(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -32(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB67_42
# %bb.41:                               # %if.then282
                                        #   in Loop: Header=BB67_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB67_52
.LBB67_42:                              # %if.else283
                                        #   in Loop: Header=BB67_23 Depth=1
	cmpl	$4, -40(%rbp)
	jge	.LBB67_47
# %bb.43:                               # %if.then286
                                        #   in Loop: Header=BB67_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB67_45
# %bb.44:                               # %if.then289
                                        #   in Loop: Header=BB67_23 Depth=1
	movl	-32(%rbp), %eax
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB67_46
.LBB67_45:                              # %if.else301
                                        #   in Loop: Header=BB67_23 Depth=1
	movl	-32(%rbp), %eax
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -92(%rbp)
.LBB67_46:                              # %if.end314
                                        #   in Loop: Header=BB67_23 Depth=1
	jmp	.LBB67_51
.LBB67_47:                              # %if.else315
                                        #   in Loop: Header=BB67_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB67_49
# %bb.48:                               # %if.then318
                                        #   in Loop: Header=BB67_23 Depth=1
	movl	-32(%rbp), %eax
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB67_50
.LBB67_49:                              # %if.else328
                                        #   in Loop: Header=BB67_23 Depth=1
	movl	-32(%rbp), %eax
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -92(%rbp)
.LBB67_50:                              # %if.end338
                                        #   in Loop: Header=BB67_23 Depth=1
	jmp	.LBB67_51
.LBB67_51:                              # %if.end339
                                        #   in Loop: Header=BB67_23 Depth=1
	jmp	.LBB67_52
.LBB67_52:                              # %if.end340
                                        #   in Loop: Header=BB67_23 Depth=1
	jmp	.LBB67_53
.LBB67_53:                              # %if.end341
                                        #   in Loop: Header=BB67_23 Depth=1
	cmpl	$0, -36(%rbp)
	jne	.LBB67_55
# %bb.54:                               # %if.then343
                                        #   in Loop: Header=BB67_23 Depth=1
	movl	-92(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB67_55:                              # %if.end349
                                        #   in Loop: Header=BB67_23 Depth=1
	jmp	.LBB67_56
.LBB67_56:                              # %for.inc350
                                        #   in Loop: Header=BB67_23 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB67_23
.LBB67_57:                              # %for.end352
	movq	-168(%rbp), %rax
	movslq	-100(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB67_58:                              # %for.cond355
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_62 Depth 2
                                        #     Child Loop BB67_66 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB67_60
# %bb.59:                               # %land.rhs358
                                        #   in Loop: Header=BB67_58 Depth=1
	cmpl	$0, -36(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB67_60:                              # %land.end361
                                        #   in Loop: Header=BB67_58 Depth=1
	testb	$1, %al
	jne	.LBB67_61
	jmp	.LBB67_71
.LBB67_61:                              # %for.body363
                                        #   in Loop: Header=BB67_58 Depth=1
	movl	$0, -16(%rbp)
.LBB67_62:                              # %for.cond364
                                        #   Parent Loop BB67_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB67_65
# %bb.63:                               # %for.body367
                                        #   in Loop: Header=BB67_62 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.64:                               # %for.inc375
                                        #   in Loop: Header=BB67_62 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB67_62
.LBB67_65:                              # %for.end377
                                        #   in Loop: Header=BB67_58 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -16(%rbp)
.LBB67_66:                              # %for.cond396
                                        #   Parent Loop BB67_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB67_69
# %bb.67:                               # %for.body399
                                        #   in Loop: Header=BB67_66 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -88(%rbp)
	movslq	-16(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-88(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-88(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-88(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.68:                               # %for.inc421
                                        #   in Loop: Header=BB67_66 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB67_66
.LBB67_69:                              # %for.end423
                                        #   in Loop: Header=BB67_58 Depth=1
	jmp	.LBB67_70
.LBB67_70:                              # %for.inc424
                                        #   in Loop: Header=BB67_58 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB67_58
.LBB67_71:                              # %for.end426
	movl	$0, -16(%rbp)
.LBB67_72:                              # %for.cond427
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_76 Depth 2
                                        #     Child Loop BB67_80 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB67_74
# %bb.73:                               # %land.rhs430
                                        #   in Loop: Header=BB67_72 Depth=1
	cmpl	$0, -36(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB67_74:                              # %land.end433
                                        #   in Loop: Header=BB67_72 Depth=1
	testb	$1, %al
	jne	.LBB67_75
	jmp	.LBB67_109
.LBB67_75:                              # %for.body435
                                        #   in Loop: Header=BB67_72 Depth=1
	movl	$0, -12(%rbp)
.LBB67_76:                              # %for.cond436
                                        #   Parent Loop BB67_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB67_79
# %bb.77:                               # %for.body439
                                        #   in Loop: Header=BB67_76 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.78:                               # %for.inc447
                                        #   in Loop: Header=BB67_76 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB67_76
.LBB67_79:                              # %for.end449
                                        #   in Loop: Header=BB67_72 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -12(%rbp)
.LBB67_80:                              # %for.cond468
                                        #   Parent Loop BB67_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB67_107
# %bb.81:                               # %for.body471
                                        #   in Loop: Header=BB67_80 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB67_101
# %bb.82:                               # %if.then474
                                        #   in Loop: Header=BB67_80 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-80(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	addl	-80(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-16(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-12(%rbp), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB67_84
# %bb.83:                               # %cond.true
                                        #   in Loop: Header=BB67_80 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB67_85
.LBB67_84:                              # %cond.false
                                        #   in Loop: Header=BB67_80 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-12(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB67_85:                              # %cond.end
                                        #   in Loop: Header=BB67_80 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB67_87
# %bb.86:                               # %cond.true515
                                        #   in Loop: Header=BB67_80 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB67_91
.LBB67_87:                              # %cond.false518
                                        #   in Loop: Header=BB67_80 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-12(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB67_89
# %bb.88:                               # %cond.true539
                                        #   in Loop: Header=BB67_80 Depth=2
	xorl	%eax, %eax
	jmp	.LBB67_90
.LBB67_89:                              # %cond.false540
                                        #   in Loop: Header=BB67_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB67_90:                              # %cond.end559
                                        #   in Loop: Header=BB67_80 Depth=2
.LBB67_91:                              # %cond.end561
                                        #   in Loop: Header=BB67_80 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-80(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	subl	-80(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-16(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-20(%rbp), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB67_93
# %bb.92:                               # %cond.true591
                                        #   in Loop: Header=BB67_80 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB67_94
.LBB67_93:                              # %cond.false592
                                        #   in Loop: Header=BB67_80 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-20(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB67_94:                              # %cond.end611
                                        #   in Loop: Header=BB67_80 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB67_96
# %bb.95:                               # %cond.true615
                                        #   in Loop: Header=BB67_80 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB67_100
.LBB67_96:                              # %cond.false618
                                        #   in Loop: Header=BB67_80 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-20(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB67_98
# %bb.97:                               # %cond.true639
                                        #   in Loop: Header=BB67_80 Depth=2
	xorl	%eax, %eax
	jmp	.LBB67_99
.LBB67_98:                              # %cond.false640
                                        #   in Loop: Header=BB67_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB67_99:                              # %cond.end659
                                        #   in Loop: Header=BB67_80 Depth=2
.LBB67_100:                             # %cond.end661
                                        #   in Loop: Header=BB67_80 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB67_105
.LBB67_101:                             # %if.else669
                                        #   in Loop: Header=BB67_80 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB67_103
# %bb.102:                              # %if.then671
                                        #   in Loop: Header=BB67_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB67_104
.LBB67_103:                             # %if.else692
                                        #   in Loop: Header=BB67_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB67_104:                             # %if.end717
                                        #   in Loop: Header=BB67_80 Depth=2
	jmp	.LBB67_105
.LBB67_105:                             # %if.end718
                                        #   in Loop: Header=BB67_80 Depth=2
	jmp	.LBB67_106
.LBB67_106:                             # %for.inc719
                                        #   in Loop: Header=BB67_80 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB67_80
.LBB67_107:                             # %for.end721
                                        #   in Loop: Header=BB67_72 Depth=1
	jmp	.LBB67_108
.LBB67_108:                             # %for.inc722
                                        #   in Loop: Header=BB67_72 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB67_72
.LBB67_109:                             # %for.end724
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB67_122
# %bb.110:                              # %if.then727
	movl	$0, -12(%rbp)
.LBB67_111:                             # %for.cond728
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_113 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB67_121
# %bb.112:                              # %for.body731
                                        #   in Loop: Header=BB67_111 Depth=1
	movl	$0, -16(%rbp)
.LBB67_113:                             # %for.cond732
                                        #   Parent Loop BB67_111 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB67_119
# %bb.114:                              # %for.body735
                                        #   in Loop: Header=BB67_113 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB67_116
# %bb.115:                              # %if.then737
                                        #   in Loop: Header=BB67_113 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB67_117
.LBB67_116:                             # %if.else761
                                        #   in Loop: Header=BB67_113 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB67_117:                             # %if.end779
                                        #   in Loop: Header=BB67_113 Depth=2
	jmp	.LBB67_118
.LBB67_118:                             # %for.inc780
                                        #   in Loop: Header=BB67_113 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB67_113
.LBB67_119:                             # %for.end782
                                        #   in Loop: Header=BB67_111 Depth=1
	jmp	.LBB67_120
.LBB67_120:                             # %for.inc783
                                        #   in Loop: Header=BB67_111 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB67_111
.LBB67_121:                             # %for.end785
	jmp	.LBB67_122
.LBB67_122:                             # %if.end786
	movl	-132(%rbp), %ebx
	cmpl	$1696363523, -148(%rbp) # imm = 0x651C7403
	jne	.LBB67_124
.LBB67_123:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB67_124:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB67_123
.Lfunc_end67:
	.size	dct_luma.58, .Lfunc_end67-dct_luma.58
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function dct_chroma_sp.59
.LCPI68_0:
	.quad	4616189618054758400     # double 4
.LCPI68_1:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI68_2:
	.quad	4611686018427387904     # double 2
.LCPI68_3:
	.quad	4613937818241073152     # double 3
	.text
	.globl	dct_chroma_sp.59
	.p2align	4, 0x90
	.type	dct_chroma_sp.59,@function
dct_chroma_sp.59:                       # @dct_chroma_sp.59
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$552, %rsp              # imm = 0x228
	.cfi_offset %rbx, -24
	vmovsd	.LCPI68_2(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI68_3(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$1370884066, -268(%rbp) # imm = 0x51B607E2
	movl	%edi, -124(%rbp)
	movl	%esi, -208(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -192(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-124(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -280(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-124(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -304(%rbp)
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI68_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI68_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmulsd	%xmm0, %xmm2, %xmm0
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -264(%rbp)
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB68_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB68_6
.LBB68_2:                               # %cond.false
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB68_4
# %bb.3:                                # %cond.true18
	movl	$51, %eax
	jmp	.LBB68_5
.LBB68_4:                               # %cond.false19
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
.LBB68_5:                               # %cond.end
.LBB68_6:                               # %cond.end23
	movl	%eax, -148(%rbp)
	movq	-192(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB68_8
# %bb.7:                                # %cond.true29
	xorl	%eax, %eax
	jmp	.LBB68_12
.LBB68_8:                               # %cond.false30
	movq	-192(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB68_10
# %bb.9:                                # %cond.true36
	movl	$51, %eax
	jmp	.LBB68_11
.LBB68_10:                              # %cond.false37
	movq	-192(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
.LBB68_11:                              # %cond.end41
.LBB68_12:                              # %cond.end43
	movl	%eax, -216(%rbp)
	cmpl	$0, -148(%rbp)
	jge	.LBB68_14
# %bb.13:                               # %cond.true47
	movl	-148(%rbp), %eax
	jmp	.LBB68_15
.LBB68_14:                              # %cond.false48
	movslq	-148(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB68_15:                              # %cond.end52
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -116(%rbp)
	cmpl	$0, -148(%rbp)
	jge	.LBB68_17
# %bb.16:                               # %cond.true58
	movl	-148(%rbp), %eax
	jmp	.LBB68_18
.LBB68_17:                              # %cond.false59
	movslq	-148(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB68_18:                              # %cond.end63
	subl	$0, %eax
	cltd
	movl	$6, %esi
	idivl	%esi
	movl	%edx, -96(%rbp)
	movl	-116(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -204(%rbp)
	movl	-204(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	idivl	%esi
	movl	%eax, -212(%rbp)
	cmpl	$0, -216(%rbp)
	jge	.LBB68_20
# %bb.19:                               # %cond.true70
	movq	-192(%rbp), %rax
	movl	16(%rax), %eax
	jmp	.LBB68_21
.LBB68_20:                              # %cond.false72
	movslq	-216(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB68_21:                              # %cond.end76
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -232(%rbp)
	cmpl	$0, -216(%rbp)
	jge	.LBB68_23
# %bb.22:                               # %cond.true82
	movq	-192(%rbp), %rax
	movl	16(%rax), %eax
	jmp	.LBB68_24
.LBB68_23:                              # %cond.false84
	movslq	-216(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB68_24:                              # %cond.end88
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%edx, -108(%rbp)
	movl	-232(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -112(%rbp)
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -224(%rbp)
	movl	$0, -12(%rbp)
.LBB68_25:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_27 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB68_32
# %bb.26:                               # %for.body
                                        #   in Loop: Header=BB68_25 Depth=1
	movl	$0, -16(%rbp)
.LBB68_27:                              # %for.cond97
                                        #   Parent Loop BB68_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB68_30
# %bb.28:                               # %for.body100
                                        #   in Loop: Header=BB68_27 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.29:                               # %for.inc
                                        #   in Loop: Header=BB68_27 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB68_27
.LBB68_30:                              # %for.end
                                        #   in Loop: Header=BB68_25 Depth=1
	jmp	.LBB68_31
.LBB68_31:                              # %for.inc121
                                        #   in Loop: Header=BB68_25 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB68_25
.LBB68_32:                              # %for.end123
	movl	$0, -20(%rbp)
.LBB68_33:                              # %for.cond124
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_35 Depth 2
                                        #       Child Loop BB68_37 Depth 3
                                        #         Child Loop BB68_39 Depth 4
                                        #       Child Loop BB68_45 Depth 3
                                        #         Child Loop BB68_47 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB68_56
# %bb.34:                               # %for.body127
                                        #   in Loop: Header=BB68_33 Depth=1
	movl	$0, -24(%rbp)
.LBB68_35:                              # %for.cond128
                                        #   Parent Loop BB68_33 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB68_37 Depth 3
                                        #         Child Loop BB68_39 Depth 4
                                        #       Child Loop BB68_45 Depth 3
                                        #         Child Loop BB68_47 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB68_54
# %bb.36:                               # %for.body131
                                        #   in Loop: Header=BB68_35 Depth=2
	movl	$0, -12(%rbp)
.LBB68_37:                              # %for.cond132
                                        #   Parent Loop BB68_33 Depth=1
                                        #     Parent Loop BB68_35 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB68_39 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB68_44
# %bb.38:                               # %for.body135
                                        #   in Loop: Header=BB68_37 Depth=3
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -16(%rbp)
.LBB68_39:                              # %for.cond137
                                        #   Parent Loop BB68_33 Depth=1
                                        #     Parent Loop BB68_35 Depth=2
                                        #       Parent Loop BB68_37 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB68_42
# %bb.40:                               # %for.body140
                                        #   in Loop: Header=BB68_39 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-52(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-88(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-52(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-88(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-88(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.41:                               # %for.inc172
                                        #   in Loop: Header=BB68_39 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB68_39
.LBB68_42:                              # %for.end174
                                        #   in Loop: Header=BB68_37 Depth=3
	movl	-80(%rbp), %eax
	addl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	subl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	shll	$1, %eax
	addl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	movl	-72(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.43:                               # %for.inc212
                                        #   in Loop: Header=BB68_37 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB68_37
.LBB68_44:                              # %for.end214
                                        #   in Loop: Header=BB68_35 Depth=2
	movl	$0, -16(%rbp)
.LBB68_45:                              # %for.cond215
                                        #   Parent Loop BB68_33 Depth=1
                                        #     Parent Loop BB68_35 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB68_47 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB68_52
# %bb.46:                               # %for.body218
                                        #   in Loop: Header=BB68_45 Depth=3
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	$0, -12(%rbp)
.LBB68_47:                              # %for.cond220
                                        #   Parent Loop BB68_33 Depth=1
                                        #     Parent Loop BB68_35 Depth=2
                                        #       Parent Loop BB68_45 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB68_50
# %bb.48:                               # %for.body223
                                        #   in Loop: Header=BB68_47 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-48(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-48(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-56(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-48(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-48(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-56(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-56(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.49:                               # %for.inc255
                                        #   in Loop: Header=BB68_47 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB68_47
.LBB68_50:                              # %for.end257
                                        #   in Loop: Header=BB68_45 Depth=3
	movl	-80(%rbp), %eax
	addl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-48(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	subl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-48(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	shll	$1, %eax
	addl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-48(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	movl	-72(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-48(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.51:                               # %for.inc296
                                        #   in Loop: Header=BB68_45 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB68_45
.LBB68_52:                              # %for.end298
                                        #   in Loop: Header=BB68_35 Depth=2
	jmp	.LBB68_53
.LBB68_53:                              # %for.inc299
                                        #   in Loop: Header=BB68_35 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB68_35
.LBB68_54:                              # %for.end301
                                        #   in Loop: Header=BB68_33 Depth=1
	jmp	.LBB68_55
.LBB68_55:                              # %for.inc302
                                        #   in Loop: Header=BB68_33 Depth=1
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB68_33
.LBB68_56:                              # %for.end304
	movl	$0, -20(%rbp)
.LBB68_57:                              # %for.cond305
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_59 Depth 2
                                        #       Child Loop BB68_61 Depth 3
                                        #         Child Loop BB68_63 Depth 4
                                        #       Child Loop BB68_69 Depth 3
                                        #         Child Loop BB68_71 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB68_80
# %bb.58:                               # %for.body308
                                        #   in Loop: Header=BB68_57 Depth=1
	movl	$0, -24(%rbp)
.LBB68_59:                              # %for.cond309
                                        #   Parent Loop BB68_57 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB68_61 Depth 3
                                        #         Child Loop BB68_63 Depth 4
                                        #       Child Loop BB68_69 Depth 3
                                        #         Child Loop BB68_71 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB68_78
# %bb.60:                               # %for.body312
                                        #   in Loop: Header=BB68_59 Depth=2
	movl	$0, -12(%rbp)
.LBB68_61:                              # %for.cond313
                                        #   Parent Loop BB68_57 Depth=1
                                        #     Parent Loop BB68_59 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB68_63 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB68_68
# %bb.62:                               # %for.body316
                                        #   in Loop: Header=BB68_61 Depth=3
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -16(%rbp)
.LBB68_63:                              # %for.cond318
                                        #   Parent Loop BB68_57 Depth=1
                                        #     Parent Loop BB68_59 Depth=2
                                        #       Parent Loop BB68_61 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB68_66
# %bb.64:                               # %for.body321
                                        #   in Loop: Header=BB68_63 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
	movslq	%eax, %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-52(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movl	-88(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	movl	%ecx, -80(%rbp,%rdx,4)
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-52(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movl	-88(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-52(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-88(%rbp), %rax
	movl	%ecx, -80(%rbp,%rax,4)
# %bb.65:                               # %for.inc349
                                        #   in Loop: Header=BB68_63 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB68_63
.LBB68_66:                              # %for.end351
                                        #   in Loop: Header=BB68_61 Depth=3
	movl	-80(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	leaq	-560(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-80(%rbp), %ecx
	subl	-76(%rbp), %ecx
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	shll	$1, %ecx
	addl	-72(%rbp), %ecx
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-52(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.67:                               # %for.inc385
                                        #   in Loop: Header=BB68_61 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB68_61
.LBB68_68:                              # %for.end387
                                        #   in Loop: Header=BB68_59 Depth=2
	movl	$0, -16(%rbp)
.LBB68_69:                              # %for.cond388
                                        #   Parent Loop BB68_57 Depth=1
                                        #     Parent Loop BB68_59 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB68_71 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB68_76
# %bb.70:                               # %for.body391
                                        #   in Loop: Header=BB68_69 Depth=3
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	$0, -12(%rbp)
.LBB68_71:                              # %for.cond393
                                        #   Parent Loop BB68_57 Depth=1
                                        #     Parent Loop BB68_59 Depth=2
                                        #       Parent Loop BB68_69 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB68_74
# %bb.72:                               # %for.body396
                                        #   in Loop: Header=BB68_71 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-48(%rbp), %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-48(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-20(%rbp), %edx
	addl	-56(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-12(%rbp), %rdx
	movl	%ecx, -80(%rbp,%rdx,4)
	movslq	-48(%rbp), %rcx
	shlq	$5, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-48(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movl	-20(%rbp), %edx
	addl	-56(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-56(%rbp), %rax
	movl	%ecx, -80(%rbp,%rax,4)
# %bb.73:                               # %for.inc424
                                        #   in Loop: Header=BB68_71 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB68_71
.LBB68_74:                              # %for.end426
                                        #   in Loop: Header=BB68_69 Depth=3
	movl	-80(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	-48(%rbp), %rdx
	shlq	$5, %rdx
	leaq	-560(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-20(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-80(%rbp), %ecx
	subl	-76(%rbp), %ecx
	movslq	-48(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-20(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	shll	$1, %ecx
	addl	-72(%rbp), %ecx
	movslq	-48(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-20(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-48(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movl	-20(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.75:                               # %for.inc461
                                        #   in Loop: Header=BB68_69 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB68_69
.LBB68_76:                              # %for.end463
                                        #   in Loop: Header=BB68_59 Depth=2
	jmp	.LBB68_77
.LBB68_77:                              # %for.inc464
                                        #   in Loop: Header=BB68_59 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB68_59
.LBB68_78:                              # %for.end466
                                        #   in Loop: Header=BB68_57 Depth=1
	jmp	.LBB68_79
.LBB68_79:                              # %for.inc467
                                        #   in Loop: Header=BB68_57 Depth=1
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB68_57
.LBB68_80:                              # %for.end469
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -176(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -172(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -168(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -164(%rbp)
	movl	-560(%rbp), %eax
	addl	-432(%rbp), %eax
	addl	-544(%rbp), %eax
	addl	-416(%rbp), %eax
	movl	%eax, -256(%rbp)
	movl	-560(%rbp), %eax
	subl	-432(%rbp), %eax
	addl	-544(%rbp), %eax
	subl	-416(%rbp), %eax
	movl	%eax, -252(%rbp)
	movl	-560(%rbp), %eax
	addl	-432(%rbp), %eax
	subl	-544(%rbp), %eax
	subl	-416(%rbp), %eax
	movl	%eax, -248(%rbp)
	movl	-560(%rbp), %eax
	subl	-432(%rbp), %eax
	subl	-544(%rbp), %eax
	addl	-416(%rbp), %eax
	movl	%eax, -244(%rbp)
	movl	$-1, -60(%rbp)
	movl	$0, -92(%rbp)
	movl	$0, -32(%rbp)
.LBB68_81:                              # %for.cond582
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -32(%rbp)
	jge	.LBB68_120
# %bb.82:                               # %for.body585
                                        #   in Loop: Header=BB68_81 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -84(%rbp)
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-224(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-112(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	movl	-112(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	cltd
	idivl	(%rsi)
	movl	%eax, -40(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-40(%rbp), %edi
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -40(%rbp)
	movl	-40(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-212(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-204(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %eax
	movslq	-32(%rbp), %rcx
	subl	-256(%rbp,%rcx,4), %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-212(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-204(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	je	.LBB68_98
# %bb.83:                               # %land.lhs.true
                                        #   in Loop: Header=BB68_81 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB68_98
# %bb.84:                               # %land.lhs.true640
                                        #   in Loop: Header=BB68_81 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB68_98
# %bb.85:                               # %if.then
                                        #   in Loop: Header=BB68_81 Depth=1
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-28(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	subl	%eax, %ebx
	movslq	-32(%rbp), %rax
	subl	-256(%rbp,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movl	-28(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-120(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_c2x2
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-200(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-120(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-44(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	subl	%eax, %ebx
	movslq	-32(%rbp), %rax
	subl	-256(%rbp,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	movl	-44(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-120(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_c2x2
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-184(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-120(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-184(%rbp), %xmm0
	jne	.LBB68_90
	jp	.LBB68_90
# %bb.86:                               # %if.then685
                                        #   in Loop: Header=BB68_81 Depth=1
	movl	-28(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB68_88
# %bb.87:                               # %cond.true690
                                        #   in Loop: Header=BB68_81 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB68_89
.LBB68_88:                              # %cond.false691
                                        #   in Loop: Header=BB68_81 Depth=1
	movl	-44(%rbp), %eax
.LBB68_89:                              # %cond.end692
                                        #   in Loop: Header=BB68_81 Depth=1
	movl	%eax, -36(%rbp)
	jmp	.LBB68_94
.LBB68_90:                              # %if.else
                                        #   in Loop: Header=BB68_81 Depth=1
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-184(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB68_92
# %bb.91:                               # %if.then696
                                        #   in Loop: Header=BB68_81 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB68_93
.LBB68_92:                              # %if.else697
                                        #   in Loop: Header=BB68_81 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB68_93:                              # %if.end
                                        #   in Loop: Header=BB68_81 Depth=1
	jmp	.LBB68_94
.LBB68_94:                              # %if.end698
                                        #   in Loop: Header=BB68_81 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB68_96
# %bb.95:                               # %cond.true701
                                        #   in Loop: Header=BB68_81 Depth=1
	movl	-40(%rbp), %eax
	jmp	.LBB68_97
.LBB68_96:                              # %cond.false702
                                        #   in Loop: Header=BB68_81 Depth=1
	movl	-104(%rbp), %eax
.LBB68_97:                              # %cond.end703
                                        #   in Loop: Header=BB68_81 Depth=1
	movl	%eax, -100(%rbp)
	jmp	.LBB68_108
.LBB68_98:                              # %if.else705
                                        #   in Loop: Header=BB68_81 Depth=1
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jne	.LBB68_100
# %bb.99:                               # %if.then708
                                        #   in Loop: Header=BB68_81 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB68_107
.LBB68_100:                             # %if.else709
                                        #   in Loop: Header=BB68_81 Depth=1
	cmpl	$0, -28(%rbp)
	jne	.LBB68_102
# %bb.101:                              # %cond.true712
                                        #   in Loop: Header=BB68_81 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB68_103
.LBB68_102:                             # %cond.false713
                                        #   in Loop: Header=BB68_81 Depth=1
	movl	-44(%rbp), %eax
.LBB68_103:                             # %cond.end714
                                        #   in Loop: Header=BB68_81 Depth=1
	movl	%eax, -36(%rbp)
	cmpl	$0, -28(%rbp)
	jne	.LBB68_105
# %bb.104:                              # %cond.true718
                                        #   in Loop: Header=BB68_81 Depth=1
	movl	-40(%rbp), %eax
	jmp	.LBB68_106
.LBB68_105:                             # %cond.false719
                                        #   in Loop: Header=BB68_81 Depth=1
	movl	-104(%rbp), %eax
.LBB68_106:                             # %cond.end720
                                        #   in Loop: Header=BB68_81 Depth=1
	movl	%eax, -100(%rbp)
.LBB68_107:                             # %if.end722
                                        #   in Loop: Header=BB68_81 Depth=1
	jmp	.LBB68_108
.LBB68_108:                             # %if.end723
                                        #   in Loop: Header=BB68_81 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB68_113
# %bb.109:                              # %land.lhs.true726
                                        #   in Loop: Header=BB68_81 Depth=1
	movq	img, %rax
	cmpl	$4, 40(%rax)
	jge	.LBB68_113
# %bb.110:                              # %if.then730
                                        #   in Loop: Header=BB68_81 Depth=1
	cmpl	$2063, -36(%rbp)        # imm = 0x80F
	jle	.LBB68_112
# %bb.111:                              # %if.then733
                                        #   in Loop: Header=BB68_81 Depth=1
	movl	$2063, -36(%rbp)        # imm = 0x80F
.LBB68_112:                             # %if.end734
                                        #   in Loop: Header=BB68_81 Depth=1
	jmp	.LBB68_113
.LBB68_113:                             # %if.end735
                                        #   in Loop: Header=BB68_81 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB68_118
# %bb.114:                              # %if.then738
                                        #   in Loop: Header=BB68_81 Depth=1
	movl	-124(%rbp), %ecx
	shll	$2, %ecx
                                        # kill: def $cl killed $ecx
	movl	$983040, %eax           # imm = 0xF0000
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-208(%rbp), %eax
	jle	.LBB68_116
# %bb.115:                              # %cond.true744
                                        #   in Loop: Header=BB68_81 Depth=1
	movl	$1, %eax
	jmp	.LBB68_117
.LBB68_116:                             # %cond.false745
                                        #   in Loop: Header=BB68_81 Depth=1
	movl	-208(%rbp), %eax
.LBB68_117:                             # %cond.end746
                                        #   in Loop: Header=BB68_81 Depth=1
	movl	%eax, -208(%rbp)
	movl	-36(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movq	-280(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-60(%rbp), %eax
	movq	-304(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	movl	$-1, -60(%rbp)
	movl	-36(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	movl	%eax, -84(%rbp)
.LBB68_118:                             # %if.end763
                                        #   in Loop: Header=BB68_81 Depth=1
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %eax
	addl	-84(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-84(%rbp), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-224(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-112(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-84(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-232(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.119:                              # %for.inc786
                                        #   in Loop: Header=BB68_81 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB68_81
.LBB68_120:                             # %for.end788
	movq	-280(%rbp), %rax
	movslq	-92(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13112(%rdx)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13368(%rdx)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13128(%rdx)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 13384(%rcx)
	movl	$0, -220(%rbp)
	movl	$0, -240(%rbp)
	movl	$0, -20(%rbp)
.LBB68_121:                             # %for.cond835
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_123 Depth 2
                                        #       Child Loop BB68_125 Depth 3
	cmpl	$4, -20(%rbp)
	jg	.LBB68_168
# %bb.122:                              # %for.body838
                                        #   in Loop: Header=BB68_121 Depth=1
	movl	$0, -24(%rbp)
.LBB68_123:                             # %for.cond839
                                        #   Parent Loop BB68_121 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB68_125 Depth 3
	cmpl	$4, -24(%rbp)
	jg	.LBB68_166
# %bb.124:                              # %for.body842
                                        #   in Loop: Header=BB68_123 Depth=2
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -236(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-124(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-236(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -288(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-124(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-236(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -296(%rbp)
	movl	$-1, -60(%rbp)
	movl	$0, -92(%rbp)
	movl	$1, -32(%rbp)
.LBB68_125:                             # %for.cond860
                                        #   Parent Loop BB68_121 Depth=1
                                        #     Parent Loop BB68_123 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -32(%rbp)
	jge	.LBB68_164
# %bb.126:                              # %for.body863
                                        #   in Loop: Header=BB68_125 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB68_129
# %bb.127:                              # %lor.lhs.false
                                        #   in Loop: Header=BB68_125 Depth=3
	cmpl	$0, mb_adaptive
	je	.LBB68_130
# %bb.128:                              # %land.lhs.true865
                                        #   in Loop: Header=BB68_125 Depth=3
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB68_130
.LBB68_129:                             # %if.then867
                                        #   in Loop: Header=BB68_125 Depth=3
	movslq	-32(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-32(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB68_131
.LBB68_130:                             # %if.else876
                                        #   in Loop: Header=BB68_125 Depth=3
	movslq	-32(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-32(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB68_131:                             # %if.end885
                                        #   in Loop: Header=BB68_125 Depth=3
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -84(%rbp)
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-224(%rbp), %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	cltd
	idivl	(%rsi,%rcx,4)
	movl	%eax, -40(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-40(%rbp), %edi
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -40(%rbp)
	movl	-40(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-212(%rbp), %eax
	movl	-204(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	subl	(%rdx,%rcx,4), %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-212(%rbp), %eax
	movl	-204(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	je	.LBB68_147
# %bb.132:                              # %land.lhs.true962
                                        #   in Loop: Header=BB68_125 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB68_147
# %bb.133:                              # %land.lhs.true965
                                        #   in Loop: Header=BB68_125 Depth=3
	cmpl	$0, -44(%rbp)
	je	.LBB68_147
# %bb.134:                              # %if.then968
                                        #   in Loop: Header=BB68_125 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-28(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movl	-28(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-120(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-200(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-120(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-44(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	movl	-44(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-120(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-184(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-120(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-184(%rbp), %xmm0
	jne	.LBB68_139
	jp	.LBB68_139
# %bb.135:                              # %if.then1041
                                        #   in Loop: Header=BB68_125 Depth=3
	movl	-28(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB68_137
# %bb.136:                              # %cond.true1046
                                        #   in Loop: Header=BB68_125 Depth=3
	movl	-28(%rbp), %eax
	jmp	.LBB68_138
.LBB68_137:                             # %cond.false1047
                                        #   in Loop: Header=BB68_125 Depth=3
	movl	-44(%rbp), %eax
.LBB68_138:                             # %cond.end1048
                                        #   in Loop: Header=BB68_125 Depth=3
	movl	%eax, -36(%rbp)
	jmp	.LBB68_143
.LBB68_139:                             # %if.else1050
                                        #   in Loop: Header=BB68_125 Depth=3
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-184(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB68_141
# %bb.140:                              # %if.then1053
                                        #   in Loop: Header=BB68_125 Depth=3
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB68_142
.LBB68_141:                             # %if.else1054
                                        #   in Loop: Header=BB68_125 Depth=3
	movl	-44(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB68_142:                             # %if.end1055
                                        #   in Loop: Header=BB68_125 Depth=3
	jmp	.LBB68_143
.LBB68_143:                             # %if.end1056
                                        #   in Loop: Header=BB68_125 Depth=3
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB68_145
# %bb.144:                              # %cond.true1059
                                        #   in Loop: Header=BB68_125 Depth=3
	movl	-40(%rbp), %eax
	jmp	.LBB68_146
.LBB68_145:                             # %cond.false1060
                                        #   in Loop: Header=BB68_125 Depth=3
	movl	-104(%rbp), %eax
.LBB68_146:                             # %cond.end1061
                                        #   in Loop: Header=BB68_125 Depth=3
	movl	%eax, -100(%rbp)
	jmp	.LBB68_157
.LBB68_147:                             # %if.else1063
                                        #   in Loop: Header=BB68_125 Depth=3
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jne	.LBB68_149
# %bb.148:                              # %if.then1066
                                        #   in Loop: Header=BB68_125 Depth=3
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB68_156
.LBB68_149:                             # %if.else1067
                                        #   in Loop: Header=BB68_125 Depth=3
	cmpl	$0, -28(%rbp)
	jne	.LBB68_151
# %bb.150:                              # %cond.true1070
                                        #   in Loop: Header=BB68_125 Depth=3
	movl	-28(%rbp), %eax
	jmp	.LBB68_152
.LBB68_151:                             # %cond.false1071
                                        #   in Loop: Header=BB68_125 Depth=3
	movl	-44(%rbp), %eax
.LBB68_152:                             # %cond.end1072
                                        #   in Loop: Header=BB68_125 Depth=3
	movl	%eax, -36(%rbp)
	cmpl	$0, -28(%rbp)
	jne	.LBB68_154
# %bb.153:                              # %cond.true1076
                                        #   in Loop: Header=BB68_125 Depth=3
	movl	-40(%rbp), %eax
	jmp	.LBB68_155
.LBB68_154:                             # %cond.false1077
                                        #   in Loop: Header=BB68_125 Depth=3
	movl	-104(%rbp), %eax
.LBB68_155:                             # %cond.end1078
                                        #   in Loop: Header=BB68_125 Depth=3
	movl	%eax, -100(%rbp)
.LBB68_156:                             # %if.end1080
                                        #   in Loop: Header=BB68_125 Depth=3
	jmp	.LBB68_157
.LBB68_157:                             # %if.end1081
                                        #   in Loop: Header=BB68_125 Depth=3
	cmpl	$0, -36(%rbp)
	je	.LBB68_162
# %bb.158:                              # %if.then1084
                                        #   in Loop: Header=BB68_125 Depth=3
	movl	-124(%rbp), %ecx
	shll	$2, %ecx
	addl	$16, %ecx
	movl	-20(%rbp), %eax
	sarl	$1, %eax
	movl	-24(%rbp), %edx
	sarl	$2, %edx
	addl	%edx, %eax
	addl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	cmpl	$1, -36(%rbp)
	jle	.LBB68_160
# %bb.159:                              # %if.then1097
                                        #   in Loop: Header=BB68_125 Depth=3
	movl	-220(%rbp), %eax
	addl	$999999, %eax           # imm = 0xF423F
	movl	%eax, -220(%rbp)
	jmp	.LBB68_161
.LBB68_160:                             # %if.else1099
                                        #   in Loop: Header=BB68_125 Depth=3
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-60(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	-220(%rbp), %eax
	movl	%eax, -220(%rbp)
.LBB68_161:                             # %if.end1106
                                        #   in Loop: Header=BB68_125 Depth=3
	movl	$2, -240(%rbp)
	movl	-36(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movq	-288(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-60(%rbp), %eax
	movq	-296(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	movl	$-1, -60(%rbp)
	movl	-36(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	movl	%eax, -84(%rbp)
.LBB68_162:                             # %if.end1128
                                        #   in Loop: Header=BB68_125 Depth=3
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	addl	-84(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-84(%rbp), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-224(%rbp), %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-84(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-232(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.163:                              # %for.inc1162
                                        #   in Loop: Header=BB68_125 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB68_125
.LBB68_164:                             # %for.end1164
                                        #   in Loop: Header=BB68_123 Depth=2
	movq	-288(%rbp), %rax
	movslq	-92(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.165:                              # %for.inc1167
                                        #   in Loop: Header=BB68_123 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB68_123
.LBB68_166:                             # %for.end1169
                                        #   in Loop: Header=BB68_121 Depth=1
	jmp	.LBB68_167
.LBB68_167:                             # %for.inc1170
                                        #   in Loop: Header=BB68_121 Depth=1
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB68_121
.LBB68_168:                             # %for.end1172
	cmpl	$2, -240(%rbp)
	jne	.LBB68_170
# %bb.169:                              # %if.then1175
	movl	$2, -208(%rbp)
.LBB68_170:                             # %if.end1176
	movl	$0, -20(%rbp)
.LBB68_171:                             # %for.cond1177
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_173 Depth 2
                                        #       Child Loop BB68_175 Depth 3
                                        #         Child Loop BB68_177 Depth 4
                                        #         Child Loop BB68_181 Depth 4
                                        #       Child Loop BB68_187 Depth 3
                                        #         Child Loop BB68_189 Depth 4
                                        #         Child Loop BB68_193 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB68_220
# %bb.172:                              # %for.body1180
                                        #   in Loop: Header=BB68_171 Depth=1
	movl	$0, -24(%rbp)
.LBB68_173:                             # %for.cond1181
                                        #   Parent Loop BB68_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB68_175 Depth 3
                                        #         Child Loop BB68_177 Depth 4
                                        #         Child Loop BB68_181 Depth 4
                                        #       Child Loop BB68_187 Depth 3
                                        #         Child Loop BB68_189 Depth 4
                                        #         Child Loop BB68_193 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB68_218
# %bb.174:                              # %for.body1184
                                        #   in Loop: Header=BB68_173 Depth=2
	movl	$0, -12(%rbp)
.LBB68_175:                             # %for.cond1185
                                        #   Parent Loop BB68_171 Depth=1
                                        #     Parent Loop BB68_173 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB68_177 Depth 4
                                        #         Child Loop BB68_181 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB68_186
# %bb.176:                              # %for.body1188
                                        #   in Loop: Header=BB68_175 Depth=3
	movl	$0, -16(%rbp)
.LBB68_177:                             # %for.cond1189
                                        #   Parent Loop BB68_171 Depth=1
                                        #     Parent Loop BB68_173 Depth=2
                                        #       Parent Loop BB68_175 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB68_180
# %bb.178:                              # %for.body1192
                                        #   in Loop: Header=BB68_177 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.179:                              # %for.inc1202
                                        #   in Loop: Header=BB68_177 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB68_177
.LBB68_180:                             # %for.end1204
                                        #   in Loop: Header=BB68_175 Depth=3
	movl	-80(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-80(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-76(%rbp), %eax
	sarl	$1, %eax
	subl	-68(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-76(%rbp), %eax
	movl	-68(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -132(%rbp)
	movl	$0, -16(%rbp)
.LBB68_181:                             # %for.cond1223
                                        #   Parent Loop BB68_171 Depth=1
                                        #     Parent Loop BB68_173 Depth=2
                                        #       Parent Loop BB68_175 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB68_184
# %bb.182:                              # %for.body1226
                                        #   in Loop: Header=BB68_181 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -88(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-88(%rbp), %rcx
	addl	-144(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-88(%rbp), %rcx
	subl	-144(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-88(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.183:                              # %for.inc1252
                                        #   in Loop: Header=BB68_181 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB68_181
.LBB68_184:                             # %for.end1254
                                        #   in Loop: Header=BB68_175 Depth=3
	jmp	.LBB68_185
.LBB68_185:                             # %for.inc1255
                                        #   in Loop: Header=BB68_175 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB68_175
.LBB68_186:                             # %for.end1257
                                        #   in Loop: Header=BB68_173 Depth=2
	movl	$0, -16(%rbp)
.LBB68_187:                             # %for.cond1258
                                        #   Parent Loop BB68_171 Depth=1
                                        #     Parent Loop BB68_173 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB68_189 Depth 4
                                        #         Child Loop BB68_193 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB68_216
# %bb.188:                              # %for.body1261
                                        #   in Loop: Header=BB68_187 Depth=3
	movl	$0, -12(%rbp)
.LBB68_189:                             # %for.cond1262
                                        #   Parent Loop BB68_171 Depth=1
                                        #     Parent Loop BB68_173 Depth=2
                                        #       Parent Loop BB68_187 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB68_192
# %bb.190:                              # %for.body1265
                                        #   in Loop: Header=BB68_189 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.191:                              # %for.inc1275
                                        #   in Loop: Header=BB68_189 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB68_189
.LBB68_192:                             # %for.end1277
                                        #   in Loop: Header=BB68_187 Depth=3
	movl	-80(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-80(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-76(%rbp), %eax
	sarl	$1, %eax
	subl	-68(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-76(%rbp), %eax
	movl	-68(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -132(%rbp)
	movl	$0, -12(%rbp)
.LBB68_193:                             # %for.cond1296
                                        #   Parent Loop BB68_171 Depth=1
                                        #     Parent Loop BB68_173 Depth=2
                                        #       Parent Loop BB68_187 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB68_214
# %bb.194:                              # %for.body1299
                                        #   in Loop: Header=BB68_193 Depth=4
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	movl	72688(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-144(%rbp,%rdx,4), %edx
	movslq	-56(%rbp), %rsi
	addl	-144(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB68_196
# %bb.195:                              # %cond.true1310
                                        #   in Loop: Header=BB68_193 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB68_197
.LBB68_196:                             # %cond.false1311
                                        #   in Loop: Header=BB68_193 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	addl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB68_197:                             # %cond.end1319
                                        #   in Loop: Header=BB68_193 Depth=4
	cmpl	%ecx, %eax
	jge	.LBB68_199
# %bb.198:                              # %cond.true1323
                                        #   in Loop: Header=BB68_193 Depth=4
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB68_203
.LBB68_199:                             # %cond.false1325
                                        #   in Loop: Header=BB68_193 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	addl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB68_201
# %bb.200:                              # %cond.true1335
                                        #   in Loop: Header=BB68_193 Depth=4
	xorl	%eax, %eax
	jmp	.LBB68_202
.LBB68_201:                             # %cond.false1336
                                        #   in Loop: Header=BB68_193 Depth=4
	movslq	-12(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-56(%rbp), %rcx
	addl	-144(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB68_202:                             # %cond.end1344
                                        #   in Loop: Header=BB68_193 Depth=4
.LBB68_203:                             # %cond.end1346
                                        #   in Loop: Header=BB68_193 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movl	-20(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72688(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-144(%rbp,%rdx,4), %edx
	movslq	-56(%rbp), %rsi
	subl	-144(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB68_205
# %bb.204:                              # %cond.true1365
                                        #   in Loop: Header=BB68_193 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB68_206
.LBB68_205:                             # %cond.false1366
                                        #   in Loop: Header=BB68_193 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	subl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB68_206:                             # %cond.end1374
                                        #   in Loop: Header=BB68_193 Depth=4
	cmpl	%ecx, %eax
	jge	.LBB68_208
# %bb.207:                              # %cond.true1378
                                        #   in Loop: Header=BB68_193 Depth=4
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB68_212
.LBB68_208:                             # %cond.false1380
                                        #   in Loop: Header=BB68_193 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	subl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB68_210
# %bb.209:                              # %cond.true1390
                                        #   in Loop: Header=BB68_193 Depth=4
	xorl	%eax, %eax
	jmp	.LBB68_211
.LBB68_210:                             # %cond.false1391
                                        #   in Loop: Header=BB68_193 Depth=4
	movslq	-12(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-56(%rbp), %rcx
	subl	-144(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB68_211:                             # %cond.end1399
                                        #   in Loop: Header=BB68_193 Depth=4
.LBB68_212:                             # %cond.end1401
                                        #   in Loop: Header=BB68_193 Depth=4
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-56(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.213:                              # %for.inc1410
                                        #   in Loop: Header=BB68_193 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB68_193
.LBB68_214:                             # %for.end1412
                                        #   in Loop: Header=BB68_187 Depth=3
	jmp	.LBB68_215
.LBB68_215:                             # %for.inc1413
                                        #   in Loop: Header=BB68_187 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB68_187
.LBB68_216:                             # %for.end1415
                                        #   in Loop: Header=BB68_173 Depth=2
	jmp	.LBB68_217
.LBB68_217:                             # %for.inc1416
                                        #   in Loop: Header=BB68_173 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB68_173
.LBB68_218:                             # %for.end1418
                                        #   in Loop: Header=BB68_171 Depth=1
	jmp	.LBB68_219
.LBB68_219:                             # %for.inc1419
                                        #   in Loop: Header=BB68_171 Depth=1
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB68_171
.LBB68_220:                             # %for.end1421
	movl	$0, -12(%rbp)
.LBB68_221:                             # %for.cond1422
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_223 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB68_228
# %bb.222:                              # %for.body1425
                                        #   in Loop: Header=BB68_221 Depth=1
	movl	$0, -16(%rbp)
.LBB68_223:                             # %for.cond1426
                                        #   Parent Loop BB68_221 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB68_226
# %bb.224:                              # %for.body1429
                                        #   in Loop: Header=BB68_223 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-124(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.225:                              # %for.inc1444
                                        #   in Loop: Header=BB68_223 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB68_223
.LBB68_226:                             # %for.end1446
                                        #   in Loop: Header=BB68_221 Depth=1
	jmp	.LBB68_227
.LBB68_227:                             # %for.inc1447
                                        #   in Loop: Header=BB68_221 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB68_221
.LBB68_228:                             # %for.end1449
	movl	-208(%rbp), %ebx
	cmpl	$1370884066, -268(%rbp) # imm = 0x51B607E2
	jne	.LBB68_230
.LBB68_229:
	movl	%ebx, %eax
	addq	$552, %rsp              # imm = 0x228
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB68_230:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB68_229
.Lfunc_end68:
	.size	dct_chroma_sp.59, .Lfunc_end68-dct_chroma_sp.59
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function dct_chroma_sp.60
.LCPI69_0:
	.quad	4616189618054758400     # double 4
.LCPI69_1:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI69_2:
	.quad	4611686018427387904     # double 2
.LCPI69_3:
	.quad	4613937818241073152     # double 3
	.text
	.globl	dct_chroma_sp.60
	.p2align	4, 0x90
	.type	dct_chroma_sp.60,@function
dct_chroma_sp.60:                       # @dct_chroma_sp.60
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$552, %rsp              # imm = 0x228
	.cfi_offset %rbx, -24
	vmovsd	.LCPI69_2(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI69_3(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$546126201, -268(%rbp)  # imm = 0x208D3979
	movl	%edi, -112(%rbp)
	movl	%esi, -204(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -200(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -288(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -296(%rbp)
	movq	-200(%rbp), %rax
	movl	12(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI69_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI69_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmulsd	%xmm0, %xmm2, %xmm0
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -264(%rbp)
	movq	-200(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB69_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB69_6
.LBB69_2:                               # %cond.false
	movq	-200(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB69_4
# %bb.3:                                # %cond.true18
	movl	$51, %eax
	jmp	.LBB69_5
.LBB69_4:                               # %cond.false19
	movq	-200(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
.LBB69_5:                               # %cond.end
.LBB69_6:                               # %cond.end23
	movl	%eax, -148(%rbp)
	movq	-200(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB69_8
# %bb.7:                                # %cond.true29
	xorl	%eax, %eax
	jmp	.LBB69_12
.LBB69_8:                               # %cond.false30
	movq	-200(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB69_10
# %bb.9:                                # %cond.true36
	movl	$51, %eax
	jmp	.LBB69_11
.LBB69_10:                              # %cond.false37
	movq	-200(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
.LBB69_11:                              # %cond.end41
.LBB69_12:                              # %cond.end43
	movl	%eax, -220(%rbp)
	cmpl	$0, -148(%rbp)
	jge	.LBB69_14
# %bb.13:                               # %cond.true47
	movl	-148(%rbp), %eax
	jmp	.LBB69_15
.LBB69_14:                              # %cond.false48
	movslq	-148(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB69_15:                              # %cond.end52
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -120(%rbp)
	cmpl	$0, -148(%rbp)
	jge	.LBB69_17
# %bb.16:                               # %cond.true58
	movl	-148(%rbp), %eax
	jmp	.LBB69_18
.LBB69_17:                              # %cond.false59
	movslq	-148(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB69_18:                              # %cond.end63
	subl	$0, %eax
	cltd
	movl	$6, %esi
	idivl	%esi
	movl	%edx, -96(%rbp)
	movl	-120(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -208(%rbp)
	movl	-208(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	idivl	%esi
	movl	%eax, -216(%rbp)
	cmpl	$0, -220(%rbp)
	jge	.LBB69_20
# %bb.19:                               # %cond.true70
	movq	-200(%rbp), %rax
	movl	16(%rax), %eax
	jmp	.LBB69_21
.LBB69_20:                              # %cond.false72
	movslq	-220(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB69_21:                              # %cond.end76
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -228(%rbp)
	cmpl	$0, -220(%rbp)
	jge	.LBB69_23
# %bb.22:                               # %cond.true82
	movq	-200(%rbp), %rax
	movl	16(%rax), %eax
	jmp	.LBB69_24
.LBB69_23:                              # %cond.false84
	movslq	-220(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB69_24:                              # %cond.end88
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%edx, -108(%rbp)
	movl	-228(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -116(%rbp)
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -212(%rbp)
	movl	$0, -12(%rbp)
.LBB69_25:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_27 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB69_32
# %bb.26:                               # %for.body
                                        #   in Loop: Header=BB69_25 Depth=1
	movl	$0, -16(%rbp)
.LBB69_27:                              # %for.cond97
                                        #   Parent Loop BB69_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB69_30
# %bb.28:                               # %for.body100
                                        #   in Loop: Header=BB69_27 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.29:                               # %for.inc
                                        #   in Loop: Header=BB69_27 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB69_27
.LBB69_30:                              # %for.end
                                        #   in Loop: Header=BB69_25 Depth=1
	jmp	.LBB69_31
.LBB69_31:                              # %for.inc121
                                        #   in Loop: Header=BB69_25 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB69_25
.LBB69_32:                              # %for.end123
	movl	$0, -20(%rbp)
.LBB69_33:                              # %for.cond124
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_35 Depth 2
                                        #       Child Loop BB69_37 Depth 3
                                        #         Child Loop BB69_39 Depth 4
                                        #       Child Loop BB69_45 Depth 3
                                        #         Child Loop BB69_47 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB69_56
# %bb.34:                               # %for.body127
                                        #   in Loop: Header=BB69_33 Depth=1
	movl	$0, -24(%rbp)
.LBB69_35:                              # %for.cond128
                                        #   Parent Loop BB69_33 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB69_37 Depth 3
                                        #         Child Loop BB69_39 Depth 4
                                        #       Child Loop BB69_45 Depth 3
                                        #         Child Loop BB69_47 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB69_54
# %bb.36:                               # %for.body131
                                        #   in Loop: Header=BB69_35 Depth=2
	movl	$0, -12(%rbp)
.LBB69_37:                              # %for.cond132
                                        #   Parent Loop BB69_33 Depth=1
                                        #     Parent Loop BB69_35 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB69_39 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB69_44
# %bb.38:                               # %for.body135
                                        #   in Loop: Header=BB69_37 Depth=3
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	$0, -16(%rbp)
.LBB69_39:                              # %for.cond137
                                        #   Parent Loop BB69_33 Depth=1
                                        #     Parent Loop BB69_35 Depth=2
                                        #       Parent Loop BB69_37 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB69_42
# %bb.40:                               # %for.body140
                                        #   in Loop: Header=BB69_39 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -92(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-48(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-92(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-48(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-92(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-48(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-92(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.41:                               # %for.inc172
                                        #   in Loop: Header=BB69_39 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB69_39
.LBB69_42:                              # %for.end174
                                        #   in Loop: Header=BB69_37 Depth=3
	movl	-80(%rbp), %eax
	addl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-48(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	subl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-48(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	shll	$1, %eax
	addl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-48(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	movl	-72(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-48(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.43:                               # %for.inc212
                                        #   in Loop: Header=BB69_37 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB69_37
.LBB69_44:                              # %for.end214
                                        #   in Loop: Header=BB69_35 Depth=2
	movl	$0, -16(%rbp)
.LBB69_45:                              # %for.cond215
                                        #   Parent Loop BB69_33 Depth=1
                                        #     Parent Loop BB69_35 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB69_47 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB69_52
# %bb.46:                               # %for.body218
                                        #   in Loop: Header=BB69_45 Depth=3
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB69_47:                              # %for.cond220
                                        #   Parent Loop BB69_33 Depth=1
                                        #     Parent Loop BB69_35 Depth=2
                                        #       Parent Loop BB69_45 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB69_50
# %bb.48:                               # %for.body223
                                        #   in Loop: Header=BB69_47 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-56(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-56(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-56(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-56(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.49:                               # %for.inc255
                                        #   in Loop: Header=BB69_47 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB69_47
.LBB69_50:                              # %for.end257
                                        #   in Loop: Header=BB69_45 Depth=3
	movl	-80(%rbp), %eax
	addl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-56(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	subl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-56(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	shll	$1, %eax
	addl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-56(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	movl	-72(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-56(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.51:                               # %for.inc296
                                        #   in Loop: Header=BB69_45 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB69_45
.LBB69_52:                              # %for.end298
                                        #   in Loop: Header=BB69_35 Depth=2
	jmp	.LBB69_53
.LBB69_53:                              # %for.inc299
                                        #   in Loop: Header=BB69_35 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB69_35
.LBB69_54:                              # %for.end301
                                        #   in Loop: Header=BB69_33 Depth=1
	jmp	.LBB69_55
.LBB69_55:                              # %for.inc302
                                        #   in Loop: Header=BB69_33 Depth=1
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB69_33
.LBB69_56:                              # %for.end304
	movl	$0, -20(%rbp)
.LBB69_57:                              # %for.cond305
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_59 Depth 2
                                        #       Child Loop BB69_61 Depth 3
                                        #         Child Loop BB69_63 Depth 4
                                        #       Child Loop BB69_69 Depth 3
                                        #         Child Loop BB69_71 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB69_80
# %bb.58:                               # %for.body308
                                        #   in Loop: Header=BB69_57 Depth=1
	movl	$0, -24(%rbp)
.LBB69_59:                              # %for.cond309
                                        #   Parent Loop BB69_57 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB69_61 Depth 3
                                        #         Child Loop BB69_63 Depth 4
                                        #       Child Loop BB69_69 Depth 3
                                        #         Child Loop BB69_71 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB69_78
# %bb.60:                               # %for.body312
                                        #   in Loop: Header=BB69_59 Depth=2
	movl	$0, -12(%rbp)
.LBB69_61:                              # %for.cond313
                                        #   Parent Loop BB69_57 Depth=1
                                        #     Parent Loop BB69_59 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB69_63 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB69_68
# %bb.62:                               # %for.body316
                                        #   in Loop: Header=BB69_61 Depth=3
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	$0, -16(%rbp)
.LBB69_63:                              # %for.cond318
                                        #   Parent Loop BB69_57 Depth=1
                                        #     Parent Loop BB69_59 Depth=2
                                        #       Parent Loop BB69_61 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB69_66
# %bb.64:                               # %for.body321
                                        #   in Loop: Header=BB69_63 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
	movslq	%eax, %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-48(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movl	-92(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-48(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	movl	%ecx, -80(%rbp,%rdx,4)
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-48(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movl	-92(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-48(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-92(%rbp), %rax
	movl	%ecx, -80(%rbp,%rax,4)
# %bb.65:                               # %for.inc349
                                        #   in Loop: Header=BB69_63 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB69_63
.LBB69_66:                              # %for.end351
                                        #   in Loop: Header=BB69_61 Depth=3
	movl	-80(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	leaq	-560(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-48(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-80(%rbp), %ecx
	subl	-76(%rbp), %ecx
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-48(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	shll	$1, %ecx
	addl	-72(%rbp), %ecx
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-48(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-48(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.67:                               # %for.inc385
                                        #   in Loop: Header=BB69_61 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB69_61
.LBB69_68:                              # %for.end387
                                        #   in Loop: Header=BB69_59 Depth=2
	movl	$0, -16(%rbp)
.LBB69_69:                              # %for.cond388
                                        #   Parent Loop BB69_57 Depth=1
                                        #     Parent Loop BB69_59 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB69_71 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB69_76
# %bb.70:                               # %for.body391
                                        #   in Loop: Header=BB69_69 Depth=3
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB69_71:                              # %for.cond393
                                        #   Parent Loop BB69_57 Depth=1
                                        #     Parent Loop BB69_59 Depth=2
                                        #       Parent Loop BB69_69 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB69_74
# %bb.72:                               # %for.body396
                                        #   in Loop: Header=BB69_71 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-56(%rbp), %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-20(%rbp), %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-12(%rbp), %rdx
	movl	%ecx, -80(%rbp,%rdx,4)
	movslq	-56(%rbp), %rcx
	shlq	$5, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movl	-20(%rbp), %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-52(%rbp), %rax
	movl	%ecx, -80(%rbp,%rax,4)
# %bb.73:                               # %for.inc424
                                        #   in Loop: Header=BB69_71 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB69_71
.LBB69_74:                              # %for.end426
                                        #   in Loop: Header=BB69_69 Depth=3
	movl	-80(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$5, %rdx
	leaq	-560(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-20(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-80(%rbp), %ecx
	subl	-76(%rbp), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-20(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	shll	$1, %ecx
	addl	-72(%rbp), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-20(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-56(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movl	-20(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.75:                               # %for.inc461
                                        #   in Loop: Header=BB69_69 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB69_69
.LBB69_76:                              # %for.end463
                                        #   in Loop: Header=BB69_59 Depth=2
	jmp	.LBB69_77
.LBB69_77:                              # %for.inc464
                                        #   in Loop: Header=BB69_59 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB69_59
.LBB69_78:                              # %for.end466
                                        #   in Loop: Header=BB69_57 Depth=1
	jmp	.LBB69_79
.LBB69_79:                              # %for.inc467
                                        #   in Loop: Header=BB69_57 Depth=1
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB69_57
.LBB69_80:                              # %for.end469
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -176(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -172(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -168(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -164(%rbp)
	movl	-560(%rbp), %eax
	addl	-432(%rbp), %eax
	addl	-544(%rbp), %eax
	addl	-416(%rbp), %eax
	movl	%eax, -256(%rbp)
	movl	-560(%rbp), %eax
	subl	-432(%rbp), %eax
	addl	-544(%rbp), %eax
	subl	-416(%rbp), %eax
	movl	%eax, -252(%rbp)
	movl	-560(%rbp), %eax
	addl	-432(%rbp), %eax
	subl	-544(%rbp), %eax
	subl	-416(%rbp), %eax
	movl	%eax, -248(%rbp)
	movl	-560(%rbp), %eax
	subl	-432(%rbp), %eax
	subl	-544(%rbp), %eax
	addl	-416(%rbp), %eax
	movl	%eax, -244(%rbp)
	movl	$-1, -60(%rbp)
	movl	$0, -84(%rbp)
	movl	$0, -32(%rbp)
.LBB69_81:                              # %for.cond582
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -32(%rbp)
	jge	.LBB69_120
# %bb.82:                               # %for.body585
                                        #   in Loop: Header=BB69_81 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -88(%rbp)
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-212(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-116(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	movl	-116(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	cltd
	idivl	(%rsi)
	movl	%eax, -40(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-40(%rbp), %edi
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -40(%rbp)
	movl	-40(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-216(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-208(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %eax
	movslq	-32(%rbp), %rcx
	subl	-256(%rbp,%rcx,4), %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-216(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-208(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	je	.LBB69_98
# %bb.83:                               # %land.lhs.true
                                        #   in Loop: Header=BB69_81 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB69_98
# %bb.84:                               # %land.lhs.true640
                                        #   in Loop: Header=BB69_81 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB69_98
# %bb.85:                               # %if.then
                                        #   in Loop: Header=BB69_81 Depth=1
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-28(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	subl	%eax, %ebx
	movslq	-32(%rbp), %rax
	subl	-256(%rbp,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp)
	movl	-28(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-124(%rbp), %rdx
	leaq	-232(%rbp), %rcx
	callq	levrun_linfo_c2x2
	vmovsd	-192(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-192(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-124(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-44(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	subl	%eax, %ebx
	movslq	-32(%rbp), %rax
	subl	-256(%rbp,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	movl	-44(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-124(%rbp), %rdx
	leaq	-232(%rbp), %rcx
	callq	levrun_linfo_c2x2
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-184(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-124(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	vmovsd	-192(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-184(%rbp), %xmm0
	jne	.LBB69_90
	jp	.LBB69_90
# %bb.86:                               # %if.then685
                                        #   in Loop: Header=BB69_81 Depth=1
	movl	-28(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB69_88
# %bb.87:                               # %cond.true690
                                        #   in Loop: Header=BB69_81 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB69_89
.LBB69_88:                              # %cond.false691
                                        #   in Loop: Header=BB69_81 Depth=1
	movl	-44(%rbp), %eax
.LBB69_89:                              # %cond.end692
                                        #   in Loop: Header=BB69_81 Depth=1
	movl	%eax, -36(%rbp)
	jmp	.LBB69_94
.LBB69_90:                              # %if.else
                                        #   in Loop: Header=BB69_81 Depth=1
	vmovsd	-192(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-184(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB69_92
# %bb.91:                               # %if.then696
                                        #   in Loop: Header=BB69_81 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB69_93
.LBB69_92:                              # %if.else697
                                        #   in Loop: Header=BB69_81 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB69_93:                              # %if.end
                                        #   in Loop: Header=BB69_81 Depth=1
	jmp	.LBB69_94
.LBB69_94:                              # %if.end698
                                        #   in Loop: Header=BB69_81 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB69_96
# %bb.95:                               # %cond.true701
                                        #   in Loop: Header=BB69_81 Depth=1
	movl	-40(%rbp), %eax
	jmp	.LBB69_97
.LBB69_96:                              # %cond.false702
                                        #   in Loop: Header=BB69_81 Depth=1
	movl	-104(%rbp), %eax
.LBB69_97:                              # %cond.end703
                                        #   in Loop: Header=BB69_81 Depth=1
	movl	%eax, -100(%rbp)
	jmp	.LBB69_108
.LBB69_98:                              # %if.else705
                                        #   in Loop: Header=BB69_81 Depth=1
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jne	.LBB69_100
# %bb.99:                               # %if.then708
                                        #   in Loop: Header=BB69_81 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB69_107
.LBB69_100:                             # %if.else709
                                        #   in Loop: Header=BB69_81 Depth=1
	cmpl	$0, -28(%rbp)
	jne	.LBB69_102
# %bb.101:                              # %cond.true712
                                        #   in Loop: Header=BB69_81 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB69_103
.LBB69_102:                             # %cond.false713
                                        #   in Loop: Header=BB69_81 Depth=1
	movl	-44(%rbp), %eax
.LBB69_103:                             # %cond.end714
                                        #   in Loop: Header=BB69_81 Depth=1
	movl	%eax, -36(%rbp)
	cmpl	$0, -28(%rbp)
	jne	.LBB69_105
# %bb.104:                              # %cond.true718
                                        #   in Loop: Header=BB69_81 Depth=1
	movl	-40(%rbp), %eax
	jmp	.LBB69_106
.LBB69_105:                             # %cond.false719
                                        #   in Loop: Header=BB69_81 Depth=1
	movl	-104(%rbp), %eax
.LBB69_106:                             # %cond.end720
                                        #   in Loop: Header=BB69_81 Depth=1
	movl	%eax, -100(%rbp)
.LBB69_107:                             # %if.end722
                                        #   in Loop: Header=BB69_81 Depth=1
	jmp	.LBB69_108
.LBB69_108:                             # %if.end723
                                        #   in Loop: Header=BB69_81 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB69_113
# %bb.109:                              # %land.lhs.true726
                                        #   in Loop: Header=BB69_81 Depth=1
	movq	img, %rax
	cmpl	$4, 40(%rax)
	jge	.LBB69_113
# %bb.110:                              # %if.then730
                                        #   in Loop: Header=BB69_81 Depth=1
	cmpl	$2063, -36(%rbp)        # imm = 0x80F
	jle	.LBB69_112
# %bb.111:                              # %if.then733
                                        #   in Loop: Header=BB69_81 Depth=1
	movl	$2063, -36(%rbp)        # imm = 0x80F
.LBB69_112:                             # %if.end734
                                        #   in Loop: Header=BB69_81 Depth=1
	jmp	.LBB69_113
.LBB69_113:                             # %if.end735
                                        #   in Loop: Header=BB69_81 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB69_118
# %bb.114:                              # %if.then738
                                        #   in Loop: Header=BB69_81 Depth=1
	movl	-112(%rbp), %ecx
	shll	$2, %ecx
                                        # kill: def $cl killed $ecx
	movl	$983040, %eax           # imm = 0xF0000
	shll	%cl, %eax
	cltq
	movq	-200(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-204(%rbp), %eax
	jle	.LBB69_116
# %bb.115:                              # %cond.true744
                                        #   in Loop: Header=BB69_81 Depth=1
	movl	$1, %eax
	jmp	.LBB69_117
.LBB69_116:                             # %cond.false745
                                        #   in Loop: Header=BB69_81 Depth=1
	movl	-204(%rbp), %eax
.LBB69_117:                             # %cond.end746
                                        #   in Loop: Header=BB69_81 Depth=1
	movl	%eax, -204(%rbp)
	movl	-36(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movq	-288(%rbp), %rcx
	movslq	-84(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-60(%rbp), %eax
	movq	-296(%rbp), %rcx
	movslq	-84(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	movl	$-1, -60(%rbp)
	movl	-36(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	movl	%eax, -88(%rbp)
.LBB69_118:                             # %if.end763
                                        #   in Loop: Header=BB69_81 Depth=1
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-212(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-116(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-88(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-228(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.119:                              # %for.inc786
                                        #   in Loop: Header=BB69_81 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB69_81
.LBB69_120:                             # %for.end788
	movq	-288(%rbp), %rax
	movslq	-84(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13112(%rdx)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13368(%rdx)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13128(%rdx)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 13384(%rcx)
	movl	$0, -224(%rbp)
	movl	$0, -236(%rbp)
	movl	$0, -20(%rbp)
.LBB69_121:                             # %for.cond835
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_123 Depth 2
                                        #       Child Loop BB69_125 Depth 3
	cmpl	$4, -20(%rbp)
	jg	.LBB69_168
# %bb.122:                              # %for.body838
                                        #   in Loop: Header=BB69_121 Depth=1
	movl	$0, -24(%rbp)
.LBB69_123:                             # %for.cond839
                                        #   Parent Loop BB69_121 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB69_125 Depth 3
	cmpl	$4, -24(%rbp)
	jg	.LBB69_166
# %bb.124:                              # %for.body842
                                        #   in Loop: Header=BB69_123 Depth=2
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -240(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-240(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -280(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-240(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -304(%rbp)
	movl	$-1, -60(%rbp)
	movl	$0, -84(%rbp)
	movl	$1, -32(%rbp)
.LBB69_125:                             # %for.cond860
                                        #   Parent Loop BB69_121 Depth=1
                                        #     Parent Loop BB69_123 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -32(%rbp)
	jge	.LBB69_164
# %bb.126:                              # %for.body863
                                        #   in Loop: Header=BB69_125 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB69_129
# %bb.127:                              # %lor.lhs.false
                                        #   in Loop: Header=BB69_125 Depth=3
	cmpl	$0, mb_adaptive
	je	.LBB69_130
# %bb.128:                              # %land.lhs.true865
                                        #   in Loop: Header=BB69_125 Depth=3
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB69_130
.LBB69_129:                             # %if.then867
                                        #   in Loop: Header=BB69_125 Depth=3
	movslq	-32(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-32(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB69_131
.LBB69_130:                             # %if.else876
                                        #   in Loop: Header=BB69_125 Depth=3
	movslq	-32(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-32(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB69_131:                             # %if.end885
                                        #   in Loop: Header=BB69_125 Depth=3
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -88(%rbp)
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-212(%rbp), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	cltd
	idivl	(%rsi,%rcx,4)
	movl	%eax, -40(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-40(%rbp), %edi
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -40(%rbp)
	movl	-40(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-216(%rbp), %eax
	movl	-208(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	subl	(%rdx,%rcx,4), %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-216(%rbp), %eax
	movl	-208(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	je	.LBB69_147
# %bb.132:                              # %land.lhs.true962
                                        #   in Loop: Header=BB69_125 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB69_147
# %bb.133:                              # %land.lhs.true965
                                        #   in Loop: Header=BB69_125 Depth=3
	cmpl	$0, -44(%rbp)
	je	.LBB69_147
# %bb.134:                              # %if.then968
                                        #   in Loop: Header=BB69_125 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-28(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp)
	movl	-28(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-124(%rbp), %rdx
	leaq	-232(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-192(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-192(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-124(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-44(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	movl	-44(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-124(%rbp), %rdx
	leaq	-232(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-184(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-124(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	vmovsd	-192(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-184(%rbp), %xmm0
	jne	.LBB69_139
	jp	.LBB69_139
# %bb.135:                              # %if.then1041
                                        #   in Loop: Header=BB69_125 Depth=3
	movl	-28(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB69_137
# %bb.136:                              # %cond.true1046
                                        #   in Loop: Header=BB69_125 Depth=3
	movl	-28(%rbp), %eax
	jmp	.LBB69_138
.LBB69_137:                             # %cond.false1047
                                        #   in Loop: Header=BB69_125 Depth=3
	movl	-44(%rbp), %eax
.LBB69_138:                             # %cond.end1048
                                        #   in Loop: Header=BB69_125 Depth=3
	movl	%eax, -36(%rbp)
	jmp	.LBB69_143
.LBB69_139:                             # %if.else1050
                                        #   in Loop: Header=BB69_125 Depth=3
	vmovsd	-192(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-184(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB69_141
# %bb.140:                              # %if.then1053
                                        #   in Loop: Header=BB69_125 Depth=3
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB69_142
.LBB69_141:                             # %if.else1054
                                        #   in Loop: Header=BB69_125 Depth=3
	movl	-44(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB69_142:                             # %if.end1055
                                        #   in Loop: Header=BB69_125 Depth=3
	jmp	.LBB69_143
.LBB69_143:                             # %if.end1056
                                        #   in Loop: Header=BB69_125 Depth=3
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB69_145
# %bb.144:                              # %cond.true1059
                                        #   in Loop: Header=BB69_125 Depth=3
	movl	-40(%rbp), %eax
	jmp	.LBB69_146
.LBB69_145:                             # %cond.false1060
                                        #   in Loop: Header=BB69_125 Depth=3
	movl	-104(%rbp), %eax
.LBB69_146:                             # %cond.end1061
                                        #   in Loop: Header=BB69_125 Depth=3
	movl	%eax, -100(%rbp)
	jmp	.LBB69_157
.LBB69_147:                             # %if.else1063
                                        #   in Loop: Header=BB69_125 Depth=3
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jne	.LBB69_149
# %bb.148:                              # %if.then1066
                                        #   in Loop: Header=BB69_125 Depth=3
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB69_156
.LBB69_149:                             # %if.else1067
                                        #   in Loop: Header=BB69_125 Depth=3
	cmpl	$0, -28(%rbp)
	jne	.LBB69_151
# %bb.150:                              # %cond.true1070
                                        #   in Loop: Header=BB69_125 Depth=3
	movl	-28(%rbp), %eax
	jmp	.LBB69_152
.LBB69_151:                             # %cond.false1071
                                        #   in Loop: Header=BB69_125 Depth=3
	movl	-44(%rbp), %eax
.LBB69_152:                             # %cond.end1072
                                        #   in Loop: Header=BB69_125 Depth=3
	movl	%eax, -36(%rbp)
	cmpl	$0, -28(%rbp)
	jne	.LBB69_154
# %bb.153:                              # %cond.true1076
                                        #   in Loop: Header=BB69_125 Depth=3
	movl	-40(%rbp), %eax
	jmp	.LBB69_155
.LBB69_154:                             # %cond.false1077
                                        #   in Loop: Header=BB69_125 Depth=3
	movl	-104(%rbp), %eax
.LBB69_155:                             # %cond.end1078
                                        #   in Loop: Header=BB69_125 Depth=3
	movl	%eax, -100(%rbp)
.LBB69_156:                             # %if.end1080
                                        #   in Loop: Header=BB69_125 Depth=3
	jmp	.LBB69_157
.LBB69_157:                             # %if.end1081
                                        #   in Loop: Header=BB69_125 Depth=3
	cmpl	$0, -36(%rbp)
	je	.LBB69_162
# %bb.158:                              # %if.then1084
                                        #   in Loop: Header=BB69_125 Depth=3
	movl	-112(%rbp), %ecx
	shll	$2, %ecx
	addl	$16, %ecx
	movl	-20(%rbp), %eax
	sarl	$1, %eax
	movl	-24(%rbp), %edx
	sarl	$2, %edx
	addl	%edx, %eax
	addl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-200(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	cmpl	$1, -36(%rbp)
	jle	.LBB69_160
# %bb.159:                              # %if.then1097
                                        #   in Loop: Header=BB69_125 Depth=3
	movl	-224(%rbp), %eax
	addl	$999999, %eax           # imm = 0xF423F
	movl	%eax, -224(%rbp)
	jmp	.LBB69_161
.LBB69_160:                             # %if.else1099
                                        #   in Loop: Header=BB69_125 Depth=3
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-60(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	-224(%rbp), %eax
	movl	%eax, -224(%rbp)
.LBB69_161:                             # %if.end1106
                                        #   in Loop: Header=BB69_125 Depth=3
	movl	$2, -236(%rbp)
	movl	-36(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movq	-280(%rbp), %rcx
	movslq	-84(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-60(%rbp), %eax
	movq	-304(%rbp), %rcx
	movslq	-84(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	movl	$-1, -60(%rbp)
	movl	-36(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	movl	%eax, -88(%rbp)
.LBB69_162:                             # %if.end1128
                                        #   in Loop: Header=BB69_125 Depth=3
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-212(%rbp), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-88(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-228(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.163:                              # %for.inc1162
                                        #   in Loop: Header=BB69_125 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB69_125
.LBB69_164:                             # %for.end1164
                                        #   in Loop: Header=BB69_123 Depth=2
	movq	-280(%rbp), %rax
	movslq	-84(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.165:                              # %for.inc1167
                                        #   in Loop: Header=BB69_123 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB69_123
.LBB69_166:                             # %for.end1169
                                        #   in Loop: Header=BB69_121 Depth=1
	jmp	.LBB69_167
.LBB69_167:                             # %for.inc1170
                                        #   in Loop: Header=BB69_121 Depth=1
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB69_121
.LBB69_168:                             # %for.end1172
	cmpl	$2, -236(%rbp)
	jne	.LBB69_170
# %bb.169:                              # %if.then1175
	movl	$2, -204(%rbp)
.LBB69_170:                             # %if.end1176
	movl	$0, -20(%rbp)
.LBB69_171:                             # %for.cond1177
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_173 Depth 2
                                        #       Child Loop BB69_175 Depth 3
                                        #         Child Loop BB69_177 Depth 4
                                        #         Child Loop BB69_181 Depth 4
                                        #       Child Loop BB69_187 Depth 3
                                        #         Child Loop BB69_189 Depth 4
                                        #         Child Loop BB69_193 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB69_220
# %bb.172:                              # %for.body1180
                                        #   in Loop: Header=BB69_171 Depth=1
	movl	$0, -24(%rbp)
.LBB69_173:                             # %for.cond1181
                                        #   Parent Loop BB69_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB69_175 Depth 3
                                        #         Child Loop BB69_177 Depth 4
                                        #         Child Loop BB69_181 Depth 4
                                        #       Child Loop BB69_187 Depth 3
                                        #         Child Loop BB69_189 Depth 4
                                        #         Child Loop BB69_193 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB69_218
# %bb.174:                              # %for.body1184
                                        #   in Loop: Header=BB69_173 Depth=2
	movl	$0, -12(%rbp)
.LBB69_175:                             # %for.cond1185
                                        #   Parent Loop BB69_171 Depth=1
                                        #     Parent Loop BB69_173 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB69_177 Depth 4
                                        #         Child Loop BB69_181 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB69_186
# %bb.176:                              # %for.body1188
                                        #   in Loop: Header=BB69_175 Depth=3
	movl	$0, -16(%rbp)
.LBB69_177:                             # %for.cond1189
                                        #   Parent Loop BB69_171 Depth=1
                                        #     Parent Loop BB69_173 Depth=2
                                        #       Parent Loop BB69_175 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB69_180
# %bb.178:                              # %for.body1192
                                        #   in Loop: Header=BB69_177 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.179:                              # %for.inc1202
                                        #   in Loop: Header=BB69_177 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB69_177
.LBB69_180:                             # %for.end1204
                                        #   in Loop: Header=BB69_175 Depth=3
	movl	-80(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-80(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-76(%rbp), %eax
	sarl	$1, %eax
	subl	-68(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-76(%rbp), %eax
	movl	-68(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -132(%rbp)
	movl	$0, -16(%rbp)
.LBB69_181:                             # %for.cond1223
                                        #   Parent Loop BB69_171 Depth=1
                                        #     Parent Loop BB69_173 Depth=2
                                        #       Parent Loop BB69_175 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB69_184
# %bb.182:                              # %for.body1226
                                        #   in Loop: Header=BB69_181 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -92(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-92(%rbp), %rcx
	addl	-144(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-92(%rbp), %rcx
	subl	-144(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-92(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.183:                              # %for.inc1252
                                        #   in Loop: Header=BB69_181 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB69_181
.LBB69_184:                             # %for.end1254
                                        #   in Loop: Header=BB69_175 Depth=3
	jmp	.LBB69_185
.LBB69_185:                             # %for.inc1255
                                        #   in Loop: Header=BB69_175 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB69_175
.LBB69_186:                             # %for.end1257
                                        #   in Loop: Header=BB69_173 Depth=2
	movl	$0, -16(%rbp)
.LBB69_187:                             # %for.cond1258
                                        #   Parent Loop BB69_171 Depth=1
                                        #     Parent Loop BB69_173 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB69_189 Depth 4
                                        #         Child Loop BB69_193 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB69_216
# %bb.188:                              # %for.body1261
                                        #   in Loop: Header=BB69_187 Depth=3
	movl	$0, -12(%rbp)
.LBB69_189:                             # %for.cond1262
                                        #   Parent Loop BB69_171 Depth=1
                                        #     Parent Loop BB69_173 Depth=2
                                        #       Parent Loop BB69_187 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB69_192
# %bb.190:                              # %for.body1265
                                        #   in Loop: Header=BB69_189 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.191:                              # %for.inc1275
                                        #   in Loop: Header=BB69_189 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB69_189
.LBB69_192:                             # %for.end1277
                                        #   in Loop: Header=BB69_187 Depth=3
	movl	-80(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-80(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-76(%rbp), %eax
	sarl	$1, %eax
	subl	-68(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-76(%rbp), %eax
	movl	-68(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -132(%rbp)
	movl	$0, -12(%rbp)
.LBB69_193:                             # %for.cond1296
                                        #   Parent Loop BB69_171 Depth=1
                                        #     Parent Loop BB69_173 Depth=2
                                        #       Parent Loop BB69_187 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB69_214
# %bb.194:                              # %for.body1299
                                        #   in Loop: Header=BB69_193 Depth=4
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movl	72688(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-144(%rbp,%rdx,4), %edx
	movslq	-52(%rbp), %rsi
	addl	-144(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB69_196
# %bb.195:                              # %cond.true1310
                                        #   in Loop: Header=BB69_193 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB69_197
.LBB69_196:                             # %cond.false1311
                                        #   in Loop: Header=BB69_193 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	addl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB69_197:                             # %cond.end1319
                                        #   in Loop: Header=BB69_193 Depth=4
	cmpl	%ecx, %eax
	jge	.LBB69_199
# %bb.198:                              # %cond.true1323
                                        #   in Loop: Header=BB69_193 Depth=4
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB69_203
.LBB69_199:                             # %cond.false1325
                                        #   in Loop: Header=BB69_193 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	addl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB69_201
# %bb.200:                              # %cond.true1335
                                        #   in Loop: Header=BB69_193 Depth=4
	xorl	%eax, %eax
	jmp	.LBB69_202
.LBB69_201:                             # %cond.false1336
                                        #   in Loop: Header=BB69_193 Depth=4
	movslq	-12(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	addl	-144(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB69_202:                             # %cond.end1344
                                        #   in Loop: Header=BB69_193 Depth=4
.LBB69_203:                             # %cond.end1346
                                        #   in Loop: Header=BB69_193 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movl	-20(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72688(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-144(%rbp,%rdx,4), %edx
	movslq	-52(%rbp), %rsi
	subl	-144(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB69_205
# %bb.204:                              # %cond.true1365
                                        #   in Loop: Header=BB69_193 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB69_206
.LBB69_205:                             # %cond.false1366
                                        #   in Loop: Header=BB69_193 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	subl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB69_206:                             # %cond.end1374
                                        #   in Loop: Header=BB69_193 Depth=4
	cmpl	%ecx, %eax
	jge	.LBB69_208
# %bb.207:                              # %cond.true1378
                                        #   in Loop: Header=BB69_193 Depth=4
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB69_212
.LBB69_208:                             # %cond.false1380
                                        #   in Loop: Header=BB69_193 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	subl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB69_210
# %bb.209:                              # %cond.true1390
                                        #   in Loop: Header=BB69_193 Depth=4
	xorl	%eax, %eax
	jmp	.LBB69_211
.LBB69_210:                             # %cond.false1391
                                        #   in Loop: Header=BB69_193 Depth=4
	movslq	-12(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	subl	-144(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB69_211:                             # %cond.end1399
                                        #   in Loop: Header=BB69_193 Depth=4
.LBB69_212:                             # %cond.end1401
                                        #   in Loop: Header=BB69_193 Depth=4
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.213:                              # %for.inc1410
                                        #   in Loop: Header=BB69_193 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB69_193
.LBB69_214:                             # %for.end1412
                                        #   in Loop: Header=BB69_187 Depth=3
	jmp	.LBB69_215
.LBB69_215:                             # %for.inc1413
                                        #   in Loop: Header=BB69_187 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB69_187
.LBB69_216:                             # %for.end1415
                                        #   in Loop: Header=BB69_173 Depth=2
	jmp	.LBB69_217
.LBB69_217:                             # %for.inc1416
                                        #   in Loop: Header=BB69_173 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB69_173
.LBB69_218:                             # %for.end1418
                                        #   in Loop: Header=BB69_171 Depth=1
	jmp	.LBB69_219
.LBB69_219:                             # %for.inc1419
                                        #   in Loop: Header=BB69_171 Depth=1
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB69_171
.LBB69_220:                             # %for.end1421
	movl	$0, -12(%rbp)
.LBB69_221:                             # %for.cond1422
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_223 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB69_228
# %bb.222:                              # %for.body1425
                                        #   in Loop: Header=BB69_221 Depth=1
	movl	$0, -16(%rbp)
.LBB69_223:                             # %for.cond1426
                                        #   Parent Loop BB69_221 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB69_226
# %bb.224:                              # %for.body1429
                                        #   in Loop: Header=BB69_223 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-112(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.225:                              # %for.inc1444
                                        #   in Loop: Header=BB69_223 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB69_223
.LBB69_226:                             # %for.end1446
                                        #   in Loop: Header=BB69_221 Depth=1
	jmp	.LBB69_227
.LBB69_227:                             # %for.inc1447
                                        #   in Loop: Header=BB69_221 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB69_221
.LBB69_228:                             # %for.end1449
	movl	-204(%rbp), %ebx
	cmpl	$546126201, -268(%rbp)  # imm = 0x208D3979
	jne	.LBB69_230
.LBB69_229:
	movl	%ebx, %eax
	addq	$552, %rsp              # imm = 0x228
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB69_230:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB69_229
.Lfunc_end69:
	.size	dct_chroma_sp.60, .Lfunc_end69-dct_chroma_sp.60
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma4x4.61        # -- Begin function dct_chroma4x4.61
	.p2align	4, 0x90
	.type	dct_chroma4x4.61,@function
dct_chroma4x4.61:                       # @dct_chroma4x4.61
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$2086573625, -148(%rbp) # imm = 0x7C5E9639
	movl	%edi, -24(%rbp)
	movl	%esi, -76(%rbp)
	movl	%edx, -104(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %cl
	je	.LBB70_3
# %bb.1:                                # %lor.lhs.false
	movq	-144(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %cl
	je	.LBB70_3
# %bb.2:                                # %lor.rhs
	movq	-144(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%cl
.LBB70_3:                               # %lor.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -84(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-76(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-104(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -160(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-76(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-104(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -168(%rbp)
	movq	img, %rcx
	movl	40(%rcx), %ecx
	movq	img, %rdx
	addl	72668(%rdx), %ecx
	cmpl	$0, %ecx
	jne	.LBB70_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%al
.LBB70_5:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movslq	-24(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	movl	%eax, -88(%rbp)
	cmpl	$0, -88(%rbp)
	jge	.LBB70_7
# %bb.6:                                # %cond.true
	movl	-88(%rbp), %eax
	jmp	.LBB70_8
.LBB70_7:                               # %cond.false
	movl	-88(%rbp), %eax
	subl	$0, %eax
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB70_8:                               # %cond.end
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-88(%rbp), %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -32(%rbp)
	movl	-28(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -108(%rbp)
	cmpl	$0, -36(%rbp)
	jne	.LBB70_18
# %bb.9:                                # %if.then
	movl	$0, -16(%rbp)
.LBB70_10:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_12 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB70_17
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB70_10 Depth=1
	movl	$0, -12(%rbp)
.LBB70_12:                              # %for.cond31
                                        #   Parent Loop BB70_10 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB70_15
# %bb.13:                               # %for.body34
                                        #   in Loop: Header=BB70_12 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-72(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-72(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-72(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB70_12 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB70_12
.LBB70_15:                              # %for.end
                                        #   in Loop: Header=BB70_10 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.16:                               # %for.inc90
                                        #   in Loop: Header=BB70_10 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB70_10
.LBB70_17:                              # %for.end92
	jmp	.LBB70_18
.LBB70_18:                              # %if.end
	cmpl	$0, -36(%rbp)
	jne	.LBB70_28
# %bb.19:                               # %if.then94
	movl	$0, -12(%rbp)
.LBB70_20:                              # %for.cond95
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_22 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB70_27
# %bb.21:                               # %for.body98
                                        #   in Loop: Header=BB70_20 Depth=1
	movl	$0, -16(%rbp)
.LBB70_22:                              # %for.cond99
                                        #   Parent Loop BB70_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB70_25
# %bb.23:                               # %for.body102
                                        #   in Loop: Header=BB70_22 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-68(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-68(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-68(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.24:                               # %for.inc130
                                        #   in Loop: Header=BB70_22 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB70_22
.LBB70_25:                              # %for.end132
                                        #   in Loop: Header=BB70_20 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.26:                               # %for.inc163
                                        #   in Loop: Header=BB70_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB70_20
.LBB70_27:                              # %for.end165
	jmp	.LBB70_28
.LBB70_28:                              # %if.end166
	movl	$0, -132(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -96(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB70_30
# %bb.29:                               # %if.then168
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movl	%eax, -20(%rbp)
	jmp	.LBB70_34
.LBB70_30:                              # %if.else
	cmpl	$1, -84(%rbp)
	jne	.LBB70_32
# %bb.31:                               # %if.then174
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-24(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-28(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB70_33
.LBB70_32:                              # %if.else193
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-24(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-28(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
.LBB70_33:                              # %if.end213
	jmp	.LBB70_34
.LBB70_34:                              # %if.end214
	movl	-24(%rbp), %eax
	addl	$1, %eax
	shll	$2, %eax
	movl	-76(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -76(%rbp)
	movl	-20(%rbp), %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movl	%eax, %ecx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level_temp, %rdi
	addq	%rax, %rdi
	movl	-76(%rbp), %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %esi
	shll	$1, %esi
	movl	-104(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-76(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %esi
	shll	$1, %esi
	movl	-104(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%ecx, (%rdi,%rax,4)
	cmpl	$0, -36(%rbp)
	je	.LBB70_36
# %bb.35:                               # %if.then237
	movl	-20(%rbp), %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB70_46
.LBB70_36:                              # %if.else245
	cmpl	$4, -28(%rbp)
	jge	.LBB70_41
# %bb.37:                               # %if.then248
	cmpl	$1, -84(%rbp)
	jne	.LBB70_39
# %bb.38:                               # %if.then251
	movl	-20(%rbp), %edi
	movslq	-24(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	$3, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	addl	%eax, %edi
	movl	$4, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB70_40
.LBB70_39:                              # %if.else270
	movl	-20(%rbp), %edi
	movslq	-24(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	$3, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	addl	%eax, %edi
	movl	$4, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
.LBB70_40:                              # %if.end290
	jmp	.LBB70_45
.LBB70_41:                              # %if.else291
	cmpl	$1, -84(%rbp)
	jne	.LBB70_43
# %bb.42:                               # %if.then294
	movl	-20(%rbp), %edi
	movslq	-24(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	-28(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB70_44
.LBB70_43:                              # %if.else311
	movl	-20(%rbp), %edi
	movslq	-24(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	-28(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
.LBB70_44:                              # %if.end328
	jmp	.LBB70_45
.LBB70_45:                              # %if.end329
	jmp	.LBB70_46
.LBB70_46:                              # %if.end330
	movl	$1, -92(%rbp)
.LBB70_47:                              # %for.cond331
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -92(%rbp)
	jge	.LBB70_75
# %bb.48:                               # %for.body334
                                        #   in Loop: Header=BB70_47 Depth=1
	movslq	-92(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movslq	-92(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -80(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB70_50
# %bb.49:                               # %if.then345
                                        #   in Loop: Header=BB70_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -20(%rbp)
	jmp	.LBB70_54
.LBB70_50:                              # %if.else352
                                        #   in Loop: Header=BB70_47 Depth=1
	cmpl	$1, -84(%rbp)
	jne	.LBB70_52
# %bb.51:                               # %if.then355
                                        #   in Loop: Header=BB70_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-28(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB70_53
.LBB70_52:                              # %if.else381
                                        #   in Loop: Header=BB70_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-28(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
.LBB70_53:                              # %if.end407
                                        #   in Loop: Header=BB70_47 Depth=1
	jmp	.LBB70_54
.LBB70_54:                              # %if.end408
                                        #   in Loop: Header=BB70_47 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB70_71
# %bb.55:                               # %if.then411
                                        #   in Loop: Header=BB70_47 Depth=1
	cmpl	$0, -12(%rbp)
	jne	.LBB70_57
# %bb.56:                               # %lor.lhs.false413
                                        #   in Loop: Header=BB70_47 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB70_58
.LBB70_57:                              # %if.then415
                                        #   in Loop: Header=BB70_47 Depth=1
	movl	$1, -132(%rbp)
.LBB70_58:                              # %if.end416
                                        #   in Loop: Header=BB70_47 Depth=1
	movl	-20(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-160(%rbp), %rcx
	movslq	-96(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-168(%rbp), %rcx
	movslq	-96(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	movl	$-1, -100(%rbp)
	movl	-20(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -20(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB70_60
# %bb.59:                               # %if.then435
                                        #   in Loop: Header=BB70_47 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB70_70
.LBB70_60:                              # %if.else436
                                        #   in Loop: Header=BB70_47 Depth=1
	cmpl	$4, -28(%rbp)
	jge	.LBB70_65
# %bb.61:                               # %if.then439
                                        #   in Loop: Header=BB70_47 Depth=1
	cmpl	$1, -84(%rbp)
	jne	.LBB70_63
# %bb.62:                               # %if.then442
                                        #   in Loop: Header=BB70_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB70_64
.LBB70_63:                              # %if.else457
                                        #   in Loop: Header=BB70_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -80(%rbp)
.LBB70_64:                              # %if.end472
                                        #   in Loop: Header=BB70_47 Depth=1
	jmp	.LBB70_69
.LBB70_65:                              # %if.else473
                                        #   in Loop: Header=BB70_47 Depth=1
	cmpl	$1, -84(%rbp)
	jne	.LBB70_67
# %bb.66:                               # %if.then476
                                        #   in Loop: Header=BB70_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-28(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB70_68
.LBB70_67:                              # %if.else488
                                        #   in Loop: Header=BB70_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-28(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -80(%rbp)
.LBB70_68:                              # %if.end500
                                        #   in Loop: Header=BB70_47 Depth=1
	jmp	.LBB70_69
.LBB70_69:                              # %if.end501
                                        #   in Loop: Header=BB70_47 Depth=1
	jmp	.LBB70_70
.LBB70_70:                              # %if.end502
                                        #   in Loop: Header=BB70_47 Depth=1
	jmp	.LBB70_71
.LBB70_71:                              # %if.end503
                                        #   in Loop: Header=BB70_47 Depth=1
	cmpl	$0, -36(%rbp)
	jne	.LBB70_73
# %bb.72:                               # %if.then505
                                        #   in Loop: Header=BB70_47 Depth=1
	movl	-80(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB70_73:                              # %if.end511
                                        #   in Loop: Header=BB70_47 Depth=1
	jmp	.LBB70_74
.LBB70_74:                              # %for.inc512
                                        #   in Loop: Header=BB70_47 Depth=1
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB70_47
.LBB70_75:                              # %for.end514
	movq	-160(%rbp), %rax
	movslq	-96(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	cmpl	$0, -36(%rbp)
	jne	.LBB70_89
# %bb.76:                               # %if.then518
	movl	$0, -16(%rbp)
.LBB70_77:                              # %for.cond519
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_79 Depth 2
                                        #     Child Loop BB70_83 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB70_88
# %bb.78:                               # %for.body522
                                        #   in Loop: Header=BB70_77 Depth=1
	movl	$0, -12(%rbp)
.LBB70_79:                              # %for.cond523
                                        #   Parent Loop BB70_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB70_82
# %bb.80:                               # %for.body526
                                        #   in Loop: Header=BB70_79 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.81:                               # %for.inc534
                                        #   in Loop: Header=BB70_79 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB70_79
.LBB70_82:                              # %for.end536
                                        #   in Loop: Header=BB70_77 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -12(%rbp)
.LBB70_83:                              # %for.cond555
                                        #   Parent Loop BB70_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB70_86
# %bb.84:                               # %for.body558
                                        #   in Loop: Header=BB70_83 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movslq	-12(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-72(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.85:                               # %for.inc580
                                        #   in Loop: Header=BB70_83 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB70_83
.LBB70_86:                              # %for.end582
                                        #   in Loop: Header=BB70_77 Depth=1
	jmp	.LBB70_87
.LBB70_87:                              # %for.inc583
                                        #   in Loop: Header=BB70_77 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB70_77
.LBB70_88:                              # %for.end585
	jmp	.LBB70_89
.LBB70_89:                              # %if.end586
	cmpl	$0, -36(%rbp)
	jne	.LBB70_103
# %bb.90:                               # %if.then588
	movl	$0, -12(%rbp)
.LBB70_91:                              # %for.cond589
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_93 Depth 2
                                        #     Child Loop BB70_97 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB70_102
# %bb.92:                               # %for.body592
                                        #   in Loop: Header=BB70_91 Depth=1
	movl	$0, -16(%rbp)
.LBB70_93:                              # %for.cond593
                                        #   Parent Loop BB70_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB70_96
# %bb.94:                               # %for.body596
                                        #   in Loop: Header=BB70_93 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.95:                               # %for.inc604
                                        #   in Loop: Header=BB70_93 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB70_93
.LBB70_96:                              # %for.end606
                                        #   in Loop: Header=BB70_91 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -16(%rbp)
.LBB70_97:                              # %for.cond625
                                        #   Parent Loop BB70_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB70_100
# %bb.98:                               # %for.body628
                                        #   in Loop: Header=BB70_97 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -68(%rbp)
	movslq	-16(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.99:                               # %for.inc654
                                        #   in Loop: Header=BB70_97 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB70_97
.LBB70_100:                             # %for.end656
                                        #   in Loop: Header=BB70_91 Depth=1
	jmp	.LBB70_101
.LBB70_101:                             # %for.inc657
                                        #   in Loop: Header=BB70_91 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB70_91
.LBB70_102:                             # %for.end659
	jmp	.LBB70_103
.LBB70_103:                             # %if.end660
	movl	-132(%rbp), %ebx
	cmpl	$2086573625, -148(%rbp) # imm = 0x7C5E9639
	jne	.LBB70_105
.LBB70_104:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB70_105:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB70_104
.Lfunc_end70:
	.size	dct_chroma4x4.61, .Lfunc_end70-dct_chroma4x4.61
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma4x4.62        # -- Begin function dct_chroma4x4.62
	.p2align	4, 0x90
	.type	dct_chroma4x4.62,@function
dct_chroma4x4.62:                       # @dct_chroma4x4.62
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$851740232, -148(%rbp)  # imm = 0x32C48648
	movl	%edi, -24(%rbp)
	movl	%esi, -76(%rbp)
	movl	%edx, -100(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %cl
	je	.LBB71_3
# %bb.1:                                # %lor.lhs.false
	movq	-144(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %cl
	je	.LBB71_3
# %bb.2:                                # %lor.rhs
	movq	-144(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%cl
.LBB71_3:                               # %lor.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -88(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-76(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-100(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -160(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-76(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-100(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -168(%rbp)
	movq	img, %rcx
	movl	40(%rcx), %ecx
	movq	img, %rdx
	addl	72668(%rdx), %ecx
	cmpl	$0, %ecx
	jne	.LBB71_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%al
.LBB71_5:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movslq	-24(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -80(%rbp)
	jge	.LBB71_7
# %bb.6:                                # %cond.true
	movl	-80(%rbp), %eax
	jmp	.LBB71_8
.LBB71_7:                               # %cond.false
	movl	-80(%rbp), %eax
	subl	$0, %eax
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB71_8:                               # %cond.end
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-80(%rbp), %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -32(%rbp)
	movl	-28(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -104(%rbp)
	cmpl	$0, -36(%rbp)
	jne	.LBB71_18
# %bb.9:                                # %if.then
	movl	$0, -12(%rbp)
.LBB71_10:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_12 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB71_17
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB71_10 Depth=1
	movl	$0, -16(%rbp)
.LBB71_12:                              # %for.cond31
                                        #   Parent Loop BB71_10 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB71_15
# %bb.13:                               # %for.body34
                                        #   in Loop: Header=BB71_12 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-68(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-68(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-68(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB71_12 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB71_12
.LBB71_15:                              # %for.end
                                        #   in Loop: Header=BB71_10 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.16:                               # %for.inc90
                                        #   in Loop: Header=BB71_10 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB71_10
.LBB71_17:                              # %for.end92
	jmp	.LBB71_18
.LBB71_18:                              # %if.end
	cmpl	$0, -36(%rbp)
	jne	.LBB71_28
# %bb.19:                               # %if.then94
	movl	$0, -16(%rbp)
.LBB71_20:                              # %for.cond95
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_22 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB71_27
# %bb.21:                               # %for.body98
                                        #   in Loop: Header=BB71_20 Depth=1
	movl	$0, -12(%rbp)
.LBB71_22:                              # %for.cond99
                                        #   Parent Loop BB71_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB71_25
# %bb.23:                               # %for.body102
                                        #   in Loop: Header=BB71_22 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-72(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-72(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-72(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.24:                               # %for.inc130
                                        #   in Loop: Header=BB71_22 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB71_22
.LBB71_25:                              # %for.end132
                                        #   in Loop: Header=BB71_20 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.26:                               # %for.inc163
                                        #   in Loop: Header=BB71_20 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB71_20
.LBB71_27:                              # %for.end165
	jmp	.LBB71_28
.LBB71_28:                              # %if.end166
	movl	$0, -132(%rbp)
	movl	$-1, -108(%rbp)
	movl	$0, -92(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB71_30
# %bb.29:                               # %if.then168
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movl	%eax, -20(%rbp)
	jmp	.LBB71_34
.LBB71_30:                              # %if.else
	cmpl	$1, -88(%rbp)
	jne	.LBB71_32
# %bb.31:                               # %if.then174
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-24(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-28(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB71_33
.LBB71_32:                              # %if.else193
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-24(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-28(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
.LBB71_33:                              # %if.end213
	jmp	.LBB71_34
.LBB71_34:                              # %if.end214
	movl	-24(%rbp), %eax
	addl	$1, %eax
	shll	$2, %eax
	movl	-76(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -76(%rbp)
	movl	-20(%rbp), %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movl	%eax, %ecx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level_temp, %rdi
	addq	%rax, %rdi
	movl	-76(%rbp), %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %esi
	shll	$1, %esi
	movl	-100(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-76(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %esi
	shll	$1, %esi
	movl	-100(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%ecx, (%rdi,%rax,4)
	cmpl	$0, -36(%rbp)
	je	.LBB71_36
# %bb.35:                               # %if.then237
	movl	-20(%rbp), %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB71_46
.LBB71_36:                              # %if.else245
	cmpl	$4, -28(%rbp)
	jge	.LBB71_41
# %bb.37:                               # %if.then248
	cmpl	$1, -88(%rbp)
	jne	.LBB71_39
# %bb.38:                               # %if.then251
	movl	-20(%rbp), %edi
	movslq	-24(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	$3, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	addl	%eax, %edi
	movl	$4, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB71_40
.LBB71_39:                              # %if.else270
	movl	-20(%rbp), %edi
	movslq	-24(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	$3, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	addl	%eax, %edi
	movl	$4, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
.LBB71_40:                              # %if.end290
	jmp	.LBB71_45
.LBB71_41:                              # %if.else291
	cmpl	$1, -88(%rbp)
	jne	.LBB71_43
# %bb.42:                               # %if.then294
	movl	-20(%rbp), %edi
	movslq	-24(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	-28(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB71_44
.LBB71_43:                              # %if.else311
	movl	-20(%rbp), %edi
	movslq	-24(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	-28(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
.LBB71_44:                              # %if.end328
	jmp	.LBB71_45
.LBB71_45:                              # %if.end329
	jmp	.LBB71_46
.LBB71_46:                              # %if.end330
	movl	$1, -96(%rbp)
.LBB71_47:                              # %for.cond331
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -96(%rbp)
	jge	.LBB71_75
# %bb.48:                               # %for.body334
                                        #   in Loop: Header=BB71_47 Depth=1
	movslq	-96(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-96(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	movl	$0, -84(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB71_50
# %bb.49:                               # %if.then345
                                        #   in Loop: Header=BB71_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -20(%rbp)
	jmp	.LBB71_54
.LBB71_50:                              # %if.else352
                                        #   in Loop: Header=BB71_47 Depth=1
	cmpl	$1, -88(%rbp)
	jne	.LBB71_52
# %bb.51:                               # %if.then355
                                        #   in Loop: Header=BB71_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-28(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB71_53
.LBB71_52:                              # %if.else381
                                        #   in Loop: Header=BB71_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-28(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
.LBB71_53:                              # %if.end407
                                        #   in Loop: Header=BB71_47 Depth=1
	jmp	.LBB71_54
.LBB71_54:                              # %if.end408
                                        #   in Loop: Header=BB71_47 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB71_71
# %bb.55:                               # %if.then411
                                        #   in Loop: Header=BB71_47 Depth=1
	cmpl	$0, -16(%rbp)
	jne	.LBB71_57
# %bb.56:                               # %lor.lhs.false413
                                        #   in Loop: Header=BB71_47 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB71_58
.LBB71_57:                              # %if.then415
                                        #   in Loop: Header=BB71_47 Depth=1
	movl	$1, -132(%rbp)
.LBB71_58:                              # %if.end416
                                        #   in Loop: Header=BB71_47 Depth=1
	movl	-20(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-160(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-108(%rbp), %eax
	movq	-168(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	movl	$-1, -108(%rbp)
	movl	-20(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -20(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB71_60
# %bb.59:                               # %if.then435
                                        #   in Loop: Header=BB71_47 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB71_70
.LBB71_60:                              # %if.else436
                                        #   in Loop: Header=BB71_47 Depth=1
	cmpl	$4, -28(%rbp)
	jge	.LBB71_65
# %bb.61:                               # %if.then439
                                        #   in Loop: Header=BB71_47 Depth=1
	cmpl	$1, -88(%rbp)
	jne	.LBB71_63
# %bb.62:                               # %if.then442
                                        #   in Loop: Header=BB71_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB71_64
.LBB71_63:                              # %if.else457
                                        #   in Loop: Header=BB71_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -84(%rbp)
.LBB71_64:                              # %if.end472
                                        #   in Loop: Header=BB71_47 Depth=1
	jmp	.LBB71_69
.LBB71_65:                              # %if.else473
                                        #   in Loop: Header=BB71_47 Depth=1
	cmpl	$1, -88(%rbp)
	jne	.LBB71_67
# %bb.66:                               # %if.then476
                                        #   in Loop: Header=BB71_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-28(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB71_68
.LBB71_67:                              # %if.else488
                                        #   in Loop: Header=BB71_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-28(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -84(%rbp)
.LBB71_68:                              # %if.end500
                                        #   in Loop: Header=BB71_47 Depth=1
	jmp	.LBB71_69
.LBB71_69:                              # %if.end501
                                        #   in Loop: Header=BB71_47 Depth=1
	jmp	.LBB71_70
.LBB71_70:                              # %if.end502
                                        #   in Loop: Header=BB71_47 Depth=1
	jmp	.LBB71_71
.LBB71_71:                              # %if.end503
                                        #   in Loop: Header=BB71_47 Depth=1
	cmpl	$0, -36(%rbp)
	jne	.LBB71_73
# %bb.72:                               # %if.then505
                                        #   in Loop: Header=BB71_47 Depth=1
	movl	-84(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB71_73:                              # %if.end511
                                        #   in Loop: Header=BB71_47 Depth=1
	jmp	.LBB71_74
.LBB71_74:                              # %for.inc512
                                        #   in Loop: Header=BB71_47 Depth=1
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB71_47
.LBB71_75:                              # %for.end514
	movq	-160(%rbp), %rax
	movslq	-92(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	cmpl	$0, -36(%rbp)
	jne	.LBB71_89
# %bb.76:                               # %if.then518
	movl	$0, -12(%rbp)
.LBB71_77:                              # %for.cond519
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_79 Depth 2
                                        #     Child Loop BB71_83 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB71_88
# %bb.78:                               # %for.body522
                                        #   in Loop: Header=BB71_77 Depth=1
	movl	$0, -16(%rbp)
.LBB71_79:                              # %for.cond523
                                        #   Parent Loop BB71_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB71_82
# %bb.80:                               # %for.body526
                                        #   in Loop: Header=BB71_79 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.81:                               # %for.inc534
                                        #   in Loop: Header=BB71_79 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB71_79
.LBB71_82:                              # %for.end536
                                        #   in Loop: Header=BB71_77 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -16(%rbp)
.LBB71_83:                              # %for.cond555
                                        #   Parent Loop BB71_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB71_86
# %bb.84:                               # %for.body558
                                        #   in Loop: Header=BB71_83 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -68(%rbp)
	movslq	-16(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-68(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.85:                               # %for.inc580
                                        #   in Loop: Header=BB71_83 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB71_83
.LBB71_86:                              # %for.end582
                                        #   in Loop: Header=BB71_77 Depth=1
	jmp	.LBB71_87
.LBB71_87:                              # %for.inc583
                                        #   in Loop: Header=BB71_77 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB71_77
.LBB71_88:                              # %for.end585
	jmp	.LBB71_89
.LBB71_89:                              # %if.end586
	cmpl	$0, -36(%rbp)
	jne	.LBB71_103
# %bb.90:                               # %if.then588
	movl	$0, -16(%rbp)
.LBB71_91:                              # %for.cond589
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_93 Depth 2
                                        #     Child Loop BB71_97 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB71_102
# %bb.92:                               # %for.body592
                                        #   in Loop: Header=BB71_91 Depth=1
	movl	$0, -12(%rbp)
.LBB71_93:                              # %for.cond593
                                        #   Parent Loop BB71_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB71_96
# %bb.94:                               # %for.body596
                                        #   in Loop: Header=BB71_93 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.95:                               # %for.inc604
                                        #   in Loop: Header=BB71_93 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB71_93
.LBB71_96:                              # %for.end606
                                        #   in Loop: Header=BB71_91 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -12(%rbp)
.LBB71_97:                              # %for.cond625
                                        #   Parent Loop BB71_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB71_100
# %bb.98:                               # %for.body628
                                        #   in Loop: Header=BB71_97 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movslq	-12(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.99:                               # %for.inc654
                                        #   in Loop: Header=BB71_97 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB71_97
.LBB71_100:                             # %for.end656
                                        #   in Loop: Header=BB71_91 Depth=1
	jmp	.LBB71_101
.LBB71_101:                             # %for.inc657
                                        #   in Loop: Header=BB71_91 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB71_91
.LBB71_102:                             # %for.end659
	jmp	.LBB71_103
.LBB71_103:                             # %if.end660
	movl	-132(%rbp), %ebx
	cmpl	$851740232, -148(%rbp)  # imm = 0x32C48648
	jne	.LBB71_105
.LBB71_104:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB71_105:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB71_104
.Lfunc_end71:
	.size	dct_chroma4x4.62, .Lfunc_end71-dct_chroma4x4.62
	.cfi_endproc
                                        # -- End function
	.globl	dct_luma_16x16.63       # -- Begin function dct_luma_16x16.63
	.p2align	4, 0x90
	.type	dct_luma_16x16.63,@function
dct_luma_16x16.63:                      # @dct_luma_16x16.63
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$2280, %rsp             # imm = 0x8E8
	.cfi_offset %rbx, -24
	xorl	%eax, %eax
	movl	$298392591, -132(%rbp)  # imm = 0x11C91C0F
	movl	%edi, -104(%rbp)
	movl	$0, -116(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -128(%rbp)
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -152(%rbp)
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -232(%rbp)
	movq	-128(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	img, %rdx
	addl	72668(%rdx), %ecx
	cmpl	$0, %ecx
	jne	.LBB72_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%al
.LBB72_2:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -68(%rbp)
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -100(%rbp)
	movl	-68(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -112(%rbp)
	movl	$0, -12(%rbp)
.LBB72_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_5 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB72_13
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB72_3 Depth=1
	movl	$0, -16(%rbp)
.LBB72_5:                               # %for.cond16
                                        #   Parent Loop BB72_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB72_11
# %bb.6:                                # %for.body18
                                        #   in Loop: Header=BB72_5 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB72_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB72_5 Depth=2
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB72_9
.LBB72_8:                               # %if.else
                                        #   in Loop: Header=BB72_5 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB72_9:                               # %if.end
                                        #   in Loop: Header=BB72_5 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rdi
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	shlq	$6, %rax
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movl	%ecx, (%rdi,%rax,4)
# %bb.10:                               # %for.inc
                                        #   in Loop: Header=BB72_5 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB72_5
.LBB72_11:                              # %for.end
                                        #   in Loop: Header=BB72_3 Depth=1
	jmp	.LBB72_12
.LBB72_12:                              # %for.inc61
                                        #   in Loop: Header=BB72_3 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB72_3
.LBB72_13:                              # %for.end63
	movl	$0, -20(%rbp)
.LBB72_14:                              # %for.cond64
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_18 Depth 2
                                        #       Child Loop BB72_20 Depth 3
                                        #         Child Loop BB72_22 Depth 4
                                        #       Child Loop BB72_28 Depth 3
                                        #         Child Loop BB72_30 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -20(%rbp)
	jge	.LBB72_16
# %bb.15:                               # %land.rhs67
                                        #   in Loop: Header=BB72_14 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB72_16:                              # %land.end69
                                        #   in Loop: Header=BB72_14 Depth=1
	testb	$1, %al
	jne	.LBB72_17
	jmp	.LBB72_39
.LBB72_17:                              # %for.body71
                                        #   in Loop: Header=BB72_14 Depth=1
	movl	$0, -24(%rbp)
.LBB72_18:                              # %for.cond72
                                        #   Parent Loop BB72_14 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB72_20 Depth 3
                                        #         Child Loop BB72_22 Depth 4
                                        #       Child Loop BB72_28 Depth 3
                                        #         Child Loop BB72_30 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB72_37
# %bb.19:                               # %for.body75
                                        #   in Loop: Header=BB72_18 Depth=2
	movl	$0, -12(%rbp)
.LBB72_20:                              # %for.cond76
                                        #   Parent Loop BB72_14 Depth=1
                                        #     Parent Loop BB72_18 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB72_22 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB72_27
# %bb.21:                               # %for.body79
                                        #   in Loop: Header=BB72_20 Depth=3
	movl	$0, -16(%rbp)
.LBB72_22:                              # %for.cond80
                                        #   Parent Loop BB72_14 Depth=1
                                        #     Parent Loop BB72_18 Depth=2
                                        #       Parent Loop BB72_20 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB72_25
# %bb.23:                               # %for.body83
                                        #   in Loop: Header=BB72_22 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -60(%rbp)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-60(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	movl	%ecx, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-60(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-60(%rbp), %rax
	movl	%ecx, -48(%rbp,%rax,4)
# %bb.24:                               # %for.inc123
                                        #   in Loop: Header=BB72_22 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB72_22
.LBB72_25:                              # %for.end125
                                        #   in Loop: Header=BB72_20 Depth=3
	leaq	-1264(%rbp), %rax
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movq	%rax, %rdx
	addq	$256, %rdx              # imm = 0x100
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	addq	$768, %rax              # imm = 0x300
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.26:                               # %for.inc167
                                        #   in Loop: Header=BB72_20 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB72_20
.LBB72_27:                              # %for.end169
                                        #   in Loop: Header=BB72_18 Depth=2
	movl	$0, -16(%rbp)
.LBB72_28:                              # %for.cond170
                                        #   Parent Loop BB72_14 Depth=1
                                        #     Parent Loop BB72_18 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB72_30 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB72_35
# %bb.29:                               # %for.body173
                                        #   in Loop: Header=BB72_28 Depth=3
	movl	$0, -12(%rbp)
.LBB72_30:                              # %for.cond174
                                        #   Parent Loop BB72_14 Depth=1
                                        #     Parent Loop BB72_18 Depth=2
                                        #       Parent Loop BB72_28 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB72_33
# %bb.31:                               # %for.body177
                                        #   in Loop: Header=BB72_30 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-12(%rbp), %rdx
	movl	%ecx, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-52(%rbp), %rax
	movl	%ecx, -48(%rbp,%rax,4)
# %bb.32:                               # %for.inc217
                                        #   in Loop: Header=BB72_30 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB72_30
.LBB72_33:                              # %for.end219
                                        #   in Loop: Header=BB72_28 Depth=3
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, 32(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, 16(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, 48(%rax,%rdx,4)
# %bb.34:                               # %for.inc262
                                        #   in Loop: Header=BB72_28 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB72_28
.LBB72_35:                              # %for.end264
                                        #   in Loop: Header=BB72_18 Depth=2
	jmp	.LBB72_36
.LBB72_36:                              # %for.inc265
                                        #   in Loop: Header=BB72_18 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB72_18
.LBB72_37:                              # %for.end267
                                        #   in Loop: Header=BB72_14 Depth=1
	jmp	.LBB72_38
.LBB72_38:                              # %for.inc268
                                        #   in Loop: Header=BB72_14 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB72_14
.LBB72_39:                              # %for.end270
	movl	$0, -12(%rbp)
.LBB72_40:                              # %for.cond271
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_42 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB72_47
# %bb.41:                               # %for.body274
                                        #   in Loop: Header=BB72_40 Depth=1
	movl	$0, -16(%rbp)
.LBB72_42:                              # %for.cond275
                                        #   Parent Loop BB72_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB72_45
# %bb.43:                               # %for.body278
                                        #   in Loop: Header=BB72_42 Depth=2
	leaq	-1264(%rbp), %rax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.44:                               # %for.inc289
                                        #   in Loop: Header=BB72_42 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB72_42
.LBB72_45:                              # %for.end291
                                        #   in Loop: Header=BB72_40 Depth=1
	jmp	.LBB72_46
.LBB72_46:                              # %for.inc292
                                        #   in Loop: Header=BB72_40 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB72_40
.LBB72_47:                              # %for.end294
	movl	$0, -12(%rbp)
.LBB72_48:                              # %for.cond295
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_52 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB72_50
# %bb.49:                               # %land.rhs298
                                        #   in Loop: Header=BB72_48 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB72_50:                              # %land.end301
                                        #   in Loop: Header=BB72_48 Depth=1
	testb	$1, %al
	jne	.LBB72_51
	jmp	.LBB72_57
.LBB72_51:                              # %for.body303
                                        #   in Loop: Header=BB72_48 Depth=1
	movl	$0, -16(%rbp)
.LBB72_52:                              # %for.cond304
                                        #   Parent Loop BB72_48 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB72_55
# %bb.53:                               # %for.body307
                                        #   in Loop: Header=BB72_52 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -60(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-60(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-60(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-60(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.54:                               # %for.inc331
                                        #   in Loop: Header=BB72_52 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB72_52
.LBB72_55:                              # %for.end333
                                        #   in Loop: Header=BB72_48 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -224(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -192(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	addl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -208(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.56:                               # %for.inc358
                                        #   in Loop: Header=BB72_48 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB72_48
.LBB72_57:                              # %for.end360
	movl	$0, -16(%rbp)
.LBB72_58:                              # %for.cond361
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_62 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB72_60
# %bb.59:                               # %land.rhs364
                                        #   in Loop: Header=BB72_58 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB72_60:                              # %land.end367
                                        #   in Loop: Header=BB72_58 Depth=1
	testb	$1, %al
	jne	.LBB72_61
	jmp	.LBB72_67
.LBB72_61:                              # %for.body369
                                        #   in Loop: Header=BB72_58 Depth=1
	movl	$0, -12(%rbp)
.LBB72_62:                              # %for.cond370
                                        #   Parent Loop BB72_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB72_65
# %bb.63:                               # %for.body373
                                        #   in Loop: Header=BB72_62 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.64:                               # %for.inc397
                                        #   in Loop: Header=BB72_62 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB72_62
.LBB72_65:                              # %for.end399
                                        #   in Loop: Header=BB72_58 Depth=1
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-224(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-36(%rbp), %ecx
	addl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.66:                               # %for.inc427
                                        #   in Loop: Header=BB72_58 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB72_58
.LBB72_67:                              # %for.end429
	movl	$-1, -80(%rbp)
	movl	$0, -76(%rbp)
	movl	$0, -56(%rbp)
.LBB72_68:                              # %for.cond430
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -56(%rbp)
	jge	.LBB72_88
# %bb.69:                               # %for.body433
                                        #   in Loop: Header=BB72_68 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB72_72
# %bb.70:                               # %lor.lhs.false
                                        #   in Loop: Header=BB72_68 Depth=1
	cmpl	$0, mb_adaptive
	je	.LBB72_73
# %bb.71:                               # %land.lhs.true
                                        #   in Loop: Header=BB72_68 Depth=1
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB72_73
.LBB72_72:                              # %if.then437
                                        #   in Loop: Header=BB72_68 Depth=1
	movslq	-56(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-56(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB72_74
.LBB72_73:                              # %if.else446
                                        #   in Loop: Header=BB72_68 Depth=1
	movslq	-56(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-56(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB72_74:                              # %if.end455
                                        #   in Loop: Header=BB72_68 Depth=1
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB72_76
# %bb.75:                               # %if.then458
                                        #   in Loop: Header=BB72_68 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -64(%rbp)
	jmp	.LBB72_77
.LBB72_76:                              # %if.else463
                                        #   in Loop: Header=BB72_68 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-68(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-112(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -64(%rbp)
.LBB72_77:                              # %if.end481
                                        #   in Loop: Header=BB72_68 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB72_82
# %bb.78:                               # %land.lhs.true484
                                        #   in Loop: Header=BB72_68 Depth=1
	movq	img, %rax
	cmpl	$10, 40(%rax)
	jge	.LBB72_82
# %bb.79:                               # %if.then488
                                        #   in Loop: Header=BB72_68 Depth=1
	cmpl	$2063, -64(%rbp)        # imm = 0x80F
	jle	.LBB72_81
# %bb.80:                               # %if.then491
                                        #   in Loop: Header=BB72_68 Depth=1
	movl	$2063, -64(%rbp)        # imm = 0x80F
.LBB72_81:                              # %if.end492
                                        #   in Loop: Header=BB72_68 Depth=1
	jmp	.LBB72_82
.LBB72_82:                              # %if.end493
                                        #   in Loop: Header=BB72_68 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB72_84
# %bb.83:                               # %if.then496
                                        #   in Loop: Header=BB72_68 Depth=1
	movl	-64(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-152(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	movq	-232(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	movl	$-1, -80(%rbp)
.LBB72_84:                              # %if.end507
                                        #   in Loop: Header=BB72_68 Depth=1
	cmpl	$0, -72(%rbp)
	jne	.LBB72_86
# %bb.85:                               # %if.then509
                                        #   in Loop: Header=BB72_68 Depth=1
	movl	-64(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB72_86:                              # %if.end519
                                        #   in Loop: Header=BB72_68 Depth=1
	jmp	.LBB72_87
.LBB72_87:                              # %for.inc520
                                        #   in Loop: Header=BB72_68 Depth=1
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB72_68
.LBB72_88:                              # %for.end522
	movq	-152(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB72_89:                              # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_93 Depth 2
                                        #     Child Loop BB72_97 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB72_91
# %bb.90:                               # %land.rhs528
                                        #   in Loop: Header=BB72_89 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB72_91:                              # %land.end531
                                        #   in Loop: Header=BB72_89 Depth=1
	testb	$1, %al
	jne	.LBB72_92
	jmp	.LBB72_102
.LBB72_92:                              # %for.body533
                                        #   in Loop: Header=BB72_89 Depth=1
	movl	$0, -16(%rbp)
.LBB72_93:                              # %for.cond534
                                        #   Parent Loop BB72_89 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB72_96
# %bb.94:                               # %for.body537
                                        #   in Loop: Header=BB72_93 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.95:                               # %for.inc544
                                        #   in Loop: Header=BB72_93 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB72_93
.LBB72_96:                              # %for.end546
                                        #   in Loop: Header=BB72_89 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB72_97:                              # %for.cond563
                                        #   Parent Loop BB72_89 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB72_100
# %bb.98:                               # %for.body566
                                        #   in Loop: Header=BB72_97 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -60(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-60(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-60(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movslq	-60(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.99:                               # %for.inc586
                                        #   in Loop: Header=BB72_97 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB72_97
.LBB72_100:                             # %for.end588
                                        #   in Loop: Header=BB72_89 Depth=1
	jmp	.LBB72_101
.LBB72_101:                             # %for.inc589
                                        #   in Loop: Header=BB72_89 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB72_89
.LBB72_102:                             # %for.end591
	movl	$0, -16(%rbp)
.LBB72_103:                             # %for.cond592
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_107 Depth 2
                                        #     Child Loop BB72_111 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB72_105
# %bb.104:                              # %land.rhs595
                                        #   in Loop: Header=BB72_103 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB72_105:                             # %land.end598
                                        #   in Loop: Header=BB72_103 Depth=1
	testb	$1, %al
	jne	.LBB72_106
	jmp	.LBB72_119
.LBB72_106:                             # %for.body600
                                        #   in Loop: Header=BB72_103 Depth=1
	movl	$0, -12(%rbp)
.LBB72_107:                             # %for.cond601
                                        #   Parent Loop BB72_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB72_110
# %bb.108:                              # %for.body604
                                        #   in Loop: Header=BB72_107 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.109:                              # %for.inc611
                                        #   in Loop: Header=BB72_107 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB72_107
.LBB72_110:                             # %for.end613
                                        #   in Loop: Header=BB72_103 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB72_111:                             # %for.cond630
                                        #   Parent Loop BB72_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB72_117
# %bb.112:                              # %for.body633
                                        #   in Loop: Header=BB72_111 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	cmpl	$6, -68(%rbp)
	jge	.LBB72_114
# %bb.113:                              # %if.then637
                                        #   in Loop: Header=BB72_111 Depth=2
	leaq	-1264(%rbp), %r8
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %esi
	movslq	-52(%rbp), %rax
	addl	-96(%rbp,%rax,4), %esi
	movslq	-100(%rbp), %rax
	shlq	$6, %rax
	movabsq	$InvLevelScale4x4Luma_Intra, %rdi
	movq	%rdi, %rcx
	addq	%rax, %rcx
	imull	(%rcx), %esi
	movl	$5, %eax
	movl	$5, %ecx
	subl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r9d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %esi
	movl	$6, %edx
	movl	$6, %ecx
	subl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %esi
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movq	%r8, %rbx
	addq	%rcx, %rbx
	movslq	-12(%rbp), %rcx
	movl	%esi, (%rbx,%rcx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %esi
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %esi
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdi
	imull	(%rdi), %esi
	subl	-68(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r9d
	addl	%r9d, %esi
	subl	-68(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %esi
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r8
	movslq	-52(%rbp), %rax
	movl	%esi, (%r8,%rax,4)
	jmp	.LBB72_115
.LBB72_114:                             # %if.else680
                                        #   in Loop: Header=BB72_111 Depth=2
	leaq	-1264(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-52(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %edx
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rsi
	movq	%rsi, %rdi
	addq	%rcx, %rdi
	imull	(%rdi), %edx
	movl	-68(%rbp), %ecx
	subl	$6, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdi
	addq	%rcx, %rdi
	movslq	-12(%rbp), %rcx
	movl	%edx, (%rdi,%rcx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-68(%rbp), %ecx
	subl	$6, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-52(%rbp), %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB72_115:                             # %if.end717
                                        #   in Loop: Header=BB72_111 Depth=2
	jmp	.LBB72_116
.LBB72_116:                             # %for.inc718
                                        #   in Loop: Header=BB72_111 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB72_111
.LBB72_117:                             # %for.end720
                                        #   in Loop: Header=BB72_103 Depth=1
	jmp	.LBB72_118
.LBB72_118:                             # %for.inc721
                                        #   in Loop: Header=BB72_103 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB72_103
.LBB72_119:                             # %for.end723
	movl	$0, -20(%rbp)
.LBB72_120:                             # %for.cond724
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_122 Depth 2
                                        #       Child Loop BB72_124 Depth 3
                                        #       Child Loop BB72_143 Depth 3
                                        #         Child Loop BB72_147 Depth 4
                                        #         Child Loop BB72_151 Depth 4
                                        #       Child Loop BB72_157 Depth 3
                                        #         Child Loop BB72_161 Depth 4
                                        #         Child Loop BB72_165 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB72_174
# %bb.121:                              # %for.body727
                                        #   in Loop: Header=BB72_120 Depth=1
	movl	$0, -24(%rbp)
.LBB72_122:                             # %for.cond728
                                        #   Parent Loop BB72_120 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB72_124 Depth 3
                                        #       Child Loop BB72_143 Depth 3
                                        #         Child Loop BB72_147 Depth 4
                                        #         Child Loop BB72_151 Depth 4
                                        #       Child Loop BB72_157 Depth 3
                                        #         Child Loop BB72_161 Depth 4
                                        #         Child Loop BB72_165 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB72_172
# %bb.123:                              # %for.body731
                                        #   in Loop: Header=BB72_122 Depth=2
	movl	$-1, -80(%rbp)
	movl	$0, -76(%rbp)
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -108(%rbp)
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-108(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-108(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -240(%rbp)
	movl	$1, -56(%rbp)
.LBB72_124:                             # %for.cond751
                                        #   Parent Loop BB72_120 Depth=1
                                        #     Parent Loop BB72_122 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -56(%rbp)
	jge	.LBB72_142
# %bb.125:                              # %for.body754
                                        #   in Loop: Header=BB72_124 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB72_128
# %bb.126:                              # %lor.lhs.false757
                                        #   in Loop: Header=BB72_124 Depth=3
	cmpl	$0, mb_adaptive
	je	.LBB72_129
# %bb.127:                              # %land.lhs.true759
                                        #   in Loop: Header=BB72_124 Depth=3
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB72_129
.LBB72_128:                             # %if.then762
                                        #   in Loop: Header=BB72_124 Depth=3
	movslq	-56(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-56(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB72_130
.LBB72_129:                             # %if.else771
                                        #   in Loop: Header=BB72_124 Depth=3
	movslq	-56(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-56(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB72_130:                             # %if.end780
                                        #   in Loop: Header=BB72_124 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB72_132
# %bb.131:                              # %if.then783
                                        #   in Loop: Header=BB72_124 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -64(%rbp)
	jmp	.LBB72_133
.LBB72_132:                             # %if.else793
                                        #   in Loop: Header=BB72_124 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-68(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -64(%rbp)
.LBB72_133:                             # %if.end818
                                        #   in Loop: Header=BB72_124 Depth=3
	cmpl	$0, -64(%rbp)
	je	.LBB72_135
# %bb.134:                              # %if.then821
                                        #   in Loop: Header=BB72_124 Depth=3
	movl	$15, -116(%rbp)
	movl	-64(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-144(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	movq	-240(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	movl	$-1, -80(%rbp)
.LBB72_135:                             # %if.end836
                                        #   in Loop: Header=BB72_124 Depth=3
	cmpl	$0, -72(%rbp)
	jne	.LBB72_140
# %bb.136:                              # %if.then838
                                        #   in Loop: Header=BB72_124 Depth=3
	movl	-64(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movl	%eax, -64(%rbp)
	cmpl	$4, -68(%rbp)
	jge	.LBB72_138
# %bb.137:                              # %if.then850
                                        #   in Loop: Header=BB72_124 Depth=3
	movl	-64(%rbp), %eax
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB72_139
.LBB72_138:                             # %if.else871
                                        #   in Loop: Header=BB72_124 Depth=3
	movl	-64(%rbp), %eax
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-68(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB72_139:                             # %if.end889
                                        #   in Loop: Header=BB72_124 Depth=3
	jmp	.LBB72_140
.LBB72_140:                             # %if.end890
                                        #   in Loop: Header=BB72_124 Depth=3
	jmp	.LBB72_141
.LBB72_141:                             # %for.inc891
                                        #   in Loop: Header=BB72_124 Depth=3
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB72_124
.LBB72_142:                             # %for.end893
                                        #   in Loop: Header=BB72_122 Depth=2
	movq	-144(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB72_143:                             # %for.cond896
                                        #   Parent Loop BB72_120 Depth=1
                                        #     Parent Loop BB72_122 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB72_147 Depth 4
                                        #         Child Loop BB72_151 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB72_145
# %bb.144:                              # %land.rhs899
                                        #   in Loop: Header=BB72_143 Depth=3
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB72_145:                             # %land.end902
                                        #   in Loop: Header=BB72_143 Depth=3
	testb	$1, %al
	jne	.LBB72_146
	jmp	.LBB72_156
.LBB72_146:                             # %for.body904
                                        #   in Loop: Header=BB72_143 Depth=3
	movl	$0, -16(%rbp)
.LBB72_147:                             # %for.cond905
                                        #   Parent Loop BB72_120 Depth=1
                                        #     Parent Loop BB72_122 Depth=2
                                        #       Parent Loop BB72_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB72_150
# %bb.148:                              # %for.body908
                                        #   in Loop: Header=BB72_147 Depth=4
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.149:                              # %for.inc919
                                        #   in Loop: Header=BB72_147 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB72_147
.LBB72_150:                             # %for.end921
                                        #   in Loop: Header=BB72_143 Depth=3
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB72_151:                             # %for.cond940
                                        #   Parent Loop BB72_120 Depth=1
                                        #     Parent Loop BB72_122 Depth=2
                                        #       Parent Loop BB72_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB72_154
# %bb.152:                              # %for.body943
                                        #   in Loop: Header=BB72_151 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -60(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ecx
	movslq	-60(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movslq	-16(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-60(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	-60(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.153:                              # %for.inc971
                                        #   in Loop: Header=BB72_151 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB72_151
.LBB72_154:                             # %for.end973
                                        #   in Loop: Header=BB72_143 Depth=3
	jmp	.LBB72_155
.LBB72_155:                             # %for.inc974
                                        #   in Loop: Header=BB72_143 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB72_143
.LBB72_156:                             # %for.end976
                                        #   in Loop: Header=BB72_122 Depth=2
	movl	$0, -16(%rbp)
.LBB72_157:                             # %for.cond977
                                        #   Parent Loop BB72_120 Depth=1
                                        #     Parent Loop BB72_122 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB72_161 Depth 4
                                        #         Child Loop BB72_165 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB72_159
# %bb.158:                              # %land.rhs980
                                        #   in Loop: Header=BB72_157 Depth=3
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB72_159:                             # %land.end983
                                        #   in Loop: Header=BB72_157 Depth=3
	testb	$1, %al
	jne	.LBB72_160
	jmp	.LBB72_170
.LBB72_160:                             # %for.body985
                                        #   in Loop: Header=BB72_157 Depth=3
	movl	$0, -12(%rbp)
.LBB72_161:                             # %for.cond986
                                        #   Parent Loop BB72_120 Depth=1
                                        #     Parent Loop BB72_122 Depth=2
                                        #       Parent Loop BB72_157 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB72_164
# %bb.162:                              # %for.body989
                                        #   in Loop: Header=BB72_161 Depth=4
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.163:                              # %for.inc1000
                                        #   in Loop: Header=BB72_161 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB72_161
.LBB72_164:                             # %for.end1002
                                        #   in Loop: Header=BB72_157 Depth=3
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB72_165:                             # %for.cond1021
                                        #   Parent Loop BB72_120 Depth=1
                                        #     Parent Loop BB72_122 Depth=2
                                        #       Parent Loop BB72_157 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB72_168
# %bb.166:                              # %for.body1024
                                        #   in Loop: Header=BB72_165 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ecx
	movslq	-52(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.167:                              # %for.inc1052
                                        #   in Loop: Header=BB72_165 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB72_165
.LBB72_168:                             # %for.end1054
                                        #   in Loop: Header=BB72_157 Depth=3
	jmp	.LBB72_169
.LBB72_169:                             # %for.inc1055
                                        #   in Loop: Header=BB72_157 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB72_157
.LBB72_170:                             # %for.end1057
                                        #   in Loop: Header=BB72_122 Depth=2
	jmp	.LBB72_171
.LBB72_171:                             # %for.inc1058
                                        #   in Loop: Header=BB72_122 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB72_122
.LBB72_172:                             # %for.end1060
                                        #   in Loop: Header=BB72_120 Depth=1
	jmp	.LBB72_173
.LBB72_173:                             # %for.inc1061
                                        #   in Loop: Header=BB72_120 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB72_120
.LBB72_174:                             # %for.end1063
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB72_184
# %bb.175:                              # %if.then1066
	movl	$0, -12(%rbp)
.LBB72_176:                             # %for.cond1067
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_178 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB72_183
# %bb.177:                              # %for.body1070
                                        #   in Loop: Header=BB72_176 Depth=1
	movl	$0, -16(%rbp)
.LBB72_178:                             # %for.cond1071
                                        #   Parent Loop BB72_176 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB72_181
# %bb.179:                              # %for.body1074
                                        #   in Loop: Header=BB72_178 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.180:                              # %for.inc1091
                                        #   in Loop: Header=BB72_178 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB72_178
.LBB72_181:                             # %for.end1093
                                        #   in Loop: Header=BB72_176 Depth=1
	jmp	.LBB72_182
.LBB72_182:                             # %for.inc1094
                                        #   in Loop: Header=BB72_176 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB72_176
.LBB72_183:                             # %for.end1096
	jmp	.LBB72_196
.LBB72_184:                             # %if.else1097
	movl	$0, -12(%rbp)
.LBB72_185:                             # %for.cond1098
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_187 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB72_195
# %bb.186:                              # %for.body1101
                                        #   in Loop: Header=BB72_185 Depth=1
	movl	$0, -16(%rbp)
.LBB72_187:                             # %for.cond1102
                                        #   Parent Loop BB72_185 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB72_193
# %bb.188:                              # %for.body1105
                                        #   in Loop: Header=BB72_187 Depth=2
	cmpl	$0, -72(%rbp)
	je	.LBB72_190
# %bb.189:                              # %if.then1107
                                        #   in Loop: Header=BB72_187 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB72_191
.LBB72_190:                             # %if.else1125
                                        #   in Loop: Header=BB72_187 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB72_191:                             # %if.end1145
                                        #   in Loop: Header=BB72_187 Depth=2
	jmp	.LBB72_192
.LBB72_192:                             # %for.inc1146
                                        #   in Loop: Header=BB72_187 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB72_187
.LBB72_193:                             # %for.end1148
                                        #   in Loop: Header=BB72_185 Depth=1
	jmp	.LBB72_194
.LBB72_194:                             # %for.inc1149
                                        #   in Loop: Header=BB72_185 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB72_185
.LBB72_195:                             # %for.end1151
	jmp	.LBB72_196
.LBB72_196:                             # %if.end1152
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB72_218
# %bb.197:                              # %if.then1155
	movl	$0, -12(%rbp)
.LBB72_198:                             # %for.cond1156
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_200 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB72_217
# %bb.199:                              # %for.body1159
                                        #   in Loop: Header=BB72_198 Depth=1
	movl	$0, -16(%rbp)
.LBB72_200:                             # %for.cond1160
                                        #   Parent Loop BB72_198 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB72_215
# %bb.201:                              # %for.body1163
                                        #   in Loop: Header=BB72_200 Depth=2
	cmpl	$0, -72(%rbp)
	je	.LBB72_203
# %bb.202:                              # %if.then1165
                                        #   in Loop: Header=BB72_200 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB72_213
.LBB72_203:                             # %if.else1186
                                        #   in Loop: Header=BB72_200 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	leaq	-2288(%rbp), %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movslq	(%rsi,%rdx,4), %rdx
	movq	img, %rsi
	addq	$4792, %rsi             # imm = 0x12B8
	movslq	-104(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-12(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB72_205
# %bb.204:                              # %cond.true
                                        #   in Loop: Header=BB72_200 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB72_206
.LBB72_205:                             # %cond.false
                                        #   in Loop: Header=BB72_200 Depth=2
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movslq	(%rdx,%rcx,4), %rcx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-104(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB72_206:                             # %cond.end
                                        #   in Loop: Header=BB72_200 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB72_208
# %bb.207:                              # %cond.true1226
                                        #   in Loop: Header=BB72_200 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB72_212
.LBB72_208:                             # %cond.false1229
                                        #   in Loop: Header=BB72_200 Depth=2
	xorl	%eax, %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movslq	(%rdx,%rcx,4), %rcx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-104(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB72_210
# %bb.209:                              # %cond.true1249
                                        #   in Loop: Header=BB72_200 Depth=2
	xorl	%eax, %eax
	jmp	.LBB72_211
.LBB72_210:                             # %cond.false1250
                                        #   in Loop: Header=BB72_200 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movslq	(%rcx,%rax,4), %rax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB72_211:                             # %cond.end1268
                                        #   in Loop: Header=BB72_200 Depth=2
.LBB72_212:                             # %cond.end1270
                                        #   in Loop: Header=BB72_200 Depth=2
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB72_213:                             # %if.end1282
                                        #   in Loop: Header=BB72_200 Depth=2
	jmp	.LBB72_214
.LBB72_214:                             # %for.inc1283
                                        #   in Loop: Header=BB72_200 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB72_200
.LBB72_215:                             # %for.end1285
                                        #   in Loop: Header=BB72_198 Depth=1
	jmp	.LBB72_216
.LBB72_216:                             # %for.inc1286
                                        #   in Loop: Header=BB72_198 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB72_198
.LBB72_217:                             # %for.end1288
	jmp	.LBB72_218
.LBB72_218:                             # %if.end1289
	movl	-116(%rbp), %ebx
	cmpl	$298392591, -132(%rbp)  # imm = 0x11C91C0F
	jne	.LBB72_220
.LBB72_219:
	movl	%ebx, %eax
	addq	$2280, %rsp             # imm = 0x8E8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB72_220:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB72_219
.Lfunc_end72:
	.size	dct_luma_16x16.63, .Lfunc_end72-dct_luma_16x16.63
	.cfi_endproc
                                        # -- End function
	.globl	copyblock_sp.64         # -- Begin function copyblock_sp.64
	.p2align	4, 0x90
	.type	copyblock_sp.64,@function
copyblock_sp.64:                        # @copyblock_sp.64
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movl	$626546968, -92(%rbp)   # imm = 0x25585918
	movl	%edi, -76(%rbp)
	movl	%esi, -80(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	-104(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -68(%rbp)
	movq	-104(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -72(%rbp)
	movl	-68(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -84(%rbp)
	movl	-84(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -88(%rbp)
	movl	$0, -4(%rbp)
.LBB73_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB73_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB73_1 Depth=1
	movl	$0, -8(%rbp)
.LBB73_3:                               # %for.cond4
                                        #   Parent Loop BB73_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB73_6
# %bb.4:                                # %for.body6
                                        #   in Loop: Header=BB73_3 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-8(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-4(%rbp), %ecx
	addl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-176(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB73_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_3
.LBB73_6:                               # %for.end
                                        #   in Loop: Header=BB73_1 Depth=1
	jmp	.LBB73_7
.LBB73_7:                               # %for.inc17
                                        #   in Loop: Header=BB73_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_1
.LBB73_8:                               # %for.end19
	movl	$0, -4(%rbp)
.LBB73_9:                               # %for.cond20
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_11 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB73_16
# %bb.10:                               # %for.body23
                                        #   in Loop: Header=BB73_9 Depth=1
	movl	$0, -8(%rbp)
.LBB73_11:                              # %for.cond24
                                        #   Parent Loop BB73_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -8(%rbp)
	jge	.LBB73_14
# %bb.12:                               # %for.body27
                                        #   in Loop: Header=BB73_11 Depth=2
	movl	$3, %eax
	subl	-8(%rbp), %eax
	movl	%eax, -36(%rbp)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-36(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-8(%rbp), %rdx
	movl	%eax, -32(%rbp,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-36(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-36(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.13:                               # %for.inc51
                                        #   in Loop: Header=BB73_11 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_11
.LBB73_14:                              # %for.end53
                                        #   in Loop: Header=BB73_9 Depth=1
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movl	-32(%rbp), %eax
	subl	-28(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -160(%rbp,%rcx,4)
	movl	-20(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
# %bb.15:                               # %for.inc79
                                        #   in Loop: Header=BB73_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_9
.LBB73_16:                              # %for.end81
	movl	$0, -8(%rbp)
.LBB73_17:                              # %for.cond82
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_19 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB73_24
# %bb.18:                               # %for.body85
                                        #   in Loop: Header=BB73_17 Depth=1
	movl	$0, -4(%rbp)
.LBB73_19:                              # %for.cond86
                                        #   Parent Loop BB73_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB73_22
# %bb.20:                               # %for.body89
                                        #   in Loop: Header=BB73_19 Depth=2
	movl	$3, %eax
	subl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-4(%rbp), %rdx
	movl	%eax, -32(%rbp,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.21:                               # %for.inc113
                                        #   in Loop: Header=BB73_19 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_19
.LBB73_22:                              # %for.end115
                                        #   in Loop: Header=BB73_17 Depth=1
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-176(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-32(%rbp), %ecx
	subl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	-24(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-20(%rbp), %ecx
	movl	-24(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.23:                               # %for.inc142
                                        #   in Loop: Header=BB73_17 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_17
.LBB73_24:                              # %for.end144
	movl	$0, -4(%rbp)
.LBB73_25:                              # %for.cond145
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_27 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB73_32
# %bb.26:                               # %for.body148
                                        #   in Loop: Header=BB73_25 Depth=1
	movl	$0, -8(%rbp)
.LBB73_27:                              # %for.cond149
                                        #   Parent Loop BB73_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB73_30
# %bb.28:                               # %for.body152
                                        #   in Loop: Header=BB73_27 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-72(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-88(%rbp), %eax
	movl	-84(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-176(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	(%rdx,%rcx,4), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-72(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.29:                               # %for.inc182
                                        #   in Loop: Header=BB73_27 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_27
.LBB73_30:                              # %for.end184
                                        #   in Loop: Header=BB73_25 Depth=1
	jmp	.LBB73_31
.LBB73_31:                              # %for.inc185
                                        #   in Loop: Header=BB73_25 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_25
.LBB73_32:                              # %for.end187
	movl	$0, -4(%rbp)
.LBB73_33:                              # %for.cond188
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_35 Depth 2
                                        #     Child Loop BB73_39 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB73_44
# %bb.34:                               # %for.body191
                                        #   in Loop: Header=BB73_33 Depth=1
	movl	$0, -8(%rbp)
.LBB73_35:                              # %for.cond192
                                        #   Parent Loop BB73_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB73_38
# %bb.36:                               # %for.body195
                                        #   in Loop: Header=BB73_35 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.37:                               # %for.inc203
                                        #   in Loop: Header=BB73_35 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_35
.LBB73_38:                              # %for.end205
                                        #   in Loop: Header=BB73_33 Depth=1
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-32(%rbp), %eax
	subl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	sarl	$1, %eax
	subl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	movl	-20(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -8(%rbp)
.LBB73_39:                              # %for.cond224
                                        #   Parent Loop BB73_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -8(%rbp)
	jge	.LBB73_42
# %bb.40:                               # %for.body227
                                        #   in Loop: Header=BB73_39 Depth=2
	movl	$3, %eax
	subl	-8(%rbp), %eax
	movl	%eax, -36(%rbp)
	movslq	-8(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-36(%rbp), %rcx
	addl	-64(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-36(%rbp), %rcx
	subl	-64(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-36(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.41:                               # %for.inc249
                                        #   in Loop: Header=BB73_39 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_39
.LBB73_42:                              # %for.end251
                                        #   in Loop: Header=BB73_33 Depth=1
	jmp	.LBB73_43
.LBB73_43:                              # %for.inc252
                                        #   in Loop: Header=BB73_33 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_33
.LBB73_44:                              # %for.end254
	movl	$0, -8(%rbp)
.LBB73_45:                              # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_47 Depth 2
                                        #     Child Loop BB73_51 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB73_74
# %bb.46:                               # %for.body258
                                        #   in Loop: Header=BB73_45 Depth=1
	movl	$0, -4(%rbp)
.LBB73_47:                              # %for.cond259
                                        #   Parent Loop BB73_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB73_50
# %bb.48:                               # %for.body262
                                        #   in Loop: Header=BB73_47 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.49:                               # %for.inc270
                                        #   in Loop: Header=BB73_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_47
.LBB73_50:                              # %for.end272
                                        #   in Loop: Header=BB73_45 Depth=1
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-32(%rbp), %eax
	subl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	sarl	$1, %eax
	subl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	movl	-20(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -4(%rbp)
.LBB73_51:                              # %for.cond291
                                        #   Parent Loop BB73_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB73_72
# %bb.52:                               # %for.body294
                                        #   in Loop: Header=BB73_51 Depth=2
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-4(%rbp), %rdx
	movl	-64(%rbp,%rdx,4), %edx
	movslq	-12(%rbp), %rsi
	addl	-64(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB73_54
# %bb.53:                               # %cond.true
                                        #   in Loop: Header=BB73_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB73_55
.LBB73_54:                              # %cond.false
                                        #   in Loop: Header=BB73_51 Depth=2
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	addl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB73_55:                              # %cond.end
                                        #   in Loop: Header=BB73_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB73_57
# %bb.56:                               # %cond.true314
                                        #   in Loop: Header=BB73_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB73_61
.LBB73_57:                              # %cond.false316
                                        #   in Loop: Header=BB73_51 Depth=2
	xorl	%eax, %eax
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	addl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB73_59
# %bb.58:                               # %cond.true326
                                        #   in Loop: Header=BB73_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB73_60
.LBB73_59:                              # %cond.false327
                                        #   in Loop: Header=BB73_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-64(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB73_60:                              # %cond.end335
                                        #   in Loop: Header=BB73_51 Depth=2
.LBB73_61:                              # %cond.end337
                                        #   in Loop: Header=BB73_51 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-4(%rbp), %rdx
	movl	-64(%rbp,%rdx,4), %edx
	movslq	-12(%rbp), %rsi
	subl	-64(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB73_63
# %bb.62:                               # %cond.true354
                                        #   in Loop: Header=BB73_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB73_64
.LBB73_63:                              # %cond.false355
                                        #   in Loop: Header=BB73_51 Depth=2
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	subl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB73_64:                              # %cond.end363
                                        #   in Loop: Header=BB73_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB73_66
# %bb.65:                               # %cond.true367
                                        #   in Loop: Header=BB73_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB73_70
.LBB73_66:                              # %cond.false369
                                        #   in Loop: Header=BB73_51 Depth=2
	xorl	%eax, %eax
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	subl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB73_68
# %bb.67:                               # %cond.true379
                                        #   in Loop: Header=BB73_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB73_69
.LBB73_68:                              # %cond.false380
                                        #   in Loop: Header=BB73_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-64(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB73_69:                              # %cond.end388
                                        #   in Loop: Header=BB73_51 Depth=2
.LBB73_70:                              # %cond.end390
                                        #   in Loop: Header=BB73_51 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.71:                               # %for.inc397
                                        #   in Loop: Header=BB73_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_51
.LBB73_72:                              # %for.end399
                                        #   in Loop: Header=BB73_45 Depth=1
	jmp	.LBB73_73
.LBB73_73:                              # %for.inc400
                                        #   in Loop: Header=BB73_45 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_45
.LBB73_74:                              # %for.end402
	movl	$0, -4(%rbp)
.LBB73_75:                              # %for.cond403
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_77 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB73_82
# %bb.76:                               # %for.body406
                                        #   in Loop: Header=BB73_75 Depth=1
	movl	$0, -8(%rbp)
.LBB73_77:                              # %for.cond407
                                        #   Parent Loop BB73_75 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB73_80
# %bb.78:                               # %for.body410
                                        #   in Loop: Header=BB73_77 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-80(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-76(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.79:                               # %for.inc425
                                        #   in Loop: Header=BB73_77 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_77
.LBB73_80:                              # %for.end427
                                        #   in Loop: Header=BB73_75 Depth=1
	jmp	.LBB73_81
.LBB73_81:                              # %for.inc428
                                        #   in Loop: Header=BB73_75 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_75
.LBB73_82:                              # %for.end430
	cmpl	$626546968, -92(%rbp)   # imm = 0x25585918
	jne	.LBB73_84
.LBB73_83:
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB73_84:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB73_83
.Lfunc_end73:
	.size	copyblock_sp.64, .Lfunc_end73-copyblock_sp.64
	.cfi_endproc
                                        # -- End function
	.globl	dct_luma_16x16.65       # -- Begin function dct_luma_16x16.65
	.p2align	4, 0x90
	.type	dct_luma_16x16.65,@function
dct_luma_16x16.65:                      # @dct_luma_16x16.65
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$2280, %rsp             # imm = 0x8E8
	.cfi_offset %rbx, -24
	xorl	%eax, %eax
	movl	$685115995, -132(%rbp)  # imm = 0x28D60A5B
	movl	%edi, -104(%rbp)
	movl	$0, -108(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -128(%rbp)
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -144(%rbp)
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -232(%rbp)
	movq	-128(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	img, %rdx
	addl	72668(%rdx), %ecx
	cmpl	$0, %ecx
	jne	.LBB74_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%al
.LBB74_2:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -68(%rbp)
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -100(%rbp)
	movl	-68(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -112(%rbp)
	movl	$0, -12(%rbp)
.LBB74_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_5 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB74_13
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB74_3 Depth=1
	movl	$0, -16(%rbp)
.LBB74_5:                               # %for.cond16
                                        #   Parent Loop BB74_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB74_11
# %bb.6:                                # %for.body18
                                        #   in Loop: Header=BB74_5 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB74_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB74_5 Depth=2
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB74_9
.LBB74_8:                               # %if.else
                                        #   in Loop: Header=BB74_5 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB74_9:                               # %if.end
                                        #   in Loop: Header=BB74_5 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rdi
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	shlq	$6, %rax
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movl	%ecx, (%rdi,%rax,4)
# %bb.10:                               # %for.inc
                                        #   in Loop: Header=BB74_5 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB74_5
.LBB74_11:                              # %for.end
                                        #   in Loop: Header=BB74_3 Depth=1
	jmp	.LBB74_12
.LBB74_12:                              # %for.inc61
                                        #   in Loop: Header=BB74_3 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_3
.LBB74_13:                              # %for.end63
	movl	$0, -20(%rbp)
.LBB74_14:                              # %for.cond64
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_18 Depth 2
                                        #       Child Loop BB74_20 Depth 3
                                        #         Child Loop BB74_22 Depth 4
                                        #       Child Loop BB74_28 Depth 3
                                        #         Child Loop BB74_30 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -20(%rbp)
	jge	.LBB74_16
# %bb.15:                               # %land.rhs67
                                        #   in Loop: Header=BB74_14 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB74_16:                              # %land.end69
                                        #   in Loop: Header=BB74_14 Depth=1
	testb	$1, %al
	jne	.LBB74_17
	jmp	.LBB74_39
.LBB74_17:                              # %for.body71
                                        #   in Loop: Header=BB74_14 Depth=1
	movl	$0, -24(%rbp)
.LBB74_18:                              # %for.cond72
                                        #   Parent Loop BB74_14 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB74_20 Depth 3
                                        #         Child Loop BB74_22 Depth 4
                                        #       Child Loop BB74_28 Depth 3
                                        #         Child Loop BB74_30 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB74_37
# %bb.19:                               # %for.body75
                                        #   in Loop: Header=BB74_18 Depth=2
	movl	$0, -12(%rbp)
.LBB74_20:                              # %for.cond76
                                        #   Parent Loop BB74_14 Depth=1
                                        #     Parent Loop BB74_18 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB74_22 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB74_27
# %bb.21:                               # %for.body79
                                        #   in Loop: Header=BB74_20 Depth=3
	movl	$0, -16(%rbp)
.LBB74_22:                              # %for.cond80
                                        #   Parent Loop BB74_14 Depth=1
                                        #     Parent Loop BB74_18 Depth=2
                                        #       Parent Loop BB74_20 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB74_25
# %bb.23:                               # %for.body83
                                        #   in Loop: Header=BB74_22 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -60(%rbp)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-60(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	movl	%ecx, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-60(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-60(%rbp), %rax
	movl	%ecx, -48(%rbp,%rax,4)
# %bb.24:                               # %for.inc123
                                        #   in Loop: Header=BB74_22 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB74_22
.LBB74_25:                              # %for.end125
                                        #   in Loop: Header=BB74_20 Depth=3
	leaq	-1264(%rbp), %rax
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movq	%rax, %rdx
	addq	$256, %rdx              # imm = 0x100
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	addq	$768, %rax              # imm = 0x300
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.26:                               # %for.inc167
                                        #   in Loop: Header=BB74_20 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_20
.LBB74_27:                              # %for.end169
                                        #   in Loop: Header=BB74_18 Depth=2
	movl	$0, -16(%rbp)
.LBB74_28:                              # %for.cond170
                                        #   Parent Loop BB74_14 Depth=1
                                        #     Parent Loop BB74_18 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB74_30 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB74_35
# %bb.29:                               # %for.body173
                                        #   in Loop: Header=BB74_28 Depth=3
	movl	$0, -12(%rbp)
.LBB74_30:                              # %for.cond174
                                        #   Parent Loop BB74_14 Depth=1
                                        #     Parent Loop BB74_18 Depth=2
                                        #       Parent Loop BB74_28 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB74_33
# %bb.31:                               # %for.body177
                                        #   in Loop: Header=BB74_30 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-12(%rbp), %rdx
	movl	%ecx, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-52(%rbp), %rax
	movl	%ecx, -48(%rbp,%rax,4)
# %bb.32:                               # %for.inc217
                                        #   in Loop: Header=BB74_30 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_30
.LBB74_33:                              # %for.end219
                                        #   in Loop: Header=BB74_28 Depth=3
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, 32(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, 16(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, 48(%rax,%rdx,4)
# %bb.34:                               # %for.inc262
                                        #   in Loop: Header=BB74_28 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB74_28
.LBB74_35:                              # %for.end264
                                        #   in Loop: Header=BB74_18 Depth=2
	jmp	.LBB74_36
.LBB74_36:                              # %for.inc265
                                        #   in Loop: Header=BB74_18 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB74_18
.LBB74_37:                              # %for.end267
                                        #   in Loop: Header=BB74_14 Depth=1
	jmp	.LBB74_38
.LBB74_38:                              # %for.inc268
                                        #   in Loop: Header=BB74_14 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB74_14
.LBB74_39:                              # %for.end270
	movl	$0, -12(%rbp)
.LBB74_40:                              # %for.cond271
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_42 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB74_47
# %bb.41:                               # %for.body274
                                        #   in Loop: Header=BB74_40 Depth=1
	movl	$0, -16(%rbp)
.LBB74_42:                              # %for.cond275
                                        #   Parent Loop BB74_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB74_45
# %bb.43:                               # %for.body278
                                        #   in Loop: Header=BB74_42 Depth=2
	leaq	-1264(%rbp), %rax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.44:                               # %for.inc289
                                        #   in Loop: Header=BB74_42 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB74_42
.LBB74_45:                              # %for.end291
                                        #   in Loop: Header=BB74_40 Depth=1
	jmp	.LBB74_46
.LBB74_46:                              # %for.inc292
                                        #   in Loop: Header=BB74_40 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_40
.LBB74_47:                              # %for.end294
	movl	$0, -12(%rbp)
.LBB74_48:                              # %for.cond295
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_52 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB74_50
# %bb.49:                               # %land.rhs298
                                        #   in Loop: Header=BB74_48 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB74_50:                              # %land.end301
                                        #   in Loop: Header=BB74_48 Depth=1
	testb	$1, %al
	jne	.LBB74_51
	jmp	.LBB74_57
.LBB74_51:                              # %for.body303
                                        #   in Loop: Header=BB74_48 Depth=1
	movl	$0, -16(%rbp)
.LBB74_52:                              # %for.cond304
                                        #   Parent Loop BB74_48 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB74_55
# %bb.53:                               # %for.body307
                                        #   in Loop: Header=BB74_52 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -60(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-60(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-60(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-60(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.54:                               # %for.inc331
                                        #   in Loop: Header=BB74_52 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB74_52
.LBB74_55:                              # %for.end333
                                        #   in Loop: Header=BB74_48 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -224(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -192(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	addl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -208(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.56:                               # %for.inc358
                                        #   in Loop: Header=BB74_48 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_48
.LBB74_57:                              # %for.end360
	movl	$0, -16(%rbp)
.LBB74_58:                              # %for.cond361
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_62 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB74_60
# %bb.59:                               # %land.rhs364
                                        #   in Loop: Header=BB74_58 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB74_60:                              # %land.end367
                                        #   in Loop: Header=BB74_58 Depth=1
	testb	$1, %al
	jne	.LBB74_61
	jmp	.LBB74_67
.LBB74_61:                              # %for.body369
                                        #   in Loop: Header=BB74_58 Depth=1
	movl	$0, -12(%rbp)
.LBB74_62:                              # %for.cond370
                                        #   Parent Loop BB74_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB74_65
# %bb.63:                               # %for.body373
                                        #   in Loop: Header=BB74_62 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.64:                               # %for.inc397
                                        #   in Loop: Header=BB74_62 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_62
.LBB74_65:                              # %for.end399
                                        #   in Loop: Header=BB74_58 Depth=1
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-224(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-36(%rbp), %ecx
	addl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.66:                               # %for.inc427
                                        #   in Loop: Header=BB74_58 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB74_58
.LBB74_67:                              # %for.end429
	movl	$-1, -80(%rbp)
	movl	$0, -76(%rbp)
	movl	$0, -56(%rbp)
.LBB74_68:                              # %for.cond430
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -56(%rbp)
	jge	.LBB74_88
# %bb.69:                               # %for.body433
                                        #   in Loop: Header=BB74_68 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB74_72
# %bb.70:                               # %lor.lhs.false
                                        #   in Loop: Header=BB74_68 Depth=1
	cmpl	$0, mb_adaptive
	je	.LBB74_73
# %bb.71:                               # %land.lhs.true
                                        #   in Loop: Header=BB74_68 Depth=1
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB74_73
.LBB74_72:                              # %if.then437
                                        #   in Loop: Header=BB74_68 Depth=1
	movslq	-56(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-56(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_74
.LBB74_73:                              # %if.else446
                                        #   in Loop: Header=BB74_68 Depth=1
	movslq	-56(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-56(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB74_74:                              # %if.end455
                                        #   in Loop: Header=BB74_68 Depth=1
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB74_76
# %bb.75:                               # %if.then458
                                        #   in Loop: Header=BB74_68 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -64(%rbp)
	jmp	.LBB74_77
.LBB74_76:                              # %if.else463
                                        #   in Loop: Header=BB74_68 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-68(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-112(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -64(%rbp)
.LBB74_77:                              # %if.end481
                                        #   in Loop: Header=BB74_68 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB74_82
# %bb.78:                               # %land.lhs.true484
                                        #   in Loop: Header=BB74_68 Depth=1
	movq	img, %rax
	cmpl	$10, 40(%rax)
	jge	.LBB74_82
# %bb.79:                               # %if.then488
                                        #   in Loop: Header=BB74_68 Depth=1
	cmpl	$2063, -64(%rbp)        # imm = 0x80F
	jle	.LBB74_81
# %bb.80:                               # %if.then491
                                        #   in Loop: Header=BB74_68 Depth=1
	movl	$2063, -64(%rbp)        # imm = 0x80F
.LBB74_81:                              # %if.end492
                                        #   in Loop: Header=BB74_68 Depth=1
	jmp	.LBB74_82
.LBB74_82:                              # %if.end493
                                        #   in Loop: Header=BB74_68 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB74_84
# %bb.83:                               # %if.then496
                                        #   in Loop: Header=BB74_68 Depth=1
	movl	-64(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-144(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	movq	-232(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	movl	$-1, -80(%rbp)
.LBB74_84:                              # %if.end507
                                        #   in Loop: Header=BB74_68 Depth=1
	cmpl	$0, -72(%rbp)
	jne	.LBB74_86
# %bb.85:                               # %if.then509
                                        #   in Loop: Header=BB74_68 Depth=1
	movl	-64(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB74_86:                              # %if.end519
                                        #   in Loop: Header=BB74_68 Depth=1
	jmp	.LBB74_87
.LBB74_87:                              # %for.inc520
                                        #   in Loop: Header=BB74_68 Depth=1
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB74_68
.LBB74_88:                              # %for.end522
	movq	-144(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB74_89:                              # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_93 Depth 2
                                        #     Child Loop BB74_97 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB74_91
# %bb.90:                               # %land.rhs528
                                        #   in Loop: Header=BB74_89 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB74_91:                              # %land.end531
                                        #   in Loop: Header=BB74_89 Depth=1
	testb	$1, %al
	jne	.LBB74_92
	jmp	.LBB74_102
.LBB74_92:                              # %for.body533
                                        #   in Loop: Header=BB74_89 Depth=1
	movl	$0, -16(%rbp)
.LBB74_93:                              # %for.cond534
                                        #   Parent Loop BB74_89 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB74_96
# %bb.94:                               # %for.body537
                                        #   in Loop: Header=BB74_93 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.95:                               # %for.inc544
                                        #   in Loop: Header=BB74_93 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB74_93
.LBB74_96:                              # %for.end546
                                        #   in Loop: Header=BB74_89 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB74_97:                              # %for.cond563
                                        #   Parent Loop BB74_89 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB74_100
# %bb.98:                               # %for.body566
                                        #   in Loop: Header=BB74_97 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -60(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-60(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-60(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movslq	-60(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.99:                               # %for.inc586
                                        #   in Loop: Header=BB74_97 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB74_97
.LBB74_100:                             # %for.end588
                                        #   in Loop: Header=BB74_89 Depth=1
	jmp	.LBB74_101
.LBB74_101:                             # %for.inc589
                                        #   in Loop: Header=BB74_89 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_89
.LBB74_102:                             # %for.end591
	movl	$0, -16(%rbp)
.LBB74_103:                             # %for.cond592
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_107 Depth 2
                                        #     Child Loop BB74_111 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB74_105
# %bb.104:                              # %land.rhs595
                                        #   in Loop: Header=BB74_103 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB74_105:                             # %land.end598
                                        #   in Loop: Header=BB74_103 Depth=1
	testb	$1, %al
	jne	.LBB74_106
	jmp	.LBB74_119
.LBB74_106:                             # %for.body600
                                        #   in Loop: Header=BB74_103 Depth=1
	movl	$0, -12(%rbp)
.LBB74_107:                             # %for.cond601
                                        #   Parent Loop BB74_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB74_110
# %bb.108:                              # %for.body604
                                        #   in Loop: Header=BB74_107 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.109:                              # %for.inc611
                                        #   in Loop: Header=BB74_107 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_107
.LBB74_110:                             # %for.end613
                                        #   in Loop: Header=BB74_103 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB74_111:                             # %for.cond630
                                        #   Parent Loop BB74_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB74_117
# %bb.112:                              # %for.body633
                                        #   in Loop: Header=BB74_111 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	cmpl	$6, -68(%rbp)
	jge	.LBB74_114
# %bb.113:                              # %if.then637
                                        #   in Loop: Header=BB74_111 Depth=2
	leaq	-1264(%rbp), %r8
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %esi
	movslq	-52(%rbp), %rax
	addl	-96(%rbp,%rax,4), %esi
	movslq	-100(%rbp), %rax
	shlq	$6, %rax
	movabsq	$InvLevelScale4x4Luma_Intra, %rdi
	movq	%rdi, %rcx
	addq	%rax, %rcx
	imull	(%rcx), %esi
	movl	$5, %eax
	movl	$5, %ecx
	subl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r9d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %esi
	movl	$6, %edx
	movl	$6, %ecx
	subl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %esi
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movq	%r8, %rbx
	addq	%rcx, %rbx
	movslq	-12(%rbp), %rcx
	movl	%esi, (%rbx,%rcx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %esi
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %esi
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdi
	imull	(%rdi), %esi
	subl	-68(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r9d
	addl	%r9d, %esi
	subl	-68(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %esi
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r8
	movslq	-52(%rbp), %rax
	movl	%esi, (%r8,%rax,4)
	jmp	.LBB74_115
.LBB74_114:                             # %if.else680
                                        #   in Loop: Header=BB74_111 Depth=2
	leaq	-1264(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-52(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %edx
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rsi
	movq	%rsi, %rdi
	addq	%rcx, %rdi
	imull	(%rdi), %edx
	movl	-68(%rbp), %ecx
	subl	$6, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdi
	addq	%rcx, %rdi
	movslq	-12(%rbp), %rcx
	movl	%edx, (%rdi,%rcx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-68(%rbp), %ecx
	subl	$6, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-52(%rbp), %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB74_115:                             # %if.end717
                                        #   in Loop: Header=BB74_111 Depth=2
	jmp	.LBB74_116
.LBB74_116:                             # %for.inc718
                                        #   in Loop: Header=BB74_111 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_111
.LBB74_117:                             # %for.end720
                                        #   in Loop: Header=BB74_103 Depth=1
	jmp	.LBB74_118
.LBB74_118:                             # %for.inc721
                                        #   in Loop: Header=BB74_103 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB74_103
.LBB74_119:                             # %for.end723
	movl	$0, -20(%rbp)
.LBB74_120:                             # %for.cond724
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_122 Depth 2
                                        #       Child Loop BB74_124 Depth 3
                                        #       Child Loop BB74_143 Depth 3
                                        #         Child Loop BB74_147 Depth 4
                                        #         Child Loop BB74_151 Depth 4
                                        #       Child Loop BB74_157 Depth 3
                                        #         Child Loop BB74_161 Depth 4
                                        #         Child Loop BB74_165 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB74_174
# %bb.121:                              # %for.body727
                                        #   in Loop: Header=BB74_120 Depth=1
	movl	$0, -24(%rbp)
.LBB74_122:                             # %for.cond728
                                        #   Parent Loop BB74_120 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB74_124 Depth 3
                                        #       Child Loop BB74_143 Depth 3
                                        #         Child Loop BB74_147 Depth 4
                                        #         Child Loop BB74_151 Depth 4
                                        #       Child Loop BB74_157 Depth 3
                                        #         Child Loop BB74_161 Depth 4
                                        #         Child Loop BB74_165 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB74_172
# %bb.123:                              # %for.body731
                                        #   in Loop: Header=BB74_122 Depth=2
	movl	$-1, -80(%rbp)
	movl	$0, -76(%rbp)
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -116(%rbp)
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -152(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -240(%rbp)
	movl	$1, -56(%rbp)
.LBB74_124:                             # %for.cond751
                                        #   Parent Loop BB74_120 Depth=1
                                        #     Parent Loop BB74_122 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -56(%rbp)
	jge	.LBB74_142
# %bb.125:                              # %for.body754
                                        #   in Loop: Header=BB74_124 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB74_128
# %bb.126:                              # %lor.lhs.false757
                                        #   in Loop: Header=BB74_124 Depth=3
	cmpl	$0, mb_adaptive
	je	.LBB74_129
# %bb.127:                              # %land.lhs.true759
                                        #   in Loop: Header=BB74_124 Depth=3
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB74_129
.LBB74_128:                             # %if.then762
                                        #   in Loop: Header=BB74_124 Depth=3
	movslq	-56(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-56(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_130
.LBB74_129:                             # %if.else771
                                        #   in Loop: Header=BB74_124 Depth=3
	movslq	-56(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-56(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB74_130:                             # %if.end780
                                        #   in Loop: Header=BB74_124 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB74_132
# %bb.131:                              # %if.then783
                                        #   in Loop: Header=BB74_124 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -64(%rbp)
	jmp	.LBB74_133
.LBB74_132:                             # %if.else793
                                        #   in Loop: Header=BB74_124 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-68(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -64(%rbp)
.LBB74_133:                             # %if.end818
                                        #   in Loop: Header=BB74_124 Depth=3
	cmpl	$0, -64(%rbp)
	je	.LBB74_135
# %bb.134:                              # %if.then821
                                        #   in Loop: Header=BB74_124 Depth=3
	movl	$15, -108(%rbp)
	movl	-64(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-152(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	movq	-240(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	movl	$-1, -80(%rbp)
.LBB74_135:                             # %if.end836
                                        #   in Loop: Header=BB74_124 Depth=3
	cmpl	$0, -72(%rbp)
	jne	.LBB74_140
# %bb.136:                              # %if.then838
                                        #   in Loop: Header=BB74_124 Depth=3
	movl	-64(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movl	%eax, -64(%rbp)
	cmpl	$4, -68(%rbp)
	jge	.LBB74_138
# %bb.137:                              # %if.then850
                                        #   in Loop: Header=BB74_124 Depth=3
	movl	-64(%rbp), %eax
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB74_139
.LBB74_138:                             # %if.else871
                                        #   in Loop: Header=BB74_124 Depth=3
	movl	-64(%rbp), %eax
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-68(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB74_139:                             # %if.end889
                                        #   in Loop: Header=BB74_124 Depth=3
	jmp	.LBB74_140
.LBB74_140:                             # %if.end890
                                        #   in Loop: Header=BB74_124 Depth=3
	jmp	.LBB74_141
.LBB74_141:                             # %for.inc891
                                        #   in Loop: Header=BB74_124 Depth=3
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB74_124
.LBB74_142:                             # %for.end893
                                        #   in Loop: Header=BB74_122 Depth=2
	movq	-152(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB74_143:                             # %for.cond896
                                        #   Parent Loop BB74_120 Depth=1
                                        #     Parent Loop BB74_122 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB74_147 Depth 4
                                        #         Child Loop BB74_151 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB74_145
# %bb.144:                              # %land.rhs899
                                        #   in Loop: Header=BB74_143 Depth=3
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB74_145:                             # %land.end902
                                        #   in Loop: Header=BB74_143 Depth=3
	testb	$1, %al
	jne	.LBB74_146
	jmp	.LBB74_156
.LBB74_146:                             # %for.body904
                                        #   in Loop: Header=BB74_143 Depth=3
	movl	$0, -16(%rbp)
.LBB74_147:                             # %for.cond905
                                        #   Parent Loop BB74_120 Depth=1
                                        #     Parent Loop BB74_122 Depth=2
                                        #       Parent Loop BB74_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB74_150
# %bb.148:                              # %for.body908
                                        #   in Loop: Header=BB74_147 Depth=4
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.149:                              # %for.inc919
                                        #   in Loop: Header=BB74_147 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB74_147
.LBB74_150:                             # %for.end921
                                        #   in Loop: Header=BB74_143 Depth=3
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB74_151:                             # %for.cond940
                                        #   Parent Loop BB74_120 Depth=1
                                        #     Parent Loop BB74_122 Depth=2
                                        #       Parent Loop BB74_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB74_154
# %bb.152:                              # %for.body943
                                        #   in Loop: Header=BB74_151 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -60(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ecx
	movslq	-60(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movslq	-16(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-60(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	-60(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.153:                              # %for.inc971
                                        #   in Loop: Header=BB74_151 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB74_151
.LBB74_154:                             # %for.end973
                                        #   in Loop: Header=BB74_143 Depth=3
	jmp	.LBB74_155
.LBB74_155:                             # %for.inc974
                                        #   in Loop: Header=BB74_143 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_143
.LBB74_156:                             # %for.end976
                                        #   in Loop: Header=BB74_122 Depth=2
	movl	$0, -16(%rbp)
.LBB74_157:                             # %for.cond977
                                        #   Parent Loop BB74_120 Depth=1
                                        #     Parent Loop BB74_122 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB74_161 Depth 4
                                        #         Child Loop BB74_165 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB74_159
# %bb.158:                              # %land.rhs980
                                        #   in Loop: Header=BB74_157 Depth=3
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB74_159:                             # %land.end983
                                        #   in Loop: Header=BB74_157 Depth=3
	testb	$1, %al
	jne	.LBB74_160
	jmp	.LBB74_170
.LBB74_160:                             # %for.body985
                                        #   in Loop: Header=BB74_157 Depth=3
	movl	$0, -12(%rbp)
.LBB74_161:                             # %for.cond986
                                        #   Parent Loop BB74_120 Depth=1
                                        #     Parent Loop BB74_122 Depth=2
                                        #       Parent Loop BB74_157 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB74_164
# %bb.162:                              # %for.body989
                                        #   in Loop: Header=BB74_161 Depth=4
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.163:                              # %for.inc1000
                                        #   in Loop: Header=BB74_161 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_161
.LBB74_164:                             # %for.end1002
                                        #   in Loop: Header=BB74_157 Depth=3
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB74_165:                             # %for.cond1021
                                        #   Parent Loop BB74_120 Depth=1
                                        #     Parent Loop BB74_122 Depth=2
                                        #       Parent Loop BB74_157 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB74_168
# %bb.166:                              # %for.body1024
                                        #   in Loop: Header=BB74_165 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ecx
	movslq	-52(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.167:                              # %for.inc1052
                                        #   in Loop: Header=BB74_165 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_165
.LBB74_168:                             # %for.end1054
                                        #   in Loop: Header=BB74_157 Depth=3
	jmp	.LBB74_169
.LBB74_169:                             # %for.inc1055
                                        #   in Loop: Header=BB74_157 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB74_157
.LBB74_170:                             # %for.end1057
                                        #   in Loop: Header=BB74_122 Depth=2
	jmp	.LBB74_171
.LBB74_171:                             # %for.inc1058
                                        #   in Loop: Header=BB74_122 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB74_122
.LBB74_172:                             # %for.end1060
                                        #   in Loop: Header=BB74_120 Depth=1
	jmp	.LBB74_173
.LBB74_173:                             # %for.inc1061
                                        #   in Loop: Header=BB74_120 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB74_120
.LBB74_174:                             # %for.end1063
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB74_184
# %bb.175:                              # %if.then1066
	movl	$0, -12(%rbp)
.LBB74_176:                             # %for.cond1067
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_178 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB74_183
# %bb.177:                              # %for.body1070
                                        #   in Loop: Header=BB74_176 Depth=1
	movl	$0, -16(%rbp)
.LBB74_178:                             # %for.cond1071
                                        #   Parent Loop BB74_176 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB74_181
# %bb.179:                              # %for.body1074
                                        #   in Loop: Header=BB74_178 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.180:                              # %for.inc1091
                                        #   in Loop: Header=BB74_178 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB74_178
.LBB74_181:                             # %for.end1093
                                        #   in Loop: Header=BB74_176 Depth=1
	jmp	.LBB74_182
.LBB74_182:                             # %for.inc1094
                                        #   in Loop: Header=BB74_176 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_176
.LBB74_183:                             # %for.end1096
	jmp	.LBB74_196
.LBB74_184:                             # %if.else1097
	movl	$0, -12(%rbp)
.LBB74_185:                             # %for.cond1098
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_187 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB74_195
# %bb.186:                              # %for.body1101
                                        #   in Loop: Header=BB74_185 Depth=1
	movl	$0, -16(%rbp)
.LBB74_187:                             # %for.cond1102
                                        #   Parent Loop BB74_185 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB74_193
# %bb.188:                              # %for.body1105
                                        #   in Loop: Header=BB74_187 Depth=2
	cmpl	$0, -72(%rbp)
	je	.LBB74_190
# %bb.189:                              # %if.then1107
                                        #   in Loop: Header=BB74_187 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB74_191
.LBB74_190:                             # %if.else1125
                                        #   in Loop: Header=BB74_187 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB74_191:                             # %if.end1145
                                        #   in Loop: Header=BB74_187 Depth=2
	jmp	.LBB74_192
.LBB74_192:                             # %for.inc1146
                                        #   in Loop: Header=BB74_187 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB74_187
.LBB74_193:                             # %for.end1148
                                        #   in Loop: Header=BB74_185 Depth=1
	jmp	.LBB74_194
.LBB74_194:                             # %for.inc1149
                                        #   in Loop: Header=BB74_185 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_185
.LBB74_195:                             # %for.end1151
	jmp	.LBB74_196
.LBB74_196:                             # %if.end1152
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB74_218
# %bb.197:                              # %if.then1155
	movl	$0, -12(%rbp)
.LBB74_198:                             # %for.cond1156
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_200 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB74_217
# %bb.199:                              # %for.body1159
                                        #   in Loop: Header=BB74_198 Depth=1
	movl	$0, -16(%rbp)
.LBB74_200:                             # %for.cond1160
                                        #   Parent Loop BB74_198 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB74_215
# %bb.201:                              # %for.body1163
                                        #   in Loop: Header=BB74_200 Depth=2
	cmpl	$0, -72(%rbp)
	je	.LBB74_203
# %bb.202:                              # %if.then1165
                                        #   in Loop: Header=BB74_200 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB74_213
.LBB74_203:                             # %if.else1186
                                        #   in Loop: Header=BB74_200 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	leaq	-2288(%rbp), %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movslq	(%rsi,%rdx,4), %rdx
	movq	img, %rsi
	addq	$4792, %rsi             # imm = 0x12B8
	movslq	-104(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-12(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB74_205
# %bb.204:                              # %cond.true
                                        #   in Loop: Header=BB74_200 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB74_206
.LBB74_205:                             # %cond.false
                                        #   in Loop: Header=BB74_200 Depth=2
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movslq	(%rdx,%rcx,4), %rcx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-104(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB74_206:                             # %cond.end
                                        #   in Loop: Header=BB74_200 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB74_208
# %bb.207:                              # %cond.true1226
                                        #   in Loop: Header=BB74_200 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB74_212
.LBB74_208:                             # %cond.false1229
                                        #   in Loop: Header=BB74_200 Depth=2
	xorl	%eax, %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movslq	(%rdx,%rcx,4), %rcx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-104(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB74_210
# %bb.209:                              # %cond.true1249
                                        #   in Loop: Header=BB74_200 Depth=2
	xorl	%eax, %eax
	jmp	.LBB74_211
.LBB74_210:                             # %cond.false1250
                                        #   in Loop: Header=BB74_200 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movslq	(%rcx,%rax,4), %rax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB74_211:                             # %cond.end1268
                                        #   in Loop: Header=BB74_200 Depth=2
.LBB74_212:                             # %cond.end1270
                                        #   in Loop: Header=BB74_200 Depth=2
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB74_213:                             # %if.end1282
                                        #   in Loop: Header=BB74_200 Depth=2
	jmp	.LBB74_214
.LBB74_214:                             # %for.inc1283
                                        #   in Loop: Header=BB74_200 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB74_200
.LBB74_215:                             # %for.end1285
                                        #   in Loop: Header=BB74_198 Depth=1
	jmp	.LBB74_216
.LBB74_216:                             # %for.inc1286
                                        #   in Loop: Header=BB74_198 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_198
.LBB74_217:                             # %for.end1288
	jmp	.LBB74_218
.LBB74_218:                             # %if.end1289
	movl	-108(%rbp), %ebx
	cmpl	$685115995, -132(%rbp)  # imm = 0x28D60A5B
	jne	.LBB74_220
.LBB74_219:
	movl	%ebx, %eax
	addq	$2280, %rsp             # imm = 0x8E8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB74_220:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB74_219
.Lfunc_end74:
	.size	dct_luma_16x16.65, .Lfunc_end74-dct_luma_16x16.65
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function dct_chroma_sp.66
.LCPI75_0:
	.quad	4616189618054758400     # double 4
.LCPI75_1:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI75_2:
	.quad	4611686018427387904     # double 2
.LCPI75_3:
	.quad	4613937818241073152     # double 3
	.text
	.globl	dct_chroma_sp.66
	.p2align	4, 0x90
	.type	dct_chroma_sp.66,@function
dct_chroma_sp.66:                       # @dct_chroma_sp.66
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$552, %rsp              # imm = 0x228
	.cfi_offset %rbx, -24
	vmovsd	.LCPI75_2(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI75_3(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$1835217481, -268(%rbp) # imm = 0x6D633249
	movl	%edi, -120(%rbp)
	movl	%esi, -208(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -200(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -288(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -296(%rbp)
	movq	-200(%rbp), %rax
	movl	12(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI75_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI75_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmulsd	%xmm0, %xmm2, %xmm0
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -264(%rbp)
	movq	-200(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB75_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB75_6
.LBB75_2:                               # %cond.false
	movq	-200(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB75_4
# %bb.3:                                # %cond.true18
	movl	$51, %eax
	jmp	.LBB75_5
.LBB75_4:                               # %cond.false19
	movq	-200(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
.LBB75_5:                               # %cond.end
.LBB75_6:                               # %cond.end23
	movl	%eax, -148(%rbp)
	movq	-200(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB75_8
# %bb.7:                                # %cond.true29
	xorl	%eax, %eax
	jmp	.LBB75_12
.LBB75_8:                               # %cond.false30
	movq	-200(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB75_10
# %bb.9:                                # %cond.true36
	movl	$51, %eax
	jmp	.LBB75_11
.LBB75_10:                              # %cond.false37
	movq	-200(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
.LBB75_11:                              # %cond.end41
.LBB75_12:                              # %cond.end43
	movl	%eax, -216(%rbp)
	cmpl	$0, -148(%rbp)
	jge	.LBB75_14
# %bb.13:                               # %cond.true47
	movl	-148(%rbp), %eax
	jmp	.LBB75_15
.LBB75_14:                              # %cond.false48
	movslq	-148(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB75_15:                              # %cond.end52
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -112(%rbp)
	cmpl	$0, -148(%rbp)
	jge	.LBB75_17
# %bb.16:                               # %cond.true58
	movl	-148(%rbp), %eax
	jmp	.LBB75_18
.LBB75_17:                              # %cond.false59
	movslq	-148(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB75_18:                              # %cond.end63
	subl	$0, %eax
	cltd
	movl	$6, %esi
	idivl	%esi
	movl	%edx, -96(%rbp)
	movl	-112(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -204(%rbp)
	movl	-204(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	idivl	%esi
	movl	%eax, -220(%rbp)
	cmpl	$0, -216(%rbp)
	jge	.LBB75_20
# %bb.19:                               # %cond.true70
	movq	-200(%rbp), %rax
	movl	16(%rax), %eax
	jmp	.LBB75_21
.LBB75_20:                              # %cond.false72
	movslq	-216(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB75_21:                              # %cond.end76
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -232(%rbp)
	cmpl	$0, -216(%rbp)
	jge	.LBB75_23
# %bb.22:                               # %cond.true82
	movq	-200(%rbp), %rax
	movl	16(%rax), %eax
	jmp	.LBB75_24
.LBB75_23:                              # %cond.false84
	movslq	-216(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB75_24:                              # %cond.end88
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%edx, -108(%rbp)
	movl	-232(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -124(%rbp)
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -224(%rbp)
	movl	$0, -12(%rbp)
.LBB75_25:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_27 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB75_32
# %bb.26:                               # %for.body
                                        #   in Loop: Header=BB75_25 Depth=1
	movl	$0, -16(%rbp)
.LBB75_27:                              # %for.cond97
                                        #   Parent Loop BB75_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB75_30
# %bb.28:                               # %for.body100
                                        #   in Loop: Header=BB75_27 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.29:                               # %for.inc
                                        #   in Loop: Header=BB75_27 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB75_27
.LBB75_30:                              # %for.end
                                        #   in Loop: Header=BB75_25 Depth=1
	jmp	.LBB75_31
.LBB75_31:                              # %for.inc121
                                        #   in Loop: Header=BB75_25 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_25
.LBB75_32:                              # %for.end123
	movl	$0, -20(%rbp)
.LBB75_33:                              # %for.cond124
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_35 Depth 2
                                        #       Child Loop BB75_37 Depth 3
                                        #         Child Loop BB75_39 Depth 4
                                        #       Child Loop BB75_45 Depth 3
                                        #         Child Loop BB75_47 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB75_56
# %bb.34:                               # %for.body127
                                        #   in Loop: Header=BB75_33 Depth=1
	movl	$0, -24(%rbp)
.LBB75_35:                              # %for.cond128
                                        #   Parent Loop BB75_33 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB75_37 Depth 3
                                        #         Child Loop BB75_39 Depth 4
                                        #       Child Loop BB75_45 Depth 3
                                        #         Child Loop BB75_47 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB75_54
# %bb.36:                               # %for.body131
                                        #   in Loop: Header=BB75_35 Depth=2
	movl	$0, -12(%rbp)
.LBB75_37:                              # %for.cond132
                                        #   Parent Loop BB75_33 Depth=1
                                        #     Parent Loop BB75_35 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB75_39 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB75_44
# %bb.38:                               # %for.body135
                                        #   in Loop: Header=BB75_37 Depth=3
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -16(%rbp)
.LBB75_39:                              # %for.cond137
                                        #   Parent Loop BB75_33 Depth=1
                                        #     Parent Loop BB75_35 Depth=2
                                        #       Parent Loop BB75_37 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB75_42
# %bb.40:                               # %for.body140
                                        #   in Loop: Header=BB75_39 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-52(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-84(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-52(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-84(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-84(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.41:                               # %for.inc172
                                        #   in Loop: Header=BB75_39 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB75_39
.LBB75_42:                              # %for.end174
                                        #   in Loop: Header=BB75_37 Depth=3
	movl	-80(%rbp), %eax
	addl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	subl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	shll	$1, %eax
	addl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	movl	-72(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.43:                               # %for.inc212
                                        #   in Loop: Header=BB75_37 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_37
.LBB75_44:                              # %for.end214
                                        #   in Loop: Header=BB75_35 Depth=2
	movl	$0, -16(%rbp)
.LBB75_45:                              # %for.cond215
                                        #   Parent Loop BB75_33 Depth=1
                                        #     Parent Loop BB75_35 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB75_47 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB75_52
# %bb.46:                               # %for.body218
                                        #   in Loop: Header=BB75_45 Depth=3
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	$0, -12(%rbp)
.LBB75_47:                              # %for.cond220
                                        #   Parent Loop BB75_33 Depth=1
                                        #     Parent Loop BB75_35 Depth=2
                                        #       Parent Loop BB75_45 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB75_50
# %bb.48:                               # %for.body223
                                        #   in Loop: Header=BB75_47 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-48(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-48(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-56(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-48(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-48(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-56(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-56(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.49:                               # %for.inc255
                                        #   in Loop: Header=BB75_47 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_47
.LBB75_50:                              # %for.end257
                                        #   in Loop: Header=BB75_45 Depth=3
	movl	-80(%rbp), %eax
	addl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-48(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	subl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-48(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	shll	$1, %eax
	addl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-48(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	movl	-72(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-48(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.51:                               # %for.inc296
                                        #   in Loop: Header=BB75_45 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB75_45
.LBB75_52:                              # %for.end298
                                        #   in Loop: Header=BB75_35 Depth=2
	jmp	.LBB75_53
.LBB75_53:                              # %for.inc299
                                        #   in Loop: Header=BB75_35 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB75_35
.LBB75_54:                              # %for.end301
                                        #   in Loop: Header=BB75_33 Depth=1
	jmp	.LBB75_55
.LBB75_55:                              # %for.inc302
                                        #   in Loop: Header=BB75_33 Depth=1
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB75_33
.LBB75_56:                              # %for.end304
	movl	$0, -20(%rbp)
.LBB75_57:                              # %for.cond305
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_59 Depth 2
                                        #       Child Loop BB75_61 Depth 3
                                        #         Child Loop BB75_63 Depth 4
                                        #       Child Loop BB75_69 Depth 3
                                        #         Child Loop BB75_71 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB75_80
# %bb.58:                               # %for.body308
                                        #   in Loop: Header=BB75_57 Depth=1
	movl	$0, -24(%rbp)
.LBB75_59:                              # %for.cond309
                                        #   Parent Loop BB75_57 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB75_61 Depth 3
                                        #         Child Loop BB75_63 Depth 4
                                        #       Child Loop BB75_69 Depth 3
                                        #         Child Loop BB75_71 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB75_78
# %bb.60:                               # %for.body312
                                        #   in Loop: Header=BB75_59 Depth=2
	movl	$0, -12(%rbp)
.LBB75_61:                              # %for.cond313
                                        #   Parent Loop BB75_57 Depth=1
                                        #     Parent Loop BB75_59 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB75_63 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB75_68
# %bb.62:                               # %for.body316
                                        #   in Loop: Header=BB75_61 Depth=3
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -16(%rbp)
.LBB75_63:                              # %for.cond318
                                        #   Parent Loop BB75_57 Depth=1
                                        #     Parent Loop BB75_59 Depth=2
                                        #       Parent Loop BB75_61 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB75_66
# %bb.64:                               # %for.body321
                                        #   in Loop: Header=BB75_63 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
	movslq	%eax, %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-52(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movl	-84(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	movl	%ecx, -80(%rbp,%rdx,4)
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-52(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movl	-84(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-52(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-84(%rbp), %rax
	movl	%ecx, -80(%rbp,%rax,4)
# %bb.65:                               # %for.inc349
                                        #   in Loop: Header=BB75_63 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB75_63
.LBB75_66:                              # %for.end351
                                        #   in Loop: Header=BB75_61 Depth=3
	movl	-80(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	leaq	-560(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-80(%rbp), %ecx
	subl	-76(%rbp), %ecx
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	shll	$1, %ecx
	addl	-72(%rbp), %ecx
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-52(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.67:                               # %for.inc385
                                        #   in Loop: Header=BB75_61 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_61
.LBB75_68:                              # %for.end387
                                        #   in Loop: Header=BB75_59 Depth=2
	movl	$0, -16(%rbp)
.LBB75_69:                              # %for.cond388
                                        #   Parent Loop BB75_57 Depth=1
                                        #     Parent Loop BB75_59 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB75_71 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB75_76
# %bb.70:                               # %for.body391
                                        #   in Loop: Header=BB75_69 Depth=3
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	$0, -12(%rbp)
.LBB75_71:                              # %for.cond393
                                        #   Parent Loop BB75_57 Depth=1
                                        #     Parent Loop BB75_59 Depth=2
                                        #       Parent Loop BB75_69 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB75_74
# %bb.72:                               # %for.body396
                                        #   in Loop: Header=BB75_71 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-48(%rbp), %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-48(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-20(%rbp), %edx
	addl	-56(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-12(%rbp), %rdx
	movl	%ecx, -80(%rbp,%rdx,4)
	movslq	-48(%rbp), %rcx
	shlq	$5, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-48(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movl	-20(%rbp), %edx
	addl	-56(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-56(%rbp), %rax
	movl	%ecx, -80(%rbp,%rax,4)
# %bb.73:                               # %for.inc424
                                        #   in Loop: Header=BB75_71 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_71
.LBB75_74:                              # %for.end426
                                        #   in Loop: Header=BB75_69 Depth=3
	movl	-80(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	-48(%rbp), %rdx
	shlq	$5, %rdx
	leaq	-560(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-20(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-80(%rbp), %ecx
	subl	-76(%rbp), %ecx
	movslq	-48(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-20(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	shll	$1, %ecx
	addl	-72(%rbp), %ecx
	movslq	-48(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-20(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-48(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movl	-20(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.75:                               # %for.inc461
                                        #   in Loop: Header=BB75_69 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB75_69
.LBB75_76:                              # %for.end463
                                        #   in Loop: Header=BB75_59 Depth=2
	jmp	.LBB75_77
.LBB75_77:                              # %for.inc464
                                        #   in Loop: Header=BB75_59 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB75_59
.LBB75_78:                              # %for.end466
                                        #   in Loop: Header=BB75_57 Depth=1
	jmp	.LBB75_79
.LBB75_79:                              # %for.inc467
                                        #   in Loop: Header=BB75_57 Depth=1
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB75_57
.LBB75_80:                              # %for.end469
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -176(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -172(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -168(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -164(%rbp)
	movl	-560(%rbp), %eax
	addl	-432(%rbp), %eax
	addl	-544(%rbp), %eax
	addl	-416(%rbp), %eax
	movl	%eax, -256(%rbp)
	movl	-560(%rbp), %eax
	subl	-432(%rbp), %eax
	addl	-544(%rbp), %eax
	subl	-416(%rbp), %eax
	movl	%eax, -252(%rbp)
	movl	-560(%rbp), %eax
	addl	-432(%rbp), %eax
	subl	-544(%rbp), %eax
	subl	-416(%rbp), %eax
	movl	%eax, -248(%rbp)
	movl	-560(%rbp), %eax
	subl	-432(%rbp), %eax
	subl	-544(%rbp), %eax
	addl	-416(%rbp), %eax
	movl	%eax, -244(%rbp)
	movl	$-1, -60(%rbp)
	movl	$0, -92(%rbp)
	movl	$0, -32(%rbp)
.LBB75_81:                              # %for.cond582
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -32(%rbp)
	jge	.LBB75_120
# %bb.82:                               # %for.body585
                                        #   in Loop: Header=BB75_81 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -88(%rbp)
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-224(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-124(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	movl	-124(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	cltd
	idivl	(%rsi)
	movl	%eax, -40(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-40(%rbp), %edi
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -40(%rbp)
	movl	-40(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-220(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-204(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %eax
	movslq	-32(%rbp), %rcx
	subl	-256(%rbp,%rcx,4), %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-220(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-204(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	je	.LBB75_98
# %bb.83:                               # %land.lhs.true
                                        #   in Loop: Header=BB75_81 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB75_98
# %bb.84:                               # %land.lhs.true640
                                        #   in Loop: Header=BB75_81 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB75_98
# %bb.85:                               # %if.then
                                        #   in Loop: Header=BB75_81 Depth=1
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-28(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	subl	%eax, %ebx
	movslq	-32(%rbp), %rax
	subl	-256(%rbp,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	movl	-28(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-116(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_c2x2
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-184(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-116(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-44(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	subl	%eax, %ebx
	movslq	-32(%rbp), %rax
	subl	-256(%rbp,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp)
	movl	-44(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-116(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_c2x2
	vmovsd	-192(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-192(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-116(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp)
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-192(%rbp), %xmm0
	jne	.LBB75_90
	jp	.LBB75_90
# %bb.86:                               # %if.then685
                                        #   in Loop: Header=BB75_81 Depth=1
	movl	-28(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB75_88
# %bb.87:                               # %cond.true690
                                        #   in Loop: Header=BB75_81 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB75_89
.LBB75_88:                              # %cond.false691
                                        #   in Loop: Header=BB75_81 Depth=1
	movl	-44(%rbp), %eax
.LBB75_89:                              # %cond.end692
                                        #   in Loop: Header=BB75_81 Depth=1
	movl	%eax, -36(%rbp)
	jmp	.LBB75_94
.LBB75_90:                              # %if.else
                                        #   in Loop: Header=BB75_81 Depth=1
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-192(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB75_92
# %bb.91:                               # %if.then696
                                        #   in Loop: Header=BB75_81 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB75_93
.LBB75_92:                              # %if.else697
                                        #   in Loop: Header=BB75_81 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB75_93:                              # %if.end
                                        #   in Loop: Header=BB75_81 Depth=1
	jmp	.LBB75_94
.LBB75_94:                              # %if.end698
                                        #   in Loop: Header=BB75_81 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB75_96
# %bb.95:                               # %cond.true701
                                        #   in Loop: Header=BB75_81 Depth=1
	movl	-40(%rbp), %eax
	jmp	.LBB75_97
.LBB75_96:                              # %cond.false702
                                        #   in Loop: Header=BB75_81 Depth=1
	movl	-104(%rbp), %eax
.LBB75_97:                              # %cond.end703
                                        #   in Loop: Header=BB75_81 Depth=1
	movl	%eax, -100(%rbp)
	jmp	.LBB75_108
.LBB75_98:                              # %if.else705
                                        #   in Loop: Header=BB75_81 Depth=1
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jne	.LBB75_100
# %bb.99:                               # %if.then708
                                        #   in Loop: Header=BB75_81 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB75_107
.LBB75_100:                             # %if.else709
                                        #   in Loop: Header=BB75_81 Depth=1
	cmpl	$0, -28(%rbp)
	jne	.LBB75_102
# %bb.101:                              # %cond.true712
                                        #   in Loop: Header=BB75_81 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB75_103
.LBB75_102:                             # %cond.false713
                                        #   in Loop: Header=BB75_81 Depth=1
	movl	-44(%rbp), %eax
.LBB75_103:                             # %cond.end714
                                        #   in Loop: Header=BB75_81 Depth=1
	movl	%eax, -36(%rbp)
	cmpl	$0, -28(%rbp)
	jne	.LBB75_105
# %bb.104:                              # %cond.true718
                                        #   in Loop: Header=BB75_81 Depth=1
	movl	-40(%rbp), %eax
	jmp	.LBB75_106
.LBB75_105:                             # %cond.false719
                                        #   in Loop: Header=BB75_81 Depth=1
	movl	-104(%rbp), %eax
.LBB75_106:                             # %cond.end720
                                        #   in Loop: Header=BB75_81 Depth=1
	movl	%eax, -100(%rbp)
.LBB75_107:                             # %if.end722
                                        #   in Loop: Header=BB75_81 Depth=1
	jmp	.LBB75_108
.LBB75_108:                             # %if.end723
                                        #   in Loop: Header=BB75_81 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB75_113
# %bb.109:                              # %land.lhs.true726
                                        #   in Loop: Header=BB75_81 Depth=1
	movq	img, %rax
	cmpl	$4, 40(%rax)
	jge	.LBB75_113
# %bb.110:                              # %if.then730
                                        #   in Loop: Header=BB75_81 Depth=1
	cmpl	$2063, -36(%rbp)        # imm = 0x80F
	jle	.LBB75_112
# %bb.111:                              # %if.then733
                                        #   in Loop: Header=BB75_81 Depth=1
	movl	$2063, -36(%rbp)        # imm = 0x80F
.LBB75_112:                             # %if.end734
                                        #   in Loop: Header=BB75_81 Depth=1
	jmp	.LBB75_113
.LBB75_113:                             # %if.end735
                                        #   in Loop: Header=BB75_81 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB75_118
# %bb.114:                              # %if.then738
                                        #   in Loop: Header=BB75_81 Depth=1
	movl	-120(%rbp), %ecx
	shll	$2, %ecx
                                        # kill: def $cl killed $ecx
	movl	$983040, %eax           # imm = 0xF0000
	shll	%cl, %eax
	cltq
	movq	-200(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-208(%rbp), %eax
	jle	.LBB75_116
# %bb.115:                              # %cond.true744
                                        #   in Loop: Header=BB75_81 Depth=1
	movl	$1, %eax
	jmp	.LBB75_117
.LBB75_116:                             # %cond.false745
                                        #   in Loop: Header=BB75_81 Depth=1
	movl	-208(%rbp), %eax
.LBB75_117:                             # %cond.end746
                                        #   in Loop: Header=BB75_81 Depth=1
	movl	%eax, -208(%rbp)
	movl	-36(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movq	-288(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-60(%rbp), %eax
	movq	-296(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	movl	$-1, -60(%rbp)
	movl	-36(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	movl	%eax, -88(%rbp)
.LBB75_118:                             # %if.end763
                                        #   in Loop: Header=BB75_81 Depth=1
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-224(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-124(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-88(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-232(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.119:                              # %for.inc786
                                        #   in Loop: Header=BB75_81 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB75_81
.LBB75_120:                             # %for.end788
	movq	-288(%rbp), %rax
	movslq	-92(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13112(%rdx)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13368(%rdx)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13128(%rdx)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 13384(%rcx)
	movl	$0, -212(%rbp)
	movl	$0, -236(%rbp)
	movl	$0, -20(%rbp)
.LBB75_121:                             # %for.cond835
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_123 Depth 2
                                        #       Child Loop BB75_125 Depth 3
	cmpl	$4, -20(%rbp)
	jg	.LBB75_168
# %bb.122:                              # %for.body838
                                        #   in Loop: Header=BB75_121 Depth=1
	movl	$0, -24(%rbp)
.LBB75_123:                             # %for.cond839
                                        #   Parent Loop BB75_121 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB75_125 Depth 3
	cmpl	$4, -24(%rbp)
	jg	.LBB75_166
# %bb.124:                              # %for.body842
                                        #   in Loop: Header=BB75_123 Depth=2
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -240(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-240(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -280(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-240(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -304(%rbp)
	movl	$-1, -60(%rbp)
	movl	$0, -92(%rbp)
	movl	$1, -32(%rbp)
.LBB75_125:                             # %for.cond860
                                        #   Parent Loop BB75_121 Depth=1
                                        #     Parent Loop BB75_123 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -32(%rbp)
	jge	.LBB75_164
# %bb.126:                              # %for.body863
                                        #   in Loop: Header=BB75_125 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB75_129
# %bb.127:                              # %lor.lhs.false
                                        #   in Loop: Header=BB75_125 Depth=3
	cmpl	$0, mb_adaptive
	je	.LBB75_130
# %bb.128:                              # %land.lhs.true865
                                        #   in Loop: Header=BB75_125 Depth=3
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB75_130
.LBB75_129:                             # %if.then867
                                        #   in Loop: Header=BB75_125 Depth=3
	movslq	-32(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-32(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_131
.LBB75_130:                             # %if.else876
                                        #   in Loop: Header=BB75_125 Depth=3
	movslq	-32(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-32(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB75_131:                             # %if.end885
                                        #   in Loop: Header=BB75_125 Depth=3
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -88(%rbp)
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-224(%rbp), %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	cltd
	idivl	(%rsi,%rcx,4)
	movl	%eax, -40(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-40(%rbp), %edi
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -40(%rbp)
	movl	-40(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-220(%rbp), %eax
	movl	-204(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	subl	(%rdx,%rcx,4), %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-220(%rbp), %eax
	movl	-204(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	je	.LBB75_147
# %bb.132:                              # %land.lhs.true962
                                        #   in Loop: Header=BB75_125 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB75_147
# %bb.133:                              # %land.lhs.true965
                                        #   in Loop: Header=BB75_125 Depth=3
	cmpl	$0, -44(%rbp)
	je	.LBB75_147
# %bb.134:                              # %if.then968
                                        #   in Loop: Header=BB75_125 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-28(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	movl	-28(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-116(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-184(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-116(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-44(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp)
	movl	-44(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-116(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-192(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-192(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-116(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp)
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-192(%rbp), %xmm0
	jne	.LBB75_139
	jp	.LBB75_139
# %bb.135:                              # %if.then1041
                                        #   in Loop: Header=BB75_125 Depth=3
	movl	-28(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB75_137
# %bb.136:                              # %cond.true1046
                                        #   in Loop: Header=BB75_125 Depth=3
	movl	-28(%rbp), %eax
	jmp	.LBB75_138
.LBB75_137:                             # %cond.false1047
                                        #   in Loop: Header=BB75_125 Depth=3
	movl	-44(%rbp), %eax
.LBB75_138:                             # %cond.end1048
                                        #   in Loop: Header=BB75_125 Depth=3
	movl	%eax, -36(%rbp)
	jmp	.LBB75_143
.LBB75_139:                             # %if.else1050
                                        #   in Loop: Header=BB75_125 Depth=3
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-192(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB75_141
# %bb.140:                              # %if.then1053
                                        #   in Loop: Header=BB75_125 Depth=3
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB75_142
.LBB75_141:                             # %if.else1054
                                        #   in Loop: Header=BB75_125 Depth=3
	movl	-44(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB75_142:                             # %if.end1055
                                        #   in Loop: Header=BB75_125 Depth=3
	jmp	.LBB75_143
.LBB75_143:                             # %if.end1056
                                        #   in Loop: Header=BB75_125 Depth=3
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB75_145
# %bb.144:                              # %cond.true1059
                                        #   in Loop: Header=BB75_125 Depth=3
	movl	-40(%rbp), %eax
	jmp	.LBB75_146
.LBB75_145:                             # %cond.false1060
                                        #   in Loop: Header=BB75_125 Depth=3
	movl	-104(%rbp), %eax
.LBB75_146:                             # %cond.end1061
                                        #   in Loop: Header=BB75_125 Depth=3
	movl	%eax, -100(%rbp)
	jmp	.LBB75_157
.LBB75_147:                             # %if.else1063
                                        #   in Loop: Header=BB75_125 Depth=3
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jne	.LBB75_149
# %bb.148:                              # %if.then1066
                                        #   in Loop: Header=BB75_125 Depth=3
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB75_156
.LBB75_149:                             # %if.else1067
                                        #   in Loop: Header=BB75_125 Depth=3
	cmpl	$0, -28(%rbp)
	jne	.LBB75_151
# %bb.150:                              # %cond.true1070
                                        #   in Loop: Header=BB75_125 Depth=3
	movl	-28(%rbp), %eax
	jmp	.LBB75_152
.LBB75_151:                             # %cond.false1071
                                        #   in Loop: Header=BB75_125 Depth=3
	movl	-44(%rbp), %eax
.LBB75_152:                             # %cond.end1072
                                        #   in Loop: Header=BB75_125 Depth=3
	movl	%eax, -36(%rbp)
	cmpl	$0, -28(%rbp)
	jne	.LBB75_154
# %bb.153:                              # %cond.true1076
                                        #   in Loop: Header=BB75_125 Depth=3
	movl	-40(%rbp), %eax
	jmp	.LBB75_155
.LBB75_154:                             # %cond.false1077
                                        #   in Loop: Header=BB75_125 Depth=3
	movl	-104(%rbp), %eax
.LBB75_155:                             # %cond.end1078
                                        #   in Loop: Header=BB75_125 Depth=3
	movl	%eax, -100(%rbp)
.LBB75_156:                             # %if.end1080
                                        #   in Loop: Header=BB75_125 Depth=3
	jmp	.LBB75_157
.LBB75_157:                             # %if.end1081
                                        #   in Loop: Header=BB75_125 Depth=3
	cmpl	$0, -36(%rbp)
	je	.LBB75_162
# %bb.158:                              # %if.then1084
                                        #   in Loop: Header=BB75_125 Depth=3
	movl	-120(%rbp), %ecx
	shll	$2, %ecx
	addl	$16, %ecx
	movl	-20(%rbp), %eax
	sarl	$1, %eax
	movl	-24(%rbp), %edx
	sarl	$2, %edx
	addl	%edx, %eax
	addl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-200(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	cmpl	$1, -36(%rbp)
	jle	.LBB75_160
# %bb.159:                              # %if.then1097
                                        #   in Loop: Header=BB75_125 Depth=3
	movl	-212(%rbp), %eax
	addl	$999999, %eax           # imm = 0xF423F
	movl	%eax, -212(%rbp)
	jmp	.LBB75_161
.LBB75_160:                             # %if.else1099
                                        #   in Loop: Header=BB75_125 Depth=3
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-60(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	-212(%rbp), %eax
	movl	%eax, -212(%rbp)
.LBB75_161:                             # %if.end1106
                                        #   in Loop: Header=BB75_125 Depth=3
	movl	$2, -236(%rbp)
	movl	-36(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movq	-280(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-60(%rbp), %eax
	movq	-304(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	movl	$-1, -60(%rbp)
	movl	-36(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	movl	%eax, -88(%rbp)
.LBB75_162:                             # %if.end1128
                                        #   in Loop: Header=BB75_125 Depth=3
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-224(%rbp), %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-88(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-232(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.163:                              # %for.inc1162
                                        #   in Loop: Header=BB75_125 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB75_125
.LBB75_164:                             # %for.end1164
                                        #   in Loop: Header=BB75_123 Depth=2
	movq	-280(%rbp), %rax
	movslq	-92(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.165:                              # %for.inc1167
                                        #   in Loop: Header=BB75_123 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB75_123
.LBB75_166:                             # %for.end1169
                                        #   in Loop: Header=BB75_121 Depth=1
	jmp	.LBB75_167
.LBB75_167:                             # %for.inc1170
                                        #   in Loop: Header=BB75_121 Depth=1
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB75_121
.LBB75_168:                             # %for.end1172
	cmpl	$2, -236(%rbp)
	jne	.LBB75_170
# %bb.169:                              # %if.then1175
	movl	$2, -208(%rbp)
.LBB75_170:                             # %if.end1176
	movl	$0, -20(%rbp)
.LBB75_171:                             # %for.cond1177
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_173 Depth 2
                                        #       Child Loop BB75_175 Depth 3
                                        #         Child Loop BB75_177 Depth 4
                                        #         Child Loop BB75_181 Depth 4
                                        #       Child Loop BB75_187 Depth 3
                                        #         Child Loop BB75_189 Depth 4
                                        #         Child Loop BB75_193 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB75_220
# %bb.172:                              # %for.body1180
                                        #   in Loop: Header=BB75_171 Depth=1
	movl	$0, -24(%rbp)
.LBB75_173:                             # %for.cond1181
                                        #   Parent Loop BB75_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB75_175 Depth 3
                                        #         Child Loop BB75_177 Depth 4
                                        #         Child Loop BB75_181 Depth 4
                                        #       Child Loop BB75_187 Depth 3
                                        #         Child Loop BB75_189 Depth 4
                                        #         Child Loop BB75_193 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB75_218
# %bb.174:                              # %for.body1184
                                        #   in Loop: Header=BB75_173 Depth=2
	movl	$0, -12(%rbp)
.LBB75_175:                             # %for.cond1185
                                        #   Parent Loop BB75_171 Depth=1
                                        #     Parent Loop BB75_173 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB75_177 Depth 4
                                        #         Child Loop BB75_181 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB75_186
# %bb.176:                              # %for.body1188
                                        #   in Loop: Header=BB75_175 Depth=3
	movl	$0, -16(%rbp)
.LBB75_177:                             # %for.cond1189
                                        #   Parent Loop BB75_171 Depth=1
                                        #     Parent Loop BB75_173 Depth=2
                                        #       Parent Loop BB75_175 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB75_180
# %bb.178:                              # %for.body1192
                                        #   in Loop: Header=BB75_177 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.179:                              # %for.inc1202
                                        #   in Loop: Header=BB75_177 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB75_177
.LBB75_180:                             # %for.end1204
                                        #   in Loop: Header=BB75_175 Depth=3
	movl	-80(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-80(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-76(%rbp), %eax
	sarl	$1, %eax
	subl	-68(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-76(%rbp), %eax
	movl	-68(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -132(%rbp)
	movl	$0, -16(%rbp)
.LBB75_181:                             # %for.cond1223
                                        #   Parent Loop BB75_171 Depth=1
                                        #     Parent Loop BB75_173 Depth=2
                                        #       Parent Loop BB75_175 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB75_184
# %bb.182:                              # %for.body1226
                                        #   in Loop: Header=BB75_181 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -84(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-84(%rbp), %rcx
	addl	-144(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-84(%rbp), %rcx
	subl	-144(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-84(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.183:                              # %for.inc1252
                                        #   in Loop: Header=BB75_181 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB75_181
.LBB75_184:                             # %for.end1254
                                        #   in Loop: Header=BB75_175 Depth=3
	jmp	.LBB75_185
.LBB75_185:                             # %for.inc1255
                                        #   in Loop: Header=BB75_175 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_175
.LBB75_186:                             # %for.end1257
                                        #   in Loop: Header=BB75_173 Depth=2
	movl	$0, -16(%rbp)
.LBB75_187:                             # %for.cond1258
                                        #   Parent Loop BB75_171 Depth=1
                                        #     Parent Loop BB75_173 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB75_189 Depth 4
                                        #         Child Loop BB75_193 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB75_216
# %bb.188:                              # %for.body1261
                                        #   in Loop: Header=BB75_187 Depth=3
	movl	$0, -12(%rbp)
.LBB75_189:                             # %for.cond1262
                                        #   Parent Loop BB75_171 Depth=1
                                        #     Parent Loop BB75_173 Depth=2
                                        #       Parent Loop BB75_187 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB75_192
# %bb.190:                              # %for.body1265
                                        #   in Loop: Header=BB75_189 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.191:                              # %for.inc1275
                                        #   in Loop: Header=BB75_189 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_189
.LBB75_192:                             # %for.end1277
                                        #   in Loop: Header=BB75_187 Depth=3
	movl	-80(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-80(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-76(%rbp), %eax
	sarl	$1, %eax
	subl	-68(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-76(%rbp), %eax
	movl	-68(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -132(%rbp)
	movl	$0, -12(%rbp)
.LBB75_193:                             # %for.cond1296
                                        #   Parent Loop BB75_171 Depth=1
                                        #     Parent Loop BB75_173 Depth=2
                                        #       Parent Loop BB75_187 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB75_214
# %bb.194:                              # %for.body1299
                                        #   in Loop: Header=BB75_193 Depth=4
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	movl	72688(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-144(%rbp,%rdx,4), %edx
	movslq	-56(%rbp), %rsi
	addl	-144(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB75_196
# %bb.195:                              # %cond.true1310
                                        #   in Loop: Header=BB75_193 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB75_197
.LBB75_196:                             # %cond.false1311
                                        #   in Loop: Header=BB75_193 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	addl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB75_197:                             # %cond.end1319
                                        #   in Loop: Header=BB75_193 Depth=4
	cmpl	%ecx, %eax
	jge	.LBB75_199
# %bb.198:                              # %cond.true1323
                                        #   in Loop: Header=BB75_193 Depth=4
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB75_203
.LBB75_199:                             # %cond.false1325
                                        #   in Loop: Header=BB75_193 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	addl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB75_201
# %bb.200:                              # %cond.true1335
                                        #   in Loop: Header=BB75_193 Depth=4
	xorl	%eax, %eax
	jmp	.LBB75_202
.LBB75_201:                             # %cond.false1336
                                        #   in Loop: Header=BB75_193 Depth=4
	movslq	-12(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-56(%rbp), %rcx
	addl	-144(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB75_202:                             # %cond.end1344
                                        #   in Loop: Header=BB75_193 Depth=4
.LBB75_203:                             # %cond.end1346
                                        #   in Loop: Header=BB75_193 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movl	-20(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72688(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-144(%rbp,%rdx,4), %edx
	movslq	-56(%rbp), %rsi
	subl	-144(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB75_205
# %bb.204:                              # %cond.true1365
                                        #   in Loop: Header=BB75_193 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB75_206
.LBB75_205:                             # %cond.false1366
                                        #   in Loop: Header=BB75_193 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	subl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB75_206:                             # %cond.end1374
                                        #   in Loop: Header=BB75_193 Depth=4
	cmpl	%ecx, %eax
	jge	.LBB75_208
# %bb.207:                              # %cond.true1378
                                        #   in Loop: Header=BB75_193 Depth=4
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB75_212
.LBB75_208:                             # %cond.false1380
                                        #   in Loop: Header=BB75_193 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	subl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB75_210
# %bb.209:                              # %cond.true1390
                                        #   in Loop: Header=BB75_193 Depth=4
	xorl	%eax, %eax
	jmp	.LBB75_211
.LBB75_210:                             # %cond.false1391
                                        #   in Loop: Header=BB75_193 Depth=4
	movslq	-12(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-56(%rbp), %rcx
	subl	-144(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB75_211:                             # %cond.end1399
                                        #   in Loop: Header=BB75_193 Depth=4
.LBB75_212:                             # %cond.end1401
                                        #   in Loop: Header=BB75_193 Depth=4
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-56(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.213:                              # %for.inc1410
                                        #   in Loop: Header=BB75_193 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_193
.LBB75_214:                             # %for.end1412
                                        #   in Loop: Header=BB75_187 Depth=3
	jmp	.LBB75_215
.LBB75_215:                             # %for.inc1413
                                        #   in Loop: Header=BB75_187 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB75_187
.LBB75_216:                             # %for.end1415
                                        #   in Loop: Header=BB75_173 Depth=2
	jmp	.LBB75_217
.LBB75_217:                             # %for.inc1416
                                        #   in Loop: Header=BB75_173 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB75_173
.LBB75_218:                             # %for.end1418
                                        #   in Loop: Header=BB75_171 Depth=1
	jmp	.LBB75_219
.LBB75_219:                             # %for.inc1419
                                        #   in Loop: Header=BB75_171 Depth=1
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB75_171
.LBB75_220:                             # %for.end1421
	movl	$0, -12(%rbp)
.LBB75_221:                             # %for.cond1422
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_223 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB75_228
# %bb.222:                              # %for.body1425
                                        #   in Loop: Header=BB75_221 Depth=1
	movl	$0, -16(%rbp)
.LBB75_223:                             # %for.cond1426
                                        #   Parent Loop BB75_221 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB75_226
# %bb.224:                              # %for.body1429
                                        #   in Loop: Header=BB75_223 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-120(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.225:                              # %for.inc1444
                                        #   in Loop: Header=BB75_223 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB75_223
.LBB75_226:                             # %for.end1446
                                        #   in Loop: Header=BB75_221 Depth=1
	jmp	.LBB75_227
.LBB75_227:                             # %for.inc1447
                                        #   in Loop: Header=BB75_221 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_221
.LBB75_228:                             # %for.end1449
	movl	-208(%rbp), %ebx
	cmpl	$1835217481, -268(%rbp) # imm = 0x6D633249
	jne	.LBB75_230
.LBB75_229:
	movl	%ebx, %eax
	addq	$552, %rsp              # imm = 0x228
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB75_230:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB75_229
.Lfunc_end75:
	.size	dct_chroma_sp.66, .Lfunc_end75-dct_chroma_sp.66
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function dct_luma_sp.67
.LCPI76_0:
	.quad	4616189618054758400     # double 4
.LCPI76_1:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI76_2:
	.quad	4611686018427387904     # double 2
.LCPI76_3:
	.quad	4613937818241073152     # double 3
	.text
	.globl	dct_luma_sp.67
	.p2align	4, 0x90
	.type	dct_luma_sp.67,@function
dct_luma_sp.67:                         # @dct_luma_sp.67
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -24
	vmovsd	.LCPI76_2(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI76_3(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$380046704, -212(%rbp)  # imm = 0x16A70D70
	movl	%edi, -132(%rbp)
	movl	%esi, -116(%rbp)
	movq	%rdx, -224(%rbp)
	movl	-132(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -180(%rbp)
	movl	-116(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -184(%rbp)
	movl	-184(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-180(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -196(%rbp)
	movl	-184(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-180(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -192(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-196(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-192(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -232(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-196(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-192(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -248(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -176(%rbp)
	movq	-176(%rbp), %rax
	movl	12(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI76_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI76_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmulsd	%xmm0, %xmm2, %xmm0
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -240(%rbp)
	movq	-176(%rbp), %rax
	movl	12(%rax), %eax
	subl	$0, %eax
	cltd
	movl	$6, %edi
	idivl	%edi
	movl	%eax, -120(%rbp)
	movq	-176(%rbp), %rax
	movl	12(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%edx, -100(%rbp)
	movl	-120(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -148(%rbp)
	movq	-176(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%eax, -188(%rbp)
	movq	-176(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%edx, -136(%rbp)
	movl	-188(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -124(%rbp)
	movl	-148(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %esi
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	idivl	%edi
	movl	%eax, -204(%rbp)
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movl	%esi, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -200(%rbp)
	movl	$0, -12(%rbp)
.LBB76_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_3 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB76_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	$0, -16(%rbp)
.LBB76_3:                               # %for.cond38
                                        #   Parent Loop BB76_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB76_6
# %bb.4:                                # %for.body41
                                        #   in Loop: Header=BB76_3 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-132(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-116(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-132(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-116(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB76_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB76_3
.LBB76_6:                               # %for.end
                                        #   in Loop: Header=BB76_1 Depth=1
	jmp	.LBB76_7
.LBB76_7:                               # %for.inc66
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB76_1
.LBB76_8:                               # %for.end68
	movl	$0, -12(%rbp)
.LBB76_9:                               # %for.cond69
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_11 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB76_16
# %bb.10:                               # %for.body72
                                        #   in Loop: Header=BB76_9 Depth=1
	movl	$0, -16(%rbp)
.LBB76_11:                              # %for.cond73
                                        #   Parent Loop BB76_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB76_14
# %bb.12:                               # %for.body76
                                        #   in Loop: Header=BB76_11 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.13:                               # %for.inc104
                                        #   in Loop: Header=BB76_11 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB76_11
.LBB76_14:                              # %for.end106
                                        #   in Loop: Header=BB76_9 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.15:                               # %for.inc137
                                        #   in Loop: Header=BB76_9 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB76_9
.LBB76_16:                              # %for.end139
	movl	$0, -16(%rbp)
.LBB76_17:                              # %for.cond140
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_19 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB76_24
# %bb.18:                               # %for.body143
                                        #   in Loop: Header=BB76_17 Depth=1
	movl	$0, -12(%rbp)
.LBB76_19:                              # %for.cond144
                                        #   Parent Loop BB76_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB76_22
# %bb.20:                               # %for.body147
                                        #   in Loop: Header=BB76_19 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-24(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.21:                               # %for.inc175
                                        #   in Loop: Header=BB76_19 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB76_19
.LBB76_22:                              # %for.end177
                                        #   in Loop: Header=BB76_17 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.23:                               # %for.inc208
                                        #   in Loop: Header=BB76_17 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB76_17
.LBB76_24:                              # %for.end210
	movl	$0, -12(%rbp)
.LBB76_25:                              # %for.cond211
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_27 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB76_32
# %bb.26:                               # %for.body214
                                        #   in Loop: Header=BB76_25 Depth=1
	movl	$0, -16(%rbp)
.LBB76_27:                              # %for.cond215
                                        #   Parent Loop BB76_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB76_30
# %bb.28:                               # %for.body218
                                        #   in Loop: Header=BB76_27 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.29:                               # %for.inc242
                                        #   in Loop: Header=BB76_27 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB76_27
.LBB76_30:                              # %for.end244
                                        #   in Loop: Header=BB76_25 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -320(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -288(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -304(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
# %bb.31:                               # %for.inc271
                                        #   in Loop: Header=BB76_25 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB76_25
.LBB76_32:                              # %for.end273
	movl	$0, -16(%rbp)
.LBB76_33:                              # %for.cond274
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_35 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB76_40
# %bb.34:                               # %for.body277
                                        #   in Loop: Header=BB76_33 Depth=1
	movl	$0, -12(%rbp)
.LBB76_35:                              # %for.cond278
                                        #   Parent Loop BB76_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB76_38
# %bb.36:                               # %for.body281
                                        #   in Loop: Header=BB76_35 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-24(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.37:                               # %for.inc305
                                        #   in Loop: Header=BB76_35 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB76_35
.LBB76_38:                              # %for.end307
                                        #   in Loop: Header=BB76_33 Depth=1
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-320(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.39:                               # %for.inc334
                                        #   in Loop: Header=BB76_33 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB76_33
.LBB76_40:                              # %for.end336
	movl	$0, -208(%rbp)
	movl	$-1, -64(%rbp)
	movl	$0, -104(%rbp)
	movl	$0, -68(%rbp)
.LBB76_41:                              # %for.cond337
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -68(%rbp)
	jge	.LBB76_80
# %bb.42:                               # %for.body340
                                        #   in Loop: Header=BB76_41 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB76_45
# %bb.43:                               # %lor.lhs.false
                                        #   in Loop: Header=BB76_41 Depth=1
	cmpl	$0, mb_adaptive
	je	.LBB76_46
# %bb.44:                               # %land.lhs.true
                                        #   in Loop: Header=BB76_41 Depth=1
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB76_46
.LBB76_45:                              # %if.then
                                        #   in Loop: Header=BB76_41 Depth=1
	movslq	-68(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-68(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB76_47
.LBB76_46:                              # %if.else
                                        #   in Loop: Header=BB76_41 Depth=1
	movslq	-68(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-68(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB76_47:                              # %if.end
                                        #   in Loop: Header=BB76_41 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	movl	$0, -108(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-200(%rbp), %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	cltd
	idivl	(%rsi,%rcx,4)
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-20(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -112(%rbp)
	movl	-112(%rbp), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-204(%rbp), %eax
	movl	-148(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movl	%eax, -128(%rbp)
	movl	-128(%rbp), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-204(%rbp), %eax
	movl	-148(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -60(%rbp)
	movl	-20(%rbp), %eax
	cmpl	-60(%rbp), %eax
	je	.LBB76_63
# %bb.48:                               # %land.lhs.true424
                                        #   in Loop: Header=BB76_41 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB76_63
# %bb.49:                               # %land.lhs.true427
                                        #   in Loop: Header=BB76_41 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB76_63
# %bb.50:                               # %if.then430
                                        #   in Loop: Header=BB76_41 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-20(%rbp), %edi
	movl	-112(%rbp), %esi
	callq	sign
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
	movl	-20(%rbp), %edi
	movl	-64(%rbp), %esi
	leaq	-144(%rbp), %rdx
	leaq	-216(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	-240(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-144(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-60(%rbp), %edi
	movl	-128(%rbp), %esi
	callq	sign
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -168(%rbp)
	movl	-60(%rbp), %edi
	movl	-64(%rbp), %esi
	leaq	-144(%rbp), %rdx
	leaq	-216(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	vmovsd	-240(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-144(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -168(%rbp)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-168(%rbp), %xmm0
	jne	.LBB76_55
	jp	.LBB76_55
# %bb.51:                               # %if.then495
                                        #   in Loop: Header=BB76_41 Depth=1
	movl	-20(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-60(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB76_53
# %bb.52:                               # %cond.true
                                        #   in Loop: Header=BB76_41 Depth=1
	movl	-20(%rbp), %eax
	jmp	.LBB76_54
.LBB76_53:                              # %cond.false
                                        #   in Loop: Header=BB76_41 Depth=1
	movl	-60(%rbp), %eax
.LBB76_54:                              # %cond.end
                                        #   in Loop: Header=BB76_41 Depth=1
	movl	%eax, -56(%rbp)
	jmp	.LBB76_59
.LBB76_55:                              # %if.else500
                                        #   in Loop: Header=BB76_41 Depth=1
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-168(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB76_57
# %bb.56:                               # %if.then503
                                        #   in Loop: Header=BB76_41 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB76_58
.LBB76_57:                              # %if.else504
                                        #   in Loop: Header=BB76_41 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB76_58:                              # %if.end505
                                        #   in Loop: Header=BB76_41 Depth=1
	jmp	.LBB76_59
.LBB76_59:                              # %if.end506
                                        #   in Loop: Header=BB76_41 Depth=1
	movl	-56(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jne	.LBB76_61
# %bb.60:                               # %cond.true509
                                        #   in Loop: Header=BB76_41 Depth=1
	movl	-112(%rbp), %eax
	jmp	.LBB76_62
.LBB76_61:                              # %cond.false510
                                        #   in Loop: Header=BB76_41 Depth=1
	movl	-128(%rbp), %eax
.LBB76_62:                              # %cond.end511
                                        #   in Loop: Header=BB76_41 Depth=1
	movl	%eax, -140(%rbp)
	jmp	.LBB76_73
.LBB76_63:                              # %if.else513
                                        #   in Loop: Header=BB76_41 Depth=1
	movl	-20(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB76_65
# %bb.64:                               # %if.then516
                                        #   in Loop: Header=BB76_41 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-112(%rbp), %eax
	movl	%eax, -140(%rbp)
	jmp	.LBB76_72
.LBB76_65:                              # %if.else517
                                        #   in Loop: Header=BB76_41 Depth=1
	cmpl	$0, -20(%rbp)
	jne	.LBB76_67
# %bb.66:                               # %cond.true520
                                        #   in Loop: Header=BB76_41 Depth=1
	movl	-20(%rbp), %eax
	jmp	.LBB76_68
.LBB76_67:                              # %cond.false521
                                        #   in Loop: Header=BB76_41 Depth=1
	movl	-60(%rbp), %eax
.LBB76_68:                              # %cond.end522
                                        #   in Loop: Header=BB76_41 Depth=1
	movl	%eax, -56(%rbp)
	cmpl	$0, -20(%rbp)
	jne	.LBB76_70
# %bb.69:                               # %cond.true526
                                        #   in Loop: Header=BB76_41 Depth=1
	movl	-112(%rbp), %eax
	jmp	.LBB76_71
.LBB76_70:                              # %cond.false527
                                        #   in Loop: Header=BB76_41 Depth=1
	movl	-128(%rbp), %eax
.LBB76_71:                              # %cond.end528
                                        #   in Loop: Header=BB76_41 Depth=1
	movl	%eax, -140(%rbp)
.LBB76_72:                              # %if.end530
                                        #   in Loop: Header=BB76_41 Depth=1
	jmp	.LBB76_73
.LBB76_73:                              # %if.end531
                                        #   in Loop: Header=BB76_41 Depth=1
	cmpl	$0, -56(%rbp)
	je	.LBB76_78
# %bb.74:                               # %if.then534
                                        #   in Loop: Header=BB76_41 Depth=1
	movl	$1, -208(%rbp)
	cmpl	$1, -56(%rbp)
	jle	.LBB76_76
# %bb.75:                               # %if.then537
                                        #   in Loop: Header=BB76_41 Depth=1
	movq	-224(%rbp), %rax
	movl	(%rax), %ecx
	addl	$999999, %ecx           # imm = 0xF423F
	movl	%ecx, (%rax)
	jmp	.LBB76_77
.LBB76_76:                              # %if.else539
                                        #   in Loop: Header=BB76_41 Depth=1
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-64(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-224(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB76_77:                              # %if.end546
                                        #   in Loop: Header=BB76_41 Depth=1
	movl	-56(%rbp), %edi
	movl	-140(%rbp), %esi
	callq	sign
	movq	-232(%rbp), %rcx
	movslq	-104(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	movq	-248(%rbp), %rcx
	movslq	-104(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-104(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -104(%rbp)
	movl	$-1, -64(%rbp)
	movl	-56(%rbp), %edi
	movl	-140(%rbp), %esi
	callq	sign
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	movl	%eax, -108(%rbp)
.LBB76_78:                              # %if.end568
                                        #   in Loop: Header=BB76_41 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	-108(%rbp), %eax
	movl	%eax, -108(%rbp)
	movl	-108(%rbp), %edi
	callq	abs
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-200(%rbp), %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-108(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-188(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.79:                               # %for.inc598
                                        #   in Loop: Header=BB76_41 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB76_41
.LBB76_80:                              # %for.end600
	movq	-232(%rbp), %rax
	movslq	-104(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB76_81:                              # %for.cond603
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_83 Depth 2
                                        #     Child Loop BB76_87 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB76_92
# %bb.82:                               # %for.body606
                                        #   in Loop: Header=BB76_81 Depth=1
	movl	$0, -16(%rbp)
.LBB76_83:                              # %for.cond607
                                        #   Parent Loop BB76_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB76_86
# %bb.84:                               # %for.body610
                                        #   in Loop: Header=BB76_83 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.85:                               # %for.inc618
                                        #   in Loop: Header=BB76_83 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB76_83
.LBB76_86:                              # %for.end620
                                        #   in Loop: Header=BB76_81 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB76_87:                              # %for.cond639
                                        #   Parent Loop BB76_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB76_90
# %bb.88:                               # %for.body642
                                        #   in Loop: Header=BB76_87 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.89:                               # %for.inc664
                                        #   in Loop: Header=BB76_87 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB76_87
.LBB76_90:                              # %for.end666
                                        #   in Loop: Header=BB76_81 Depth=1
	jmp	.LBB76_91
.LBB76_91:                              # %for.inc667
                                        #   in Loop: Header=BB76_81 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB76_81
.LBB76_92:                              # %for.end669
	movl	$0, -16(%rbp)
.LBB76_93:                              # %for.cond670
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_95 Depth 2
                                        #     Child Loop BB76_99 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB76_122
# %bb.94:                               # %for.body673
                                        #   in Loop: Header=BB76_93 Depth=1
	movl	$0, -12(%rbp)
.LBB76_95:                              # %for.cond674
                                        #   Parent Loop BB76_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB76_98
# %bb.96:                               # %for.body677
                                        #   in Loop: Header=BB76_95 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.97:                               # %for.inc685
                                        #   in Loop: Header=BB76_95 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB76_95
.LBB76_98:                              # %for.end687
                                        #   in Loop: Header=BB76_93 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB76_99:                              # %for.cond706
                                        #   Parent Loop BB76_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB76_120
# %bb.100:                              # %for.body709
                                        #   in Loop: Header=BB76_99 Depth=2
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-24(%rbp), %rsi
	addl	-96(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB76_102
# %bb.101:                              # %cond.true720
                                        #   in Loop: Header=BB76_99 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB76_103
.LBB76_102:                             # %cond.false721
                                        #   in Loop: Header=BB76_99 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-24(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB76_103:                             # %cond.end729
                                        #   in Loop: Header=BB76_99 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB76_105
# %bb.104:                              # %cond.true733
                                        #   in Loop: Header=BB76_99 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB76_109
.LBB76_105:                             # %cond.false735
                                        #   in Loop: Header=BB76_99 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-24(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB76_107
# %bb.106:                              # %cond.true745
                                        #   in Loop: Header=BB76_99 Depth=2
	xorl	%eax, %eax
	jmp	.LBB76_108
.LBB76_107:                             # %cond.false746
                                        #   in Loop: Header=BB76_99 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-24(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB76_108:                             # %cond.end754
                                        #   in Loop: Header=BB76_99 Depth=2
.LBB76_109:                             # %cond.end756
                                        #   in Loop: Header=BB76_99 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-24(%rbp), %rsi
	subl	-96(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB76_111
# %bb.110:                              # %cond.true773
                                        #   in Loop: Header=BB76_99 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB76_112
.LBB76_111:                             # %cond.false774
                                        #   in Loop: Header=BB76_99 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-24(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB76_112:                             # %cond.end782
                                        #   in Loop: Header=BB76_99 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB76_114
# %bb.113:                              # %cond.true786
                                        #   in Loop: Header=BB76_99 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB76_118
.LBB76_114:                             # %cond.false788
                                        #   in Loop: Header=BB76_99 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-24(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB76_116
# %bb.115:                              # %cond.true798
                                        #   in Loop: Header=BB76_99 Depth=2
	xorl	%eax, %eax
	jmp	.LBB76_117
.LBB76_116:                             # %cond.false799
                                        #   in Loop: Header=BB76_99 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-24(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB76_117:                             # %cond.end807
                                        #   in Loop: Header=BB76_99 Depth=2
.LBB76_118:                             # %cond.end809
                                        #   in Loop: Header=BB76_99 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.119:                              # %for.inc816
                                        #   in Loop: Header=BB76_99 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB76_99
.LBB76_120:                             # %for.end818
                                        #   in Loop: Header=BB76_93 Depth=1
	jmp	.LBB76_121
.LBB76_121:                             # %for.inc819
                                        #   in Loop: Header=BB76_93 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB76_93
.LBB76_122:                             # %for.end821
	movl	$0, -12(%rbp)
.LBB76_123:                             # %for.cond822
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_125 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB76_130
# %bb.124:                              # %for.body825
                                        #   in Loop: Header=BB76_123 Depth=1
	movl	$0, -16(%rbp)
.LBB76_125:                             # %for.cond826
                                        #   Parent Loop BB76_123 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB76_128
# %bb.126:                              # %for.body829
                                        #   in Loop: Header=BB76_125 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-116(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-132(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.127:                              # %for.inc844
                                        #   in Loop: Header=BB76_125 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB76_125
.LBB76_128:                             # %for.end846
                                        #   in Loop: Header=BB76_123 Depth=1
	jmp	.LBB76_129
.LBB76_129:                             # %for.inc847
                                        #   in Loop: Header=BB76_123 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB76_123
.LBB76_130:                             # %for.end849
	movl	-208(%rbp), %ebx
	cmpl	$380046704, -212(%rbp)  # imm = 0x16A70D70
	jne	.LBB76_132
.LBB76_131:
	movl	%ebx, %eax
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB76_132:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB76_131
.Lfunc_end76:
	.size	dct_luma_sp.67, .Lfunc_end76-dct_luma_sp.67
	.cfi_endproc
                                        # -- End function
	.globl	dct_luma.68             # -- Begin function dct_luma.68
	.p2align	4, 0x90
	.type	dct_luma.68,@function
dct_luma.68:                            # @dct_luma.68
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	xorl	%ebx, %ebx
	movl	$587637038, -148(%rbp)  # imm = 0x2306A12E
	movl	%edi, -32(%rbp)
	movl	%esi, -28(%rbp)
	movq	%rdx, -168(%rbp)
	movl	%ecx, -108(%rbp)
	movl	-32(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -132(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -124(%rbp)
	movl	-124(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-132(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -116(%rbp)
	movl	-124(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-132(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -160(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -176(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB77_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%bl
.LBB77_2:                               # %land.end
	andb	$1, %bl
	movzbl	%bl, %eax
	movl	%eax, -36(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -96(%rbp)
	movl	-40(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -112(%rbp)
	movl	$0, -12(%rbp)
.LBB77_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_7 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB77_5
# %bb.4:                                # %land.rhs31
                                        #   in Loop: Header=BB77_3 Depth=1
	cmpl	$0, -36(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB77_5:                               # %land.end32
                                        #   in Loop: Header=BB77_3 Depth=1
	testb	$1, %al
	jne	.LBB77_6
	jmp	.LBB77_12
.LBB77_6:                               # %for.body
                                        #   in Loop: Header=BB77_3 Depth=1
	movl	$0, -16(%rbp)
.LBB77_7:                               # %for.cond34
                                        #   Parent Loop BB77_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB77_10
# %bb.8:                                # %for.body36
                                        #   in Loop: Header=BB77_7 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-88(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-88(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-88(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB77_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB77_7
.LBB77_10:                              # %for.end
                                        #   in Loop: Header=BB77_3 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.11:                               # %for.inc93
                                        #   in Loop: Header=BB77_3 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB77_3
.LBB77_12:                              # %for.end95
	movl	$0, -16(%rbp)
.LBB77_13:                              # %for.cond96
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_17 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB77_15
# %bb.14:                               # %land.rhs98
                                        #   in Loop: Header=BB77_13 Depth=1
	cmpl	$0, -36(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB77_15:                              # %land.end101
                                        #   in Loop: Header=BB77_13 Depth=1
	testb	$1, %al
	jne	.LBB77_16
	jmp	.LBB77_22
.LBB77_16:                              # %for.body103
                                        #   in Loop: Header=BB77_13 Depth=1
	movl	$0, -12(%rbp)
.LBB77_17:                              # %for.cond104
                                        #   Parent Loop BB77_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB77_20
# %bb.18:                               # %for.body106
                                        #   in Loop: Header=BB77_17 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-20(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.19:                               # %for.inc134
                                        #   in Loop: Header=BB77_17 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB77_17
.LBB77_20:                              # %for.end136
                                        #   in Loop: Header=BB77_13 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.21:                               # %for.inc167
                                        #   in Loop: Header=BB77_13 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB77_13
.LBB77_22:                              # %for.end169
	movl	$0, -128(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -104(%rbp)
	movl	$0, -84(%rbp)
.LBB77_23:                              # %for.cond170
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -84(%rbp)
	jge	.LBB77_57
# %bb.24:                               # %for.body172
                                        #   in Loop: Header=BB77_23 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB77_27
# %bb.25:                               # %lor.lhs.false
                                        #   in Loop: Header=BB77_23 Depth=1
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB77_28
# %bb.26:                               # %land.lhs.true
                                        #   in Loop: Header=BB77_23 Depth=1
	movq	-144(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB77_28
.LBB77_27:                              # %if.then
                                        #   in Loop: Header=BB77_23 Depth=1
	movslq	-84(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-84(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB77_29
.LBB77_28:                              # %if.else
                                        #   in Loop: Header=BB77_23 Depth=1
	movslq	-84(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-84(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB77_29:                              # %if.end
                                        #   in Loop: Header=BB77_23 Depth=1
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -92(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB77_31
# %bb.30:                               # %if.then193
                                        #   in Loop: Header=BB77_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -24(%rbp)
	jmp	.LBB77_35
.LBB77_31:                              # %if.else199
                                        #   in Loop: Header=BB77_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB77_33
# %bb.32:                               # %if.then202
                                        #   in Loop: Header=BB77_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB77_34
.LBB77_33:                              # %if.else223
                                        #   in Loop: Header=BB77_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -24(%rbp)
.LBB77_34:                              # %if.end245
                                        #   in Loop: Header=BB77_23 Depth=1
	jmp	.LBB77_35
.LBB77_35:                              # %if.end246
                                        #   in Loop: Header=BB77_23 Depth=1
	cmpl	$0, -24(%rbp)
	je	.LBB77_53
# %bb.36:                               # %if.then249
                                        #   in Loop: Header=BB77_23 Depth=1
	movl	$1, -128(%rbp)
	cmpl	$1, -24(%rbp)
	jg	.LBB77_38
# %bb.37:                               # %lor.lhs.false252
                                        #   in Loop: Header=BB77_23 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB77_39
.LBB77_38:                              # %if.then254
                                        #   in Loop: Header=BB77_23 Depth=1
	movq	-168(%rbp), %rax
	movl	(%rax), %ecx
	addl	$999999, %ecx           # imm = 0xF423F
	movl	%ecx, (%rax)
	jmp	.LBB77_40
.LBB77_39:                              # %if.else256
                                        #   in Loop: Header=BB77_23 Depth=1
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-100(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-168(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB77_40:                              # %if.end263
                                        #   in Loop: Header=BB77_23 Depth=1
	movl	-24(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-160(%rbp), %rcx
	movslq	-104(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-176(%rbp), %rcx
	movslq	-104(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-104(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -104(%rbp)
	movl	$-1, -100(%rbp)
	movl	-24(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -24(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB77_42
# %bb.41:                               # %if.then282
                                        #   in Loop: Header=BB77_23 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB77_52
.LBB77_42:                              # %if.else283
                                        #   in Loop: Header=BB77_23 Depth=1
	cmpl	$4, -40(%rbp)
	jge	.LBB77_47
# %bb.43:                               # %if.then286
                                        #   in Loop: Header=BB77_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB77_45
# %bb.44:                               # %if.then289
                                        #   in Loop: Header=BB77_23 Depth=1
	movl	-24(%rbp), %eax
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB77_46
.LBB77_45:                              # %if.else301
                                        #   in Loop: Header=BB77_23 Depth=1
	movl	-24(%rbp), %eax
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -92(%rbp)
.LBB77_46:                              # %if.end314
                                        #   in Loop: Header=BB77_23 Depth=1
	jmp	.LBB77_51
.LBB77_47:                              # %if.else315
                                        #   in Loop: Header=BB77_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB77_49
# %bb.48:                               # %if.then318
                                        #   in Loop: Header=BB77_23 Depth=1
	movl	-24(%rbp), %eax
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB77_50
.LBB77_49:                              # %if.else328
                                        #   in Loop: Header=BB77_23 Depth=1
	movl	-24(%rbp), %eax
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -92(%rbp)
.LBB77_50:                              # %if.end338
                                        #   in Loop: Header=BB77_23 Depth=1
	jmp	.LBB77_51
.LBB77_51:                              # %if.end339
                                        #   in Loop: Header=BB77_23 Depth=1
	jmp	.LBB77_52
.LBB77_52:                              # %if.end340
                                        #   in Loop: Header=BB77_23 Depth=1
	jmp	.LBB77_53
.LBB77_53:                              # %if.end341
                                        #   in Loop: Header=BB77_23 Depth=1
	cmpl	$0, -36(%rbp)
	jne	.LBB77_55
# %bb.54:                               # %if.then343
                                        #   in Loop: Header=BB77_23 Depth=1
	movl	-92(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB77_55:                              # %if.end349
                                        #   in Loop: Header=BB77_23 Depth=1
	jmp	.LBB77_56
.LBB77_56:                              # %for.inc350
                                        #   in Loop: Header=BB77_23 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB77_23
.LBB77_57:                              # %for.end352
	movq	-160(%rbp), %rax
	movslq	-104(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB77_58:                              # %for.cond355
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_62 Depth 2
                                        #     Child Loop BB77_66 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB77_60
# %bb.59:                               # %land.rhs358
                                        #   in Loop: Header=BB77_58 Depth=1
	cmpl	$0, -36(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB77_60:                              # %land.end361
                                        #   in Loop: Header=BB77_58 Depth=1
	testb	$1, %al
	jne	.LBB77_61
	jmp	.LBB77_71
.LBB77_61:                              # %for.body363
                                        #   in Loop: Header=BB77_58 Depth=1
	movl	$0, -16(%rbp)
.LBB77_62:                              # %for.cond364
                                        #   Parent Loop BB77_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB77_65
# %bb.63:                               # %for.body367
                                        #   in Loop: Header=BB77_62 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.64:                               # %for.inc375
                                        #   in Loop: Header=BB77_62 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB77_62
.LBB77_65:                              # %for.end377
                                        #   in Loop: Header=BB77_58 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -16(%rbp)
.LBB77_66:                              # %for.cond396
                                        #   Parent Loop BB77_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB77_69
# %bb.67:                               # %for.body399
                                        #   in Loop: Header=BB77_66 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -88(%rbp)
	movslq	-16(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-88(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-88(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-88(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.68:                               # %for.inc421
                                        #   in Loop: Header=BB77_66 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB77_66
.LBB77_69:                              # %for.end423
                                        #   in Loop: Header=BB77_58 Depth=1
	jmp	.LBB77_70
.LBB77_70:                              # %for.inc424
                                        #   in Loop: Header=BB77_58 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB77_58
.LBB77_71:                              # %for.end426
	movl	$0, -16(%rbp)
.LBB77_72:                              # %for.cond427
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_76 Depth 2
                                        #     Child Loop BB77_80 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB77_74
# %bb.73:                               # %land.rhs430
                                        #   in Loop: Header=BB77_72 Depth=1
	cmpl	$0, -36(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB77_74:                              # %land.end433
                                        #   in Loop: Header=BB77_72 Depth=1
	testb	$1, %al
	jne	.LBB77_75
	jmp	.LBB77_109
.LBB77_75:                              # %for.body435
                                        #   in Loop: Header=BB77_72 Depth=1
	movl	$0, -12(%rbp)
.LBB77_76:                              # %for.cond436
                                        #   Parent Loop BB77_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB77_79
# %bb.77:                               # %for.body439
                                        #   in Loop: Header=BB77_76 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.78:                               # %for.inc447
                                        #   in Loop: Header=BB77_76 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB77_76
.LBB77_79:                              # %for.end449
                                        #   in Loop: Header=BB77_72 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -12(%rbp)
.LBB77_80:                              # %for.cond468
                                        #   Parent Loop BB77_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB77_107
# %bb.81:                               # %for.body471
                                        #   in Loop: Header=BB77_80 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB77_101
# %bb.82:                               # %if.then474
                                        #   in Loop: Header=BB77_80 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-80(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	addl	-80(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-16(%rbp), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-12(%rbp), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB77_84
# %bb.83:                               # %cond.true
                                        #   in Loop: Header=BB77_80 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB77_85
.LBB77_84:                              # %cond.false
                                        #   in Loop: Header=BB77_80 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-12(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB77_85:                              # %cond.end
                                        #   in Loop: Header=BB77_80 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB77_87
# %bb.86:                               # %cond.true515
                                        #   in Loop: Header=BB77_80 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB77_91
.LBB77_87:                              # %cond.false518
                                        #   in Loop: Header=BB77_80 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-12(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB77_89
# %bb.88:                               # %cond.true539
                                        #   in Loop: Header=BB77_80 Depth=2
	xorl	%eax, %eax
	jmp	.LBB77_90
.LBB77_89:                              # %cond.false540
                                        #   in Loop: Header=BB77_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB77_90:                              # %cond.end559
                                        #   in Loop: Header=BB77_80 Depth=2
.LBB77_91:                              # %cond.end561
                                        #   in Loop: Header=BB77_80 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-80(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	subl	-80(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-16(%rbp), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-20(%rbp), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB77_93
# %bb.92:                               # %cond.true591
                                        #   in Loop: Header=BB77_80 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB77_94
.LBB77_93:                              # %cond.false592
                                        #   in Loop: Header=BB77_80 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-20(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB77_94:                              # %cond.end611
                                        #   in Loop: Header=BB77_80 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB77_96
# %bb.95:                               # %cond.true615
                                        #   in Loop: Header=BB77_80 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB77_100
.LBB77_96:                              # %cond.false618
                                        #   in Loop: Header=BB77_80 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-20(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB77_98
# %bb.97:                               # %cond.true639
                                        #   in Loop: Header=BB77_80 Depth=2
	xorl	%eax, %eax
	jmp	.LBB77_99
.LBB77_98:                              # %cond.false640
                                        #   in Loop: Header=BB77_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB77_99:                              # %cond.end659
                                        #   in Loop: Header=BB77_80 Depth=2
.LBB77_100:                             # %cond.end661
                                        #   in Loop: Header=BB77_80 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB77_105
.LBB77_101:                             # %if.else669
                                        #   in Loop: Header=BB77_80 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB77_103
# %bb.102:                              # %if.then671
                                        #   in Loop: Header=BB77_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB77_104
.LBB77_103:                             # %if.else692
                                        #   in Loop: Header=BB77_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB77_104:                             # %if.end717
                                        #   in Loop: Header=BB77_80 Depth=2
	jmp	.LBB77_105
.LBB77_105:                             # %if.end718
                                        #   in Loop: Header=BB77_80 Depth=2
	jmp	.LBB77_106
.LBB77_106:                             # %for.inc719
                                        #   in Loop: Header=BB77_80 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB77_80
.LBB77_107:                             # %for.end721
                                        #   in Loop: Header=BB77_72 Depth=1
	jmp	.LBB77_108
.LBB77_108:                             # %for.inc722
                                        #   in Loop: Header=BB77_72 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB77_72
.LBB77_109:                             # %for.end724
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB77_122
# %bb.110:                              # %if.then727
	movl	$0, -12(%rbp)
.LBB77_111:                             # %for.cond728
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_113 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB77_121
# %bb.112:                              # %for.body731
                                        #   in Loop: Header=BB77_111 Depth=1
	movl	$0, -16(%rbp)
.LBB77_113:                             # %for.cond732
                                        #   Parent Loop BB77_111 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB77_119
# %bb.114:                              # %for.body735
                                        #   in Loop: Header=BB77_113 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB77_116
# %bb.115:                              # %if.then737
                                        #   in Loop: Header=BB77_113 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-32(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB77_117
.LBB77_116:                             # %if.else761
                                        #   in Loop: Header=BB77_113 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-32(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB77_117:                             # %if.end779
                                        #   in Loop: Header=BB77_113 Depth=2
	jmp	.LBB77_118
.LBB77_118:                             # %for.inc780
                                        #   in Loop: Header=BB77_113 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB77_113
.LBB77_119:                             # %for.end782
                                        #   in Loop: Header=BB77_111 Depth=1
	jmp	.LBB77_120
.LBB77_120:                             # %for.inc783
                                        #   in Loop: Header=BB77_111 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB77_111
.LBB77_121:                             # %for.end785
	jmp	.LBB77_122
.LBB77_122:                             # %if.end786
	movl	-128(%rbp), %ebx
	cmpl	$587637038, -148(%rbp)  # imm = 0x2306A12E
	jne	.LBB77_124
.LBB77_123:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB77_124:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB77_123
.Lfunc_end77:
	.size	dct_luma.68, .Lfunc_end77-dct_luma.68
	.cfi_endproc
                                        # -- End function
	.globl	copyblock_sp.69         # -- Begin function copyblock_sp.69
	.p2align	4, 0x90
	.type	copyblock_sp.69,@function
copyblock_sp.69:                        # @copyblock_sp.69
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movl	$1058114223, -88(%rbp)  # imm = 0x3F118AAF
	movl	%edi, -72(%rbp)
	movl	%esi, -68(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	-104(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -84(%rbp)
	movq	-104(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -80(%rbp)
	movl	-84(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -76(%rbp)
	movl	-76(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	movl	$0, -4(%rbp)
.LBB78_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB78_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB78_1 Depth=1
	movl	$0, -8(%rbp)
.LBB78_3:                               # %for.cond4
                                        #   Parent Loop BB78_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB78_6
# %bb.4:                                # %for.body6
                                        #   in Loop: Header=BB78_3 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-8(%rbp), %ecx
	addl	-72(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-4(%rbp), %ecx
	addl	-68(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-176(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB78_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_3
.LBB78_6:                               # %for.end
                                        #   in Loop: Header=BB78_1 Depth=1
	jmp	.LBB78_7
.LBB78_7:                               # %for.inc17
                                        #   in Loop: Header=BB78_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_1
.LBB78_8:                               # %for.end19
	movl	$0, -4(%rbp)
.LBB78_9:                               # %for.cond20
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_11 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB78_16
# %bb.10:                               # %for.body23
                                        #   in Loop: Header=BB78_9 Depth=1
	movl	$0, -8(%rbp)
.LBB78_11:                              # %for.cond24
                                        #   Parent Loop BB78_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -8(%rbp)
	jge	.LBB78_14
# %bb.12:                               # %for.body27
                                        #   in Loop: Header=BB78_11 Depth=2
	movl	$3, %eax
	subl	-8(%rbp), %eax
	movl	%eax, -36(%rbp)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-36(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-8(%rbp), %rdx
	movl	%eax, -32(%rbp,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-36(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-36(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.13:                               # %for.inc51
                                        #   in Loop: Header=BB78_11 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_11
.LBB78_14:                              # %for.end53
                                        #   in Loop: Header=BB78_9 Depth=1
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movl	-32(%rbp), %eax
	subl	-28(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -160(%rbp,%rcx,4)
	movl	-20(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
# %bb.15:                               # %for.inc79
                                        #   in Loop: Header=BB78_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_9
.LBB78_16:                              # %for.end81
	movl	$0, -8(%rbp)
.LBB78_17:                              # %for.cond82
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_19 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB78_24
# %bb.18:                               # %for.body85
                                        #   in Loop: Header=BB78_17 Depth=1
	movl	$0, -4(%rbp)
.LBB78_19:                              # %for.cond86
                                        #   Parent Loop BB78_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB78_22
# %bb.20:                               # %for.body89
                                        #   in Loop: Header=BB78_19 Depth=2
	movl	$3, %eax
	subl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-4(%rbp), %rdx
	movl	%eax, -32(%rbp,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.21:                               # %for.inc113
                                        #   in Loop: Header=BB78_19 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_19
.LBB78_22:                              # %for.end115
                                        #   in Loop: Header=BB78_17 Depth=1
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-176(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-32(%rbp), %ecx
	subl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	-24(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-20(%rbp), %ecx
	movl	-24(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.23:                               # %for.inc142
                                        #   in Loop: Header=BB78_17 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_17
.LBB78_24:                              # %for.end144
	movl	$0, -4(%rbp)
.LBB78_25:                              # %for.cond145
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_27 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB78_32
# %bb.26:                               # %for.body148
                                        #   in Loop: Header=BB78_25 Depth=1
	movl	$0, -8(%rbp)
.LBB78_27:                              # %for.cond149
                                        #   Parent Loop BB78_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB78_30
# %bb.28:                               # %for.body152
                                        #   in Loop: Header=BB78_27 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-80(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-92(%rbp), %eax
	movl	-76(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-176(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	(%rdx,%rcx,4), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-80(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-84(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.29:                               # %for.inc182
                                        #   in Loop: Header=BB78_27 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_27
.LBB78_30:                              # %for.end184
                                        #   in Loop: Header=BB78_25 Depth=1
	jmp	.LBB78_31
.LBB78_31:                              # %for.inc185
                                        #   in Loop: Header=BB78_25 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_25
.LBB78_32:                              # %for.end187
	movl	$0, -4(%rbp)
.LBB78_33:                              # %for.cond188
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_35 Depth 2
                                        #     Child Loop BB78_39 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB78_44
# %bb.34:                               # %for.body191
                                        #   in Loop: Header=BB78_33 Depth=1
	movl	$0, -8(%rbp)
.LBB78_35:                              # %for.cond192
                                        #   Parent Loop BB78_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB78_38
# %bb.36:                               # %for.body195
                                        #   in Loop: Header=BB78_35 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.37:                               # %for.inc203
                                        #   in Loop: Header=BB78_35 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_35
.LBB78_38:                              # %for.end205
                                        #   in Loop: Header=BB78_33 Depth=1
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-32(%rbp), %eax
	subl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	sarl	$1, %eax
	subl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	movl	-20(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -8(%rbp)
.LBB78_39:                              # %for.cond224
                                        #   Parent Loop BB78_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -8(%rbp)
	jge	.LBB78_42
# %bb.40:                               # %for.body227
                                        #   in Loop: Header=BB78_39 Depth=2
	movl	$3, %eax
	subl	-8(%rbp), %eax
	movl	%eax, -36(%rbp)
	movslq	-8(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-36(%rbp), %rcx
	addl	-64(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-36(%rbp), %rcx
	subl	-64(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-36(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.41:                               # %for.inc249
                                        #   in Loop: Header=BB78_39 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_39
.LBB78_42:                              # %for.end251
                                        #   in Loop: Header=BB78_33 Depth=1
	jmp	.LBB78_43
.LBB78_43:                              # %for.inc252
                                        #   in Loop: Header=BB78_33 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_33
.LBB78_44:                              # %for.end254
	movl	$0, -8(%rbp)
.LBB78_45:                              # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_47 Depth 2
                                        #     Child Loop BB78_51 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB78_74
# %bb.46:                               # %for.body258
                                        #   in Loop: Header=BB78_45 Depth=1
	movl	$0, -4(%rbp)
.LBB78_47:                              # %for.cond259
                                        #   Parent Loop BB78_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB78_50
# %bb.48:                               # %for.body262
                                        #   in Loop: Header=BB78_47 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.49:                               # %for.inc270
                                        #   in Loop: Header=BB78_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_47
.LBB78_50:                              # %for.end272
                                        #   in Loop: Header=BB78_45 Depth=1
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-32(%rbp), %eax
	subl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	sarl	$1, %eax
	subl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	movl	-20(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -4(%rbp)
.LBB78_51:                              # %for.cond291
                                        #   Parent Loop BB78_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB78_72
# %bb.52:                               # %for.body294
                                        #   in Loop: Header=BB78_51 Depth=2
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-4(%rbp), %rdx
	movl	-64(%rbp,%rdx,4), %edx
	movslq	-12(%rbp), %rsi
	addl	-64(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB78_54
# %bb.53:                               # %cond.true
                                        #   in Loop: Header=BB78_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB78_55
.LBB78_54:                              # %cond.false
                                        #   in Loop: Header=BB78_51 Depth=2
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	addl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB78_55:                              # %cond.end
                                        #   in Loop: Header=BB78_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB78_57
# %bb.56:                               # %cond.true314
                                        #   in Loop: Header=BB78_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB78_61
.LBB78_57:                              # %cond.false316
                                        #   in Loop: Header=BB78_51 Depth=2
	xorl	%eax, %eax
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	addl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB78_59
# %bb.58:                               # %cond.true326
                                        #   in Loop: Header=BB78_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB78_60
.LBB78_59:                              # %cond.false327
                                        #   in Loop: Header=BB78_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-64(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB78_60:                              # %cond.end335
                                        #   in Loop: Header=BB78_51 Depth=2
.LBB78_61:                              # %cond.end337
                                        #   in Loop: Header=BB78_51 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-4(%rbp), %rdx
	movl	-64(%rbp,%rdx,4), %edx
	movslq	-12(%rbp), %rsi
	subl	-64(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB78_63
# %bb.62:                               # %cond.true354
                                        #   in Loop: Header=BB78_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB78_64
.LBB78_63:                              # %cond.false355
                                        #   in Loop: Header=BB78_51 Depth=2
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	subl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB78_64:                              # %cond.end363
                                        #   in Loop: Header=BB78_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB78_66
# %bb.65:                               # %cond.true367
                                        #   in Loop: Header=BB78_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB78_70
.LBB78_66:                              # %cond.false369
                                        #   in Loop: Header=BB78_51 Depth=2
	xorl	%eax, %eax
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	subl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB78_68
# %bb.67:                               # %cond.true379
                                        #   in Loop: Header=BB78_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB78_69
.LBB78_68:                              # %cond.false380
                                        #   in Loop: Header=BB78_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-64(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB78_69:                              # %cond.end388
                                        #   in Loop: Header=BB78_51 Depth=2
.LBB78_70:                              # %cond.end390
                                        #   in Loop: Header=BB78_51 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.71:                               # %for.inc397
                                        #   in Loop: Header=BB78_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_51
.LBB78_72:                              # %for.end399
                                        #   in Loop: Header=BB78_45 Depth=1
	jmp	.LBB78_73
.LBB78_73:                              # %for.inc400
                                        #   in Loop: Header=BB78_45 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_45
.LBB78_74:                              # %for.end402
	movl	$0, -4(%rbp)
.LBB78_75:                              # %for.cond403
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_77 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB78_82
# %bb.76:                               # %for.body406
                                        #   in Loop: Header=BB78_75 Depth=1
	movl	$0, -8(%rbp)
.LBB78_77:                              # %for.cond407
                                        #   Parent Loop BB78_75 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB78_80
# %bb.78:                               # %for.body410
                                        #   in Loop: Header=BB78_77 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-68(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-72(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.79:                               # %for.inc425
                                        #   in Loop: Header=BB78_77 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_77
.LBB78_80:                              # %for.end427
                                        #   in Loop: Header=BB78_75 Depth=1
	jmp	.LBB78_81
.LBB78_81:                              # %for.inc428
                                        #   in Loop: Header=BB78_75 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_75
.LBB78_82:                              # %for.end430
	cmpl	$1058114223, -88(%rbp)  # imm = 0x3F118AAF
	jne	.LBB78_84
.LBB78_83:
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB78_84:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB78_83
.Lfunc_end78:
	.size	copyblock_sp.69, .Lfunc_end78-copyblock_sp.69
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma.70           # -- Begin function dct_chroma.70
	.p2align	4, 0x90
	.type	dct_chroma.70,@function
dct_chroma.70:                          # @dct_chroma.70
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$424, %rsp              # imm = 0x1A8
	.cfi_offset %rbx, -24
	movl	$1651026751, -380(%rbp) # imm = 0x6268AB3F
	movl	%edi, -20(%rbp)
	movl	%esi, -136(%rbp)
	movl	$0, -204(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -192(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -224(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -376(%rbp)
	movq	-192(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB79_3
# %bb.1:                                # %lor.lhs.false
	movq	-192(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB79_3
# %bb.2:                                # %lor.rhs
	movq	-192(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB79_3:                               # %lor.end
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -128(%rbp)
	movl	-20(%rbp), %esi
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	imull	%eax, %esi
	movl	%esi, -196(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern, %rax
	movq	%rax, -432(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+8, %rax
	movq	%rax, -424(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+16, %rax
	movq	%rax, -416(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+24, %rax
	movq	%rax, -408(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	movl	%eax, -144(%rbp)
	movl	$0, -108(%rbp)
	movl	$0, -132(%rbp)
	movl	$0, -212(%rbp)
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	cmpl	$0, %eax
	jne	.LBB79_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%cl
.LBB79_5:                               # %land.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -104(%rbp)
	movq	-192(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	img, %rdx
	movslq	-20(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	movl	%ecx, -124(%rbp)
	movl	-124(%rbp), %ecx
	movq	img, %rdx
	subl	72672(%rdx), %eax
	cmpl	%eax, %ecx
	jge	.LBB79_7
# %bb.6:                                # %cond.true
	xorl	%eax, %eax
	movq	img, %rcx
	subl	72672(%rcx), %eax
	jmp	.LBB79_11
.LBB79_7:                               # %cond.false
	cmpl	$51, -124(%rbp)
	jle	.LBB79_9
# %bb.8:                                # %cond.true24
	movl	$51, %eax
	jmp	.LBB79_10
.LBB79_9:                               # %cond.false25
	movl	-124(%rbp), %eax
.LBB79_10:                              # %cond.end
.LBB79_11:                              # %cond.end26
	movl	%eax, -124(%rbp)
	cmpl	$0, -124(%rbp)
	jge	.LBB79_13
# %bb.12:                               # %cond.true29
	movl	-124(%rbp), %eax
	jmp	.LBB79_14
.LBB79_13:                              # %cond.false30
	movl	-124(%rbp), %eax
	subl	$0, %eax
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB79_14:                              # %cond.end34
	movl	%eax, -124(%rbp)
	movl	-124(%rbp), %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movl	-124(%rbp), %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -76(%rbp)
	movl	-40(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -180(%rbp)
	movq	img, %rax
	cmpl	$2, 72700(%rax)
	jne	.LBB79_16
# %bb.15:                               # %if.then
	movl	-124(%rbp), %eax
	addl	$3, %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -108(%rbp)
	movl	-124(%rbp), %eax
	addl	$3, %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -132(%rbp)
	movl	-108(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -212(%rbp)
.LBB79_16:                              # %if.end
	movl	$0, -28(%rbp)
.LBB79_17:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_19 Depth 2
                                        #       Child Loop BB79_21 Depth 3
                                        #         Child Loop BB79_25 Depth 4
                                        #       Child Loop BB79_31 Depth 3
                                        #         Child Loop BB79_35 Depth 4
	movl	-28(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB79_44
# %bb.18:                               # %for.body
                                        #   in Loop: Header=BB79_17 Depth=1
	movl	$0, -24(%rbp)
.LBB79_19:                              # %for.cond56
                                        #   Parent Loop BB79_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB79_21 Depth 3
                                        #         Child Loop BB79_25 Depth 4
                                        #       Child Loop BB79_31 Depth 3
                                        #         Child Loop BB79_35 Depth 4
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB79_42
# %bb.20:                               # %for.body59
                                        #   in Loop: Header=BB79_19 Depth=2
	movl	$0, -12(%rbp)
.LBB79_21:                              # %for.cond60
                                        #   Parent Loop BB79_17 Depth=1
                                        #     Parent Loop BB79_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB79_25 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB79_23
# %bb.22:                               # %land.rhs63
                                        #   in Loop: Header=BB79_21 Depth=3
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB79_23:                              # %land.end64
                                        #   in Loop: Header=BB79_21 Depth=3
	testb	$1, %al
	jne	.LBB79_24
	jmp	.LBB79_30
.LBB79_24:                              # %for.body66
                                        #   in Loop: Header=BB79_21 Depth=3
	movl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -148(%rbp)
	movl	$0, -16(%rbp)
.LBB79_25:                              # %for.cond68
                                        #   Parent Loop BB79_17 Depth=1
                                        #     Parent Loop BB79_19 Depth=2
                                        #       Parent Loop BB79_21 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB79_28
# %bb.26:                               # %for.body71
                                        #   in Loop: Header=BB79_25 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-148(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-148(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-120(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.27:                               # %for.inc
                                        #   in Loop: Header=BB79_25 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB79_25
.LBB79_28:                              # %for.end
                                        #   in Loop: Header=BB79_21 Depth=3
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.29:                               # %for.inc139
                                        #   in Loop: Header=BB79_21 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_21
.LBB79_30:                              # %for.end141
                                        #   in Loop: Header=BB79_19 Depth=2
	movl	$0, -16(%rbp)
.LBB79_31:                              # %for.cond142
                                        #   Parent Loop BB79_17 Depth=1
                                        #     Parent Loop BB79_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB79_35 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB79_33
# %bb.32:                               # %land.rhs145
                                        #   in Loop: Header=BB79_31 Depth=3
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB79_33:                              # %land.end148
                                        #   in Loop: Header=BB79_31 Depth=3
	testb	$1, %al
	jne	.LBB79_34
	jmp	.LBB79_40
.LBB79_34:                              # %for.body150
                                        #   in Loop: Header=BB79_31 Depth=3
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	$0, -12(%rbp)
.LBB79_35:                              # %for.cond152
                                        #   Parent Loop BB79_17 Depth=1
                                        #     Parent Loop BB79_19 Depth=2
                                        #       Parent Loop BB79_31 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB79_38
# %bb.36:                               # %for.body155
                                        #   in Loop: Header=BB79_35 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-72(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.37:                               # %for.inc187
                                        #   in Loop: Header=BB79_35 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_35
.LBB79_38:                              # %for.end189
                                        #   in Loop: Header=BB79_31 Depth=3
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.39:                               # %for.inc228
                                        #   in Loop: Header=BB79_31 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB79_31
.LBB79_40:                              # %for.end230
                                        #   in Loop: Header=BB79_19 Depth=2
	jmp	.LBB79_41
.LBB79_41:                              # %for.inc231
                                        #   in Loop: Header=BB79_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB79_19
.LBB79_42:                              # %for.end233
                                        #   in Loop: Header=BB79_17 Depth=1
	jmp	.LBB79_43
.LBB79_43:                              # %for.inc234
                                        #   in Loop: Header=BB79_17 Depth=1
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB79_17
.LBB79_44:                              # %for.end236
	cmpl	$1, -144(%rbp)
	jne	.LBB79_76
# %bb.45:                               # %if.then239
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -176(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -172(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -168(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -164(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -36(%rbp)
.LBB79_46:                              # %for.cond304
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -36(%rbp)
	jge	.LBB79_62
# %bb.47:                               # %for.body307
                                        #   in Loop: Header=BB79_46 Depth=1
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -140(%rbp)
	cmpl	$1, -128(%rbp)
	jne	.LBB79_49
# %bb.48:                               # %if.then311
                                        #   in Loop: Header=BB79_46 Depth=1
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB79_50
.LBB79_49:                              # %if.else
                                        #   in Loop: Header=BB79_46 Depth=1
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB79_50:                              # %if.end349
                                        #   in Loop: Header=BB79_46 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB79_55
# %bb.51:                               # %land.lhs.true
                                        #   in Loop: Header=BB79_46 Depth=1
	movq	img, %rax
	cmpl	$4, 40(%rax)
	jge	.LBB79_55
# %bb.52:                               # %if.then355
                                        #   in Loop: Header=BB79_46 Depth=1
	cmpl	$2063, -44(%rbp)        # imm = 0x80F
	jle	.LBB79_54
# %bb.53:                               # %if.then358
                                        #   in Loop: Header=BB79_46 Depth=1
	movl	$2063, -44(%rbp)        # imm = 0x80F
.LBB79_54:                              # %if.end359
                                        #   in Loop: Header=BB79_46 Depth=1
	jmp	.LBB79_55
.LBB79_55:                              # %if.end360
                                        #   in Loop: Header=BB79_46 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB79_60
# %bb.56:                               # %if.then363
                                        #   in Loop: Header=BB79_46 Depth=1
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
                                        # kill: def $cl killed $ecx
	movl	$983040, %eax           # imm = 0xF0000
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-136(%rbp), %eax
	jle	.LBB79_58
# %bb.57:                               # %cond.true369
                                        #   in Loop: Header=BB79_46 Depth=1
	movl	$1, %eax
	jmp	.LBB79_59
.LBB79_58:                              # %cond.false370
                                        #   in Loop: Header=BB79_46 Depth=1
	movl	-136(%rbp), %eax
.LBB79_59:                              # %cond.end371
                                        #   in Loop: Header=BB79_46 Depth=1
	movl	%eax, -136(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	$-1, -100(%rbp)
	movl	-44(%rbp), %edi
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %esi
	callq	sign
	movl	%eax, -140(%rbp)
.LBB79_60:                              # %if.end384
                                        #   in Loop: Header=BB79_46 Depth=1
	movl	-140(%rbp), %eax
	movslq	-36(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.61:                               # %for.inc387
                                        #   in Loop: Header=BB79_46 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB79_46
.LBB79_62:                              # %for.end389
	movq	-224(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -16(%rbp)
.LBB79_63:                              # %for.cond424
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB79_75
# %bb.64:                               # %for.body427
                                        #   in Loop: Header=BB79_63 Depth=1
	cmpl	$5, -40(%rbp)
	jge	.LBB79_69
# %bb.65:                               # %if.then430
                                        #   in Loop: Header=BB79_63 Depth=1
	cmpl	$1, -128(%rbp)
	jne	.LBB79_67
# %bb.66:                               # %if.then433
                                        #   in Loop: Header=BB79_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	$5, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	jmp	.LBB79_68
.LBB79_67:                              # %if.else447
                                        #   in Loop: Header=BB79_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	$5, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
.LBB79_68:                              # %if.end461
                                        #   in Loop: Header=BB79_63 Depth=1
	jmp	.LBB79_73
.LBB79_69:                              # %if.else462
                                        #   in Loop: Header=BB79_63 Depth=1
	cmpl	$1, -128(%rbp)
	jne	.LBB79_71
# %bb.70:                               # %if.then465
                                        #   in Loop: Header=BB79_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-40(%rbp), %ecx
	subl	$5, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	jmp	.LBB79_72
.LBB79_71:                              # %if.else479
                                        #   in Loop: Header=BB79_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-40(%rbp), %ecx
	subl	$5, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
.LBB79_72:                              # %if.end493
                                        #   in Loop: Header=BB79_63 Depth=1
	jmp	.LBB79_73
.LBB79_73:                              # %if.end494
                                        #   in Loop: Header=BB79_63 Depth=1
	jmp	.LBB79_74
.LBB79_74:                              # %for.inc495
                                        #   in Loop: Header=BB79_63 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB79_63
.LBB79_75:                              # %for.end497
	movl	-176(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	movl	-172(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13368(%rcx)
	movl	-168(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13128(%rcx)
	movl	-164(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13384(%rcx)
	jmp	.LBB79_213
.LBB79_76:                              # %if.else514
	cmpl	$2, -144(%rbp)
	jne	.LBB79_127
# %bb.77:                               # %if.then517
	movl	$0, -12(%rbp)
.LBB79_78:                              # %for.cond518
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_80 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB79_85
# %bb.79:                               # %for.body522
                                        #   in Loop: Header=BB79_78 Depth=1
	movl	$0, -16(%rbp)
.LBB79_80:                              # %for.cond523
                                        #   Parent Loop BB79_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB79_83
# %bb.81:                               # %for.body527
                                        #   in Loop: Header=BB79_80 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$4, %rcx
	leaq	-368(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.82:                               # %for.inc539
                                        #   in Loop: Header=BB79_80 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB79_80
.LBB79_83:                              # %for.end541
                                        #   in Loop: Header=BB79_78 Depth=1
	jmp	.LBB79_84
.LBB79_84:                              # %for.inc542
                                        #   in Loop: Header=BB79_78 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_78
.LBB79_85:                              # %for.end544
	movl	-368(%rbp), %eax
	addl	-352(%rbp), %eax
	movl	%eax, -304(%rbp)
	movl	-364(%rbp), %eax
	addl	-348(%rbp), %eax
	movl	%eax, -300(%rbp)
	movl	-360(%rbp), %eax
	addl	-344(%rbp), %eax
	movl	%eax, -296(%rbp)
	movl	-356(%rbp), %eax
	addl	-340(%rbp), %eax
	movl	%eax, -292(%rbp)
	movl	-368(%rbp), %eax
	subl	-352(%rbp), %eax
	movl	%eax, -288(%rbp)
	movl	-364(%rbp), %eax
	subl	-348(%rbp), %eax
	movl	%eax, -284(%rbp)
	movl	-360(%rbp), %eax
	subl	-344(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-356(%rbp), %eax
	subl	-340(%rbp), %eax
	movl	%eax, -276(%rbp)
	movl	$0, -16(%rbp)
.LBB79_86:                              # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_88 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB79_93
# %bb.87:                               # %for.body604
                                        #   in Loop: Header=BB79_86 Depth=1
	movl	$0, -12(%rbp)
.LBB79_88:                              # %for.cond605
                                        #   Parent Loop BB79_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB79_91
# %bb.89:                               # %for.body608
                                        #   in Loop: Header=BB79_88 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-32(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-32(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.90:                               # %for.inc632
                                        #   in Loop: Header=BB79_88 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_88
.LBB79_91:                              # %for.end634
                                        #   in Loop: Header=BB79_86 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, 8(%rsi)
	movl	-52(%rbp), %eax
	addl	-56(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-52(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movl	%eax, 12(%rdx)
# %bb.92:                               # %for.inc659
                                        #   in Loop: Header=BB79_86 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB79_86
.LBB79_93:                              # %for.end661
	movl	$-1, -100(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -36(%rbp)
.LBB79_94:                              # %for.cond662
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -36(%rbp)
	jge	.LBB79_105
# %bb.95:                               # %for.body665
                                        #   in Loop: Header=BB79_94 Depth=1
	movslq	-36(%rbp), %rax
	movzbl	SCAN_YUV422(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SCAN_YUV422+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	cmpl	$1, -128(%rbp)
	jne	.LBB79_97
# %bb.96:                               # %if.then677
                                        #   in Loop: Header=BB79_94 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-212(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB79_98
.LBB79_97:                              # %if.else700
                                        #   in Loop: Header=BB79_94 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-212(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB79_98:                              # %if.end723
                                        #   in Loop: Header=BB79_94 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB79_103
# %bb.99:                               # %if.then726
                                        #   in Loop: Header=BB79_94 Depth=1
	movl	-20(%rbp), %ecx
	shll	$3, %ecx
                                        # kill: def $cl killed $ecx
	movl	$16711680, %eax         # imm = 0xFF0000
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-136(%rbp), %eax
	jle	.LBB79_101
# %bb.100:                              # %cond.true734
                                        #   in Loop: Header=BB79_94 Depth=1
	movl	$1, %eax
	jmp	.LBB79_102
.LBB79_101:                             # %cond.false735
                                        #   in Loop: Header=BB79_94 Depth=1
	movl	-136(%rbp), %eax
.LBB79_102:                             # %cond.end736
                                        #   in Loop: Header=BB79_94 Depth=1
	movl	%eax, -136(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	$-1, -100(%rbp)
.LBB79_103:                             # %if.end748
                                        #   in Loop: Header=BB79_94 Depth=1
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-368(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.104:                              # %for.inc758
                                        #   in Loop: Header=BB79_94 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB79_94
.LBB79_105:                             # %for.end760
	movq	-224(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-368(%rbp), %eax
	addl	-352(%rbp), %eax
	movl	%eax, -304(%rbp)
	movl	-364(%rbp), %eax
	addl	-348(%rbp), %eax
	movl	%eax, -300(%rbp)
	movl	-360(%rbp), %eax
	addl	-344(%rbp), %eax
	movl	%eax, -296(%rbp)
	movl	-356(%rbp), %eax
	addl	-340(%rbp), %eax
	movl	%eax, -292(%rbp)
	movl	-368(%rbp), %eax
	subl	-352(%rbp), %eax
	movl	%eax, -288(%rbp)
	movl	-364(%rbp), %eax
	subl	-348(%rbp), %eax
	movl	%eax, -284(%rbp)
	movl	-360(%rbp), %eax
	subl	-344(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-356(%rbp), %eax
	subl	-340(%rbp), %eax
	movl	%eax, -276(%rbp)
	movl	$0, -16(%rbp)
.LBB79_106:                             # %for.cond819
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_108 Depth 2
                                        #     Child Loop BB79_112 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB79_126
# %bb.107:                              # %for.body822
                                        #   in Loop: Header=BB79_106 Depth=1
	movl	$0, -12(%rbp)
.LBB79_108:                             # %for.cond823
                                        #   Parent Loop BB79_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB79_111
# %bb.109:                              # %for.body826
                                        #   in Loop: Header=BB79_108 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.110:                              # %for.inc833
                                        #   in Loop: Header=BB79_108 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_108
.LBB79_111:                             # %for.end835
                                        #   in Loop: Header=BB79_106 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB79_112:                             # %for.cond852
                                        #   Parent Loop BB79_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB79_124
# %bb.113:                              # %for.body855
                                        #   in Loop: Header=BB79_112 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	cmpl	$4, -108(%rbp)
	jge	.LBB79_118
# %bb.114:                              # %if.then859
                                        #   in Loop: Header=BB79_112 Depth=2
	cmpl	$1, -128(%rbp)
	jne	.LBB79_116
# %bb.115:                              # %if.then862
                                        #   in Loop: Header=BB79_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-132(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-108(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-108(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
	jmp	.LBB79_117
.LBB79_116:                             # %if.else915
                                        #   in Loop: Header=BB79_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-132(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-108(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-108(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
.LBB79_117:                             # %if.end968
                                        #   in Loop: Header=BB79_112 Depth=2
	jmp	.LBB79_122
.LBB79_118:                             # %if.else969
                                        #   in Loop: Header=BB79_112 Depth=2
	cmpl	$1, -128(%rbp)
	jne	.LBB79_120
# %bb.119:                              # %if.then972
                                        #   in Loop: Header=BB79_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-108(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-108(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB79_121
.LBB79_120:                             # %if.else1019
                                        #   in Loop: Header=BB79_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-108(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-108(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB79_121:                             # %if.end1066
                                        #   in Loop: Header=BB79_112 Depth=2
	jmp	.LBB79_122
.LBB79_122:                             # %if.end1067
                                        #   in Loop: Header=BB79_112 Depth=2
	jmp	.LBB79_123
.LBB79_123:                             # %for.inc1068
                                        #   in Loop: Header=BB79_112 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_112
.LBB79_124:                             # %for.end1070
                                        #   in Loop: Header=BB79_106 Depth=1
	jmp	.LBB79_125
.LBB79_125:                             # %for.inc1071
                                        #   in Loop: Header=BB79_106 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB79_106
.LBB79_126:                             # %for.end1073
	jmp	.LBB79_212
.LBB79_127:                             # %if.else1074
	cmpl	$3, -144(%rbp)
	jne	.LBB79_211
# %bb.128:                              # %if.then1077
	movl	$0, -12(%rbp)
.LBB79_129:                             # %for.cond1078
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_131 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB79_136
# %bb.130:                              # %for.body1082
                                        #   in Loop: Header=BB79_129 Depth=1
	movl	$0, -16(%rbp)
.LBB79_131:                             # %for.cond1083
                                        #   Parent Loop BB79_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB79_134
# %bb.132:                              # %for.body1087
                                        #   in Loop: Header=BB79_131 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.133:                              # %for.inc1099
                                        #   in Loop: Header=BB79_131 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB79_131
.LBB79_134:                             # %for.end1101
                                        #   in Loop: Header=BB79_129 Depth=1
	jmp	.LBB79_135
.LBB79_135:                             # %for.inc1102
                                        #   in Loop: Header=BB79_129 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_129
.LBB79_136:                             # %for.end1104
	movl	$0, -12(%rbp)
.LBB79_137:                             # %for.cond1105
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_141 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB79_139
# %bb.138:                              # %land.rhs1108
                                        #   in Loop: Header=BB79_137 Depth=1
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB79_139:                             # %land.end1111
                                        #   in Loop: Header=BB79_137 Depth=1
	testb	$1, %al
	jne	.LBB79_140
	jmp	.LBB79_146
.LBB79_140:                             # %for.body1113
                                        #   in Loop: Header=BB79_137 Depth=1
	movl	$0, -16(%rbp)
.LBB79_141:                             # %for.cond1114
                                        #   Parent Loop BB79_137 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB79_144
# %bb.142:                              # %for.body1117
                                        #   in Loop: Header=BB79_141 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-120(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-120(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-120(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.143:                              # %for.inc1141
                                        #   in Loop: Header=BB79_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB79_141
.LBB79_144:                             # %for.end1143
                                        #   in Loop: Header=BB79_137 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -304(%rbp,%rcx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
	movl	-52(%rbp), %eax
	addl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -288(%rbp,%rcx,4)
	movl	-52(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -256(%rbp,%rcx,4)
# %bb.145:                              # %for.inc1168
                                        #   in Loop: Header=BB79_137 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_137
.LBB79_146:                             # %for.end1170
	movl	$0, -16(%rbp)
.LBB79_147:                             # %for.cond1171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_151 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB79_149
# %bb.148:                              # %land.rhs1174
                                        #   in Loop: Header=BB79_147 Depth=1
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB79_149:                             # %land.end1177
                                        #   in Loop: Header=BB79_147 Depth=1
	testb	$1, %al
	jne	.LBB79_150
	jmp	.LBB79_156
.LBB79_150:                             # %for.body1179
                                        #   in Loop: Header=BB79_147 Depth=1
	movl	$0, -12(%rbp)
.LBB79_151:                             # %for.cond1180
                                        #   Parent Loop BB79_147 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB79_154
# %bb.152:                              # %for.body1183
                                        #   in Loop: Header=BB79_151 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-32(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-32(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.153:                              # %for.inc1207
                                        #   in Loop: Header=BB79_151 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_151
.LBB79_154:                             # %for.end1209
                                        #   in Loop: Header=BB79_147 Depth=1
	movl	-64(%rbp), %ecx
	addl	-60(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-304(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-64(%rbp), %ecx
	subl	-60(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-52(%rbp), %ecx
	addl	-56(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-52(%rbp), %ecx
	subl	-56(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.155:                              # %for.inc1238
                                        #   in Loop: Header=BB79_147 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB79_147
.LBB79_156:                             # %for.end1240
	movl	$-1, -100(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -36(%rbp)
.LBB79_157:                             # %for.cond1241
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -36(%rbp)
	jge	.LBB79_173
# %bb.158:                              # %for.body1244
                                        #   in Loop: Header=BB79_157 Depth=1
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -104(%rbp)
	je	.LBB79_160
# %bb.159:                              # %if.then1255
                                        #   in Loop: Header=BB79_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -44(%rbp)
	jmp	.LBB79_164
.LBB79_160:                             # %if.else1261
                                        #   in Loop: Header=BB79_157 Depth=1
	cmpl	$1, -128(%rbp)
	jne	.LBB79_162
# %bb.161:                              # %if.then1264
                                        #   in Loop: Header=BB79_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB79_163
.LBB79_162:                             # %if.else1287
                                        #   in Loop: Header=BB79_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB79_163:                             # %if.end1310
                                        #   in Loop: Header=BB79_157 Depth=1
	jmp	.LBB79_164
.LBB79_164:                             # %if.end1311
                                        #   in Loop: Header=BB79_157 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB79_169
# %bb.165:                              # %if.then1314
                                        #   in Loop: Header=BB79_157 Depth=1
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $rcx
	movl	$4294901760, %eax       # imm = 0xFFFF0000
	shlq	%cl, %rax
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-136(%rbp), %eax
	jle	.LBB79_167
# %bb.166:                              # %cond.true1321
                                        #   in Loop: Header=BB79_157 Depth=1
	movl	$1, %eax
	jmp	.LBB79_168
.LBB79_167:                             # %cond.false1322
                                        #   in Loop: Header=BB79_157 Depth=1
	movl	-136(%rbp), %eax
.LBB79_168:                             # %cond.end1323
                                        #   in Loop: Header=BB79_157 Depth=1
	movl	%eax, -136(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	$-1, -100(%rbp)
.LBB79_169:                             # %if.end1335
                                        #   in Loop: Header=BB79_157 Depth=1
	cmpl	$0, -104(%rbp)
	jne	.LBB79_171
# %bb.170:                              # %if.then1337
                                        #   in Loop: Header=BB79_157 Depth=1
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB79_171:                             # %if.end1347
                                        #   in Loop: Header=BB79_157 Depth=1
	jmp	.LBB79_172
.LBB79_172:                             # %for.inc1348
                                        #   in Loop: Header=BB79_157 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB79_157
.LBB79_173:                             # %for.end1350
	movq	-224(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB79_174:                             # %for.cond1353
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_178 Depth 2
                                        #     Child Loop BB79_182 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB79_176
# %bb.175:                              # %land.rhs1356
                                        #   in Loop: Header=BB79_174 Depth=1
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB79_176:                             # %land.end1359
                                        #   in Loop: Header=BB79_174 Depth=1
	testb	$1, %al
	jne	.LBB79_177
	jmp	.LBB79_187
.LBB79_177:                             # %for.body1361
                                        #   in Loop: Header=BB79_174 Depth=1
	movl	$0, -16(%rbp)
.LBB79_178:                             # %for.cond1362
                                        #   Parent Loop BB79_174 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB79_181
# %bb.179:                              # %for.body1365
                                        #   in Loop: Header=BB79_178 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.180:                              # %for.inc1372
                                        #   in Loop: Header=BB79_178 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB79_178
.LBB79_181:                             # %for.end1374
                                        #   in Loop: Header=BB79_174 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB79_182:                             # %for.cond1391
                                        #   Parent Loop BB79_174 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB79_185
# %bb.183:                              # %for.body1394
                                        #   in Loop: Header=BB79_182 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movslq	-120(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.184:                              # %for.inc1414
                                        #   in Loop: Header=BB79_182 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB79_182
.LBB79_185:                             # %for.end1416
                                        #   in Loop: Header=BB79_174 Depth=1
	jmp	.LBB79_186
.LBB79_186:                             # %for.inc1417
                                        #   in Loop: Header=BB79_174 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_174
.LBB79_187:                             # %for.end1419
	movl	$0, -16(%rbp)
.LBB79_188:                             # %for.cond1420
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_192 Depth 2
                                        #     Child Loop BB79_196 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB79_190
# %bb.189:                              # %land.rhs1423
                                        #   in Loop: Header=BB79_188 Depth=1
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB79_190:                             # %land.end1426
                                        #   in Loop: Header=BB79_188 Depth=1
	testb	$1, %al
	jne	.LBB79_191
	jmp	.LBB79_210
.LBB79_191:                             # %for.body1428
                                        #   in Loop: Header=BB79_188 Depth=1
	movl	$0, -12(%rbp)
.LBB79_192:                             # %for.cond1429
                                        #   Parent Loop BB79_188 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB79_195
# %bb.193:                              # %for.body1432
                                        #   in Loop: Header=BB79_192 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.194:                              # %for.inc1439
                                        #   in Loop: Header=BB79_192 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_192
.LBB79_195:                             # %for.end1441
                                        #   in Loop: Header=BB79_188 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB79_196:                             # %for.cond1458
                                        #   Parent Loop BB79_188 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB79_208
# %bb.197:                              # %for.body1461
                                        #   in Loop: Header=BB79_196 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	cmpl	$4, -40(%rbp)
	jge	.LBB79_202
# %bb.198:                              # %if.then1465
                                        #   in Loop: Header=BB79_196 Depth=2
	cmpl	$1, -128(%rbp)
	jne	.LBB79_200
# %bb.199:                              # %if.then1468
                                        #   in Loop: Header=BB79_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-76(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-40(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-40(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
	jmp	.LBB79_201
.LBB79_200:                             # %if.else1521
                                        #   in Loop: Header=BB79_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-76(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-40(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-40(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
.LBB79_201:                             # %if.end1574
                                        #   in Loop: Header=BB79_196 Depth=2
	jmp	.LBB79_206
.LBB79_202:                             # %if.else1575
                                        #   in Loop: Header=BB79_196 Depth=2
	cmpl	$1, -128(%rbp)
	jne	.LBB79_204
# %bb.203:                              # %if.then1578
                                        #   in Loop: Header=BB79_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB79_205
.LBB79_204:                             # %if.else1625
                                        #   in Loop: Header=BB79_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB79_205:                             # %if.end1672
                                        #   in Loop: Header=BB79_196 Depth=2
	jmp	.LBB79_206
.LBB79_206:                             # %if.end1673
                                        #   in Loop: Header=BB79_196 Depth=2
	jmp	.LBB79_207
.LBB79_207:                             # %for.inc1674
                                        #   in Loop: Header=BB79_196 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_196
.LBB79_208:                             # %for.end1676
                                        #   in Loop: Header=BB79_188 Depth=1
	jmp	.LBB79_209
.LBB79_209:                             # %for.inc1677
                                        #   in Loop: Header=BB79_188 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB79_188
.LBB79_210:                             # %for.end1679
	jmp	.LBB79_211
.LBB79_211:                             # %if.end1680
	jmp	.LBB79_212
.LBB79_212:                             # %if.end1681
	jmp	.LBB79_213
.LBB79_213:                             # %if.end1682
	movl	$0, -200(%rbp)
	movl	$0, -208(%rbp)
	movl	$0, -116(%rbp)
.LBB79_214:                             # %for.cond1683
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_216 Depth 2
                                        #       Child Loop BB79_218 Depth 3
	movl	-116(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB79_256
# %bb.215:                              # %for.body1688
                                        #   in Loop: Header=BB79_214 Depth=1
	movl	$0, -112(%rbp)
.LBB79_216:                             # %for.cond1689
                                        #   Parent Loop BB79_214 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB79_218 Depth 3
	cmpl	$4, -112(%rbp)
	jge	.LBB79_254
# %bb.217:                              # %for.body1692
                                        #   in Loop: Header=BB79_216 Depth=2
	movslq	-144(%rbp), %rax
	shlq	$4, %rax
	movabsq	$hor_offset, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -24(%rbp)
	movslq	-144(%rbp), %rax
	shlq	$4, %rax
	movabsq	$ver_offset, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$4, %ecx
	addl	-196(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -232(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$4, %ecx
	addl	-196(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -392(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -68(%rbp)
	movl	$1, -36(%rbp)
.LBB79_218:                             # %for.cond1722
                                        #   Parent Loop BB79_214 Depth=1
                                        #     Parent Loop BB79_216 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -36(%rbp)
	jge	.LBB79_252
# %bb.219:                              # %for.body1725
                                        #   in Loop: Header=BB79_218 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB79_222
# %bb.220:                              # %lor.lhs.false1727
                                        #   in Loop: Header=BB79_218 Depth=3
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB79_223
# %bb.221:                              # %land.lhs.true1729
                                        #   in Loop: Header=BB79_218 Depth=3
	movq	-192(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB79_223
.LBB79_222:                             # %if.then1731
                                        #   in Loop: Header=BB79_218 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_224
.LBB79_223:                             # %if.else1740
                                        #   in Loop: Header=BB79_218 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB79_224:                             # %if.end1749
                                        #   in Loop: Header=BB79_218 Depth=3
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -140(%rbp)
	cmpl	$0, -104(%rbp)
	je	.LBB79_226
# %bb.225:                              # %if.then1752
                                        #   in Loop: Header=BB79_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -44(%rbp)
	jmp	.LBB79_230
.LBB79_226:                             # %if.else1761
                                        #   in Loop: Header=BB79_218 Depth=3
	cmpl	$1, -128(%rbp)
	jne	.LBB79_228
# %bb.227:                              # %if.then1764
                                        #   in Loop: Header=BB79_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-180(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB79_229
.LBB79_228:                             # %if.else1792
                                        #   in Loop: Header=BB79_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-180(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB79_229:                             # %if.end1820
                                        #   in Loop: Header=BB79_218 Depth=3
	jmp	.LBB79_230
.LBB79_230:                             # %if.end1821
                                        #   in Loop: Header=BB79_218 Depth=3
	cmpl	$0, -44(%rbp)
	je	.LBB79_248
# %bb.231:                              # %if.then1824
                                        #   in Loop: Header=BB79_218 Depth=3
	movl	-116(%rbp), %eax
	addl	-196(%rbp), %eax
	cltq
	shlq	$2, %rax
	movabsq	$cbp_blk_chroma, %rcx
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $rcx
	movl	$1, %eax
	shlq	%cl, %rax
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	cmpl	$1, -44(%rbp)
	jg	.LBB79_233
# %bb.232:                              # %lor.lhs.false1837
                                        #   in Loop: Header=BB79_218 Depth=3
	cmpl	$0, -104(%rbp)
	je	.LBB79_234
.LBB79_233:                             # %if.then1839
                                        #   in Loop: Header=BB79_218 Depth=3
	movl	-200(%rbp), %eax
	addl	$999999, %eax           # imm = 0xF423F
	movl	%eax, -200(%rbp)
	jmp	.LBB79_235
.LBB79_234:                             # %if.else1841
                                        #   in Loop: Header=BB79_218 Depth=3
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-100(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	-200(%rbp), %eax
	movl	%eax, -200(%rbp)
.LBB79_235:                             # %if.end1848
                                        #   in Loop: Header=BB79_218 Depth=3
	movl	$2, -208(%rbp)
	movl	-44(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-232(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-392(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	$-1, -100(%rbp)
	movl	-44(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -44(%rbp)
	cmpl	$0, -104(%rbp)
	je	.LBB79_237
# %bb.236:                              # %if.then1871
                                        #   in Loop: Header=BB79_218 Depth=3
	movl	-44(%rbp), %eax
	movl	%eax, -140(%rbp)
	jmp	.LBB79_247
.LBB79_237:                             # %if.else1872
                                        #   in Loop: Header=BB79_218 Depth=3
	cmpl	$4, -40(%rbp)
	jge	.LBB79_242
# %bb.238:                              # %if.then1875
                                        #   in Loop: Header=BB79_218 Depth=3
	cmpl	$1, -128(%rbp)
	jne	.LBB79_240
# %bb.239:                              # %if.then1878
                                        #   in Loop: Header=BB79_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -140(%rbp)
	jmp	.LBB79_241
.LBB79_240:                             # %if.else1893
                                        #   in Loop: Header=BB79_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -140(%rbp)
.LBB79_241:                             # %if.end1908
                                        #   in Loop: Header=BB79_218 Depth=3
	jmp	.LBB79_246
.LBB79_242:                             # %if.else1909
                                        #   in Loop: Header=BB79_218 Depth=3
	cmpl	$1, -128(%rbp)
	jne	.LBB79_244
# %bb.243:                              # %if.then1912
                                        #   in Loop: Header=BB79_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -140(%rbp)
	jmp	.LBB79_245
.LBB79_244:                             # %if.else1924
                                        #   in Loop: Header=BB79_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -140(%rbp)
.LBB79_245:                             # %if.end1936
                                        #   in Loop: Header=BB79_218 Depth=3
	jmp	.LBB79_246
.LBB79_246:                             # %if.end1937
                                        #   in Loop: Header=BB79_218 Depth=3
	jmp	.LBB79_247
.LBB79_247:                             # %if.end1938
                                        #   in Loop: Header=BB79_218 Depth=3
	jmp	.LBB79_248
.LBB79_248:                             # %if.end1939
                                        #   in Loop: Header=BB79_218 Depth=3
	cmpl	$0, -104(%rbp)
	jne	.LBB79_250
# %bb.249:                              # %if.then1941
                                        #   in Loop: Header=BB79_218 Depth=3
	movl	-140(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB79_250:                             # %if.end1949
                                        #   in Loop: Header=BB79_218 Depth=3
	jmp	.LBB79_251
.LBB79_251:                             # %for.inc1950
                                        #   in Loop: Header=BB79_218 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB79_218
.LBB79_252:                             # %for.end1952
                                        #   in Loop: Header=BB79_216 Depth=2
	movq	-232(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.253:                              # %for.inc1955
                                        #   in Loop: Header=BB79_216 Depth=2
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB79_216
.LBB79_254:                             # %for.end1957
                                        #   in Loop: Header=BB79_214 Depth=1
	jmp	.LBB79_255
.LBB79_255:                             # %for.inc1958
                                        #   in Loop: Header=BB79_214 Depth=1
	movl	-116(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB79_214
.LBB79_256:                             # %for.end1960
	cmpl	$4, -200(%rbp)
	jge	.LBB79_278
# %bb.257:                              # %land.lhs.true1963
	cmpl	$0, -104(%rbp)
	jne	.LBB79_278
# %bb.258:                              # %if.then1965
	movl	$0, -208(%rbp)
	movl	$0, -116(%rbp)
.LBB79_259:                             # %for.cond1966
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_261 Depth 2
                                        #       Child Loop BB79_265 Depth 3
	movl	-116(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB79_277
# %bb.260:                              # %for.body1971
                                        #   in Loop: Header=BB79_259 Depth=1
	movl	$0, -112(%rbp)
.LBB79_261:                             # %for.cond1972
                                        #   Parent Loop BB79_259 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB79_265 Depth 3
	cmpl	$4, -112(%rbp)
	jge	.LBB79_275
# %bb.262:                              # %for.body1975
                                        #   in Loop: Header=BB79_261 Depth=2
	movslq	-144(%rbp), %rax
	shlq	$4, %rax
	movabsq	$hor_offset, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -24(%rbp)
	movslq	-144(%rbp), %rax
	shlq	$4, %rax
	movabsq	$ver_offset, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$4, %ecx
	addl	-196(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -232(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$4, %ecx
	addl	-196(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -392(%rbp)
	cmpl	$0, -204(%rbp)
	jne	.LBB79_264
# %bb.263:                              # %if.then2008
                                        #   in Loop: Header=BB79_261 Depth=2
	movslq	-144(%rbp), %rax
	movq	-432(%rbp,%rax,8), %rax
	movl	-20(%rbp), %edx
	movl	-144(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $rcx
	shlq	%cl, %rax
	xorq	$-1, %rax
	movq	-192(%rbp), %rcx
	andq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
.LBB79_264:                             # %if.end2016
                                        #   in Loop: Header=BB79_261 Depth=2
	movq	-232(%rbp), %rax
	movl	$0, (%rax)
	movl	$1, -36(%rbp)
.LBB79_265:                             # %for.cond2018
                                        #   Parent Loop BB79_259 Depth=1
                                        #     Parent Loop BB79_261 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -36(%rbp)
	jge	.LBB79_273
# %bb.266:                              # %for.body2021
                                        #   in Loop: Header=BB79_265 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB79_269
# %bb.267:                              # %lor.lhs.false2024
                                        #   in Loop: Header=BB79_265 Depth=3
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB79_270
# %bb.268:                              # %land.lhs.true2027
                                        #   in Loop: Header=BB79_265 Depth=3
	movq	-192(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB79_270
.LBB79_269:                             # %if.then2030
                                        #   in Loop: Header=BB79_265 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_271
.LBB79_270:                             # %if.else2039
                                        #   in Loop: Header=BB79_265 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB79_271:                             # %if.end2048
                                        #   in Loop: Header=BB79_265 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	$0, (%rax,%rcx,4)
	movq	-232(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.272:                              # %for.inc2058
                                        #   in Loop: Header=BB79_265 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB79_265
.LBB79_273:                             # %for.end2060
                                        #   in Loop: Header=BB79_261 Depth=2
	jmp	.LBB79_274
.LBB79_274:                             # %for.inc2061
                                        #   in Loop: Header=BB79_261 Depth=2
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB79_261
.LBB79_275:                             # %for.end2063
                                        #   in Loop: Header=BB79_259 Depth=1
	jmp	.LBB79_276
.LBB79_276:                             # %for.inc2064
                                        #   in Loop: Header=BB79_259 Depth=1
	movl	-116(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB79_259
.LBB79_277:                             # %for.end2066
	jmp	.LBB79_278
.LBB79_278:                             # %if.end2067
	cmpl	$2, -208(%rbp)
	jne	.LBB79_280
# %bb.279:                              # %if.then2070
	movl	$2, -136(%rbp)
.LBB79_280:                             # %if.end2071
	movl	$0, -28(%rbp)
.LBB79_281:                             # %for.cond2072
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_285 Depth 2
                                        #       Child Loop BB79_287 Depth 3
                                        #         Child Loop BB79_289 Depth 4
                                        #         Child Loop BB79_293 Depth 4
                                        #       Child Loop BB79_299 Depth 3
                                        #         Child Loop BB79_303 Depth 4
                                        #         Child Loop BB79_307 Depth 4
	xorl	%eax, %eax
	movl	-28(%rbp), %ecx
	movq	img, %rdx
	cmpl	72712(%rdx), %ecx
	jge	.LBB79_283
# %bb.282:                              # %land.rhs2076
                                        #   in Loop: Header=BB79_281 Depth=1
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB79_283:                             # %land.end2079
                                        #   in Loop: Header=BB79_281 Depth=1
	testb	$1, %al
	jne	.LBB79_284
	jmp	.LBB79_340
.LBB79_284:                             # %for.body2081
                                        #   in Loop: Header=BB79_281 Depth=1
	movl	$0, -24(%rbp)
.LBB79_285:                             # %for.cond2082
                                        #   Parent Loop BB79_281 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB79_287 Depth 3
                                        #         Child Loop BB79_289 Depth 4
                                        #         Child Loop BB79_293 Depth 4
                                        #       Child Loop BB79_299 Depth 3
                                        #         Child Loop BB79_303 Depth 4
                                        #         Child Loop BB79_307 Depth 4
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB79_338
# %bb.286:                              # %for.body2086
                                        #   in Loop: Header=BB79_285 Depth=2
	movl	$0, -12(%rbp)
.LBB79_287:                             # %for.cond2087
                                        #   Parent Loop BB79_281 Depth=1
                                        #     Parent Loop BB79_285 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB79_289 Depth 4
                                        #         Child Loop BB79_293 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB79_298
# %bb.288:                              # %for.body2090
                                        #   in Loop: Header=BB79_287 Depth=3
	movl	$0, -16(%rbp)
.LBB79_289:                             # %for.cond2091
                                        #   Parent Loop BB79_281 Depth=1
                                        #     Parent Loop BB79_285 Depth=2
                                        #       Parent Loop BB79_287 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB79_292
# %bb.290:                              # %for.body2094
                                        #   in Loop: Header=BB79_289 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.291:                              # %for.inc2104
                                        #   in Loop: Header=BB79_289 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB79_289
.LBB79_292:                             # %for.end2106
                                        #   in Loop: Header=BB79_287 Depth=3
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB79_293:                             # %for.cond2125
                                        #   Parent Loop BB79_281 Depth=1
                                        #     Parent Loop BB79_285 Depth=2
                                        #       Parent Loop BB79_287 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB79_296
# %bb.294:                              # %for.body2128
                                        #   in Loop: Header=BB79_293 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-120(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.295:                              # %for.inc2154
                                        #   in Loop: Header=BB79_293 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB79_293
.LBB79_296:                             # %for.end2156
                                        #   in Loop: Header=BB79_287 Depth=3
	jmp	.LBB79_297
.LBB79_297:                             # %for.inc2157
                                        #   in Loop: Header=BB79_287 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_287
.LBB79_298:                             # %for.end2159
                                        #   in Loop: Header=BB79_285 Depth=2
	movl	$0, -16(%rbp)
.LBB79_299:                             # %for.cond2160
                                        #   Parent Loop BB79_281 Depth=1
                                        #     Parent Loop BB79_285 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB79_303 Depth 4
                                        #         Child Loop BB79_307 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB79_301
# %bb.300:                              # %land.rhs2163
                                        #   in Loop: Header=BB79_299 Depth=3
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB79_301:                             # %land.end2166
                                        #   in Loop: Header=BB79_299 Depth=3
	testb	$1, %al
	jne	.LBB79_302
	jmp	.LBB79_336
.LBB79_302:                             # %for.body2168
                                        #   in Loop: Header=BB79_299 Depth=3
	movl	$0, -12(%rbp)
.LBB79_303:                             # %for.cond2169
                                        #   Parent Loop BB79_281 Depth=1
                                        #     Parent Loop BB79_285 Depth=2
                                        #       Parent Loop BB79_299 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB79_306
# %bb.304:                              # %for.body2172
                                        #   in Loop: Header=BB79_303 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.305:                              # %for.inc2182
                                        #   in Loop: Header=BB79_303 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_303
.LBB79_306:                             # %for.end2184
                                        #   in Loop: Header=BB79_299 Depth=3
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB79_307:                             # %for.cond2203
                                        #   Parent Loop BB79_281 Depth=1
                                        #     Parent Loop BB79_285 Depth=2
                                        #       Parent Loop BB79_299 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB79_334
# %bb.308:                              # %for.body2206
                                        #   in Loop: Header=BB79_307 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB79_328
# %bb.309:                              # %if.then2209
                                        #   in Loop: Header=BB79_307 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72688(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-72(%rbp), %rsi
	addl	-96(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-24(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-28(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB79_311
# %bb.310:                              # %cond.true2230
                                        #   in Loop: Header=BB79_307 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB79_312
.LBB79_311:                             # %cond.false2231
                                        #   in Loop: Header=BB79_307 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-72(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB79_312:                             # %cond.end2250
                                        #   in Loop: Header=BB79_307 Depth=4
	cmpq	%rcx, %rax
	jge	.LBB79_314
# %bb.313:                              # %cond.true2254
                                        #   in Loop: Header=BB79_307 Depth=4
	movq	img, %rax
	movslq	72688(%rax), %rax
	jmp	.LBB79_318
.LBB79_314:                             # %cond.false2257
                                        #   in Loop: Header=BB79_307 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-72(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB79_316
# %bb.315:                              # %cond.true2278
                                        #   in Loop: Header=BB79_307 Depth=4
	xorl	%eax, %eax
	jmp	.LBB79_317
.LBB79_316:                             # %cond.false2279
                                        #   in Loop: Header=BB79_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB79_317:                             # %cond.end2298
                                        #   in Loop: Header=BB79_307 Depth=4
.LBB79_318:                             # %cond.end2300
                                        #   in Loop: Header=BB79_307 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movslq	72688(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-72(%rbp), %rsi
	subl	-96(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-24(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-28(%rbp), %edi
	addl	-72(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB79_320
# %bb.319:                              # %cond.true2332
                                        #   in Loop: Header=BB79_307 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB79_321
.LBB79_320:                             # %cond.false2333
                                        #   in Loop: Header=BB79_307 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-72(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-72(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB79_321:                             # %cond.end2352
                                        #   in Loop: Header=BB79_307 Depth=4
	cmpq	%rcx, %rax
	jge	.LBB79_323
# %bb.322:                              # %cond.true2356
                                        #   in Loop: Header=BB79_307 Depth=4
	movq	img, %rax
	movslq	72688(%rax), %rax
	jmp	.LBB79_327
.LBB79_323:                             # %cond.false2359
                                        #   in Loop: Header=BB79_307 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-72(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-72(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB79_325
# %bb.324:                              # %cond.true2380
                                        #   in Loop: Header=BB79_307 Depth=4
	xorl	%eax, %eax
	jmp	.LBB79_326
.LBB79_325:                             # %cond.false2381
                                        #   in Loop: Header=BB79_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB79_326:                             # %cond.end2400
                                        #   in Loop: Header=BB79_307 Depth=4
.LBB79_327:                             # %cond.end2402
                                        #   in Loop: Header=BB79_307 Depth=4
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB79_332
.LBB79_328:                             # %if.else2412
                                        #   in Loop: Header=BB79_307 Depth=4
	cmpl	$0, -104(%rbp)
	je	.LBB79_330
# %bb.329:                              # %if.then2414
                                        #   in Loop: Header=BB79_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB79_331
.LBB79_330:                             # %if.else2439
                                        #   in Loop: Header=BB79_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB79_331:                             # %if.end2468
                                        #   in Loop: Header=BB79_307 Depth=4
	jmp	.LBB79_332
.LBB79_332:                             # %if.end2469
                                        #   in Loop: Header=BB79_307 Depth=4
	jmp	.LBB79_333
.LBB79_333:                             # %for.inc2470
                                        #   in Loop: Header=BB79_307 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_307
.LBB79_334:                             # %for.end2472
                                        #   in Loop: Header=BB79_299 Depth=3
	jmp	.LBB79_335
.LBB79_335:                             # %for.inc2473
                                        #   in Loop: Header=BB79_299 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB79_299
.LBB79_336:                             # %for.end2475
                                        #   in Loop: Header=BB79_285 Depth=2
	jmp	.LBB79_337
.LBB79_337:                             # %for.inc2476
                                        #   in Loop: Header=BB79_285 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB79_285
.LBB79_338:                             # %for.end2478
                                        #   in Loop: Header=BB79_281 Depth=1
	jmp	.LBB79_339
.LBB79_339:                             # %for.inc2479
                                        #   in Loop: Header=BB79_281 Depth=1
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB79_281
.LBB79_340:                             # %for.end2481
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB79_353
# %bb.341:                              # %if.then2484
	movl	$0, -12(%rbp)
.LBB79_342:                             # %for.cond2485
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_344 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB79_352
# %bb.343:                              # %for.body2489
                                        #   in Loop: Header=BB79_342 Depth=1
	movl	$0, -16(%rbp)
.LBB79_344:                             # %for.cond2490
                                        #   Parent Loop BB79_342 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB79_350
# %bb.345:                              # %for.body2494
                                        #   in Loop: Header=BB79_344 Depth=2
	cmpl	$0, -104(%rbp)
	je	.LBB79_347
# %bb.346:                              # %if.then2496
                                        #   in Loop: Header=BB79_344 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB79_348
.LBB79_347:                             # %if.else2518
                                        #   in Loop: Header=BB79_344 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB79_348:                             # %if.end2536
                                        #   in Loop: Header=BB79_344 Depth=2
	jmp	.LBB79_349
.LBB79_349:                             # %for.inc2537
                                        #   in Loop: Header=BB79_344 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB79_344
.LBB79_350:                             # %for.end2539
                                        #   in Loop: Header=BB79_342 Depth=1
	jmp	.LBB79_351
.LBB79_351:                             # %for.inc2540
                                        #   in Loop: Header=BB79_342 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_342
.LBB79_352:                             # %for.end2542
	jmp	.LBB79_353
.LBB79_353:                             # %if.end2543
	movl	-136(%rbp), %ebx
	cmpl	$1651026751, -380(%rbp) # imm = 0x6268AB3F
	jne	.LBB79_355
.LBB79_354:
	movl	%ebx, %eax
	addq	$424, %rsp              # imm = 0x1A8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB79_355:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB79_354
.Lfunc_end79:
	.size	dct_chroma.70, .Lfunc_end79-dct_chroma.70
	.cfi_endproc
                                        # -- End function
	.globl	dct_luma_16x16.71       # -- Begin function dct_luma_16x16.71
	.p2align	4, 0x90
	.type	dct_luma_16x16.71,@function
dct_luma_16x16.71:                      # @dct_luma_16x16.71
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$2280, %rsp             # imm = 0x8E8
	.cfi_offset %rbx, -24
	xorl	%eax, %eax
	movl	$41741942, -132(%rbp)   # imm = 0x27CEE76
	movl	%edi, -104(%rbp)
	movl	$0, -108(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -128(%rbp)
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -144(%rbp)
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -240(%rbp)
	movq	-128(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	img, %rdx
	addl	72668(%rdx), %ecx
	cmpl	$0, %ecx
	jne	.LBB80_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%al
.LBB80_2:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -68(%rbp)
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -100(%rbp)
	movl	-68(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -112(%rbp)
	movl	$0, -12(%rbp)
.LBB80_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_5 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB80_13
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB80_3 Depth=1
	movl	$0, -16(%rbp)
.LBB80_5:                               # %for.cond16
                                        #   Parent Loop BB80_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB80_11
# %bb.6:                                # %for.body18
                                        #   in Loop: Header=BB80_5 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB80_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB80_5 Depth=2
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB80_9
.LBB80_8:                               # %if.else
                                        #   in Loop: Header=BB80_5 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB80_9:                               # %if.end
                                        #   in Loop: Header=BB80_5 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rdi
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	shlq	$6, %rax
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movl	%ecx, (%rdi,%rax,4)
# %bb.10:                               # %for.inc
                                        #   in Loop: Header=BB80_5 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB80_5
.LBB80_11:                              # %for.end
                                        #   in Loop: Header=BB80_3 Depth=1
	jmp	.LBB80_12
.LBB80_12:                              # %for.inc61
                                        #   in Loop: Header=BB80_3 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB80_3
.LBB80_13:                              # %for.end63
	movl	$0, -20(%rbp)
.LBB80_14:                              # %for.cond64
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_18 Depth 2
                                        #       Child Loop BB80_20 Depth 3
                                        #         Child Loop BB80_22 Depth 4
                                        #       Child Loop BB80_28 Depth 3
                                        #         Child Loop BB80_30 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -20(%rbp)
	jge	.LBB80_16
# %bb.15:                               # %land.rhs67
                                        #   in Loop: Header=BB80_14 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB80_16:                              # %land.end69
                                        #   in Loop: Header=BB80_14 Depth=1
	testb	$1, %al
	jne	.LBB80_17
	jmp	.LBB80_39
.LBB80_17:                              # %for.body71
                                        #   in Loop: Header=BB80_14 Depth=1
	movl	$0, -24(%rbp)
.LBB80_18:                              # %for.cond72
                                        #   Parent Loop BB80_14 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB80_20 Depth 3
                                        #         Child Loop BB80_22 Depth 4
                                        #       Child Loop BB80_28 Depth 3
                                        #         Child Loop BB80_30 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB80_37
# %bb.19:                               # %for.body75
                                        #   in Loop: Header=BB80_18 Depth=2
	movl	$0, -12(%rbp)
.LBB80_20:                              # %for.cond76
                                        #   Parent Loop BB80_14 Depth=1
                                        #     Parent Loop BB80_18 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB80_22 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB80_27
# %bb.21:                               # %for.body79
                                        #   in Loop: Header=BB80_20 Depth=3
	movl	$0, -16(%rbp)
.LBB80_22:                              # %for.cond80
                                        #   Parent Loop BB80_14 Depth=1
                                        #     Parent Loop BB80_18 Depth=2
                                        #       Parent Loop BB80_20 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB80_25
# %bb.23:                               # %for.body83
                                        #   in Loop: Header=BB80_22 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	movl	%ecx, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-56(%rbp), %rax
	movl	%ecx, -48(%rbp,%rax,4)
# %bb.24:                               # %for.inc123
                                        #   in Loop: Header=BB80_22 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB80_22
.LBB80_25:                              # %for.end125
                                        #   in Loop: Header=BB80_20 Depth=3
	leaq	-1264(%rbp), %rax
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movq	%rax, %rdx
	addq	$256, %rdx              # imm = 0x100
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	addq	$768, %rax              # imm = 0x300
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.26:                               # %for.inc167
                                        #   in Loop: Header=BB80_20 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB80_20
.LBB80_27:                              # %for.end169
                                        #   in Loop: Header=BB80_18 Depth=2
	movl	$0, -16(%rbp)
.LBB80_28:                              # %for.cond170
                                        #   Parent Loop BB80_14 Depth=1
                                        #     Parent Loop BB80_18 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB80_30 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB80_35
# %bb.29:                               # %for.body173
                                        #   in Loop: Header=BB80_28 Depth=3
	movl	$0, -12(%rbp)
.LBB80_30:                              # %for.cond174
                                        #   Parent Loop BB80_14 Depth=1
                                        #     Parent Loop BB80_18 Depth=2
                                        #       Parent Loop BB80_28 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB80_33
# %bb.31:                               # %for.body177
                                        #   in Loop: Header=BB80_30 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-12(%rbp), %rdx
	movl	%ecx, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-52(%rbp), %rax
	movl	%ecx, -48(%rbp,%rax,4)
# %bb.32:                               # %for.inc217
                                        #   in Loop: Header=BB80_30 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB80_30
.LBB80_33:                              # %for.end219
                                        #   in Loop: Header=BB80_28 Depth=3
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, 32(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, 16(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, 48(%rax,%rdx,4)
# %bb.34:                               # %for.inc262
                                        #   in Loop: Header=BB80_28 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB80_28
.LBB80_35:                              # %for.end264
                                        #   in Loop: Header=BB80_18 Depth=2
	jmp	.LBB80_36
.LBB80_36:                              # %for.inc265
                                        #   in Loop: Header=BB80_18 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB80_18
.LBB80_37:                              # %for.end267
                                        #   in Loop: Header=BB80_14 Depth=1
	jmp	.LBB80_38
.LBB80_38:                              # %for.inc268
                                        #   in Loop: Header=BB80_14 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB80_14
.LBB80_39:                              # %for.end270
	movl	$0, -12(%rbp)
.LBB80_40:                              # %for.cond271
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_42 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB80_47
# %bb.41:                               # %for.body274
                                        #   in Loop: Header=BB80_40 Depth=1
	movl	$0, -16(%rbp)
.LBB80_42:                              # %for.cond275
                                        #   Parent Loop BB80_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB80_45
# %bb.43:                               # %for.body278
                                        #   in Loop: Header=BB80_42 Depth=2
	leaq	-1264(%rbp), %rax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.44:                               # %for.inc289
                                        #   in Loop: Header=BB80_42 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB80_42
.LBB80_45:                              # %for.end291
                                        #   in Loop: Header=BB80_40 Depth=1
	jmp	.LBB80_46
.LBB80_46:                              # %for.inc292
                                        #   in Loop: Header=BB80_40 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB80_40
.LBB80_47:                              # %for.end294
	movl	$0, -12(%rbp)
.LBB80_48:                              # %for.cond295
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_52 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB80_50
# %bb.49:                               # %land.rhs298
                                        #   in Loop: Header=BB80_48 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB80_50:                              # %land.end301
                                        #   in Loop: Header=BB80_48 Depth=1
	testb	$1, %al
	jne	.LBB80_51
	jmp	.LBB80_57
.LBB80_51:                              # %for.body303
                                        #   in Loop: Header=BB80_48 Depth=1
	movl	$0, -16(%rbp)
.LBB80_52:                              # %for.cond304
                                        #   Parent Loop BB80_48 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB80_55
# %bb.53:                               # %for.body307
                                        #   in Loop: Header=BB80_52 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-56(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-56(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-56(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.54:                               # %for.inc331
                                        #   in Loop: Header=BB80_52 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB80_52
.LBB80_55:                              # %for.end333
                                        #   in Loop: Header=BB80_48 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -224(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -192(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	addl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -208(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.56:                               # %for.inc358
                                        #   in Loop: Header=BB80_48 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB80_48
.LBB80_57:                              # %for.end360
	movl	$0, -16(%rbp)
.LBB80_58:                              # %for.cond361
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_62 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB80_60
# %bb.59:                               # %land.rhs364
                                        #   in Loop: Header=BB80_58 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB80_60:                              # %land.end367
                                        #   in Loop: Header=BB80_58 Depth=1
	testb	$1, %al
	jne	.LBB80_61
	jmp	.LBB80_67
.LBB80_61:                              # %for.body369
                                        #   in Loop: Header=BB80_58 Depth=1
	movl	$0, -12(%rbp)
.LBB80_62:                              # %for.cond370
                                        #   Parent Loop BB80_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB80_65
# %bb.63:                               # %for.body373
                                        #   in Loop: Header=BB80_62 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.64:                               # %for.inc397
                                        #   in Loop: Header=BB80_62 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB80_62
.LBB80_65:                              # %for.end399
                                        #   in Loop: Header=BB80_58 Depth=1
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-224(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-36(%rbp), %ecx
	addl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.66:                               # %for.inc427
                                        #   in Loop: Header=BB80_58 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB80_58
.LBB80_67:                              # %for.end429
	movl	$-1, -80(%rbp)
	movl	$0, -76(%rbp)
	movl	$0, -60(%rbp)
.LBB80_68:                              # %for.cond430
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -60(%rbp)
	jge	.LBB80_88
# %bb.69:                               # %for.body433
                                        #   in Loop: Header=BB80_68 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB80_72
# %bb.70:                               # %lor.lhs.false
                                        #   in Loop: Header=BB80_68 Depth=1
	cmpl	$0, mb_adaptive
	je	.LBB80_73
# %bb.71:                               # %land.lhs.true
                                        #   in Loop: Header=BB80_68 Depth=1
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB80_73
.LBB80_72:                              # %if.then437
                                        #   in Loop: Header=BB80_68 Depth=1
	movslq	-60(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-60(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB80_74
.LBB80_73:                              # %if.else446
                                        #   in Loop: Header=BB80_68 Depth=1
	movslq	-60(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-60(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB80_74:                              # %if.end455
                                        #   in Loop: Header=BB80_68 Depth=1
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB80_76
# %bb.75:                               # %if.then458
                                        #   in Loop: Header=BB80_68 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -64(%rbp)
	jmp	.LBB80_77
.LBB80_76:                              # %if.else463
                                        #   in Loop: Header=BB80_68 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-68(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-112(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -64(%rbp)
.LBB80_77:                              # %if.end481
                                        #   in Loop: Header=BB80_68 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB80_82
# %bb.78:                               # %land.lhs.true484
                                        #   in Loop: Header=BB80_68 Depth=1
	movq	img, %rax
	cmpl	$10, 40(%rax)
	jge	.LBB80_82
# %bb.79:                               # %if.then488
                                        #   in Loop: Header=BB80_68 Depth=1
	cmpl	$2063, -64(%rbp)        # imm = 0x80F
	jle	.LBB80_81
# %bb.80:                               # %if.then491
                                        #   in Loop: Header=BB80_68 Depth=1
	movl	$2063, -64(%rbp)        # imm = 0x80F
.LBB80_81:                              # %if.end492
                                        #   in Loop: Header=BB80_68 Depth=1
	jmp	.LBB80_82
.LBB80_82:                              # %if.end493
                                        #   in Loop: Header=BB80_68 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB80_84
# %bb.83:                               # %if.then496
                                        #   in Loop: Header=BB80_68 Depth=1
	movl	-64(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-144(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	movq	-240(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	movl	$-1, -80(%rbp)
.LBB80_84:                              # %if.end507
                                        #   in Loop: Header=BB80_68 Depth=1
	cmpl	$0, -72(%rbp)
	jne	.LBB80_86
# %bb.85:                               # %if.then509
                                        #   in Loop: Header=BB80_68 Depth=1
	movl	-64(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB80_86:                              # %if.end519
                                        #   in Loop: Header=BB80_68 Depth=1
	jmp	.LBB80_87
.LBB80_87:                              # %for.inc520
                                        #   in Loop: Header=BB80_68 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB80_68
.LBB80_88:                              # %for.end522
	movq	-144(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB80_89:                              # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_93 Depth 2
                                        #     Child Loop BB80_97 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB80_91
# %bb.90:                               # %land.rhs528
                                        #   in Loop: Header=BB80_89 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB80_91:                              # %land.end531
                                        #   in Loop: Header=BB80_89 Depth=1
	testb	$1, %al
	jne	.LBB80_92
	jmp	.LBB80_102
.LBB80_92:                              # %for.body533
                                        #   in Loop: Header=BB80_89 Depth=1
	movl	$0, -16(%rbp)
.LBB80_93:                              # %for.cond534
                                        #   Parent Loop BB80_89 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB80_96
# %bb.94:                               # %for.body537
                                        #   in Loop: Header=BB80_93 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.95:                               # %for.inc544
                                        #   in Loop: Header=BB80_93 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB80_93
.LBB80_96:                              # %for.end546
                                        #   in Loop: Header=BB80_89 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB80_97:                              # %for.cond563
                                        #   Parent Loop BB80_89 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB80_100
# %bb.98:                               # %for.body566
                                        #   in Loop: Header=BB80_97 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-56(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-56(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movslq	-56(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.99:                               # %for.inc586
                                        #   in Loop: Header=BB80_97 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB80_97
.LBB80_100:                             # %for.end588
                                        #   in Loop: Header=BB80_89 Depth=1
	jmp	.LBB80_101
.LBB80_101:                             # %for.inc589
                                        #   in Loop: Header=BB80_89 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB80_89
.LBB80_102:                             # %for.end591
	movl	$0, -16(%rbp)
.LBB80_103:                             # %for.cond592
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_107 Depth 2
                                        #     Child Loop BB80_111 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB80_105
# %bb.104:                              # %land.rhs595
                                        #   in Loop: Header=BB80_103 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB80_105:                             # %land.end598
                                        #   in Loop: Header=BB80_103 Depth=1
	testb	$1, %al
	jne	.LBB80_106
	jmp	.LBB80_119
.LBB80_106:                             # %for.body600
                                        #   in Loop: Header=BB80_103 Depth=1
	movl	$0, -12(%rbp)
.LBB80_107:                             # %for.cond601
                                        #   Parent Loop BB80_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB80_110
# %bb.108:                              # %for.body604
                                        #   in Loop: Header=BB80_107 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.109:                              # %for.inc611
                                        #   in Loop: Header=BB80_107 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB80_107
.LBB80_110:                             # %for.end613
                                        #   in Loop: Header=BB80_103 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB80_111:                             # %for.cond630
                                        #   Parent Loop BB80_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB80_117
# %bb.112:                              # %for.body633
                                        #   in Loop: Header=BB80_111 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	cmpl	$6, -68(%rbp)
	jge	.LBB80_114
# %bb.113:                              # %if.then637
                                        #   in Loop: Header=BB80_111 Depth=2
	leaq	-1264(%rbp), %r8
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %esi
	movslq	-52(%rbp), %rax
	addl	-96(%rbp,%rax,4), %esi
	movslq	-100(%rbp), %rax
	shlq	$6, %rax
	movabsq	$InvLevelScale4x4Luma_Intra, %rdi
	movq	%rdi, %rcx
	addq	%rax, %rcx
	imull	(%rcx), %esi
	movl	$5, %eax
	movl	$5, %ecx
	subl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r9d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %esi
	movl	$6, %edx
	movl	$6, %ecx
	subl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %esi
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movq	%r8, %rbx
	addq	%rcx, %rbx
	movslq	-12(%rbp), %rcx
	movl	%esi, (%rbx,%rcx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %esi
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %esi
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdi
	imull	(%rdi), %esi
	subl	-68(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r9d
	addl	%r9d, %esi
	subl	-68(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %esi
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r8
	movslq	-52(%rbp), %rax
	movl	%esi, (%r8,%rax,4)
	jmp	.LBB80_115
.LBB80_114:                             # %if.else680
                                        #   in Loop: Header=BB80_111 Depth=2
	leaq	-1264(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-52(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %edx
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rsi
	movq	%rsi, %rdi
	addq	%rcx, %rdi
	imull	(%rdi), %edx
	movl	-68(%rbp), %ecx
	subl	$6, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdi
	addq	%rcx, %rdi
	movslq	-12(%rbp), %rcx
	movl	%edx, (%rdi,%rcx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-68(%rbp), %ecx
	subl	$6, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-52(%rbp), %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB80_115:                             # %if.end717
                                        #   in Loop: Header=BB80_111 Depth=2
	jmp	.LBB80_116
.LBB80_116:                             # %for.inc718
                                        #   in Loop: Header=BB80_111 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB80_111
.LBB80_117:                             # %for.end720
                                        #   in Loop: Header=BB80_103 Depth=1
	jmp	.LBB80_118
.LBB80_118:                             # %for.inc721
                                        #   in Loop: Header=BB80_103 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB80_103
.LBB80_119:                             # %for.end723
	movl	$0, -20(%rbp)
.LBB80_120:                             # %for.cond724
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_122 Depth 2
                                        #       Child Loop BB80_124 Depth 3
                                        #       Child Loop BB80_143 Depth 3
                                        #         Child Loop BB80_147 Depth 4
                                        #         Child Loop BB80_151 Depth 4
                                        #       Child Loop BB80_157 Depth 3
                                        #         Child Loop BB80_161 Depth 4
                                        #         Child Loop BB80_165 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB80_174
# %bb.121:                              # %for.body727
                                        #   in Loop: Header=BB80_120 Depth=1
	movl	$0, -24(%rbp)
.LBB80_122:                             # %for.cond728
                                        #   Parent Loop BB80_120 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB80_124 Depth 3
                                        #       Child Loop BB80_143 Depth 3
                                        #         Child Loop BB80_147 Depth 4
                                        #         Child Loop BB80_151 Depth 4
                                        #       Child Loop BB80_157 Depth 3
                                        #         Child Loop BB80_161 Depth 4
                                        #         Child Loop BB80_165 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB80_172
# %bb.123:                              # %for.body731
                                        #   in Loop: Header=BB80_122 Depth=2
	movl	$-1, -80(%rbp)
	movl	$0, -76(%rbp)
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -120(%rbp)
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -116(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -152(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -232(%rbp)
	movl	$1, -60(%rbp)
.LBB80_124:                             # %for.cond751
                                        #   Parent Loop BB80_120 Depth=1
                                        #     Parent Loop BB80_122 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -60(%rbp)
	jge	.LBB80_142
# %bb.125:                              # %for.body754
                                        #   in Loop: Header=BB80_124 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB80_128
# %bb.126:                              # %lor.lhs.false757
                                        #   in Loop: Header=BB80_124 Depth=3
	cmpl	$0, mb_adaptive
	je	.LBB80_129
# %bb.127:                              # %land.lhs.true759
                                        #   in Loop: Header=BB80_124 Depth=3
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB80_129
.LBB80_128:                             # %if.then762
                                        #   in Loop: Header=BB80_124 Depth=3
	movslq	-60(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-60(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB80_130
.LBB80_129:                             # %if.else771
                                        #   in Loop: Header=BB80_124 Depth=3
	movslq	-60(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-60(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB80_130:                             # %if.end780
                                        #   in Loop: Header=BB80_124 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB80_132
# %bb.131:                              # %if.then783
                                        #   in Loop: Header=BB80_124 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -64(%rbp)
	jmp	.LBB80_133
.LBB80_132:                             # %if.else793
                                        #   in Loop: Header=BB80_124 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-68(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -64(%rbp)
.LBB80_133:                             # %if.end818
                                        #   in Loop: Header=BB80_124 Depth=3
	cmpl	$0, -64(%rbp)
	je	.LBB80_135
# %bb.134:                              # %if.then821
                                        #   in Loop: Header=BB80_124 Depth=3
	movl	$15, -108(%rbp)
	movl	-64(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-152(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	movq	-232(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	movl	$-1, -80(%rbp)
.LBB80_135:                             # %if.end836
                                        #   in Loop: Header=BB80_124 Depth=3
	cmpl	$0, -72(%rbp)
	jne	.LBB80_140
# %bb.136:                              # %if.then838
                                        #   in Loop: Header=BB80_124 Depth=3
	movl	-64(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movl	%eax, -64(%rbp)
	cmpl	$4, -68(%rbp)
	jge	.LBB80_138
# %bb.137:                              # %if.then850
                                        #   in Loop: Header=BB80_124 Depth=3
	movl	-64(%rbp), %eax
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB80_139
.LBB80_138:                             # %if.else871
                                        #   in Loop: Header=BB80_124 Depth=3
	movl	-64(%rbp), %eax
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-68(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB80_139:                             # %if.end889
                                        #   in Loop: Header=BB80_124 Depth=3
	jmp	.LBB80_140
.LBB80_140:                             # %if.end890
                                        #   in Loop: Header=BB80_124 Depth=3
	jmp	.LBB80_141
.LBB80_141:                             # %for.inc891
                                        #   in Loop: Header=BB80_124 Depth=3
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB80_124
.LBB80_142:                             # %for.end893
                                        #   in Loop: Header=BB80_122 Depth=2
	movq	-152(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB80_143:                             # %for.cond896
                                        #   Parent Loop BB80_120 Depth=1
                                        #     Parent Loop BB80_122 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB80_147 Depth 4
                                        #         Child Loop BB80_151 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB80_145
# %bb.144:                              # %land.rhs899
                                        #   in Loop: Header=BB80_143 Depth=3
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB80_145:                             # %land.end902
                                        #   in Loop: Header=BB80_143 Depth=3
	testb	$1, %al
	jne	.LBB80_146
	jmp	.LBB80_156
.LBB80_146:                             # %for.body904
                                        #   in Loop: Header=BB80_143 Depth=3
	movl	$0, -16(%rbp)
.LBB80_147:                             # %for.cond905
                                        #   Parent Loop BB80_120 Depth=1
                                        #     Parent Loop BB80_122 Depth=2
                                        #       Parent Loop BB80_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB80_150
# %bb.148:                              # %for.body908
                                        #   in Loop: Header=BB80_147 Depth=4
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.149:                              # %for.inc919
                                        #   in Loop: Header=BB80_147 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB80_147
.LBB80_150:                             # %for.end921
                                        #   in Loop: Header=BB80_143 Depth=3
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB80_151:                             # %for.cond940
                                        #   Parent Loop BB80_120 Depth=1
                                        #     Parent Loop BB80_122 Depth=2
                                        #       Parent Loop BB80_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB80_154
# %bb.152:                              # %for.body943
                                        #   in Loop: Header=BB80_151 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ecx
	movslq	-56(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movslq	-16(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.153:                              # %for.inc971
                                        #   in Loop: Header=BB80_151 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB80_151
.LBB80_154:                             # %for.end973
                                        #   in Loop: Header=BB80_143 Depth=3
	jmp	.LBB80_155
.LBB80_155:                             # %for.inc974
                                        #   in Loop: Header=BB80_143 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB80_143
.LBB80_156:                             # %for.end976
                                        #   in Loop: Header=BB80_122 Depth=2
	movl	$0, -16(%rbp)
.LBB80_157:                             # %for.cond977
                                        #   Parent Loop BB80_120 Depth=1
                                        #     Parent Loop BB80_122 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB80_161 Depth 4
                                        #         Child Loop BB80_165 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB80_159
# %bb.158:                              # %land.rhs980
                                        #   in Loop: Header=BB80_157 Depth=3
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB80_159:                             # %land.end983
                                        #   in Loop: Header=BB80_157 Depth=3
	testb	$1, %al
	jne	.LBB80_160
	jmp	.LBB80_170
.LBB80_160:                             # %for.body985
                                        #   in Loop: Header=BB80_157 Depth=3
	movl	$0, -12(%rbp)
.LBB80_161:                             # %for.cond986
                                        #   Parent Loop BB80_120 Depth=1
                                        #     Parent Loop BB80_122 Depth=2
                                        #       Parent Loop BB80_157 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB80_164
# %bb.162:                              # %for.body989
                                        #   in Loop: Header=BB80_161 Depth=4
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.163:                              # %for.inc1000
                                        #   in Loop: Header=BB80_161 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB80_161
.LBB80_164:                             # %for.end1002
                                        #   in Loop: Header=BB80_157 Depth=3
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB80_165:                             # %for.cond1021
                                        #   Parent Loop BB80_120 Depth=1
                                        #     Parent Loop BB80_122 Depth=2
                                        #       Parent Loop BB80_157 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB80_168
# %bb.166:                              # %for.body1024
                                        #   in Loop: Header=BB80_165 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ecx
	movslq	-52(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.167:                              # %for.inc1052
                                        #   in Loop: Header=BB80_165 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB80_165
.LBB80_168:                             # %for.end1054
                                        #   in Loop: Header=BB80_157 Depth=3
	jmp	.LBB80_169
.LBB80_169:                             # %for.inc1055
                                        #   in Loop: Header=BB80_157 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB80_157
.LBB80_170:                             # %for.end1057
                                        #   in Loop: Header=BB80_122 Depth=2
	jmp	.LBB80_171
.LBB80_171:                             # %for.inc1058
                                        #   in Loop: Header=BB80_122 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB80_122
.LBB80_172:                             # %for.end1060
                                        #   in Loop: Header=BB80_120 Depth=1
	jmp	.LBB80_173
.LBB80_173:                             # %for.inc1061
                                        #   in Loop: Header=BB80_120 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB80_120
.LBB80_174:                             # %for.end1063
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB80_184
# %bb.175:                              # %if.then1066
	movl	$0, -12(%rbp)
.LBB80_176:                             # %for.cond1067
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_178 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB80_183
# %bb.177:                              # %for.body1070
                                        #   in Loop: Header=BB80_176 Depth=1
	movl	$0, -16(%rbp)
.LBB80_178:                             # %for.cond1071
                                        #   Parent Loop BB80_176 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB80_181
# %bb.179:                              # %for.body1074
                                        #   in Loop: Header=BB80_178 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.180:                              # %for.inc1091
                                        #   in Loop: Header=BB80_178 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB80_178
.LBB80_181:                             # %for.end1093
                                        #   in Loop: Header=BB80_176 Depth=1
	jmp	.LBB80_182
.LBB80_182:                             # %for.inc1094
                                        #   in Loop: Header=BB80_176 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB80_176
.LBB80_183:                             # %for.end1096
	jmp	.LBB80_196
.LBB80_184:                             # %if.else1097
	movl	$0, -12(%rbp)
.LBB80_185:                             # %for.cond1098
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_187 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB80_195
# %bb.186:                              # %for.body1101
                                        #   in Loop: Header=BB80_185 Depth=1
	movl	$0, -16(%rbp)
.LBB80_187:                             # %for.cond1102
                                        #   Parent Loop BB80_185 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB80_193
# %bb.188:                              # %for.body1105
                                        #   in Loop: Header=BB80_187 Depth=2
	cmpl	$0, -72(%rbp)
	je	.LBB80_190
# %bb.189:                              # %if.then1107
                                        #   in Loop: Header=BB80_187 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB80_191
.LBB80_190:                             # %if.else1125
                                        #   in Loop: Header=BB80_187 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB80_191:                             # %if.end1145
                                        #   in Loop: Header=BB80_187 Depth=2
	jmp	.LBB80_192
.LBB80_192:                             # %for.inc1146
                                        #   in Loop: Header=BB80_187 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB80_187
.LBB80_193:                             # %for.end1148
                                        #   in Loop: Header=BB80_185 Depth=1
	jmp	.LBB80_194
.LBB80_194:                             # %for.inc1149
                                        #   in Loop: Header=BB80_185 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB80_185
.LBB80_195:                             # %for.end1151
	jmp	.LBB80_196
.LBB80_196:                             # %if.end1152
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB80_218
# %bb.197:                              # %if.then1155
	movl	$0, -12(%rbp)
.LBB80_198:                             # %for.cond1156
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_200 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB80_217
# %bb.199:                              # %for.body1159
                                        #   in Loop: Header=BB80_198 Depth=1
	movl	$0, -16(%rbp)
.LBB80_200:                             # %for.cond1160
                                        #   Parent Loop BB80_198 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB80_215
# %bb.201:                              # %for.body1163
                                        #   in Loop: Header=BB80_200 Depth=2
	cmpl	$0, -72(%rbp)
	je	.LBB80_203
# %bb.202:                              # %if.then1165
                                        #   in Loop: Header=BB80_200 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB80_213
.LBB80_203:                             # %if.else1186
                                        #   in Loop: Header=BB80_200 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	leaq	-2288(%rbp), %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movslq	(%rsi,%rdx,4), %rdx
	movq	img, %rsi
	addq	$4792, %rsi             # imm = 0x12B8
	movslq	-104(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-12(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB80_205
# %bb.204:                              # %cond.true
                                        #   in Loop: Header=BB80_200 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB80_206
.LBB80_205:                             # %cond.false
                                        #   in Loop: Header=BB80_200 Depth=2
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movslq	(%rdx,%rcx,4), %rcx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-104(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB80_206:                             # %cond.end
                                        #   in Loop: Header=BB80_200 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB80_208
# %bb.207:                              # %cond.true1226
                                        #   in Loop: Header=BB80_200 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB80_212
.LBB80_208:                             # %cond.false1229
                                        #   in Loop: Header=BB80_200 Depth=2
	xorl	%eax, %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movslq	(%rdx,%rcx,4), %rcx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-104(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB80_210
# %bb.209:                              # %cond.true1249
                                        #   in Loop: Header=BB80_200 Depth=2
	xorl	%eax, %eax
	jmp	.LBB80_211
.LBB80_210:                             # %cond.false1250
                                        #   in Loop: Header=BB80_200 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movslq	(%rcx,%rax,4), %rax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB80_211:                             # %cond.end1268
                                        #   in Loop: Header=BB80_200 Depth=2
.LBB80_212:                             # %cond.end1270
                                        #   in Loop: Header=BB80_200 Depth=2
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB80_213:                             # %if.end1282
                                        #   in Loop: Header=BB80_200 Depth=2
	jmp	.LBB80_214
.LBB80_214:                             # %for.inc1283
                                        #   in Loop: Header=BB80_200 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB80_200
.LBB80_215:                             # %for.end1285
                                        #   in Loop: Header=BB80_198 Depth=1
	jmp	.LBB80_216
.LBB80_216:                             # %for.inc1286
                                        #   in Loop: Header=BB80_198 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB80_198
.LBB80_217:                             # %for.end1288
	jmp	.LBB80_218
.LBB80_218:                             # %if.end1289
	movl	-108(%rbp), %ebx
	cmpl	$41741942, -132(%rbp)   # imm = 0x27CEE76
	jne	.LBB80_220
.LBB80_219:
	movl	%ebx, %eax
	addq	$2280, %rsp             # imm = 0x8E8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB80_220:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB80_219
.Lfunc_end80:
	.size	dct_luma_16x16.71, .Lfunc_end80-dct_luma_16x16.71
	.cfi_endproc
                                        # -- End function
	.globl	dct_luma.72             # -- Begin function dct_luma.72
	.p2align	4, 0x90
	.type	dct_luma.72,@function
dct_luma.72:                            # @dct_luma.72
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	xorl	%ebx, %ebx
	movl	$1016445110, -148(%rbp) # imm = 0x3C95B8B6
	movl	%edi, -28(%rbp)
	movl	%esi, -32(%rbp)
	movq	%rdx, -168(%rbp)
	movl	%ecx, -108(%rbp)
	movl	-28(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -120(%rbp)
	movl	-32(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-120(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -128(%rbp)
	movl	-132(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-120(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -112(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-128(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -160(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-128(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -176(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB81_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%bl
.LBB81_2:                               # %land.end
	andb	$1, %bl
	movzbl	%bl, %eax
	movl	%eax, -40(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -96(%rbp)
	movl	-36(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -124(%rbp)
	movl	$0, -12(%rbp)
.LBB81_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_7 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB81_5
# %bb.4:                                # %land.rhs31
                                        #   in Loop: Header=BB81_3 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB81_5:                               # %land.end32
                                        #   in Loop: Header=BB81_3 Depth=1
	testb	$1, %al
	jne	.LBB81_6
	jmp	.LBB81_12
.LBB81_6:                               # %for.body
                                        #   in Loop: Header=BB81_3 Depth=1
	movl	$0, -16(%rbp)
.LBB81_7:                               # %for.cond34
                                        #   Parent Loop BB81_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB81_10
# %bb.8:                                # %for.body36
                                        #   in Loop: Header=BB81_7 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-88(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-88(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-88(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB81_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB81_7
.LBB81_10:                              # %for.end
                                        #   in Loop: Header=BB81_3 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.11:                               # %for.inc93
                                        #   in Loop: Header=BB81_3 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB81_3
.LBB81_12:                              # %for.end95
	movl	$0, -16(%rbp)
.LBB81_13:                              # %for.cond96
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_17 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB81_15
# %bb.14:                               # %land.rhs98
                                        #   in Loop: Header=BB81_13 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB81_15:                              # %land.end101
                                        #   in Loop: Header=BB81_13 Depth=1
	testb	$1, %al
	jne	.LBB81_16
	jmp	.LBB81_22
.LBB81_16:                              # %for.body103
                                        #   in Loop: Header=BB81_13 Depth=1
	movl	$0, -12(%rbp)
.LBB81_17:                              # %for.cond104
                                        #   Parent Loop BB81_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB81_20
# %bb.18:                               # %for.body106
                                        #   in Loop: Header=BB81_17 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-20(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.19:                               # %for.inc134
                                        #   in Loop: Header=BB81_17 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB81_17
.LBB81_20:                              # %for.end136
                                        #   in Loop: Header=BB81_13 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.21:                               # %for.inc167
                                        #   in Loop: Header=BB81_13 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB81_13
.LBB81_22:                              # %for.end169
	movl	$0, -116(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -104(%rbp)
	movl	$0, -84(%rbp)
.LBB81_23:                              # %for.cond170
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -84(%rbp)
	jge	.LBB81_57
# %bb.24:                               # %for.body172
                                        #   in Loop: Header=BB81_23 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB81_27
# %bb.25:                               # %lor.lhs.false
                                        #   in Loop: Header=BB81_23 Depth=1
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB81_28
# %bb.26:                               # %land.lhs.true
                                        #   in Loop: Header=BB81_23 Depth=1
	movq	-144(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB81_28
.LBB81_27:                              # %if.then
                                        #   in Loop: Header=BB81_23 Depth=1
	movslq	-84(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-84(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB81_29
.LBB81_28:                              # %if.else
                                        #   in Loop: Header=BB81_23 Depth=1
	movslq	-84(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-84(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB81_29:                              # %if.end
                                        #   in Loop: Header=BB81_23 Depth=1
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -92(%rbp)
	cmpl	$0, -40(%rbp)
	je	.LBB81_31
# %bb.30:                               # %if.then193
                                        #   in Loop: Header=BB81_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -24(%rbp)
	jmp	.LBB81_35
.LBB81_31:                              # %if.else199
                                        #   in Loop: Header=BB81_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB81_33
# %bb.32:                               # %if.then202
                                        #   in Loop: Header=BB81_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-36(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB81_34
.LBB81_33:                              # %if.else223
                                        #   in Loop: Header=BB81_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-36(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -24(%rbp)
.LBB81_34:                              # %if.end245
                                        #   in Loop: Header=BB81_23 Depth=1
	jmp	.LBB81_35
.LBB81_35:                              # %if.end246
                                        #   in Loop: Header=BB81_23 Depth=1
	cmpl	$0, -24(%rbp)
	je	.LBB81_53
# %bb.36:                               # %if.then249
                                        #   in Loop: Header=BB81_23 Depth=1
	movl	$1, -116(%rbp)
	cmpl	$1, -24(%rbp)
	jg	.LBB81_38
# %bb.37:                               # %lor.lhs.false252
                                        #   in Loop: Header=BB81_23 Depth=1
	cmpl	$0, -40(%rbp)
	je	.LBB81_39
.LBB81_38:                              # %if.then254
                                        #   in Loop: Header=BB81_23 Depth=1
	movq	-168(%rbp), %rax
	movl	(%rax), %ecx
	addl	$999999, %ecx           # imm = 0xF423F
	movl	%ecx, (%rax)
	jmp	.LBB81_40
.LBB81_39:                              # %if.else256
                                        #   in Loop: Header=BB81_23 Depth=1
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-100(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-168(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB81_40:                              # %if.end263
                                        #   in Loop: Header=BB81_23 Depth=1
	movl	-24(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-160(%rbp), %rcx
	movslq	-104(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-176(%rbp), %rcx
	movslq	-104(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-104(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -104(%rbp)
	movl	$-1, -100(%rbp)
	movl	-24(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -24(%rbp)
	cmpl	$0, -40(%rbp)
	je	.LBB81_42
# %bb.41:                               # %if.then282
                                        #   in Loop: Header=BB81_23 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB81_52
.LBB81_42:                              # %if.else283
                                        #   in Loop: Header=BB81_23 Depth=1
	cmpl	$4, -36(%rbp)
	jge	.LBB81_47
# %bb.43:                               # %if.then286
                                        #   in Loop: Header=BB81_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB81_45
# %bb.44:                               # %if.then289
                                        #   in Loop: Header=BB81_23 Depth=1
	movl	-24(%rbp), %eax
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB81_46
.LBB81_45:                              # %if.else301
                                        #   in Loop: Header=BB81_23 Depth=1
	movl	-24(%rbp), %eax
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -92(%rbp)
.LBB81_46:                              # %if.end314
                                        #   in Loop: Header=BB81_23 Depth=1
	jmp	.LBB81_51
.LBB81_47:                              # %if.else315
                                        #   in Loop: Header=BB81_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB81_49
# %bb.48:                               # %if.then318
                                        #   in Loop: Header=BB81_23 Depth=1
	movl	-24(%rbp), %eax
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-36(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB81_50
.LBB81_49:                              # %if.else328
                                        #   in Loop: Header=BB81_23 Depth=1
	movl	-24(%rbp), %eax
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-36(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -92(%rbp)
.LBB81_50:                              # %if.end338
                                        #   in Loop: Header=BB81_23 Depth=1
	jmp	.LBB81_51
.LBB81_51:                              # %if.end339
                                        #   in Loop: Header=BB81_23 Depth=1
	jmp	.LBB81_52
.LBB81_52:                              # %if.end340
                                        #   in Loop: Header=BB81_23 Depth=1
	jmp	.LBB81_53
.LBB81_53:                              # %if.end341
                                        #   in Loop: Header=BB81_23 Depth=1
	cmpl	$0, -40(%rbp)
	jne	.LBB81_55
# %bb.54:                               # %if.then343
                                        #   in Loop: Header=BB81_23 Depth=1
	movl	-92(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB81_55:                              # %if.end349
                                        #   in Loop: Header=BB81_23 Depth=1
	jmp	.LBB81_56
.LBB81_56:                              # %for.inc350
                                        #   in Loop: Header=BB81_23 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB81_23
.LBB81_57:                              # %for.end352
	movq	-160(%rbp), %rax
	movslq	-104(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB81_58:                              # %for.cond355
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_62 Depth 2
                                        #     Child Loop BB81_66 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB81_60
# %bb.59:                               # %land.rhs358
                                        #   in Loop: Header=BB81_58 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB81_60:                              # %land.end361
                                        #   in Loop: Header=BB81_58 Depth=1
	testb	$1, %al
	jne	.LBB81_61
	jmp	.LBB81_71
.LBB81_61:                              # %for.body363
                                        #   in Loop: Header=BB81_58 Depth=1
	movl	$0, -16(%rbp)
.LBB81_62:                              # %for.cond364
                                        #   Parent Loop BB81_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB81_65
# %bb.63:                               # %for.body367
                                        #   in Loop: Header=BB81_62 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.64:                               # %for.inc375
                                        #   in Loop: Header=BB81_62 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB81_62
.LBB81_65:                              # %for.end377
                                        #   in Loop: Header=BB81_58 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -16(%rbp)
.LBB81_66:                              # %for.cond396
                                        #   Parent Loop BB81_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB81_69
# %bb.67:                               # %for.body399
                                        #   in Loop: Header=BB81_66 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -88(%rbp)
	movslq	-16(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-88(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-88(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-88(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.68:                               # %for.inc421
                                        #   in Loop: Header=BB81_66 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB81_66
.LBB81_69:                              # %for.end423
                                        #   in Loop: Header=BB81_58 Depth=1
	jmp	.LBB81_70
.LBB81_70:                              # %for.inc424
                                        #   in Loop: Header=BB81_58 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB81_58
.LBB81_71:                              # %for.end426
	movl	$0, -16(%rbp)
.LBB81_72:                              # %for.cond427
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_76 Depth 2
                                        #     Child Loop BB81_80 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB81_74
# %bb.73:                               # %land.rhs430
                                        #   in Loop: Header=BB81_72 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB81_74:                              # %land.end433
                                        #   in Loop: Header=BB81_72 Depth=1
	testb	$1, %al
	jne	.LBB81_75
	jmp	.LBB81_109
.LBB81_75:                              # %for.body435
                                        #   in Loop: Header=BB81_72 Depth=1
	movl	$0, -12(%rbp)
.LBB81_76:                              # %for.cond436
                                        #   Parent Loop BB81_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB81_79
# %bb.77:                               # %for.body439
                                        #   in Loop: Header=BB81_76 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.78:                               # %for.inc447
                                        #   in Loop: Header=BB81_76 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB81_76
.LBB81_79:                              # %for.end449
                                        #   in Loop: Header=BB81_72 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -12(%rbp)
.LBB81_80:                              # %for.cond468
                                        #   Parent Loop BB81_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB81_107
# %bb.81:                               # %for.body471
                                        #   in Loop: Header=BB81_80 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB81_101
# %bb.82:                               # %if.then474
                                        #   in Loop: Header=BB81_80 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-80(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	addl	-80(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-16(%rbp), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-12(%rbp), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB81_84
# %bb.83:                               # %cond.true
                                        #   in Loop: Header=BB81_80 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB81_85
.LBB81_84:                              # %cond.false
                                        #   in Loop: Header=BB81_80 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-12(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB81_85:                              # %cond.end
                                        #   in Loop: Header=BB81_80 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB81_87
# %bb.86:                               # %cond.true515
                                        #   in Loop: Header=BB81_80 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB81_91
.LBB81_87:                              # %cond.false518
                                        #   in Loop: Header=BB81_80 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-12(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB81_89
# %bb.88:                               # %cond.true539
                                        #   in Loop: Header=BB81_80 Depth=2
	xorl	%eax, %eax
	jmp	.LBB81_90
.LBB81_89:                              # %cond.false540
                                        #   in Loop: Header=BB81_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB81_90:                              # %cond.end559
                                        #   in Loop: Header=BB81_80 Depth=2
.LBB81_91:                              # %cond.end561
                                        #   in Loop: Header=BB81_80 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-80(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	subl	-80(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-16(%rbp), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-20(%rbp), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB81_93
# %bb.92:                               # %cond.true591
                                        #   in Loop: Header=BB81_80 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB81_94
.LBB81_93:                              # %cond.false592
                                        #   in Loop: Header=BB81_80 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-20(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB81_94:                              # %cond.end611
                                        #   in Loop: Header=BB81_80 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB81_96
# %bb.95:                               # %cond.true615
                                        #   in Loop: Header=BB81_80 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB81_100
.LBB81_96:                              # %cond.false618
                                        #   in Loop: Header=BB81_80 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-20(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB81_98
# %bb.97:                               # %cond.true639
                                        #   in Loop: Header=BB81_80 Depth=2
	xorl	%eax, %eax
	jmp	.LBB81_99
.LBB81_98:                              # %cond.false640
                                        #   in Loop: Header=BB81_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB81_99:                              # %cond.end659
                                        #   in Loop: Header=BB81_80 Depth=2
.LBB81_100:                             # %cond.end661
                                        #   in Loop: Header=BB81_80 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB81_105
.LBB81_101:                             # %if.else669
                                        #   in Loop: Header=BB81_80 Depth=2
	cmpl	$0, -40(%rbp)
	je	.LBB81_103
# %bb.102:                              # %if.then671
                                        #   in Loop: Header=BB81_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB81_104
.LBB81_103:                             # %if.else692
                                        #   in Loop: Header=BB81_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB81_104:                             # %if.end717
                                        #   in Loop: Header=BB81_80 Depth=2
	jmp	.LBB81_105
.LBB81_105:                             # %if.end718
                                        #   in Loop: Header=BB81_80 Depth=2
	jmp	.LBB81_106
.LBB81_106:                             # %for.inc719
                                        #   in Loop: Header=BB81_80 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB81_80
.LBB81_107:                             # %for.end721
                                        #   in Loop: Header=BB81_72 Depth=1
	jmp	.LBB81_108
.LBB81_108:                             # %for.inc722
                                        #   in Loop: Header=BB81_72 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB81_72
.LBB81_109:                             # %for.end724
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB81_122
# %bb.110:                              # %if.then727
	movl	$0, -12(%rbp)
.LBB81_111:                             # %for.cond728
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_113 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB81_121
# %bb.112:                              # %for.body731
                                        #   in Loop: Header=BB81_111 Depth=1
	movl	$0, -16(%rbp)
.LBB81_113:                             # %for.cond732
                                        #   Parent Loop BB81_111 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB81_119
# %bb.114:                              # %for.body735
                                        #   in Loop: Header=BB81_113 Depth=2
	cmpl	$0, -40(%rbp)
	je	.LBB81_116
# %bb.115:                              # %if.then737
                                        #   in Loop: Header=BB81_113 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-32(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB81_117
.LBB81_116:                             # %if.else761
                                        #   in Loop: Header=BB81_113 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-32(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB81_117:                             # %if.end779
                                        #   in Loop: Header=BB81_113 Depth=2
	jmp	.LBB81_118
.LBB81_118:                             # %for.inc780
                                        #   in Loop: Header=BB81_113 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB81_113
.LBB81_119:                             # %for.end782
                                        #   in Loop: Header=BB81_111 Depth=1
	jmp	.LBB81_120
.LBB81_120:                             # %for.inc783
                                        #   in Loop: Header=BB81_111 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB81_111
.LBB81_121:                             # %for.end785
	jmp	.LBB81_122
.LBB81_122:                             # %if.end786
	movl	-116(%rbp), %ebx
	cmpl	$1016445110, -148(%rbp) # imm = 0x3C95B8B6
	jne	.LBB81_124
.LBB81_123:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB81_124:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB81_123
.Lfunc_end81:
	.size	dct_luma.72, .Lfunc_end81-dct_luma.72
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function dct_chroma_sp.73
.LCPI82_0:
	.quad	4616189618054758400     # double 4
.LCPI82_1:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI82_2:
	.quad	4611686018427387904     # double 2
.LCPI82_3:
	.quad	4613937818241073152     # double 3
	.text
	.globl	dct_chroma_sp.73
	.p2align	4, 0x90
	.type	dct_chroma_sp.73,@function
dct_chroma_sp.73:                       # @dct_chroma_sp.73
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$552, %rsp              # imm = 0x228
	.cfi_offset %rbx, -24
	vmovsd	.LCPI82_2(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI82_3(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$125180179, -268(%rbp)  # imm = 0x7761913
	movl	%edi, -120(%rbp)
	movl	%esi, -208(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -184(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -280(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -296(%rbp)
	movq	-184(%rbp), %rax
	movl	12(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI82_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI82_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmulsd	%xmm0, %xmm2, %xmm0
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -264(%rbp)
	movq	-184(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB82_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB82_6
.LBB82_2:                               # %cond.false
	movq	-184(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB82_4
# %bb.3:                                # %cond.true18
	movl	$51, %eax
	jmp	.LBB82_5
.LBB82_4:                               # %cond.false19
	movq	-184(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
.LBB82_5:                               # %cond.end
.LBB82_6:                               # %cond.end23
	movl	%eax, -148(%rbp)
	movq	-184(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB82_8
# %bb.7:                                # %cond.true29
	xorl	%eax, %eax
	jmp	.LBB82_12
.LBB82_8:                               # %cond.false30
	movq	-184(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB82_10
# %bb.9:                                # %cond.true36
	movl	$51, %eax
	jmp	.LBB82_11
.LBB82_10:                              # %cond.false37
	movq	-184(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
.LBB82_11:                              # %cond.end41
.LBB82_12:                              # %cond.end43
	movl	%eax, -216(%rbp)
	cmpl	$0, -148(%rbp)
	jge	.LBB82_14
# %bb.13:                               # %cond.true47
	movl	-148(%rbp), %eax
	jmp	.LBB82_15
.LBB82_14:                              # %cond.false48
	movslq	-148(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB82_15:                              # %cond.end52
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -124(%rbp)
	cmpl	$0, -148(%rbp)
	jge	.LBB82_17
# %bb.16:                               # %cond.true58
	movl	-148(%rbp), %eax
	jmp	.LBB82_18
.LBB82_17:                              # %cond.false59
	movslq	-148(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB82_18:                              # %cond.end63
	subl	$0, %eax
	cltd
	movl	$6, %esi
	idivl	%esi
	movl	%edx, -96(%rbp)
	movl	-124(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -204(%rbp)
	movl	-204(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	idivl	%esi
	movl	%eax, -224(%rbp)
	cmpl	$0, -216(%rbp)
	jge	.LBB82_20
# %bb.19:                               # %cond.true70
	movq	-184(%rbp), %rax
	movl	16(%rax), %eax
	jmp	.LBB82_21
.LBB82_20:                              # %cond.false72
	movslq	-216(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB82_21:                              # %cond.end76
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -228(%rbp)
	cmpl	$0, -216(%rbp)
	jge	.LBB82_23
# %bb.22:                               # %cond.true82
	movq	-184(%rbp), %rax
	movl	16(%rax), %eax
	jmp	.LBB82_24
.LBB82_23:                              # %cond.false84
	movslq	-216(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB82_24:                              # %cond.end88
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%edx, -108(%rbp)
	movl	-228(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -112(%rbp)
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -220(%rbp)
	movl	$0, -12(%rbp)
.LBB82_25:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_27 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB82_32
# %bb.26:                               # %for.body
                                        #   in Loop: Header=BB82_25 Depth=1
	movl	$0, -16(%rbp)
.LBB82_27:                              # %for.cond97
                                        #   Parent Loop BB82_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB82_30
# %bb.28:                               # %for.body100
                                        #   in Loop: Header=BB82_27 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.29:                               # %for.inc
                                        #   in Loop: Header=BB82_27 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB82_27
.LBB82_30:                              # %for.end
                                        #   in Loop: Header=BB82_25 Depth=1
	jmp	.LBB82_31
.LBB82_31:                              # %for.inc121
                                        #   in Loop: Header=BB82_25 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB82_25
.LBB82_32:                              # %for.end123
	movl	$0, -24(%rbp)
.LBB82_33:                              # %for.cond124
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_35 Depth 2
                                        #       Child Loop BB82_37 Depth 3
                                        #         Child Loop BB82_39 Depth 4
                                        #       Child Loop BB82_45 Depth 3
                                        #         Child Loop BB82_47 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB82_56
# %bb.34:                               # %for.body127
                                        #   in Loop: Header=BB82_33 Depth=1
	movl	$0, -20(%rbp)
.LBB82_35:                              # %for.cond128
                                        #   Parent Loop BB82_33 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB82_37 Depth 3
                                        #         Child Loop BB82_39 Depth 4
                                        #       Child Loop BB82_45 Depth 3
                                        #         Child Loop BB82_47 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB82_54
# %bb.36:                               # %for.body131
                                        #   in Loop: Header=BB82_35 Depth=2
	movl	$0, -12(%rbp)
.LBB82_37:                              # %for.cond132
                                        #   Parent Loop BB82_33 Depth=1
                                        #     Parent Loop BB82_35 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB82_39 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB82_44
# %bb.38:                               # %for.body135
                                        #   in Loop: Header=BB82_37 Depth=3
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$0, -16(%rbp)
.LBB82_39:                              # %for.cond137
                                        #   Parent Loop BB82_33 Depth=1
                                        #     Parent Loop BB82_35 Depth=2
                                        #       Parent Loop BB82_37 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB82_42
# %bb.40:                               # %for.body140
                                        #   in Loop: Header=BB82_39 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-56(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-88(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-56(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-56(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-88(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-56(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-88(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.41:                               # %for.inc172
                                        #   in Loop: Header=BB82_39 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB82_39
.LBB82_42:                              # %for.end174
                                        #   in Loop: Header=BB82_37 Depth=3
	movl	-80(%rbp), %eax
	addl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-56(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	subl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-56(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	shll	$1, %eax
	addl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-56(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	movl	-72(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-56(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.43:                               # %for.inc212
                                        #   in Loop: Header=BB82_37 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB82_37
.LBB82_44:                              # %for.end214
                                        #   in Loop: Header=BB82_35 Depth=2
	movl	$0, -16(%rbp)
.LBB82_45:                              # %for.cond215
                                        #   Parent Loop BB82_33 Depth=1
                                        #     Parent Loop BB82_35 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB82_47 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB82_52
# %bb.46:                               # %for.body218
                                        #   in Loop: Header=BB82_45 Depth=3
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	$0, -12(%rbp)
.LBB82_47:                              # %for.cond220
                                        #   Parent Loop BB82_33 Depth=1
                                        #     Parent Loop BB82_35 Depth=2
                                        #       Parent Loop BB82_45 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB82_50
# %bb.48:                               # %for.body223
                                        #   in Loop: Header=BB82_47 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-48(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-48(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-48(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-48(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.49:                               # %for.inc255
                                        #   in Loop: Header=BB82_47 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB82_47
.LBB82_50:                              # %for.end257
                                        #   in Loop: Header=BB82_45 Depth=3
	movl	-80(%rbp), %eax
	addl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-48(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	subl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-48(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	shll	$1, %eax
	addl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-48(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	movl	-72(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-48(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.51:                               # %for.inc296
                                        #   in Loop: Header=BB82_45 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB82_45
.LBB82_52:                              # %for.end298
                                        #   in Loop: Header=BB82_35 Depth=2
	jmp	.LBB82_53
.LBB82_53:                              # %for.inc299
                                        #   in Loop: Header=BB82_35 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB82_35
.LBB82_54:                              # %for.end301
                                        #   in Loop: Header=BB82_33 Depth=1
	jmp	.LBB82_55
.LBB82_55:                              # %for.inc302
                                        #   in Loop: Header=BB82_33 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB82_33
.LBB82_56:                              # %for.end304
	movl	$0, -24(%rbp)
.LBB82_57:                              # %for.cond305
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_59 Depth 2
                                        #       Child Loop BB82_61 Depth 3
                                        #         Child Loop BB82_63 Depth 4
                                        #       Child Loop BB82_69 Depth 3
                                        #         Child Loop BB82_71 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB82_80
# %bb.58:                               # %for.body308
                                        #   in Loop: Header=BB82_57 Depth=1
	movl	$0, -20(%rbp)
.LBB82_59:                              # %for.cond309
                                        #   Parent Loop BB82_57 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB82_61 Depth 3
                                        #         Child Loop BB82_63 Depth 4
                                        #       Child Loop BB82_69 Depth 3
                                        #         Child Loop BB82_71 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB82_78
# %bb.60:                               # %for.body312
                                        #   in Loop: Header=BB82_59 Depth=2
	movl	$0, -12(%rbp)
.LBB82_61:                              # %for.cond313
                                        #   Parent Loop BB82_57 Depth=1
                                        #     Parent Loop BB82_59 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB82_63 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB82_68
# %bb.62:                               # %for.body316
                                        #   in Loop: Header=BB82_61 Depth=3
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$0, -16(%rbp)
.LBB82_63:                              # %for.cond318
                                        #   Parent Loop BB82_57 Depth=1
                                        #     Parent Loop BB82_59 Depth=2
                                        #       Parent Loop BB82_61 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB82_66
# %bb.64:                               # %for.body321
                                        #   in Loop: Header=BB82_63 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	movslq	%eax, %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-56(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movl	-88(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-56(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	movl	%ecx, -80(%rbp,%rdx,4)
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-56(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movl	-88(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-56(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-88(%rbp), %rax
	movl	%ecx, -80(%rbp,%rax,4)
# %bb.65:                               # %for.inc349
                                        #   in Loop: Header=BB82_63 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB82_63
.LBB82_66:                              # %for.end351
                                        #   in Loop: Header=BB82_61 Depth=3
	movl	-80(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	leaq	-560(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-56(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-80(%rbp), %ecx
	subl	-76(%rbp), %ecx
	movl	-20(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-56(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	shll	$1, %ecx
	addl	-72(%rbp), %ecx
	movl	-20(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-56(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movl	-20(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-56(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.67:                               # %for.inc385
                                        #   in Loop: Header=BB82_61 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB82_61
.LBB82_68:                              # %for.end387
                                        #   in Loop: Header=BB82_59 Depth=2
	movl	$0, -16(%rbp)
.LBB82_69:                              # %for.cond388
                                        #   Parent Loop BB82_57 Depth=1
                                        #     Parent Loop BB82_59 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB82_71 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB82_76
# %bb.70:                               # %for.body391
                                        #   in Loop: Header=BB82_69 Depth=3
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	$0, -12(%rbp)
.LBB82_71:                              # %for.cond393
                                        #   Parent Loop BB82_57 Depth=1
                                        #     Parent Loop BB82_59 Depth=2
                                        #       Parent Loop BB82_69 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB82_74
# %bb.72:                               # %for.body396
                                        #   in Loop: Header=BB82_71 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-48(%rbp), %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-48(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-24(%rbp), %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-12(%rbp), %rdx
	movl	%ecx, -80(%rbp,%rdx,4)
	movslq	-48(%rbp), %rcx
	shlq	$5, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-48(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movl	-24(%rbp), %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-52(%rbp), %rax
	movl	%ecx, -80(%rbp,%rax,4)
# %bb.73:                               # %for.inc424
                                        #   in Loop: Header=BB82_71 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB82_71
.LBB82_74:                              # %for.end426
                                        #   in Loop: Header=BB82_69 Depth=3
	movl	-80(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	-48(%rbp), %rdx
	shlq	$5, %rdx
	leaq	-560(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-24(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-80(%rbp), %ecx
	subl	-76(%rbp), %ecx
	movslq	-48(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	shll	$1, %ecx
	addl	-72(%rbp), %ecx
	movslq	-48(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-48(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.75:                               # %for.inc461
                                        #   in Loop: Header=BB82_69 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB82_69
.LBB82_76:                              # %for.end463
                                        #   in Loop: Header=BB82_59 Depth=2
	jmp	.LBB82_77
.LBB82_77:                              # %for.inc464
                                        #   in Loop: Header=BB82_59 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB82_59
.LBB82_78:                              # %for.end466
                                        #   in Loop: Header=BB82_57 Depth=1
	jmp	.LBB82_79
.LBB82_79:                              # %for.inc467
                                        #   in Loop: Header=BB82_57 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB82_57
.LBB82_80:                              # %for.end469
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -176(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -172(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -168(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -164(%rbp)
	movl	-560(%rbp), %eax
	addl	-432(%rbp), %eax
	addl	-544(%rbp), %eax
	addl	-416(%rbp), %eax
	movl	%eax, -256(%rbp)
	movl	-560(%rbp), %eax
	subl	-432(%rbp), %eax
	addl	-544(%rbp), %eax
	subl	-416(%rbp), %eax
	movl	%eax, -252(%rbp)
	movl	-560(%rbp), %eax
	addl	-432(%rbp), %eax
	subl	-544(%rbp), %eax
	subl	-416(%rbp), %eax
	movl	%eax, -248(%rbp)
	movl	-560(%rbp), %eax
	subl	-432(%rbp), %eax
	subl	-544(%rbp), %eax
	addl	-416(%rbp), %eax
	movl	%eax, -244(%rbp)
	movl	$-1, -60(%rbp)
	movl	$0, -92(%rbp)
	movl	$0, -32(%rbp)
.LBB82_81:                              # %for.cond582
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -32(%rbp)
	jge	.LBB82_120
# %bb.82:                               # %for.body585
                                        #   in Loop: Header=BB82_81 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -84(%rbp)
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-220(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-112(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	movl	-112(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	cltd
	idivl	(%rsi)
	movl	%eax, -40(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-40(%rbp), %edi
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -40(%rbp)
	movl	-40(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-224(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-204(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %eax
	movslq	-32(%rbp), %rcx
	subl	-256(%rbp,%rcx,4), %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-224(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-204(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	je	.LBB82_98
# %bb.83:                               # %land.lhs.true
                                        #   in Loop: Header=BB82_81 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB82_98
# %bb.84:                               # %land.lhs.true640
                                        #   in Loop: Header=BB82_81 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB82_98
# %bb.85:                               # %if.then
                                        #   in Loop: Header=BB82_81 Depth=1
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-28(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	subl	%eax, %ebx
	movslq	-32(%rbp), %rax
	subl	-256(%rbp,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movl	-28(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-116(%rbp), %rdx
	leaq	-232(%rbp), %rcx
	callq	levrun_linfo_c2x2
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-200(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-116(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-44(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	subl	%eax, %ebx
	movslq	-32(%rbp), %rax
	subl	-256(%rbp,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp)
	movl	-44(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-116(%rbp), %rdx
	leaq	-232(%rbp), %rcx
	callq	levrun_linfo_c2x2
	vmovsd	-192(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-192(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-116(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp)
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-192(%rbp), %xmm0
	jne	.LBB82_90
	jp	.LBB82_90
# %bb.86:                               # %if.then685
                                        #   in Loop: Header=BB82_81 Depth=1
	movl	-28(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB82_88
# %bb.87:                               # %cond.true690
                                        #   in Loop: Header=BB82_81 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB82_89
.LBB82_88:                              # %cond.false691
                                        #   in Loop: Header=BB82_81 Depth=1
	movl	-44(%rbp), %eax
.LBB82_89:                              # %cond.end692
                                        #   in Loop: Header=BB82_81 Depth=1
	movl	%eax, -36(%rbp)
	jmp	.LBB82_94
.LBB82_90:                              # %if.else
                                        #   in Loop: Header=BB82_81 Depth=1
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-192(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB82_92
# %bb.91:                               # %if.then696
                                        #   in Loop: Header=BB82_81 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB82_93
.LBB82_92:                              # %if.else697
                                        #   in Loop: Header=BB82_81 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB82_93:                              # %if.end
                                        #   in Loop: Header=BB82_81 Depth=1
	jmp	.LBB82_94
.LBB82_94:                              # %if.end698
                                        #   in Loop: Header=BB82_81 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB82_96
# %bb.95:                               # %cond.true701
                                        #   in Loop: Header=BB82_81 Depth=1
	movl	-40(%rbp), %eax
	jmp	.LBB82_97
.LBB82_96:                              # %cond.false702
                                        #   in Loop: Header=BB82_81 Depth=1
	movl	-104(%rbp), %eax
.LBB82_97:                              # %cond.end703
                                        #   in Loop: Header=BB82_81 Depth=1
	movl	%eax, -100(%rbp)
	jmp	.LBB82_108
.LBB82_98:                              # %if.else705
                                        #   in Loop: Header=BB82_81 Depth=1
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jne	.LBB82_100
# %bb.99:                               # %if.then708
                                        #   in Loop: Header=BB82_81 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB82_107
.LBB82_100:                             # %if.else709
                                        #   in Loop: Header=BB82_81 Depth=1
	cmpl	$0, -28(%rbp)
	jne	.LBB82_102
# %bb.101:                              # %cond.true712
                                        #   in Loop: Header=BB82_81 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB82_103
.LBB82_102:                             # %cond.false713
                                        #   in Loop: Header=BB82_81 Depth=1
	movl	-44(%rbp), %eax
.LBB82_103:                             # %cond.end714
                                        #   in Loop: Header=BB82_81 Depth=1
	movl	%eax, -36(%rbp)
	cmpl	$0, -28(%rbp)
	jne	.LBB82_105
# %bb.104:                              # %cond.true718
                                        #   in Loop: Header=BB82_81 Depth=1
	movl	-40(%rbp), %eax
	jmp	.LBB82_106
.LBB82_105:                             # %cond.false719
                                        #   in Loop: Header=BB82_81 Depth=1
	movl	-104(%rbp), %eax
.LBB82_106:                             # %cond.end720
                                        #   in Loop: Header=BB82_81 Depth=1
	movl	%eax, -100(%rbp)
.LBB82_107:                             # %if.end722
                                        #   in Loop: Header=BB82_81 Depth=1
	jmp	.LBB82_108
.LBB82_108:                             # %if.end723
                                        #   in Loop: Header=BB82_81 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB82_113
# %bb.109:                              # %land.lhs.true726
                                        #   in Loop: Header=BB82_81 Depth=1
	movq	img, %rax
	cmpl	$4, 40(%rax)
	jge	.LBB82_113
# %bb.110:                              # %if.then730
                                        #   in Loop: Header=BB82_81 Depth=1
	cmpl	$2063, -36(%rbp)        # imm = 0x80F
	jle	.LBB82_112
# %bb.111:                              # %if.then733
                                        #   in Loop: Header=BB82_81 Depth=1
	movl	$2063, -36(%rbp)        # imm = 0x80F
.LBB82_112:                             # %if.end734
                                        #   in Loop: Header=BB82_81 Depth=1
	jmp	.LBB82_113
.LBB82_113:                             # %if.end735
                                        #   in Loop: Header=BB82_81 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB82_118
# %bb.114:                              # %if.then738
                                        #   in Loop: Header=BB82_81 Depth=1
	movl	-120(%rbp), %ecx
	shll	$2, %ecx
                                        # kill: def $cl killed $ecx
	movl	$983040, %eax           # imm = 0xF0000
	shll	%cl, %eax
	cltq
	movq	-184(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-208(%rbp), %eax
	jle	.LBB82_116
# %bb.115:                              # %cond.true744
                                        #   in Loop: Header=BB82_81 Depth=1
	movl	$1, %eax
	jmp	.LBB82_117
.LBB82_116:                             # %cond.false745
                                        #   in Loop: Header=BB82_81 Depth=1
	movl	-208(%rbp), %eax
.LBB82_117:                             # %cond.end746
                                        #   in Loop: Header=BB82_81 Depth=1
	movl	%eax, -208(%rbp)
	movl	-36(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movq	-280(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-60(%rbp), %eax
	movq	-296(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	movl	$-1, -60(%rbp)
	movl	-36(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	movl	%eax, -84(%rbp)
.LBB82_118:                             # %if.end763
                                        #   in Loop: Header=BB82_81 Depth=1
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %eax
	addl	-84(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-84(%rbp), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-220(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-112(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-84(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-228(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.119:                              # %for.inc786
                                        #   in Loop: Header=BB82_81 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB82_81
.LBB82_120:                             # %for.end788
	movq	-280(%rbp), %rax
	movslq	-92(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13112(%rdx)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13368(%rdx)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13128(%rdx)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 13384(%rcx)
	movl	$0, -212(%rbp)
	movl	$0, -236(%rbp)
	movl	$0, -24(%rbp)
.LBB82_121:                             # %for.cond835
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_123 Depth 2
                                        #       Child Loop BB82_125 Depth 3
	cmpl	$4, -24(%rbp)
	jg	.LBB82_168
# %bb.122:                              # %for.body838
                                        #   in Loop: Header=BB82_121 Depth=1
	movl	$0, -20(%rbp)
.LBB82_123:                             # %for.cond839
                                        #   Parent Loop BB82_121 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB82_125 Depth 3
	cmpl	$4, -20(%rbp)
	jg	.LBB82_166
# %bb.124:                              # %for.body842
                                        #   in Loop: Header=BB82_123 Depth=2
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -240(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-240(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -288(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-240(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -304(%rbp)
	movl	$-1, -60(%rbp)
	movl	$0, -92(%rbp)
	movl	$1, -32(%rbp)
.LBB82_125:                             # %for.cond860
                                        #   Parent Loop BB82_121 Depth=1
                                        #     Parent Loop BB82_123 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -32(%rbp)
	jge	.LBB82_164
# %bb.126:                              # %for.body863
                                        #   in Loop: Header=BB82_125 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB82_129
# %bb.127:                              # %lor.lhs.false
                                        #   in Loop: Header=BB82_125 Depth=3
	cmpl	$0, mb_adaptive
	je	.LBB82_130
# %bb.128:                              # %land.lhs.true865
                                        #   in Loop: Header=BB82_125 Depth=3
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB82_130
.LBB82_129:                             # %if.then867
                                        #   in Loop: Header=BB82_125 Depth=3
	movslq	-32(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-32(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB82_131
.LBB82_130:                             # %if.else876
                                        #   in Loop: Header=BB82_125 Depth=3
	movslq	-32(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-32(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB82_131:                             # %if.end885
                                        #   in Loop: Header=BB82_125 Depth=3
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -84(%rbp)
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-220(%rbp), %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	cltd
	idivl	(%rsi,%rcx,4)
	movl	%eax, -40(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-40(%rbp), %edi
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -40(%rbp)
	movl	-40(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-224(%rbp), %eax
	movl	-204(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	subl	(%rdx,%rcx,4), %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-224(%rbp), %eax
	movl	-204(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	je	.LBB82_147
# %bb.132:                              # %land.lhs.true962
                                        #   in Loop: Header=BB82_125 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB82_147
# %bb.133:                              # %land.lhs.true965
                                        #   in Loop: Header=BB82_125 Depth=3
	cmpl	$0, -44(%rbp)
	je	.LBB82_147
# %bb.134:                              # %if.then968
                                        #   in Loop: Header=BB82_125 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-28(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movl	-28(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-116(%rbp), %rdx
	leaq	-232(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-200(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-116(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-44(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp)
	movl	-44(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-116(%rbp), %rdx
	leaq	-232(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-192(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-192(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-116(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp)
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-192(%rbp), %xmm0
	jne	.LBB82_139
	jp	.LBB82_139
# %bb.135:                              # %if.then1041
                                        #   in Loop: Header=BB82_125 Depth=3
	movl	-28(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB82_137
# %bb.136:                              # %cond.true1046
                                        #   in Loop: Header=BB82_125 Depth=3
	movl	-28(%rbp), %eax
	jmp	.LBB82_138
.LBB82_137:                             # %cond.false1047
                                        #   in Loop: Header=BB82_125 Depth=3
	movl	-44(%rbp), %eax
.LBB82_138:                             # %cond.end1048
                                        #   in Loop: Header=BB82_125 Depth=3
	movl	%eax, -36(%rbp)
	jmp	.LBB82_143
.LBB82_139:                             # %if.else1050
                                        #   in Loop: Header=BB82_125 Depth=3
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-192(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB82_141
# %bb.140:                              # %if.then1053
                                        #   in Loop: Header=BB82_125 Depth=3
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB82_142
.LBB82_141:                             # %if.else1054
                                        #   in Loop: Header=BB82_125 Depth=3
	movl	-44(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB82_142:                             # %if.end1055
                                        #   in Loop: Header=BB82_125 Depth=3
	jmp	.LBB82_143
.LBB82_143:                             # %if.end1056
                                        #   in Loop: Header=BB82_125 Depth=3
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB82_145
# %bb.144:                              # %cond.true1059
                                        #   in Loop: Header=BB82_125 Depth=3
	movl	-40(%rbp), %eax
	jmp	.LBB82_146
.LBB82_145:                             # %cond.false1060
                                        #   in Loop: Header=BB82_125 Depth=3
	movl	-104(%rbp), %eax
.LBB82_146:                             # %cond.end1061
                                        #   in Loop: Header=BB82_125 Depth=3
	movl	%eax, -100(%rbp)
	jmp	.LBB82_157
.LBB82_147:                             # %if.else1063
                                        #   in Loop: Header=BB82_125 Depth=3
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jne	.LBB82_149
# %bb.148:                              # %if.then1066
                                        #   in Loop: Header=BB82_125 Depth=3
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB82_156
.LBB82_149:                             # %if.else1067
                                        #   in Loop: Header=BB82_125 Depth=3
	cmpl	$0, -28(%rbp)
	jne	.LBB82_151
# %bb.150:                              # %cond.true1070
                                        #   in Loop: Header=BB82_125 Depth=3
	movl	-28(%rbp), %eax
	jmp	.LBB82_152
.LBB82_151:                             # %cond.false1071
                                        #   in Loop: Header=BB82_125 Depth=3
	movl	-44(%rbp), %eax
.LBB82_152:                             # %cond.end1072
                                        #   in Loop: Header=BB82_125 Depth=3
	movl	%eax, -36(%rbp)
	cmpl	$0, -28(%rbp)
	jne	.LBB82_154
# %bb.153:                              # %cond.true1076
                                        #   in Loop: Header=BB82_125 Depth=3
	movl	-40(%rbp), %eax
	jmp	.LBB82_155
.LBB82_154:                             # %cond.false1077
                                        #   in Loop: Header=BB82_125 Depth=3
	movl	-104(%rbp), %eax
.LBB82_155:                             # %cond.end1078
                                        #   in Loop: Header=BB82_125 Depth=3
	movl	%eax, -100(%rbp)
.LBB82_156:                             # %if.end1080
                                        #   in Loop: Header=BB82_125 Depth=3
	jmp	.LBB82_157
.LBB82_157:                             # %if.end1081
                                        #   in Loop: Header=BB82_125 Depth=3
	cmpl	$0, -36(%rbp)
	je	.LBB82_162
# %bb.158:                              # %if.then1084
                                        #   in Loop: Header=BB82_125 Depth=3
	movl	-120(%rbp), %ecx
	shll	$2, %ecx
	addl	$16, %ecx
	movl	-24(%rbp), %eax
	sarl	$1, %eax
	movl	-20(%rbp), %edx
	sarl	$2, %edx
	addl	%edx, %eax
	addl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-184(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	cmpl	$1, -36(%rbp)
	jle	.LBB82_160
# %bb.159:                              # %if.then1097
                                        #   in Loop: Header=BB82_125 Depth=3
	movl	-212(%rbp), %eax
	addl	$999999, %eax           # imm = 0xF423F
	movl	%eax, -212(%rbp)
	jmp	.LBB82_161
.LBB82_160:                             # %if.else1099
                                        #   in Loop: Header=BB82_125 Depth=3
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-60(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	-212(%rbp), %eax
	movl	%eax, -212(%rbp)
.LBB82_161:                             # %if.end1106
                                        #   in Loop: Header=BB82_125 Depth=3
	movl	$2, -236(%rbp)
	movl	-36(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movq	-288(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-60(%rbp), %eax
	movq	-304(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	movl	$-1, -60(%rbp)
	movl	-36(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	movl	%eax, -84(%rbp)
.LBB82_162:                             # %if.end1128
                                        #   in Loop: Header=BB82_125 Depth=3
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	addl	-84(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-84(%rbp), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-220(%rbp), %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-84(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-228(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.163:                              # %for.inc1162
                                        #   in Loop: Header=BB82_125 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB82_125
.LBB82_164:                             # %for.end1164
                                        #   in Loop: Header=BB82_123 Depth=2
	movq	-288(%rbp), %rax
	movslq	-92(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.165:                              # %for.inc1167
                                        #   in Loop: Header=BB82_123 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB82_123
.LBB82_166:                             # %for.end1169
                                        #   in Loop: Header=BB82_121 Depth=1
	jmp	.LBB82_167
.LBB82_167:                             # %for.inc1170
                                        #   in Loop: Header=BB82_121 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB82_121
.LBB82_168:                             # %for.end1172
	cmpl	$2, -236(%rbp)
	jne	.LBB82_170
# %bb.169:                              # %if.then1175
	movl	$2, -208(%rbp)
.LBB82_170:                             # %if.end1176
	movl	$0, -24(%rbp)
.LBB82_171:                             # %for.cond1177
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_173 Depth 2
                                        #       Child Loop BB82_175 Depth 3
                                        #         Child Loop BB82_177 Depth 4
                                        #         Child Loop BB82_181 Depth 4
                                        #       Child Loop BB82_187 Depth 3
                                        #         Child Loop BB82_189 Depth 4
                                        #         Child Loop BB82_193 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB82_220
# %bb.172:                              # %for.body1180
                                        #   in Loop: Header=BB82_171 Depth=1
	movl	$0, -20(%rbp)
.LBB82_173:                             # %for.cond1181
                                        #   Parent Loop BB82_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB82_175 Depth 3
                                        #         Child Loop BB82_177 Depth 4
                                        #         Child Loop BB82_181 Depth 4
                                        #       Child Loop BB82_187 Depth 3
                                        #         Child Loop BB82_189 Depth 4
                                        #         Child Loop BB82_193 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB82_218
# %bb.174:                              # %for.body1184
                                        #   in Loop: Header=BB82_173 Depth=2
	movl	$0, -12(%rbp)
.LBB82_175:                             # %for.cond1185
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_173 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB82_177 Depth 4
                                        #         Child Loop BB82_181 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB82_186
# %bb.176:                              # %for.body1188
                                        #   in Loop: Header=BB82_175 Depth=3
	movl	$0, -16(%rbp)
.LBB82_177:                             # %for.cond1189
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_173 Depth=2
                                        #       Parent Loop BB82_175 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB82_180
# %bb.178:                              # %for.body1192
                                        #   in Loop: Header=BB82_177 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.179:                              # %for.inc1202
                                        #   in Loop: Header=BB82_177 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB82_177
.LBB82_180:                             # %for.end1204
                                        #   in Loop: Header=BB82_175 Depth=3
	movl	-80(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-80(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-76(%rbp), %eax
	sarl	$1, %eax
	subl	-68(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-76(%rbp), %eax
	movl	-68(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -132(%rbp)
	movl	$0, -16(%rbp)
.LBB82_181:                             # %for.cond1223
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_173 Depth=2
                                        #       Parent Loop BB82_175 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB82_184
# %bb.182:                              # %for.body1226
                                        #   in Loop: Header=BB82_181 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -88(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-88(%rbp), %rcx
	addl	-144(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-88(%rbp), %rcx
	subl	-144(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	-88(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.183:                              # %for.inc1252
                                        #   in Loop: Header=BB82_181 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB82_181
.LBB82_184:                             # %for.end1254
                                        #   in Loop: Header=BB82_175 Depth=3
	jmp	.LBB82_185
.LBB82_185:                             # %for.inc1255
                                        #   in Loop: Header=BB82_175 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB82_175
.LBB82_186:                             # %for.end1257
                                        #   in Loop: Header=BB82_173 Depth=2
	movl	$0, -16(%rbp)
.LBB82_187:                             # %for.cond1258
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_173 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB82_189 Depth 4
                                        #         Child Loop BB82_193 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB82_216
# %bb.188:                              # %for.body1261
                                        #   in Loop: Header=BB82_187 Depth=3
	movl	$0, -12(%rbp)
.LBB82_189:                             # %for.cond1262
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_173 Depth=2
                                        #       Parent Loop BB82_187 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB82_192
# %bb.190:                              # %for.body1265
                                        #   in Loop: Header=BB82_189 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.191:                              # %for.inc1275
                                        #   in Loop: Header=BB82_189 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB82_189
.LBB82_192:                             # %for.end1277
                                        #   in Loop: Header=BB82_187 Depth=3
	movl	-80(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-80(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-76(%rbp), %eax
	sarl	$1, %eax
	subl	-68(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-76(%rbp), %eax
	movl	-68(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -132(%rbp)
	movl	$0, -12(%rbp)
.LBB82_193:                             # %for.cond1296
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_173 Depth=2
                                        #       Parent Loop BB82_187 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB82_214
# %bb.194:                              # %for.body1299
                                        #   in Loop: Header=BB82_193 Depth=4
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movl	72688(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-144(%rbp,%rdx,4), %edx
	movslq	-52(%rbp), %rsi
	addl	-144(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB82_196
# %bb.195:                              # %cond.true1310
                                        #   in Loop: Header=BB82_193 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB82_197
.LBB82_196:                             # %cond.false1311
                                        #   in Loop: Header=BB82_193 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	addl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB82_197:                             # %cond.end1319
                                        #   in Loop: Header=BB82_193 Depth=4
	cmpl	%ecx, %eax
	jge	.LBB82_199
# %bb.198:                              # %cond.true1323
                                        #   in Loop: Header=BB82_193 Depth=4
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB82_203
.LBB82_199:                             # %cond.false1325
                                        #   in Loop: Header=BB82_193 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	addl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB82_201
# %bb.200:                              # %cond.true1335
                                        #   in Loop: Header=BB82_193 Depth=4
	xorl	%eax, %eax
	jmp	.LBB82_202
.LBB82_201:                             # %cond.false1336
                                        #   in Loop: Header=BB82_193 Depth=4
	movslq	-12(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	addl	-144(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB82_202:                             # %cond.end1344
                                        #   in Loop: Header=BB82_193 Depth=4
.LBB82_203:                             # %cond.end1346
                                        #   in Loop: Header=BB82_193 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movl	-20(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72688(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-144(%rbp,%rdx,4), %edx
	movslq	-52(%rbp), %rsi
	subl	-144(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB82_205
# %bb.204:                              # %cond.true1365
                                        #   in Loop: Header=BB82_193 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB82_206
.LBB82_205:                             # %cond.false1366
                                        #   in Loop: Header=BB82_193 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	subl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB82_206:                             # %cond.end1374
                                        #   in Loop: Header=BB82_193 Depth=4
	cmpl	%ecx, %eax
	jge	.LBB82_208
# %bb.207:                              # %cond.true1378
                                        #   in Loop: Header=BB82_193 Depth=4
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB82_212
.LBB82_208:                             # %cond.false1380
                                        #   in Loop: Header=BB82_193 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	subl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB82_210
# %bb.209:                              # %cond.true1390
                                        #   in Loop: Header=BB82_193 Depth=4
	xorl	%eax, %eax
	jmp	.LBB82_211
.LBB82_210:                             # %cond.false1391
                                        #   in Loop: Header=BB82_193 Depth=4
	movslq	-12(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	subl	-144(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB82_211:                             # %cond.end1399
                                        #   in Loop: Header=BB82_193 Depth=4
.LBB82_212:                             # %cond.end1401
                                        #   in Loop: Header=BB82_193 Depth=4
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.213:                              # %for.inc1410
                                        #   in Loop: Header=BB82_193 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB82_193
.LBB82_214:                             # %for.end1412
                                        #   in Loop: Header=BB82_187 Depth=3
	jmp	.LBB82_215
.LBB82_215:                             # %for.inc1413
                                        #   in Loop: Header=BB82_187 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB82_187
.LBB82_216:                             # %for.end1415
                                        #   in Loop: Header=BB82_173 Depth=2
	jmp	.LBB82_217
.LBB82_217:                             # %for.inc1416
                                        #   in Loop: Header=BB82_173 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB82_173
.LBB82_218:                             # %for.end1418
                                        #   in Loop: Header=BB82_171 Depth=1
	jmp	.LBB82_219
.LBB82_219:                             # %for.inc1419
                                        #   in Loop: Header=BB82_171 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB82_171
.LBB82_220:                             # %for.end1421
	movl	$0, -12(%rbp)
.LBB82_221:                             # %for.cond1422
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_223 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB82_228
# %bb.222:                              # %for.body1425
                                        #   in Loop: Header=BB82_221 Depth=1
	movl	$0, -16(%rbp)
.LBB82_223:                             # %for.cond1426
                                        #   Parent Loop BB82_221 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB82_226
# %bb.224:                              # %for.body1429
                                        #   in Loop: Header=BB82_223 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-120(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.225:                              # %for.inc1444
                                        #   in Loop: Header=BB82_223 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB82_223
.LBB82_226:                             # %for.end1446
                                        #   in Loop: Header=BB82_221 Depth=1
	jmp	.LBB82_227
.LBB82_227:                             # %for.inc1447
                                        #   in Loop: Header=BB82_221 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB82_221
.LBB82_228:                             # %for.end1449
	movl	-208(%rbp), %ebx
	cmpl	$125180179, -268(%rbp)  # imm = 0x7761913
	jne	.LBB82_230
.LBB82_229:
	movl	%ebx, %eax
	addq	$552, %rsp              # imm = 0x228
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB82_230:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB82_229
.Lfunc_end82:
	.size	dct_chroma_sp.73, .Lfunc_end82-dct_chroma_sp.73
	.cfi_endproc
                                        # -- End function
	.globl	dct_luma_16x16.74       # -- Begin function dct_luma_16x16.74
	.p2align	4, 0x90
	.type	dct_luma_16x16.74,@function
dct_luma_16x16.74:                      # @dct_luma_16x16.74
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$2280, %rsp             # imm = 0x8E8
	.cfi_offset %rbx, -24
	xorl	%eax, %eax
	movl	$1391649138, -132(%rbp) # imm = 0x52F2E172
	movl	%edi, -104(%rbp)
	movl	$0, -120(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -128(%rbp)
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -144(%rbp)
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -240(%rbp)
	movq	-128(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	img, %rdx
	addl	72668(%rdx), %ecx
	cmpl	$0, %ecx
	jne	.LBB83_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%al
.LBB83_2:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -64(%rbp)
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -100(%rbp)
	movl	-64(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -112(%rbp)
	movl	$0, -12(%rbp)
.LBB83_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_5 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB83_13
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB83_3 Depth=1
	movl	$0, -16(%rbp)
.LBB83_5:                               # %for.cond16
                                        #   Parent Loop BB83_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB83_11
# %bb.6:                                # %for.body18
                                        #   in Loop: Header=BB83_5 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB83_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB83_5 Depth=2
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB83_9
.LBB83_8:                               # %if.else
                                        #   in Loop: Header=BB83_5 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB83_9:                               # %if.end
                                        #   in Loop: Header=BB83_5 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rdi
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	shlq	$6, %rax
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movl	%ecx, (%rdi,%rax,4)
# %bb.10:                               # %for.inc
                                        #   in Loop: Header=BB83_5 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB83_5
.LBB83_11:                              # %for.end
                                        #   in Loop: Header=BB83_3 Depth=1
	jmp	.LBB83_12
.LBB83_12:                              # %for.inc61
                                        #   in Loop: Header=BB83_3 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB83_3
.LBB83_13:                              # %for.end63
	movl	$0, -24(%rbp)
.LBB83_14:                              # %for.cond64
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_18 Depth 2
                                        #       Child Loop BB83_20 Depth 3
                                        #         Child Loop BB83_22 Depth 4
                                        #       Child Loop BB83_28 Depth 3
                                        #         Child Loop BB83_30 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -24(%rbp)
	jge	.LBB83_16
# %bb.15:                               # %land.rhs67
                                        #   in Loop: Header=BB83_14 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB83_16:                              # %land.end69
                                        #   in Loop: Header=BB83_14 Depth=1
	testb	$1, %al
	jne	.LBB83_17
	jmp	.LBB83_39
.LBB83_17:                              # %for.body71
                                        #   in Loop: Header=BB83_14 Depth=1
	movl	$0, -20(%rbp)
.LBB83_18:                              # %for.cond72
                                        #   Parent Loop BB83_14 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB83_20 Depth 3
                                        #         Child Loop BB83_22 Depth 4
                                        #       Child Loop BB83_28 Depth 3
                                        #         Child Loop BB83_30 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB83_37
# %bb.19:                               # %for.body75
                                        #   in Loop: Header=BB83_18 Depth=2
	movl	$0, -12(%rbp)
.LBB83_20:                              # %for.cond76
                                        #   Parent Loop BB83_14 Depth=1
                                        #     Parent Loop BB83_18 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB83_22 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB83_27
# %bb.21:                               # %for.body79
                                        #   in Loop: Header=BB83_20 Depth=3
	movl	$0, -16(%rbp)
.LBB83_22:                              # %for.cond80
                                        #   Parent Loop BB83_14 Depth=1
                                        #     Parent Loop BB83_18 Depth=2
                                        #       Parent Loop BB83_20 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB83_25
# %bb.23:                               # %for.body83
                                        #   in Loop: Header=BB83_22 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	movl	%ecx, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-56(%rbp), %rax
	movl	%ecx, -48(%rbp,%rax,4)
# %bb.24:                               # %for.inc123
                                        #   in Loop: Header=BB83_22 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB83_22
.LBB83_25:                              # %for.end125
                                        #   in Loop: Header=BB83_20 Depth=3
	leaq	-1264(%rbp), %rax
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movq	%rax, %rdx
	addq	$256, %rdx              # imm = 0x100
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	addq	$768, %rax              # imm = 0x300
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.26:                               # %for.inc167
                                        #   in Loop: Header=BB83_20 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB83_20
.LBB83_27:                              # %for.end169
                                        #   in Loop: Header=BB83_18 Depth=2
	movl	$0, -16(%rbp)
.LBB83_28:                              # %for.cond170
                                        #   Parent Loop BB83_14 Depth=1
                                        #     Parent Loop BB83_18 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB83_30 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB83_35
# %bb.29:                               # %for.body173
                                        #   in Loop: Header=BB83_28 Depth=3
	movl	$0, -12(%rbp)
.LBB83_30:                              # %for.cond174
                                        #   Parent Loop BB83_14 Depth=1
                                        #     Parent Loop BB83_18 Depth=2
                                        #       Parent Loop BB83_28 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB83_33
# %bb.31:                               # %for.body177
                                        #   in Loop: Header=BB83_30 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-12(%rbp), %rdx
	movl	%ecx, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-52(%rbp), %rax
	movl	%ecx, -48(%rbp,%rax,4)
# %bb.32:                               # %for.inc217
                                        #   in Loop: Header=BB83_30 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB83_30
.LBB83_33:                              # %for.end219
                                        #   in Loop: Header=BB83_28 Depth=3
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, 32(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, 16(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, 48(%rax,%rdx,4)
# %bb.34:                               # %for.inc262
                                        #   in Loop: Header=BB83_28 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB83_28
.LBB83_35:                              # %for.end264
                                        #   in Loop: Header=BB83_18 Depth=2
	jmp	.LBB83_36
.LBB83_36:                              # %for.inc265
                                        #   in Loop: Header=BB83_18 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB83_18
.LBB83_37:                              # %for.end267
                                        #   in Loop: Header=BB83_14 Depth=1
	jmp	.LBB83_38
.LBB83_38:                              # %for.inc268
                                        #   in Loop: Header=BB83_14 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB83_14
.LBB83_39:                              # %for.end270
	movl	$0, -12(%rbp)
.LBB83_40:                              # %for.cond271
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_42 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB83_47
# %bb.41:                               # %for.body274
                                        #   in Loop: Header=BB83_40 Depth=1
	movl	$0, -16(%rbp)
.LBB83_42:                              # %for.cond275
                                        #   Parent Loop BB83_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB83_45
# %bb.43:                               # %for.body278
                                        #   in Loop: Header=BB83_42 Depth=2
	leaq	-1264(%rbp), %rax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.44:                               # %for.inc289
                                        #   in Loop: Header=BB83_42 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB83_42
.LBB83_45:                              # %for.end291
                                        #   in Loop: Header=BB83_40 Depth=1
	jmp	.LBB83_46
.LBB83_46:                              # %for.inc292
                                        #   in Loop: Header=BB83_40 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB83_40
.LBB83_47:                              # %for.end294
	movl	$0, -12(%rbp)
.LBB83_48:                              # %for.cond295
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_52 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB83_50
# %bb.49:                               # %land.rhs298
                                        #   in Loop: Header=BB83_48 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB83_50:                              # %land.end301
                                        #   in Loop: Header=BB83_48 Depth=1
	testb	$1, %al
	jne	.LBB83_51
	jmp	.LBB83_57
.LBB83_51:                              # %for.body303
                                        #   in Loop: Header=BB83_48 Depth=1
	movl	$0, -16(%rbp)
.LBB83_52:                              # %for.cond304
                                        #   Parent Loop BB83_48 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB83_55
# %bb.53:                               # %for.body307
                                        #   in Loop: Header=BB83_52 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-56(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-56(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-56(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.54:                               # %for.inc331
                                        #   in Loop: Header=BB83_52 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB83_52
.LBB83_55:                              # %for.end333
                                        #   in Loop: Header=BB83_48 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -224(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -192(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	addl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -208(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.56:                               # %for.inc358
                                        #   in Loop: Header=BB83_48 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB83_48
.LBB83_57:                              # %for.end360
	movl	$0, -16(%rbp)
.LBB83_58:                              # %for.cond361
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_62 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB83_60
# %bb.59:                               # %land.rhs364
                                        #   in Loop: Header=BB83_58 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB83_60:                              # %land.end367
                                        #   in Loop: Header=BB83_58 Depth=1
	testb	$1, %al
	jne	.LBB83_61
	jmp	.LBB83_67
.LBB83_61:                              # %for.body369
                                        #   in Loop: Header=BB83_58 Depth=1
	movl	$0, -12(%rbp)
.LBB83_62:                              # %for.cond370
                                        #   Parent Loop BB83_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB83_65
# %bb.63:                               # %for.body373
                                        #   in Loop: Header=BB83_62 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.64:                               # %for.inc397
                                        #   in Loop: Header=BB83_62 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB83_62
.LBB83_65:                              # %for.end399
                                        #   in Loop: Header=BB83_58 Depth=1
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-224(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-36(%rbp), %ecx
	addl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.66:                               # %for.inc427
                                        #   in Loop: Header=BB83_58 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB83_58
.LBB83_67:                              # %for.end429
	movl	$-1, -80(%rbp)
	movl	$0, -76(%rbp)
	movl	$0, -60(%rbp)
.LBB83_68:                              # %for.cond430
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -60(%rbp)
	jge	.LBB83_88
# %bb.69:                               # %for.body433
                                        #   in Loop: Header=BB83_68 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB83_72
# %bb.70:                               # %lor.lhs.false
                                        #   in Loop: Header=BB83_68 Depth=1
	cmpl	$0, mb_adaptive
	je	.LBB83_73
# %bb.71:                               # %land.lhs.true
                                        #   in Loop: Header=BB83_68 Depth=1
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB83_73
.LBB83_72:                              # %if.then437
                                        #   in Loop: Header=BB83_68 Depth=1
	movslq	-60(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-60(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB83_74
.LBB83_73:                              # %if.else446
                                        #   in Loop: Header=BB83_68 Depth=1
	movslq	-60(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-60(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB83_74:                              # %if.end455
                                        #   in Loop: Header=BB83_68 Depth=1
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB83_76
# %bb.75:                               # %if.then458
                                        #   in Loop: Header=BB83_68 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -68(%rbp)
	jmp	.LBB83_77
.LBB83_76:                              # %if.else463
                                        #   in Loop: Header=BB83_68 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-64(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-112(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -68(%rbp)
.LBB83_77:                              # %if.end481
                                        #   in Loop: Header=BB83_68 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB83_82
# %bb.78:                               # %land.lhs.true484
                                        #   in Loop: Header=BB83_68 Depth=1
	movq	img, %rax
	cmpl	$10, 40(%rax)
	jge	.LBB83_82
# %bb.79:                               # %if.then488
                                        #   in Loop: Header=BB83_68 Depth=1
	cmpl	$2063, -68(%rbp)        # imm = 0x80F
	jle	.LBB83_81
# %bb.80:                               # %if.then491
                                        #   in Loop: Header=BB83_68 Depth=1
	movl	$2063, -68(%rbp)        # imm = 0x80F
.LBB83_81:                              # %if.end492
                                        #   in Loop: Header=BB83_68 Depth=1
	jmp	.LBB83_82
.LBB83_82:                              # %if.end493
                                        #   in Loop: Header=BB83_68 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB83_84
# %bb.83:                               # %if.then496
                                        #   in Loop: Header=BB83_68 Depth=1
	movl	-68(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-144(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	movq	-240(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	movl	$-1, -80(%rbp)
.LBB83_84:                              # %if.end507
                                        #   in Loop: Header=BB83_68 Depth=1
	cmpl	$0, -72(%rbp)
	jne	.LBB83_86
# %bb.85:                               # %if.then509
                                        #   in Loop: Header=BB83_68 Depth=1
	movl	-68(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB83_86:                              # %if.end519
                                        #   in Loop: Header=BB83_68 Depth=1
	jmp	.LBB83_87
.LBB83_87:                              # %for.inc520
                                        #   in Loop: Header=BB83_68 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB83_68
.LBB83_88:                              # %for.end522
	movq	-144(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB83_89:                              # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_93 Depth 2
                                        #     Child Loop BB83_97 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB83_91
# %bb.90:                               # %land.rhs528
                                        #   in Loop: Header=BB83_89 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB83_91:                              # %land.end531
                                        #   in Loop: Header=BB83_89 Depth=1
	testb	$1, %al
	jne	.LBB83_92
	jmp	.LBB83_102
.LBB83_92:                              # %for.body533
                                        #   in Loop: Header=BB83_89 Depth=1
	movl	$0, -16(%rbp)
.LBB83_93:                              # %for.cond534
                                        #   Parent Loop BB83_89 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB83_96
# %bb.94:                               # %for.body537
                                        #   in Loop: Header=BB83_93 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.95:                               # %for.inc544
                                        #   in Loop: Header=BB83_93 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB83_93
.LBB83_96:                              # %for.end546
                                        #   in Loop: Header=BB83_89 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB83_97:                              # %for.cond563
                                        #   Parent Loop BB83_89 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB83_100
# %bb.98:                               # %for.body566
                                        #   in Loop: Header=BB83_97 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-56(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-56(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movslq	-56(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.99:                               # %for.inc586
                                        #   in Loop: Header=BB83_97 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB83_97
.LBB83_100:                             # %for.end588
                                        #   in Loop: Header=BB83_89 Depth=1
	jmp	.LBB83_101
.LBB83_101:                             # %for.inc589
                                        #   in Loop: Header=BB83_89 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB83_89
.LBB83_102:                             # %for.end591
	movl	$0, -16(%rbp)
.LBB83_103:                             # %for.cond592
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_107 Depth 2
                                        #     Child Loop BB83_111 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB83_105
# %bb.104:                              # %land.rhs595
                                        #   in Loop: Header=BB83_103 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB83_105:                             # %land.end598
                                        #   in Loop: Header=BB83_103 Depth=1
	testb	$1, %al
	jne	.LBB83_106
	jmp	.LBB83_119
.LBB83_106:                             # %for.body600
                                        #   in Loop: Header=BB83_103 Depth=1
	movl	$0, -12(%rbp)
.LBB83_107:                             # %for.cond601
                                        #   Parent Loop BB83_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB83_110
# %bb.108:                              # %for.body604
                                        #   in Loop: Header=BB83_107 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.109:                              # %for.inc611
                                        #   in Loop: Header=BB83_107 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB83_107
.LBB83_110:                             # %for.end613
                                        #   in Loop: Header=BB83_103 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB83_111:                             # %for.cond630
                                        #   Parent Loop BB83_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB83_117
# %bb.112:                              # %for.body633
                                        #   in Loop: Header=BB83_111 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	cmpl	$6, -64(%rbp)
	jge	.LBB83_114
# %bb.113:                              # %if.then637
                                        #   in Loop: Header=BB83_111 Depth=2
	leaq	-1264(%rbp), %r8
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %esi
	movslq	-52(%rbp), %rax
	addl	-96(%rbp,%rax,4), %esi
	movslq	-100(%rbp), %rax
	shlq	$6, %rax
	movabsq	$InvLevelScale4x4Luma_Intra, %rdi
	movq	%rdi, %rcx
	addq	%rax, %rcx
	imull	(%rcx), %esi
	movl	$5, %eax
	movl	$5, %ecx
	subl	-64(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r9d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %esi
	movl	$6, %edx
	movl	$6, %ecx
	subl	-64(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %esi
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movq	%r8, %rbx
	addq	%rcx, %rbx
	movslq	-12(%rbp), %rcx
	movl	%esi, (%rbx,%rcx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %esi
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %esi
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdi
	imull	(%rdi), %esi
	subl	-64(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r9d
	addl	%r9d, %esi
	subl	-64(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %esi
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r8
	movslq	-52(%rbp), %rax
	movl	%esi, (%r8,%rax,4)
	jmp	.LBB83_115
.LBB83_114:                             # %if.else680
                                        #   in Loop: Header=BB83_111 Depth=2
	leaq	-1264(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-52(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %edx
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rsi
	movq	%rsi, %rdi
	addq	%rcx, %rdi
	imull	(%rdi), %edx
	movl	-64(%rbp), %ecx
	subl	$6, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdi
	addq	%rcx, %rdi
	movslq	-12(%rbp), %rcx
	movl	%edx, (%rdi,%rcx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-64(%rbp), %ecx
	subl	$6, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-52(%rbp), %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB83_115:                             # %if.end717
                                        #   in Loop: Header=BB83_111 Depth=2
	jmp	.LBB83_116
.LBB83_116:                             # %for.inc718
                                        #   in Loop: Header=BB83_111 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB83_111
.LBB83_117:                             # %for.end720
                                        #   in Loop: Header=BB83_103 Depth=1
	jmp	.LBB83_118
.LBB83_118:                             # %for.inc721
                                        #   in Loop: Header=BB83_103 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB83_103
.LBB83_119:                             # %for.end723
	movl	$0, -24(%rbp)
.LBB83_120:                             # %for.cond724
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_122 Depth 2
                                        #       Child Loop BB83_124 Depth 3
                                        #       Child Loop BB83_143 Depth 3
                                        #         Child Loop BB83_147 Depth 4
                                        #         Child Loop BB83_151 Depth 4
                                        #       Child Loop BB83_157 Depth 3
                                        #         Child Loop BB83_161 Depth 4
                                        #         Child Loop BB83_165 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB83_174
# %bb.121:                              # %for.body727
                                        #   in Loop: Header=BB83_120 Depth=1
	movl	$0, -20(%rbp)
.LBB83_122:                             # %for.cond728
                                        #   Parent Loop BB83_120 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB83_124 Depth 3
                                        #       Child Loop BB83_143 Depth 3
                                        #         Child Loop BB83_147 Depth 4
                                        #         Child Loop BB83_151 Depth 4
                                        #       Child Loop BB83_157 Depth 3
                                        #         Child Loop BB83_161 Depth 4
                                        #         Child Loop BB83_165 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB83_172
# %bb.123:                              # %for.body731
                                        #   in Loop: Header=BB83_122 Depth=2
	movl	$-1, -80(%rbp)
	movl	$0, -76(%rbp)
	movl	-24(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -116(%rbp)
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -108(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-108(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -152(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-108(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -232(%rbp)
	movl	$1, -60(%rbp)
.LBB83_124:                             # %for.cond751
                                        #   Parent Loop BB83_120 Depth=1
                                        #     Parent Loop BB83_122 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -60(%rbp)
	jge	.LBB83_142
# %bb.125:                              # %for.body754
                                        #   in Loop: Header=BB83_124 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB83_128
# %bb.126:                              # %lor.lhs.false757
                                        #   in Loop: Header=BB83_124 Depth=3
	cmpl	$0, mb_adaptive
	je	.LBB83_129
# %bb.127:                              # %land.lhs.true759
                                        #   in Loop: Header=BB83_124 Depth=3
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB83_129
.LBB83_128:                             # %if.then762
                                        #   in Loop: Header=BB83_124 Depth=3
	movslq	-60(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-60(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB83_130
.LBB83_129:                             # %if.else771
                                        #   in Loop: Header=BB83_124 Depth=3
	movslq	-60(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-60(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB83_130:                             # %if.end780
                                        #   in Loop: Header=BB83_124 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB83_132
# %bb.131:                              # %if.then783
                                        #   in Loop: Header=BB83_124 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -68(%rbp)
	jmp	.LBB83_133
.LBB83_132:                             # %if.else793
                                        #   in Loop: Header=BB83_124 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-64(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -68(%rbp)
.LBB83_133:                             # %if.end818
                                        #   in Loop: Header=BB83_124 Depth=3
	cmpl	$0, -68(%rbp)
	je	.LBB83_135
# %bb.134:                              # %if.then821
                                        #   in Loop: Header=BB83_124 Depth=3
	movl	$15, -120(%rbp)
	movl	-68(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-152(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	movq	-232(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	movl	$-1, -80(%rbp)
.LBB83_135:                             # %if.end836
                                        #   in Loop: Header=BB83_124 Depth=3
	cmpl	$0, -72(%rbp)
	jne	.LBB83_140
# %bb.136:                              # %if.then838
                                        #   in Loop: Header=BB83_124 Depth=3
	movl	-68(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movl	%eax, -68(%rbp)
	cmpl	$4, -64(%rbp)
	jge	.LBB83_138
# %bb.137:                              # %if.then850
                                        #   in Loop: Header=BB83_124 Depth=3
	movl	-68(%rbp), %eax
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-64(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-64(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB83_139
.LBB83_138:                             # %if.else871
                                        #   in Loop: Header=BB83_124 Depth=3
	movl	-68(%rbp), %eax
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-64(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB83_139:                             # %if.end889
                                        #   in Loop: Header=BB83_124 Depth=3
	jmp	.LBB83_140
.LBB83_140:                             # %if.end890
                                        #   in Loop: Header=BB83_124 Depth=3
	jmp	.LBB83_141
.LBB83_141:                             # %for.inc891
                                        #   in Loop: Header=BB83_124 Depth=3
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB83_124
.LBB83_142:                             # %for.end893
                                        #   in Loop: Header=BB83_122 Depth=2
	movq	-152(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB83_143:                             # %for.cond896
                                        #   Parent Loop BB83_120 Depth=1
                                        #     Parent Loop BB83_122 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB83_147 Depth 4
                                        #         Child Loop BB83_151 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB83_145
# %bb.144:                              # %land.rhs899
                                        #   in Loop: Header=BB83_143 Depth=3
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB83_145:                             # %land.end902
                                        #   in Loop: Header=BB83_143 Depth=3
	testb	$1, %al
	jne	.LBB83_146
	jmp	.LBB83_156
.LBB83_146:                             # %for.body904
                                        #   in Loop: Header=BB83_143 Depth=3
	movl	$0, -16(%rbp)
.LBB83_147:                             # %for.cond905
                                        #   Parent Loop BB83_120 Depth=1
                                        #     Parent Loop BB83_122 Depth=2
                                        #       Parent Loop BB83_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB83_150
# %bb.148:                              # %for.body908
                                        #   in Loop: Header=BB83_147 Depth=4
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.149:                              # %for.inc919
                                        #   in Loop: Header=BB83_147 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB83_147
.LBB83_150:                             # %for.end921
                                        #   in Loop: Header=BB83_143 Depth=3
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB83_151:                             # %for.cond940
                                        #   Parent Loop BB83_120 Depth=1
                                        #     Parent Loop BB83_122 Depth=2
                                        #       Parent Loop BB83_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB83_154
# %bb.152:                              # %for.body943
                                        #   in Loop: Header=BB83_151 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ecx
	movslq	-56(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movslq	-16(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.153:                              # %for.inc971
                                        #   in Loop: Header=BB83_151 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB83_151
.LBB83_154:                             # %for.end973
                                        #   in Loop: Header=BB83_143 Depth=3
	jmp	.LBB83_155
.LBB83_155:                             # %for.inc974
                                        #   in Loop: Header=BB83_143 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB83_143
.LBB83_156:                             # %for.end976
                                        #   in Loop: Header=BB83_122 Depth=2
	movl	$0, -16(%rbp)
.LBB83_157:                             # %for.cond977
                                        #   Parent Loop BB83_120 Depth=1
                                        #     Parent Loop BB83_122 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB83_161 Depth 4
                                        #         Child Loop BB83_165 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB83_159
# %bb.158:                              # %land.rhs980
                                        #   in Loop: Header=BB83_157 Depth=3
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB83_159:                             # %land.end983
                                        #   in Loop: Header=BB83_157 Depth=3
	testb	$1, %al
	jne	.LBB83_160
	jmp	.LBB83_170
.LBB83_160:                             # %for.body985
                                        #   in Loop: Header=BB83_157 Depth=3
	movl	$0, -12(%rbp)
.LBB83_161:                             # %for.cond986
                                        #   Parent Loop BB83_120 Depth=1
                                        #     Parent Loop BB83_122 Depth=2
                                        #       Parent Loop BB83_157 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB83_164
# %bb.162:                              # %for.body989
                                        #   in Loop: Header=BB83_161 Depth=4
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.163:                              # %for.inc1000
                                        #   in Loop: Header=BB83_161 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB83_161
.LBB83_164:                             # %for.end1002
                                        #   in Loop: Header=BB83_157 Depth=3
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB83_165:                             # %for.cond1021
                                        #   Parent Loop BB83_120 Depth=1
                                        #     Parent Loop BB83_122 Depth=2
                                        #       Parent Loop BB83_157 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB83_168
# %bb.166:                              # %for.body1024
                                        #   in Loop: Header=BB83_165 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ecx
	movslq	-52(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.167:                              # %for.inc1052
                                        #   in Loop: Header=BB83_165 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB83_165
.LBB83_168:                             # %for.end1054
                                        #   in Loop: Header=BB83_157 Depth=3
	jmp	.LBB83_169
.LBB83_169:                             # %for.inc1055
                                        #   in Loop: Header=BB83_157 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB83_157
.LBB83_170:                             # %for.end1057
                                        #   in Loop: Header=BB83_122 Depth=2
	jmp	.LBB83_171
.LBB83_171:                             # %for.inc1058
                                        #   in Loop: Header=BB83_122 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB83_122
.LBB83_172:                             # %for.end1060
                                        #   in Loop: Header=BB83_120 Depth=1
	jmp	.LBB83_173
.LBB83_173:                             # %for.inc1061
                                        #   in Loop: Header=BB83_120 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB83_120
.LBB83_174:                             # %for.end1063
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB83_184
# %bb.175:                              # %if.then1066
	movl	$0, -12(%rbp)
.LBB83_176:                             # %for.cond1067
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_178 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB83_183
# %bb.177:                              # %for.body1070
                                        #   in Loop: Header=BB83_176 Depth=1
	movl	$0, -16(%rbp)
.LBB83_178:                             # %for.cond1071
                                        #   Parent Loop BB83_176 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB83_181
# %bb.179:                              # %for.body1074
                                        #   in Loop: Header=BB83_178 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.180:                              # %for.inc1091
                                        #   in Loop: Header=BB83_178 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB83_178
.LBB83_181:                             # %for.end1093
                                        #   in Loop: Header=BB83_176 Depth=1
	jmp	.LBB83_182
.LBB83_182:                             # %for.inc1094
                                        #   in Loop: Header=BB83_176 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB83_176
.LBB83_183:                             # %for.end1096
	jmp	.LBB83_196
.LBB83_184:                             # %if.else1097
	movl	$0, -12(%rbp)
.LBB83_185:                             # %for.cond1098
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_187 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB83_195
# %bb.186:                              # %for.body1101
                                        #   in Loop: Header=BB83_185 Depth=1
	movl	$0, -16(%rbp)
.LBB83_187:                             # %for.cond1102
                                        #   Parent Loop BB83_185 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB83_193
# %bb.188:                              # %for.body1105
                                        #   in Loop: Header=BB83_187 Depth=2
	cmpl	$0, -72(%rbp)
	je	.LBB83_190
# %bb.189:                              # %if.then1107
                                        #   in Loop: Header=BB83_187 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB83_191
.LBB83_190:                             # %if.else1125
                                        #   in Loop: Header=BB83_187 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB83_191:                             # %if.end1145
                                        #   in Loop: Header=BB83_187 Depth=2
	jmp	.LBB83_192
.LBB83_192:                             # %for.inc1146
                                        #   in Loop: Header=BB83_187 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB83_187
.LBB83_193:                             # %for.end1148
                                        #   in Loop: Header=BB83_185 Depth=1
	jmp	.LBB83_194
.LBB83_194:                             # %for.inc1149
                                        #   in Loop: Header=BB83_185 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB83_185
.LBB83_195:                             # %for.end1151
	jmp	.LBB83_196
.LBB83_196:                             # %if.end1152
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB83_218
# %bb.197:                              # %if.then1155
	movl	$0, -12(%rbp)
.LBB83_198:                             # %for.cond1156
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_200 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB83_217
# %bb.199:                              # %for.body1159
                                        #   in Loop: Header=BB83_198 Depth=1
	movl	$0, -16(%rbp)
.LBB83_200:                             # %for.cond1160
                                        #   Parent Loop BB83_198 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB83_215
# %bb.201:                              # %for.body1163
                                        #   in Loop: Header=BB83_200 Depth=2
	cmpl	$0, -72(%rbp)
	je	.LBB83_203
# %bb.202:                              # %if.then1165
                                        #   in Loop: Header=BB83_200 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB83_213
.LBB83_203:                             # %if.else1186
                                        #   in Loop: Header=BB83_200 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	leaq	-2288(%rbp), %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movslq	(%rsi,%rdx,4), %rdx
	movq	img, %rsi
	addq	$4792, %rsi             # imm = 0x12B8
	movslq	-104(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-12(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB83_205
# %bb.204:                              # %cond.true
                                        #   in Loop: Header=BB83_200 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB83_206
.LBB83_205:                             # %cond.false
                                        #   in Loop: Header=BB83_200 Depth=2
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movslq	(%rdx,%rcx,4), %rcx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-104(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB83_206:                             # %cond.end
                                        #   in Loop: Header=BB83_200 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB83_208
# %bb.207:                              # %cond.true1226
                                        #   in Loop: Header=BB83_200 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB83_212
.LBB83_208:                             # %cond.false1229
                                        #   in Loop: Header=BB83_200 Depth=2
	xorl	%eax, %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movslq	(%rdx,%rcx,4), %rcx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-104(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB83_210
# %bb.209:                              # %cond.true1249
                                        #   in Loop: Header=BB83_200 Depth=2
	xorl	%eax, %eax
	jmp	.LBB83_211
.LBB83_210:                             # %cond.false1250
                                        #   in Loop: Header=BB83_200 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movslq	(%rcx,%rax,4), %rax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB83_211:                             # %cond.end1268
                                        #   in Loop: Header=BB83_200 Depth=2
.LBB83_212:                             # %cond.end1270
                                        #   in Loop: Header=BB83_200 Depth=2
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB83_213:                             # %if.end1282
                                        #   in Loop: Header=BB83_200 Depth=2
	jmp	.LBB83_214
.LBB83_214:                             # %for.inc1283
                                        #   in Loop: Header=BB83_200 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB83_200
.LBB83_215:                             # %for.end1285
                                        #   in Loop: Header=BB83_198 Depth=1
	jmp	.LBB83_216
.LBB83_216:                             # %for.inc1286
                                        #   in Loop: Header=BB83_198 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB83_198
.LBB83_217:                             # %for.end1288
	jmp	.LBB83_218
.LBB83_218:                             # %if.end1289
	movl	-120(%rbp), %ebx
	cmpl	$1391649138, -132(%rbp) # imm = 0x52F2E172
	jne	.LBB83_220
.LBB83_219:
	movl	%ebx, %eax
	addq	$2280, %rsp             # imm = 0x8E8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB83_220:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB83_219
.Lfunc_end83:
	.size	dct_luma_16x16.74, .Lfunc_end83-dct_luma_16x16.74
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma.75           # -- Begin function dct_chroma.75
	.p2align	4, 0x90
	.type	dct_chroma.75,@function
dct_chroma.75:                          # @dct_chroma.75
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$424, %rsp              # imm = 0x1A8
	.cfi_offset %rbx, -24
	movl	$1379127540, -380(%rbp) # imm = 0x5233D0F4
	movl	%edi, -20(%rbp)
	movl	%esi, -136(%rbp)
	movl	$0, -204(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -192(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -224(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -376(%rbp)
	movq	-192(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB84_3
# %bb.1:                                # %lor.lhs.false
	movq	-192(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB84_3
# %bb.2:                                # %lor.rhs
	movq	-192(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB84_3:                               # %lor.end
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -124(%rbp)
	movl	-20(%rbp), %esi
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	imull	%eax, %esi
	movl	%esi, -196(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern, %rax
	movq	%rax, -432(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+8, %rax
	movq	%rax, -424(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+16, %rax
	movq	%rax, -416(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+24, %rax
	movq	%rax, -408(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	movl	%eax, -144(%rbp)
	movl	$0, -104(%rbp)
	movl	$0, -132(%rbp)
	movl	$0, -208(%rbp)
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	cmpl	$0, %eax
	jne	.LBB84_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%cl
.LBB84_5:                               # %land.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -108(%rbp)
	movq	-192(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	img, %rdx
	movslq	-20(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	movl	%ecx, -128(%rbp)
	movl	-128(%rbp), %ecx
	movq	img, %rdx
	subl	72672(%rdx), %eax
	cmpl	%eax, %ecx
	jge	.LBB84_7
# %bb.6:                                # %cond.true
	xorl	%eax, %eax
	movq	img, %rcx
	subl	72672(%rcx), %eax
	jmp	.LBB84_11
.LBB84_7:                               # %cond.false
	cmpl	$51, -128(%rbp)
	jle	.LBB84_9
# %bb.8:                                # %cond.true24
	movl	$51, %eax
	jmp	.LBB84_10
.LBB84_9:                               # %cond.false25
	movl	-128(%rbp), %eax
.LBB84_10:                              # %cond.end
.LBB84_11:                              # %cond.end26
	movl	%eax, -128(%rbp)
	cmpl	$0, -128(%rbp)
	jge	.LBB84_13
# %bb.12:                               # %cond.true29
	movl	-128(%rbp), %eax
	jmp	.LBB84_14
.LBB84_13:                              # %cond.false30
	movl	-128(%rbp), %eax
	subl	$0, %eax
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB84_14:                              # %cond.end34
	movl	%eax, -128(%rbp)
	movl	-128(%rbp), %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movl	-128(%rbp), %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -76(%rbp)
	movl	-40(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -180(%rbp)
	movq	img, %rax
	cmpl	$2, 72700(%rax)
	jne	.LBB84_16
# %bb.15:                               # %if.then
	movl	-128(%rbp), %eax
	addl	$3, %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -104(%rbp)
	movl	-128(%rbp), %eax
	addl	$3, %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -132(%rbp)
	movl	-104(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -208(%rbp)
.LBB84_16:                              # %if.end
	movl	$0, -28(%rbp)
.LBB84_17:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_19 Depth 2
                                        #       Child Loop BB84_21 Depth 3
                                        #         Child Loop BB84_25 Depth 4
                                        #       Child Loop BB84_31 Depth 3
                                        #         Child Loop BB84_35 Depth 4
	movl	-28(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB84_44
# %bb.18:                               # %for.body
                                        #   in Loop: Header=BB84_17 Depth=1
	movl	$0, -24(%rbp)
.LBB84_19:                              # %for.cond56
                                        #   Parent Loop BB84_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB84_21 Depth 3
                                        #         Child Loop BB84_25 Depth 4
                                        #       Child Loop BB84_31 Depth 3
                                        #         Child Loop BB84_35 Depth 4
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB84_42
# %bb.20:                               # %for.body59
                                        #   in Loop: Header=BB84_19 Depth=2
	movl	$0, -12(%rbp)
.LBB84_21:                              # %for.cond60
                                        #   Parent Loop BB84_17 Depth=1
                                        #     Parent Loop BB84_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB84_25 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB84_23
# %bb.22:                               # %land.rhs63
                                        #   in Loop: Header=BB84_21 Depth=3
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB84_23:                              # %land.end64
                                        #   in Loop: Header=BB84_21 Depth=3
	testb	$1, %al
	jne	.LBB84_24
	jmp	.LBB84_30
.LBB84_24:                              # %for.body66
                                        #   in Loop: Header=BB84_21 Depth=3
	movl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -148(%rbp)
	movl	$0, -16(%rbp)
.LBB84_25:                              # %for.cond68
                                        #   Parent Loop BB84_17 Depth=1
                                        #     Parent Loop BB84_19 Depth=2
                                        #       Parent Loop BB84_21 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB84_28
# %bb.26:                               # %for.body71
                                        #   in Loop: Header=BB84_25 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-148(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-148(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-120(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.27:                               # %for.inc
                                        #   in Loop: Header=BB84_25 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB84_25
.LBB84_28:                              # %for.end
                                        #   in Loop: Header=BB84_21 Depth=3
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.29:                               # %for.inc139
                                        #   in Loop: Header=BB84_21 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB84_21
.LBB84_30:                              # %for.end141
                                        #   in Loop: Header=BB84_19 Depth=2
	movl	$0, -16(%rbp)
.LBB84_31:                              # %for.cond142
                                        #   Parent Loop BB84_17 Depth=1
                                        #     Parent Loop BB84_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB84_35 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB84_33
# %bb.32:                               # %land.rhs145
                                        #   in Loop: Header=BB84_31 Depth=3
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB84_33:                              # %land.end148
                                        #   in Loop: Header=BB84_31 Depth=3
	testb	$1, %al
	jne	.LBB84_34
	jmp	.LBB84_40
.LBB84_34:                              # %for.body150
                                        #   in Loop: Header=BB84_31 Depth=3
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	$0, -12(%rbp)
.LBB84_35:                              # %for.cond152
                                        #   Parent Loop BB84_17 Depth=1
                                        #     Parent Loop BB84_19 Depth=2
                                        #       Parent Loop BB84_31 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB84_38
# %bb.36:                               # %for.body155
                                        #   in Loop: Header=BB84_35 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-68(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.37:                               # %for.inc187
                                        #   in Loop: Header=BB84_35 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB84_35
.LBB84_38:                              # %for.end189
                                        #   in Loop: Header=BB84_31 Depth=3
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.39:                               # %for.inc228
                                        #   in Loop: Header=BB84_31 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB84_31
.LBB84_40:                              # %for.end230
                                        #   in Loop: Header=BB84_19 Depth=2
	jmp	.LBB84_41
.LBB84_41:                              # %for.inc231
                                        #   in Loop: Header=BB84_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB84_19
.LBB84_42:                              # %for.end233
                                        #   in Loop: Header=BB84_17 Depth=1
	jmp	.LBB84_43
.LBB84_43:                              # %for.inc234
                                        #   in Loop: Header=BB84_17 Depth=1
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB84_17
.LBB84_44:                              # %for.end236
	cmpl	$1, -144(%rbp)
	jne	.LBB84_76
# %bb.45:                               # %if.then239
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -176(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -172(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -168(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -164(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -36(%rbp)
.LBB84_46:                              # %for.cond304
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -36(%rbp)
	jge	.LBB84_62
# %bb.47:                               # %for.body307
                                        #   in Loop: Header=BB84_46 Depth=1
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -140(%rbp)
	cmpl	$1, -124(%rbp)
	jne	.LBB84_49
# %bb.48:                               # %if.then311
                                        #   in Loop: Header=BB84_46 Depth=1
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB84_50
.LBB84_49:                              # %if.else
                                        #   in Loop: Header=BB84_46 Depth=1
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB84_50:                              # %if.end349
                                        #   in Loop: Header=BB84_46 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB84_55
# %bb.51:                               # %land.lhs.true
                                        #   in Loop: Header=BB84_46 Depth=1
	movq	img, %rax
	cmpl	$4, 40(%rax)
	jge	.LBB84_55
# %bb.52:                               # %if.then355
                                        #   in Loop: Header=BB84_46 Depth=1
	cmpl	$2063, -44(%rbp)        # imm = 0x80F
	jle	.LBB84_54
# %bb.53:                               # %if.then358
                                        #   in Loop: Header=BB84_46 Depth=1
	movl	$2063, -44(%rbp)        # imm = 0x80F
.LBB84_54:                              # %if.end359
                                        #   in Loop: Header=BB84_46 Depth=1
	jmp	.LBB84_55
.LBB84_55:                              # %if.end360
                                        #   in Loop: Header=BB84_46 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB84_60
# %bb.56:                               # %if.then363
                                        #   in Loop: Header=BB84_46 Depth=1
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
                                        # kill: def $cl killed $ecx
	movl	$983040, %eax           # imm = 0xF0000
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-136(%rbp), %eax
	jle	.LBB84_58
# %bb.57:                               # %cond.true369
                                        #   in Loop: Header=BB84_46 Depth=1
	movl	$1, %eax
	jmp	.LBB84_59
.LBB84_58:                              # %cond.false370
                                        #   in Loop: Header=BB84_46 Depth=1
	movl	-136(%rbp), %eax
.LBB84_59:                              # %cond.end371
                                        #   in Loop: Header=BB84_46 Depth=1
	movl	%eax, -136(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	$-1, -100(%rbp)
	movl	-44(%rbp), %edi
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %esi
	callq	sign
	movl	%eax, -140(%rbp)
.LBB84_60:                              # %if.end384
                                        #   in Loop: Header=BB84_46 Depth=1
	movl	-140(%rbp), %eax
	movslq	-36(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.61:                               # %for.inc387
                                        #   in Loop: Header=BB84_46 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB84_46
.LBB84_62:                              # %for.end389
	movq	-224(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -16(%rbp)
.LBB84_63:                              # %for.cond424
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB84_75
# %bb.64:                               # %for.body427
                                        #   in Loop: Header=BB84_63 Depth=1
	cmpl	$5, -40(%rbp)
	jge	.LBB84_69
# %bb.65:                               # %if.then430
                                        #   in Loop: Header=BB84_63 Depth=1
	cmpl	$1, -124(%rbp)
	jne	.LBB84_67
# %bb.66:                               # %if.then433
                                        #   in Loop: Header=BB84_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	$5, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	jmp	.LBB84_68
.LBB84_67:                              # %if.else447
                                        #   in Loop: Header=BB84_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	$5, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
.LBB84_68:                              # %if.end461
                                        #   in Loop: Header=BB84_63 Depth=1
	jmp	.LBB84_73
.LBB84_69:                              # %if.else462
                                        #   in Loop: Header=BB84_63 Depth=1
	cmpl	$1, -124(%rbp)
	jne	.LBB84_71
# %bb.70:                               # %if.then465
                                        #   in Loop: Header=BB84_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-40(%rbp), %ecx
	subl	$5, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	jmp	.LBB84_72
.LBB84_71:                              # %if.else479
                                        #   in Loop: Header=BB84_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-40(%rbp), %ecx
	subl	$5, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
.LBB84_72:                              # %if.end493
                                        #   in Loop: Header=BB84_63 Depth=1
	jmp	.LBB84_73
.LBB84_73:                              # %if.end494
                                        #   in Loop: Header=BB84_63 Depth=1
	jmp	.LBB84_74
.LBB84_74:                              # %for.inc495
                                        #   in Loop: Header=BB84_63 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB84_63
.LBB84_75:                              # %for.end497
	movl	-176(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	movl	-172(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13368(%rcx)
	movl	-168(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13128(%rcx)
	movl	-164(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13384(%rcx)
	jmp	.LBB84_213
.LBB84_76:                              # %if.else514
	cmpl	$2, -144(%rbp)
	jne	.LBB84_127
# %bb.77:                               # %if.then517
	movl	$0, -12(%rbp)
.LBB84_78:                              # %for.cond518
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_80 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB84_85
# %bb.79:                               # %for.body522
                                        #   in Loop: Header=BB84_78 Depth=1
	movl	$0, -16(%rbp)
.LBB84_80:                              # %for.cond523
                                        #   Parent Loop BB84_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB84_83
# %bb.81:                               # %for.body527
                                        #   in Loop: Header=BB84_80 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$4, %rcx
	leaq	-368(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.82:                               # %for.inc539
                                        #   in Loop: Header=BB84_80 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB84_80
.LBB84_83:                              # %for.end541
                                        #   in Loop: Header=BB84_78 Depth=1
	jmp	.LBB84_84
.LBB84_84:                              # %for.inc542
                                        #   in Loop: Header=BB84_78 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB84_78
.LBB84_85:                              # %for.end544
	movl	-368(%rbp), %eax
	addl	-352(%rbp), %eax
	movl	%eax, -304(%rbp)
	movl	-364(%rbp), %eax
	addl	-348(%rbp), %eax
	movl	%eax, -300(%rbp)
	movl	-360(%rbp), %eax
	addl	-344(%rbp), %eax
	movl	%eax, -296(%rbp)
	movl	-356(%rbp), %eax
	addl	-340(%rbp), %eax
	movl	%eax, -292(%rbp)
	movl	-368(%rbp), %eax
	subl	-352(%rbp), %eax
	movl	%eax, -288(%rbp)
	movl	-364(%rbp), %eax
	subl	-348(%rbp), %eax
	movl	%eax, -284(%rbp)
	movl	-360(%rbp), %eax
	subl	-344(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-356(%rbp), %eax
	subl	-340(%rbp), %eax
	movl	%eax, -276(%rbp)
	movl	$0, -16(%rbp)
.LBB84_86:                              # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_88 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB84_93
# %bb.87:                               # %for.body604
                                        #   in Loop: Header=BB84_86 Depth=1
	movl	$0, -12(%rbp)
.LBB84_88:                              # %for.cond605
                                        #   Parent Loop BB84_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB84_91
# %bb.89:                               # %for.body608
                                        #   in Loop: Header=BB84_88 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-32(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-32(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.90:                               # %for.inc632
                                        #   in Loop: Header=BB84_88 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB84_88
.LBB84_91:                              # %for.end634
                                        #   in Loop: Header=BB84_86 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, 8(%rsi)
	movl	-52(%rbp), %eax
	addl	-56(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-52(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movl	%eax, 12(%rdx)
# %bb.92:                               # %for.inc659
                                        #   in Loop: Header=BB84_86 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB84_86
.LBB84_93:                              # %for.end661
	movl	$-1, -100(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -36(%rbp)
.LBB84_94:                              # %for.cond662
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -36(%rbp)
	jge	.LBB84_105
# %bb.95:                               # %for.body665
                                        #   in Loop: Header=BB84_94 Depth=1
	movslq	-36(%rbp), %rax
	movzbl	SCAN_YUV422(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SCAN_YUV422+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	cmpl	$1, -124(%rbp)
	jne	.LBB84_97
# %bb.96:                               # %if.then677
                                        #   in Loop: Header=BB84_94 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-104(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-208(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB84_98
.LBB84_97:                              # %if.else700
                                        #   in Loop: Header=BB84_94 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-104(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-208(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB84_98:                              # %if.end723
                                        #   in Loop: Header=BB84_94 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB84_103
# %bb.99:                               # %if.then726
                                        #   in Loop: Header=BB84_94 Depth=1
	movl	-20(%rbp), %ecx
	shll	$3, %ecx
                                        # kill: def $cl killed $ecx
	movl	$16711680, %eax         # imm = 0xFF0000
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-136(%rbp), %eax
	jle	.LBB84_101
# %bb.100:                              # %cond.true734
                                        #   in Loop: Header=BB84_94 Depth=1
	movl	$1, %eax
	jmp	.LBB84_102
.LBB84_101:                             # %cond.false735
                                        #   in Loop: Header=BB84_94 Depth=1
	movl	-136(%rbp), %eax
.LBB84_102:                             # %cond.end736
                                        #   in Loop: Header=BB84_94 Depth=1
	movl	%eax, -136(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	$-1, -100(%rbp)
.LBB84_103:                             # %if.end748
                                        #   in Loop: Header=BB84_94 Depth=1
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-368(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.104:                              # %for.inc758
                                        #   in Loop: Header=BB84_94 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB84_94
.LBB84_105:                             # %for.end760
	movq	-224(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-368(%rbp), %eax
	addl	-352(%rbp), %eax
	movl	%eax, -304(%rbp)
	movl	-364(%rbp), %eax
	addl	-348(%rbp), %eax
	movl	%eax, -300(%rbp)
	movl	-360(%rbp), %eax
	addl	-344(%rbp), %eax
	movl	%eax, -296(%rbp)
	movl	-356(%rbp), %eax
	addl	-340(%rbp), %eax
	movl	%eax, -292(%rbp)
	movl	-368(%rbp), %eax
	subl	-352(%rbp), %eax
	movl	%eax, -288(%rbp)
	movl	-364(%rbp), %eax
	subl	-348(%rbp), %eax
	movl	%eax, -284(%rbp)
	movl	-360(%rbp), %eax
	subl	-344(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-356(%rbp), %eax
	subl	-340(%rbp), %eax
	movl	%eax, -276(%rbp)
	movl	$0, -16(%rbp)
.LBB84_106:                             # %for.cond819
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_108 Depth 2
                                        #     Child Loop BB84_112 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB84_126
# %bb.107:                              # %for.body822
                                        #   in Loop: Header=BB84_106 Depth=1
	movl	$0, -12(%rbp)
.LBB84_108:                             # %for.cond823
                                        #   Parent Loop BB84_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB84_111
# %bb.109:                              # %for.body826
                                        #   in Loop: Header=BB84_108 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.110:                              # %for.inc833
                                        #   in Loop: Header=BB84_108 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB84_108
.LBB84_111:                             # %for.end835
                                        #   in Loop: Header=BB84_106 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB84_112:                             # %for.cond852
                                        #   Parent Loop BB84_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB84_124
# %bb.113:                              # %for.body855
                                        #   in Loop: Header=BB84_112 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	cmpl	$4, -104(%rbp)
	jge	.LBB84_118
# %bb.114:                              # %if.then859
                                        #   in Loop: Header=BB84_112 Depth=2
	cmpl	$1, -124(%rbp)
	jne	.LBB84_116
# %bb.115:                              # %if.then862
                                        #   in Loop: Header=BB84_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-132(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-104(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-104(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
	jmp	.LBB84_117
.LBB84_116:                             # %if.else915
                                        #   in Loop: Header=BB84_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-132(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-104(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-104(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
.LBB84_117:                             # %if.end968
                                        #   in Loop: Header=BB84_112 Depth=2
	jmp	.LBB84_122
.LBB84_118:                             # %if.else969
                                        #   in Loop: Header=BB84_112 Depth=2
	cmpl	$1, -124(%rbp)
	jne	.LBB84_120
# %bb.119:                              # %if.then972
                                        #   in Loop: Header=BB84_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-104(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-104(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB84_121
.LBB84_120:                             # %if.else1019
                                        #   in Loop: Header=BB84_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-104(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-104(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB84_121:                             # %if.end1066
                                        #   in Loop: Header=BB84_112 Depth=2
	jmp	.LBB84_122
.LBB84_122:                             # %if.end1067
                                        #   in Loop: Header=BB84_112 Depth=2
	jmp	.LBB84_123
.LBB84_123:                             # %for.inc1068
                                        #   in Loop: Header=BB84_112 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB84_112
.LBB84_124:                             # %for.end1070
                                        #   in Loop: Header=BB84_106 Depth=1
	jmp	.LBB84_125
.LBB84_125:                             # %for.inc1071
                                        #   in Loop: Header=BB84_106 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB84_106
.LBB84_126:                             # %for.end1073
	jmp	.LBB84_212
.LBB84_127:                             # %if.else1074
	cmpl	$3, -144(%rbp)
	jne	.LBB84_211
# %bb.128:                              # %if.then1077
	movl	$0, -12(%rbp)
.LBB84_129:                             # %for.cond1078
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_131 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB84_136
# %bb.130:                              # %for.body1082
                                        #   in Loop: Header=BB84_129 Depth=1
	movl	$0, -16(%rbp)
.LBB84_131:                             # %for.cond1083
                                        #   Parent Loop BB84_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB84_134
# %bb.132:                              # %for.body1087
                                        #   in Loop: Header=BB84_131 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.133:                              # %for.inc1099
                                        #   in Loop: Header=BB84_131 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB84_131
.LBB84_134:                             # %for.end1101
                                        #   in Loop: Header=BB84_129 Depth=1
	jmp	.LBB84_135
.LBB84_135:                             # %for.inc1102
                                        #   in Loop: Header=BB84_129 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB84_129
.LBB84_136:                             # %for.end1104
	movl	$0, -12(%rbp)
.LBB84_137:                             # %for.cond1105
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_141 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB84_139
# %bb.138:                              # %land.rhs1108
                                        #   in Loop: Header=BB84_137 Depth=1
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB84_139:                             # %land.end1111
                                        #   in Loop: Header=BB84_137 Depth=1
	testb	$1, %al
	jne	.LBB84_140
	jmp	.LBB84_146
.LBB84_140:                             # %for.body1113
                                        #   in Loop: Header=BB84_137 Depth=1
	movl	$0, -16(%rbp)
.LBB84_141:                             # %for.cond1114
                                        #   Parent Loop BB84_137 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB84_144
# %bb.142:                              # %for.body1117
                                        #   in Loop: Header=BB84_141 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-120(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-120(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-120(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.143:                              # %for.inc1141
                                        #   in Loop: Header=BB84_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB84_141
.LBB84_144:                             # %for.end1143
                                        #   in Loop: Header=BB84_137 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -304(%rbp,%rcx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
	movl	-52(%rbp), %eax
	addl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -288(%rbp,%rcx,4)
	movl	-52(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -256(%rbp,%rcx,4)
# %bb.145:                              # %for.inc1168
                                        #   in Loop: Header=BB84_137 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB84_137
.LBB84_146:                             # %for.end1170
	movl	$0, -16(%rbp)
.LBB84_147:                             # %for.cond1171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_151 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB84_149
# %bb.148:                              # %land.rhs1174
                                        #   in Loop: Header=BB84_147 Depth=1
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB84_149:                             # %land.end1177
                                        #   in Loop: Header=BB84_147 Depth=1
	testb	$1, %al
	jne	.LBB84_150
	jmp	.LBB84_156
.LBB84_150:                             # %for.body1179
                                        #   in Loop: Header=BB84_147 Depth=1
	movl	$0, -12(%rbp)
.LBB84_151:                             # %for.cond1180
                                        #   Parent Loop BB84_147 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB84_154
# %bb.152:                              # %for.body1183
                                        #   in Loop: Header=BB84_151 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-32(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-32(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.153:                              # %for.inc1207
                                        #   in Loop: Header=BB84_151 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB84_151
.LBB84_154:                             # %for.end1209
                                        #   in Loop: Header=BB84_147 Depth=1
	movl	-64(%rbp), %ecx
	addl	-60(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-304(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-64(%rbp), %ecx
	subl	-60(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-52(%rbp), %ecx
	addl	-56(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-52(%rbp), %ecx
	subl	-56(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.155:                              # %for.inc1238
                                        #   in Loop: Header=BB84_147 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB84_147
.LBB84_156:                             # %for.end1240
	movl	$-1, -100(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -36(%rbp)
.LBB84_157:                             # %for.cond1241
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -36(%rbp)
	jge	.LBB84_173
# %bb.158:                              # %for.body1244
                                        #   in Loop: Header=BB84_157 Depth=1
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB84_160
# %bb.159:                              # %if.then1255
                                        #   in Loop: Header=BB84_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -44(%rbp)
	jmp	.LBB84_164
.LBB84_160:                             # %if.else1261
                                        #   in Loop: Header=BB84_157 Depth=1
	cmpl	$1, -124(%rbp)
	jne	.LBB84_162
# %bb.161:                              # %if.then1264
                                        #   in Loop: Header=BB84_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB84_163
.LBB84_162:                             # %if.else1287
                                        #   in Loop: Header=BB84_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB84_163:                             # %if.end1310
                                        #   in Loop: Header=BB84_157 Depth=1
	jmp	.LBB84_164
.LBB84_164:                             # %if.end1311
                                        #   in Loop: Header=BB84_157 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB84_169
# %bb.165:                              # %if.then1314
                                        #   in Loop: Header=BB84_157 Depth=1
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $rcx
	movl	$4294901760, %eax       # imm = 0xFFFF0000
	shlq	%cl, %rax
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-136(%rbp), %eax
	jle	.LBB84_167
# %bb.166:                              # %cond.true1321
                                        #   in Loop: Header=BB84_157 Depth=1
	movl	$1, %eax
	jmp	.LBB84_168
.LBB84_167:                             # %cond.false1322
                                        #   in Loop: Header=BB84_157 Depth=1
	movl	-136(%rbp), %eax
.LBB84_168:                             # %cond.end1323
                                        #   in Loop: Header=BB84_157 Depth=1
	movl	%eax, -136(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	$-1, -100(%rbp)
.LBB84_169:                             # %if.end1335
                                        #   in Loop: Header=BB84_157 Depth=1
	cmpl	$0, -108(%rbp)
	jne	.LBB84_171
# %bb.170:                              # %if.then1337
                                        #   in Loop: Header=BB84_157 Depth=1
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB84_171:                             # %if.end1347
                                        #   in Loop: Header=BB84_157 Depth=1
	jmp	.LBB84_172
.LBB84_172:                             # %for.inc1348
                                        #   in Loop: Header=BB84_157 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB84_157
.LBB84_173:                             # %for.end1350
	movq	-224(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB84_174:                             # %for.cond1353
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_178 Depth 2
                                        #     Child Loop BB84_182 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB84_176
# %bb.175:                              # %land.rhs1356
                                        #   in Loop: Header=BB84_174 Depth=1
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB84_176:                             # %land.end1359
                                        #   in Loop: Header=BB84_174 Depth=1
	testb	$1, %al
	jne	.LBB84_177
	jmp	.LBB84_187
.LBB84_177:                             # %for.body1361
                                        #   in Loop: Header=BB84_174 Depth=1
	movl	$0, -16(%rbp)
.LBB84_178:                             # %for.cond1362
                                        #   Parent Loop BB84_174 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB84_181
# %bb.179:                              # %for.body1365
                                        #   in Loop: Header=BB84_178 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.180:                              # %for.inc1372
                                        #   in Loop: Header=BB84_178 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB84_178
.LBB84_181:                             # %for.end1374
                                        #   in Loop: Header=BB84_174 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB84_182:                             # %for.cond1391
                                        #   Parent Loop BB84_174 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB84_185
# %bb.183:                              # %for.body1394
                                        #   in Loop: Header=BB84_182 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movslq	-120(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.184:                              # %for.inc1414
                                        #   in Loop: Header=BB84_182 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB84_182
.LBB84_185:                             # %for.end1416
                                        #   in Loop: Header=BB84_174 Depth=1
	jmp	.LBB84_186
.LBB84_186:                             # %for.inc1417
                                        #   in Loop: Header=BB84_174 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB84_174
.LBB84_187:                             # %for.end1419
	movl	$0, -16(%rbp)
.LBB84_188:                             # %for.cond1420
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_192 Depth 2
                                        #     Child Loop BB84_196 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB84_190
# %bb.189:                              # %land.rhs1423
                                        #   in Loop: Header=BB84_188 Depth=1
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB84_190:                             # %land.end1426
                                        #   in Loop: Header=BB84_188 Depth=1
	testb	$1, %al
	jne	.LBB84_191
	jmp	.LBB84_210
.LBB84_191:                             # %for.body1428
                                        #   in Loop: Header=BB84_188 Depth=1
	movl	$0, -12(%rbp)
.LBB84_192:                             # %for.cond1429
                                        #   Parent Loop BB84_188 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB84_195
# %bb.193:                              # %for.body1432
                                        #   in Loop: Header=BB84_192 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.194:                              # %for.inc1439
                                        #   in Loop: Header=BB84_192 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB84_192
.LBB84_195:                             # %for.end1441
                                        #   in Loop: Header=BB84_188 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB84_196:                             # %for.cond1458
                                        #   Parent Loop BB84_188 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB84_208
# %bb.197:                              # %for.body1461
                                        #   in Loop: Header=BB84_196 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	cmpl	$4, -40(%rbp)
	jge	.LBB84_202
# %bb.198:                              # %if.then1465
                                        #   in Loop: Header=BB84_196 Depth=2
	cmpl	$1, -124(%rbp)
	jne	.LBB84_200
# %bb.199:                              # %if.then1468
                                        #   in Loop: Header=BB84_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-76(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-40(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-40(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
	jmp	.LBB84_201
.LBB84_200:                             # %if.else1521
                                        #   in Loop: Header=BB84_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-76(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-40(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-40(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
.LBB84_201:                             # %if.end1574
                                        #   in Loop: Header=BB84_196 Depth=2
	jmp	.LBB84_206
.LBB84_202:                             # %if.else1575
                                        #   in Loop: Header=BB84_196 Depth=2
	cmpl	$1, -124(%rbp)
	jne	.LBB84_204
# %bb.203:                              # %if.then1578
                                        #   in Loop: Header=BB84_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB84_205
.LBB84_204:                             # %if.else1625
                                        #   in Loop: Header=BB84_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB84_205:                             # %if.end1672
                                        #   in Loop: Header=BB84_196 Depth=2
	jmp	.LBB84_206
.LBB84_206:                             # %if.end1673
                                        #   in Loop: Header=BB84_196 Depth=2
	jmp	.LBB84_207
.LBB84_207:                             # %for.inc1674
                                        #   in Loop: Header=BB84_196 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB84_196
.LBB84_208:                             # %for.end1676
                                        #   in Loop: Header=BB84_188 Depth=1
	jmp	.LBB84_209
.LBB84_209:                             # %for.inc1677
                                        #   in Loop: Header=BB84_188 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB84_188
.LBB84_210:                             # %for.end1679
	jmp	.LBB84_211
.LBB84_211:                             # %if.end1680
	jmp	.LBB84_212
.LBB84_212:                             # %if.end1681
	jmp	.LBB84_213
.LBB84_213:                             # %if.end1682
	movl	$0, -200(%rbp)
	movl	$0, -212(%rbp)
	movl	$0, -112(%rbp)
.LBB84_214:                             # %for.cond1683
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_216 Depth 2
                                        #       Child Loop BB84_218 Depth 3
	movl	-112(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB84_256
# %bb.215:                              # %for.body1688
                                        #   in Loop: Header=BB84_214 Depth=1
	movl	$0, -116(%rbp)
.LBB84_216:                             # %for.cond1689
                                        #   Parent Loop BB84_214 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB84_218 Depth 3
	cmpl	$4, -116(%rbp)
	jge	.LBB84_254
# %bb.217:                              # %for.body1692
                                        #   in Loop: Header=BB84_216 Depth=2
	movslq	-144(%rbp), %rax
	shlq	$4, %rax
	movabsq	$hor_offset, %rcx
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -24(%rbp)
	movslq	-144(%rbp), %rax
	shlq	$4, %rax
	movabsq	$ver_offset, %rcx
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$4, %ecx
	addl	-196(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -232(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$4, %ecx
	addl	-196(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -392(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -72(%rbp)
	movl	$1, -36(%rbp)
.LBB84_218:                             # %for.cond1722
                                        #   Parent Loop BB84_214 Depth=1
                                        #     Parent Loop BB84_216 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -36(%rbp)
	jge	.LBB84_252
# %bb.219:                              # %for.body1725
                                        #   in Loop: Header=BB84_218 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB84_222
# %bb.220:                              # %lor.lhs.false1727
                                        #   in Loop: Header=BB84_218 Depth=3
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB84_223
# %bb.221:                              # %land.lhs.true1729
                                        #   in Loop: Header=BB84_218 Depth=3
	movq	-192(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB84_223
.LBB84_222:                             # %if.then1731
                                        #   in Loop: Header=BB84_218 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB84_224
.LBB84_223:                             # %if.else1740
                                        #   in Loop: Header=BB84_218 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB84_224:                             # %if.end1749
                                        #   in Loop: Header=BB84_218 Depth=3
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -140(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB84_226
# %bb.225:                              # %if.then1752
                                        #   in Loop: Header=BB84_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -44(%rbp)
	jmp	.LBB84_230
.LBB84_226:                             # %if.else1761
                                        #   in Loop: Header=BB84_218 Depth=3
	cmpl	$1, -124(%rbp)
	jne	.LBB84_228
# %bb.227:                              # %if.then1764
                                        #   in Loop: Header=BB84_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-180(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB84_229
.LBB84_228:                             # %if.else1792
                                        #   in Loop: Header=BB84_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-180(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB84_229:                             # %if.end1820
                                        #   in Loop: Header=BB84_218 Depth=3
	jmp	.LBB84_230
.LBB84_230:                             # %if.end1821
                                        #   in Loop: Header=BB84_218 Depth=3
	cmpl	$0, -44(%rbp)
	je	.LBB84_248
# %bb.231:                              # %if.then1824
                                        #   in Loop: Header=BB84_218 Depth=3
	movl	-112(%rbp), %eax
	addl	-196(%rbp), %eax
	cltq
	shlq	$2, %rax
	movabsq	$cbp_blk_chroma, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $rcx
	movl	$1, %eax
	shlq	%cl, %rax
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	cmpl	$1, -44(%rbp)
	jg	.LBB84_233
# %bb.232:                              # %lor.lhs.false1837
                                        #   in Loop: Header=BB84_218 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB84_234
.LBB84_233:                             # %if.then1839
                                        #   in Loop: Header=BB84_218 Depth=3
	movl	-200(%rbp), %eax
	addl	$999999, %eax           # imm = 0xF423F
	movl	%eax, -200(%rbp)
	jmp	.LBB84_235
.LBB84_234:                             # %if.else1841
                                        #   in Loop: Header=BB84_218 Depth=3
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-100(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	-200(%rbp), %eax
	movl	%eax, -200(%rbp)
.LBB84_235:                             # %if.end1848
                                        #   in Loop: Header=BB84_218 Depth=3
	movl	$2, -212(%rbp)
	movl	-44(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-232(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-392(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	$-1, -100(%rbp)
	movl	-44(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -44(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB84_237
# %bb.236:                              # %if.then1871
                                        #   in Loop: Header=BB84_218 Depth=3
	movl	-44(%rbp), %eax
	movl	%eax, -140(%rbp)
	jmp	.LBB84_247
.LBB84_237:                             # %if.else1872
                                        #   in Loop: Header=BB84_218 Depth=3
	cmpl	$4, -40(%rbp)
	jge	.LBB84_242
# %bb.238:                              # %if.then1875
                                        #   in Loop: Header=BB84_218 Depth=3
	cmpl	$1, -124(%rbp)
	jne	.LBB84_240
# %bb.239:                              # %if.then1878
                                        #   in Loop: Header=BB84_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -140(%rbp)
	jmp	.LBB84_241
.LBB84_240:                             # %if.else1893
                                        #   in Loop: Header=BB84_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -140(%rbp)
.LBB84_241:                             # %if.end1908
                                        #   in Loop: Header=BB84_218 Depth=3
	jmp	.LBB84_246
.LBB84_242:                             # %if.else1909
                                        #   in Loop: Header=BB84_218 Depth=3
	cmpl	$1, -124(%rbp)
	jne	.LBB84_244
# %bb.243:                              # %if.then1912
                                        #   in Loop: Header=BB84_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -140(%rbp)
	jmp	.LBB84_245
.LBB84_244:                             # %if.else1924
                                        #   in Loop: Header=BB84_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -140(%rbp)
.LBB84_245:                             # %if.end1936
                                        #   in Loop: Header=BB84_218 Depth=3
	jmp	.LBB84_246
.LBB84_246:                             # %if.end1937
                                        #   in Loop: Header=BB84_218 Depth=3
	jmp	.LBB84_247
.LBB84_247:                             # %if.end1938
                                        #   in Loop: Header=BB84_218 Depth=3
	jmp	.LBB84_248
.LBB84_248:                             # %if.end1939
                                        #   in Loop: Header=BB84_218 Depth=3
	cmpl	$0, -108(%rbp)
	jne	.LBB84_250
# %bb.249:                              # %if.then1941
                                        #   in Loop: Header=BB84_218 Depth=3
	movl	-140(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB84_250:                             # %if.end1949
                                        #   in Loop: Header=BB84_218 Depth=3
	jmp	.LBB84_251
.LBB84_251:                             # %for.inc1950
                                        #   in Loop: Header=BB84_218 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB84_218
.LBB84_252:                             # %for.end1952
                                        #   in Loop: Header=BB84_216 Depth=2
	movq	-232(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.253:                              # %for.inc1955
                                        #   in Loop: Header=BB84_216 Depth=2
	movl	-116(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB84_216
.LBB84_254:                             # %for.end1957
                                        #   in Loop: Header=BB84_214 Depth=1
	jmp	.LBB84_255
.LBB84_255:                             # %for.inc1958
                                        #   in Loop: Header=BB84_214 Depth=1
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB84_214
.LBB84_256:                             # %for.end1960
	cmpl	$4, -200(%rbp)
	jge	.LBB84_278
# %bb.257:                              # %land.lhs.true1963
	cmpl	$0, -108(%rbp)
	jne	.LBB84_278
# %bb.258:                              # %if.then1965
	movl	$0, -212(%rbp)
	movl	$0, -112(%rbp)
.LBB84_259:                             # %for.cond1966
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_261 Depth 2
                                        #       Child Loop BB84_265 Depth 3
	movl	-112(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB84_277
# %bb.260:                              # %for.body1971
                                        #   in Loop: Header=BB84_259 Depth=1
	movl	$0, -116(%rbp)
.LBB84_261:                             # %for.cond1972
                                        #   Parent Loop BB84_259 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB84_265 Depth 3
	cmpl	$4, -116(%rbp)
	jge	.LBB84_275
# %bb.262:                              # %for.body1975
                                        #   in Loop: Header=BB84_261 Depth=2
	movslq	-144(%rbp), %rax
	shlq	$4, %rax
	movabsq	$hor_offset, %rcx
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -24(%rbp)
	movslq	-144(%rbp), %rax
	shlq	$4, %rax
	movabsq	$ver_offset, %rcx
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$4, %ecx
	addl	-196(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -232(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$4, %ecx
	addl	-196(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -392(%rbp)
	cmpl	$0, -204(%rbp)
	jne	.LBB84_264
# %bb.263:                              # %if.then2008
                                        #   in Loop: Header=BB84_261 Depth=2
	movslq	-144(%rbp), %rax
	movq	-432(%rbp,%rax,8), %rax
	movl	-20(%rbp), %edx
	movl	-144(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $rcx
	shlq	%cl, %rax
	xorq	$-1, %rax
	movq	-192(%rbp), %rcx
	andq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
.LBB84_264:                             # %if.end2016
                                        #   in Loop: Header=BB84_261 Depth=2
	movq	-232(%rbp), %rax
	movl	$0, (%rax)
	movl	$1, -36(%rbp)
.LBB84_265:                             # %for.cond2018
                                        #   Parent Loop BB84_259 Depth=1
                                        #     Parent Loop BB84_261 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -36(%rbp)
	jge	.LBB84_273
# %bb.266:                              # %for.body2021
                                        #   in Loop: Header=BB84_265 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB84_269
# %bb.267:                              # %lor.lhs.false2024
                                        #   in Loop: Header=BB84_265 Depth=3
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB84_270
# %bb.268:                              # %land.lhs.true2027
                                        #   in Loop: Header=BB84_265 Depth=3
	movq	-192(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB84_270
.LBB84_269:                             # %if.then2030
                                        #   in Loop: Header=BB84_265 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB84_271
.LBB84_270:                             # %if.else2039
                                        #   in Loop: Header=BB84_265 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB84_271:                             # %if.end2048
                                        #   in Loop: Header=BB84_265 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	$0, (%rax,%rcx,4)
	movq	-232(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.272:                              # %for.inc2058
                                        #   in Loop: Header=BB84_265 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB84_265
.LBB84_273:                             # %for.end2060
                                        #   in Loop: Header=BB84_261 Depth=2
	jmp	.LBB84_274
.LBB84_274:                             # %for.inc2061
                                        #   in Loop: Header=BB84_261 Depth=2
	movl	-116(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB84_261
.LBB84_275:                             # %for.end2063
                                        #   in Loop: Header=BB84_259 Depth=1
	jmp	.LBB84_276
.LBB84_276:                             # %for.inc2064
                                        #   in Loop: Header=BB84_259 Depth=1
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB84_259
.LBB84_277:                             # %for.end2066
	jmp	.LBB84_278
.LBB84_278:                             # %if.end2067
	cmpl	$2, -212(%rbp)
	jne	.LBB84_280
# %bb.279:                              # %if.then2070
	movl	$2, -136(%rbp)
.LBB84_280:                             # %if.end2071
	movl	$0, -28(%rbp)
.LBB84_281:                             # %for.cond2072
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_285 Depth 2
                                        #       Child Loop BB84_287 Depth 3
                                        #         Child Loop BB84_289 Depth 4
                                        #         Child Loop BB84_293 Depth 4
                                        #       Child Loop BB84_299 Depth 3
                                        #         Child Loop BB84_303 Depth 4
                                        #         Child Loop BB84_307 Depth 4
	xorl	%eax, %eax
	movl	-28(%rbp), %ecx
	movq	img, %rdx
	cmpl	72712(%rdx), %ecx
	jge	.LBB84_283
# %bb.282:                              # %land.rhs2076
                                        #   in Loop: Header=BB84_281 Depth=1
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB84_283:                             # %land.end2079
                                        #   in Loop: Header=BB84_281 Depth=1
	testb	$1, %al
	jne	.LBB84_284
	jmp	.LBB84_340
.LBB84_284:                             # %for.body2081
                                        #   in Loop: Header=BB84_281 Depth=1
	movl	$0, -24(%rbp)
.LBB84_285:                             # %for.cond2082
                                        #   Parent Loop BB84_281 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB84_287 Depth 3
                                        #         Child Loop BB84_289 Depth 4
                                        #         Child Loop BB84_293 Depth 4
                                        #       Child Loop BB84_299 Depth 3
                                        #         Child Loop BB84_303 Depth 4
                                        #         Child Loop BB84_307 Depth 4
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB84_338
# %bb.286:                              # %for.body2086
                                        #   in Loop: Header=BB84_285 Depth=2
	movl	$0, -12(%rbp)
.LBB84_287:                             # %for.cond2087
                                        #   Parent Loop BB84_281 Depth=1
                                        #     Parent Loop BB84_285 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB84_289 Depth 4
                                        #         Child Loop BB84_293 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB84_298
# %bb.288:                              # %for.body2090
                                        #   in Loop: Header=BB84_287 Depth=3
	movl	$0, -16(%rbp)
.LBB84_289:                             # %for.cond2091
                                        #   Parent Loop BB84_281 Depth=1
                                        #     Parent Loop BB84_285 Depth=2
                                        #       Parent Loop BB84_287 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB84_292
# %bb.290:                              # %for.body2094
                                        #   in Loop: Header=BB84_289 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.291:                              # %for.inc2104
                                        #   in Loop: Header=BB84_289 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB84_289
.LBB84_292:                             # %for.end2106
                                        #   in Loop: Header=BB84_287 Depth=3
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB84_293:                             # %for.cond2125
                                        #   Parent Loop BB84_281 Depth=1
                                        #     Parent Loop BB84_285 Depth=2
                                        #       Parent Loop BB84_287 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB84_296
# %bb.294:                              # %for.body2128
                                        #   in Loop: Header=BB84_293 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-120(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.295:                              # %for.inc2154
                                        #   in Loop: Header=BB84_293 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB84_293
.LBB84_296:                             # %for.end2156
                                        #   in Loop: Header=BB84_287 Depth=3
	jmp	.LBB84_297
.LBB84_297:                             # %for.inc2157
                                        #   in Loop: Header=BB84_287 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB84_287
.LBB84_298:                             # %for.end2159
                                        #   in Loop: Header=BB84_285 Depth=2
	movl	$0, -16(%rbp)
.LBB84_299:                             # %for.cond2160
                                        #   Parent Loop BB84_281 Depth=1
                                        #     Parent Loop BB84_285 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB84_303 Depth 4
                                        #         Child Loop BB84_307 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB84_301
# %bb.300:                              # %land.rhs2163
                                        #   in Loop: Header=BB84_299 Depth=3
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB84_301:                             # %land.end2166
                                        #   in Loop: Header=BB84_299 Depth=3
	testb	$1, %al
	jne	.LBB84_302
	jmp	.LBB84_336
.LBB84_302:                             # %for.body2168
                                        #   in Loop: Header=BB84_299 Depth=3
	movl	$0, -12(%rbp)
.LBB84_303:                             # %for.cond2169
                                        #   Parent Loop BB84_281 Depth=1
                                        #     Parent Loop BB84_285 Depth=2
                                        #       Parent Loop BB84_299 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB84_306
# %bb.304:                              # %for.body2172
                                        #   in Loop: Header=BB84_303 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.305:                              # %for.inc2182
                                        #   in Loop: Header=BB84_303 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB84_303
.LBB84_306:                             # %for.end2184
                                        #   in Loop: Header=BB84_299 Depth=3
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB84_307:                             # %for.cond2203
                                        #   Parent Loop BB84_281 Depth=1
                                        #     Parent Loop BB84_285 Depth=2
                                        #       Parent Loop BB84_299 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB84_334
# %bb.308:                              # %for.body2206
                                        #   in Loop: Header=BB84_307 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB84_328
# %bb.309:                              # %if.then2209
                                        #   in Loop: Header=BB84_307 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72688(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-68(%rbp), %rsi
	addl	-96(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-24(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-28(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB84_311
# %bb.310:                              # %cond.true2230
                                        #   in Loop: Header=BB84_307 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB84_312
.LBB84_311:                             # %cond.false2231
                                        #   in Loop: Header=BB84_307 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-68(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB84_312:                             # %cond.end2250
                                        #   in Loop: Header=BB84_307 Depth=4
	cmpq	%rcx, %rax
	jge	.LBB84_314
# %bb.313:                              # %cond.true2254
                                        #   in Loop: Header=BB84_307 Depth=4
	movq	img, %rax
	movslq	72688(%rax), %rax
	jmp	.LBB84_318
.LBB84_314:                             # %cond.false2257
                                        #   in Loop: Header=BB84_307 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-68(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB84_316
# %bb.315:                              # %cond.true2278
                                        #   in Loop: Header=BB84_307 Depth=4
	xorl	%eax, %eax
	jmp	.LBB84_317
.LBB84_316:                             # %cond.false2279
                                        #   in Loop: Header=BB84_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB84_317:                             # %cond.end2298
                                        #   in Loop: Header=BB84_307 Depth=4
.LBB84_318:                             # %cond.end2300
                                        #   in Loop: Header=BB84_307 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movslq	72688(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-68(%rbp), %rsi
	subl	-96(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-24(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-28(%rbp), %edi
	addl	-68(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB84_320
# %bb.319:                              # %cond.true2332
                                        #   in Loop: Header=BB84_307 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB84_321
.LBB84_320:                             # %cond.false2333
                                        #   in Loop: Header=BB84_307 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-68(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-68(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB84_321:                             # %cond.end2352
                                        #   in Loop: Header=BB84_307 Depth=4
	cmpq	%rcx, %rax
	jge	.LBB84_323
# %bb.322:                              # %cond.true2356
                                        #   in Loop: Header=BB84_307 Depth=4
	movq	img, %rax
	movslq	72688(%rax), %rax
	jmp	.LBB84_327
.LBB84_323:                             # %cond.false2359
                                        #   in Loop: Header=BB84_307 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-68(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-68(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB84_325
# %bb.324:                              # %cond.true2380
                                        #   in Loop: Header=BB84_307 Depth=4
	xorl	%eax, %eax
	jmp	.LBB84_326
.LBB84_325:                             # %cond.false2381
                                        #   in Loop: Header=BB84_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB84_326:                             # %cond.end2400
                                        #   in Loop: Header=BB84_307 Depth=4
.LBB84_327:                             # %cond.end2402
                                        #   in Loop: Header=BB84_307 Depth=4
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB84_332
.LBB84_328:                             # %if.else2412
                                        #   in Loop: Header=BB84_307 Depth=4
	cmpl	$0, -108(%rbp)
	je	.LBB84_330
# %bb.329:                              # %if.then2414
                                        #   in Loop: Header=BB84_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB84_331
.LBB84_330:                             # %if.else2439
                                        #   in Loop: Header=BB84_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB84_331:                             # %if.end2468
                                        #   in Loop: Header=BB84_307 Depth=4
	jmp	.LBB84_332
.LBB84_332:                             # %if.end2469
                                        #   in Loop: Header=BB84_307 Depth=4
	jmp	.LBB84_333
.LBB84_333:                             # %for.inc2470
                                        #   in Loop: Header=BB84_307 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB84_307
.LBB84_334:                             # %for.end2472
                                        #   in Loop: Header=BB84_299 Depth=3
	jmp	.LBB84_335
.LBB84_335:                             # %for.inc2473
                                        #   in Loop: Header=BB84_299 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB84_299
.LBB84_336:                             # %for.end2475
                                        #   in Loop: Header=BB84_285 Depth=2
	jmp	.LBB84_337
.LBB84_337:                             # %for.inc2476
                                        #   in Loop: Header=BB84_285 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB84_285
.LBB84_338:                             # %for.end2478
                                        #   in Loop: Header=BB84_281 Depth=1
	jmp	.LBB84_339
.LBB84_339:                             # %for.inc2479
                                        #   in Loop: Header=BB84_281 Depth=1
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB84_281
.LBB84_340:                             # %for.end2481
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB84_353
# %bb.341:                              # %if.then2484
	movl	$0, -12(%rbp)
.LBB84_342:                             # %for.cond2485
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_344 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB84_352
# %bb.343:                              # %for.body2489
                                        #   in Loop: Header=BB84_342 Depth=1
	movl	$0, -16(%rbp)
.LBB84_344:                             # %for.cond2490
                                        #   Parent Loop BB84_342 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB84_350
# %bb.345:                              # %for.body2494
                                        #   in Loop: Header=BB84_344 Depth=2
	cmpl	$0, -108(%rbp)
	je	.LBB84_347
# %bb.346:                              # %if.then2496
                                        #   in Loop: Header=BB84_344 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB84_348
.LBB84_347:                             # %if.else2518
                                        #   in Loop: Header=BB84_344 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB84_348:                             # %if.end2536
                                        #   in Loop: Header=BB84_344 Depth=2
	jmp	.LBB84_349
.LBB84_349:                             # %for.inc2537
                                        #   in Loop: Header=BB84_344 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB84_344
.LBB84_350:                             # %for.end2539
                                        #   in Loop: Header=BB84_342 Depth=1
	jmp	.LBB84_351
.LBB84_351:                             # %for.inc2540
                                        #   in Loop: Header=BB84_342 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB84_342
.LBB84_352:                             # %for.end2542
	jmp	.LBB84_353
.LBB84_353:                             # %if.end2543
	movl	-136(%rbp), %ebx
	cmpl	$1379127540, -380(%rbp) # imm = 0x5233D0F4
	jne	.LBB84_355
.LBB84_354:
	movl	%ebx, %eax
	addq	$424, %rsp              # imm = 0x1A8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB84_355:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB84_354
.Lfunc_end84:
	.size	dct_chroma.75, .Lfunc_end84-dct_chroma.75
	.cfi_endproc
                                        # -- End function
	.globl	dct_luma_16x16.76       # -- Begin function dct_luma_16x16.76
	.p2align	4, 0x90
	.type	dct_luma_16x16.76,@function
dct_luma_16x16.76:                      # @dct_luma_16x16.76
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$2280, %rsp             # imm = 0x8E8
	.cfi_offset %rbx, -24
	xorl	%eax, %eax
	movl	$1408537778, -132(%rbp) # imm = 0x53F494B2
	movl	%edi, -104(%rbp)
	movl	$0, -112(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -128(%rbp)
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -144(%rbp)
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -240(%rbp)
	movq	-128(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	img, %rdx
	addl	72668(%rdx), %ecx
	cmpl	$0, %ecx
	jne	.LBB85_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%al
.LBB85_2:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -64(%rbp)
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -100(%rbp)
	movl	-64(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -108(%rbp)
	movl	$0, -12(%rbp)
.LBB85_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_5 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB85_13
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB85_3 Depth=1
	movl	$0, -16(%rbp)
.LBB85_5:                               # %for.cond16
                                        #   Parent Loop BB85_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB85_11
# %bb.6:                                # %for.body18
                                        #   in Loop: Header=BB85_5 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB85_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB85_5 Depth=2
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB85_9
.LBB85_8:                               # %if.else
                                        #   in Loop: Header=BB85_5 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB85_9:                               # %if.end
                                        #   in Loop: Header=BB85_5 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rdi
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	shlq	$6, %rax
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movl	%ecx, (%rdi,%rax,4)
# %bb.10:                               # %for.inc
                                        #   in Loop: Header=BB85_5 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB85_5
.LBB85_11:                              # %for.end
                                        #   in Loop: Header=BB85_3 Depth=1
	jmp	.LBB85_12
.LBB85_12:                              # %for.inc61
                                        #   in Loop: Header=BB85_3 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB85_3
.LBB85_13:                              # %for.end63
	movl	$0, -20(%rbp)
.LBB85_14:                              # %for.cond64
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_18 Depth 2
                                        #       Child Loop BB85_20 Depth 3
                                        #         Child Loop BB85_22 Depth 4
                                        #       Child Loop BB85_28 Depth 3
                                        #         Child Loop BB85_30 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -20(%rbp)
	jge	.LBB85_16
# %bb.15:                               # %land.rhs67
                                        #   in Loop: Header=BB85_14 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB85_16:                              # %land.end69
                                        #   in Loop: Header=BB85_14 Depth=1
	testb	$1, %al
	jne	.LBB85_17
	jmp	.LBB85_39
.LBB85_17:                              # %for.body71
                                        #   in Loop: Header=BB85_14 Depth=1
	movl	$0, -24(%rbp)
.LBB85_18:                              # %for.cond72
                                        #   Parent Loop BB85_14 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_20 Depth 3
                                        #         Child Loop BB85_22 Depth 4
                                        #       Child Loop BB85_28 Depth 3
                                        #         Child Loop BB85_30 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB85_37
# %bb.19:                               # %for.body75
                                        #   in Loop: Header=BB85_18 Depth=2
	movl	$0, -12(%rbp)
.LBB85_20:                              # %for.cond76
                                        #   Parent Loop BB85_14 Depth=1
                                        #     Parent Loop BB85_18 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB85_22 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB85_27
# %bb.21:                               # %for.body79
                                        #   in Loop: Header=BB85_20 Depth=3
	movl	$0, -16(%rbp)
.LBB85_22:                              # %for.cond80
                                        #   Parent Loop BB85_14 Depth=1
                                        #     Parent Loop BB85_18 Depth=2
                                        #       Parent Loop BB85_20 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB85_25
# %bb.23:                               # %for.body83
                                        #   in Loop: Header=BB85_22 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	movl	%ecx, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-56(%rbp), %rax
	movl	%ecx, -48(%rbp,%rax,4)
# %bb.24:                               # %for.inc123
                                        #   in Loop: Header=BB85_22 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB85_22
.LBB85_25:                              # %for.end125
                                        #   in Loop: Header=BB85_20 Depth=3
	leaq	-1264(%rbp), %rax
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movq	%rax, %rdx
	addq	$256, %rdx              # imm = 0x100
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	addq	$768, %rax              # imm = 0x300
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.26:                               # %for.inc167
                                        #   in Loop: Header=BB85_20 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB85_20
.LBB85_27:                              # %for.end169
                                        #   in Loop: Header=BB85_18 Depth=2
	movl	$0, -16(%rbp)
.LBB85_28:                              # %for.cond170
                                        #   Parent Loop BB85_14 Depth=1
                                        #     Parent Loop BB85_18 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB85_30 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB85_35
# %bb.29:                               # %for.body173
                                        #   in Loop: Header=BB85_28 Depth=3
	movl	$0, -12(%rbp)
.LBB85_30:                              # %for.cond174
                                        #   Parent Loop BB85_14 Depth=1
                                        #     Parent Loop BB85_18 Depth=2
                                        #       Parent Loop BB85_28 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB85_33
# %bb.31:                               # %for.body177
                                        #   in Loop: Header=BB85_30 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-12(%rbp), %rdx
	movl	%ecx, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-52(%rbp), %rax
	movl	%ecx, -48(%rbp,%rax,4)
# %bb.32:                               # %for.inc217
                                        #   in Loop: Header=BB85_30 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB85_30
.LBB85_33:                              # %for.end219
                                        #   in Loop: Header=BB85_28 Depth=3
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, 32(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, 16(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, 48(%rax,%rdx,4)
# %bb.34:                               # %for.inc262
                                        #   in Loop: Header=BB85_28 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB85_28
.LBB85_35:                              # %for.end264
                                        #   in Loop: Header=BB85_18 Depth=2
	jmp	.LBB85_36
.LBB85_36:                              # %for.inc265
                                        #   in Loop: Header=BB85_18 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_18
.LBB85_37:                              # %for.end267
                                        #   in Loop: Header=BB85_14 Depth=1
	jmp	.LBB85_38
.LBB85_38:                              # %for.inc268
                                        #   in Loop: Header=BB85_14 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_14
.LBB85_39:                              # %for.end270
	movl	$0, -12(%rbp)
.LBB85_40:                              # %for.cond271
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_42 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB85_47
# %bb.41:                               # %for.body274
                                        #   in Loop: Header=BB85_40 Depth=1
	movl	$0, -16(%rbp)
.LBB85_42:                              # %for.cond275
                                        #   Parent Loop BB85_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB85_45
# %bb.43:                               # %for.body278
                                        #   in Loop: Header=BB85_42 Depth=2
	leaq	-1264(%rbp), %rax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.44:                               # %for.inc289
                                        #   in Loop: Header=BB85_42 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB85_42
.LBB85_45:                              # %for.end291
                                        #   in Loop: Header=BB85_40 Depth=1
	jmp	.LBB85_46
.LBB85_46:                              # %for.inc292
                                        #   in Loop: Header=BB85_40 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB85_40
.LBB85_47:                              # %for.end294
	movl	$0, -12(%rbp)
.LBB85_48:                              # %for.cond295
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_52 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB85_50
# %bb.49:                               # %land.rhs298
                                        #   in Loop: Header=BB85_48 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB85_50:                              # %land.end301
                                        #   in Loop: Header=BB85_48 Depth=1
	testb	$1, %al
	jne	.LBB85_51
	jmp	.LBB85_57
.LBB85_51:                              # %for.body303
                                        #   in Loop: Header=BB85_48 Depth=1
	movl	$0, -16(%rbp)
.LBB85_52:                              # %for.cond304
                                        #   Parent Loop BB85_48 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB85_55
# %bb.53:                               # %for.body307
                                        #   in Loop: Header=BB85_52 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-56(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-56(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-56(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.54:                               # %for.inc331
                                        #   in Loop: Header=BB85_52 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB85_52
.LBB85_55:                              # %for.end333
                                        #   in Loop: Header=BB85_48 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -224(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -192(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	addl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -208(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.56:                               # %for.inc358
                                        #   in Loop: Header=BB85_48 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB85_48
.LBB85_57:                              # %for.end360
	movl	$0, -16(%rbp)
.LBB85_58:                              # %for.cond361
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_62 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB85_60
# %bb.59:                               # %land.rhs364
                                        #   in Loop: Header=BB85_58 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB85_60:                              # %land.end367
                                        #   in Loop: Header=BB85_58 Depth=1
	testb	$1, %al
	jne	.LBB85_61
	jmp	.LBB85_67
.LBB85_61:                              # %for.body369
                                        #   in Loop: Header=BB85_58 Depth=1
	movl	$0, -12(%rbp)
.LBB85_62:                              # %for.cond370
                                        #   Parent Loop BB85_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB85_65
# %bb.63:                               # %for.body373
                                        #   in Loop: Header=BB85_62 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.64:                               # %for.inc397
                                        #   in Loop: Header=BB85_62 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB85_62
.LBB85_65:                              # %for.end399
                                        #   in Loop: Header=BB85_58 Depth=1
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-224(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-36(%rbp), %ecx
	addl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.66:                               # %for.inc427
                                        #   in Loop: Header=BB85_58 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB85_58
.LBB85_67:                              # %for.end429
	movl	$-1, -80(%rbp)
	movl	$0, -76(%rbp)
	movl	$0, -60(%rbp)
.LBB85_68:                              # %for.cond430
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -60(%rbp)
	jge	.LBB85_88
# %bb.69:                               # %for.body433
                                        #   in Loop: Header=BB85_68 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB85_72
# %bb.70:                               # %lor.lhs.false
                                        #   in Loop: Header=BB85_68 Depth=1
	cmpl	$0, mb_adaptive
	je	.LBB85_73
# %bb.71:                               # %land.lhs.true
                                        #   in Loop: Header=BB85_68 Depth=1
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB85_73
.LBB85_72:                              # %if.then437
                                        #   in Loop: Header=BB85_68 Depth=1
	movslq	-60(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-60(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB85_74
.LBB85_73:                              # %if.else446
                                        #   in Loop: Header=BB85_68 Depth=1
	movslq	-60(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-60(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB85_74:                              # %if.end455
                                        #   in Loop: Header=BB85_68 Depth=1
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB85_76
# %bb.75:                               # %if.then458
                                        #   in Loop: Header=BB85_68 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -68(%rbp)
	jmp	.LBB85_77
.LBB85_76:                              # %if.else463
                                        #   in Loop: Header=BB85_68 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-64(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-108(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -68(%rbp)
.LBB85_77:                              # %if.end481
                                        #   in Loop: Header=BB85_68 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB85_82
# %bb.78:                               # %land.lhs.true484
                                        #   in Loop: Header=BB85_68 Depth=1
	movq	img, %rax
	cmpl	$10, 40(%rax)
	jge	.LBB85_82
# %bb.79:                               # %if.then488
                                        #   in Loop: Header=BB85_68 Depth=1
	cmpl	$2063, -68(%rbp)        # imm = 0x80F
	jle	.LBB85_81
# %bb.80:                               # %if.then491
                                        #   in Loop: Header=BB85_68 Depth=1
	movl	$2063, -68(%rbp)        # imm = 0x80F
.LBB85_81:                              # %if.end492
                                        #   in Loop: Header=BB85_68 Depth=1
	jmp	.LBB85_82
.LBB85_82:                              # %if.end493
                                        #   in Loop: Header=BB85_68 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB85_84
# %bb.83:                               # %if.then496
                                        #   in Loop: Header=BB85_68 Depth=1
	movl	-68(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-144(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	movq	-240(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	movl	$-1, -80(%rbp)
.LBB85_84:                              # %if.end507
                                        #   in Loop: Header=BB85_68 Depth=1
	cmpl	$0, -72(%rbp)
	jne	.LBB85_86
# %bb.85:                               # %if.then509
                                        #   in Loop: Header=BB85_68 Depth=1
	movl	-68(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB85_86:                              # %if.end519
                                        #   in Loop: Header=BB85_68 Depth=1
	jmp	.LBB85_87
.LBB85_87:                              # %for.inc520
                                        #   in Loop: Header=BB85_68 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB85_68
.LBB85_88:                              # %for.end522
	movq	-144(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB85_89:                              # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_93 Depth 2
                                        #     Child Loop BB85_97 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB85_91
# %bb.90:                               # %land.rhs528
                                        #   in Loop: Header=BB85_89 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB85_91:                              # %land.end531
                                        #   in Loop: Header=BB85_89 Depth=1
	testb	$1, %al
	jne	.LBB85_92
	jmp	.LBB85_102
.LBB85_92:                              # %for.body533
                                        #   in Loop: Header=BB85_89 Depth=1
	movl	$0, -16(%rbp)
.LBB85_93:                              # %for.cond534
                                        #   Parent Loop BB85_89 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB85_96
# %bb.94:                               # %for.body537
                                        #   in Loop: Header=BB85_93 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.95:                               # %for.inc544
                                        #   in Loop: Header=BB85_93 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB85_93
.LBB85_96:                              # %for.end546
                                        #   in Loop: Header=BB85_89 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB85_97:                              # %for.cond563
                                        #   Parent Loop BB85_89 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB85_100
# %bb.98:                               # %for.body566
                                        #   in Loop: Header=BB85_97 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-56(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-56(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movslq	-56(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.99:                               # %for.inc586
                                        #   in Loop: Header=BB85_97 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB85_97
.LBB85_100:                             # %for.end588
                                        #   in Loop: Header=BB85_89 Depth=1
	jmp	.LBB85_101
.LBB85_101:                             # %for.inc589
                                        #   in Loop: Header=BB85_89 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB85_89
.LBB85_102:                             # %for.end591
	movl	$0, -16(%rbp)
.LBB85_103:                             # %for.cond592
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_107 Depth 2
                                        #     Child Loop BB85_111 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB85_105
# %bb.104:                              # %land.rhs595
                                        #   in Loop: Header=BB85_103 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB85_105:                             # %land.end598
                                        #   in Loop: Header=BB85_103 Depth=1
	testb	$1, %al
	jne	.LBB85_106
	jmp	.LBB85_119
.LBB85_106:                             # %for.body600
                                        #   in Loop: Header=BB85_103 Depth=1
	movl	$0, -12(%rbp)
.LBB85_107:                             # %for.cond601
                                        #   Parent Loop BB85_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB85_110
# %bb.108:                              # %for.body604
                                        #   in Loop: Header=BB85_107 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.109:                              # %for.inc611
                                        #   in Loop: Header=BB85_107 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB85_107
.LBB85_110:                             # %for.end613
                                        #   in Loop: Header=BB85_103 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB85_111:                             # %for.cond630
                                        #   Parent Loop BB85_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB85_117
# %bb.112:                              # %for.body633
                                        #   in Loop: Header=BB85_111 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	cmpl	$6, -64(%rbp)
	jge	.LBB85_114
# %bb.113:                              # %if.then637
                                        #   in Loop: Header=BB85_111 Depth=2
	leaq	-1264(%rbp), %r8
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %esi
	movslq	-52(%rbp), %rax
	addl	-96(%rbp,%rax,4), %esi
	movslq	-100(%rbp), %rax
	shlq	$6, %rax
	movabsq	$InvLevelScale4x4Luma_Intra, %rdi
	movq	%rdi, %rcx
	addq	%rax, %rcx
	imull	(%rcx), %esi
	movl	$5, %eax
	movl	$5, %ecx
	subl	-64(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r9d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %esi
	movl	$6, %edx
	movl	$6, %ecx
	subl	-64(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %esi
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movq	%r8, %rbx
	addq	%rcx, %rbx
	movslq	-12(%rbp), %rcx
	movl	%esi, (%rbx,%rcx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %esi
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %esi
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdi
	imull	(%rdi), %esi
	subl	-64(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r9d
	addl	%r9d, %esi
	subl	-64(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %esi
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r8
	movslq	-52(%rbp), %rax
	movl	%esi, (%r8,%rax,4)
	jmp	.LBB85_115
.LBB85_114:                             # %if.else680
                                        #   in Loop: Header=BB85_111 Depth=2
	leaq	-1264(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-52(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %edx
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rsi
	movq	%rsi, %rdi
	addq	%rcx, %rdi
	imull	(%rdi), %edx
	movl	-64(%rbp), %ecx
	subl	$6, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdi
	addq	%rcx, %rdi
	movslq	-12(%rbp), %rcx
	movl	%edx, (%rdi,%rcx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-64(%rbp), %ecx
	subl	$6, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-52(%rbp), %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB85_115:                             # %if.end717
                                        #   in Loop: Header=BB85_111 Depth=2
	jmp	.LBB85_116
.LBB85_116:                             # %for.inc718
                                        #   in Loop: Header=BB85_111 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB85_111
.LBB85_117:                             # %for.end720
                                        #   in Loop: Header=BB85_103 Depth=1
	jmp	.LBB85_118
.LBB85_118:                             # %for.inc721
                                        #   in Loop: Header=BB85_103 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB85_103
.LBB85_119:                             # %for.end723
	movl	$0, -20(%rbp)
.LBB85_120:                             # %for.cond724
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_122 Depth 2
                                        #       Child Loop BB85_124 Depth 3
                                        #       Child Loop BB85_143 Depth 3
                                        #         Child Loop BB85_147 Depth 4
                                        #         Child Loop BB85_151 Depth 4
                                        #       Child Loop BB85_157 Depth 3
                                        #         Child Loop BB85_161 Depth 4
                                        #         Child Loop BB85_165 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB85_174
# %bb.121:                              # %for.body727
                                        #   in Loop: Header=BB85_120 Depth=1
	movl	$0, -24(%rbp)
.LBB85_122:                             # %for.cond728
                                        #   Parent Loop BB85_120 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_124 Depth 3
                                        #       Child Loop BB85_143 Depth 3
                                        #         Child Loop BB85_147 Depth 4
                                        #         Child Loop BB85_151 Depth 4
                                        #       Child Loop BB85_157 Depth 3
                                        #         Child Loop BB85_161 Depth 4
                                        #         Child Loop BB85_165 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB85_172
# %bb.123:                              # %for.body731
                                        #   in Loop: Header=BB85_122 Depth=2
	movl	$-1, -80(%rbp)
	movl	$0, -76(%rbp)
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -120(%rbp)
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -116(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -152(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -232(%rbp)
	movl	$1, -60(%rbp)
.LBB85_124:                             # %for.cond751
                                        #   Parent Loop BB85_120 Depth=1
                                        #     Parent Loop BB85_122 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -60(%rbp)
	jge	.LBB85_142
# %bb.125:                              # %for.body754
                                        #   in Loop: Header=BB85_124 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB85_128
# %bb.126:                              # %lor.lhs.false757
                                        #   in Loop: Header=BB85_124 Depth=3
	cmpl	$0, mb_adaptive
	je	.LBB85_129
# %bb.127:                              # %land.lhs.true759
                                        #   in Loop: Header=BB85_124 Depth=3
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB85_129
.LBB85_128:                             # %if.then762
                                        #   in Loop: Header=BB85_124 Depth=3
	movslq	-60(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-60(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB85_130
.LBB85_129:                             # %if.else771
                                        #   in Loop: Header=BB85_124 Depth=3
	movslq	-60(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-60(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB85_130:                             # %if.end780
                                        #   in Loop: Header=BB85_124 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB85_132
# %bb.131:                              # %if.then783
                                        #   in Loop: Header=BB85_124 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -68(%rbp)
	jmp	.LBB85_133
.LBB85_132:                             # %if.else793
                                        #   in Loop: Header=BB85_124 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-64(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -68(%rbp)
.LBB85_133:                             # %if.end818
                                        #   in Loop: Header=BB85_124 Depth=3
	cmpl	$0, -68(%rbp)
	je	.LBB85_135
# %bb.134:                              # %if.then821
                                        #   in Loop: Header=BB85_124 Depth=3
	movl	$15, -112(%rbp)
	movl	-68(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-152(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	movq	-232(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	movl	$-1, -80(%rbp)
.LBB85_135:                             # %if.end836
                                        #   in Loop: Header=BB85_124 Depth=3
	cmpl	$0, -72(%rbp)
	jne	.LBB85_140
# %bb.136:                              # %if.then838
                                        #   in Loop: Header=BB85_124 Depth=3
	movl	-68(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movl	%eax, -68(%rbp)
	cmpl	$4, -64(%rbp)
	jge	.LBB85_138
# %bb.137:                              # %if.then850
                                        #   in Loop: Header=BB85_124 Depth=3
	movl	-68(%rbp), %eax
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-64(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-64(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB85_139
.LBB85_138:                             # %if.else871
                                        #   in Loop: Header=BB85_124 Depth=3
	movl	-68(%rbp), %eax
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-64(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB85_139:                             # %if.end889
                                        #   in Loop: Header=BB85_124 Depth=3
	jmp	.LBB85_140
.LBB85_140:                             # %if.end890
                                        #   in Loop: Header=BB85_124 Depth=3
	jmp	.LBB85_141
.LBB85_141:                             # %for.inc891
                                        #   in Loop: Header=BB85_124 Depth=3
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB85_124
.LBB85_142:                             # %for.end893
                                        #   in Loop: Header=BB85_122 Depth=2
	movq	-152(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB85_143:                             # %for.cond896
                                        #   Parent Loop BB85_120 Depth=1
                                        #     Parent Loop BB85_122 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB85_147 Depth 4
                                        #         Child Loop BB85_151 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB85_145
# %bb.144:                              # %land.rhs899
                                        #   in Loop: Header=BB85_143 Depth=3
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB85_145:                             # %land.end902
                                        #   in Loop: Header=BB85_143 Depth=3
	testb	$1, %al
	jne	.LBB85_146
	jmp	.LBB85_156
.LBB85_146:                             # %for.body904
                                        #   in Loop: Header=BB85_143 Depth=3
	movl	$0, -16(%rbp)
.LBB85_147:                             # %for.cond905
                                        #   Parent Loop BB85_120 Depth=1
                                        #     Parent Loop BB85_122 Depth=2
                                        #       Parent Loop BB85_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB85_150
# %bb.148:                              # %for.body908
                                        #   in Loop: Header=BB85_147 Depth=4
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.149:                              # %for.inc919
                                        #   in Loop: Header=BB85_147 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB85_147
.LBB85_150:                             # %for.end921
                                        #   in Loop: Header=BB85_143 Depth=3
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB85_151:                             # %for.cond940
                                        #   Parent Loop BB85_120 Depth=1
                                        #     Parent Loop BB85_122 Depth=2
                                        #       Parent Loop BB85_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB85_154
# %bb.152:                              # %for.body943
                                        #   in Loop: Header=BB85_151 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ecx
	movslq	-56(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movslq	-16(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.153:                              # %for.inc971
                                        #   in Loop: Header=BB85_151 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB85_151
.LBB85_154:                             # %for.end973
                                        #   in Loop: Header=BB85_143 Depth=3
	jmp	.LBB85_155
.LBB85_155:                             # %for.inc974
                                        #   in Loop: Header=BB85_143 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB85_143
.LBB85_156:                             # %for.end976
                                        #   in Loop: Header=BB85_122 Depth=2
	movl	$0, -16(%rbp)
.LBB85_157:                             # %for.cond977
                                        #   Parent Loop BB85_120 Depth=1
                                        #     Parent Loop BB85_122 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB85_161 Depth 4
                                        #         Child Loop BB85_165 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB85_159
# %bb.158:                              # %land.rhs980
                                        #   in Loop: Header=BB85_157 Depth=3
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB85_159:                             # %land.end983
                                        #   in Loop: Header=BB85_157 Depth=3
	testb	$1, %al
	jne	.LBB85_160
	jmp	.LBB85_170
.LBB85_160:                             # %for.body985
                                        #   in Loop: Header=BB85_157 Depth=3
	movl	$0, -12(%rbp)
.LBB85_161:                             # %for.cond986
                                        #   Parent Loop BB85_120 Depth=1
                                        #     Parent Loop BB85_122 Depth=2
                                        #       Parent Loop BB85_157 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB85_164
# %bb.162:                              # %for.body989
                                        #   in Loop: Header=BB85_161 Depth=4
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.163:                              # %for.inc1000
                                        #   in Loop: Header=BB85_161 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB85_161
.LBB85_164:                             # %for.end1002
                                        #   in Loop: Header=BB85_157 Depth=3
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB85_165:                             # %for.cond1021
                                        #   Parent Loop BB85_120 Depth=1
                                        #     Parent Loop BB85_122 Depth=2
                                        #       Parent Loop BB85_157 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB85_168
# %bb.166:                              # %for.body1024
                                        #   in Loop: Header=BB85_165 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ecx
	movslq	-52(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.167:                              # %for.inc1052
                                        #   in Loop: Header=BB85_165 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB85_165
.LBB85_168:                             # %for.end1054
                                        #   in Loop: Header=BB85_157 Depth=3
	jmp	.LBB85_169
.LBB85_169:                             # %for.inc1055
                                        #   in Loop: Header=BB85_157 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB85_157
.LBB85_170:                             # %for.end1057
                                        #   in Loop: Header=BB85_122 Depth=2
	jmp	.LBB85_171
.LBB85_171:                             # %for.inc1058
                                        #   in Loop: Header=BB85_122 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_122
.LBB85_172:                             # %for.end1060
                                        #   in Loop: Header=BB85_120 Depth=1
	jmp	.LBB85_173
.LBB85_173:                             # %for.inc1061
                                        #   in Loop: Header=BB85_120 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_120
.LBB85_174:                             # %for.end1063
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB85_184
# %bb.175:                              # %if.then1066
	movl	$0, -12(%rbp)
.LBB85_176:                             # %for.cond1067
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_178 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB85_183
# %bb.177:                              # %for.body1070
                                        #   in Loop: Header=BB85_176 Depth=1
	movl	$0, -16(%rbp)
.LBB85_178:                             # %for.cond1071
                                        #   Parent Loop BB85_176 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB85_181
# %bb.179:                              # %for.body1074
                                        #   in Loop: Header=BB85_178 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.180:                              # %for.inc1091
                                        #   in Loop: Header=BB85_178 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB85_178
.LBB85_181:                             # %for.end1093
                                        #   in Loop: Header=BB85_176 Depth=1
	jmp	.LBB85_182
.LBB85_182:                             # %for.inc1094
                                        #   in Loop: Header=BB85_176 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB85_176
.LBB85_183:                             # %for.end1096
	jmp	.LBB85_196
.LBB85_184:                             # %if.else1097
	movl	$0, -12(%rbp)
.LBB85_185:                             # %for.cond1098
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_187 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB85_195
# %bb.186:                              # %for.body1101
                                        #   in Loop: Header=BB85_185 Depth=1
	movl	$0, -16(%rbp)
.LBB85_187:                             # %for.cond1102
                                        #   Parent Loop BB85_185 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB85_193
# %bb.188:                              # %for.body1105
                                        #   in Loop: Header=BB85_187 Depth=2
	cmpl	$0, -72(%rbp)
	je	.LBB85_190
# %bb.189:                              # %if.then1107
                                        #   in Loop: Header=BB85_187 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB85_191
.LBB85_190:                             # %if.else1125
                                        #   in Loop: Header=BB85_187 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB85_191:                             # %if.end1145
                                        #   in Loop: Header=BB85_187 Depth=2
	jmp	.LBB85_192
.LBB85_192:                             # %for.inc1146
                                        #   in Loop: Header=BB85_187 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB85_187
.LBB85_193:                             # %for.end1148
                                        #   in Loop: Header=BB85_185 Depth=1
	jmp	.LBB85_194
.LBB85_194:                             # %for.inc1149
                                        #   in Loop: Header=BB85_185 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB85_185
.LBB85_195:                             # %for.end1151
	jmp	.LBB85_196
.LBB85_196:                             # %if.end1152
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB85_218
# %bb.197:                              # %if.then1155
	movl	$0, -12(%rbp)
.LBB85_198:                             # %for.cond1156
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_200 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB85_217
# %bb.199:                              # %for.body1159
                                        #   in Loop: Header=BB85_198 Depth=1
	movl	$0, -16(%rbp)
.LBB85_200:                             # %for.cond1160
                                        #   Parent Loop BB85_198 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB85_215
# %bb.201:                              # %for.body1163
                                        #   in Loop: Header=BB85_200 Depth=2
	cmpl	$0, -72(%rbp)
	je	.LBB85_203
# %bb.202:                              # %if.then1165
                                        #   in Loop: Header=BB85_200 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB85_213
.LBB85_203:                             # %if.else1186
                                        #   in Loop: Header=BB85_200 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	leaq	-2288(%rbp), %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movslq	(%rsi,%rdx,4), %rdx
	movq	img, %rsi
	addq	$4792, %rsi             # imm = 0x12B8
	movslq	-104(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-12(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB85_205
# %bb.204:                              # %cond.true
                                        #   in Loop: Header=BB85_200 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB85_206
.LBB85_205:                             # %cond.false
                                        #   in Loop: Header=BB85_200 Depth=2
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movslq	(%rdx,%rcx,4), %rcx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-104(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB85_206:                             # %cond.end
                                        #   in Loop: Header=BB85_200 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB85_208
# %bb.207:                              # %cond.true1226
                                        #   in Loop: Header=BB85_200 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB85_212
.LBB85_208:                             # %cond.false1229
                                        #   in Loop: Header=BB85_200 Depth=2
	xorl	%eax, %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movslq	(%rdx,%rcx,4), %rcx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-104(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB85_210
# %bb.209:                              # %cond.true1249
                                        #   in Loop: Header=BB85_200 Depth=2
	xorl	%eax, %eax
	jmp	.LBB85_211
.LBB85_210:                             # %cond.false1250
                                        #   in Loop: Header=BB85_200 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movslq	(%rcx,%rax,4), %rax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB85_211:                             # %cond.end1268
                                        #   in Loop: Header=BB85_200 Depth=2
.LBB85_212:                             # %cond.end1270
                                        #   in Loop: Header=BB85_200 Depth=2
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB85_213:                             # %if.end1282
                                        #   in Loop: Header=BB85_200 Depth=2
	jmp	.LBB85_214
.LBB85_214:                             # %for.inc1283
                                        #   in Loop: Header=BB85_200 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB85_200
.LBB85_215:                             # %for.end1285
                                        #   in Loop: Header=BB85_198 Depth=1
	jmp	.LBB85_216
.LBB85_216:                             # %for.inc1286
                                        #   in Loop: Header=BB85_198 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB85_198
.LBB85_217:                             # %for.end1288
	jmp	.LBB85_218
.LBB85_218:                             # %if.end1289
	movl	-112(%rbp), %ebx
	cmpl	$1408537778, -132(%rbp) # imm = 0x53F494B2
	jne	.LBB85_220
.LBB85_219:
	movl	%ebx, %eax
	addq	$2280, %rsp             # imm = 0x8E8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB85_220:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB85_219
.Lfunc_end85:
	.size	dct_luma_16x16.76, .Lfunc_end85-dct_luma_16x16.76
	.cfi_endproc
                                        # -- End function
	.globl	dct_luma_16x16.77       # -- Begin function dct_luma_16x16.77
	.p2align	4, 0x90
	.type	dct_luma_16x16.77,@function
dct_luma_16x16.77:                      # @dct_luma_16x16.77
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$2280, %rsp             # imm = 0x8E8
	.cfi_offset %rbx, -24
	xorl	%eax, %eax
	movl	$389604209, -132(%rbp)  # imm = 0x1738E371
	movl	%edi, -104(%rbp)
	movl	$0, -120(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -128(%rbp)
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -144(%rbp)
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -240(%rbp)
	movq	-128(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	img, %rdx
	addl	72668(%rdx), %ecx
	cmpl	$0, %ecx
	jne	.LBB86_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%al
.LBB86_2:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -68(%rbp)
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -100(%rbp)
	movl	-68(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -112(%rbp)
	movl	$0, -12(%rbp)
.LBB86_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_5 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB86_13
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB86_3 Depth=1
	movl	$0, -16(%rbp)
.LBB86_5:                               # %for.cond16
                                        #   Parent Loop BB86_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB86_11
# %bb.6:                                # %for.body18
                                        #   in Loop: Header=BB86_5 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB86_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB86_5 Depth=2
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB86_9
.LBB86_8:                               # %if.else
                                        #   in Loop: Header=BB86_5 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB86_9:                               # %if.end
                                        #   in Loop: Header=BB86_5 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rdi
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	shlq	$6, %rax
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movl	%ecx, (%rdi,%rax,4)
# %bb.10:                               # %for.inc
                                        #   in Loop: Header=BB86_5 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB86_5
.LBB86_11:                              # %for.end
                                        #   in Loop: Header=BB86_3 Depth=1
	jmp	.LBB86_12
.LBB86_12:                              # %for.inc61
                                        #   in Loop: Header=BB86_3 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB86_3
.LBB86_13:                              # %for.end63
	movl	$0, -24(%rbp)
.LBB86_14:                              # %for.cond64
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_18 Depth 2
                                        #       Child Loop BB86_20 Depth 3
                                        #         Child Loop BB86_22 Depth 4
                                        #       Child Loop BB86_28 Depth 3
                                        #         Child Loop BB86_30 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -24(%rbp)
	jge	.LBB86_16
# %bb.15:                               # %land.rhs67
                                        #   in Loop: Header=BB86_14 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB86_16:                              # %land.end69
                                        #   in Loop: Header=BB86_14 Depth=1
	testb	$1, %al
	jne	.LBB86_17
	jmp	.LBB86_39
.LBB86_17:                              # %for.body71
                                        #   in Loop: Header=BB86_14 Depth=1
	movl	$0, -20(%rbp)
.LBB86_18:                              # %for.cond72
                                        #   Parent Loop BB86_14 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB86_20 Depth 3
                                        #         Child Loop BB86_22 Depth 4
                                        #       Child Loop BB86_28 Depth 3
                                        #         Child Loop BB86_30 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB86_37
# %bb.19:                               # %for.body75
                                        #   in Loop: Header=BB86_18 Depth=2
	movl	$0, -12(%rbp)
.LBB86_20:                              # %for.cond76
                                        #   Parent Loop BB86_14 Depth=1
                                        #     Parent Loop BB86_18 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB86_22 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB86_27
# %bb.21:                               # %for.body79
                                        #   in Loop: Header=BB86_20 Depth=3
	movl	$0, -16(%rbp)
.LBB86_22:                              # %for.cond80
                                        #   Parent Loop BB86_14 Depth=1
                                        #     Parent Loop BB86_18 Depth=2
                                        #       Parent Loop BB86_20 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB86_25
# %bb.23:                               # %for.body83
                                        #   in Loop: Header=BB86_22 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	movl	%ecx, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-56(%rbp), %rax
	movl	%ecx, -48(%rbp,%rax,4)
# %bb.24:                               # %for.inc123
                                        #   in Loop: Header=BB86_22 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB86_22
.LBB86_25:                              # %for.end125
                                        #   in Loop: Header=BB86_20 Depth=3
	leaq	-1264(%rbp), %rax
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movq	%rax, %rdx
	addq	$256, %rdx              # imm = 0x100
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	addq	$768, %rax              # imm = 0x300
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.26:                               # %for.inc167
                                        #   in Loop: Header=BB86_20 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB86_20
.LBB86_27:                              # %for.end169
                                        #   in Loop: Header=BB86_18 Depth=2
	movl	$0, -16(%rbp)
.LBB86_28:                              # %for.cond170
                                        #   Parent Loop BB86_14 Depth=1
                                        #     Parent Loop BB86_18 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB86_30 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB86_35
# %bb.29:                               # %for.body173
                                        #   in Loop: Header=BB86_28 Depth=3
	movl	$0, -12(%rbp)
.LBB86_30:                              # %for.cond174
                                        #   Parent Loop BB86_14 Depth=1
                                        #     Parent Loop BB86_18 Depth=2
                                        #       Parent Loop BB86_28 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB86_33
# %bb.31:                               # %for.body177
                                        #   in Loop: Header=BB86_30 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-12(%rbp), %rdx
	movl	%ecx, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-52(%rbp), %rax
	movl	%ecx, -48(%rbp,%rax,4)
# %bb.32:                               # %for.inc217
                                        #   in Loop: Header=BB86_30 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB86_30
.LBB86_33:                              # %for.end219
                                        #   in Loop: Header=BB86_28 Depth=3
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, 32(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, 16(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, 48(%rax,%rdx,4)
# %bb.34:                               # %for.inc262
                                        #   in Loop: Header=BB86_28 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB86_28
.LBB86_35:                              # %for.end264
                                        #   in Loop: Header=BB86_18 Depth=2
	jmp	.LBB86_36
.LBB86_36:                              # %for.inc265
                                        #   in Loop: Header=BB86_18 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB86_18
.LBB86_37:                              # %for.end267
                                        #   in Loop: Header=BB86_14 Depth=1
	jmp	.LBB86_38
.LBB86_38:                              # %for.inc268
                                        #   in Loop: Header=BB86_14 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB86_14
.LBB86_39:                              # %for.end270
	movl	$0, -12(%rbp)
.LBB86_40:                              # %for.cond271
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_42 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB86_47
# %bb.41:                               # %for.body274
                                        #   in Loop: Header=BB86_40 Depth=1
	movl	$0, -16(%rbp)
.LBB86_42:                              # %for.cond275
                                        #   Parent Loop BB86_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB86_45
# %bb.43:                               # %for.body278
                                        #   in Loop: Header=BB86_42 Depth=2
	leaq	-1264(%rbp), %rax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.44:                               # %for.inc289
                                        #   in Loop: Header=BB86_42 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB86_42
.LBB86_45:                              # %for.end291
                                        #   in Loop: Header=BB86_40 Depth=1
	jmp	.LBB86_46
.LBB86_46:                              # %for.inc292
                                        #   in Loop: Header=BB86_40 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB86_40
.LBB86_47:                              # %for.end294
	movl	$0, -12(%rbp)
.LBB86_48:                              # %for.cond295
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_52 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB86_50
# %bb.49:                               # %land.rhs298
                                        #   in Loop: Header=BB86_48 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB86_50:                              # %land.end301
                                        #   in Loop: Header=BB86_48 Depth=1
	testb	$1, %al
	jne	.LBB86_51
	jmp	.LBB86_57
.LBB86_51:                              # %for.body303
                                        #   in Loop: Header=BB86_48 Depth=1
	movl	$0, -16(%rbp)
.LBB86_52:                              # %for.cond304
                                        #   Parent Loop BB86_48 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB86_55
# %bb.53:                               # %for.body307
                                        #   in Loop: Header=BB86_52 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-56(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-56(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-56(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.54:                               # %for.inc331
                                        #   in Loop: Header=BB86_52 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB86_52
.LBB86_55:                              # %for.end333
                                        #   in Loop: Header=BB86_48 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -224(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -192(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	addl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -208(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.56:                               # %for.inc358
                                        #   in Loop: Header=BB86_48 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB86_48
.LBB86_57:                              # %for.end360
	movl	$0, -16(%rbp)
.LBB86_58:                              # %for.cond361
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_62 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB86_60
# %bb.59:                               # %land.rhs364
                                        #   in Loop: Header=BB86_58 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB86_60:                              # %land.end367
                                        #   in Loop: Header=BB86_58 Depth=1
	testb	$1, %al
	jne	.LBB86_61
	jmp	.LBB86_67
.LBB86_61:                              # %for.body369
                                        #   in Loop: Header=BB86_58 Depth=1
	movl	$0, -12(%rbp)
.LBB86_62:                              # %for.cond370
                                        #   Parent Loop BB86_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB86_65
# %bb.63:                               # %for.body373
                                        #   in Loop: Header=BB86_62 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.64:                               # %for.inc397
                                        #   in Loop: Header=BB86_62 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB86_62
.LBB86_65:                              # %for.end399
                                        #   in Loop: Header=BB86_58 Depth=1
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-224(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-36(%rbp), %ecx
	addl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.66:                               # %for.inc427
                                        #   in Loop: Header=BB86_58 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB86_58
.LBB86_67:                              # %for.end429
	movl	$-1, -80(%rbp)
	movl	$0, -76(%rbp)
	movl	$0, -60(%rbp)
.LBB86_68:                              # %for.cond430
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -60(%rbp)
	jge	.LBB86_88
# %bb.69:                               # %for.body433
                                        #   in Loop: Header=BB86_68 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB86_72
# %bb.70:                               # %lor.lhs.false
                                        #   in Loop: Header=BB86_68 Depth=1
	cmpl	$0, mb_adaptive
	je	.LBB86_73
# %bb.71:                               # %land.lhs.true
                                        #   in Loop: Header=BB86_68 Depth=1
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB86_73
.LBB86_72:                              # %if.then437
                                        #   in Loop: Header=BB86_68 Depth=1
	movslq	-60(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-60(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB86_74
.LBB86_73:                              # %if.else446
                                        #   in Loop: Header=BB86_68 Depth=1
	movslq	-60(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-60(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB86_74:                              # %if.end455
                                        #   in Loop: Header=BB86_68 Depth=1
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB86_76
# %bb.75:                               # %if.then458
                                        #   in Loop: Header=BB86_68 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -64(%rbp)
	jmp	.LBB86_77
.LBB86_76:                              # %if.else463
                                        #   in Loop: Header=BB86_68 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-68(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-112(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -64(%rbp)
.LBB86_77:                              # %if.end481
                                        #   in Loop: Header=BB86_68 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB86_82
# %bb.78:                               # %land.lhs.true484
                                        #   in Loop: Header=BB86_68 Depth=1
	movq	img, %rax
	cmpl	$10, 40(%rax)
	jge	.LBB86_82
# %bb.79:                               # %if.then488
                                        #   in Loop: Header=BB86_68 Depth=1
	cmpl	$2063, -64(%rbp)        # imm = 0x80F
	jle	.LBB86_81
# %bb.80:                               # %if.then491
                                        #   in Loop: Header=BB86_68 Depth=1
	movl	$2063, -64(%rbp)        # imm = 0x80F
.LBB86_81:                              # %if.end492
                                        #   in Loop: Header=BB86_68 Depth=1
	jmp	.LBB86_82
.LBB86_82:                              # %if.end493
                                        #   in Loop: Header=BB86_68 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB86_84
# %bb.83:                               # %if.then496
                                        #   in Loop: Header=BB86_68 Depth=1
	movl	-64(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-144(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	movq	-240(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	movl	$-1, -80(%rbp)
.LBB86_84:                              # %if.end507
                                        #   in Loop: Header=BB86_68 Depth=1
	cmpl	$0, -72(%rbp)
	jne	.LBB86_86
# %bb.85:                               # %if.then509
                                        #   in Loop: Header=BB86_68 Depth=1
	movl	-64(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB86_86:                              # %if.end519
                                        #   in Loop: Header=BB86_68 Depth=1
	jmp	.LBB86_87
.LBB86_87:                              # %for.inc520
                                        #   in Loop: Header=BB86_68 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB86_68
.LBB86_88:                              # %for.end522
	movq	-144(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB86_89:                              # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_93 Depth 2
                                        #     Child Loop BB86_97 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB86_91
# %bb.90:                               # %land.rhs528
                                        #   in Loop: Header=BB86_89 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB86_91:                              # %land.end531
                                        #   in Loop: Header=BB86_89 Depth=1
	testb	$1, %al
	jne	.LBB86_92
	jmp	.LBB86_102
.LBB86_92:                              # %for.body533
                                        #   in Loop: Header=BB86_89 Depth=1
	movl	$0, -16(%rbp)
.LBB86_93:                              # %for.cond534
                                        #   Parent Loop BB86_89 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB86_96
# %bb.94:                               # %for.body537
                                        #   in Loop: Header=BB86_93 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.95:                               # %for.inc544
                                        #   in Loop: Header=BB86_93 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB86_93
.LBB86_96:                              # %for.end546
                                        #   in Loop: Header=BB86_89 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB86_97:                              # %for.cond563
                                        #   Parent Loop BB86_89 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB86_100
# %bb.98:                               # %for.body566
                                        #   in Loop: Header=BB86_97 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-56(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-56(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movslq	-56(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.99:                               # %for.inc586
                                        #   in Loop: Header=BB86_97 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB86_97
.LBB86_100:                             # %for.end588
                                        #   in Loop: Header=BB86_89 Depth=1
	jmp	.LBB86_101
.LBB86_101:                             # %for.inc589
                                        #   in Loop: Header=BB86_89 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB86_89
.LBB86_102:                             # %for.end591
	movl	$0, -16(%rbp)
.LBB86_103:                             # %for.cond592
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_107 Depth 2
                                        #     Child Loop BB86_111 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB86_105
# %bb.104:                              # %land.rhs595
                                        #   in Loop: Header=BB86_103 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB86_105:                             # %land.end598
                                        #   in Loop: Header=BB86_103 Depth=1
	testb	$1, %al
	jne	.LBB86_106
	jmp	.LBB86_119
.LBB86_106:                             # %for.body600
                                        #   in Loop: Header=BB86_103 Depth=1
	movl	$0, -12(%rbp)
.LBB86_107:                             # %for.cond601
                                        #   Parent Loop BB86_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB86_110
# %bb.108:                              # %for.body604
                                        #   in Loop: Header=BB86_107 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.109:                              # %for.inc611
                                        #   in Loop: Header=BB86_107 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB86_107
.LBB86_110:                             # %for.end613
                                        #   in Loop: Header=BB86_103 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB86_111:                             # %for.cond630
                                        #   Parent Loop BB86_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB86_117
# %bb.112:                              # %for.body633
                                        #   in Loop: Header=BB86_111 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	cmpl	$6, -68(%rbp)
	jge	.LBB86_114
# %bb.113:                              # %if.then637
                                        #   in Loop: Header=BB86_111 Depth=2
	leaq	-1264(%rbp), %r8
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %esi
	movslq	-52(%rbp), %rax
	addl	-96(%rbp,%rax,4), %esi
	movslq	-100(%rbp), %rax
	shlq	$6, %rax
	movabsq	$InvLevelScale4x4Luma_Intra, %rdi
	movq	%rdi, %rcx
	addq	%rax, %rcx
	imull	(%rcx), %esi
	movl	$5, %eax
	movl	$5, %ecx
	subl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r9d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %esi
	movl	$6, %edx
	movl	$6, %ecx
	subl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %esi
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movq	%r8, %rbx
	addq	%rcx, %rbx
	movslq	-12(%rbp), %rcx
	movl	%esi, (%rbx,%rcx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %esi
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %esi
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdi
	imull	(%rdi), %esi
	subl	-68(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r9d
	addl	%r9d, %esi
	subl	-68(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %esi
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r8
	movslq	-52(%rbp), %rax
	movl	%esi, (%r8,%rax,4)
	jmp	.LBB86_115
.LBB86_114:                             # %if.else680
                                        #   in Loop: Header=BB86_111 Depth=2
	leaq	-1264(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-52(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %edx
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rsi
	movq	%rsi, %rdi
	addq	%rcx, %rdi
	imull	(%rdi), %edx
	movl	-68(%rbp), %ecx
	subl	$6, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdi
	addq	%rcx, %rdi
	movslq	-12(%rbp), %rcx
	movl	%edx, (%rdi,%rcx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-68(%rbp), %ecx
	subl	$6, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-52(%rbp), %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB86_115:                             # %if.end717
                                        #   in Loop: Header=BB86_111 Depth=2
	jmp	.LBB86_116
.LBB86_116:                             # %for.inc718
                                        #   in Loop: Header=BB86_111 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB86_111
.LBB86_117:                             # %for.end720
                                        #   in Loop: Header=BB86_103 Depth=1
	jmp	.LBB86_118
.LBB86_118:                             # %for.inc721
                                        #   in Loop: Header=BB86_103 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB86_103
.LBB86_119:                             # %for.end723
	movl	$0, -24(%rbp)
.LBB86_120:                             # %for.cond724
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_122 Depth 2
                                        #       Child Loop BB86_124 Depth 3
                                        #       Child Loop BB86_143 Depth 3
                                        #         Child Loop BB86_147 Depth 4
                                        #         Child Loop BB86_151 Depth 4
                                        #       Child Loop BB86_157 Depth 3
                                        #         Child Loop BB86_161 Depth 4
                                        #         Child Loop BB86_165 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB86_174
# %bb.121:                              # %for.body727
                                        #   in Loop: Header=BB86_120 Depth=1
	movl	$0, -20(%rbp)
.LBB86_122:                             # %for.cond728
                                        #   Parent Loop BB86_120 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB86_124 Depth 3
                                        #       Child Loop BB86_143 Depth 3
                                        #         Child Loop BB86_147 Depth 4
                                        #         Child Loop BB86_151 Depth 4
                                        #       Child Loop BB86_157 Depth 3
                                        #         Child Loop BB86_161 Depth 4
                                        #         Child Loop BB86_165 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB86_172
# %bb.123:                              # %for.body731
                                        #   in Loop: Header=BB86_122 Depth=2
	movl	$-1, -80(%rbp)
	movl	$0, -76(%rbp)
	movl	-24(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -108(%rbp)
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -116(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-108(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -152(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-108(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -232(%rbp)
	movl	$1, -60(%rbp)
.LBB86_124:                             # %for.cond751
                                        #   Parent Loop BB86_120 Depth=1
                                        #     Parent Loop BB86_122 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -60(%rbp)
	jge	.LBB86_142
# %bb.125:                              # %for.body754
                                        #   in Loop: Header=BB86_124 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB86_128
# %bb.126:                              # %lor.lhs.false757
                                        #   in Loop: Header=BB86_124 Depth=3
	cmpl	$0, mb_adaptive
	je	.LBB86_129
# %bb.127:                              # %land.lhs.true759
                                        #   in Loop: Header=BB86_124 Depth=3
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB86_129
.LBB86_128:                             # %if.then762
                                        #   in Loop: Header=BB86_124 Depth=3
	movslq	-60(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-60(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB86_130
.LBB86_129:                             # %if.else771
                                        #   in Loop: Header=BB86_124 Depth=3
	movslq	-60(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-60(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB86_130:                             # %if.end780
                                        #   in Loop: Header=BB86_124 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB86_132
# %bb.131:                              # %if.then783
                                        #   in Loop: Header=BB86_124 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -64(%rbp)
	jmp	.LBB86_133
.LBB86_132:                             # %if.else793
                                        #   in Loop: Header=BB86_124 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-68(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -64(%rbp)
.LBB86_133:                             # %if.end818
                                        #   in Loop: Header=BB86_124 Depth=3
	cmpl	$0, -64(%rbp)
	je	.LBB86_135
# %bb.134:                              # %if.then821
                                        #   in Loop: Header=BB86_124 Depth=3
	movl	$15, -120(%rbp)
	movl	-64(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-152(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	movq	-232(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	movl	$-1, -80(%rbp)
.LBB86_135:                             # %if.end836
                                        #   in Loop: Header=BB86_124 Depth=3
	cmpl	$0, -72(%rbp)
	jne	.LBB86_140
# %bb.136:                              # %if.then838
                                        #   in Loop: Header=BB86_124 Depth=3
	movl	-64(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movl	%eax, -64(%rbp)
	cmpl	$4, -68(%rbp)
	jge	.LBB86_138
# %bb.137:                              # %if.then850
                                        #   in Loop: Header=BB86_124 Depth=3
	movl	-64(%rbp), %eax
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB86_139
.LBB86_138:                             # %if.else871
                                        #   in Loop: Header=BB86_124 Depth=3
	movl	-64(%rbp), %eax
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-68(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB86_139:                             # %if.end889
                                        #   in Loop: Header=BB86_124 Depth=3
	jmp	.LBB86_140
.LBB86_140:                             # %if.end890
                                        #   in Loop: Header=BB86_124 Depth=3
	jmp	.LBB86_141
.LBB86_141:                             # %for.inc891
                                        #   in Loop: Header=BB86_124 Depth=3
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB86_124
.LBB86_142:                             # %for.end893
                                        #   in Loop: Header=BB86_122 Depth=2
	movq	-152(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB86_143:                             # %for.cond896
                                        #   Parent Loop BB86_120 Depth=1
                                        #     Parent Loop BB86_122 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB86_147 Depth 4
                                        #         Child Loop BB86_151 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB86_145
# %bb.144:                              # %land.rhs899
                                        #   in Loop: Header=BB86_143 Depth=3
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB86_145:                             # %land.end902
                                        #   in Loop: Header=BB86_143 Depth=3
	testb	$1, %al
	jne	.LBB86_146
	jmp	.LBB86_156
.LBB86_146:                             # %for.body904
                                        #   in Loop: Header=BB86_143 Depth=3
	movl	$0, -16(%rbp)
.LBB86_147:                             # %for.cond905
                                        #   Parent Loop BB86_120 Depth=1
                                        #     Parent Loop BB86_122 Depth=2
                                        #       Parent Loop BB86_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB86_150
# %bb.148:                              # %for.body908
                                        #   in Loop: Header=BB86_147 Depth=4
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.149:                              # %for.inc919
                                        #   in Loop: Header=BB86_147 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB86_147
.LBB86_150:                             # %for.end921
                                        #   in Loop: Header=BB86_143 Depth=3
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB86_151:                             # %for.cond940
                                        #   Parent Loop BB86_120 Depth=1
                                        #     Parent Loop BB86_122 Depth=2
                                        #       Parent Loop BB86_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB86_154
# %bb.152:                              # %for.body943
                                        #   in Loop: Header=BB86_151 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ecx
	movslq	-56(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movslq	-16(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.153:                              # %for.inc971
                                        #   in Loop: Header=BB86_151 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB86_151
.LBB86_154:                             # %for.end973
                                        #   in Loop: Header=BB86_143 Depth=3
	jmp	.LBB86_155
.LBB86_155:                             # %for.inc974
                                        #   in Loop: Header=BB86_143 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB86_143
.LBB86_156:                             # %for.end976
                                        #   in Loop: Header=BB86_122 Depth=2
	movl	$0, -16(%rbp)
.LBB86_157:                             # %for.cond977
                                        #   Parent Loop BB86_120 Depth=1
                                        #     Parent Loop BB86_122 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB86_161 Depth 4
                                        #         Child Loop BB86_165 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB86_159
# %bb.158:                              # %land.rhs980
                                        #   in Loop: Header=BB86_157 Depth=3
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB86_159:                             # %land.end983
                                        #   in Loop: Header=BB86_157 Depth=3
	testb	$1, %al
	jne	.LBB86_160
	jmp	.LBB86_170
.LBB86_160:                             # %for.body985
                                        #   in Loop: Header=BB86_157 Depth=3
	movl	$0, -12(%rbp)
.LBB86_161:                             # %for.cond986
                                        #   Parent Loop BB86_120 Depth=1
                                        #     Parent Loop BB86_122 Depth=2
                                        #       Parent Loop BB86_157 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB86_164
# %bb.162:                              # %for.body989
                                        #   in Loop: Header=BB86_161 Depth=4
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.163:                              # %for.inc1000
                                        #   in Loop: Header=BB86_161 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB86_161
.LBB86_164:                             # %for.end1002
                                        #   in Loop: Header=BB86_157 Depth=3
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB86_165:                             # %for.cond1021
                                        #   Parent Loop BB86_120 Depth=1
                                        #     Parent Loop BB86_122 Depth=2
                                        #       Parent Loop BB86_157 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB86_168
# %bb.166:                              # %for.body1024
                                        #   in Loop: Header=BB86_165 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ecx
	movslq	-52(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.167:                              # %for.inc1052
                                        #   in Loop: Header=BB86_165 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB86_165
.LBB86_168:                             # %for.end1054
                                        #   in Loop: Header=BB86_157 Depth=3
	jmp	.LBB86_169
.LBB86_169:                             # %for.inc1055
                                        #   in Loop: Header=BB86_157 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB86_157
.LBB86_170:                             # %for.end1057
                                        #   in Loop: Header=BB86_122 Depth=2
	jmp	.LBB86_171
.LBB86_171:                             # %for.inc1058
                                        #   in Loop: Header=BB86_122 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB86_122
.LBB86_172:                             # %for.end1060
                                        #   in Loop: Header=BB86_120 Depth=1
	jmp	.LBB86_173
.LBB86_173:                             # %for.inc1061
                                        #   in Loop: Header=BB86_120 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB86_120
.LBB86_174:                             # %for.end1063
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB86_184
# %bb.175:                              # %if.then1066
	movl	$0, -12(%rbp)
.LBB86_176:                             # %for.cond1067
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_178 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB86_183
# %bb.177:                              # %for.body1070
                                        #   in Loop: Header=BB86_176 Depth=1
	movl	$0, -16(%rbp)
.LBB86_178:                             # %for.cond1071
                                        #   Parent Loop BB86_176 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB86_181
# %bb.179:                              # %for.body1074
                                        #   in Loop: Header=BB86_178 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.180:                              # %for.inc1091
                                        #   in Loop: Header=BB86_178 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB86_178
.LBB86_181:                             # %for.end1093
                                        #   in Loop: Header=BB86_176 Depth=1
	jmp	.LBB86_182
.LBB86_182:                             # %for.inc1094
                                        #   in Loop: Header=BB86_176 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB86_176
.LBB86_183:                             # %for.end1096
	jmp	.LBB86_196
.LBB86_184:                             # %if.else1097
	movl	$0, -12(%rbp)
.LBB86_185:                             # %for.cond1098
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_187 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB86_195
# %bb.186:                              # %for.body1101
                                        #   in Loop: Header=BB86_185 Depth=1
	movl	$0, -16(%rbp)
.LBB86_187:                             # %for.cond1102
                                        #   Parent Loop BB86_185 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB86_193
# %bb.188:                              # %for.body1105
                                        #   in Loop: Header=BB86_187 Depth=2
	cmpl	$0, -72(%rbp)
	je	.LBB86_190
# %bb.189:                              # %if.then1107
                                        #   in Loop: Header=BB86_187 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB86_191
.LBB86_190:                             # %if.else1125
                                        #   in Loop: Header=BB86_187 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB86_191:                             # %if.end1145
                                        #   in Loop: Header=BB86_187 Depth=2
	jmp	.LBB86_192
.LBB86_192:                             # %for.inc1146
                                        #   in Loop: Header=BB86_187 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB86_187
.LBB86_193:                             # %for.end1148
                                        #   in Loop: Header=BB86_185 Depth=1
	jmp	.LBB86_194
.LBB86_194:                             # %for.inc1149
                                        #   in Loop: Header=BB86_185 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB86_185
.LBB86_195:                             # %for.end1151
	jmp	.LBB86_196
.LBB86_196:                             # %if.end1152
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB86_218
# %bb.197:                              # %if.then1155
	movl	$0, -12(%rbp)
.LBB86_198:                             # %for.cond1156
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_200 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB86_217
# %bb.199:                              # %for.body1159
                                        #   in Loop: Header=BB86_198 Depth=1
	movl	$0, -16(%rbp)
.LBB86_200:                             # %for.cond1160
                                        #   Parent Loop BB86_198 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB86_215
# %bb.201:                              # %for.body1163
                                        #   in Loop: Header=BB86_200 Depth=2
	cmpl	$0, -72(%rbp)
	je	.LBB86_203
# %bb.202:                              # %if.then1165
                                        #   in Loop: Header=BB86_200 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB86_213
.LBB86_203:                             # %if.else1186
                                        #   in Loop: Header=BB86_200 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	leaq	-2288(%rbp), %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movslq	(%rsi,%rdx,4), %rdx
	movq	img, %rsi
	addq	$4792, %rsi             # imm = 0x12B8
	movslq	-104(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-12(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB86_205
# %bb.204:                              # %cond.true
                                        #   in Loop: Header=BB86_200 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB86_206
.LBB86_205:                             # %cond.false
                                        #   in Loop: Header=BB86_200 Depth=2
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movslq	(%rdx,%rcx,4), %rcx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-104(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB86_206:                             # %cond.end
                                        #   in Loop: Header=BB86_200 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB86_208
# %bb.207:                              # %cond.true1226
                                        #   in Loop: Header=BB86_200 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB86_212
.LBB86_208:                             # %cond.false1229
                                        #   in Loop: Header=BB86_200 Depth=2
	xorl	%eax, %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movslq	(%rdx,%rcx,4), %rcx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-104(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB86_210
# %bb.209:                              # %cond.true1249
                                        #   in Loop: Header=BB86_200 Depth=2
	xorl	%eax, %eax
	jmp	.LBB86_211
.LBB86_210:                             # %cond.false1250
                                        #   in Loop: Header=BB86_200 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movslq	(%rcx,%rax,4), %rax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB86_211:                             # %cond.end1268
                                        #   in Loop: Header=BB86_200 Depth=2
.LBB86_212:                             # %cond.end1270
                                        #   in Loop: Header=BB86_200 Depth=2
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB86_213:                             # %if.end1282
                                        #   in Loop: Header=BB86_200 Depth=2
	jmp	.LBB86_214
.LBB86_214:                             # %for.inc1283
                                        #   in Loop: Header=BB86_200 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB86_200
.LBB86_215:                             # %for.end1285
                                        #   in Loop: Header=BB86_198 Depth=1
	jmp	.LBB86_216
.LBB86_216:                             # %for.inc1286
                                        #   in Loop: Header=BB86_198 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB86_198
.LBB86_217:                             # %for.end1288
	jmp	.LBB86_218
.LBB86_218:                             # %if.end1289
	movl	-120(%rbp), %ebx
	cmpl	$389604209, -132(%rbp)  # imm = 0x1738E371
	jne	.LBB86_220
.LBB86_219:
	movl	%ebx, %eax
	addq	$2280, %rsp             # imm = 0x8E8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB86_220:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB86_219
.Lfunc_end86:
	.size	dct_luma_16x16.77, .Lfunc_end86-dct_luma_16x16.77
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function dct_luma_sp.78
.LCPI87_0:
	.quad	4616189618054758400     # double 4
.LCPI87_1:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI87_2:
	.quad	4611686018427387904     # double 2
.LCPI87_3:
	.quad	4613937818241073152     # double 3
	.text
	.globl	dct_luma_sp.78
	.p2align	4, 0x90
	.type	dct_luma_sp.78,@function
dct_luma_sp.78:                         # @dct_luma_sp.78
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -24
	vmovsd	.LCPI87_2(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI87_3(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$516655002, -216(%rbp)  # imm = 0x1ECB879A
	movl	%edi, -116(%rbp)
	movl	%esi, -128(%rbp)
	movq	%rdx, -232(%rbp)
	movl	-116(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -204(%rbp)
	movl	-128(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -188(%rbp)
	movl	-188(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-204(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -196(%rbp)
	movl	-188(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-204(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -192(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-196(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-192(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -224(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-196(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-192(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -248(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -168(%rbp)
	movq	-168(%rbp), %rax
	movl	12(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI87_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI87_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmulsd	%xmm0, %xmm2, %xmm0
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -240(%rbp)
	movq	-168(%rbp), %rax
	movl	12(%rax), %eax
	subl	$0, %eax
	cltd
	movl	$6, %edi
	idivl	%edi
	movl	%eax, -132(%rbp)
	movq	-168(%rbp), %rax
	movl	12(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%edx, -108(%rbp)
	movl	-132(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -144(%rbp)
	movq	-168(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%eax, -180(%rbp)
	movq	-168(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%edx, -124(%rbp)
	movl	-180(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -136(%rbp)
	movl	-144(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %esi
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	idivl	%edi
	movl	%eax, -184(%rbp)
	movl	-136(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movl	%esi, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -200(%rbp)
	movl	$0, -12(%rbp)
.LBB87_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_3 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB87_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB87_1 Depth=1
	movl	$0, -16(%rbp)
.LBB87_3:                               # %for.cond38
                                        #   Parent Loop BB87_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB87_6
# %bb.4:                                # %for.body41
                                        #   in Loop: Header=BB87_3 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-116(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-128(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-116(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-128(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB87_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB87_3
.LBB87_6:                               # %for.end
                                        #   in Loop: Header=BB87_1 Depth=1
	jmp	.LBB87_7
.LBB87_7:                               # %for.inc66
                                        #   in Loop: Header=BB87_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB87_1
.LBB87_8:                               # %for.end68
	movl	$0, -12(%rbp)
.LBB87_9:                               # %for.cond69
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_11 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB87_16
# %bb.10:                               # %for.body72
                                        #   in Loop: Header=BB87_9 Depth=1
	movl	$0, -16(%rbp)
.LBB87_11:                              # %for.cond73
                                        #   Parent Loop BB87_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB87_14
# %bb.12:                               # %for.body76
                                        #   in Loop: Header=BB87_11 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.13:                               # %for.inc104
                                        #   in Loop: Header=BB87_11 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB87_11
.LBB87_14:                              # %for.end106
                                        #   in Loop: Header=BB87_9 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.15:                               # %for.inc137
                                        #   in Loop: Header=BB87_9 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB87_9
.LBB87_16:                              # %for.end139
	movl	$0, -16(%rbp)
.LBB87_17:                              # %for.cond140
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_19 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB87_24
# %bb.18:                               # %for.body143
                                        #   in Loop: Header=BB87_17 Depth=1
	movl	$0, -12(%rbp)
.LBB87_19:                              # %for.cond144
                                        #   Parent Loop BB87_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB87_22
# %bb.20:                               # %for.body147
                                        #   in Loop: Header=BB87_19 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-20(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.21:                               # %for.inc175
                                        #   in Loop: Header=BB87_19 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB87_19
.LBB87_22:                              # %for.end177
                                        #   in Loop: Header=BB87_17 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.23:                               # %for.inc208
                                        #   in Loop: Header=BB87_17 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB87_17
.LBB87_24:                              # %for.end210
	movl	$0, -12(%rbp)
.LBB87_25:                              # %for.cond211
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_27 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB87_32
# %bb.26:                               # %for.body214
                                        #   in Loop: Header=BB87_25 Depth=1
	movl	$0, -16(%rbp)
.LBB87_27:                              # %for.cond215
                                        #   Parent Loop BB87_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB87_30
# %bb.28:                               # %for.body218
                                        #   in Loop: Header=BB87_27 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.29:                               # %for.inc242
                                        #   in Loop: Header=BB87_27 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB87_27
.LBB87_30:                              # %for.end244
                                        #   in Loop: Header=BB87_25 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -320(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -288(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -304(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
# %bb.31:                               # %for.inc271
                                        #   in Loop: Header=BB87_25 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB87_25
.LBB87_32:                              # %for.end273
	movl	$0, -16(%rbp)
.LBB87_33:                              # %for.cond274
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_35 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB87_40
# %bb.34:                               # %for.body277
                                        #   in Loop: Header=BB87_33 Depth=1
	movl	$0, -12(%rbp)
.LBB87_35:                              # %for.cond278
                                        #   Parent Loop BB87_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB87_38
# %bb.36:                               # %for.body281
                                        #   in Loop: Header=BB87_35 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-20(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.37:                               # %for.inc305
                                        #   in Loop: Header=BB87_35 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB87_35
.LBB87_38:                              # %for.end307
                                        #   in Loop: Header=BB87_33 Depth=1
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-320(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.39:                               # %for.inc334
                                        #   in Loop: Header=BB87_33 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB87_33
.LBB87_40:                              # %for.end336
	movl	$0, -208(%rbp)
	movl	$-1, -64(%rbp)
	movl	$0, -112(%rbp)
	movl	$0, -68(%rbp)
.LBB87_41:                              # %for.cond337
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -68(%rbp)
	jge	.LBB87_80
# %bb.42:                               # %for.body340
                                        #   in Loop: Header=BB87_41 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB87_45
# %bb.43:                               # %lor.lhs.false
                                        #   in Loop: Header=BB87_41 Depth=1
	cmpl	$0, mb_adaptive
	je	.LBB87_46
# %bb.44:                               # %land.lhs.true
                                        #   in Loop: Header=BB87_41 Depth=1
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB87_46
.LBB87_45:                              # %if.then
                                        #   in Loop: Header=BB87_41 Depth=1
	movslq	-68(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-68(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB87_47
.LBB87_46:                              # %if.else
                                        #   in Loop: Header=BB87_41 Depth=1
	movslq	-68(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-68(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB87_47:                              # %if.end
                                        #   in Loop: Header=BB87_41 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	movl	$0, -104(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-124(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-200(%rbp), %eax
	movl	-136(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	movl	-136(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-124(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	cltd
	idivl	(%rsi,%rcx,4)
	movl	%eax, -24(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-24(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -100(%rbp)
	movl	-100(%rbp), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-184(%rbp), %eax
	movl	-144(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movl	%eax, -120(%rbp)
	movl	-120(%rbp), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-184(%rbp), %eax
	movl	-144(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -60(%rbp)
	movl	-24(%rbp), %eax
	cmpl	-60(%rbp), %eax
	je	.LBB87_63
# %bb.48:                               # %land.lhs.true424
                                        #   in Loop: Header=BB87_41 Depth=1
	cmpl	$0, -24(%rbp)
	je	.LBB87_63
# %bb.49:                               # %land.lhs.true427
                                        #   in Loop: Header=BB87_41 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB87_63
# %bb.50:                               # %if.then430
                                        #   in Loop: Header=BB87_41 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-24(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-132(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
	movl	-24(%rbp), %edi
	movl	-64(%rbp), %esi
	leaq	-148(%rbp), %rdx
	leaq	-212(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	-240(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-148(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-60(%rbp), %edi
	movl	-120(%rbp), %esi
	callq	sign
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-132(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -176(%rbp)
	movl	-60(%rbp), %edi
	movl	-64(%rbp), %esi
	leaq	-148(%rbp), %rdx
	leaq	-212(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-176(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-176(%rbp), %xmm0, %xmm0
	vmovsd	-240(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-148(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -176(%rbp)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-176(%rbp), %xmm0
	jne	.LBB87_55
	jp	.LBB87_55
# %bb.51:                               # %if.then495
                                        #   in Loop: Header=BB87_41 Depth=1
	movl	-24(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-60(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB87_53
# %bb.52:                               # %cond.true
                                        #   in Loop: Header=BB87_41 Depth=1
	movl	-24(%rbp), %eax
	jmp	.LBB87_54
.LBB87_53:                              # %cond.false
                                        #   in Loop: Header=BB87_41 Depth=1
	movl	-60(%rbp), %eax
.LBB87_54:                              # %cond.end
                                        #   in Loop: Header=BB87_41 Depth=1
	movl	%eax, -56(%rbp)
	jmp	.LBB87_59
.LBB87_55:                              # %if.else500
                                        #   in Loop: Header=BB87_41 Depth=1
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-176(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB87_57
# %bb.56:                               # %if.then503
                                        #   in Loop: Header=BB87_41 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB87_58
.LBB87_57:                              # %if.else504
                                        #   in Loop: Header=BB87_41 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB87_58:                              # %if.end505
                                        #   in Loop: Header=BB87_41 Depth=1
	jmp	.LBB87_59
.LBB87_59:                              # %if.end506
                                        #   in Loop: Header=BB87_41 Depth=1
	movl	-56(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jne	.LBB87_61
# %bb.60:                               # %cond.true509
                                        #   in Loop: Header=BB87_41 Depth=1
	movl	-100(%rbp), %eax
	jmp	.LBB87_62
.LBB87_61:                              # %cond.false510
                                        #   in Loop: Header=BB87_41 Depth=1
	movl	-120(%rbp), %eax
.LBB87_62:                              # %cond.end511
                                        #   in Loop: Header=BB87_41 Depth=1
	movl	%eax, -140(%rbp)
	jmp	.LBB87_73
.LBB87_63:                              # %if.else513
                                        #   in Loop: Header=BB87_41 Depth=1
	movl	-24(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB87_65
# %bb.64:                               # %if.then516
                                        #   in Loop: Header=BB87_41 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-100(%rbp), %eax
	movl	%eax, -140(%rbp)
	jmp	.LBB87_72
.LBB87_65:                              # %if.else517
                                        #   in Loop: Header=BB87_41 Depth=1
	cmpl	$0, -24(%rbp)
	jne	.LBB87_67
# %bb.66:                               # %cond.true520
                                        #   in Loop: Header=BB87_41 Depth=1
	movl	-24(%rbp), %eax
	jmp	.LBB87_68
.LBB87_67:                              # %cond.false521
                                        #   in Loop: Header=BB87_41 Depth=1
	movl	-60(%rbp), %eax
.LBB87_68:                              # %cond.end522
                                        #   in Loop: Header=BB87_41 Depth=1
	movl	%eax, -56(%rbp)
	cmpl	$0, -24(%rbp)
	jne	.LBB87_70
# %bb.69:                               # %cond.true526
                                        #   in Loop: Header=BB87_41 Depth=1
	movl	-100(%rbp), %eax
	jmp	.LBB87_71
.LBB87_70:                              # %cond.false527
                                        #   in Loop: Header=BB87_41 Depth=1
	movl	-120(%rbp), %eax
.LBB87_71:                              # %cond.end528
                                        #   in Loop: Header=BB87_41 Depth=1
	movl	%eax, -140(%rbp)
.LBB87_72:                              # %if.end530
                                        #   in Loop: Header=BB87_41 Depth=1
	jmp	.LBB87_73
.LBB87_73:                              # %if.end531
                                        #   in Loop: Header=BB87_41 Depth=1
	cmpl	$0, -56(%rbp)
	je	.LBB87_78
# %bb.74:                               # %if.then534
                                        #   in Loop: Header=BB87_41 Depth=1
	movl	$1, -208(%rbp)
	cmpl	$1, -56(%rbp)
	jle	.LBB87_76
# %bb.75:                               # %if.then537
                                        #   in Loop: Header=BB87_41 Depth=1
	movq	-232(%rbp), %rax
	movl	(%rax), %ecx
	addl	$999999, %ecx           # imm = 0xF423F
	movl	%ecx, (%rax)
	jmp	.LBB87_77
.LBB87_76:                              # %if.else539
                                        #   in Loop: Header=BB87_41 Depth=1
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-64(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-232(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB87_77:                              # %if.end546
                                        #   in Loop: Header=BB87_41 Depth=1
	movl	-56(%rbp), %edi
	movl	-140(%rbp), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-112(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	movq	-248(%rbp), %rcx
	movslq	-112(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	movl	$-1, -64(%rbp)
	movl	-56(%rbp), %edi
	movl	-140(%rbp), %esi
	callq	sign
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-132(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	movl	%eax, -104(%rbp)
.LBB87_78:                              # %if.end568
                                        #   in Loop: Header=BB87_41 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	-104(%rbp), %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %edi
	callq	abs
	movslq	-124(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-200(%rbp), %eax
	movl	-136(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-104(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-124(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-180(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.79:                               # %for.inc598
                                        #   in Loop: Header=BB87_41 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB87_41
.LBB87_80:                              # %for.end600
	movq	-224(%rbp), %rax
	movslq	-112(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB87_81:                              # %for.cond603
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_83 Depth 2
                                        #     Child Loop BB87_87 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB87_92
# %bb.82:                               # %for.body606
                                        #   in Loop: Header=BB87_81 Depth=1
	movl	$0, -16(%rbp)
.LBB87_83:                              # %for.cond607
                                        #   Parent Loop BB87_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB87_86
# %bb.84:                               # %for.body610
                                        #   in Loop: Header=BB87_83 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.85:                               # %for.inc618
                                        #   in Loop: Header=BB87_83 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB87_83
.LBB87_86:                              # %for.end620
                                        #   in Loop: Header=BB87_81 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB87_87:                              # %for.cond639
                                        #   Parent Loop BB87_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB87_90
# %bb.88:                               # %for.body642
                                        #   in Loop: Header=BB87_87 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.89:                               # %for.inc664
                                        #   in Loop: Header=BB87_87 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB87_87
.LBB87_90:                              # %for.end666
                                        #   in Loop: Header=BB87_81 Depth=1
	jmp	.LBB87_91
.LBB87_91:                              # %for.inc667
                                        #   in Loop: Header=BB87_81 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB87_81
.LBB87_92:                              # %for.end669
	movl	$0, -16(%rbp)
.LBB87_93:                              # %for.cond670
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_95 Depth 2
                                        #     Child Loop BB87_99 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB87_122
# %bb.94:                               # %for.body673
                                        #   in Loop: Header=BB87_93 Depth=1
	movl	$0, -12(%rbp)
.LBB87_95:                              # %for.cond674
                                        #   Parent Loop BB87_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB87_98
# %bb.96:                               # %for.body677
                                        #   in Loop: Header=BB87_95 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.97:                               # %for.inc685
                                        #   in Loop: Header=BB87_95 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB87_95
.LBB87_98:                              # %for.end687
                                        #   in Loop: Header=BB87_93 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB87_99:                              # %for.cond706
                                        #   Parent Loop BB87_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB87_120
# %bb.100:                              # %for.body709
                                        #   in Loop: Header=BB87_99 Depth=2
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	addl	-96(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB87_102
# %bb.101:                              # %cond.true720
                                        #   in Loop: Header=BB87_99 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB87_103
.LBB87_102:                             # %cond.false721
                                        #   in Loop: Header=BB87_99 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB87_103:                             # %cond.end729
                                        #   in Loop: Header=BB87_99 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB87_105
# %bb.104:                              # %cond.true733
                                        #   in Loop: Header=BB87_99 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB87_109
.LBB87_105:                             # %cond.false735
                                        #   in Loop: Header=BB87_99 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB87_107
# %bb.106:                              # %cond.true745
                                        #   in Loop: Header=BB87_99 Depth=2
	xorl	%eax, %eax
	jmp	.LBB87_108
.LBB87_107:                             # %cond.false746
                                        #   in Loop: Header=BB87_99 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB87_108:                             # %cond.end754
                                        #   in Loop: Header=BB87_99 Depth=2
.LBB87_109:                             # %cond.end756
                                        #   in Loop: Header=BB87_99 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	subl	-96(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB87_111
# %bb.110:                              # %cond.true773
                                        #   in Loop: Header=BB87_99 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB87_112
.LBB87_111:                             # %cond.false774
                                        #   in Loop: Header=BB87_99 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB87_112:                             # %cond.end782
                                        #   in Loop: Header=BB87_99 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB87_114
# %bb.113:                              # %cond.true786
                                        #   in Loop: Header=BB87_99 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB87_118
.LBB87_114:                             # %cond.false788
                                        #   in Loop: Header=BB87_99 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB87_116
# %bb.115:                              # %cond.true798
                                        #   in Loop: Header=BB87_99 Depth=2
	xorl	%eax, %eax
	jmp	.LBB87_117
.LBB87_116:                             # %cond.false799
                                        #   in Loop: Header=BB87_99 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB87_117:                             # %cond.end807
                                        #   in Loop: Header=BB87_99 Depth=2
.LBB87_118:                             # %cond.end809
                                        #   in Loop: Header=BB87_99 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.119:                              # %for.inc816
                                        #   in Loop: Header=BB87_99 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB87_99
.LBB87_120:                             # %for.end818
                                        #   in Loop: Header=BB87_93 Depth=1
	jmp	.LBB87_121
.LBB87_121:                             # %for.inc819
                                        #   in Loop: Header=BB87_93 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB87_93
.LBB87_122:                             # %for.end821
	movl	$0, -12(%rbp)
.LBB87_123:                             # %for.cond822
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_125 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB87_130
# %bb.124:                              # %for.body825
                                        #   in Loop: Header=BB87_123 Depth=1
	movl	$0, -16(%rbp)
.LBB87_125:                             # %for.cond826
                                        #   Parent Loop BB87_123 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB87_128
# %bb.126:                              # %for.body829
                                        #   in Loop: Header=BB87_125 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-128(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-116(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.127:                              # %for.inc844
                                        #   in Loop: Header=BB87_125 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB87_125
.LBB87_128:                             # %for.end846
                                        #   in Loop: Header=BB87_123 Depth=1
	jmp	.LBB87_129
.LBB87_129:                             # %for.inc847
                                        #   in Loop: Header=BB87_123 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB87_123
.LBB87_130:                             # %for.end849
	movl	-208(%rbp), %ebx
	cmpl	$516655002, -216(%rbp)  # imm = 0x1ECB879A
	jne	.LBB87_132
.LBB87_131:
	movl	%ebx, %eax
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB87_132:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB87_131
.Lfunc_end87:
	.size	dct_luma_sp.78, .Lfunc_end87-dct_luma_sp.78
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function dct_chroma_sp.79
.LCPI88_0:
	.quad	4616189618054758400     # double 4
.LCPI88_1:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI88_2:
	.quad	4611686018427387904     # double 2
.LCPI88_3:
	.quad	4613937818241073152     # double 3
	.text
	.globl	dct_chroma_sp.79
	.p2align	4, 0x90
	.type	dct_chroma_sp.79,@function
dct_chroma_sp.79:                       # @dct_chroma_sp.79
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$552, %rsp              # imm = 0x228
	.cfi_offset %rbx, -24
	vmovsd	.LCPI88_2(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI88_3(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$1320480234, -268(%rbp) # imm = 0x4EB4EDEA
	movl	%edi, -116(%rbp)
	movl	%esi, -204(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -184(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -288(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -296(%rbp)
	movq	-184(%rbp), %rax
	movl	12(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI88_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI88_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmulsd	%xmm0, %xmm2, %xmm0
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -264(%rbp)
	movq	-184(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB88_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB88_6
.LBB88_2:                               # %cond.false
	movq	-184(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB88_4
# %bb.3:                                # %cond.true18
	movl	$51, %eax
	jmp	.LBB88_5
.LBB88_4:                               # %cond.false19
	movq	-184(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
.LBB88_5:                               # %cond.end
.LBB88_6:                               # %cond.end23
	movl	%eax, -148(%rbp)
	movq	-184(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB88_8
# %bb.7:                                # %cond.true29
	xorl	%eax, %eax
	jmp	.LBB88_12
.LBB88_8:                               # %cond.false30
	movq	-184(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB88_10
# %bb.9:                                # %cond.true36
	movl	$51, %eax
	jmp	.LBB88_11
.LBB88_10:                              # %cond.false37
	movq	-184(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
.LBB88_11:                              # %cond.end41
.LBB88_12:                              # %cond.end43
	movl	%eax, -224(%rbp)
	cmpl	$0, -148(%rbp)
	jge	.LBB88_14
# %bb.13:                               # %cond.true47
	movl	-148(%rbp), %eax
	jmp	.LBB88_15
.LBB88_14:                              # %cond.false48
	movslq	-148(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB88_15:                              # %cond.end52
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -112(%rbp)
	cmpl	$0, -148(%rbp)
	jge	.LBB88_17
# %bb.16:                               # %cond.true58
	movl	-148(%rbp), %eax
	jmp	.LBB88_18
.LBB88_17:                              # %cond.false59
	movslq	-148(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB88_18:                              # %cond.end63
	subl	$0, %eax
	cltd
	movl	$6, %esi
	idivl	%esi
	movl	%edx, -96(%rbp)
	movl	-112(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -208(%rbp)
	movl	-208(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	idivl	%esi
	movl	%eax, -212(%rbp)
	cmpl	$0, -224(%rbp)
	jge	.LBB88_20
# %bb.19:                               # %cond.true70
	movq	-184(%rbp), %rax
	movl	16(%rax), %eax
	jmp	.LBB88_21
.LBB88_20:                              # %cond.false72
	movslq	-224(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB88_21:                              # %cond.end76
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -232(%rbp)
	cmpl	$0, -224(%rbp)
	jge	.LBB88_23
# %bb.22:                               # %cond.true82
	movq	-184(%rbp), %rax
	movl	16(%rax), %eax
	jmp	.LBB88_24
.LBB88_23:                              # %cond.false84
	movslq	-224(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB88_24:                              # %cond.end88
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%edx, -108(%rbp)
	movl	-232(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -120(%rbp)
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -220(%rbp)
	movl	$0, -12(%rbp)
.LBB88_25:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_27 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB88_32
# %bb.26:                               # %for.body
                                        #   in Loop: Header=BB88_25 Depth=1
	movl	$0, -16(%rbp)
.LBB88_27:                              # %for.cond97
                                        #   Parent Loop BB88_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB88_30
# %bb.28:                               # %for.body100
                                        #   in Loop: Header=BB88_27 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.29:                               # %for.inc
                                        #   in Loop: Header=BB88_27 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB88_27
.LBB88_30:                              # %for.end
                                        #   in Loop: Header=BB88_25 Depth=1
	jmp	.LBB88_31
.LBB88_31:                              # %for.inc121
                                        #   in Loop: Header=BB88_25 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB88_25
.LBB88_32:                              # %for.end123
	movl	$0, -24(%rbp)
.LBB88_33:                              # %for.cond124
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_35 Depth 2
                                        #       Child Loop BB88_37 Depth 3
                                        #         Child Loop BB88_39 Depth 4
                                        #       Child Loop BB88_45 Depth 3
                                        #         Child Loop BB88_47 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB88_56
# %bb.34:                               # %for.body127
                                        #   in Loop: Header=BB88_33 Depth=1
	movl	$0, -20(%rbp)
.LBB88_35:                              # %for.cond128
                                        #   Parent Loop BB88_33 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB88_37 Depth 3
                                        #         Child Loop BB88_39 Depth 4
                                        #       Child Loop BB88_45 Depth 3
                                        #         Child Loop BB88_47 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB88_54
# %bb.36:                               # %for.body131
                                        #   in Loop: Header=BB88_35 Depth=2
	movl	$0, -12(%rbp)
.LBB88_37:                              # %for.cond132
                                        #   Parent Loop BB88_33 Depth=1
                                        #     Parent Loop BB88_35 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB88_39 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB88_44
# %bb.38:                               # %for.body135
                                        #   in Loop: Header=BB88_37 Depth=3
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	$0, -16(%rbp)
.LBB88_39:                              # %for.cond137
                                        #   Parent Loop BB88_33 Depth=1
                                        #     Parent Loop BB88_35 Depth=2
                                        #       Parent Loop BB88_37 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB88_42
# %bb.40:                               # %for.body140
                                        #   in Loop: Header=BB88_39 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -92(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-48(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-92(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-48(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-92(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-48(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-92(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.41:                               # %for.inc172
                                        #   in Loop: Header=BB88_39 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB88_39
.LBB88_42:                              # %for.end174
                                        #   in Loop: Header=BB88_37 Depth=3
	movl	-80(%rbp), %eax
	addl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-48(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	subl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-48(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	shll	$1, %eax
	addl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-48(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	movl	-72(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-48(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.43:                               # %for.inc212
                                        #   in Loop: Header=BB88_37 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB88_37
.LBB88_44:                              # %for.end214
                                        #   in Loop: Header=BB88_35 Depth=2
	movl	$0, -16(%rbp)
.LBB88_45:                              # %for.cond215
                                        #   Parent Loop BB88_33 Depth=1
                                        #     Parent Loop BB88_35 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB88_47 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB88_52
# %bb.46:                               # %for.body218
                                        #   in Loop: Header=BB88_45 Depth=3
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB88_47:                              # %for.cond220
                                        #   Parent Loop BB88_33 Depth=1
                                        #     Parent Loop BB88_35 Depth=2
                                        #       Parent Loop BB88_45 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB88_50
# %bb.48:                               # %for.body223
                                        #   in Loop: Header=BB88_47 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-56(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-56(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-56(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-56(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.49:                               # %for.inc255
                                        #   in Loop: Header=BB88_47 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB88_47
.LBB88_50:                              # %for.end257
                                        #   in Loop: Header=BB88_45 Depth=3
	movl	-80(%rbp), %eax
	addl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-56(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	subl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-56(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	shll	$1, %eax
	addl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-56(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	movl	-72(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-56(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.51:                               # %for.inc296
                                        #   in Loop: Header=BB88_45 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB88_45
.LBB88_52:                              # %for.end298
                                        #   in Loop: Header=BB88_35 Depth=2
	jmp	.LBB88_53
.LBB88_53:                              # %for.inc299
                                        #   in Loop: Header=BB88_35 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB88_35
.LBB88_54:                              # %for.end301
                                        #   in Loop: Header=BB88_33 Depth=1
	jmp	.LBB88_55
.LBB88_55:                              # %for.inc302
                                        #   in Loop: Header=BB88_33 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB88_33
.LBB88_56:                              # %for.end304
	movl	$0, -24(%rbp)
.LBB88_57:                              # %for.cond305
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_59 Depth 2
                                        #       Child Loop BB88_61 Depth 3
                                        #         Child Loop BB88_63 Depth 4
                                        #       Child Loop BB88_69 Depth 3
                                        #         Child Loop BB88_71 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB88_80
# %bb.58:                               # %for.body308
                                        #   in Loop: Header=BB88_57 Depth=1
	movl	$0, -20(%rbp)
.LBB88_59:                              # %for.cond309
                                        #   Parent Loop BB88_57 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB88_61 Depth 3
                                        #         Child Loop BB88_63 Depth 4
                                        #       Child Loop BB88_69 Depth 3
                                        #         Child Loop BB88_71 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB88_78
# %bb.60:                               # %for.body312
                                        #   in Loop: Header=BB88_59 Depth=2
	movl	$0, -12(%rbp)
.LBB88_61:                              # %for.cond313
                                        #   Parent Loop BB88_57 Depth=1
                                        #     Parent Loop BB88_59 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB88_63 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB88_68
# %bb.62:                               # %for.body316
                                        #   in Loop: Header=BB88_61 Depth=3
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	$0, -16(%rbp)
.LBB88_63:                              # %for.cond318
                                        #   Parent Loop BB88_57 Depth=1
                                        #     Parent Loop BB88_59 Depth=2
                                        #       Parent Loop BB88_61 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB88_66
# %bb.64:                               # %for.body321
                                        #   in Loop: Header=BB88_63 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	movslq	%eax, %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-48(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movl	-92(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-48(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	movl	%ecx, -80(%rbp,%rdx,4)
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-48(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movl	-92(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-48(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-92(%rbp), %rax
	movl	%ecx, -80(%rbp,%rax,4)
# %bb.65:                               # %for.inc349
                                        #   in Loop: Header=BB88_63 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB88_63
.LBB88_66:                              # %for.end351
                                        #   in Loop: Header=BB88_61 Depth=3
	movl	-80(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	leaq	-560(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-48(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-80(%rbp), %ecx
	subl	-76(%rbp), %ecx
	movl	-20(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-48(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	shll	$1, %ecx
	addl	-72(%rbp), %ecx
	movl	-20(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-48(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movl	-20(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-48(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.67:                               # %for.inc385
                                        #   in Loop: Header=BB88_61 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB88_61
.LBB88_68:                              # %for.end387
                                        #   in Loop: Header=BB88_59 Depth=2
	movl	$0, -16(%rbp)
.LBB88_69:                              # %for.cond388
                                        #   Parent Loop BB88_57 Depth=1
                                        #     Parent Loop BB88_59 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB88_71 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB88_76
# %bb.70:                               # %for.body391
                                        #   in Loop: Header=BB88_69 Depth=3
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB88_71:                              # %for.cond393
                                        #   Parent Loop BB88_57 Depth=1
                                        #     Parent Loop BB88_59 Depth=2
                                        #       Parent Loop BB88_69 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB88_74
# %bb.72:                               # %for.body396
                                        #   in Loop: Header=BB88_71 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-56(%rbp), %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-24(%rbp), %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-12(%rbp), %rdx
	movl	%ecx, -80(%rbp,%rdx,4)
	movslq	-56(%rbp), %rcx
	shlq	$5, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movl	-24(%rbp), %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-52(%rbp), %rax
	movl	%ecx, -80(%rbp,%rax,4)
# %bb.73:                               # %for.inc424
                                        #   in Loop: Header=BB88_71 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB88_71
.LBB88_74:                              # %for.end426
                                        #   in Loop: Header=BB88_69 Depth=3
	movl	-80(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$5, %rdx
	leaq	-560(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-24(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-80(%rbp), %ecx
	subl	-76(%rbp), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	shll	$1, %ecx
	addl	-72(%rbp), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-56(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.75:                               # %for.inc461
                                        #   in Loop: Header=BB88_69 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB88_69
.LBB88_76:                              # %for.end463
                                        #   in Loop: Header=BB88_59 Depth=2
	jmp	.LBB88_77
.LBB88_77:                              # %for.inc464
                                        #   in Loop: Header=BB88_59 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB88_59
.LBB88_78:                              # %for.end466
                                        #   in Loop: Header=BB88_57 Depth=1
	jmp	.LBB88_79
.LBB88_79:                              # %for.inc467
                                        #   in Loop: Header=BB88_57 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB88_57
.LBB88_80:                              # %for.end469
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -176(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -172(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -168(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -164(%rbp)
	movl	-560(%rbp), %eax
	addl	-432(%rbp), %eax
	addl	-544(%rbp), %eax
	addl	-416(%rbp), %eax
	movl	%eax, -256(%rbp)
	movl	-560(%rbp), %eax
	subl	-432(%rbp), %eax
	addl	-544(%rbp), %eax
	subl	-416(%rbp), %eax
	movl	%eax, -252(%rbp)
	movl	-560(%rbp), %eax
	addl	-432(%rbp), %eax
	subl	-544(%rbp), %eax
	subl	-416(%rbp), %eax
	movl	%eax, -248(%rbp)
	movl	-560(%rbp), %eax
	subl	-432(%rbp), %eax
	subl	-544(%rbp), %eax
	addl	-416(%rbp), %eax
	movl	%eax, -244(%rbp)
	movl	$-1, -60(%rbp)
	movl	$0, -84(%rbp)
	movl	$0, -32(%rbp)
.LBB88_81:                              # %for.cond582
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -32(%rbp)
	jge	.LBB88_120
# %bb.82:                               # %for.body585
                                        #   in Loop: Header=BB88_81 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -88(%rbp)
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-220(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-120(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	movl	-120(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	cltd
	idivl	(%rsi)
	movl	%eax, -40(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-40(%rbp), %edi
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -40(%rbp)
	movl	-40(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-212(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-208(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %eax
	movslq	-32(%rbp), %rcx
	subl	-256(%rbp,%rcx,4), %eax
	movl	%eax, -100(%rbp)
	movl	-100(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-212(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-208(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	je	.LBB88_98
# %bb.83:                               # %land.lhs.true
                                        #   in Loop: Header=BB88_81 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB88_98
# %bb.84:                               # %land.lhs.true640
                                        #   in Loop: Header=BB88_81 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB88_98
# %bb.85:                               # %if.then
                                        #   in Loop: Header=BB88_81 Depth=1
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-28(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	subl	%eax, %ebx
	movslq	-32(%rbp), %rax
	subl	-256(%rbp,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movl	-28(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-124(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_c2x2
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-200(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-124(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-44(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	subl	%eax, %ebx
	movslq	-32(%rbp), %rax
	subl	-256(%rbp,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp)
	movl	-44(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-124(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_c2x2
	vmovsd	-192(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-192(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-124(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp)
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-192(%rbp), %xmm0
	jne	.LBB88_90
	jp	.LBB88_90
# %bb.86:                               # %if.then685
                                        #   in Loop: Header=BB88_81 Depth=1
	movl	-28(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB88_88
# %bb.87:                               # %cond.true690
                                        #   in Loop: Header=BB88_81 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB88_89
.LBB88_88:                              # %cond.false691
                                        #   in Loop: Header=BB88_81 Depth=1
	movl	-44(%rbp), %eax
.LBB88_89:                              # %cond.end692
                                        #   in Loop: Header=BB88_81 Depth=1
	movl	%eax, -36(%rbp)
	jmp	.LBB88_94
.LBB88_90:                              # %if.else
                                        #   in Loop: Header=BB88_81 Depth=1
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-192(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB88_92
# %bb.91:                               # %if.then696
                                        #   in Loop: Header=BB88_81 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB88_93
.LBB88_92:                              # %if.else697
                                        #   in Loop: Header=BB88_81 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB88_93:                              # %if.end
                                        #   in Loop: Header=BB88_81 Depth=1
	jmp	.LBB88_94
.LBB88_94:                              # %if.end698
                                        #   in Loop: Header=BB88_81 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB88_96
# %bb.95:                               # %cond.true701
                                        #   in Loop: Header=BB88_81 Depth=1
	movl	-40(%rbp), %eax
	jmp	.LBB88_97
.LBB88_96:                              # %cond.false702
                                        #   in Loop: Header=BB88_81 Depth=1
	movl	-100(%rbp), %eax
.LBB88_97:                              # %cond.end703
                                        #   in Loop: Header=BB88_81 Depth=1
	movl	%eax, -104(%rbp)
	jmp	.LBB88_108
.LBB88_98:                              # %if.else705
                                        #   in Loop: Header=BB88_81 Depth=1
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jne	.LBB88_100
# %bb.99:                               # %if.then708
                                        #   in Loop: Header=BB88_81 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -104(%rbp)
	jmp	.LBB88_107
.LBB88_100:                             # %if.else709
                                        #   in Loop: Header=BB88_81 Depth=1
	cmpl	$0, -28(%rbp)
	jne	.LBB88_102
# %bb.101:                              # %cond.true712
                                        #   in Loop: Header=BB88_81 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB88_103
.LBB88_102:                             # %cond.false713
                                        #   in Loop: Header=BB88_81 Depth=1
	movl	-44(%rbp), %eax
.LBB88_103:                             # %cond.end714
                                        #   in Loop: Header=BB88_81 Depth=1
	movl	%eax, -36(%rbp)
	cmpl	$0, -28(%rbp)
	jne	.LBB88_105
# %bb.104:                              # %cond.true718
                                        #   in Loop: Header=BB88_81 Depth=1
	movl	-40(%rbp), %eax
	jmp	.LBB88_106
.LBB88_105:                             # %cond.false719
                                        #   in Loop: Header=BB88_81 Depth=1
	movl	-100(%rbp), %eax
.LBB88_106:                             # %cond.end720
                                        #   in Loop: Header=BB88_81 Depth=1
	movl	%eax, -104(%rbp)
.LBB88_107:                             # %if.end722
                                        #   in Loop: Header=BB88_81 Depth=1
	jmp	.LBB88_108
.LBB88_108:                             # %if.end723
                                        #   in Loop: Header=BB88_81 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB88_113
# %bb.109:                              # %land.lhs.true726
                                        #   in Loop: Header=BB88_81 Depth=1
	movq	img, %rax
	cmpl	$4, 40(%rax)
	jge	.LBB88_113
# %bb.110:                              # %if.then730
                                        #   in Loop: Header=BB88_81 Depth=1
	cmpl	$2063, -36(%rbp)        # imm = 0x80F
	jle	.LBB88_112
# %bb.111:                              # %if.then733
                                        #   in Loop: Header=BB88_81 Depth=1
	movl	$2063, -36(%rbp)        # imm = 0x80F
.LBB88_112:                             # %if.end734
                                        #   in Loop: Header=BB88_81 Depth=1
	jmp	.LBB88_113
.LBB88_113:                             # %if.end735
                                        #   in Loop: Header=BB88_81 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB88_118
# %bb.114:                              # %if.then738
                                        #   in Loop: Header=BB88_81 Depth=1
	movl	-116(%rbp), %ecx
	shll	$2, %ecx
                                        # kill: def $cl killed $ecx
	movl	$983040, %eax           # imm = 0xF0000
	shll	%cl, %eax
	cltq
	movq	-184(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-204(%rbp), %eax
	jle	.LBB88_116
# %bb.115:                              # %cond.true744
                                        #   in Loop: Header=BB88_81 Depth=1
	movl	$1, %eax
	jmp	.LBB88_117
.LBB88_116:                             # %cond.false745
                                        #   in Loop: Header=BB88_81 Depth=1
	movl	-204(%rbp), %eax
.LBB88_117:                             # %cond.end746
                                        #   in Loop: Header=BB88_81 Depth=1
	movl	%eax, -204(%rbp)
	movl	-36(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movq	-288(%rbp), %rcx
	movslq	-84(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-60(%rbp), %eax
	movq	-296(%rbp), %rcx
	movslq	-84(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	movl	$-1, -60(%rbp)
	movl	-36(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	movl	%eax, -88(%rbp)
.LBB88_118:                             # %if.end763
                                        #   in Loop: Header=BB88_81 Depth=1
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-220(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-120(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-88(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-232(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.119:                              # %for.inc786
                                        #   in Loop: Header=BB88_81 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB88_81
.LBB88_120:                             # %for.end788
	movq	-288(%rbp), %rax
	movslq	-84(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13112(%rdx)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13368(%rdx)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13128(%rdx)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 13384(%rcx)
	movl	$0, -216(%rbp)
	movl	$0, -240(%rbp)
	movl	$0, -24(%rbp)
.LBB88_121:                             # %for.cond835
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_123 Depth 2
                                        #       Child Loop BB88_125 Depth 3
	cmpl	$4, -24(%rbp)
	jg	.LBB88_168
# %bb.122:                              # %for.body838
                                        #   in Loop: Header=BB88_121 Depth=1
	movl	$0, -20(%rbp)
.LBB88_123:                             # %for.cond839
                                        #   Parent Loop BB88_121 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB88_125 Depth 3
	cmpl	$4, -20(%rbp)
	jg	.LBB88_166
# %bb.124:                              # %for.body842
                                        #   in Loop: Header=BB88_123 Depth=2
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -236(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-236(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -280(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-236(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -304(%rbp)
	movl	$-1, -60(%rbp)
	movl	$0, -84(%rbp)
	movl	$1, -32(%rbp)
.LBB88_125:                             # %for.cond860
                                        #   Parent Loop BB88_121 Depth=1
                                        #     Parent Loop BB88_123 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -32(%rbp)
	jge	.LBB88_164
# %bb.126:                              # %for.body863
                                        #   in Loop: Header=BB88_125 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB88_129
# %bb.127:                              # %lor.lhs.false
                                        #   in Loop: Header=BB88_125 Depth=3
	cmpl	$0, mb_adaptive
	je	.LBB88_130
# %bb.128:                              # %land.lhs.true865
                                        #   in Loop: Header=BB88_125 Depth=3
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB88_130
.LBB88_129:                             # %if.then867
                                        #   in Loop: Header=BB88_125 Depth=3
	movslq	-32(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-32(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB88_131
.LBB88_130:                             # %if.else876
                                        #   in Loop: Header=BB88_125 Depth=3
	movslq	-32(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-32(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB88_131:                             # %if.end885
                                        #   in Loop: Header=BB88_125 Depth=3
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -88(%rbp)
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-220(%rbp), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	cltd
	idivl	(%rsi,%rcx,4)
	movl	%eax, -40(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-40(%rbp), %edi
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -40(%rbp)
	movl	-40(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-212(%rbp), %eax
	movl	-208(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	subl	(%rdx,%rcx,4), %eax
	movl	%eax, -100(%rbp)
	movl	-100(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-212(%rbp), %eax
	movl	-208(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	je	.LBB88_147
# %bb.132:                              # %land.lhs.true962
                                        #   in Loop: Header=BB88_125 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB88_147
# %bb.133:                              # %land.lhs.true965
                                        #   in Loop: Header=BB88_125 Depth=3
	cmpl	$0, -44(%rbp)
	je	.LBB88_147
# %bb.134:                              # %if.then968
                                        #   in Loop: Header=BB88_125 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-28(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movl	-28(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-124(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-200(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-124(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-44(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp)
	movl	-44(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-124(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-192(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-192(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-124(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp)
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-192(%rbp), %xmm0
	jne	.LBB88_139
	jp	.LBB88_139
# %bb.135:                              # %if.then1041
                                        #   in Loop: Header=BB88_125 Depth=3
	movl	-28(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB88_137
# %bb.136:                              # %cond.true1046
                                        #   in Loop: Header=BB88_125 Depth=3
	movl	-28(%rbp), %eax
	jmp	.LBB88_138
.LBB88_137:                             # %cond.false1047
                                        #   in Loop: Header=BB88_125 Depth=3
	movl	-44(%rbp), %eax
.LBB88_138:                             # %cond.end1048
                                        #   in Loop: Header=BB88_125 Depth=3
	movl	%eax, -36(%rbp)
	jmp	.LBB88_143
.LBB88_139:                             # %if.else1050
                                        #   in Loop: Header=BB88_125 Depth=3
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-192(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB88_141
# %bb.140:                              # %if.then1053
                                        #   in Loop: Header=BB88_125 Depth=3
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB88_142
.LBB88_141:                             # %if.else1054
                                        #   in Loop: Header=BB88_125 Depth=3
	movl	-44(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB88_142:                             # %if.end1055
                                        #   in Loop: Header=BB88_125 Depth=3
	jmp	.LBB88_143
.LBB88_143:                             # %if.end1056
                                        #   in Loop: Header=BB88_125 Depth=3
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB88_145
# %bb.144:                              # %cond.true1059
                                        #   in Loop: Header=BB88_125 Depth=3
	movl	-40(%rbp), %eax
	jmp	.LBB88_146
.LBB88_145:                             # %cond.false1060
                                        #   in Loop: Header=BB88_125 Depth=3
	movl	-100(%rbp), %eax
.LBB88_146:                             # %cond.end1061
                                        #   in Loop: Header=BB88_125 Depth=3
	movl	%eax, -104(%rbp)
	jmp	.LBB88_157
.LBB88_147:                             # %if.else1063
                                        #   in Loop: Header=BB88_125 Depth=3
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jne	.LBB88_149
# %bb.148:                              # %if.then1066
                                        #   in Loop: Header=BB88_125 Depth=3
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -104(%rbp)
	jmp	.LBB88_156
.LBB88_149:                             # %if.else1067
                                        #   in Loop: Header=BB88_125 Depth=3
	cmpl	$0, -28(%rbp)
	jne	.LBB88_151
# %bb.150:                              # %cond.true1070
                                        #   in Loop: Header=BB88_125 Depth=3
	movl	-28(%rbp), %eax
	jmp	.LBB88_152
.LBB88_151:                             # %cond.false1071
                                        #   in Loop: Header=BB88_125 Depth=3
	movl	-44(%rbp), %eax
.LBB88_152:                             # %cond.end1072
                                        #   in Loop: Header=BB88_125 Depth=3
	movl	%eax, -36(%rbp)
	cmpl	$0, -28(%rbp)
	jne	.LBB88_154
# %bb.153:                              # %cond.true1076
                                        #   in Loop: Header=BB88_125 Depth=3
	movl	-40(%rbp), %eax
	jmp	.LBB88_155
.LBB88_154:                             # %cond.false1077
                                        #   in Loop: Header=BB88_125 Depth=3
	movl	-100(%rbp), %eax
.LBB88_155:                             # %cond.end1078
                                        #   in Loop: Header=BB88_125 Depth=3
	movl	%eax, -104(%rbp)
.LBB88_156:                             # %if.end1080
                                        #   in Loop: Header=BB88_125 Depth=3
	jmp	.LBB88_157
.LBB88_157:                             # %if.end1081
                                        #   in Loop: Header=BB88_125 Depth=3
	cmpl	$0, -36(%rbp)
	je	.LBB88_162
# %bb.158:                              # %if.then1084
                                        #   in Loop: Header=BB88_125 Depth=3
	movl	-116(%rbp), %ecx
	shll	$2, %ecx
	addl	$16, %ecx
	movl	-24(%rbp), %eax
	sarl	$1, %eax
	movl	-20(%rbp), %edx
	sarl	$2, %edx
	addl	%edx, %eax
	addl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-184(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	cmpl	$1, -36(%rbp)
	jle	.LBB88_160
# %bb.159:                              # %if.then1097
                                        #   in Loop: Header=BB88_125 Depth=3
	movl	-216(%rbp), %eax
	addl	$999999, %eax           # imm = 0xF423F
	movl	%eax, -216(%rbp)
	jmp	.LBB88_161
.LBB88_160:                             # %if.else1099
                                        #   in Loop: Header=BB88_125 Depth=3
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-60(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	-216(%rbp), %eax
	movl	%eax, -216(%rbp)
.LBB88_161:                             # %if.end1106
                                        #   in Loop: Header=BB88_125 Depth=3
	movl	$2, -240(%rbp)
	movl	-36(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movq	-280(%rbp), %rcx
	movslq	-84(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-60(%rbp), %eax
	movq	-304(%rbp), %rcx
	movslq	-84(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	movl	$-1, -60(%rbp)
	movl	-36(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	movl	%eax, -88(%rbp)
.LBB88_162:                             # %if.end1128
                                        #   in Loop: Header=BB88_125 Depth=3
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-220(%rbp), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-88(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-232(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.163:                              # %for.inc1162
                                        #   in Loop: Header=BB88_125 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB88_125
.LBB88_164:                             # %for.end1164
                                        #   in Loop: Header=BB88_123 Depth=2
	movq	-280(%rbp), %rax
	movslq	-84(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.165:                              # %for.inc1167
                                        #   in Loop: Header=BB88_123 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB88_123
.LBB88_166:                             # %for.end1169
                                        #   in Loop: Header=BB88_121 Depth=1
	jmp	.LBB88_167
.LBB88_167:                             # %for.inc1170
                                        #   in Loop: Header=BB88_121 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB88_121
.LBB88_168:                             # %for.end1172
	cmpl	$2, -240(%rbp)
	jne	.LBB88_170
# %bb.169:                              # %if.then1175
	movl	$2, -204(%rbp)
.LBB88_170:                             # %if.end1176
	movl	$0, -24(%rbp)
.LBB88_171:                             # %for.cond1177
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_173 Depth 2
                                        #       Child Loop BB88_175 Depth 3
                                        #         Child Loop BB88_177 Depth 4
                                        #         Child Loop BB88_181 Depth 4
                                        #       Child Loop BB88_187 Depth 3
                                        #         Child Loop BB88_189 Depth 4
                                        #         Child Loop BB88_193 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB88_220
# %bb.172:                              # %for.body1180
                                        #   in Loop: Header=BB88_171 Depth=1
	movl	$0, -20(%rbp)
.LBB88_173:                             # %for.cond1181
                                        #   Parent Loop BB88_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB88_175 Depth 3
                                        #         Child Loop BB88_177 Depth 4
                                        #         Child Loop BB88_181 Depth 4
                                        #       Child Loop BB88_187 Depth 3
                                        #         Child Loop BB88_189 Depth 4
                                        #         Child Loop BB88_193 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB88_218
# %bb.174:                              # %for.body1184
                                        #   in Loop: Header=BB88_173 Depth=2
	movl	$0, -12(%rbp)
.LBB88_175:                             # %for.cond1185
                                        #   Parent Loop BB88_171 Depth=1
                                        #     Parent Loop BB88_173 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB88_177 Depth 4
                                        #         Child Loop BB88_181 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB88_186
# %bb.176:                              # %for.body1188
                                        #   in Loop: Header=BB88_175 Depth=3
	movl	$0, -16(%rbp)
.LBB88_177:                             # %for.cond1189
                                        #   Parent Loop BB88_171 Depth=1
                                        #     Parent Loop BB88_173 Depth=2
                                        #       Parent Loop BB88_175 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB88_180
# %bb.178:                              # %for.body1192
                                        #   in Loop: Header=BB88_177 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.179:                              # %for.inc1202
                                        #   in Loop: Header=BB88_177 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB88_177
.LBB88_180:                             # %for.end1204
                                        #   in Loop: Header=BB88_175 Depth=3
	movl	-80(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-80(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-76(%rbp), %eax
	sarl	$1, %eax
	subl	-68(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-76(%rbp), %eax
	movl	-68(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -132(%rbp)
	movl	$0, -16(%rbp)
.LBB88_181:                             # %for.cond1223
                                        #   Parent Loop BB88_171 Depth=1
                                        #     Parent Loop BB88_173 Depth=2
                                        #       Parent Loop BB88_175 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB88_184
# %bb.182:                              # %for.body1226
                                        #   in Loop: Header=BB88_181 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -92(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-92(%rbp), %rcx
	addl	-144(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-92(%rbp), %rcx
	subl	-144(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	-92(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.183:                              # %for.inc1252
                                        #   in Loop: Header=BB88_181 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB88_181
.LBB88_184:                             # %for.end1254
                                        #   in Loop: Header=BB88_175 Depth=3
	jmp	.LBB88_185
.LBB88_185:                             # %for.inc1255
                                        #   in Loop: Header=BB88_175 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB88_175
.LBB88_186:                             # %for.end1257
                                        #   in Loop: Header=BB88_173 Depth=2
	movl	$0, -16(%rbp)
.LBB88_187:                             # %for.cond1258
                                        #   Parent Loop BB88_171 Depth=1
                                        #     Parent Loop BB88_173 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB88_189 Depth 4
                                        #         Child Loop BB88_193 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB88_216
# %bb.188:                              # %for.body1261
                                        #   in Loop: Header=BB88_187 Depth=3
	movl	$0, -12(%rbp)
.LBB88_189:                             # %for.cond1262
                                        #   Parent Loop BB88_171 Depth=1
                                        #     Parent Loop BB88_173 Depth=2
                                        #       Parent Loop BB88_187 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB88_192
# %bb.190:                              # %for.body1265
                                        #   in Loop: Header=BB88_189 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.191:                              # %for.inc1275
                                        #   in Loop: Header=BB88_189 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB88_189
.LBB88_192:                             # %for.end1277
                                        #   in Loop: Header=BB88_187 Depth=3
	movl	-80(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-80(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-76(%rbp), %eax
	sarl	$1, %eax
	subl	-68(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-76(%rbp), %eax
	movl	-68(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -132(%rbp)
	movl	$0, -12(%rbp)
.LBB88_193:                             # %for.cond1296
                                        #   Parent Loop BB88_171 Depth=1
                                        #     Parent Loop BB88_173 Depth=2
                                        #       Parent Loop BB88_187 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB88_214
# %bb.194:                              # %for.body1299
                                        #   in Loop: Header=BB88_193 Depth=4
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movl	72688(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-144(%rbp,%rdx,4), %edx
	movslq	-52(%rbp), %rsi
	addl	-144(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB88_196
# %bb.195:                              # %cond.true1310
                                        #   in Loop: Header=BB88_193 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB88_197
.LBB88_196:                             # %cond.false1311
                                        #   in Loop: Header=BB88_193 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	addl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB88_197:                             # %cond.end1319
                                        #   in Loop: Header=BB88_193 Depth=4
	cmpl	%ecx, %eax
	jge	.LBB88_199
# %bb.198:                              # %cond.true1323
                                        #   in Loop: Header=BB88_193 Depth=4
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB88_203
.LBB88_199:                             # %cond.false1325
                                        #   in Loop: Header=BB88_193 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	addl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB88_201
# %bb.200:                              # %cond.true1335
                                        #   in Loop: Header=BB88_193 Depth=4
	xorl	%eax, %eax
	jmp	.LBB88_202
.LBB88_201:                             # %cond.false1336
                                        #   in Loop: Header=BB88_193 Depth=4
	movslq	-12(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	addl	-144(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB88_202:                             # %cond.end1344
                                        #   in Loop: Header=BB88_193 Depth=4
.LBB88_203:                             # %cond.end1346
                                        #   in Loop: Header=BB88_193 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movl	-20(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72688(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-144(%rbp,%rdx,4), %edx
	movslq	-52(%rbp), %rsi
	subl	-144(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB88_205
# %bb.204:                              # %cond.true1365
                                        #   in Loop: Header=BB88_193 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB88_206
.LBB88_205:                             # %cond.false1366
                                        #   in Loop: Header=BB88_193 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	subl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB88_206:                             # %cond.end1374
                                        #   in Loop: Header=BB88_193 Depth=4
	cmpl	%ecx, %eax
	jge	.LBB88_208
# %bb.207:                              # %cond.true1378
                                        #   in Loop: Header=BB88_193 Depth=4
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB88_212
.LBB88_208:                             # %cond.false1380
                                        #   in Loop: Header=BB88_193 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	subl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB88_210
# %bb.209:                              # %cond.true1390
                                        #   in Loop: Header=BB88_193 Depth=4
	xorl	%eax, %eax
	jmp	.LBB88_211
.LBB88_210:                             # %cond.false1391
                                        #   in Loop: Header=BB88_193 Depth=4
	movslq	-12(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	subl	-144(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB88_211:                             # %cond.end1399
                                        #   in Loop: Header=BB88_193 Depth=4
.LBB88_212:                             # %cond.end1401
                                        #   in Loop: Header=BB88_193 Depth=4
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.213:                              # %for.inc1410
                                        #   in Loop: Header=BB88_193 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB88_193
.LBB88_214:                             # %for.end1412
                                        #   in Loop: Header=BB88_187 Depth=3
	jmp	.LBB88_215
.LBB88_215:                             # %for.inc1413
                                        #   in Loop: Header=BB88_187 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB88_187
.LBB88_216:                             # %for.end1415
                                        #   in Loop: Header=BB88_173 Depth=2
	jmp	.LBB88_217
.LBB88_217:                             # %for.inc1416
                                        #   in Loop: Header=BB88_173 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB88_173
.LBB88_218:                             # %for.end1418
                                        #   in Loop: Header=BB88_171 Depth=1
	jmp	.LBB88_219
.LBB88_219:                             # %for.inc1419
                                        #   in Loop: Header=BB88_171 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB88_171
.LBB88_220:                             # %for.end1421
	movl	$0, -12(%rbp)
.LBB88_221:                             # %for.cond1422
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_223 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB88_228
# %bb.222:                              # %for.body1425
                                        #   in Loop: Header=BB88_221 Depth=1
	movl	$0, -16(%rbp)
.LBB88_223:                             # %for.cond1426
                                        #   Parent Loop BB88_221 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB88_226
# %bb.224:                              # %for.body1429
                                        #   in Loop: Header=BB88_223 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-116(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.225:                              # %for.inc1444
                                        #   in Loop: Header=BB88_223 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB88_223
.LBB88_226:                             # %for.end1446
                                        #   in Loop: Header=BB88_221 Depth=1
	jmp	.LBB88_227
.LBB88_227:                             # %for.inc1447
                                        #   in Loop: Header=BB88_221 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB88_221
.LBB88_228:                             # %for.end1449
	movl	-204(%rbp), %ebx
	cmpl	$1320480234, -268(%rbp) # imm = 0x4EB4EDEA
	jne	.LBB88_230
.LBB88_229:
	movl	%ebx, %eax
	addq	$552, %rsp              # imm = 0x228
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB88_230:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB88_229
.Lfunc_end88:
	.size	dct_chroma_sp.79, .Lfunc_end88-dct_chroma_sp.79
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma.80           # -- Begin function dct_chroma.80
	.p2align	4, 0x90
	.type	dct_chroma.80,@function
dct_chroma.80:                          # @dct_chroma.80
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$424, %rsp              # imm = 0x1A8
	.cfi_offset %rbx, -24
	movl	$185329090, -380(%rbp)  # imm = 0xB0BE5C2
	movl	%edi, -20(%rbp)
	movl	%esi, -136(%rbp)
	movl	$0, -204(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -192(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -224(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -376(%rbp)
	movq	-192(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB89_3
# %bb.1:                                # %lor.lhs.false
	movq	-192(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB89_3
# %bb.2:                                # %lor.rhs
	movq	-192(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB89_3:                               # %lor.end
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -128(%rbp)
	movl	-20(%rbp), %esi
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	imull	%eax, %esi
	movl	%esi, -196(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern, %rax
	movq	%rax, -432(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+8, %rax
	movq	%rax, -424(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+16, %rax
	movq	%rax, -416(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+24, %rax
	movq	%rax, -408(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	movl	%eax, -144(%rbp)
	movl	$0, -104(%rbp)
	movl	$0, -132(%rbp)
	movl	$0, -212(%rbp)
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	cmpl	$0, %eax
	jne	.LBB89_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%cl
.LBB89_5:                               # %land.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -108(%rbp)
	movq	-192(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	img, %rdx
	movslq	-20(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	movl	%ecx, -124(%rbp)
	movl	-124(%rbp), %ecx
	movq	img, %rdx
	subl	72672(%rdx), %eax
	cmpl	%eax, %ecx
	jge	.LBB89_7
# %bb.6:                                # %cond.true
	xorl	%eax, %eax
	movq	img, %rcx
	subl	72672(%rcx), %eax
	jmp	.LBB89_11
.LBB89_7:                               # %cond.false
	cmpl	$51, -124(%rbp)
	jle	.LBB89_9
# %bb.8:                                # %cond.true24
	movl	$51, %eax
	jmp	.LBB89_10
.LBB89_9:                               # %cond.false25
	movl	-124(%rbp), %eax
.LBB89_10:                              # %cond.end
.LBB89_11:                              # %cond.end26
	movl	%eax, -124(%rbp)
	cmpl	$0, -124(%rbp)
	jge	.LBB89_13
# %bb.12:                               # %cond.true29
	movl	-124(%rbp), %eax
	jmp	.LBB89_14
.LBB89_13:                              # %cond.false30
	movl	-124(%rbp), %eax
	subl	$0, %eax
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB89_14:                              # %cond.end34
	movl	%eax, -124(%rbp)
	movl	-124(%rbp), %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movl	-124(%rbp), %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -76(%rbp)
	movl	-40(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -180(%rbp)
	movq	img, %rax
	cmpl	$2, 72700(%rax)
	jne	.LBB89_16
# %bb.15:                               # %if.then
	movl	-124(%rbp), %eax
	addl	$3, %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -104(%rbp)
	movl	-124(%rbp), %eax
	addl	$3, %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -132(%rbp)
	movl	-104(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -212(%rbp)
.LBB89_16:                              # %if.end
	movl	$0, -28(%rbp)
.LBB89_17:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_19 Depth 2
                                        #       Child Loop BB89_21 Depth 3
                                        #         Child Loop BB89_25 Depth 4
                                        #       Child Loop BB89_31 Depth 3
                                        #         Child Loop BB89_35 Depth 4
	movl	-28(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB89_44
# %bb.18:                               # %for.body
                                        #   in Loop: Header=BB89_17 Depth=1
	movl	$0, -24(%rbp)
.LBB89_19:                              # %for.cond56
                                        #   Parent Loop BB89_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB89_21 Depth 3
                                        #         Child Loop BB89_25 Depth 4
                                        #       Child Loop BB89_31 Depth 3
                                        #         Child Loop BB89_35 Depth 4
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB89_42
# %bb.20:                               # %for.body59
                                        #   in Loop: Header=BB89_19 Depth=2
	movl	$0, -12(%rbp)
.LBB89_21:                              # %for.cond60
                                        #   Parent Loop BB89_17 Depth=1
                                        #     Parent Loop BB89_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB89_25 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB89_23
# %bb.22:                               # %land.rhs63
                                        #   in Loop: Header=BB89_21 Depth=3
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB89_23:                              # %land.end64
                                        #   in Loop: Header=BB89_21 Depth=3
	testb	$1, %al
	jne	.LBB89_24
	jmp	.LBB89_30
.LBB89_24:                              # %for.body66
                                        #   in Loop: Header=BB89_21 Depth=3
	movl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -148(%rbp)
	movl	$0, -16(%rbp)
.LBB89_25:                              # %for.cond68
                                        #   Parent Loop BB89_17 Depth=1
                                        #     Parent Loop BB89_19 Depth=2
                                        #       Parent Loop BB89_21 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB89_28
# %bb.26:                               # %for.body71
                                        #   in Loop: Header=BB89_25 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-148(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-148(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-120(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.27:                               # %for.inc
                                        #   in Loop: Header=BB89_25 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB89_25
.LBB89_28:                              # %for.end
                                        #   in Loop: Header=BB89_21 Depth=3
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.29:                               # %for.inc139
                                        #   in Loop: Header=BB89_21 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB89_21
.LBB89_30:                              # %for.end141
                                        #   in Loop: Header=BB89_19 Depth=2
	movl	$0, -16(%rbp)
.LBB89_31:                              # %for.cond142
                                        #   Parent Loop BB89_17 Depth=1
                                        #     Parent Loop BB89_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB89_35 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB89_33
# %bb.32:                               # %land.rhs145
                                        #   in Loop: Header=BB89_31 Depth=3
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB89_33:                              # %land.end148
                                        #   in Loop: Header=BB89_31 Depth=3
	testb	$1, %al
	jne	.LBB89_34
	jmp	.LBB89_40
.LBB89_34:                              # %for.body150
                                        #   in Loop: Header=BB89_31 Depth=3
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	$0, -12(%rbp)
.LBB89_35:                              # %for.cond152
                                        #   Parent Loop BB89_17 Depth=1
                                        #     Parent Loop BB89_19 Depth=2
                                        #       Parent Loop BB89_31 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB89_38
# %bb.36:                               # %for.body155
                                        #   in Loop: Header=BB89_35 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-72(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.37:                               # %for.inc187
                                        #   in Loop: Header=BB89_35 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB89_35
.LBB89_38:                              # %for.end189
                                        #   in Loop: Header=BB89_31 Depth=3
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.39:                               # %for.inc228
                                        #   in Loop: Header=BB89_31 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB89_31
.LBB89_40:                              # %for.end230
                                        #   in Loop: Header=BB89_19 Depth=2
	jmp	.LBB89_41
.LBB89_41:                              # %for.inc231
                                        #   in Loop: Header=BB89_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB89_19
.LBB89_42:                              # %for.end233
                                        #   in Loop: Header=BB89_17 Depth=1
	jmp	.LBB89_43
.LBB89_43:                              # %for.inc234
                                        #   in Loop: Header=BB89_17 Depth=1
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB89_17
.LBB89_44:                              # %for.end236
	cmpl	$1, -144(%rbp)
	jne	.LBB89_76
# %bb.45:                               # %if.then239
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -176(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -172(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -168(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -164(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -36(%rbp)
.LBB89_46:                              # %for.cond304
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -36(%rbp)
	jge	.LBB89_62
# %bb.47:                               # %for.body307
                                        #   in Loop: Header=BB89_46 Depth=1
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -140(%rbp)
	cmpl	$1, -128(%rbp)
	jne	.LBB89_49
# %bb.48:                               # %if.then311
                                        #   in Loop: Header=BB89_46 Depth=1
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB89_50
.LBB89_49:                              # %if.else
                                        #   in Loop: Header=BB89_46 Depth=1
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB89_50:                              # %if.end349
                                        #   in Loop: Header=BB89_46 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB89_55
# %bb.51:                               # %land.lhs.true
                                        #   in Loop: Header=BB89_46 Depth=1
	movq	img, %rax
	cmpl	$4, 40(%rax)
	jge	.LBB89_55
# %bb.52:                               # %if.then355
                                        #   in Loop: Header=BB89_46 Depth=1
	cmpl	$2063, -44(%rbp)        # imm = 0x80F
	jle	.LBB89_54
# %bb.53:                               # %if.then358
                                        #   in Loop: Header=BB89_46 Depth=1
	movl	$2063, -44(%rbp)        # imm = 0x80F
.LBB89_54:                              # %if.end359
                                        #   in Loop: Header=BB89_46 Depth=1
	jmp	.LBB89_55
.LBB89_55:                              # %if.end360
                                        #   in Loop: Header=BB89_46 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB89_60
# %bb.56:                               # %if.then363
                                        #   in Loop: Header=BB89_46 Depth=1
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
                                        # kill: def $cl killed $ecx
	movl	$983040, %eax           # imm = 0xF0000
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-136(%rbp), %eax
	jle	.LBB89_58
# %bb.57:                               # %cond.true369
                                        #   in Loop: Header=BB89_46 Depth=1
	movl	$1, %eax
	jmp	.LBB89_59
.LBB89_58:                              # %cond.false370
                                        #   in Loop: Header=BB89_46 Depth=1
	movl	-136(%rbp), %eax
.LBB89_59:                              # %cond.end371
                                        #   in Loop: Header=BB89_46 Depth=1
	movl	%eax, -136(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	$-1, -100(%rbp)
	movl	-44(%rbp), %edi
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %esi
	callq	sign
	movl	%eax, -140(%rbp)
.LBB89_60:                              # %if.end384
                                        #   in Loop: Header=BB89_46 Depth=1
	movl	-140(%rbp), %eax
	movslq	-36(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.61:                               # %for.inc387
                                        #   in Loop: Header=BB89_46 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB89_46
.LBB89_62:                              # %for.end389
	movq	-224(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -16(%rbp)
.LBB89_63:                              # %for.cond424
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB89_75
# %bb.64:                               # %for.body427
                                        #   in Loop: Header=BB89_63 Depth=1
	cmpl	$5, -40(%rbp)
	jge	.LBB89_69
# %bb.65:                               # %if.then430
                                        #   in Loop: Header=BB89_63 Depth=1
	cmpl	$1, -128(%rbp)
	jne	.LBB89_67
# %bb.66:                               # %if.then433
                                        #   in Loop: Header=BB89_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	$5, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	jmp	.LBB89_68
.LBB89_67:                              # %if.else447
                                        #   in Loop: Header=BB89_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	$5, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
.LBB89_68:                              # %if.end461
                                        #   in Loop: Header=BB89_63 Depth=1
	jmp	.LBB89_73
.LBB89_69:                              # %if.else462
                                        #   in Loop: Header=BB89_63 Depth=1
	cmpl	$1, -128(%rbp)
	jne	.LBB89_71
# %bb.70:                               # %if.then465
                                        #   in Loop: Header=BB89_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-40(%rbp), %ecx
	subl	$5, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	jmp	.LBB89_72
.LBB89_71:                              # %if.else479
                                        #   in Loop: Header=BB89_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-40(%rbp), %ecx
	subl	$5, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
.LBB89_72:                              # %if.end493
                                        #   in Loop: Header=BB89_63 Depth=1
	jmp	.LBB89_73
.LBB89_73:                              # %if.end494
                                        #   in Loop: Header=BB89_63 Depth=1
	jmp	.LBB89_74
.LBB89_74:                              # %for.inc495
                                        #   in Loop: Header=BB89_63 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB89_63
.LBB89_75:                              # %for.end497
	movl	-176(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	movl	-172(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13368(%rcx)
	movl	-168(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13128(%rcx)
	movl	-164(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13384(%rcx)
	jmp	.LBB89_213
.LBB89_76:                              # %if.else514
	cmpl	$2, -144(%rbp)
	jne	.LBB89_127
# %bb.77:                               # %if.then517
	movl	$0, -12(%rbp)
.LBB89_78:                              # %for.cond518
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_80 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB89_85
# %bb.79:                               # %for.body522
                                        #   in Loop: Header=BB89_78 Depth=1
	movl	$0, -16(%rbp)
.LBB89_80:                              # %for.cond523
                                        #   Parent Loop BB89_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB89_83
# %bb.81:                               # %for.body527
                                        #   in Loop: Header=BB89_80 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$4, %rcx
	leaq	-368(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.82:                               # %for.inc539
                                        #   in Loop: Header=BB89_80 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB89_80
.LBB89_83:                              # %for.end541
                                        #   in Loop: Header=BB89_78 Depth=1
	jmp	.LBB89_84
.LBB89_84:                              # %for.inc542
                                        #   in Loop: Header=BB89_78 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB89_78
.LBB89_85:                              # %for.end544
	movl	-368(%rbp), %eax
	addl	-352(%rbp), %eax
	movl	%eax, -304(%rbp)
	movl	-364(%rbp), %eax
	addl	-348(%rbp), %eax
	movl	%eax, -300(%rbp)
	movl	-360(%rbp), %eax
	addl	-344(%rbp), %eax
	movl	%eax, -296(%rbp)
	movl	-356(%rbp), %eax
	addl	-340(%rbp), %eax
	movl	%eax, -292(%rbp)
	movl	-368(%rbp), %eax
	subl	-352(%rbp), %eax
	movl	%eax, -288(%rbp)
	movl	-364(%rbp), %eax
	subl	-348(%rbp), %eax
	movl	%eax, -284(%rbp)
	movl	-360(%rbp), %eax
	subl	-344(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-356(%rbp), %eax
	subl	-340(%rbp), %eax
	movl	%eax, -276(%rbp)
	movl	$0, -16(%rbp)
.LBB89_86:                              # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_88 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB89_93
# %bb.87:                               # %for.body604
                                        #   in Loop: Header=BB89_86 Depth=1
	movl	$0, -12(%rbp)
.LBB89_88:                              # %for.cond605
                                        #   Parent Loop BB89_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB89_91
# %bb.89:                               # %for.body608
                                        #   in Loop: Header=BB89_88 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-32(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-32(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.90:                               # %for.inc632
                                        #   in Loop: Header=BB89_88 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB89_88
.LBB89_91:                              # %for.end634
                                        #   in Loop: Header=BB89_86 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, 8(%rsi)
	movl	-52(%rbp), %eax
	addl	-56(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-52(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movl	%eax, 12(%rdx)
# %bb.92:                               # %for.inc659
                                        #   in Loop: Header=BB89_86 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB89_86
.LBB89_93:                              # %for.end661
	movl	$-1, -100(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -36(%rbp)
.LBB89_94:                              # %for.cond662
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -36(%rbp)
	jge	.LBB89_105
# %bb.95:                               # %for.body665
                                        #   in Loop: Header=BB89_94 Depth=1
	movslq	-36(%rbp), %rax
	movzbl	SCAN_YUV422(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SCAN_YUV422+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	cmpl	$1, -128(%rbp)
	jne	.LBB89_97
# %bb.96:                               # %if.then677
                                        #   in Loop: Header=BB89_94 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-104(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-212(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB89_98
.LBB89_97:                              # %if.else700
                                        #   in Loop: Header=BB89_94 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-104(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-212(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB89_98:                              # %if.end723
                                        #   in Loop: Header=BB89_94 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB89_103
# %bb.99:                               # %if.then726
                                        #   in Loop: Header=BB89_94 Depth=1
	movl	-20(%rbp), %ecx
	shll	$3, %ecx
                                        # kill: def $cl killed $ecx
	movl	$16711680, %eax         # imm = 0xFF0000
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-136(%rbp), %eax
	jle	.LBB89_101
# %bb.100:                              # %cond.true734
                                        #   in Loop: Header=BB89_94 Depth=1
	movl	$1, %eax
	jmp	.LBB89_102
.LBB89_101:                             # %cond.false735
                                        #   in Loop: Header=BB89_94 Depth=1
	movl	-136(%rbp), %eax
.LBB89_102:                             # %cond.end736
                                        #   in Loop: Header=BB89_94 Depth=1
	movl	%eax, -136(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	$-1, -100(%rbp)
.LBB89_103:                             # %if.end748
                                        #   in Loop: Header=BB89_94 Depth=1
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-368(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.104:                              # %for.inc758
                                        #   in Loop: Header=BB89_94 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB89_94
.LBB89_105:                             # %for.end760
	movq	-224(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-368(%rbp), %eax
	addl	-352(%rbp), %eax
	movl	%eax, -304(%rbp)
	movl	-364(%rbp), %eax
	addl	-348(%rbp), %eax
	movl	%eax, -300(%rbp)
	movl	-360(%rbp), %eax
	addl	-344(%rbp), %eax
	movl	%eax, -296(%rbp)
	movl	-356(%rbp), %eax
	addl	-340(%rbp), %eax
	movl	%eax, -292(%rbp)
	movl	-368(%rbp), %eax
	subl	-352(%rbp), %eax
	movl	%eax, -288(%rbp)
	movl	-364(%rbp), %eax
	subl	-348(%rbp), %eax
	movl	%eax, -284(%rbp)
	movl	-360(%rbp), %eax
	subl	-344(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-356(%rbp), %eax
	subl	-340(%rbp), %eax
	movl	%eax, -276(%rbp)
	movl	$0, -16(%rbp)
.LBB89_106:                             # %for.cond819
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_108 Depth 2
                                        #     Child Loop BB89_112 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB89_126
# %bb.107:                              # %for.body822
                                        #   in Loop: Header=BB89_106 Depth=1
	movl	$0, -12(%rbp)
.LBB89_108:                             # %for.cond823
                                        #   Parent Loop BB89_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB89_111
# %bb.109:                              # %for.body826
                                        #   in Loop: Header=BB89_108 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.110:                              # %for.inc833
                                        #   in Loop: Header=BB89_108 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB89_108
.LBB89_111:                             # %for.end835
                                        #   in Loop: Header=BB89_106 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB89_112:                             # %for.cond852
                                        #   Parent Loop BB89_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB89_124
# %bb.113:                              # %for.body855
                                        #   in Loop: Header=BB89_112 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	cmpl	$4, -104(%rbp)
	jge	.LBB89_118
# %bb.114:                              # %if.then859
                                        #   in Loop: Header=BB89_112 Depth=2
	cmpl	$1, -128(%rbp)
	jne	.LBB89_116
# %bb.115:                              # %if.then862
                                        #   in Loop: Header=BB89_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-132(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-104(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-104(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
	jmp	.LBB89_117
.LBB89_116:                             # %if.else915
                                        #   in Loop: Header=BB89_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-132(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-104(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-104(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
.LBB89_117:                             # %if.end968
                                        #   in Loop: Header=BB89_112 Depth=2
	jmp	.LBB89_122
.LBB89_118:                             # %if.else969
                                        #   in Loop: Header=BB89_112 Depth=2
	cmpl	$1, -128(%rbp)
	jne	.LBB89_120
# %bb.119:                              # %if.then972
                                        #   in Loop: Header=BB89_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-104(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-104(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB89_121
.LBB89_120:                             # %if.else1019
                                        #   in Loop: Header=BB89_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-104(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-104(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB89_121:                             # %if.end1066
                                        #   in Loop: Header=BB89_112 Depth=2
	jmp	.LBB89_122
.LBB89_122:                             # %if.end1067
                                        #   in Loop: Header=BB89_112 Depth=2
	jmp	.LBB89_123
.LBB89_123:                             # %for.inc1068
                                        #   in Loop: Header=BB89_112 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB89_112
.LBB89_124:                             # %for.end1070
                                        #   in Loop: Header=BB89_106 Depth=1
	jmp	.LBB89_125
.LBB89_125:                             # %for.inc1071
                                        #   in Loop: Header=BB89_106 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB89_106
.LBB89_126:                             # %for.end1073
	jmp	.LBB89_212
.LBB89_127:                             # %if.else1074
	cmpl	$3, -144(%rbp)
	jne	.LBB89_211
# %bb.128:                              # %if.then1077
	movl	$0, -12(%rbp)
.LBB89_129:                             # %for.cond1078
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_131 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB89_136
# %bb.130:                              # %for.body1082
                                        #   in Loop: Header=BB89_129 Depth=1
	movl	$0, -16(%rbp)
.LBB89_131:                             # %for.cond1083
                                        #   Parent Loop BB89_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB89_134
# %bb.132:                              # %for.body1087
                                        #   in Loop: Header=BB89_131 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.133:                              # %for.inc1099
                                        #   in Loop: Header=BB89_131 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB89_131
.LBB89_134:                             # %for.end1101
                                        #   in Loop: Header=BB89_129 Depth=1
	jmp	.LBB89_135
.LBB89_135:                             # %for.inc1102
                                        #   in Loop: Header=BB89_129 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB89_129
.LBB89_136:                             # %for.end1104
	movl	$0, -12(%rbp)
.LBB89_137:                             # %for.cond1105
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_141 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB89_139
# %bb.138:                              # %land.rhs1108
                                        #   in Loop: Header=BB89_137 Depth=1
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB89_139:                             # %land.end1111
                                        #   in Loop: Header=BB89_137 Depth=1
	testb	$1, %al
	jne	.LBB89_140
	jmp	.LBB89_146
.LBB89_140:                             # %for.body1113
                                        #   in Loop: Header=BB89_137 Depth=1
	movl	$0, -16(%rbp)
.LBB89_141:                             # %for.cond1114
                                        #   Parent Loop BB89_137 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB89_144
# %bb.142:                              # %for.body1117
                                        #   in Loop: Header=BB89_141 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-120(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-120(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-120(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.143:                              # %for.inc1141
                                        #   in Loop: Header=BB89_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB89_141
.LBB89_144:                             # %for.end1143
                                        #   in Loop: Header=BB89_137 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -304(%rbp,%rcx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
	movl	-52(%rbp), %eax
	addl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -288(%rbp,%rcx,4)
	movl	-52(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -256(%rbp,%rcx,4)
# %bb.145:                              # %for.inc1168
                                        #   in Loop: Header=BB89_137 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB89_137
.LBB89_146:                             # %for.end1170
	movl	$0, -16(%rbp)
.LBB89_147:                             # %for.cond1171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_151 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB89_149
# %bb.148:                              # %land.rhs1174
                                        #   in Loop: Header=BB89_147 Depth=1
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB89_149:                             # %land.end1177
                                        #   in Loop: Header=BB89_147 Depth=1
	testb	$1, %al
	jne	.LBB89_150
	jmp	.LBB89_156
.LBB89_150:                             # %for.body1179
                                        #   in Loop: Header=BB89_147 Depth=1
	movl	$0, -12(%rbp)
.LBB89_151:                             # %for.cond1180
                                        #   Parent Loop BB89_147 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB89_154
# %bb.152:                              # %for.body1183
                                        #   in Loop: Header=BB89_151 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-32(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-32(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.153:                              # %for.inc1207
                                        #   in Loop: Header=BB89_151 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB89_151
.LBB89_154:                             # %for.end1209
                                        #   in Loop: Header=BB89_147 Depth=1
	movl	-64(%rbp), %ecx
	addl	-60(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-304(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-64(%rbp), %ecx
	subl	-60(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-52(%rbp), %ecx
	addl	-56(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-52(%rbp), %ecx
	subl	-56(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.155:                              # %for.inc1238
                                        #   in Loop: Header=BB89_147 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB89_147
.LBB89_156:                             # %for.end1240
	movl	$-1, -100(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -36(%rbp)
.LBB89_157:                             # %for.cond1241
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -36(%rbp)
	jge	.LBB89_173
# %bb.158:                              # %for.body1244
                                        #   in Loop: Header=BB89_157 Depth=1
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB89_160
# %bb.159:                              # %if.then1255
                                        #   in Loop: Header=BB89_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -44(%rbp)
	jmp	.LBB89_164
.LBB89_160:                             # %if.else1261
                                        #   in Loop: Header=BB89_157 Depth=1
	cmpl	$1, -128(%rbp)
	jne	.LBB89_162
# %bb.161:                              # %if.then1264
                                        #   in Loop: Header=BB89_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB89_163
.LBB89_162:                             # %if.else1287
                                        #   in Loop: Header=BB89_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB89_163:                             # %if.end1310
                                        #   in Loop: Header=BB89_157 Depth=1
	jmp	.LBB89_164
.LBB89_164:                             # %if.end1311
                                        #   in Loop: Header=BB89_157 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB89_169
# %bb.165:                              # %if.then1314
                                        #   in Loop: Header=BB89_157 Depth=1
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $rcx
	movl	$4294901760, %eax       # imm = 0xFFFF0000
	shlq	%cl, %rax
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-136(%rbp), %eax
	jle	.LBB89_167
# %bb.166:                              # %cond.true1321
                                        #   in Loop: Header=BB89_157 Depth=1
	movl	$1, %eax
	jmp	.LBB89_168
.LBB89_167:                             # %cond.false1322
                                        #   in Loop: Header=BB89_157 Depth=1
	movl	-136(%rbp), %eax
.LBB89_168:                             # %cond.end1323
                                        #   in Loop: Header=BB89_157 Depth=1
	movl	%eax, -136(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	$-1, -100(%rbp)
.LBB89_169:                             # %if.end1335
                                        #   in Loop: Header=BB89_157 Depth=1
	cmpl	$0, -108(%rbp)
	jne	.LBB89_171
# %bb.170:                              # %if.then1337
                                        #   in Loop: Header=BB89_157 Depth=1
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB89_171:                             # %if.end1347
                                        #   in Loop: Header=BB89_157 Depth=1
	jmp	.LBB89_172
.LBB89_172:                             # %for.inc1348
                                        #   in Loop: Header=BB89_157 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB89_157
.LBB89_173:                             # %for.end1350
	movq	-224(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB89_174:                             # %for.cond1353
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_178 Depth 2
                                        #     Child Loop BB89_182 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB89_176
# %bb.175:                              # %land.rhs1356
                                        #   in Loop: Header=BB89_174 Depth=1
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB89_176:                             # %land.end1359
                                        #   in Loop: Header=BB89_174 Depth=1
	testb	$1, %al
	jne	.LBB89_177
	jmp	.LBB89_187
.LBB89_177:                             # %for.body1361
                                        #   in Loop: Header=BB89_174 Depth=1
	movl	$0, -16(%rbp)
.LBB89_178:                             # %for.cond1362
                                        #   Parent Loop BB89_174 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB89_181
# %bb.179:                              # %for.body1365
                                        #   in Loop: Header=BB89_178 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.180:                              # %for.inc1372
                                        #   in Loop: Header=BB89_178 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB89_178
.LBB89_181:                             # %for.end1374
                                        #   in Loop: Header=BB89_174 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB89_182:                             # %for.cond1391
                                        #   Parent Loop BB89_174 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB89_185
# %bb.183:                              # %for.body1394
                                        #   in Loop: Header=BB89_182 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movslq	-120(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.184:                              # %for.inc1414
                                        #   in Loop: Header=BB89_182 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB89_182
.LBB89_185:                             # %for.end1416
                                        #   in Loop: Header=BB89_174 Depth=1
	jmp	.LBB89_186
.LBB89_186:                             # %for.inc1417
                                        #   in Loop: Header=BB89_174 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB89_174
.LBB89_187:                             # %for.end1419
	movl	$0, -16(%rbp)
.LBB89_188:                             # %for.cond1420
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_192 Depth 2
                                        #     Child Loop BB89_196 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB89_190
# %bb.189:                              # %land.rhs1423
                                        #   in Loop: Header=BB89_188 Depth=1
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB89_190:                             # %land.end1426
                                        #   in Loop: Header=BB89_188 Depth=1
	testb	$1, %al
	jne	.LBB89_191
	jmp	.LBB89_210
.LBB89_191:                             # %for.body1428
                                        #   in Loop: Header=BB89_188 Depth=1
	movl	$0, -12(%rbp)
.LBB89_192:                             # %for.cond1429
                                        #   Parent Loop BB89_188 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB89_195
# %bb.193:                              # %for.body1432
                                        #   in Loop: Header=BB89_192 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.194:                              # %for.inc1439
                                        #   in Loop: Header=BB89_192 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB89_192
.LBB89_195:                             # %for.end1441
                                        #   in Loop: Header=BB89_188 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB89_196:                             # %for.cond1458
                                        #   Parent Loop BB89_188 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB89_208
# %bb.197:                              # %for.body1461
                                        #   in Loop: Header=BB89_196 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	cmpl	$4, -40(%rbp)
	jge	.LBB89_202
# %bb.198:                              # %if.then1465
                                        #   in Loop: Header=BB89_196 Depth=2
	cmpl	$1, -128(%rbp)
	jne	.LBB89_200
# %bb.199:                              # %if.then1468
                                        #   in Loop: Header=BB89_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-76(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-40(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-40(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
	jmp	.LBB89_201
.LBB89_200:                             # %if.else1521
                                        #   in Loop: Header=BB89_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-76(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-40(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-40(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
.LBB89_201:                             # %if.end1574
                                        #   in Loop: Header=BB89_196 Depth=2
	jmp	.LBB89_206
.LBB89_202:                             # %if.else1575
                                        #   in Loop: Header=BB89_196 Depth=2
	cmpl	$1, -128(%rbp)
	jne	.LBB89_204
# %bb.203:                              # %if.then1578
                                        #   in Loop: Header=BB89_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB89_205
.LBB89_204:                             # %if.else1625
                                        #   in Loop: Header=BB89_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB89_205:                             # %if.end1672
                                        #   in Loop: Header=BB89_196 Depth=2
	jmp	.LBB89_206
.LBB89_206:                             # %if.end1673
                                        #   in Loop: Header=BB89_196 Depth=2
	jmp	.LBB89_207
.LBB89_207:                             # %for.inc1674
                                        #   in Loop: Header=BB89_196 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB89_196
.LBB89_208:                             # %for.end1676
                                        #   in Loop: Header=BB89_188 Depth=1
	jmp	.LBB89_209
.LBB89_209:                             # %for.inc1677
                                        #   in Loop: Header=BB89_188 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB89_188
.LBB89_210:                             # %for.end1679
	jmp	.LBB89_211
.LBB89_211:                             # %if.end1680
	jmp	.LBB89_212
.LBB89_212:                             # %if.end1681
	jmp	.LBB89_213
.LBB89_213:                             # %if.end1682
	movl	$0, -200(%rbp)
	movl	$0, -208(%rbp)
	movl	$0, -116(%rbp)
.LBB89_214:                             # %for.cond1683
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_216 Depth 2
                                        #       Child Loop BB89_218 Depth 3
	movl	-116(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB89_256
# %bb.215:                              # %for.body1688
                                        #   in Loop: Header=BB89_214 Depth=1
	movl	$0, -112(%rbp)
.LBB89_216:                             # %for.cond1689
                                        #   Parent Loop BB89_214 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB89_218 Depth 3
	cmpl	$4, -112(%rbp)
	jge	.LBB89_254
# %bb.217:                              # %for.body1692
                                        #   in Loop: Header=BB89_216 Depth=2
	movslq	-144(%rbp), %rax
	shlq	$4, %rax
	movabsq	$hor_offset, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -24(%rbp)
	movslq	-144(%rbp), %rax
	shlq	$4, %rax
	movabsq	$ver_offset, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$4, %ecx
	addl	-196(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -232(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$4, %ecx
	addl	-196(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -392(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -68(%rbp)
	movl	$1, -36(%rbp)
.LBB89_218:                             # %for.cond1722
                                        #   Parent Loop BB89_214 Depth=1
                                        #     Parent Loop BB89_216 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -36(%rbp)
	jge	.LBB89_252
# %bb.219:                              # %for.body1725
                                        #   in Loop: Header=BB89_218 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB89_222
# %bb.220:                              # %lor.lhs.false1727
                                        #   in Loop: Header=BB89_218 Depth=3
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB89_223
# %bb.221:                              # %land.lhs.true1729
                                        #   in Loop: Header=BB89_218 Depth=3
	movq	-192(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB89_223
.LBB89_222:                             # %if.then1731
                                        #   in Loop: Header=BB89_218 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB89_224
.LBB89_223:                             # %if.else1740
                                        #   in Loop: Header=BB89_218 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB89_224:                             # %if.end1749
                                        #   in Loop: Header=BB89_218 Depth=3
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -140(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB89_226
# %bb.225:                              # %if.then1752
                                        #   in Loop: Header=BB89_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -44(%rbp)
	jmp	.LBB89_230
.LBB89_226:                             # %if.else1761
                                        #   in Loop: Header=BB89_218 Depth=3
	cmpl	$1, -128(%rbp)
	jne	.LBB89_228
# %bb.227:                              # %if.then1764
                                        #   in Loop: Header=BB89_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-180(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB89_229
.LBB89_228:                             # %if.else1792
                                        #   in Loop: Header=BB89_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-180(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB89_229:                             # %if.end1820
                                        #   in Loop: Header=BB89_218 Depth=3
	jmp	.LBB89_230
.LBB89_230:                             # %if.end1821
                                        #   in Loop: Header=BB89_218 Depth=3
	cmpl	$0, -44(%rbp)
	je	.LBB89_248
# %bb.231:                              # %if.then1824
                                        #   in Loop: Header=BB89_218 Depth=3
	movl	-116(%rbp), %eax
	addl	-196(%rbp), %eax
	cltq
	shlq	$2, %rax
	movabsq	$cbp_blk_chroma, %rcx
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $rcx
	movl	$1, %eax
	shlq	%cl, %rax
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	cmpl	$1, -44(%rbp)
	jg	.LBB89_233
# %bb.232:                              # %lor.lhs.false1837
                                        #   in Loop: Header=BB89_218 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB89_234
.LBB89_233:                             # %if.then1839
                                        #   in Loop: Header=BB89_218 Depth=3
	movl	-200(%rbp), %eax
	addl	$999999, %eax           # imm = 0xF423F
	movl	%eax, -200(%rbp)
	jmp	.LBB89_235
.LBB89_234:                             # %if.else1841
                                        #   in Loop: Header=BB89_218 Depth=3
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-100(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	-200(%rbp), %eax
	movl	%eax, -200(%rbp)
.LBB89_235:                             # %if.end1848
                                        #   in Loop: Header=BB89_218 Depth=3
	movl	$2, -208(%rbp)
	movl	-44(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-232(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-392(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	$-1, -100(%rbp)
	movl	-44(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -44(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB89_237
# %bb.236:                              # %if.then1871
                                        #   in Loop: Header=BB89_218 Depth=3
	movl	-44(%rbp), %eax
	movl	%eax, -140(%rbp)
	jmp	.LBB89_247
.LBB89_237:                             # %if.else1872
                                        #   in Loop: Header=BB89_218 Depth=3
	cmpl	$4, -40(%rbp)
	jge	.LBB89_242
# %bb.238:                              # %if.then1875
                                        #   in Loop: Header=BB89_218 Depth=3
	cmpl	$1, -128(%rbp)
	jne	.LBB89_240
# %bb.239:                              # %if.then1878
                                        #   in Loop: Header=BB89_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -140(%rbp)
	jmp	.LBB89_241
.LBB89_240:                             # %if.else1893
                                        #   in Loop: Header=BB89_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -140(%rbp)
.LBB89_241:                             # %if.end1908
                                        #   in Loop: Header=BB89_218 Depth=3
	jmp	.LBB89_246
.LBB89_242:                             # %if.else1909
                                        #   in Loop: Header=BB89_218 Depth=3
	cmpl	$1, -128(%rbp)
	jne	.LBB89_244
# %bb.243:                              # %if.then1912
                                        #   in Loop: Header=BB89_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -140(%rbp)
	jmp	.LBB89_245
.LBB89_244:                             # %if.else1924
                                        #   in Loop: Header=BB89_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -140(%rbp)
.LBB89_245:                             # %if.end1936
                                        #   in Loop: Header=BB89_218 Depth=3
	jmp	.LBB89_246
.LBB89_246:                             # %if.end1937
                                        #   in Loop: Header=BB89_218 Depth=3
	jmp	.LBB89_247
.LBB89_247:                             # %if.end1938
                                        #   in Loop: Header=BB89_218 Depth=3
	jmp	.LBB89_248
.LBB89_248:                             # %if.end1939
                                        #   in Loop: Header=BB89_218 Depth=3
	cmpl	$0, -108(%rbp)
	jne	.LBB89_250
# %bb.249:                              # %if.then1941
                                        #   in Loop: Header=BB89_218 Depth=3
	movl	-140(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB89_250:                             # %if.end1949
                                        #   in Loop: Header=BB89_218 Depth=3
	jmp	.LBB89_251
.LBB89_251:                             # %for.inc1950
                                        #   in Loop: Header=BB89_218 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB89_218
.LBB89_252:                             # %for.end1952
                                        #   in Loop: Header=BB89_216 Depth=2
	movq	-232(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.253:                              # %for.inc1955
                                        #   in Loop: Header=BB89_216 Depth=2
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB89_216
.LBB89_254:                             # %for.end1957
                                        #   in Loop: Header=BB89_214 Depth=1
	jmp	.LBB89_255
.LBB89_255:                             # %for.inc1958
                                        #   in Loop: Header=BB89_214 Depth=1
	movl	-116(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB89_214
.LBB89_256:                             # %for.end1960
	cmpl	$4, -200(%rbp)
	jge	.LBB89_278
# %bb.257:                              # %land.lhs.true1963
	cmpl	$0, -108(%rbp)
	jne	.LBB89_278
# %bb.258:                              # %if.then1965
	movl	$0, -208(%rbp)
	movl	$0, -116(%rbp)
.LBB89_259:                             # %for.cond1966
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_261 Depth 2
                                        #       Child Loop BB89_265 Depth 3
	movl	-116(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB89_277
# %bb.260:                              # %for.body1971
                                        #   in Loop: Header=BB89_259 Depth=1
	movl	$0, -112(%rbp)
.LBB89_261:                             # %for.cond1972
                                        #   Parent Loop BB89_259 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB89_265 Depth 3
	cmpl	$4, -112(%rbp)
	jge	.LBB89_275
# %bb.262:                              # %for.body1975
                                        #   in Loop: Header=BB89_261 Depth=2
	movslq	-144(%rbp), %rax
	shlq	$4, %rax
	movabsq	$hor_offset, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -24(%rbp)
	movslq	-144(%rbp), %rax
	shlq	$4, %rax
	movabsq	$ver_offset, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$4, %ecx
	addl	-196(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -232(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$4, %ecx
	addl	-196(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -392(%rbp)
	cmpl	$0, -204(%rbp)
	jne	.LBB89_264
# %bb.263:                              # %if.then2008
                                        #   in Loop: Header=BB89_261 Depth=2
	movslq	-144(%rbp), %rax
	movq	-432(%rbp,%rax,8), %rax
	movl	-20(%rbp), %edx
	movl	-144(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $rcx
	shlq	%cl, %rax
	xorq	$-1, %rax
	movq	-192(%rbp), %rcx
	andq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
.LBB89_264:                             # %if.end2016
                                        #   in Loop: Header=BB89_261 Depth=2
	movq	-232(%rbp), %rax
	movl	$0, (%rax)
	movl	$1, -36(%rbp)
.LBB89_265:                             # %for.cond2018
                                        #   Parent Loop BB89_259 Depth=1
                                        #     Parent Loop BB89_261 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -36(%rbp)
	jge	.LBB89_273
# %bb.266:                              # %for.body2021
                                        #   in Loop: Header=BB89_265 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB89_269
# %bb.267:                              # %lor.lhs.false2024
                                        #   in Loop: Header=BB89_265 Depth=3
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB89_270
# %bb.268:                              # %land.lhs.true2027
                                        #   in Loop: Header=BB89_265 Depth=3
	movq	-192(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB89_270
.LBB89_269:                             # %if.then2030
                                        #   in Loop: Header=BB89_265 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB89_271
.LBB89_270:                             # %if.else2039
                                        #   in Loop: Header=BB89_265 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB89_271:                             # %if.end2048
                                        #   in Loop: Header=BB89_265 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	$0, (%rax,%rcx,4)
	movq	-232(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.272:                              # %for.inc2058
                                        #   in Loop: Header=BB89_265 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB89_265
.LBB89_273:                             # %for.end2060
                                        #   in Loop: Header=BB89_261 Depth=2
	jmp	.LBB89_274
.LBB89_274:                             # %for.inc2061
                                        #   in Loop: Header=BB89_261 Depth=2
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB89_261
.LBB89_275:                             # %for.end2063
                                        #   in Loop: Header=BB89_259 Depth=1
	jmp	.LBB89_276
.LBB89_276:                             # %for.inc2064
                                        #   in Loop: Header=BB89_259 Depth=1
	movl	-116(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB89_259
.LBB89_277:                             # %for.end2066
	jmp	.LBB89_278
.LBB89_278:                             # %if.end2067
	cmpl	$2, -208(%rbp)
	jne	.LBB89_280
# %bb.279:                              # %if.then2070
	movl	$2, -136(%rbp)
.LBB89_280:                             # %if.end2071
	movl	$0, -28(%rbp)
.LBB89_281:                             # %for.cond2072
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_285 Depth 2
                                        #       Child Loop BB89_287 Depth 3
                                        #         Child Loop BB89_289 Depth 4
                                        #         Child Loop BB89_293 Depth 4
                                        #       Child Loop BB89_299 Depth 3
                                        #         Child Loop BB89_303 Depth 4
                                        #         Child Loop BB89_307 Depth 4
	xorl	%eax, %eax
	movl	-28(%rbp), %ecx
	movq	img, %rdx
	cmpl	72712(%rdx), %ecx
	jge	.LBB89_283
# %bb.282:                              # %land.rhs2076
                                        #   in Loop: Header=BB89_281 Depth=1
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB89_283:                             # %land.end2079
                                        #   in Loop: Header=BB89_281 Depth=1
	testb	$1, %al
	jne	.LBB89_284
	jmp	.LBB89_340
.LBB89_284:                             # %for.body2081
                                        #   in Loop: Header=BB89_281 Depth=1
	movl	$0, -24(%rbp)
.LBB89_285:                             # %for.cond2082
                                        #   Parent Loop BB89_281 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB89_287 Depth 3
                                        #         Child Loop BB89_289 Depth 4
                                        #         Child Loop BB89_293 Depth 4
                                        #       Child Loop BB89_299 Depth 3
                                        #         Child Loop BB89_303 Depth 4
                                        #         Child Loop BB89_307 Depth 4
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB89_338
# %bb.286:                              # %for.body2086
                                        #   in Loop: Header=BB89_285 Depth=2
	movl	$0, -12(%rbp)
.LBB89_287:                             # %for.cond2087
                                        #   Parent Loop BB89_281 Depth=1
                                        #     Parent Loop BB89_285 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB89_289 Depth 4
                                        #         Child Loop BB89_293 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB89_298
# %bb.288:                              # %for.body2090
                                        #   in Loop: Header=BB89_287 Depth=3
	movl	$0, -16(%rbp)
.LBB89_289:                             # %for.cond2091
                                        #   Parent Loop BB89_281 Depth=1
                                        #     Parent Loop BB89_285 Depth=2
                                        #       Parent Loop BB89_287 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB89_292
# %bb.290:                              # %for.body2094
                                        #   in Loop: Header=BB89_289 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.291:                              # %for.inc2104
                                        #   in Loop: Header=BB89_289 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB89_289
.LBB89_292:                             # %for.end2106
                                        #   in Loop: Header=BB89_287 Depth=3
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB89_293:                             # %for.cond2125
                                        #   Parent Loop BB89_281 Depth=1
                                        #     Parent Loop BB89_285 Depth=2
                                        #       Parent Loop BB89_287 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB89_296
# %bb.294:                              # %for.body2128
                                        #   in Loop: Header=BB89_293 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-120(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.295:                              # %for.inc2154
                                        #   in Loop: Header=BB89_293 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB89_293
.LBB89_296:                             # %for.end2156
                                        #   in Loop: Header=BB89_287 Depth=3
	jmp	.LBB89_297
.LBB89_297:                             # %for.inc2157
                                        #   in Loop: Header=BB89_287 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB89_287
.LBB89_298:                             # %for.end2159
                                        #   in Loop: Header=BB89_285 Depth=2
	movl	$0, -16(%rbp)
.LBB89_299:                             # %for.cond2160
                                        #   Parent Loop BB89_281 Depth=1
                                        #     Parent Loop BB89_285 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB89_303 Depth 4
                                        #         Child Loop BB89_307 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB89_301
# %bb.300:                              # %land.rhs2163
                                        #   in Loop: Header=BB89_299 Depth=3
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB89_301:                             # %land.end2166
                                        #   in Loop: Header=BB89_299 Depth=3
	testb	$1, %al
	jne	.LBB89_302
	jmp	.LBB89_336
.LBB89_302:                             # %for.body2168
                                        #   in Loop: Header=BB89_299 Depth=3
	movl	$0, -12(%rbp)
.LBB89_303:                             # %for.cond2169
                                        #   Parent Loop BB89_281 Depth=1
                                        #     Parent Loop BB89_285 Depth=2
                                        #       Parent Loop BB89_299 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB89_306
# %bb.304:                              # %for.body2172
                                        #   in Loop: Header=BB89_303 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.305:                              # %for.inc2182
                                        #   in Loop: Header=BB89_303 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB89_303
.LBB89_306:                             # %for.end2184
                                        #   in Loop: Header=BB89_299 Depth=3
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB89_307:                             # %for.cond2203
                                        #   Parent Loop BB89_281 Depth=1
                                        #     Parent Loop BB89_285 Depth=2
                                        #       Parent Loop BB89_299 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB89_334
# %bb.308:                              # %for.body2206
                                        #   in Loop: Header=BB89_307 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB89_328
# %bb.309:                              # %if.then2209
                                        #   in Loop: Header=BB89_307 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72688(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-72(%rbp), %rsi
	addl	-96(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-24(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-28(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB89_311
# %bb.310:                              # %cond.true2230
                                        #   in Loop: Header=BB89_307 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB89_312
.LBB89_311:                             # %cond.false2231
                                        #   in Loop: Header=BB89_307 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-72(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB89_312:                             # %cond.end2250
                                        #   in Loop: Header=BB89_307 Depth=4
	cmpq	%rcx, %rax
	jge	.LBB89_314
# %bb.313:                              # %cond.true2254
                                        #   in Loop: Header=BB89_307 Depth=4
	movq	img, %rax
	movslq	72688(%rax), %rax
	jmp	.LBB89_318
.LBB89_314:                             # %cond.false2257
                                        #   in Loop: Header=BB89_307 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-72(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB89_316
# %bb.315:                              # %cond.true2278
                                        #   in Loop: Header=BB89_307 Depth=4
	xorl	%eax, %eax
	jmp	.LBB89_317
.LBB89_316:                             # %cond.false2279
                                        #   in Loop: Header=BB89_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB89_317:                             # %cond.end2298
                                        #   in Loop: Header=BB89_307 Depth=4
.LBB89_318:                             # %cond.end2300
                                        #   in Loop: Header=BB89_307 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movslq	72688(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-72(%rbp), %rsi
	subl	-96(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-24(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-28(%rbp), %edi
	addl	-72(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB89_320
# %bb.319:                              # %cond.true2332
                                        #   in Loop: Header=BB89_307 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB89_321
.LBB89_320:                             # %cond.false2333
                                        #   in Loop: Header=BB89_307 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-72(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-72(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB89_321:                             # %cond.end2352
                                        #   in Loop: Header=BB89_307 Depth=4
	cmpq	%rcx, %rax
	jge	.LBB89_323
# %bb.322:                              # %cond.true2356
                                        #   in Loop: Header=BB89_307 Depth=4
	movq	img, %rax
	movslq	72688(%rax), %rax
	jmp	.LBB89_327
.LBB89_323:                             # %cond.false2359
                                        #   in Loop: Header=BB89_307 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-72(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-72(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB89_325
# %bb.324:                              # %cond.true2380
                                        #   in Loop: Header=BB89_307 Depth=4
	xorl	%eax, %eax
	jmp	.LBB89_326
.LBB89_325:                             # %cond.false2381
                                        #   in Loop: Header=BB89_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB89_326:                             # %cond.end2400
                                        #   in Loop: Header=BB89_307 Depth=4
.LBB89_327:                             # %cond.end2402
                                        #   in Loop: Header=BB89_307 Depth=4
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB89_332
.LBB89_328:                             # %if.else2412
                                        #   in Loop: Header=BB89_307 Depth=4
	cmpl	$0, -108(%rbp)
	je	.LBB89_330
# %bb.329:                              # %if.then2414
                                        #   in Loop: Header=BB89_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB89_331
.LBB89_330:                             # %if.else2439
                                        #   in Loop: Header=BB89_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB89_331:                             # %if.end2468
                                        #   in Loop: Header=BB89_307 Depth=4
	jmp	.LBB89_332
.LBB89_332:                             # %if.end2469
                                        #   in Loop: Header=BB89_307 Depth=4
	jmp	.LBB89_333
.LBB89_333:                             # %for.inc2470
                                        #   in Loop: Header=BB89_307 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB89_307
.LBB89_334:                             # %for.end2472
                                        #   in Loop: Header=BB89_299 Depth=3
	jmp	.LBB89_335
.LBB89_335:                             # %for.inc2473
                                        #   in Loop: Header=BB89_299 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB89_299
.LBB89_336:                             # %for.end2475
                                        #   in Loop: Header=BB89_285 Depth=2
	jmp	.LBB89_337
.LBB89_337:                             # %for.inc2476
                                        #   in Loop: Header=BB89_285 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB89_285
.LBB89_338:                             # %for.end2478
                                        #   in Loop: Header=BB89_281 Depth=1
	jmp	.LBB89_339
.LBB89_339:                             # %for.inc2479
                                        #   in Loop: Header=BB89_281 Depth=1
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB89_281
.LBB89_340:                             # %for.end2481
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB89_353
# %bb.341:                              # %if.then2484
	movl	$0, -12(%rbp)
.LBB89_342:                             # %for.cond2485
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_344 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB89_352
# %bb.343:                              # %for.body2489
                                        #   in Loop: Header=BB89_342 Depth=1
	movl	$0, -16(%rbp)
.LBB89_344:                             # %for.cond2490
                                        #   Parent Loop BB89_342 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB89_350
# %bb.345:                              # %for.body2494
                                        #   in Loop: Header=BB89_344 Depth=2
	cmpl	$0, -108(%rbp)
	je	.LBB89_347
# %bb.346:                              # %if.then2496
                                        #   in Loop: Header=BB89_344 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB89_348
.LBB89_347:                             # %if.else2518
                                        #   in Loop: Header=BB89_344 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB89_348:                             # %if.end2536
                                        #   in Loop: Header=BB89_344 Depth=2
	jmp	.LBB89_349
.LBB89_349:                             # %for.inc2537
                                        #   in Loop: Header=BB89_344 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB89_344
.LBB89_350:                             # %for.end2539
                                        #   in Loop: Header=BB89_342 Depth=1
	jmp	.LBB89_351
.LBB89_351:                             # %for.inc2540
                                        #   in Loop: Header=BB89_342 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB89_342
.LBB89_352:                             # %for.end2542
	jmp	.LBB89_353
.LBB89_353:                             # %if.end2543
	movl	-136(%rbp), %ebx
	cmpl	$185329090, -380(%rbp)  # imm = 0xB0BE5C2
	jne	.LBB89_355
.LBB89_354:
	movl	%ebx, %eax
	addq	$424, %rsp              # imm = 0x1A8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB89_355:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB89_354
.Lfunc_end89:
	.size	dct_chroma.80, .Lfunc_end89-dct_chroma.80
	.cfi_endproc
                                        # -- End function
	.type	QP_SCALE_CR,@object     # @QP_SCALE_CR
	.section	.rodata,"a",@progbits
	.globl	QP_SCALE_CR
	.p2align	4
QP_SCALE_CR:
	.ascii	"\000\001\002\003\004\005\006\007\b\t\n\013\f\r\016\017\020\021\022\023\024\025\026\027\030\031\032\033\034\035\035\036\037  !\"\"##$$%%%&&&''''"
	.size	QP_SCALE_CR, 52

	.type	SNGL_SCAN,@object       # @SNGL_SCAN
	.globl	SNGL_SCAN
	.p2align	4
SNGL_SCAN:
	.zero	2
	.asciz	"\001"
	.ascii	"\000\001"
	.ascii	"\000\002"
	.zero	2,1
	.asciz	"\002"
	.asciz	"\003"
	.ascii	"\002\001"
	.ascii	"\001\002"
	.ascii	"\000\003"
	.ascii	"\001\003"
	.zero	2,2
	.ascii	"\003\001"
	.ascii	"\003\002"
	.ascii	"\002\003"
	.zero	2,3
	.size	SNGL_SCAN, 32

	.type	FIELD_SCAN,@object      # @FIELD_SCAN
	.globl	FIELD_SCAN
	.p2align	4
FIELD_SCAN:
	.zero	2
	.ascii	"\000\001"
	.asciz	"\001"
	.ascii	"\000\002"
	.ascii	"\000\003"
	.zero	2,1
	.ascii	"\001\002"
	.ascii	"\001\003"
	.asciz	"\002"
	.ascii	"\002\001"
	.zero	2,2
	.ascii	"\002\003"
	.asciz	"\003"
	.ascii	"\003\001"
	.ascii	"\003\002"
	.zero	2,3
	.size	FIELD_SCAN, 32

	.type	COEFF_COST,@object      # @COEFF_COST
	.globl	COEFF_COST
	.p2align	4
COEFF_COST:
	.byte	3                       # 0x3
	.byte	2                       # 0x2
	.byte	2                       # 0x2
	.byte	1                       # 0x1
	.byte	1                       # 0x1
	.byte	1                       # 0x1
	.zero	10
	.zero	16,9
	.size	COEFF_COST, 32

	.type	COEFF_BIT_COST,@object  # @COEFF_BIT_COST
	.globl	COEFF_BIT_COST
	.p2align	4
COEFF_BIT_COST:
	.ascii	"\003\005\007\t\t\013\013\013\013\r\r\r\r\r\r\r"
	.ascii	"\005\007\t\t\013\013\013\013\r\r\r\r\r\r\r\r"
	.ascii	"\007\t\t\013\013\013\013\r\r\r\r\r\r\r\r\017"
	.ascii	"\007\t\t\013\013\013\013\r\r\r\r\r\r\r\r\017"
	.ascii	"\007\007\t\t\t\t\013\013\013\013\013\013\013\013\r\r"
	.ascii	"\007\007\t\t\t\t\013\013\013\013\013\013\013\013\r\r"
	.ascii	"\007\007\t\t\t\t\013\013\013\013\013\013\013\013\r\r"
	.ascii	"\007\007\t\t\t\t\013\013\013\013\013\013\013\013\r\r"
	.ascii	"\007\007\t\t\t\t\013\013\013\013\013\013\013\013\r\r"
	.ascii	"\007\007\t\t\t\t\013\013\013\013\013\013\013\013\r\r"
	.ascii	"\007\007\t\t\t\t\013\013\013\013\013\013\013\013\r\r"
	.ascii	"\007\007\t\t\t\t\013\013\013\013\013\013\013\013\r\r"
	.ascii	"\007\007\t\t\t\t\013\013\013\013\013\013\013\013\r\r"
	.ascii	"\007\007\t\t\t\t\013\013\013\013\013\013\013\013\r\r"
	.ascii	"\007\007\t\t\t\t\013\013\013\013\013\013\013\013\r\r"
	.ascii	"\007\007\t\t\t\t\013\013\013\013\013\013\013\013\r\r"
	.ascii	"\003\005\007\007\007\t\t\t\t\013\013\r\r\r\r\017"
	.ascii	"\005\t\t\013\013\r\r\r\r\017\017\017\017\017\017\017"
	.ascii	"\007\013\013\r\r\r\r\017\017\017\017\017\017\017\017\021"
	.ascii	"\t\013\013\r\r\r\r\017\017\017\017\017\017\017\017\021"
	.ascii	"\t\013\013\r\r\r\r\017\017\017\017\017\017\017\017\021"
	.ascii	"\013\013\r\r\r\r\017\017\017\017\017\017\017\017\021\021"
	.ascii	"\013\013\r\r\r\r\017\017\017\017\017\017\017\017\021\021"
	.ascii	"\013\013\r\r\r\r\017\017\017\017\017\017\017\017\021\021"
	.ascii	"\013\013\r\r\r\r\017\017\017\017\017\017\017\017\021\021"
	.ascii	"\013\013\r\r\r\r\017\017\017\017\017\017\017\017\021\021"
	.ascii	"\013\013\r\r\r\r\017\017\017\017\017\017\017\017\021\021"
	.ascii	"\013\013\r\r\r\r\017\017\017\017\017\017\017\017\021\021"
	.ascii	"\013\013\r\r\r\r\017\017\017\017\017\017\017\017\021\021"
	.ascii	"\013\013\r\r\r\r\017\017\017\017\017\017\017\017\021\021"
	.zero	16
	.zero	16
	.ascii	"\003\007\t\t\013\r\r\017\017\017\017\021\021\021\021\021"
	.ascii	"\005\t\013\r\r\017\017\017\017\021\021\021\021\021\021\021"
	.ascii	"\005\t\013\r\r\017\017\017\017\021\021\021\021\021\021\021"
	.ascii	"\007\013\r\r\017\017\017\017\021\021\021\021\021\021\021\021"
	.ascii	"\007\013\r\r\017\017\017\017\021\021\021\021\021\021\021\021"
	.ascii	"\007\013\r\r\017\017\017\017\021\021\021\021\021\021\021\021"
	.ascii	"\t\013\r\r\017\017\017\017\021\021\021\021\021\021\021\021"
	.ascii	"\t\013\r\r\017\017\017\017\021\021\021\021\021\021\021\021"
	.ascii	"\t\013\r\r\017\017\017\017\021\021\021\021\021\021\021\021"
	.ascii	"\t\013\r\r\017\017\017\017\021\021\021\021\021\021\021\021"
	.ascii	"\013\r\r\017\017\017\017\021\021\021\021\021\021\021\021\023"
	.ascii	"\013\r\r\017\017\017\017\021\021\021\021\021\021\021\021\023"
	.ascii	"\013\r\r\017\017\017\017\021\021\021\021\021\021\021\021\023"
	.ascii	"\013\r\r\017\017\017\017\021\021\021\021\021\021\021\021\023"
	.ascii	"\013\r\r\017\017\017\017\021\021\021\021\021\021\021\021\023"
	.ascii	"\013\r\r\017\017\017\017\021\021\021\021\021\021\021\021\023"
	.size	COEFF_BIT_COST, 768

	.type	SCAN_YUV422,@object     # @SCAN_YUV422
	.globl	SCAN_YUV422
	.p2align	4
SCAN_YUV422:
	.zero	2
	.ascii	"\000\001"
	.asciz	"\001"
	.ascii	"\000\002"
	.ascii	"\000\003"
	.zero	2,1
	.ascii	"\001\002"
	.ascii	"\001\003"
	.size	SCAN_YUV422, 16

	.type	hor_offset,@object      # @hor_offset
	.globl	hor_offset
	.p2align	4
hor_offset:
	.zero	16
	.ascii	"\000\004\000\004"
	.zero	4
	.zero	4
	.zero	4
	.ascii	"\000\004\000\004"
	.ascii	"\000\004\000\004"
	.zero	4
	.zero	4
	.ascii	"\000\004\000\004"
	.ascii	"\b\f\b\f"
	.ascii	"\000\004\000\004"
	.ascii	"\b\f\b\f"
	.size	hor_offset, 64

	.type	ver_offset,@object      # @ver_offset
	.globl	ver_offset
	.p2align	4
ver_offset:
	.zero	16
	.ascii	"\000\000\004\004"
	.zero	4
	.zero	4
	.zero	4
	.ascii	"\000\000\004\004"
	.ascii	"\b\b\f\f"
	.zero	4
	.zero	4
	.ascii	"\000\000\004\004"
	.ascii	"\000\000\004\004"
	.ascii	"\b\b\f\f"
	.ascii	"\b\b\f\f"
	.size	ver_offset, 64

	.type	quant_coef,@object      # @quant_coef
	.globl	quant_coef
	.p2align	4
quant_coef:
	.long	13107                   # 0x3333
	.long	8066                    # 0x1f82
	.long	13107                   # 0x3333
	.long	8066                    # 0x1f82
	.long	8066                    # 0x1f82
	.long	5243                    # 0x147b
	.long	8066                    # 0x1f82
	.long	5243                    # 0x147b
	.long	13107                   # 0x3333
	.long	8066                    # 0x1f82
	.long	13107                   # 0x3333
	.long	8066                    # 0x1f82
	.long	8066                    # 0x1f82
	.long	5243                    # 0x147b
	.long	8066                    # 0x1f82
	.long	5243                    # 0x147b
	.long	11916                   # 0x2e8c
	.long	7490                    # 0x1d42
	.long	11916                   # 0x2e8c
	.long	7490                    # 0x1d42
	.long	7490                    # 0x1d42
	.long	4660                    # 0x1234
	.long	7490                    # 0x1d42
	.long	4660                    # 0x1234
	.long	11916                   # 0x2e8c
	.long	7490                    # 0x1d42
	.long	11916                   # 0x2e8c
	.long	7490                    # 0x1d42
	.long	7490                    # 0x1d42
	.long	4660                    # 0x1234
	.long	7490                    # 0x1d42
	.long	4660                    # 0x1234
	.long	10082                   # 0x2762
	.long	6554                    # 0x199a
	.long	10082                   # 0x2762
	.long	6554                    # 0x199a
	.long	6554                    # 0x199a
	.long	4194                    # 0x1062
	.long	6554                    # 0x199a
	.long	4194                    # 0x1062
	.long	10082                   # 0x2762
	.long	6554                    # 0x199a
	.long	10082                   # 0x2762
	.long	6554                    # 0x199a
	.long	6554                    # 0x199a
	.long	4194                    # 0x1062
	.long	6554                    # 0x199a
	.long	4194                    # 0x1062
	.long	9362                    # 0x2492
	.long	5825                    # 0x16c1
	.long	9362                    # 0x2492
	.long	5825                    # 0x16c1
	.long	5825                    # 0x16c1
	.long	3647                    # 0xe3f
	.long	5825                    # 0x16c1
	.long	3647                    # 0xe3f
	.long	9362                    # 0x2492
	.long	5825                    # 0x16c1
	.long	9362                    # 0x2492
	.long	5825                    # 0x16c1
	.long	5825                    # 0x16c1
	.long	3647                    # 0xe3f
	.long	5825                    # 0x16c1
	.long	3647                    # 0xe3f
	.long	8192                    # 0x2000
	.long	5243                    # 0x147b
	.long	8192                    # 0x2000
	.long	5243                    # 0x147b
	.long	5243                    # 0x147b
	.long	3355                    # 0xd1b
	.long	5243                    # 0x147b
	.long	3355                    # 0xd1b
	.long	8192                    # 0x2000
	.long	5243                    # 0x147b
	.long	8192                    # 0x2000
	.long	5243                    # 0x147b
	.long	5243                    # 0x147b
	.long	3355                    # 0xd1b
	.long	5243                    # 0x147b
	.long	3355                    # 0xd1b
	.long	7282                    # 0x1c72
	.long	4559                    # 0x11cf
	.long	7282                    # 0x1c72
	.long	4559                    # 0x11cf
	.long	4559                    # 0x11cf
	.long	2893                    # 0xb4d
	.long	4559                    # 0x11cf
	.long	2893                    # 0xb4d
	.long	7282                    # 0x1c72
	.long	4559                    # 0x11cf
	.long	7282                    # 0x1c72
	.long	4559                    # 0x11cf
	.long	4559                    # 0x11cf
	.long	2893                    # 0xb4d
	.long	4559                    # 0x11cf
	.long	2893                    # 0xb4d
	.size	quant_coef, 384

	.type	dequant_coef,@object    # @dequant_coef
	.globl	dequant_coef
	.p2align	4
dequant_coef:
	.long	10                      # 0xa
	.long	13                      # 0xd
	.long	10                      # 0xa
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	16                      # 0x10
	.long	13                      # 0xd
	.long	16                      # 0x10
	.long	10                      # 0xa
	.long	13                      # 0xd
	.long	10                      # 0xa
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	16                      # 0x10
	.long	13                      # 0xd
	.long	16                      # 0x10
	.long	11                      # 0xb
	.long	14                      # 0xe
	.long	11                      # 0xb
	.long	14                      # 0xe
	.long	14                      # 0xe
	.long	18                      # 0x12
	.long	14                      # 0xe
	.long	18                      # 0x12
	.long	11                      # 0xb
	.long	14                      # 0xe
	.long	11                      # 0xb
	.long	14                      # 0xe
	.long	14                      # 0xe
	.long	18                      # 0x12
	.long	14                      # 0xe
	.long	18                      # 0x12
	.long	13                      # 0xd
	.long	16                      # 0x10
	.long	13                      # 0xd
	.long	16                      # 0x10
	.long	16                      # 0x10
	.long	20                      # 0x14
	.long	16                      # 0x10
	.long	20                      # 0x14
	.long	13                      # 0xd
	.long	16                      # 0x10
	.long	13                      # 0xd
	.long	16                      # 0x10
	.long	16                      # 0x10
	.long	20                      # 0x14
	.long	16                      # 0x10
	.long	20                      # 0x14
	.long	14                      # 0xe
	.long	18                      # 0x12
	.long	14                      # 0xe
	.long	18                      # 0x12
	.long	18                      # 0x12
	.long	23                      # 0x17
	.long	18                      # 0x12
	.long	23                      # 0x17
	.long	14                      # 0xe
	.long	18                      # 0x12
	.long	14                      # 0xe
	.long	18                      # 0x12
	.long	18                      # 0x12
	.long	23                      # 0x17
	.long	18                      # 0x12
	.long	23                      # 0x17
	.long	16                      # 0x10
	.long	20                      # 0x14
	.long	16                      # 0x10
	.long	20                      # 0x14
	.long	20                      # 0x14
	.long	25                      # 0x19
	.long	20                      # 0x14
	.long	25                      # 0x19
	.long	16                      # 0x10
	.long	20                      # 0x14
	.long	16                      # 0x10
	.long	20                      # 0x14
	.long	20                      # 0x14
	.long	25                      # 0x19
	.long	20                      # 0x14
	.long	25                      # 0x19
	.long	18                      # 0x12
	.long	23                      # 0x17
	.long	18                      # 0x12
	.long	23                      # 0x17
	.long	23                      # 0x17
	.long	29                      # 0x1d
	.long	23                      # 0x17
	.long	29                      # 0x1d
	.long	18                      # 0x12
	.long	23                      # 0x17
	.long	18                      # 0x12
	.long	23                      # 0x17
	.long	23                      # 0x17
	.long	29                      # 0x1d
	.long	23                      # 0x17
	.long	29                      # 0x1d
	.size	dequant_coef, 384

	.type	imgY_org,@object        # @imgY_org
	.comm	imgY_org,8,8
	.type	mb_adaptive,@object     # @mb_adaptive
	.comm	mb_adaptive,4,4
	.type	.L__const.dct_chroma.cbpblk_pattern,@object # @__const.dct_chroma.cbpblk_pattern
	.section	.rodata.cst32,"aM",@progbits,32
	.p2align	4
.L__const.dct_chroma.cbpblk_pattern:
	.quad	0                       # 0x0
	.quad	983040                  # 0xf0000
	.quad	16711680                # 0xff0000
	.quad	4294901760              # 0xffff0000
	.size	.L__const.dct_chroma.cbpblk_pattern, 32

	.type	cbp_blk_chroma,@object  # @cbp_blk_chroma
	.data
	.p2align	4
cbp_blk_chroma:
	.ascii	"\020\021\022\023"
	.ascii	"\024\025\026\027"
	.ascii	"\030\031\032\033"
	.ascii	"\034\035\036\037"
	.ascii	" !\"#"
	.ascii	"$%&'"
	.ascii	"()*+"
	.ascii	",-./"
	.size	cbp_blk_chroma, 32

	.type	dc_level_temp,@object   # @dc_level_temp
	.comm	dc_level_temp,128,16
	.type	dc_level,@object        # @dc_level
	.comm	dc_level,128,16
	.type	A,@object               # @A
	.section	.rodata,"a",@progbits
	.p2align	4
A:
	.long	16                      # 0x10
	.long	20                      # 0x14
	.long	16                      # 0x10
	.long	20                      # 0x14
	.long	20                      # 0x14
	.long	25                      # 0x19
	.long	20                      # 0x14
	.long	25                      # 0x19
	.long	16                      # 0x10
	.long	20                      # 0x14
	.long	16                      # 0x10
	.long	20                      # 0x14
	.long	20                      # 0x14
	.long	25                      # 0x19
	.long	20                      # 0x14
	.long	25                      # 0x19
	.size	A, 64

	.type	active_pps,@object      # @active_pps
	.comm	active_pps,8,8
	.type	top_pic,@object         # @top_pic
	.comm	top_pic,8,8
	.type	bottom_pic,@object      # @bottom_pic
	.comm	bottom_pic,8,8
	.type	frame_pic,@object       # @frame_pic
	.comm	frame_pic,8,8
	.type	frame_pic2,@object      # @frame_pic2
	.comm	frame_pic2,8,8
	.type	frame_pic3,@object      # @frame_pic3
	.comm	frame_pic3,8,8
	.type	imgUV_org,@object       # @imgUV_org
	.comm	imgUV_org,8,8
	.type	img4Y_tmp,@object       # @img4Y_tmp
	.comm	img4Y_tmp,8,8
	.type	log2_max_frame_num_minus4,@object # @log2_max_frame_num_minus4
	.comm	log2_max_frame_num_minus4,4,4
	.type	log2_max_pic_order_cnt_lsb_minus4,@object # @log2_max_pic_order_cnt_lsb_minus4
	.comm	log2_max_pic_order_cnt_lsb_minus4,4,4
	.type	me_tot_time,@object     # @me_tot_time
	.comm	me_tot_time,4,4
	.type	me_time,@object         # @me_time
	.comm	me_time,4,4
	.type	active_sps,@object      # @active_sps
	.comm	active_sps,8,8
	.type	MBPairIsField,@object   # @MBPairIsField
	.comm	MBPairIsField,4,4
	.type	wp_weight,@object       # @wp_weight
	.comm	wp_weight,8,8
	.type	wp_offset,@object       # @wp_offset
	.comm	wp_offset,8,8
	.type	wbp_weight,@object      # @wbp_weight
	.comm	wbp_weight,8,8
	.type	luma_log_weight_denom,@object # @luma_log_weight_denom
	.comm	luma_log_weight_denom,4,4
	.type	chroma_log_weight_denom,@object # @chroma_log_weight_denom
	.comm	chroma_log_weight_denom,4,4
	.type	wp_luma_round,@object   # @wp_luma_round
	.comm	wp_luma_round,4,4
	.type	wp_chroma_round,@object # @wp_chroma_round
	.comm	wp_chroma_round,4,4
	.type	imgY_org_top,@object    # @imgY_org_top
	.comm	imgY_org_top,8,8
	.type	imgY_org_bot,@object    # @imgY_org_bot
	.comm	imgY_org_bot,8,8
	.type	imgUV_org_top,@object   # @imgUV_org_top
	.comm	imgUV_org_top,8,8
	.type	imgUV_org_bot,@object   # @imgUV_org_bot
	.comm	imgUV_org_bot,8,8
	.type	imgY_org_frm,@object    # @imgY_org_frm
	.comm	imgY_org_frm,8,8
	.type	imgUV_org_frm,@object   # @imgUV_org_frm
	.comm	imgUV_org_frm,8,8
	.type	imgY_com,@object        # @imgY_com
	.comm	imgY_com,8,8
	.type	imgUV_com,@object       # @imgUV_com
	.comm	imgUV_com,8,8
	.type	direct_ref_idx,@object  # @direct_ref_idx
	.comm	direct_ref_idx,8,8
	.type	direct_pdir,@object     # @direct_pdir
	.comm	direct_pdir,8,8
	.type	pixel_map,@object       # @pixel_map
	.comm	pixel_map,8,8
	.type	refresh_map,@object     # @refresh_map
	.comm	refresh_map,8,8
	.type	intras,@object          # @intras
	.comm	intras,4,4
	.type	Iframe_ctr,@object      # @Iframe_ctr
	.comm	Iframe_ctr,4,4
	.type	Pframe_ctr,@object      # @Pframe_ctr
	.comm	Pframe_ctr,4,4
	.type	Bframe_ctr,@object      # @Bframe_ctr
	.comm	Bframe_ctr,4,4
	.type	frame_no,@object        # @frame_no
	.comm	frame_no,4,4
	.type	nextP_tr_fld,@object    # @nextP_tr_fld
	.comm	nextP_tr_fld,4,4
	.type	nextP_tr_frm,@object    # @nextP_tr_frm
	.comm	nextP_tr_frm,4,4
	.type	tot_time,@object        # @tot_time
	.comm	tot_time,4,4
	.type	errortext,@object       # @errortext
	.comm	errortext,300,16
	.type	resTrans_R,@object      # @resTrans_R
	.comm	resTrans_R,1024,16
	.type	resTrans_G,@object      # @resTrans_G
	.comm	resTrans_G,1024,16
	.type	resTrans_B,@object      # @resTrans_B
	.comm	resTrans_B,1024,16
	.type	rec_resR,@object        # @rec_resR
	.comm	rec_resR,1024,16
	.type	rec_resG,@object        # @rec_resG
	.comm	rec_resG,1024,16
	.type	rec_resB,@object        # @rec_resB
	.comm	rec_resB,1024,16
	.type	mprRGB,@object          # @mprRGB
	.comm	mprRGB,3072,16
	.type	cbp_chroma_block,@object # @cbp_chroma_block
	.comm	cbp_chroma_block,128,16
	.type	cbp_chroma_block_temp,@object # @cbp_chroma_block_temp
	.comm	cbp_chroma_block_temp,128,16
	.type	b8_ipredmode8x8,@object # @b8_ipredmode8x8
	.comm	b8_ipredmode8x8,64,16
	.type	b8_intra_pred_modes8x8,@object # @b8_intra_pred_modes8x8
	.comm	b8_intra_pred_modes8x8,64,16
	.type	gop_structure,@object   # @gop_structure
	.comm	gop_structure,8,8
	.type	rdopt,@object           # @rdopt
	.comm	rdopt,8,8
	.type	rddata_top_frame_mb,@object # @rddata_top_frame_mb
	.comm	rddata_top_frame_mb,3360,8
	.type	rddata_bot_frame_mb,@object # @rddata_bot_frame_mb
	.comm	rddata_bot_frame_mb,3360,8
	.type	rddata_top_field_mb,@object # @rddata_top_field_mb
	.comm	rddata_top_field_mb,3360,8
	.type	rddata_bot_field_mb,@object # @rddata_bot_field_mb
	.comm	rddata_bot_field_mb,3360,8
	.type	p_stat,@object          # @p_stat
	.comm	p_stat,8,8
	.type	p_log,@object           # @p_log
	.comm	p_log,8,8
	.type	p_trace,@object         # @p_trace
	.comm	p_trace,8,8
	.type	p_in,@object            # @p_in
	.comm	p_in,4,4
	.type	p_dec,@object           # @p_dec
	.comm	p_dec,4,4
	.type	glob_remapping_of_pic_nums_idc_l0,@object # @glob_remapping_of_pic_nums_idc_l0
	.comm	glob_remapping_of_pic_nums_idc_l0,80,16
	.type	glob_abs_diff_pic_num_minus1_l0,@object # @glob_abs_diff_pic_num_minus1_l0
	.comm	glob_abs_diff_pic_num_minus1_l0,80,16
	.type	glob_long_term_pic_idx_l0,@object # @glob_long_term_pic_idx_l0
	.comm	glob_long_term_pic_idx_l0,80,16
	.type	glob_remapping_of_pic_nums_idc_l1,@object # @glob_remapping_of_pic_nums_idc_l1
	.comm	glob_remapping_of_pic_nums_idc_l1,80,16
	.type	glob_abs_diff_pic_num_minus1_l1,@object # @glob_abs_diff_pic_num_minus1_l1
	.comm	glob_abs_diff_pic_num_minus1_l1,80,16
	.type	glob_long_term_pic_idx_l1,@object # @glob_long_term_pic_idx_l1
	.comm	glob_long_term_pic_idx_l1,80,16
	.type	Bytes_After_Header,@object # @Bytes_After_Header
	.comm	Bytes_After_Header,4,4
	.type	rpc_bytes_to_go,@object # @rpc_bytes_to_go
	.comm	rpc_bytes_to_go,4,4
	.type	rpc_bits_to_go,@object  # @rpc_bits_to_go
	.comm	rpc_bits_to_go,4,4

	.ident	"clang version 9.0.1 (git@github.com:llvm/llvm-project.git 9b2d207cf4b43cfc1a2b6940b3c06e50a1bd127f)"
	.section	".note.GNU-stack","",@progbits
