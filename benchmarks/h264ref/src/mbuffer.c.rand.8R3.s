	.text
	.file	"mbuffer.c"
	.globl	dump_dpb                # -- Begin function dump_dpb
	.p2align	4, 0x90
	.type	dump_dpb,@function
dump_dpb:                               # @dump_dpb
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end0:
	.size	dump_dpb, .Lfunc_end0-dump_dpb
	.cfi_endproc
                                        # -- End function
	.globl	getDpbSize              # -- Begin function getDpbSize
	.p2align	4, 0x90
	.type	getDpbSize,@function
getDpbSize:                             # @getDpbSize
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB1_2
# %bb.1:                                # %func_getDpbSize.117
	callq	getDpbSize.117
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_2:                                # %func_getDpbSize.225
	.cfi_def_cfa %rbp, 16
	callq	getDpbSize.225
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end1:
	.size	getDpbSize, .Lfunc_end1-getDpbSize
	.cfi_endproc
                                        # -- End function
	.globl	init_dpb                # -- Begin function init_dpb
	.p2align	4, 0x90
	.type	init_dpb,@function
init_dpb:                               # @init_dpb
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB2_2
# %bb.1:                                # %func_init_dpb.43
	callq	init_dpb.43
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_2:                                # %func_init_dpb.58
	.cfi_def_cfa %rbp, 16
	callq	init_dpb.58
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end2:
	.size	init_dpb, .Lfunc_end2-init_dpb
	.cfi_endproc
                                        # -- End function
	.globl	free_dpb                # -- Begin function free_dpb
	.p2align	4, 0x90
	.type	free_dpb,@function
free_dpb:                               # @free_dpb
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	cmpq	$0, dpb
	je	.LBB3_6
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB3_2:                                # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+24, %eax
	jae	.LBB3_5
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB3_2 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	free_frame_store
# %bb.4:                                # %for.inc
                                        #   in Loop: Header=BB3_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB3_2
.LBB3_5:                                # %for.end
	movq	dpb, %rdi
	callq	free
	movq	$0, dpb
.LBB3_6:                                # %if.end
	cmpq	$0, dpb+8
	je	.LBB3_8
# %bb.7:                                # %if.then2
	movq	dpb+8, %rdi
	callq	free
.LBB3_8:                                # %if.end3
	cmpq	$0, dpb+16
	je	.LBB3_10
# %bb.9:                                # %if.then5
	movq	dpb+16, %rdi
	callq	free
.LBB3_10:                               # %if.end6
	movl	$-2147483648, dpb+40    # imm = 0x80000000
	movl	$0, -4(%rbp)
.LBB3_11:                               # %for.cond7
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$6, -4(%rbp)
	jae	.LBB3_16
# %bb.12:                               # %for.body9
                                        #   in Loop: Header=BB3_11 Depth=1
	movl	-4(%rbp), %eax
	cmpq	$0, listX(,%rax,8)
	je	.LBB3_14
# %bb.13:                               # %if.then13
                                        #   in Loop: Header=BB3_11 Depth=1
	movl	-4(%rbp), %eax
	movq	listX(,%rax,8), %rdi
	callq	free
	movl	-4(%rbp), %eax
	movq	$0, listX(,%rax,8)
.LBB3_14:                               # %if.end18
                                        #   in Loop: Header=BB3_11 Depth=1
	jmp	.LBB3_15
.LBB3_15:                               # %for.inc19
                                        #   in Loop: Header=BB3_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB3_11
.LBB3_16:                               # %for.end21
	movl	$0, dpb+48
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end3:
	.size	free_dpb, .Lfunc_end3-free_dpb
	.cfi_endproc
                                        # -- End function
	.globl	free_frame_store        # -- Begin function free_frame_store
	.p2align	4, 0x90
	.type	free_frame_store,@function
free_frame_store:                       # @free_frame_store
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.LBB4_8
# %bb.1:                                # %if.then
	movq	-8(%rbp), %rax
	cmpq	$0, 40(%rax)
	je	.LBB4_3
# %bb.2:                                # %if.then2
	movq	-8(%rbp), %rax
	movq	40(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 40(%rax)
.LBB4_3:                                # %if.end
	movq	-8(%rbp), %rax
	cmpq	$0, 48(%rax)
	je	.LBB4_5
# %bb.4:                                # %if.then6
	movq	-8(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 48(%rax)
.LBB4_5:                                # %if.end9
	movq	-8(%rbp), %rax
	cmpq	$0, 56(%rax)
	je	.LBB4_7
# %bb.6:                                # %if.then11
	movq	-8(%rbp), %rax
	movq	56(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 56(%rax)
.LBB4_7:                                # %if.end14
	movq	-8(%rbp), %rdi
	callq	free
.LBB4_8:                                # %if.end15
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end4:
	.size	free_frame_store, .Lfunc_end4-free_frame_store
	.cfi_endproc
                                        # -- End function
	.globl	alloc_frame_store       # -- Begin function alloc_frame_store
	.p2align	4, 0x90
	.type	alloc_frame_store,@function
alloc_frame_store:                      # @alloc_frame_store
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1, %edi
	movl	$64, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -8(%rbp)
	cmpq	-8(%rbp), %rcx
	jne	.LBB5_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.6, %rdi
	callq	no_mem_exit
.LBB5_2:                                # %if.end
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	-8(%rbp), %rax
	movl	$0, 4(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 12(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 32(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 40(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 56(%rax)
	movq	-8(%rbp), %rax
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end5:
	.size	alloc_frame_store, .Lfunc_end5-alloc_frame_store
	.cfi_endproc
                                        # -- End function
	.globl	alloc_storable_picture  # -- Begin function alloc_storable_picture
	.p2align	4, 0x90
	.type	alloc_storable_picture,@function
alloc_storable_picture:                 # @alloc_storable_picture
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r8d, %r14d
	movl	%ecx, %r15d
	movl	%edx, %r12d
	movl	%esi, %r13d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB6_9
# %bb.1:                                # %func_alloc_storable_picture.21
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	alloc_storable_picture.21
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_2:                                # %func_alloc_storable_picture.38
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	alloc_storable_picture.38
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_3:                                # %func_alloc_storable_picture.115
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	alloc_storable_picture.115
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_4:                                # %func_alloc_storable_picture.150
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	alloc_storable_picture.150
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_5:                                # %func_alloc_storable_picture.174
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	alloc_storable_picture.174
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_6:                                # %func_alloc_storable_picture.188
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	alloc_storable_picture.188
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_7:                                # %func_alloc_storable_picture.237
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	alloc_storable_picture.237
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_8:                                # %func_alloc_storable_picture.240
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	alloc_storable_picture.240
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB6_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB6_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB6_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB6_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB6_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB6_7
	jmp	.LBB6_8
.Lfunc_end6:
	.size	alloc_storable_picture, .Lfunc_end6-alloc_storable_picture
	.cfi_endproc
                                        # -- End function
	.globl	free_storable_picture   # -- Begin function free_storable_picture
	.p2align	4, 0x90
	.type	free_storable_picture,@function
free_storable_picture:                  # @free_storable_picture
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.LBB7_32
# %bb.1:                                # %if.then
	movq	-8(%rbp), %rax
	cmpq	$0, 6480(%rax)
	je	.LBB7_3
# %bb.2:                                # %if.then2
	movq	-8(%rbp), %rax
	movq	6480(%rax), %rdi
	movl	$2, %esi
	callq	free_mem3Dshort
	movq	-8(%rbp), %rax
	movq	$0, 6480(%rax)
.LBB7_3:                                # %if.end
	movq	-8(%rbp), %rax
	cmpq	$0, 6488(%rax)
	je	.LBB7_5
# %bb.4:                                # %if.then6
	movq	-8(%rbp), %rax
	movq	6488(%rax), %rdi
	movl	$6, %esi
	callq	free_mem3Dint64
	movq	-8(%rbp), %rax
	movq	$0, 6488(%rax)
.LBB7_5:                                # %if.end9
	movq	-8(%rbp), %rax
	cmpq	$0, 6496(%rax)
	je	.LBB7_7
# %bb.6:                                # %if.then11
	movq	-8(%rbp), %rax
	movq	6496(%rax), %rdi
	movl	$6, %esi
	callq	free_mem3Dint64
	movq	-8(%rbp), %rax
	movq	$0, 6496(%rax)
.LBB7_7:                                # %if.end14
	movq	-8(%rbp), %rax
	cmpq	$0, 6504(%rax)
	je	.LBB7_9
# %bb.8:                                # %if.then16
	movq	-8(%rbp), %rax
	movq	6504(%rax), %rdi
	movq	-8(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	$2, %esi
	movl	%eax, %edx
	callq	free_mem4Dshort
	movq	-8(%rbp), %rax
	movq	$0, 6504(%rax)
.LBB7_9:                                # %if.end19
	movq	-8(%rbp), %rax
	cmpq	$0, 6512(%rax)
	je	.LBB7_11
# %bb.10:                               # %if.then21
	movq	-8(%rbp), %rax
	movq	6512(%rax), %rdi
	callq	free_mem2D
	movq	-8(%rbp), %rax
	movq	$0, 6512(%rax)
.LBB7_11:                               # %if.end24
	movq	-8(%rbp), %rax
	cmpq	$0, 6520(%rax)
	je	.LBB7_13
# %bb.12:                               # %if.then26
	movq	-8(%rbp), %rax
	movq	6520(%rax), %rdi
	callq	free_mem2D
	movq	-8(%rbp), %rax
	movq	$0, 6520(%rax)
.LBB7_13:                               # %if.end29
	movq	-8(%rbp), %rax
	cmpq	$0, 6424(%rax)
	je	.LBB7_15
# %bb.14:                               # %if.then31
	movq	-8(%rbp), %rax
	movq	6424(%rax), %rdi
	callq	free_mem2Dpel
	movq	-8(%rbp), %rax
	movq	$0, 6424(%rax)
.LBB7_15:                               # %if.end34
	movq	-8(%rbp), %rax
	cmpq	$0, 6432(%rax)
	je	.LBB7_17
# %bb.16:                               # %if.then36
	movq	-8(%rbp), %rax
	movq	6432(%rax), %rdi
	callq	free
	movq	-8(%rbp), %rax
	movq	$0, 6432(%rax)
.LBB7_17:                               # %if.end39
	movq	-8(%rbp), %rax
	cmpq	$0, 6448(%rax)
	je	.LBB7_19
# %bb.18:                               # %if.then41
	movq	-8(%rbp), %rax
	movq	6448(%rax), %rdi
	callq	free_mem2Dpel
	movq	-8(%rbp), %rax
	movq	$0, 6448(%rax)
.LBB7_19:                               # %if.end44
	movq	-8(%rbp), %rax
	cmpq	$0, 6464(%rax)
	je	.LBB7_21
# %bb.20:                               # %if.then46
	movq	-8(%rbp), %rax
	movq	6464(%rax), %rdi
	movl	$2, %esi
	callq	free_mem3Dpel
	movq	-8(%rbp), %rax
	movq	$0, 6464(%rax)
.LBB7_21:                               # %if.end49
	movq	input, %rax
	cmpl	$0, 1284(%rax)
	jne	.LBB7_24
# %bb.22:                               # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 1288(%rax)
	jne	.LBB7_24
# %bb.23:                               # %lor.lhs.false52
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB7_29
.LBB7_24:                               # %if.then54
	movq	-8(%rbp), %rax
	cmpq	$0, 6440(%rax)
	je	.LBB7_26
# %bb.25:                               # %if.then56
	movq	-8(%rbp), %rax
	movq	6440(%rax), %rdi
	callq	free
	movq	-8(%rbp), %rax
	movq	$0, 6440(%rax)
.LBB7_26:                               # %if.end59
	movq	-8(%rbp), %rax
	cmpq	$0, 6456(%rax)
	je	.LBB7_28
# %bb.27:                               # %if.then61
	movq	-8(%rbp), %rax
	movq	6456(%rax), %rdi
	callq	free_mem2Dpel
	movq	-8(%rbp), %rax
	movq	$0, 6456(%rax)
.LBB7_28:                               # %if.end64
	jmp	.LBB7_29
.LBB7_29:                               # %if.end65
	movq	-8(%rbp), %rax
	cmpq	$0, 6472(%rax)
	je	.LBB7_31
# %bb.30:                               # %if.then67
	movq	-8(%rbp), %rax
	movq	6472(%rax), %rdi
	callq	free
	movq	-8(%rbp), %rax
	movq	$0, 6472(%rax)
.LBB7_31:                               # %if.end70
	movq	-8(%rbp), %rdi
	callq	free
	movq	$0, -8(%rbp)
.LBB7_32:                               # %if.end71
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end7:
	.size	free_storable_picture, .Lfunc_end7-free_storable_picture
	.cfi_endproc
                                        # -- End function
	.globl	is_short_ref            # -- Begin function is_short_ref
	.p2align	4, 0x90
	.type	is_short_ref,@function
is_short_ref:                           # @is_short_ref
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	xorl	%eax, %eax
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rcx
	cmpl	$0, 6380(%rcx)
	je	.LBB8_2
# %bb.1:                                # %land.rhs
	movq	-8(%rbp), %rax
	cmpl	$0, 6376(%rax)
	setne	%al
	xorb	$-1, %al
.LBB8_2:                                # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end8:
	.size	is_short_ref, .Lfunc_end8-is_short_ref
	.cfi_endproc
                                        # -- End function
	.globl	is_long_ref             # -- Begin function is_long_ref
	.p2align	4, 0x90
	.type	is_long_ref,@function
is_long_ref:                            # @is_long_ref
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	xorl	%eax, %eax
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rcx
	cmpl	$0, 6380(%rcx)
	je	.LBB9_2
# %bb.1:                                # %land.rhs
	movq	-8(%rbp), %rax
	cmpl	$0, 6376(%rax)
	setne	%al
.LBB9_2:                                # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end9:
	.size	is_long_ref, .Lfunc_end9-is_long_ref
	.cfi_endproc
                                        # -- End function
	.globl	init_lists              # -- Begin function init_lists
	.p2align	4, 0x90
	.type	init_lists,@function
init_lists:                             # @init_lists
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB10_9
# %bb.1:                                # %func_init_lists.11
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	init_lists.11
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_2:                               # %func_init_lists.110
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	init_lists.110
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_3:                               # %func_init_lists.133
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	init_lists.133
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_4:                               # %func_init_lists.134
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	init_lists.134
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_5:                               # %func_init_lists.140
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	init_lists.140
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_6:                               # %func_init_lists.200
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	init_lists.200
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_7:                               # %func_init_lists.212
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	init_lists.212
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_8:                               # %func_init_lists.257
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	init_lists.257
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB10_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB10_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB10_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB10_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB10_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB10_7
	jmp	.LBB10_8
.Lfunc_end10:
	.size	init_lists, .Lfunc_end10-init_lists
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_pic_num_desc
	.type	compare_pic_by_pic_num_desc,@function
compare_pic_by_pic_num_desc:            # @compare_pic_by_pic_num_desc
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB11_7
# %bb.1:                                # %func_compare_pic_by_pic_num_desc.13
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_pic_num_desc.13
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_2:                               # %func_compare_pic_by_pic_num_desc.19
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_pic_num_desc.19
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_3:                               # %func_compare_pic_by_pic_num_desc.23
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_pic_num_desc.23
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_4:                               # %func_compare_pic_by_pic_num_desc.31
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_pic_num_desc.31
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_5:                               # %func_compare_pic_by_pic_num_desc.92
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_pic_num_desc.92
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_6:                               # %func_compare_pic_by_pic_num_desc.101
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_pic_num_desc.101
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB11_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB11_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB11_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB11_5
	jmp	.LBB11_6
.Lfunc_end11:
	.size	compare_pic_by_pic_num_desc, .Lfunc_end11-compare_pic_by_pic_num_desc
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_lt_pic_num_asc
	.type	compare_pic_by_lt_pic_num_asc,@function
compare_pic_by_lt_pic_num_asc:          # @compare_pic_by_lt_pic_num_asc
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB12_7
# %bb.1:                                # %func_compare_pic_by_lt_pic_num_asc.79
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_lt_pic_num_asc.79
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_2:                               # %func_compare_pic_by_lt_pic_num_asc.125
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_lt_pic_num_asc.125
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_3:                               # %func_compare_pic_by_lt_pic_num_asc.173
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_lt_pic_num_asc.173
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_4:                               # %func_compare_pic_by_lt_pic_num_asc.198
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_lt_pic_num_asc.198
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_5:                               # %func_compare_pic_by_lt_pic_num_asc.211
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_lt_pic_num_asc.211
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_6:                               # %func_compare_pic_by_lt_pic_num_asc.239
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_lt_pic_num_asc.239
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB12_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB12_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB12_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB12_5
	jmp	.LBB12_6
.Lfunc_end12:
	.size	compare_pic_by_lt_pic_num_asc, .Lfunc_end12-compare_pic_by_lt_pic_num_asc
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_frame_num_desc
	.type	compare_fs_by_frame_num_desc,@function
compare_fs_by_frame_num_desc:           # @compare_fs_by_frame_num_desc
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB13_7
# %bb.1:                                # %func_compare_fs_by_frame_num_desc.18
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_frame_num_desc.18
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_2:                               # %func_compare_fs_by_frame_num_desc.27
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_frame_num_desc.27
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_3:                               # %func_compare_fs_by_frame_num_desc.34
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_frame_num_desc.34
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_4:                               # %func_compare_fs_by_frame_num_desc.74
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_frame_num_desc.74
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_5:                               # %func_compare_fs_by_frame_num_desc.89
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_frame_num_desc.89
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_6:                               # %func_compare_fs_by_frame_num_desc.112
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_frame_num_desc.112
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB13_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB13_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB13_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB13_5
	jmp	.LBB13_6
.Lfunc_end13:
	.size	compare_fs_by_frame_num_desc, .Lfunc_end13-compare_fs_by_frame_num_desc
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function gen_pic_list_from_frame_list
	.type	gen_pic_list_from_frame_list,@function
gen_pic_list_from_frame_list:           # @gen_pic_list_from_frame_list
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movq	%r8, %r12
	movq	%rcx, %r13
	movl	%edx, %ebx
	movq	%rsi, %r14
	movl	%edi, %r15d
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB14_9
# %bb.1:                                # %func_gen_pic_list_from_frame_list.40
	movl	%r15d, %edi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movq	%r13, %rcx
	movq	%r12, %r8
	movl	-44(%rbp), %r9d         # 4-byte Reload
	callq	gen_pic_list_from_frame_list.40
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_2:                               # %func_gen_pic_list_from_frame_list.57
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movq	%r13, %rcx
	movq	%r12, %r8
	callq	gen_pic_list_from_frame_list.57
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_3:                               # %func_gen_pic_list_from_frame_list.106
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movq	%r13, %rcx
	movq	%r12, %r8
	callq	gen_pic_list_from_frame_list.106
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_4:                               # %func_gen_pic_list_from_frame_list.181
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movq	%r13, %rcx
	movq	%r12, %r8
	callq	gen_pic_list_from_frame_list.181
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_5:                               # %func_gen_pic_list_from_frame_list.187
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movq	%r13, %rcx
	movq	%r12, %r8
	callq	gen_pic_list_from_frame_list.187
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_6:                               # %func_gen_pic_list_from_frame_list.226
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movq	%r13, %rcx
	movq	%r12, %r8
	callq	gen_pic_list_from_frame_list.226
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_7:                               # %func_gen_pic_list_from_frame_list.232
	.cfi_def_cfa %rbp, 16
	callq	gen_pic_list_from_frame_list.232
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_8:                               # %func_gen_pic_list_from_frame_list.238
	.cfi_def_cfa %rbp, 16
	callq	gen_pic_list_from_frame_list.238
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movl	-44(%rbp), %r9d         # 4-byte Reload
	cmpl	$1, %eax
	je	.LBB14_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB14_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB14_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB14_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB14_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	movq	%r12, %r8
	movq	%r13, %rcx
	movl	%ebx, %edx
	movq	%r14, %rsi
	movl	%r15d, %edi
	je	.LBB14_7
	jmp	.LBB14_8
.Lfunc_end14:
	.size	gen_pic_list_from_frame_list, .Lfunc_end14-gen_pic_list_from_frame_list
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_lt_pic_idx_asc
	.type	compare_fs_by_lt_pic_idx_asc,@function
compare_fs_by_lt_pic_idx_asc:           # @compare_fs_by_lt_pic_idx_asc
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB15_7
# %bb.1:                                # %func_compare_fs_by_lt_pic_idx_asc.36
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_lt_pic_idx_asc.36
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_2:                               # %func_compare_fs_by_lt_pic_idx_asc.193
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_lt_pic_idx_asc.193
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_3:                               # %func_compare_fs_by_lt_pic_idx_asc.197
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_lt_pic_idx_asc.197
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_4:                               # %func_compare_fs_by_lt_pic_idx_asc.247
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_lt_pic_idx_asc.247
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_5:                               # %func_compare_fs_by_lt_pic_idx_asc.250
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_lt_pic_idx_asc.250
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_6:                               # %func_compare_fs_by_lt_pic_idx_asc.253
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_lt_pic_idx_asc.253
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB15_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB15_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB15_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB15_5
	jmp	.LBB15_6
.Lfunc_end15:
	.size	compare_fs_by_lt_pic_idx_asc, .Lfunc_end15-compare_fs_by_lt_pic_idx_asc
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_poc_desc
	.type	compare_pic_by_poc_desc,@function
compare_pic_by_poc_desc:                # @compare_pic_by_poc_desc
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB16_7
# %bb.1:                                # %func_compare_pic_by_poc_desc.41
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_poc_desc.41
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_2:                               # %func_compare_pic_by_poc_desc.103
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_poc_desc.103
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_3:                               # %func_compare_pic_by_poc_desc.126
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_poc_desc.126
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_4:                               # %func_compare_pic_by_poc_desc.190
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_poc_desc.190
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_5:                               # %func_compare_pic_by_poc_desc.231
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_poc_desc.231
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_6:                               # %func_compare_pic_by_poc_desc.248
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_poc_desc.248
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB16_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB16_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB16_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB16_5
	jmp	.LBB16_6
.Lfunc_end16:
	.size	compare_pic_by_poc_desc, .Lfunc_end16-compare_pic_by_poc_desc
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_poc_asc
	.type	compare_pic_by_poc_asc,@function
compare_pic_by_poc_asc:                 # @compare_pic_by_poc_asc
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB17_7
# %bb.1:                                # %func_compare_pic_by_poc_asc.24
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_poc_asc.24
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_2:                               # %func_compare_pic_by_poc_asc.46
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_poc_asc.46
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_3:                               # %func_compare_pic_by_poc_asc.65
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_poc_asc.65
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_4:                               # %func_compare_pic_by_poc_asc.105
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_poc_asc.105
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_5:                               # %func_compare_pic_by_poc_asc.122
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_poc_asc.122
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_6:                               # %func_compare_pic_by_poc_asc.146
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_poc_asc.146
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB17_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB17_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB17_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB17_5
	jmp	.LBB17_6
.Lfunc_end17:
	.size	compare_pic_by_poc_asc, .Lfunc_end17-compare_pic_by_poc_asc
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_poc_desc
	.type	compare_fs_by_poc_desc,@function
compare_fs_by_poc_desc:                 # @compare_fs_by_poc_desc
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB18_7
# %bb.1:                                # %func_compare_fs_by_poc_desc.35
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_poc_desc.35
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_2:                               # %func_compare_fs_by_poc_desc.39
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_poc_desc.39
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_3:                               # %func_compare_fs_by_poc_desc.83
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_poc_desc.83
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_4:                               # %func_compare_fs_by_poc_desc.104
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_poc_desc.104
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_5:                               # %func_compare_fs_by_poc_desc.178
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_poc_desc.178
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_6:                               # %func_compare_fs_by_poc_desc.194
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_poc_desc.194
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB18_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB18_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB18_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB18_5
	jmp	.LBB18_6
.Lfunc_end18:
	.size	compare_fs_by_poc_desc, .Lfunc_end18-compare_fs_by_poc_desc
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_poc_asc
	.type	compare_fs_by_poc_asc,@function
compare_fs_by_poc_asc:                  # @compare_fs_by_poc_asc
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB19_7
# %bb.1:                                # %func_compare_fs_by_poc_asc.99
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_poc_asc.99
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_2:                               # %func_compare_fs_by_poc_asc.124
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_poc_asc.124
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_3:                               # %func_compare_fs_by_poc_asc.165
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_poc_asc.165
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_4:                               # %func_compare_fs_by_poc_asc.175
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_poc_asc.175
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_5:                               # %func_compare_fs_by_poc_asc.208
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_poc_asc.208
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_6:                               # %func_compare_fs_by_poc_asc.223
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_poc_asc.223
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB19_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB19_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB19_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB19_5
	jmp	.LBB19_6
.Lfunc_end19:
	.size	compare_fs_by_poc_asc, .Lfunc_end19-compare_fs_by_poc_asc
	.cfi_endproc
                                        # -- End function
	.globl	init_mbaff_lists        # -- Begin function init_mbaff_lists
	.p2align	4, 0x90
	.type	init_mbaff_lists,@function
init_mbaff_lists:                       # @init_mbaff_lists
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB20_2
# %bb.1:                                # %func_init_mbaff_lists.2
	callq	init_mbaff_lists.2
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_2:                               # %func_init_mbaff_lists.75
	.cfi_def_cfa %rbp, 16
	callq	init_mbaff_lists.75
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end20:
	.size	init_mbaff_lists, .Lfunc_end20-init_mbaff_lists
	.cfi_endproc
                                        # -- End function
	.globl	reorder_ref_pic_list    # -- Begin function reorder_ref_pic_list
	.p2align	4, 0x90
	.type	reorder_ref_pic_list,@function
reorder_ref_pic_list:                   # @reorder_ref_pic_list
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%r9, -48(%rbp)          # 8-byte Spill
	movq	%r8, %r12
	movq	%rcx, %r13
	movl	%edx, %ebx
	movq	%rsi, %r14
	movq	%rdi, %r15
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB21_9
# %bb.1:                                # %func_reorder_ref_pic_list.49
	movq	%r15, %rdi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movq	%r13, %rcx
	movq	%r12, %r8
	movq	-48(%rbp), %r9          # 8-byte Reload
	callq	reorder_ref_pic_list.49
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_2:                               # %func_reorder_ref_pic_list.68
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movq	%r13, %rcx
	movq	%r12, %r8
	callq	reorder_ref_pic_list.68
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_3:                               # %func_reorder_ref_pic_list.91
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movq	%r13, %rcx
	movq	%r12, %r8
	callq	reorder_ref_pic_list.91
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_4:                               # %func_reorder_ref_pic_list.97
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movq	%r13, %rcx
	movq	%r12, %r8
	callq	reorder_ref_pic_list.97
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_5:                               # %func_reorder_ref_pic_list.130
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movq	%r13, %rcx
	movq	%r12, %r8
	callq	reorder_ref_pic_list.130
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_6:                               # %func_reorder_ref_pic_list.152
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movq	%r13, %rcx
	movq	%r12, %r8
	callq	reorder_ref_pic_list.152
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_7:                               # %func_reorder_ref_pic_list.177
	.cfi_def_cfa %rbp, 16
	callq	reorder_ref_pic_list.177
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_8:                               # %func_reorder_ref_pic_list.217
	.cfi_def_cfa %rbp, 16
	callq	reorder_ref_pic_list.217
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movq	-48(%rbp), %r9          # 8-byte Reload
	cmpl	$1, %eax
	je	.LBB21_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB21_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB21_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB21_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB21_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	movq	%r12, %r8
	movq	%r13, %rcx
	movl	%ebx, %edx
	movq	%r14, %rsi
	movq	%r15, %rdi
	je	.LBB21_7
	jmp	.LBB21_8
.Lfunc_end21:
	.size	reorder_ref_pic_list, .Lfunc_end21-reorder_ref_pic_list
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function reorder_short_term
	.type	reorder_short_term,@function
reorder_short_term:                     # @reorder_short_term
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rcx, %r14
	movl	%edx, %r15d
	movl	%esi, %r12d
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB22_9
# %bb.1:                                # %func_reorder_short_term.143
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movq	%r14, %rcx
	callq	reorder_short_term.143
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_2:                               # %func_reorder_short_term.163
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movq	%r14, %rcx
	callq	reorder_short_term.163
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_3:                               # %func_reorder_short_term.203
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movq	%r14, %rcx
	callq	reorder_short_term.203
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_4:                               # %func_reorder_short_term.222
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movq	%r14, %rcx
	callq	reorder_short_term.222
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_5:                               # %func_reorder_short_term.236
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movq	%r14, %rcx
	callq	reorder_short_term.236
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_6:                               # %func_reorder_short_term.258
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movq	%r14, %rcx
	callq	reorder_short_term.258
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_7:                               # %func_reorder_short_term.265
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movq	%r14, %rcx
	callq	reorder_short_term.265
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_8:                               # %func_reorder_short_term.266
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movq	%r14, %rcx
	callq	reorder_short_term.266
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB22_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB22_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB22_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB22_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB22_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB22_7
	jmp	.LBB22_8
.Lfunc_end22:
	.size	reorder_short_term, .Lfunc_end22-reorder_short_term
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function reorder_long_term
	.type	reorder_long_term,@function
reorder_long_term:                      # @reorder_long_term
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rcx, %r14
	movl	%edx, %r15d
	movl	%esi, %r12d
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB23_9
# %bb.1:                                # %func_reorder_long_term.56
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movq	%r14, %rcx
	callq	reorder_long_term.56
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_2:                               # %func_reorder_long_term.63
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movq	%r14, %rcx
	callq	reorder_long_term.63
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_3:                               # %func_reorder_long_term.95
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movq	%r14, %rcx
	callq	reorder_long_term.95
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_4:                               # %func_reorder_long_term.127
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movq	%r14, %rcx
	callq	reorder_long_term.127
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_5:                               # %func_reorder_long_term.151
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movq	%r14, %rcx
	callq	reorder_long_term.151
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_6:                               # %func_reorder_long_term.159
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movq	%r14, %rcx
	callq	reorder_long_term.159
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_7:                               # %func_reorder_long_term.191
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movq	%r14, %rcx
	callq	reorder_long_term.191
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_8:                               # %func_reorder_long_term.202
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movq	%r14, %rcx
	callq	reorder_long_term.202
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB23_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB23_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB23_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB23_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB23_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB23_7
	jmp	.LBB23_8
.Lfunc_end23:
	.size	reorder_long_term, .Lfunc_end23-reorder_long_term
	.cfi_endproc
                                        # -- End function
	.globl	update_ref_list         # -- Begin function update_ref_list
	.p2align	4, 0x90
	.type	update_ref_list,@function
update_ref_list:                        # @update_ref_list
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB24_2
# %bb.1:                                # %func_update_ref_list.33
	callq	update_ref_list.33
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_2:                               # %func_update_ref_list.84
	.cfi_def_cfa %rbp, 16
	callq	update_ref_list.84
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end24:
	.size	update_ref_list, .Lfunc_end24-update_ref_list
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function is_short_term_reference
	.type	is_short_term_reference,@function
is_short_term_reference:                # @is_short_term_reference
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB25_2
# %bb.1:                                # %func_is_short_term_reference.4
	movq	%rbx, %rdi
	callq	is_short_term_reference.4
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_2:                               # %func_is_short_term_reference.67
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	is_short_term_reference.67
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end25:
	.size	is_short_term_reference, .Lfunc_end25-is_short_term_reference
	.cfi_endproc
                                        # -- End function
	.globl	update_ltref_list       # -- Begin function update_ltref_list
	.p2align	4, 0x90
	.type	update_ltref_list,@function
update_ltref_list:                      # @update_ltref_list
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB26_2
# %bb.1:                                # %func_update_ltref_list.80
	callq	update_ltref_list.80
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_2:                               # %func_update_ltref_list.107
	.cfi_def_cfa %rbp, 16
	callq	update_ltref_list.107
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end26:
	.size	update_ltref_list, .Lfunc_end26-update_ltref_list
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function is_long_term_reference
	.type	is_long_term_reference,@function
is_long_term_reference:                 # @is_long_term_reference
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB27_2
# %bb.1:                                # %func_is_long_term_reference.12
	movq	%rbx, %rdi
	callq	is_long_term_reference.12
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB27_2:                               # %func_is_long_term_reference.25
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	is_long_term_reference.25
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end27:
	.size	is_long_term_reference, .Lfunc_end27-is_long_term_reference
	.cfi_endproc
                                        # -- End function
	.globl	mm_update_max_long_term_frame_idx # -- Begin function mm_update_max_long_term_frame_idx
	.p2align	4, 0x90
	.type	mm_update_max_long_term_frame_idx,@function
mm_update_max_long_term_frame_idx:      # @mm_update_max_long_term_frame_idx
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB28_2
# %bb.1:                                # %func_mm_update_max_long_term_frame_idx.50
	movl	%ebx, %edi
	callq	mm_update_max_long_term_frame_idx.50
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_2:                               # %func_mm_update_max_long_term_frame_idx.142
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	mm_update_max_long_term_frame_idx.142
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end28:
	.size	mm_update_max_long_term_frame_idx, .Lfunc_end28-mm_update_max_long_term_frame_idx
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function unmark_for_long_term_reference
	.type	unmark_for_long_term_reference,@function
unmark_for_long_term_reference:         # @unmark_for_long_term_reference
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	jne	.LBB29_6
# %bb.1:                                # %if.then
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB29_3
# %bb.2:                                # %if.then2
	movq	-8(%rbp), %rax
	movq	48(%rax), %rax
	movl	$0, 6380(%rax)
	movq	-8(%rbp), %rax
	movq	48(%rax), %rax
	movl	$0, 6376(%rax)
.LBB29_3:                               # %if.end
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB29_5
# %bb.4:                                # %if.then7
	movq	-8(%rbp), %rax
	movq	56(%rax), %rax
	movl	$0, 6380(%rax)
	movq	-8(%rbp), %rax
	movq	56(%rax), %rax
	movl	$0, 6376(%rax)
.LBB29_5:                               # %if.end11
	jmp	.LBB29_6
.LBB29_6:                               # %if.end12
	movq	-8(%rbp), %rax
	cmpl	$3, (%rax)
	jne	.LBB29_10
# %bb.7:                                # %if.then14
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	jne	.LBB29_9
# %bb.8:                                # %if.then17
	movq	-8(%rbp), %rax
	movq	48(%rax), %rax
	movl	$0, 6380(%rax)
	movq	-8(%rbp), %rax
	movq	48(%rax), %rax
	movl	$0, 6376(%rax)
	movq	-8(%rbp), %rax
	movq	56(%rax), %rax
	movl	$0, 6380(%rax)
	movq	-8(%rbp), %rax
	movq	56(%rax), %rax
	movl	$0, 6376(%rax)
.LBB29_9:                               # %if.end26
	movq	-8(%rbp), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
	movq	-8(%rbp), %rax
	movq	40(%rax), %rax
	movl	$0, 6376(%rax)
.LBB29_10:                              # %if.end30
	movq	-8(%rbp), %rax
	movl	$0, 4(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end29:
	.size	unmark_for_long_term_reference, .Lfunc_end29-unmark_for_long_term_reference
	.cfi_endproc
                                        # -- End function
	.globl	store_picture_in_dpb    # -- Begin function store_picture_in_dpb
	.p2align	4, 0x90
	.type	store_picture_in_dpb,@function
store_picture_in_dpb:                   # @store_picture_in_dpb
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB30_9
# %bb.1:                                # %func_store_picture_in_dpb.59
	movq	%rbx, %rdi
	callq	store_picture_in_dpb.59
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_2:                               # %func_store_picture_in_dpb.96
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	store_picture_in_dpb.96
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_3:                               # %func_store_picture_in_dpb.116
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	store_picture_in_dpb.116
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_4:                               # %func_store_picture_in_dpb.131
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	store_picture_in_dpb.131
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_5:                               # %func_store_picture_in_dpb.135
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	store_picture_in_dpb.135
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_6:                               # %func_store_picture_in_dpb.195
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	store_picture_in_dpb.195
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_7:                               # %func_store_picture_in_dpb.220
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	store_picture_in_dpb.220
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_8:                               # %func_store_picture_in_dpb.243
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	store_picture_in_dpb.243
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB30_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB30_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB30_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB30_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB30_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB30_7
	jmp	.LBB30_8
.Lfunc_end30:
	.size	store_picture_in_dpb, .Lfunc_end30-store_picture_in_dpb
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function idr_memory_management
	.type	idr_memory_management,@function
idr_memory_management:                  # @idr_memory_management
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB31_2
# %bb.1:                                # %func_idr_memory_management.61
	movq	%rbx, %rdi
	callq	idr_memory_management.61
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_2:                               # %func_idr_memory_management.71
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	idr_memory_management.71
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end31:
	.size	idr_memory_management, .Lfunc_end31-idr_memory_management
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function adaptive_memory_management
	.type	adaptive_memory_management,@function
adaptive_memory_management:             # @adaptive_memory_management
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB32_2
# %bb.1:                                # %func_adaptive_memory_management.1
	movq	%rbx, %rdi
	callq	adaptive_memory_management.1
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_2:                               # %func_adaptive_memory_management.16
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	adaptive_memory_management.16
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end32:
	.size	adaptive_memory_management, .Lfunc_end32-adaptive_memory_management
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function insert_picture_in_dpb
	.type	insert_picture_in_dpb,@function
insert_picture_in_dpb:                  # @insert_picture_in_dpb
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB33_2
# %bb.1:                                # %func_insert_picture_in_dpb.30
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	insert_picture_in_dpb.30
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_2:                               # %func_insert_picture_in_dpb.70
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	insert_picture_in_dpb.70
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end33:
	.size	insert_picture_in_dpb, .Lfunc_end33-insert_picture_in_dpb
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function sliding_window_memory_management
	.type	sliding_window_memory_management,@function
sliding_window_memory_management:       # @sliding_window_memory_management
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB34_2
# %bb.1:                                # %func_sliding_window_memory_management.90
	movq	%rbx, %rdi
	callq	sliding_window_memory_management.90
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_2:                               # %func_sliding_window_memory_management.139
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	sliding_window_memory_management.139
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end34:
	.size	sliding_window_memory_management, .Lfunc_end34-sliding_window_memory_management
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_smallest_poc
	.type	get_smallest_poc,@function
get_smallest_poc:                       # @get_smallest_poc
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB35_7
# %bb.1:                                # %func_get_smallest_poc.5
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	get_smallest_poc.5
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_2:                               # %func_get_smallest_poc.52
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	get_smallest_poc.52
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_3:                               # %func_get_smallest_poc.66
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	get_smallest_poc.66
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_4:                               # %func_get_smallest_poc.87
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	get_smallest_poc.87
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_5:                               # %func_get_smallest_poc.196
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	get_smallest_poc.196
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_6:                               # %func_get_smallest_poc.213
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	get_smallest_poc.213
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB35_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB35_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB35_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB35_5
	jmp	.LBB35_6
.Lfunc_end35:
	.size	get_smallest_poc, .Lfunc_end35-get_smallest_poc
	.cfi_endproc
                                        # -- End function
	.globl	replace_top_pic_with_frame # -- Begin function replace_top_pic_with_frame
	.p2align	4, 0x90
	.type	replace_top_pic_with_frame,@function
replace_top_pic_with_frame:             # @replace_top_pic_with_frame
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB36_9
# %bb.1:                                # %func_replace_top_pic_with_frame.118
	movq	%rbx, %rdi
	callq	replace_top_pic_with_frame.118
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_2:                               # %func_replace_top_pic_with_frame.136
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	replace_top_pic_with_frame.136
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_3:                               # %func_replace_top_pic_with_frame.180
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	replace_top_pic_with_frame.180
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_4:                               # %func_replace_top_pic_with_frame.184
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	replace_top_pic_with_frame.184
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_5:                               # %func_replace_top_pic_with_frame.192
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	replace_top_pic_with_frame.192
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_6:                               # %func_replace_top_pic_with_frame.221
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	replace_top_pic_with_frame.221
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_7:                               # %func_replace_top_pic_with_frame.229
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	replace_top_pic_with_frame.229
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_8:                               # %func_replace_top_pic_with_frame.235
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	replace_top_pic_with_frame.235
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB36_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB36_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB36_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB36_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB36_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB36_7
	jmp	.LBB36_8
.Lfunc_end36:
	.size	replace_top_pic_with_frame, .Lfunc_end36-replace_top_pic_with_frame
	.cfi_endproc
                                        # -- End function
	.globl	dpb_split_field         # -- Begin function dpb_split_field
	.p2align	4, 0x90
	.type	dpb_split_field,@function
dpb_split_field:                        # @dpb_split_field
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB37_9
# %bb.1:                                # %func_dpb_split_field.9
	movq	%rbx, %rdi
	callq	dpb_split_field.9
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_2:                               # %func_dpb_split_field.14
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	dpb_split_field.14
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_3:                               # %func_dpb_split_field.73
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	dpb_split_field.73
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_4:                               # %func_dpb_split_field.206
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	dpb_split_field.206
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_5:                               # %func_dpb_split_field.234
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	dpb_split_field.234
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_6:                               # %func_dpb_split_field.244
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	dpb_split_field.244
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_7:                               # %func_dpb_split_field.261
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	dpb_split_field.261
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_8:                               # %func_dpb_split_field.264
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	dpb_split_field.264
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB37_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB37_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB37_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB37_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB37_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB37_7
	jmp	.LBB37_8
.Lfunc_end37:
	.size	dpb_split_field, .Lfunc_end37-dpb_split_field
	.cfi_endproc
                                        # -- End function
	.globl	flush_dpb               # -- Begin function flush_dpb
	.p2align	4, 0x90
	.type	flush_dpb,@function
flush_dpb:                              # @flush_dpb
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$0, -4(%rbp)
.LBB38_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB38_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB38_1 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_reference
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB38_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_1
.LBB38_4:                               # %for.end
	jmp	.LBB38_5
.LBB38_5:                               # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	callq	remove_unused_frame_from_dpb
	cmpl	$0, %eax
	je	.LBB38_7
# %bb.6:                                # %while.body
                                        #   in Loop: Header=BB38_5 Depth=1
	jmp	.LBB38_5
.LBB38_7:                               # %while.end
	jmp	.LBB38_8
.LBB38_8:                               # %while.cond1
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, dpb+28
	je	.LBB38_10
# %bb.9:                                # %while.body3
                                        #   in Loop: Header=BB38_8 Depth=1
	callq	output_one_frame_from_dpb
	jmp	.LBB38_8
.LBB38_10:                              # %while.end4
	movl	$-2147483648, dpb+40    # imm = 0x80000000
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end38:
	.size	flush_dpb, .Lfunc_end38-flush_dpb
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function unmark_for_reference
	.type	unmark_for_reference,@function
unmark_for_reference:                   # @unmark_for_reference
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	jne	.LBB39_6
# %bb.1:                                # %if.then
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB39_3
# %bb.2:                                # %if.then2
	movq	-8(%rbp), %rax
	movq	48(%rax), %rax
	movl	$0, 6380(%rax)
.LBB39_3:                               # %if.end
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB39_5
# %bb.4:                                # %if.then6
	movq	-8(%rbp), %rax
	movq	56(%rax), %rax
	movl	$0, 6380(%rax)
.LBB39_5:                               # %if.end8
	jmp	.LBB39_6
.LBB39_6:                               # %if.end9
	movq	-8(%rbp), %rax
	cmpl	$3, (%rax)
	jne	.LBB39_10
# %bb.7:                                # %if.then11
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	jne	.LBB39_9
# %bb.8:                                # %if.then14
	movq	-8(%rbp), %rax
	movq	48(%rax), %rax
	movl	$0, 6380(%rax)
	movq	-8(%rbp), %rax
	movq	56(%rax), %rax
	movl	$0, 6380(%rax)
.LBB39_9:                               # %if.end19
	movq	-8(%rbp), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
.LBB39_10:                              # %if.end21
	movq	-8(%rbp), %rax
	movl	$0, 4(%rax)
	movq	-8(%rbp), %rax
	movq	40(%rax), %rax
	cmpq	$0, 6456(%rax)
	je	.LBB39_12
# %bb.11:                               # %if.then24
	movq	-8(%rbp), %rax
	movq	40(%rax), %rax
	movq	6456(%rax), %rdi
	callq	free_mem2Dpel
	movq	-8(%rbp), %rax
	movq	40(%rax), %rax
	movq	$0, 6456(%rax)
.LBB39_12:                              # %if.end29
	movq	-8(%rbp), %rax
	movq	40(%rax), %rax
	cmpq	$0, 6448(%rax)
	je	.LBB39_14
# %bb.13:                               # %if.then32
	movq	-8(%rbp), %rax
	movq	40(%rax), %rax
	movq	6448(%rax), %rdi
	callq	free_mem2Dpel
	movq	-8(%rbp), %rax
	movq	40(%rax), %rax
	movq	$0, 6448(%rax)
.LBB39_14:                              # %if.end37
	movq	-8(%rbp), %rax
	movq	40(%rax), %rax
	cmpq	$0, 6440(%rax)
	je	.LBB39_16
# %bb.15:                               # %if.then40
	movq	-8(%rbp), %rax
	movq	40(%rax), %rax
	movq	6440(%rax), %rdi
	callq	free
	movq	-8(%rbp), %rax
	movq	40(%rax), %rax
	movq	$0, 6440(%rax)
.LBB39_16:                              # %if.end45
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end39:
	.size	unmark_for_reference, .Lfunc_end39-unmark_for_reference
	.cfi_endproc
                                        # -- End function
	.globl	gen_field_ref_ids       # -- Begin function gen_field_ref_ids
	.p2align	4, 0x90
	.type	gen_field_ref_ids,@function
gen_field_ref_ids:                      # @gen_field_ref_ids
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB40_9
# %bb.1:                                # %func_gen_field_ref_ids.22
	movq	%rbx, %rdi
	callq	gen_field_ref_ids.22
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_2:                               # %func_gen_field_ref_ids.29
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	gen_field_ref_ids.29
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_3:                               # %func_gen_field_ref_ids.48
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	gen_field_ref_ids.48
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_4:                               # %func_gen_field_ref_ids.81
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	gen_field_ref_ids.81
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_5:                               # %func_gen_field_ref_ids.158
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	gen_field_ref_ids.158
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_6:                               # %func_gen_field_ref_ids.183
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	gen_field_ref_ids.183
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_7:                               # %func_gen_field_ref_ids.214
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	gen_field_ref_ids.214
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_8:                               # %func_gen_field_ref_ids.241
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	gen_field_ref_ids.241
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB40_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB40_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB40_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB40_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB40_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB40_7
	jmp	.LBB40_8
.Lfunc_end40:
	.size	gen_field_ref_ids, .Lfunc_end40-gen_field_ref_ids
	.cfi_endproc
                                        # -- End function
	.globl	dpb_combine_field       # -- Begin function dpb_combine_field
	.p2align	4, 0x90
	.type	dpb_combine_field,@function
dpb_combine_field:                      # @dpb_combine_field
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB41_9
# %bb.1:                                # %func_dpb_combine_field.64
	movq	%rbx, %rdi
	callq	dpb_combine_field.64
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_2:                               # %func_dpb_combine_field.72
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	dpb_combine_field.72
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_3:                               # %func_dpb_combine_field.98
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	dpb_combine_field.98
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_4:                               # %func_dpb_combine_field.108
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	dpb_combine_field.108
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_5:                               # %func_dpb_combine_field.113
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	dpb_combine_field.113
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_6:                               # %func_dpb_combine_field.120
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	dpb_combine_field.120
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_7:                               # %func_dpb_combine_field.145
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	dpb_combine_field.145
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_8:                               # %func_dpb_combine_field.147
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	dpb_combine_field.147
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB41_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB41_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB41_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB41_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB41_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB41_7
	jmp	.LBB41_8
.Lfunc_end41:
	.size	dpb_combine_field, .Lfunc_end41-dpb_combine_field
	.cfi_endproc
                                        # -- End function
	.globl	alloc_ref_pic_list_reordering_buffer # -- Begin function alloc_ref_pic_list_reordering_buffer
	.p2align	4, 0x90
	.type	alloc_ref_pic_list_reordering_buffer,@function
alloc_ref_pic_list_reordering_buffer:   # @alloc_ref_pic_list_reordering_buffer
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB42_2
# %bb.1:                                # %func_alloc_ref_pic_list_reordering_buffer.28
	movq	%rbx, %rdi
	callq	alloc_ref_pic_list_reordering_buffer.28
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_2:                               # %func_alloc_ref_pic_list_reordering_buffer.45
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	alloc_ref_pic_list_reordering_buffer.45
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end42:
	.size	alloc_ref_pic_list_reordering_buffer, .Lfunc_end42-alloc_ref_pic_list_reordering_buffer
	.cfi_endproc
                                        # -- End function
	.globl	free_ref_pic_list_reordering_buffer # -- Begin function free_ref_pic_list_reordering_buffer
	.p2align	4, 0x90
	.type	free_ref_pic_list_reordering_buffer,@function
free_ref_pic_list_reordering_buffer:    # @free_ref_pic_list_reordering_buffer
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	cmpq	$0, 64(%rax)
	je	.LBB43_2
# %bb.1:                                # %if.then
	movq	-8(%rbp), %rax
	movq	64(%rax), %rdi
	callq	free
.LBB43_2:                               # %if.end
	movq	-8(%rbp), %rax
	cmpq	$0, 72(%rax)
	je	.LBB43_4
# %bb.3:                                # %if.then3
	movq	-8(%rbp), %rax
	movq	72(%rax), %rdi
	callq	free
.LBB43_4:                               # %if.end5
	movq	-8(%rbp), %rax
	cmpq	$0, 80(%rax)
	je	.LBB43_6
# %bb.5:                                # %if.then7
	movq	-8(%rbp), %rax
	movq	80(%rax), %rdi
	callq	free
.LBB43_6:                               # %if.end9
	movq	-8(%rbp), %rax
	movq	$0, 64(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 72(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 80(%rax)
	movq	-8(%rbp), %rax
	cmpq	$0, 96(%rax)
	je	.LBB43_8
# %bb.7:                                # %if.then14
	movq	-8(%rbp), %rax
	movq	96(%rax), %rdi
	callq	free
.LBB43_8:                               # %if.end16
	movq	-8(%rbp), %rax
	cmpq	$0, 104(%rax)
	je	.LBB43_10
# %bb.9:                                # %if.then18
	movq	-8(%rbp), %rax
	movq	104(%rax), %rdi
	callq	free
.LBB43_10:                              # %if.end20
	movq	-8(%rbp), %rax
	cmpq	$0, 112(%rax)
	je	.LBB43_12
# %bb.11:                               # %if.then22
	movq	-8(%rbp), %rax
	movq	112(%rax), %rdi
	callq	free
.LBB43_12:                              # %if.end24
	movq	-8(%rbp), %rax
	movq	$0, 96(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 104(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 112(%rax)
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end43:
	.size	free_ref_pic_list_reordering_buffer, .Lfunc_end43-free_ref_pic_list_reordering_buffer
	.cfi_endproc
                                        # -- End function
	.globl	fill_frame_num_gap      # -- Begin function fill_frame_num_gap
	.p2align	4, 0x90
	.type	fill_frame_num_gap,@function
fill_frame_num_gap:                     # @fill_frame_num_gap
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB44_9
# %bb.1:                                # %func_fill_frame_num_gap.44
	movq	%rbx, %rdi
	callq	fill_frame_num_gap.44
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_2:                               # %func_fill_frame_num_gap.55
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	fill_frame_num_gap.55
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_3:                               # %func_fill_frame_num_gap.86
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	fill_frame_num_gap.86
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_4:                               # %func_fill_frame_num_gap.148
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	fill_frame_num_gap.148
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_5:                               # %func_fill_frame_num_gap.153
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	fill_frame_num_gap.153
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_6:                               # %func_fill_frame_num_gap.155
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	fill_frame_num_gap.155
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_7:                               # %func_fill_frame_num_gap.185
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	fill_frame_num_gap.185
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_8:                               # %func_fill_frame_num_gap.199
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	fill_frame_num_gap.199
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB44_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB44_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB44_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB44_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB44_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB44_7
	jmp	.LBB44_8
.Lfunc_end44:
	.size	fill_frame_num_gap, .Lfunc_end44-fill_frame_num_gap
	.cfi_endproc
                                        # -- End function
	.globl	alloc_colocated         # -- Begin function alloc_colocated
	.p2align	4, 0x90
	.type	alloc_colocated,@function
alloc_colocated:                        # @alloc_colocated
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edx, %r14d
	movl	%esi, %r15d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB45_9
# %bb.1:                                # %func_alloc_colocated.6
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	alloc_colocated.6
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_2:                               # %func_alloc_colocated.51
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	alloc_colocated.51
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_3:                               # %func_alloc_colocated.54
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	alloc_colocated.54
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_4:                               # %func_alloc_colocated.82
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	alloc_colocated.82
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_5:                               # %func_alloc_colocated.171
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	alloc_colocated.171
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_6:                               # %func_alloc_colocated.186
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	alloc_colocated.186
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_7:                               # %func_alloc_colocated.242
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	alloc_colocated.242
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_8:                               # %func_alloc_colocated.246
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	alloc_colocated.246
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB45_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB45_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB45_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB45_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB45_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB45_7
	jmp	.LBB45_8
.Lfunc_end45:
	.size	alloc_colocated, .Lfunc_end45-alloc_colocated
	.cfi_endproc
                                        # -- End function
	.globl	free_colocated          # -- Begin function free_colocated
	.p2align	4, 0x90
	.type	free_colocated,@function
free_colocated:                         # @free_colocated
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.LBB46_12
# %bb.1:                                # %if.then
	movq	-8(%rbp), %rax
	movq	1600(%rax), %rdi
	movl	$2, %esi
	callq	free_mem3Dshort
	movq	-8(%rbp), %rax
	movq	1608(%rax), %rdi
	movl	$2, %esi
	callq	free_mem3Dint64
	movq	-8(%rbp), %rax
	movq	1616(%rax), %rdi
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	$2, %esi
	movl	%eax, %edx
	callq	free_mem4Dshort
	movq	-8(%rbp), %rax
	cmpq	$0, 1624(%rax)
	je	.LBB46_3
# %bb.2:                                # %if.then2
	movq	-8(%rbp), %rax
	movq	1624(%rax), %rdi
	callq	free_mem2D
	movq	-8(%rbp), %rax
	movq	$0, 1624(%rax)
.LBB46_3:                               # %if.end
	movq	-8(%rbp), %rax
	cmpq	$0, 4872(%rax)
	je	.LBB46_5
# %bb.4:                                # %if.then6
	movq	-8(%rbp), %rax
	movq	4872(%rax), %rdi
	callq	free_mem2D
	movq	-8(%rbp), %rax
	movq	$0, 4872(%rax)
.LBB46_5:                               # %if.end9
	movq	-8(%rbp), %rax
	cmpl	$0, (%rax)
	je	.LBB46_11
# %bb.6:                                # %if.then11
	movq	-8(%rbp), %rax
	movq	3216(%rax), %rdi
	movl	$2, %esi
	callq	free_mem3Dshort
	movq	-8(%rbp), %rax
	movq	3224(%rax), %rdi
	movl	$2, %esi
	callq	free_mem3Dint64
	movq	-8(%rbp), %rax
	movq	3232(%rax), %rdi
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	$2, %esi
	movl	%eax, %edx
	callq	free_mem4Dshort
	movq	-8(%rbp), %rax
	cmpq	$0, 3240(%rax)
	je	.LBB46_8
# %bb.7:                                # %if.then15
	movq	-8(%rbp), %rax
	movq	3240(%rax), %rdi
	callq	free_mem2D
	movq	-8(%rbp), %rax
	movq	$0, 3240(%rax)
.LBB46_8:                               # %if.end18
	movq	-8(%rbp), %rax
	movq	4832(%rax), %rdi
	movl	$2, %esi
	callq	free_mem3Dshort
	movq	-8(%rbp), %rax
	movq	4840(%rax), %rdi
	movl	$2, %esi
	callq	free_mem3Dint64
	movq	-8(%rbp), %rax
	movq	4848(%rax), %rdi
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	$2, %esi
	movl	%eax, %edx
	callq	free_mem4Dshort
	movq	-8(%rbp), %rax
	cmpq	$0, 4856(%rax)
	je	.LBB46_10
# %bb.9:                                # %if.then22
	movq	-8(%rbp), %rax
	movq	4856(%rax), %rdi
	callq	free_mem2D
	movq	-8(%rbp), %rax
	movq	$0, 4856(%rax)
.LBB46_10:                              # %if.end25
	jmp	.LBB46_11
.LBB46_11:                              # %if.end26
	movq	-8(%rbp), %rdi
	callq	free
	movq	$0, -8(%rbp)
.LBB46_12:                              # %if.end27
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end46:
	.size	free_colocated, .Lfunc_end46-free_colocated
	.cfi_endproc
                                        # -- End function
	.globl	compute_colocated       # -- Begin function compute_colocated
	.p2align	4, 0x90
	.type	compute_colocated,@function
compute_colocated:                      # @compute_colocated
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB47_9
# %bb.1:                                # %func_compute_colocated.7
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compute_colocated.7
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_2:                               # %func_compute_colocated.166
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compute_colocated.166
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_3:                               # %func_compute_colocated.167
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compute_colocated.167
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_4:                               # %func_compute_colocated.169
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compute_colocated.169
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_5:                               # %func_compute_colocated.170
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compute_colocated.170
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_6:                               # %func_compute_colocated.205
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compute_colocated.205
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_7:                               # %func_compute_colocated.227
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compute_colocated.227
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_8:                               # %func_compute_colocated.252
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compute_colocated.252
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB47_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB47_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB47_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB47_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB47_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB47_7
	jmp	.LBB47_8
.Lfunc_end47:
	.size	compute_colocated, .Lfunc_end47-compute_colocated
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_short_term_pic
	.type	get_short_term_pic,@function
get_short_term_pic:                     # @get_short_term_pic
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB48_7
# %bb.1:                                # %func_get_short_term_pic.119
	movl	%ebx, %edi
	callq	get_short_term_pic.119
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB48_2:                               # %func_get_short_term_pic.141
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	get_short_term_pic.141
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB48_3:                               # %func_get_short_term_pic.161
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	get_short_term_pic.161
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB48_4:                               # %func_get_short_term_pic.179
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	get_short_term_pic.179
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB48_5:                               # %func_get_short_term_pic.201
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	get_short_term_pic.201
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB48_6:                               # %func_get_short_term_pic.259
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	get_short_term_pic.259
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB48_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB48_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB48_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB48_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB48_5
	jmp	.LBB48_6
.Lfunc_end48:
	.size	get_short_term_pic, .Lfunc_end48-get_short_term_pic
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_long_term_pic
	.type	get_long_term_pic,@function
get_long_term_pic:                      # @get_long_term_pic
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB49_7
# %bb.1:                                # %func_get_long_term_pic.37
	movl	%ebx, %edi
	callq	get_long_term_pic.37
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB49_2:                               # %func_get_long_term_pic.85
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	get_long_term_pic.85
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB49_3:                               # %func_get_long_term_pic.109
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	get_long_term_pic.109
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB49_4:                               # %func_get_long_term_pic.123
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	get_long_term_pic.123
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB49_5:                               # %func_get_long_term_pic.137
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	get_long_term_pic.137
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB49_6:                               # %func_get_long_term_pic.162
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	get_long_term_pic.162
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB49_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB49_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB49_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB49_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB49_5
	jmp	.LBB49_6
.Lfunc_end49:
	.size	get_long_term_pic, .Lfunc_end49-get_long_term_pic
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_unmark_short_term_for_reference
	.type	mm_unmark_short_term_for_reference,@function
mm_unmark_short_term_for_reference:     # @mm_unmark_short_term_for_reference
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB50_9
# %bb.1:                                # %func_mm_unmark_short_term_for_reference.32
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	mm_unmark_short_term_for_reference.32
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB50_2:                               # %func_mm_unmark_short_term_for_reference.69
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	mm_unmark_short_term_for_reference.69
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB50_3:                               # %func_mm_unmark_short_term_for_reference.88
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	mm_unmark_short_term_for_reference.88
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB50_4:                               # %func_mm_unmark_short_term_for_reference.128
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	mm_unmark_short_term_for_reference.128
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB50_5:                               # %func_mm_unmark_short_term_for_reference.172
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	mm_unmark_short_term_for_reference.172
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB50_6:                               # %func_mm_unmark_short_term_for_reference.215
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	mm_unmark_short_term_for_reference.215
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB50_7:                               # %func_mm_unmark_short_term_for_reference.216
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	mm_unmark_short_term_for_reference.216
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB50_8:                               # %func_mm_unmark_short_term_for_reference.228
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	mm_unmark_short_term_for_reference.228
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB50_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB50_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB50_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB50_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB50_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB50_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB50_7
	jmp	.LBB50_8
.Lfunc_end50:
	.size	mm_unmark_short_term_for_reference, .Lfunc_end50-mm_unmark_short_term_for_reference
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_unmark_long_term_for_reference
	.type	mm_unmark_long_term_for_reference,@function
mm_unmark_long_term_for_reference:      # @mm_unmark_long_term_for_reference
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB51_7
# %bb.1:                                # %func_mm_unmark_long_term_for_reference.8
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	mm_unmark_long_term_for_reference.8
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB51_2:                               # %func_mm_unmark_long_term_for_reference.10
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	mm_unmark_long_term_for_reference.10
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB51_3:                               # %func_mm_unmark_long_term_for_reference.47
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	mm_unmark_long_term_for_reference.47
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB51_4:                               # %func_mm_unmark_long_term_for_reference.157
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	mm_unmark_long_term_for_reference.157
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB51_5:                               # %func_mm_unmark_long_term_for_reference.219
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	mm_unmark_long_term_for_reference.219
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB51_6:                               # %func_mm_unmark_long_term_for_reference.262
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	mm_unmark_long_term_for_reference.262
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB51_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB51_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB51_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB51_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB51_5
	jmp	.LBB51_6
.Lfunc_end51:
	.size	mm_unmark_long_term_for_reference, .Lfunc_end51-mm_unmark_long_term_for_reference
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_assign_long_term_frame_idx
	.type	mm_assign_long_term_frame_idx,@function
mm_assign_long_term_frame_idx:          # @mm_assign_long_term_frame_idx
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edx, %r14d
	movl	%esi, %r15d
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB52_9
# %bb.1:                                # %func_mm_assign_long_term_frame_idx.17
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	mm_assign_long_term_frame_idx.17
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB52_2:                               # %func_mm_assign_long_term_frame_idx.42
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	mm_assign_long_term_frame_idx.42
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB52_3:                               # %func_mm_assign_long_term_frame_idx.168
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	mm_assign_long_term_frame_idx.168
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB52_4:                               # %func_mm_assign_long_term_frame_idx.204
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	mm_assign_long_term_frame_idx.204
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB52_5:                               # %func_mm_assign_long_term_frame_idx.207
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	mm_assign_long_term_frame_idx.207
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB52_6:                               # %func_mm_assign_long_term_frame_idx.224
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	mm_assign_long_term_frame_idx.224
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB52_7:                               # %func_mm_assign_long_term_frame_idx.245
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	mm_assign_long_term_frame_idx.245
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB52_8:                               # %func_mm_assign_long_term_frame_idx.249
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	mm_assign_long_term_frame_idx.249
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB52_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB52_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB52_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB52_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB52_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB52_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB52_7
	jmp	.LBB52_8
.Lfunc_end52:
	.size	mm_assign_long_term_frame_idx, .Lfunc_end52-mm_assign_long_term_frame_idx
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_mark_current_picture_long_term
	.type	mm_mark_current_picture_long_term,@function
mm_mark_current_picture_long_term:      # @mm_mark_current_picture_long_term
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB53_2
# %bb.1:                                # %func_mm_mark_current_picture_long_term.76
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	mm_mark_current_picture_long_term.76
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB53_2:                               # %func_mm_mark_current_picture_long_term.100
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	mm_mark_current_picture_long_term.100
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end53:
	.size	mm_mark_current_picture_long_term, .Lfunc_end53-mm_mark_current_picture_long_term
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_pic_num_x
	.type	get_pic_num_x,@function
get_pic_num_x:                          # @get_pic_num_x
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB54_7
# %bb.1:                                # %func_get_pic_num_x.53
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	get_pic_num_x.53
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB54_2:                               # %func_get_pic_num_x.111
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	get_pic_num_x.111
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB54_3:                               # %func_get_pic_num_x.114
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	get_pic_num_x.114
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB54_4:                               # %func_get_pic_num_x.129
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	get_pic_num_x.129
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB54_5:                               # %func_get_pic_num_x.210
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	get_pic_num_x.210
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB54_6:                               # %func_get_pic_num_x.230
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	get_pic_num_x.230
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB54_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB54_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB54_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB54_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB54_5
	jmp	.LBB54_6
.Lfunc_end54:
	.size	get_pic_num_x, .Lfunc_end54-get_pic_num_x
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function unmark_long_term_frame_for_reference_by_frame_idx
	.type	unmark_long_term_frame_for_reference_by_frame_idx,@function
unmark_long_term_frame_for_reference_by_frame_idx: # @unmark_long_term_frame_for_reference_by_frame_idx
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB55_2
# %bb.1:                                # %func_unmark_long_term_frame_for_reference_by_frame_idx.102
	movl	%ebx, %edi
	callq	unmark_long_term_frame_for_reference_by_frame_idx.102
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB55_2:                               # %func_unmark_long_term_frame_for_reference_by_frame_idx.144
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	unmark_long_term_frame_for_reference_by_frame_idx.144
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end55:
	.size	unmark_long_term_frame_for_reference_by_frame_idx, .Lfunc_end55-unmark_long_term_frame_for_reference_by_frame_idx
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function unmark_long_term_field_for_reference_by_frame_idx
	.type	unmark_long_term_field_for_reference_by_frame_idx,@function
unmark_long_term_field_for_reference_by_frame_idx: # @unmark_long_term_field_for_reference_by_frame_idx
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r8d, %r14d
	movl	%ecx, %r15d
	movl	%edx, %r12d
	movl	%esi, %r13d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB56_9
# %bb.1:                                # %func_unmark_long_term_field_for_reference_by_frame_idx.3
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	unmark_long_term_field_for_reference_by_frame_idx.3
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB56_2:                               # %func_unmark_long_term_field_for_reference_by_frame_idx.15
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	unmark_long_term_field_for_reference_by_frame_idx.15
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB56_3:                               # %func_unmark_long_term_field_for_reference_by_frame_idx.154
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	unmark_long_term_field_for_reference_by_frame_idx.154
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB56_4:                               # %func_unmark_long_term_field_for_reference_by_frame_idx.160
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	unmark_long_term_field_for_reference_by_frame_idx.160
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB56_5:                               # %func_unmark_long_term_field_for_reference_by_frame_idx.176
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	unmark_long_term_field_for_reference_by_frame_idx.176
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB56_6:                               # %func_unmark_long_term_field_for_reference_by_frame_idx.233
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	unmark_long_term_field_for_reference_by_frame_idx.233
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB56_7:                               # %func_unmark_long_term_field_for_reference_by_frame_idx.254
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	unmark_long_term_field_for_reference_by_frame_idx.254
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB56_8:                               # %func_unmark_long_term_field_for_reference_by_frame_idx.260
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	unmark_long_term_field_for_reference_by_frame_idx.260
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB56_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB56_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB56_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB56_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB56_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB56_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB56_7
	jmp	.LBB56_8
.Lfunc_end56:
	.size	unmark_long_term_field_for_reference_by_frame_idx, .Lfunc_end56-unmark_long_term_field_for_reference_by_frame_idx
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mark_pic_long_term
	.type	mark_pic_long_term,@function
mark_pic_long_term:                     # @mark_pic_long_term
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edx, %r14d
	movl	%esi, %r15d
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB57_9
# %bb.1:                                # %func_mark_pic_long_term.93
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	mark_pic_long_term.93
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB57_2:                               # %func_mark_pic_long_term.94
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	mark_pic_long_term.94
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB57_3:                               # %func_mark_pic_long_term.121
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	mark_pic_long_term.121
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB57_4:                               # %func_mark_pic_long_term.132
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	mark_pic_long_term.132
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB57_5:                               # %func_mark_pic_long_term.138
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	mark_pic_long_term.138
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB57_6:                               # %func_mark_pic_long_term.182
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	mark_pic_long_term.182
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB57_7:                               # %func_mark_pic_long_term.189
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	mark_pic_long_term.189
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB57_8:                               # %func_mark_pic_long_term.209
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	mark_pic_long_term.209
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB57_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB57_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB57_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB57_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB57_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB57_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB57_7
	jmp	.LBB57_8
.Lfunc_end57:
	.size	mark_pic_long_term, .Lfunc_end57-mark_pic_long_term
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_unmark_all_short_term_for_reference
	.type	mm_unmark_all_short_term_for_reference,@function
mm_unmark_all_short_term_for_reference: # @mm_unmark_all_short_term_for_reference
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$0, -4(%rbp)
.LBB58_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB58_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB58_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_reference
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB58_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_1
.LBB58_4:                               # %for.end
	callq	update_ref_list
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end58:
	.size	mm_unmark_all_short_term_for_reference, .Lfunc_end58-mm_unmark_all_short_term_for_reference
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_unmark_all_long_term_for_reference
	.type	mm_unmark_all_long_term_for_reference,@function
mm_unmark_all_long_term_for_reference:  # @mm_unmark_all_long_term_for_reference
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	xorl	%edi, %edi
	callq	mm_update_max_long_term_frame_idx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end59:
	.size	mm_unmark_all_long_term_for_reference, .Lfunc_end59-mm_unmark_all_long_term_for_reference
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function remove_unused_frame_from_dpb
	.type	remove_unused_frame_from_dpb,@function
remove_unused_frame_from_dpb:           # @remove_unused_frame_from_dpb
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB60_2
# %bb.1:                                # %func_remove_unused_frame_from_dpb.62
	callq	remove_unused_frame_from_dpb.62
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB60_2:                               # %func_remove_unused_frame_from_dpb.78
	.cfi_def_cfa %rbp, 16
	callq	remove_unused_frame_from_dpb.78
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end60:
	.size	remove_unused_frame_from_dpb, .Lfunc_end60-remove_unused_frame_from_dpb
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function is_used_for_reference
	.type	is_used_for_reference,@function
is_used_for_reference:                  # @is_used_for_reference
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB61_2
# %bb.1:                                # %func_is_used_for_reference.60
	movq	%rbx, %rdi
	callq	is_used_for_reference.60
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB61_2:                               # %func_is_used_for_reference.77
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	is_used_for_reference.77
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end61:
	.size	is_used_for_reference, .Lfunc_end61-is_used_for_reference
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function remove_frame_from_dpb
	.type	remove_frame_from_dpb,@function
remove_frame_from_dpb:                  # @remove_frame_from_dpb
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB62_9
# %bb.1:                                # %func_remove_frame_from_dpb.20
	movl	%ebx, %edi
	callq	remove_frame_from_dpb.20
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB62_2:                               # %func_remove_frame_from_dpb.26
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	remove_frame_from_dpb.26
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB62_3:                               # %func_remove_frame_from_dpb.149
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	remove_frame_from_dpb.149
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB62_4:                               # %func_remove_frame_from_dpb.218
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	remove_frame_from_dpb.218
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB62_5:                               # %func_remove_frame_from_dpb.251
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	remove_frame_from_dpb.251
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB62_6:                               # %func_remove_frame_from_dpb.255
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	remove_frame_from_dpb.255
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB62_7:                               # %func_remove_frame_from_dpb.256
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	remove_frame_from_dpb.256
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB62_8:                               # %func_remove_frame_from_dpb.263
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	remove_frame_from_dpb.263
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB62_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB62_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB62_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB62_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB62_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB62_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB62_7
	jmp	.LBB62_8
.Lfunc_end62:
	.size	remove_frame_from_dpb, .Lfunc_end62-remove_frame_from_dpb
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function output_one_frame_from_dpb
	.type	output_one_frame_from_dpb,@function
output_one_frame_from_dpb:              # @output_one_frame_from_dpb
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB63_2
# %bb.1:                                # %func_output_one_frame_from_dpb.156
	callq	output_one_frame_from_dpb.156
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB63_2:                               # %func_output_one_frame_from_dpb.164
	.cfi_def_cfa %rbp, 16
	callq	output_one_frame_from_dpb.164
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end63:
	.size	output_one_frame_from_dpb, .Lfunc_end63-output_one_frame_from_dpb
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function adaptive_memory_management.1
	.type	adaptive_memory_management.1,@function
adaptive_memory_management.1:           # @adaptive_memory_management.1
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1545856409, -20(%rbp)  # imm = 0x5C23E599
	movq	%rdi, -16(%rbp)
	movq	img, %rax
	movl	$0, 72644(%rax)
.LBB64_1:                               # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	img, %rax
	cmpq	$0, 72512(%rax)
	je	.LBB64_15
# %bb.2:                                # %while.body
                                        #   in Loop: Header=BB64_1 Depth=1
	movq	img(%rip), %rax
	movq	72512(%rax), %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	movq	%rax, %rcx
	subq	$6, %rcx
	ja	.LBB64_13
# %bb.3:                                # %while.body
                                        #   in Loop: Header=BB64_1 Depth=1
	movq	.LJTI64_0(,%rax,8), %rax
	jmpq	*%rax
.LBB64_4:                               # %sw.bb
                                        #   in Loop: Header=BB64_1 Depth=1
	movq	-8(%rbp), %rax
	cmpq	$0, 24(%rax)
	je	.LBB64_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB64_1 Depth=1
	movabsq	$.L.str.22, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB64_6:                               # %if.end
                                        #   in Loop: Header=BB64_1 Depth=1
	jmp	.LBB64_14
.LBB64_7:                               # %sw.bb2
                                        #   in Loop: Header=BB64_1 Depth=1
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rax
	movl	4(%rax), %esi
	callq	mm_unmark_short_term_for_reference
	callq	update_ref_list
	jmp	.LBB64_14
.LBB64_8:                               # %sw.bb3
                                        #   in Loop: Header=BB64_1 Depth=1
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rax
	movl	8(%rax), %esi
	callq	mm_unmark_long_term_for_reference
	callq	update_ltref_list
	jmp	.LBB64_14
.LBB64_9:                               # %sw.bb4
                                        #   in Loop: Header=BB64_1 Depth=1
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rax
	movl	4(%rax), %esi
	movq	-8(%rbp), %rax
	movl	12(%rax), %edx
	callq	mm_assign_long_term_frame_idx
	callq	update_ref_list
	callq	update_ltref_list
	jmp	.LBB64_14
.LBB64_10:                              # %sw.bb6
                                        #   in Loop: Header=BB64_1 Depth=1
	movq	-8(%rbp), %rax
	movl	16(%rax), %edi
	callq	mm_update_max_long_term_frame_idx
	callq	update_ltref_list
	jmp	.LBB64_14
.LBB64_11:                              # %sw.bb7
                                        #   in Loop: Header=BB64_1 Depth=1
	callq	mm_unmark_all_short_term_for_reference
	callq	mm_unmark_all_long_term_for_reference
	movq	img, %rax
	movl	$1, 72644(%rax)
	jmp	.LBB64_14
.LBB64_12:                              # %sw.bb9
                                        #   in Loop: Header=BB64_1 Depth=1
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rax
	movl	12(%rax), %esi
	callq	mm_mark_current_picture_long_term
	jmp	.LBB64_14
.LBB64_13:                              # %sw.default
                                        #   in Loop: Header=BB64_1 Depth=1
	movabsq	$.L.str.23, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB64_14:                              # %sw.epilog
                                        #   in Loop: Header=BB64_1 Depth=1
	movq	-8(%rbp), %rax
	movq	24(%rax), %rax
	movq	img, %rcx
	movq	%rax, 72512(%rcx)
	movq	-8(%rbp), %rdi
	callq	free
	jmp	.LBB64_1
.LBB64_15:                              # %while.end
	movq	img, %rax
	cmpl	$0, 72644(%rax)
	je	.LBB64_23
# %bb.16:                               # %if.then15
	movq	-16(%rbp), %rax
	movl	$0, 6360(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6364(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 4(%rax)
	movq	img(%rip), %rax
	movl	$0, 72460(%rax)
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	testl	%eax, %eax
	je	.LBB64_21
	jmp	.LBB64_17
.LBB64_17:                              # %if.then15
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB64_19
	jmp	.LBB64_18
.LBB64_18:                              # %if.then15
	subl	$2, %eax
	je	.LBB64_20
	jmp	.LBB64_22
.LBB64_19:                              # %sw.bb16
	movq	img, %rax
	movl	$0, 72448(%rax)
	jmp	.LBB64_22
.LBB64_20:                              # %sw.bb17
	movq	img, %rax
	movl	$0, 72452(%rax)
	jmp	.LBB64_22
.LBB64_21:                              # %sw.bb18
	movq	img, %rax
	movl	$0, 72456(%rax)
.LBB64_22:                              # %sw.epilog19
	callq	flush_dpb
.LBB64_23:                              # %if.end20
	cmpl	$1545856409, -20(%rbp)  # imm = 0x5C23E599
	jne	.LBB64_25
.LBB64_24:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB64_25:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB64_24
.Lfunc_end64:
	.size	adaptive_memory_management.1, .Lfunc_end64-adaptive_memory_management.1
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI64_0:
	.quad	.LBB64_4
	.quad	.LBB64_7
	.quad	.LBB64_8
	.quad	.LBB64_9
	.quad	.LBB64_10
	.quad	.LBB64_11
	.quad	.LBB64_12
                                        # -- End function
	.text
	.globl	init_mbaff_lists.2      # -- Begin function init_mbaff_lists.2
	.p2align	4, 0x90
	.type	init_mbaff_lists.2,@function
init_mbaff_lists.2:                     # @init_mbaff_lists.2
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1439742491, -12(%rbp)  # imm = 0x55D0BA1B
	movl	$2, -4(%rbp)
.LBB65_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_3 Depth 2
	cmpl	$6, -4(%rbp)
	jge	.LBB65_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	$0, -8(%rbp)
.LBB65_3:                               # %for.cond1
                                        #   Parent Loop BB65_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$33, -8(%rbp)
	jae	.LBB65_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB65_3 Depth=2
	movslq	-4(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movl	-8(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB65_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_3
.LBB65_6:                               # %for.end
                                        #   in Loop: Header=BB65_1 Depth=1
	movslq	-4(%rbp), %rax
	movl	$0, listXsize(,%rax,4)
# %bb.7:                                # %for.inc8
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_1
.LBB65_8:                               # %for.end10
	movl	$0, -4(%rbp)
.LBB65_9:                               # %for.cond11
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB65_12
# %bb.10:                               # %for.body13
                                        #   in Loop: Header=BB65_9 Depth=1
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6528(%rax), %rax
	movq	listX+16, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6536(%rax), %rax
	movq	listX+16, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6536(%rax), %rax
	movq	listX+32, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6528(%rax), %rax
	movq	listX+32, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.11:                               # %for.inc36
                                        #   in Loop: Header=BB65_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_9
.LBB65_12:                              # %for.end38
	movl	listXsize, %eax
	shll	$1, %eax
	movl	%eax, listXsize+16
	movl	%eax, listXsize+8
	movl	$0, -4(%rbp)
.LBB65_13:                              # %for.cond40
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB65_16
# %bb.14:                               # %for.body42
                                        #   in Loop: Header=BB65_13 Depth=1
	movq	listX+8, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6528(%rax), %rax
	movq	listX+24, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	listX+8, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6536(%rax), %rax
	movq	listX+24, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	listX+8, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6536(%rax), %rax
	movq	listX+40, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	listX+8, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6528(%rax), %rax
	movq	listX+40, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.15:                               # %for.inc69
                                        #   in Loop: Header=BB65_13 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_13
.LBB65_16:                              # %for.end71
	movl	listXsize+4, %eax
	shll	$1, %eax
	movl	%eax, listXsize+20
	movl	%eax, listXsize+12
	cmpl	$1439742491, -12(%rbp)  # imm = 0x55D0BA1B
	jne	.LBB65_18
.LBB65_17:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB65_18:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB65_17
.Lfunc_end65:
	.size	init_mbaff_lists.2, .Lfunc_end65-init_mbaff_lists.2
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function unmark_long_term_field_for_reference_by_frame_idx.3
	.type	unmark_long_term_field_for_reference_by_frame_idx.3,@function
unmark_long_term_field_for_reference_by_frame_idx.3: # @unmark_long_term_field_for_reference_by_frame_idx.3
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$695424262, -24(%rbp)   # imm = 0x29735506
	movl	%edi, -12(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -16(%rbp)
	movl	%r8d, -8(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -8(%rbp)
	jge	.LBB66_2
# %bb.1:                                # %if.then
	movl	-32(%rbp), %eax
	shll	$1, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB66_2:                               # %if.end
	movl	$0, -4(%rbp)
.LBB66_3:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB66_46
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB66_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB66_44
# %bb.5:                                # %if.then5
                                        #   in Loop: Header=BB66_3 Depth=1
	cmpl	$1, -12(%rbp)
	jne	.LBB66_24
# %bb.6:                                # %if.then7
                                        #   in Loop: Header=BB66_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB66_8
# %bb.7:                                # %if.then11
                                        #   in Loop: Header=BB66_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB66_23
.LBB66_8:                               # %if.else
                                        #   in Loop: Header=BB66_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, 8(%rax)
	jne	.LBB66_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB66_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB66_22
.LBB66_10:                              # %if.else21
                                        #   in Loop: Header=BB66_3 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB66_18
# %bb.11:                               # %if.then22
                                        #   in Loop: Header=BB66_3 Depth=1
	cmpq	$0, dpb+56
	je	.LBB66_16
# %bb.12:                               # %if.then24
                                        #   in Loop: Header=BB66_3 Depth=1
	movq	dpb+56, %rax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	cmpq	(%rcx,%rdx,8), %rax
	jne	.LBB66_14
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB66_3 Depth=1
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB66_15
.LBB66_14:                              # %if.then29
                                        #   in Loop: Header=BB66_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB66_15:                              # %if.end32
                                        #   in Loop: Header=BB66_3 Depth=1
	jmp	.LBB66_17
.LBB66_16:                              # %if.else33
                                        #   in Loop: Header=BB66_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB66_17:                              # %if.end36
                                        #   in Loop: Header=BB66_3 Depth=1
	jmp	.LBB66_21
.LBB66_18:                              # %if.else37
                                        #   in Loop: Header=BB66_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %ecx
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	je	.LBB66_20
# %bb.19:                               # %if.then42
                                        #   in Loop: Header=BB66_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB66_20:                              # %if.end45
                                        #   in Loop: Header=BB66_3 Depth=1
	jmp	.LBB66_21
.LBB66_21:                              # %if.end46
                                        #   in Loop: Header=BB66_3 Depth=1
	jmp	.LBB66_22
.LBB66_22:                              # %if.end47
                                        #   in Loop: Header=BB66_3 Depth=1
	jmp	.LBB66_23
.LBB66_23:                              # %if.end48
                                        #   in Loop: Header=BB66_3 Depth=1
	jmp	.LBB66_24
.LBB66_24:                              # %if.end49
                                        #   in Loop: Header=BB66_3 Depth=1
	cmpl	$2, -12(%rbp)
	jne	.LBB66_43
# %bb.25:                               # %if.then51
                                        #   in Loop: Header=BB66_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB66_27
# %bb.26:                               # %if.then56
                                        #   in Loop: Header=BB66_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB66_42
.LBB66_27:                              # %if.else59
                                        #   in Loop: Header=BB66_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$2, 8(%rax)
	jne	.LBB66_29
# %bb.28:                               # %if.then64
                                        #   in Loop: Header=BB66_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB66_41
.LBB66_29:                              # %if.else67
                                        #   in Loop: Header=BB66_3 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB66_37
# %bb.30:                               # %if.then69
                                        #   in Loop: Header=BB66_3 Depth=1
	cmpq	$0, dpb+56
	je	.LBB66_35
# %bb.31:                               # %if.then71
                                        #   in Loop: Header=BB66_3 Depth=1
	movq	dpb+56, %rax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	cmpq	(%rcx,%rdx,8), %rax
	jne	.LBB66_33
# %bb.32:                               # %lor.lhs.false75
                                        #   in Loop: Header=BB66_3 Depth=1
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB66_34
.LBB66_33:                              # %if.then78
                                        #   in Loop: Header=BB66_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB66_34:                              # %if.end81
                                        #   in Loop: Header=BB66_3 Depth=1
	jmp	.LBB66_36
.LBB66_35:                              # %if.else82
                                        #   in Loop: Header=BB66_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB66_36:                              # %if.end85
                                        #   in Loop: Header=BB66_3 Depth=1
	jmp	.LBB66_40
.LBB66_37:                              # %if.else86
                                        #   in Loop: Header=BB66_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %ecx
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	je	.LBB66_39
# %bb.38:                               # %if.then92
                                        #   in Loop: Header=BB66_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB66_39:                              # %if.end95
                                        #   in Loop: Header=BB66_3 Depth=1
	jmp	.LBB66_40
.LBB66_40:                              # %if.end96
                                        #   in Loop: Header=BB66_3 Depth=1
	jmp	.LBB66_41
.LBB66_41:                              # %if.end97
                                        #   in Loop: Header=BB66_3 Depth=1
	jmp	.LBB66_42
.LBB66_42:                              # %if.end98
                                        #   in Loop: Header=BB66_3 Depth=1
	jmp	.LBB66_43
.LBB66_43:                              # %if.end99
                                        #   in Loop: Header=BB66_3 Depth=1
	jmp	.LBB66_44
.LBB66_44:                              # %if.end100
                                        #   in Loop: Header=BB66_3 Depth=1
	jmp	.LBB66_45
.LBB66_45:                              # %for.inc
                                        #   in Loop: Header=BB66_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_3
.LBB66_46:                              # %for.end
	cmpl	$695424262, -24(%rbp)   # imm = 0x29735506
	jne	.LBB66_48
.LBB66_47:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB66_48:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB66_47
.Lfunc_end66:
	.size	unmark_long_term_field_for_reference_by_frame_idx.3, .Lfunc_end66-unmark_long_term_field_for_reference_by_frame_idx.3
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function is_short_term_reference.4
	.type	is_short_term_reference.4,@function
is_short_term_reference.4:              # @is_short_term_reference.4
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1323850373, -24(%rbp)  # imm = 0x4EE85A85
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$3, (%rax)
	jne	.LBB67_5
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB67_4
# %bb.2:                                # %land.lhs.true
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB67_4
# %bb.3:                                # %if.then3
	movl	$1, -20(%rbp)
	jmp	.LBB67_18
.LBB67_4:                               # %if.end
	jmp	.LBB67_5
.LBB67_5:                               # %if.end4
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	jne	.LBB67_17
# %bb.6:                                # %if.then6
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB67_11
# %bb.7:                                # %if.then9
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB67_10
# %bb.8:                                # %land.lhs.true12
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB67_10
# %bb.9:                                # %if.then16
	movl	$1, -20(%rbp)
	jmp	.LBB67_18
.LBB67_10:                              # %if.end17
	jmp	.LBB67_11
.LBB67_11:                              # %if.end18
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB67_16
# %bb.12:                               # %if.then22
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB67_15
# %bb.13:                               # %land.lhs.true25
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB67_15
# %bb.14:                               # %if.then29
	movl	$1, -20(%rbp)
	jmp	.LBB67_18
.LBB67_15:                              # %if.end30
	jmp	.LBB67_16
.LBB67_16:                              # %if.end31
	jmp	.LBB67_17
.LBB67_17:                              # %if.end32
	movl	$0, -20(%rbp)
.LBB67_18:                              # %return
	movl	-20(%rbp), %ebx
	cmpl	$1323850373, -24(%rbp)  # imm = 0x4EE85A85
	jne	.LBB67_20
.LBB67_19:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB67_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB67_19
.Lfunc_end67:
	.size	is_short_term_reference.4, .Lfunc_end67-is_short_term_reference.4
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_smallest_poc.5
	.type	get_smallest_poc.5,@function
get_smallest_poc.5:                     # @get_smallest_poc.5
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$532789732, -20(%rbp)   # imm = 0x1FC1B9E4
	movq	%rdi, -16(%rbp)
	movq	%rsi, -32(%rbp)
	cmpl	$1, dpb+28
	jae	.LBB68_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.28, %rdi
	movl	$150, %esi
	callq	error
.LBB68_2:                               # %if.end
	movq	-32(%rbp), %rax
	movl	$-1, (%rax)
	movq	-16(%rbp), %rax
	movl	$2147483647, (%rax)     # imm = 0x7FFFFFFF
	movl	$0, -4(%rbp)
.LBB68_3:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB68_9
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB68_3 Depth=1
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	dpb, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jle	.LBB68_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB68_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 32(%rax)
	jne	.LBB68_7
# %bb.6:                                # %if.then6
                                        #   in Loop: Header=BB68_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	36(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB68_7:                               # %if.end10
                                        #   in Loop: Header=BB68_3 Depth=1
	jmp	.LBB68_8
.LBB68_8:                               # %for.inc
                                        #   in Loop: Header=BB68_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_3
.LBB68_9:                               # %for.end
	cmpl	$532789732, -20(%rbp)   # imm = 0x1FC1B9E4
	jne	.LBB68_11
.LBB68_10:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB68_11:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB68_10
.Lfunc_end68:
	.size	get_smallest_poc.5, .Lfunc_end68-get_smallest_poc.5
	.cfi_endproc
                                        # -- End function
	.globl	alloc_colocated.6       # -- Begin function alloc_colocated.6
	.p2align	4, 0x90
	.type	alloc_colocated.6,@function
alloc_colocated.6:                      # @alloc_colocated.6
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$165608053, -32(%rbp)   # imm = 0x9DEFA75
	movl	%edi, -12(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -28(%rbp)
	movl	$1, %edi
	movl	$4880, %esi             # imm = 0x1310
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -24(%rbp)
	cmpq	-24(%rbp), %rcx
	jne	.LBB69_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.21, %rdi
	callq	no_mem_exit
.LBB69_2:                               # %if.end
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-16(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-24(%rbp), %rdi
	addq	$1600, %rdi             # imm = 0x640
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$1608, %rdi             # imm = 0x648
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$1616, %rdi             # imm = 0x650
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$1624, %rdi             # imm = 0x658
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-24(%rbp), %rdi
	addq	$4872, %rdi             # imm = 0x1308
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	cmpl	$0, -28(%rbp)
	je	.LBB69_4
# %bb.3:                                # %if.then17
	movq	-24(%rbp), %rdi
	addq	$3216, %rdi             # imm = 0xC90
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$3224, %rdi             # imm = 0xC98
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$3232, %rdi             # imm = 0xCA0
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$3240, %rdi             # imm = 0xCA8
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-24(%rbp), %rdi
	addq	$4832, %rdi             # imm = 0x12E0
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$4840, %rdi             # imm = 0x12E8
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$4848, %rdi             # imm = 0x12F0
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$4856, %rdi             # imm = 0x12F8
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
.LBB69_4:                               # %if.end50
	movl	-28(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rbx
	cmpl	$165608053, -32(%rbp)   # imm = 0x9DEFA75
	jne	.LBB69_6
.LBB69_5:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB69_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB69_5
.Lfunc_end69:
	.size	alloc_colocated.6, .Lfunc_end69-alloc_colocated.6
	.cfi_endproc
                                        # -- End function
	.globl	compute_colocated.7     # -- Begin function compute_colocated.7
	.p2align	4, 0x90
	.type	compute_colocated.7,@function
compute_colocated.7:                    # @compute_colocated.7
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$158710215, -72(%rbp)   # imm = 0x975B9C7
	movq	%rdi, -24(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -56(%rbp)
	movq	%rax, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB70_2
# %bb.1:                                # %if.then
	movq	-48(%rbp), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-48(%rbp), %rax
	movq	40(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	jmp	.LBB70_11
.LBB70_2:                               # %if.else
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB70_10
# %bb.3:                                # %if.then6
	movq	img, %rax
	movl	28(%rax), %eax
	movq	-32(%rbp), %rcx
	cmpl	(%rcx), %eax
	je	.LBB70_9
# %bb.4:                                # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$0, 6412(%rax)
	je	.LBB70_9
# %bb.5:                                # %if.then11
	movq	img, %rax
	cmpl	$1, 28(%rax)
	jne	.LBB70_7
# %bb.6:                                # %if.then14
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	6528(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -56(%rbp)
	movq	%rax, -40(%rbp)
	jmp	.LBB70_8
.LBB70_7:                               # %if.else17
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	6536(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -56(%rbp)
	movq	%rax, -40(%rbp)
.LBB70_8:                               # %if.end
	jmp	.LBB70_9
.LBB70_9:                               # %if.end20
	jmp	.LBB70_10
.LBB70_10:                              # %if.end21
	jmp	.LBB70_11
.LBB70_11:                              # %if.end22
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB70_13
# %bb.12:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB70_29
.LBB70_13:                              # %if.then25
	movl	$0, -12(%rbp)
.LBB70_14:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_16 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB70_28
# %bb.15:                               # %for.body
                                        #   in Loop: Header=BB70_14 Depth=1
	movl	$0, -16(%rbp)
.LBB70_16:                              # %for.cond27
                                        #   Parent Loop BB70_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB70_26
# %bb.17:                               # %for.body30
                                        #   in Loop: Header=BB70_16 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB70_23
# %bb.18:                               # %land.lhs.true33
                                        #   in Loop: Header=BB70_16 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB70_23
# %bb.19:                               # %if.then38
                                        #   in Loop: Header=BB70_16 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-56(%rbp), %rax
	subl	4(%rax), %edi
	callq	abs
	movl	%eax, %ebx
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-40(%rbp), %rax
	subl	4(%rax), %edi
	callq	abs
	cmpl	%eax, %ebx
	jle	.LBB70_21
# %bb.20:                               # %if.then46
                                        #   in Loop: Header=BB70_16 Depth=2
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	jmp	.LBB70_22
.LBB70_21:                              # %if.else160
                                        #   in Loop: Header=BB70_16 Depth=2
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-56(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB70_22:                              # %if.end283
                                        #   in Loop: Header=BB70_16 Depth=2
	jmp	.LBB70_24
.LBB70_23:                              # %if.else284
                                        #   in Loop: Header=BB70_16 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB70_24:                              # %if.end391
                                        #   in Loop: Header=BB70_16 Depth=2
	jmp	.LBB70_25
.LBB70_25:                              # %for.inc
                                        #   in Loop: Header=BB70_16 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB70_16
.LBB70_26:                              # %for.end
                                        #   in Loop: Header=BB70_14 Depth=1
	jmp	.LBB70_27
.LBB70_27:                              # %for.inc392
                                        #   in Loop: Header=BB70_14 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB70_14
.LBB70_28:                              # %for.end394
	jmp	.LBB70_29
.LBB70_29:                              # %if.end395
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB70_31
# %bb.30:                               # %lor.lhs.false398
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB70_241
.LBB70_31:                              # %if.then401
	movl	$0, -16(%rbp)
.LBB70_32:                              # %for.cond402
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_34 Depth 2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB70_240
# %bb.33:                               # %for.body407
                                        #   in Loop: Header=BB70_32 Depth=1
	movl	$0, -12(%rbp)
.LBB70_34:                              # %for.cond408
                                        #   Parent Loop BB70_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB70_238
# %bb.35:                               # %for.body413
                                        #   in Loop: Header=BB70_34 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB70_114
# %bb.36:                               # %if.then416
                                        #   in Loop: Header=BB70_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB70_38
# %bb.37:                               # %cond.true
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB70_39
.LBB70_38:                              # %cond.false
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB70_39:                              # %cond.end
                                        #   in Loop: Header=BB70_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB70_41
# %bb.40:                               # %cond.true425
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB70_42
.LBB70_41:                              # %cond.false427
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB70_42:                              # %cond.end429
                                        #   in Loop: Header=BB70_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB70_44
# %bb.43:                               # %cond.true445
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB70_45
.LBB70_44:                              # %cond.false447
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB70_45:                              # %cond.end449
                                        #   in Loop: Header=BB70_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB70_47
# %bb.46:                               # %cond.true455
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB70_48
.LBB70_47:                              # %cond.false457
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB70_48:                              # %cond.end459
                                        #   in Loop: Header=BB70_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB70_50
# %bb.49:                               # %cond.true475
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB70_51
.LBB70_50:                              # %cond.false477
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB70_51:                              # %cond.end479
                                        #   in Loop: Header=BB70_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB70_53
# %bb.52:                               # %cond.true485
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB70_54
.LBB70_53:                              # %cond.false487
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB70_54:                              # %cond.end489
                                        #   in Loop: Header=BB70_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB70_56
# %bb.55:                               # %cond.true505
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB70_57
.LBB70_56:                              # %cond.false507
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB70_57:                              # %cond.end509
                                        #   in Loop: Header=BB70_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB70_59
# %bb.58:                               # %cond.true515
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB70_60
.LBB70_59:                              # %cond.false517
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB70_60:                              # %cond.end519
                                        #   in Loop: Header=BB70_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB70_62
# %bb.61:                               # %cond.true535
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB70_63
.LBB70_62:                              # %cond.false537
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB70_63:                              # %cond.end539
                                        #   in Loop: Header=BB70_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB70_65
# %bb.64:                               # %cond.true545
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB70_66
.LBB70_65:                              # %cond.false547
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB70_66:                              # %cond.end549
                                        #   in Loop: Header=BB70_34 Depth=2
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB70_68
# %bb.67:                               # %if.then556
                                        #   in Loop: Header=BB70_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	$-1, (%rax,%rcx,8)
	jmp	.LBB70_81
.LBB70_68:                              # %if.else569
                                        #   in Loop: Header=BB70_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB70_70
# %bb.69:                               # %cond.true574
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB70_71
.LBB70_70:                              # %cond.false576
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB70_71:                              # %cond.end578
                                        #   in Loop: Header=BB70_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB70_73
# %bb.72:                               # %cond.true584
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB70_74
.LBB70_73:                              # %cond.false586
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB70_74:                              # %cond.end588
                                        #   in Loop: Header=BB70_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB70_76
# %bb.75:                               # %cond.true602
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB70_77
.LBB70_76:                              # %cond.false604
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB70_77:                              # %cond.end606
                                        #   in Loop: Header=BB70_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB70_79
# %bb.78:                               # %cond.true612
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB70_80
.LBB70_79:                              # %cond.false614
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB70_80:                              # %cond.end616
                                        #   in Loop: Header=BB70_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB70_81:                              # %if.end626
                                        #   in Loop: Header=BB70_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB70_83
# %bb.82:                               # %cond.true631
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB70_84
.LBB70_83:                              # %cond.false633
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB70_84:                              # %cond.end635
                                        #   in Loop: Header=BB70_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB70_86
# %bb.85:                               # %cond.true641
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB70_87
.LBB70_86:                              # %cond.false643
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB70_87:                              # %cond.end645
                                        #   in Loop: Header=BB70_34 Depth=2
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB70_89
# %bb.88:                               # %if.then652
                                        #   in Loop: Header=BB70_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	$-1, (%rax,%rcx,8)
	jmp	.LBB70_102
.LBB70_89:                              # %if.else665
                                        #   in Loop: Header=BB70_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB70_91
# %bb.90:                               # %cond.true670
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB70_92
.LBB70_91:                              # %cond.false672
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB70_92:                              # %cond.end674
                                        #   in Loop: Header=BB70_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB70_94
# %bb.93:                               # %cond.true680
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB70_95
.LBB70_94:                              # %cond.false682
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB70_95:                              # %cond.end684
                                        #   in Loop: Header=BB70_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB70_97
# %bb.96:                               # %cond.true698
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB70_98
.LBB70_97:                              # %cond.false700
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB70_98:                              # %cond.end702
                                        #   in Loop: Header=BB70_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB70_100
# %bb.99:                               # %cond.true708
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB70_101
.LBB70_100:                             # %cond.false710
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB70_101:                             # %cond.end712
                                        #   in Loop: Header=BB70_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB70_102:                             # %if.end722
                                        #   in Loop: Header=BB70_34 Depth=2
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB70_113
# %bb.103:                              # %if.then727
                                        #   in Loop: Header=BB70_34 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 4864(%rax)
	jne	.LBB70_107
# %bb.104:                              # %land.lhs.true730
                                        #   in Loop: Header=BB70_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB70_107
# %bb.105:                              # %land.lhs.true740
                                        #   in Loop: Header=BB70_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB70_107
# %bb.106:                              # %land.lhs.true752
                                        #   in Loop: Header=BB70_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB70_112
.LBB70_107:                             # %lor.rhs
                                        #   in Loop: Header=BB70_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB70_111
# %bb.108:                              # %land.lhs.true774
                                        #   in Loop: Header=BB70_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB70_111
# %bb.109:                              # %land.lhs.true784
                                        #   in Loop: Header=BB70_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB70_111
# %bb.110:                              # %land.rhs
                                        #   in Loop: Header=BB70_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB70_111:                             # %land.end
                                        #   in Loop: Header=BB70_34 Depth=2
.LBB70_112:                             # %lor.end
                                        #   in Loop: Header=BB70_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	1624(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB70_113:                             # %if.end814
                                        #   in Loop: Header=BB70_34 Depth=2
	jmp	.LBB70_236
.LBB70_114:                             # %if.else815
                                        #   in Loop: Header=BB70_34 Depth=2
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB70_116
# %bb.115:                              # %cond.true820
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB70_117
.LBB70_116:                             # %cond.false822
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB70_117:                             # %cond.end824
                                        #   in Loop: Header=BB70_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB70_119
# %bb.118:                              # %cond.true830
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB70_120
.LBB70_119:                             # %cond.false832
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB70_120:                             # %cond.end834
                                        #   in Loop: Header=BB70_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB70_122
# %bb.121:                              # %cond.true849
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB70_123
.LBB70_122:                             # %cond.false851
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB70_123:                             # %cond.end853
                                        #   in Loop: Header=BB70_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB70_125
# %bb.124:                              # %cond.true859
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB70_126
.LBB70_125:                             # %cond.false861
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB70_126:                             # %cond.end863
                                        #   in Loop: Header=BB70_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB70_128
# %bb.127:                              # %cond.true879
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB70_129
.LBB70_128:                             # %cond.false881
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB70_129:                             # %cond.end883
                                        #   in Loop: Header=BB70_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB70_131
# %bb.130:                              # %cond.true889
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB70_132
.LBB70_131:                             # %cond.false891
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB70_132:                             # %cond.end893
                                        #   in Loop: Header=BB70_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB70_134
# %bb.133:                              # %cond.true909
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB70_135
.LBB70_134:                             # %cond.false911
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB70_135:                             # %cond.end913
                                        #   in Loop: Header=BB70_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB70_137
# %bb.136:                              # %cond.true919
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB70_138
.LBB70_137:                             # %cond.false921
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB70_138:                             # %cond.end923
                                        #   in Loop: Header=BB70_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB70_140
# %bb.139:                              # %cond.true939
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB70_141
.LBB70_140:                             # %cond.false941
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB70_141:                             # %cond.end943
                                        #   in Loop: Header=BB70_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB70_143
# %bb.142:                              # %cond.true949
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB70_144
.LBB70_143:                             # %cond.false951
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB70_144:                             # %cond.end953
                                        #   in Loop: Header=BB70_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	4832(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB70_146
# %bb.145:                              # %cond.true966
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB70_147
.LBB70_146:                             # %cond.false968
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB70_147:                             # %cond.end970
                                        #   in Loop: Header=BB70_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB70_149
# %bb.148:                              # %cond.true976
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB70_150
.LBB70_149:                             # %cond.false978
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB70_150:                             # %cond.end980
                                        #   in Loop: Header=BB70_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	4832(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-56(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB70_152
# %bb.151:                              # %cond.true994
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB70_153
.LBB70_152:                             # %cond.false996
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB70_153:                             # %cond.end998
                                        #   in Loop: Header=BB70_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB70_155
# %bb.154:                              # %cond.true1004
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB70_156
.LBB70_155:                             # %cond.false1006
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB70_156:                             # %cond.end1008
                                        #   in Loop: Header=BB70_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	4840(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-56(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB70_158
# %bb.157:                              # %cond.true1021
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB70_159
.LBB70_158:                             # %cond.false1023
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB70_159:                             # %cond.end1025
                                        #   in Loop: Header=BB70_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB70_161
# %bb.160:                              # %cond.true1031
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB70_162
.LBB70_161:                             # %cond.false1033
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB70_162:                             # %cond.end1035
                                        #   in Loop: Header=BB70_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	4840(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB70_173
# %bb.163:                              # %if.then1048
                                        #   in Loop: Header=BB70_34 Depth=2
	movq	-56(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB70_167
# %bb.164:                              # %land.lhs.true1051
                                        #   in Loop: Header=BB70_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB70_167
# %bb.165:                              # %land.lhs.true1061
                                        #   in Loop: Header=BB70_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB70_167
# %bb.166:                              # %land.lhs.true1074
                                        #   in Loop: Header=BB70_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB70_172
.LBB70_167:                             # %lor.rhs1087
                                        #   in Loop: Header=BB70_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB70_171
# %bb.168:                              # %land.lhs.true1097
                                        #   in Loop: Header=BB70_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB70_171
# %bb.169:                              # %land.lhs.true1107
                                        #   in Loop: Header=BB70_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB70_171
# %bb.170:                              # %land.rhs1120
                                        #   in Loop: Header=BB70_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB70_171:                             # %land.end1133
                                        #   in Loop: Header=BB70_34 Depth=2
.LBB70_172:                             # %lor.end1134
                                        #   in Loop: Header=BB70_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	4856(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB70_173:                             # %if.end1142
                                        #   in Loop: Header=BB70_34 Depth=2
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB70_175
# %bb.174:                              # %cond.true1147
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB70_176
.LBB70_175:                             # %cond.false1149
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB70_176:                             # %cond.end1151
                                        #   in Loop: Header=BB70_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB70_178
# %bb.177:                              # %cond.true1157
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB70_179
.LBB70_178:                             # %cond.false1159
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB70_179:                             # %cond.end1161
                                        #   in Loop: Header=BB70_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB70_181
# %bb.180:                              # %cond.true1176
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB70_182
.LBB70_181:                             # %cond.false1178
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB70_182:                             # %cond.end1180
                                        #   in Loop: Header=BB70_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB70_184
# %bb.183:                              # %cond.true1186
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB70_185
.LBB70_184:                             # %cond.false1188
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB70_185:                             # %cond.end1190
                                        #   in Loop: Header=BB70_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB70_187
# %bb.186:                              # %cond.true1206
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB70_188
.LBB70_187:                             # %cond.false1208
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB70_188:                             # %cond.end1210
                                        #   in Loop: Header=BB70_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB70_190
# %bb.189:                              # %cond.true1216
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB70_191
.LBB70_190:                             # %cond.false1218
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB70_191:                             # %cond.end1220
                                        #   in Loop: Header=BB70_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB70_193
# %bb.192:                              # %cond.true1236
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB70_194
.LBB70_193:                             # %cond.false1238
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB70_194:                             # %cond.end1240
                                        #   in Loop: Header=BB70_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB70_196
# %bb.195:                              # %cond.true1246
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB70_197
.LBB70_196:                             # %cond.false1248
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB70_197:                             # %cond.end1250
                                        #   in Loop: Header=BB70_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB70_199
# %bb.198:                              # %cond.true1266
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB70_200
.LBB70_199:                             # %cond.false1268
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB70_200:                             # %cond.end1270
                                        #   in Loop: Header=BB70_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB70_202
# %bb.201:                              # %cond.true1276
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB70_203
.LBB70_202:                             # %cond.false1278
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB70_203:                             # %cond.end1280
                                        #   in Loop: Header=BB70_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	3216(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB70_205
# %bb.204:                              # %cond.true1293
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB70_206
.LBB70_205:                             # %cond.false1295
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB70_206:                             # %cond.end1297
                                        #   in Loop: Header=BB70_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB70_208
# %bb.207:                              # %cond.true1303
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB70_209
.LBB70_208:                             # %cond.false1305
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB70_209:                             # %cond.end1307
                                        #   in Loop: Header=BB70_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	3216(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-40(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB70_211
# %bb.210:                              # %cond.true1321
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB70_212
.LBB70_211:                             # %cond.false1323
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB70_212:                             # %cond.end1325
                                        #   in Loop: Header=BB70_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB70_214
# %bb.213:                              # %cond.true1331
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB70_215
.LBB70_214:                             # %cond.false1333
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB70_215:                             # %cond.end1335
                                        #   in Loop: Header=BB70_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	3224(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB70_217
# %bb.216:                              # %cond.true1348
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB70_218
.LBB70_217:                             # %cond.false1350
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB70_218:                             # %cond.end1352
                                        #   in Loop: Header=BB70_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB70_220
# %bb.219:                              # %cond.true1358
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB70_221
.LBB70_220:                             # %cond.false1360
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB70_221:                             # %cond.end1362
                                        #   in Loop: Header=BB70_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	3224(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB70_232
# %bb.222:                              # %if.then1375
                                        #   in Loop: Header=BB70_34 Depth=2
	movq	-40(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB70_226
# %bb.223:                              # %land.lhs.true1378
                                        #   in Loop: Header=BB70_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB70_226
# %bb.224:                              # %land.lhs.true1388
                                        #   in Loop: Header=BB70_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB70_226
# %bb.225:                              # %land.lhs.true1401
                                        #   in Loop: Header=BB70_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB70_231
.LBB70_226:                             # %lor.rhs1414
                                        #   in Loop: Header=BB70_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB70_230
# %bb.227:                              # %land.lhs.true1424
                                        #   in Loop: Header=BB70_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB70_230
# %bb.228:                              # %land.lhs.true1434
                                        #   in Loop: Header=BB70_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB70_230
# %bb.229:                              # %land.rhs1447
                                        #   in Loop: Header=BB70_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB70_230:                             # %land.end1460
                                        #   in Loop: Header=BB70_34 Depth=2
.LBB70_231:                             # %lor.end1461
                                        #   in Loop: Header=BB70_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	3240(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB70_232:                             # %if.end1469
                                        #   in Loop: Header=BB70_34 Depth=2
	movq	img, %rax
	cmpl	$0, 71996(%rax)
	jne	.LBB70_235
# %bb.233:                              # %land.lhs.true1473
                                        #   in Loop: Header=BB70_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB70_235
# %bb.234:                              # %if.then1481
                                        #   in Loop: Header=BB70_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
.LBB70_235:                             # %if.end1522
                                        #   in Loop: Header=BB70_34 Depth=2
	jmp	.LBB70_236
.LBB70_236:                             # %if.end1523
                                        #   in Loop: Header=BB70_34 Depth=2
	jmp	.LBB70_237
.LBB70_237:                             # %for.inc1524
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB70_34
.LBB70_238:                             # %for.end1526
                                        #   in Loop: Header=BB70_32 Depth=1
	jmp	.LBB70_239
.LBB70_239:                             # %for.inc1527
                                        #   in Loop: Header=BB70_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB70_32
.LBB70_240:                             # %for.end1529
	jmp	.LBB70_241
.LBB70_241:                             # %if.end1530
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB70_243
# %bb.242:                              # %lor.lhs.false1533
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB70_259
.LBB70_243:                             # %if.then1536
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB70_258
# %bb.244:                              # %if.then1539
	movl	$0, -12(%rbp)
.LBB70_245:                             # %for.cond1540
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_247 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB70_257
# %bb.246:                              # %for.body1545
                                        #   in Loop: Header=BB70_245 Depth=1
	movl	$0, -16(%rbp)
.LBB70_247:                             # %for.cond1546
                                        #   Parent Loop BB70_245 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB70_255
# %bb.248:                              # %for.body1551
                                        #   in Loop: Header=BB70_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB70_253
# %bb.249:                              # %if.then1558
                                        #   in Loop: Header=BB70_247 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	subl	4(%rax), %edi
	callq	abs
	movl	%eax, %ebx
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	subl	4(%rax), %edi
	callq	abs
	cmpl	%eax, %ebx
	jle	.LBB70_251
# %bb.250:                              # %if.then1571
                                        #   in Loop: Header=BB70_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	jmp	.LBB70_252
.LBB70_251:                             # %if.else1699
                                        #   in Loop: Header=BB70_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB70_252:                             # %if.end1829
                                        #   in Loop: Header=BB70_247 Depth=2
	jmp	.LBB70_253
.LBB70_253:                             # %if.end1830
                                        #   in Loop: Header=BB70_247 Depth=2
	jmp	.LBB70_254
.LBB70_254:                             # %for.inc1831
                                        #   in Loop: Header=BB70_247 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB70_247
.LBB70_255:                             # %for.end1833
                                        #   in Loop: Header=BB70_245 Depth=1
	jmp	.LBB70_256
.LBB70_256:                             # %for.inc1834
                                        #   in Loop: Header=BB70_245 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB70_245
.LBB70_257:                             # %for.end1836
	jmp	.LBB70_258
.LBB70_258:                             # %if.end1837
	jmp	.LBB70_259
.LBB70_259:                             # %if.end1838
	movl	$0, -12(%rbp)
.LBB70_260:                             # %for.cond1839
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_262 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB70_330
# %bb.261:                              # %for.body1844
                                        #   in Loop: Header=BB70_260 Depth=1
	movl	$0, -16(%rbp)
.LBB70_262:                             # %for.cond1845
                                        #   Parent Loop BB70_260 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB70_328
# %bb.263:                              # %for.body1850
                                        #   in Loop: Header=BB70_262 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB70_265
# %bb.264:                              # %lor.lhs.false1853
                                        #   in Loop: Header=BB70_262 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB70_314
.LBB70_265:                             # %if.then1856
                                        #   in Loop: Header=BB70_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB70_267
# %bb.266:                              # %cond.true1861
                                        #   in Loop: Header=BB70_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB70_268
.LBB70_267:                             # %cond.false1863
                                        #   in Loop: Header=BB70_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB70_268:                             # %cond.end1865
                                        #   in Loop: Header=BB70_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB70_270
# %bb.269:                              # %cond.true1871
                                        #   in Loop: Header=BB70_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB70_271
.LBB70_270:                             # %cond.false1873
                                        #   in Loop: Header=BB70_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB70_271:                             # %cond.end1875
                                        #   in Loop: Header=BB70_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB70_273
# %bb.272:                              # %cond.true1891
                                        #   in Loop: Header=BB70_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB70_274
.LBB70_273:                             # %cond.false1893
                                        #   in Loop: Header=BB70_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB70_274:                             # %cond.end1895
                                        #   in Loop: Header=BB70_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB70_276
# %bb.275:                              # %cond.true1901
                                        #   in Loop: Header=BB70_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB70_277
.LBB70_276:                             # %cond.false1903
                                        #   in Loop: Header=BB70_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB70_277:                             # %cond.end1905
                                        #   in Loop: Header=BB70_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB70_279
# %bb.278:                              # %cond.true1921
                                        #   in Loop: Header=BB70_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB70_280
.LBB70_279:                             # %cond.false1923
                                        #   in Loop: Header=BB70_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB70_280:                             # %cond.end1925
                                        #   in Loop: Header=BB70_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB70_282
# %bb.281:                              # %cond.true1931
                                        #   in Loop: Header=BB70_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB70_283
.LBB70_282:                             # %cond.false1933
                                        #   in Loop: Header=BB70_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB70_283:                             # %cond.end1935
                                        #   in Loop: Header=BB70_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB70_285
# %bb.284:                              # %cond.true1951
                                        #   in Loop: Header=BB70_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB70_286
.LBB70_285:                             # %cond.false1953
                                        #   in Loop: Header=BB70_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB70_286:                             # %cond.end1955
                                        #   in Loop: Header=BB70_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB70_288
# %bb.287:                              # %cond.true1961
                                        #   in Loop: Header=BB70_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB70_289
.LBB70_288:                             # %cond.false1963
                                        #   in Loop: Header=BB70_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB70_289:                             # %cond.end1965
                                        #   in Loop: Header=BB70_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB70_291
# %bb.290:                              # %cond.true1981
                                        #   in Loop: Header=BB70_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB70_292
.LBB70_291:                             # %cond.false1983
                                        #   in Loop: Header=BB70_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB70_292:                             # %cond.end1985
                                        #   in Loop: Header=BB70_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB70_294
# %bb.293:                              # %cond.true1991
                                        #   in Loop: Header=BB70_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB70_295
.LBB70_294:                             # %cond.false1993
                                        #   in Loop: Header=BB70_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB70_295:                             # %cond.end1995
                                        #   in Loop: Header=BB70_262 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB70_297
# %bb.296:                              # %cond.true2009
                                        #   in Loop: Header=BB70_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB70_298
.LBB70_297:                             # %cond.false2011
                                        #   in Loop: Header=BB70_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB70_298:                             # %cond.end2013
                                        #   in Loop: Header=BB70_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB70_300
# %bb.299:                              # %cond.true2019
                                        #   in Loop: Header=BB70_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB70_301
.LBB70_300:                             # %cond.false2021
                                        #   in Loop: Header=BB70_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB70_301:                             # %cond.end2023
                                        #   in Loop: Header=BB70_262 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB70_303
# %bb.302:                              # %cond.true2037
                                        #   in Loop: Header=BB70_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB70_304
.LBB70_303:                             # %cond.false2039
                                        #   in Loop: Header=BB70_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB70_304:                             # %cond.end2041
                                        #   in Loop: Header=BB70_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB70_306
# %bb.305:                              # %cond.true2047
                                        #   in Loop: Header=BB70_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB70_307
.LBB70_306:                             # %cond.false2049
                                        #   in Loop: Header=BB70_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB70_307:                             # %cond.end2051
                                        #   in Loop: Header=BB70_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB70_309
# %bb.308:                              # %cond.true2065
                                        #   in Loop: Header=BB70_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB70_310
.LBB70_309:                             # %cond.false2067
                                        #   in Loop: Header=BB70_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB70_310:                             # %cond.end2069
                                        #   in Loop: Header=BB70_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB70_312
# %bb.311:                              # %cond.true2075
                                        #   in Loop: Header=BB70_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB70_313
.LBB70_312:                             # %cond.false2077
                                        #   in Loop: Header=BB70_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB70_313:                             # %cond.end2079
                                        #   in Loop: Header=BB70_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB70_315
.LBB70_314:                             # %if.else2089
                                        #   in Loop: Header=BB70_262 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB70_315:                             # %if.end2194
                                        #   in Loop: Header=BB70_262 Depth=2
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB70_326
# %bb.316:                              # %if.then2200
                                        #   in Loop: Header=BB70_262 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 4864(%rax)
	jne	.LBB70_320
# %bb.317:                              # %land.lhs.true2203
                                        #   in Loop: Header=BB70_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB70_320
# %bb.318:                              # %land.lhs.true2213
                                        #   in Loop: Header=BB70_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB70_320
# %bb.319:                              # %land.lhs.true2226
                                        #   in Loop: Header=BB70_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB70_325
.LBB70_320:                             # %lor.rhs2239
                                        #   in Loop: Header=BB70_262 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB70_324
# %bb.321:                              # %land.lhs.true2249
                                        #   in Loop: Header=BB70_262 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB70_324
# %bb.322:                              # %land.lhs.true2259
                                        #   in Loop: Header=BB70_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB70_324
# %bb.323:                              # %land.rhs2272
                                        #   in Loop: Header=BB70_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB70_324:                             # %land.end2285
                                        #   in Loop: Header=BB70_262 Depth=2
.LBB70_325:                             # %lor.end2286
                                        #   in Loop: Header=BB70_262 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	1624(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB70_326:                             # %if.end2295
                                        #   in Loop: Header=BB70_262 Depth=2
	jmp	.LBB70_327
.LBB70_327:                             # %for.inc2296
                                        #   in Loop: Header=BB70_262 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB70_262
.LBB70_328:                             # %for.end2298
                                        #   in Loop: Header=BB70_260 Depth=1
	jmp	.LBB70_329
.LBB70_329:                             # %for.inc2299
                                        #   in Loop: Header=BB70_260 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB70_260
.LBB70_330:                             # %for.end2301
	movq	img, %rax
	cmpl	$0, 71996(%rax)
	jne	.LBB70_397
# %bb.331:                              # %if.then2305
	movl	$0, -12(%rbp)
.LBB70_332:                             # %for.cond2306
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_334 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB70_349
# %bb.333:                              # %for.body2311
                                        #   in Loop: Header=BB70_332 Depth=1
	movl	$0, -16(%rbp)
.LBB70_334:                             # %for.cond2312
                                        #   Parent Loop BB70_332 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB70_347
# %bb.335:                              # %for.body2317
                                        #   in Loop: Header=BB70_334 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB70_338
# %bb.336:                              # %land.lhs.true2320
                                        #   in Loop: Header=BB70_334 Depth=2
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB70_338
# %bb.337:                              # %land.lhs.true2323
                                        #   in Loop: Header=BB70_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB70_340
.LBB70_338:                             # %lor.lhs.false2331
                                        #   in Loop: Header=BB70_334 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB70_341
# %bb.339:                              # %land.lhs.true2334
                                        #   in Loop: Header=BB70_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB70_341
.LBB70_340:                             # %if.then2342
                                        #   in Loop: Header=BB70_334 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %ecx
	shll	$1, %ecx
	movw	%cx, 2(%rax)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %ecx
	shll	$1, %ecx
	movw	%cx, 2(%rax)
	jmp	.LBB70_345
.LBB70_341:                             # %if.else2363
                                        #   in Loop: Header=BB70_334 Depth=2
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB70_344
# %bb.342:                              # %land.lhs.true2366
                                        #   in Loop: Header=BB70_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB70_344
# %bb.343:                              # %if.then2373
                                        #   in Loop: Header=BB70_334 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movswl	2(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movswl	2(%rcx), %eax
	cltd
	idivl	%esi
	movw	%ax, 2(%rcx)
.LBB70_344:                             # %if.end2394
                                        #   in Loop: Header=BB70_334 Depth=2
	jmp	.LBB70_345
.LBB70_345:                             # %if.end2395
                                        #   in Loop: Header=BB70_334 Depth=2
	jmp	.LBB70_346
.LBB70_346:                             # %for.inc2396
                                        #   in Loop: Header=BB70_334 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB70_334
.LBB70_347:                             # %for.end2398
                                        #   in Loop: Header=BB70_332 Depth=1
	jmp	.LBB70_348
.LBB70_348:                             # %for.inc2399
                                        #   in Loop: Header=BB70_332 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB70_332
.LBB70_349:                             # %for.end2401
	movl	$0, -12(%rbp)
.LBB70_350:                             # %for.cond2402
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_352 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	72400(%rcx), %ecx
	shll	$2, %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB70_396
# %bb.351:                              # %for.body2408
                                        #   in Loop: Header=BB70_350 Depth=1
	movl	$0, -16(%rbp)
.LBB70_352:                             # %for.cond2409
                                        #   Parent Loop BB70_350 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB70_394
# %bb.353:                              # %for.body2414
                                        #   in Loop: Header=BB70_352 Depth=2
	cmpl	$0, -12(%rbp)
	jne	.LBB70_361
# %bb.354:                              # %if.then2417
                                        #   in Loop: Header=BB70_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB70_356
# %bb.355:                              # %cond.true2428
                                        #   in Loop: Header=BB70_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB70_360
.LBB70_356:                             # %cond.false2429
                                        #   in Loop: Header=BB70_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB70_358
# %bb.357:                              # %cond.true2440
                                        #   in Loop: Header=BB70_352 Depth=2
	movl	$127, %eax
	jmp	.LBB70_359
.LBB70_358:                             # %cond.false2441
                                        #   in Loop: Header=BB70_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB70_359:                             # %cond.end2450
                                        #   in Loop: Header=BB70_352 Depth=2
.LBB70_360:                             # %cond.end2452
                                        #   in Loop: Header=BB70_352 Depth=2
	movl	%eax, -60(%rbp)
	jmp	.LBB70_377
.LBB70_361:                             # %if.else2454
                                        #   in Loop: Header=BB70_352 Depth=2
	cmpl	$2, -12(%rbp)
	jne	.LBB70_369
# %bb.362:                              # %if.then2457
                                        #   in Loop: Header=BB70_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB70_364
# %bb.363:                              # %cond.true2467
                                        #   in Loop: Header=BB70_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB70_368
.LBB70_364:                             # %cond.false2468
                                        #   in Loop: Header=BB70_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB70_366
# %bb.365:                              # %cond.true2479
                                        #   in Loop: Header=BB70_352 Depth=2
	movl	$127, %eax
	jmp	.LBB70_367
.LBB70_366:                             # %cond.false2480
                                        #   in Loop: Header=BB70_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB70_367:                             # %cond.end2489
                                        #   in Loop: Header=BB70_352 Depth=2
.LBB70_368:                             # %cond.end2491
                                        #   in Loop: Header=BB70_352 Depth=2
	movl	%eax, -60(%rbp)
	jmp	.LBB70_376
.LBB70_369:                             # %if.else2493
                                        #   in Loop: Header=BB70_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB70_371
# %bb.370:                              # %cond.true2503
                                        #   in Loop: Header=BB70_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB70_375
.LBB70_371:                             # %cond.false2504
                                        #   in Loop: Header=BB70_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB70_373
# %bb.372:                              # %cond.true2515
                                        #   in Loop: Header=BB70_352 Depth=2
	movl	$127, %eax
	jmp	.LBB70_374
.LBB70_373:                             # %cond.false2516
                                        #   in Loop: Header=BB70_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB70_374:                             # %cond.end2525
                                        #   in Loop: Header=BB70_352 Depth=2
.LBB70_375:                             # %cond.end2527
                                        #   in Loop: Header=BB70_352 Depth=2
	movl	%eax, -60(%rbp)
.LBB70_376:                             # %if.end2529
                                        #   in Loop: Header=BB70_352 Depth=2
	jmp	.LBB70_377
.LBB70_377:                             # %if.end2530
                                        #   in Loop: Header=BB70_352 Depth=2
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB70_379
# %bb.378:                              # %cond.true2545
                                        #   in Loop: Header=BB70_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB70_383
.LBB70_379:                             # %cond.false2546
                                        #   in Loop: Header=BB70_352 Depth=2
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB70_381
# %bb.380:                              # %cond.true2561
                                        #   in Loop: Header=BB70_352 Depth=2
	movl	$127, %eax
	jmp	.LBB70_382
.LBB70_381:                             # %cond.false2562
                                        #   in Loop: Header=BB70_352 Depth=2
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB70_382:                             # %cond.end2575
                                        #   in Loop: Header=BB70_352 Depth=2
.LBB70_383:                             # %cond.end2577
                                        #   in Loop: Header=BB70_352 Depth=2
	movl	%eax, -64(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB70_391
# %bb.384:                              # %if.then2581
                                        #   in Loop: Header=BB70_352 Depth=2
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-64(%rbp)
	movl	%eax, -68(%rbp)
	movl	-60(%rbp), %eax
	imull	-68(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB70_386
# %bb.385:                              # %cond.true2591
                                        #   in Loop: Header=BB70_352 Depth=2
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB70_390
.LBB70_386:                             # %cond.false2592
                                        #   in Loop: Header=BB70_352 Depth=2
	movl	-60(%rbp), %eax
	imull	-68(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB70_388
# %bb.387:                              # %cond.true2598
                                        #   in Loop: Header=BB70_352 Depth=2
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB70_389
.LBB70_388:                             # %cond.false2599
                                        #   in Loop: Header=BB70_352 Depth=2
	movl	-60(%rbp), %eax
	imull	-68(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB70_389:                             # %cond.end2603
                                        #   in Loop: Header=BB70_352 Depth=2
.LBB70_390:                             # %cond.end2605
                                        #   in Loop: Header=BB70_352 Depth=2
	movq	img, %rcx
	addq	$72016, %rcx            # imm = 0x11950
	movslq	-12(%rbp), %rdx
	imulq	$60, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB70_392
.LBB70_391:                             # %if.else2611
                                        #   in Loop: Header=BB70_352 Depth=2
	movq	img, %rax
	addq	$72016, %rax            # imm = 0x11950
	movslq	-12(%rbp), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$9999, (%rax,%rcx,4)    # imm = 0x270F
.LBB70_392:                             # %if.end2617
                                        #   in Loop: Header=BB70_352 Depth=2
	jmp	.LBB70_393
.LBB70_393:                             # %for.inc2618
                                        #   in Loop: Header=BB70_352 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB70_352
.LBB70_394:                             # %for.end2620
                                        #   in Loop: Header=BB70_350 Depth=1
	jmp	.LBB70_395
.LBB70_395:                             # %for.inc2621
                                        #   in Loop: Header=BB70_350 Depth=1
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB70_350
.LBB70_396:                             # %for.end2623
	jmp	.LBB70_397
.LBB70_397:                             # %if.end2624
	cmpl	$158710215, -72(%rbp)   # imm = 0x975B9C7
	jne	.LBB70_399
.LBB70_398:
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB70_399:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB70_398
.Lfunc_end70:
	.size	compute_colocated.7, .Lfunc_end70-compute_colocated.7
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_unmark_long_term_for_reference.8
	.type	mm_unmark_long_term_for_reference.8,@function
mm_unmark_long_term_for_reference.8:    # @mm_unmark_long_term_for_reference.8
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$722268359, -12(%rbp)   # imm = 0x2B0CF0C7
	movq	%rdi, -24(%rbp)
	movl	%esi, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB71_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB71_26
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB71_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB71_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB71_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB71_8
# %bb.4:                                # %land.lhs.true
                                        #   in Loop: Header=BB71_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB71_8
# %bb.5:                                # %if.then6
                                        #   in Loop: Header=BB71_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB71_7
# %bb.6:                                # %if.then11
                                        #   in Loop: Header=BB71_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB71_7:                               # %if.end
                                        #   in Loop: Header=BB71_1 Depth=1
	jmp	.LBB71_8
.LBB71_8:                               # %if.end14
                                        #   in Loop: Header=BB71_1 Depth=1
	jmp	.LBB71_24
.LBB71_9:                               # %if.else
                                        #   in Loop: Header=BB71_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB71_16
# %bb.10:                               # %land.lhs.true18
                                        #   in Loop: Header=BB71_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB71_16
# %bb.11:                               # %if.then24
                                        #   in Loop: Header=BB71_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB71_15
# %bb.12:                               # %if.then29
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$0, 6376(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$2, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	andl	$2, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB71_14
# %bb.13:                               # %if.then48
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6376(%rax)
.LBB71_14:                              # %if.end57
	jmp	.LBB71_27
.LBB71_15:                              # %if.end58
                                        #   in Loop: Header=BB71_1 Depth=1
	jmp	.LBB71_16
.LBB71_16:                              # %if.end59
                                        #   in Loop: Header=BB71_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB71_23
# %bb.17:                               # %land.lhs.true65
                                        #   in Loop: Header=BB71_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB71_23
# %bb.18:                               # %if.then71
                                        #   in Loop: Header=BB71_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB71_22
# %bb.19:                               # %if.then76
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$0, 6376(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB71_21
# %bb.20:                               # %if.then97
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6376(%rax)
.LBB71_21:                              # %if.end106
	jmp	.LBB71_27
.LBB71_22:                              # %if.end107
                                        #   in Loop: Header=BB71_1 Depth=1
	jmp	.LBB71_23
.LBB71_23:                              # %if.end108
                                        #   in Loop: Header=BB71_1 Depth=1
	jmp	.LBB71_24
.LBB71_24:                              # %if.end109
                                        #   in Loop: Header=BB71_1 Depth=1
	jmp	.LBB71_25
.LBB71_25:                              # %for.inc
                                        #   in Loop: Header=BB71_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_1
.LBB71_26:                              # %for.end.loopexit
	jmp	.LBB71_27
.LBB71_27:                              # %for.end
	cmpl	$722268359, -12(%rbp)   # imm = 0x2B0CF0C7
	jne	.LBB71_29
.LBB71_28:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB71_29:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB71_28
.Lfunc_end71:
	.size	mm_unmark_long_term_for_reference.8, .Lfunc_end71-mm_unmark_long_term_for_reference.8
	.cfi_endproc
                                        # -- End function
	.globl	dpb_split_field.9       # -- Begin function dpb_split_field.9
	.p2align	4, 0x90
	.type	dpb_split_field.9,@function
dpb_split_field.9:                      # @dpb_split_field.9
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$165917408, -68(%rbp)   # imm = 0x9E3B2E0
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 36(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB72_28
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %r8d
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	idivl	%edi
	movl	$1, %edi
	movl	%r8d, %edx
	movl	%eax, %r8d
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %r8d
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	idivl	%edi
	movl	$2, %edi
	movl	%r8d, %edx
	movl	%eax, %r8d
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 56(%rcx)
	movl	$0, -4(%rbp)
.LBB72_2:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB72_5
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB72_2 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.4:                                # %for.inc
                                        #   in Loop: Header=BB72_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_2
.LBB72_5:                               # %for.end
	movl	$0, -4(%rbp)
.LBB72_6:                               # %for.cond30
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB72_9
# %bb.7:                                # %for.body36
                                        #   in Loop: Header=BB72_6 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.8:                                # %for.inc66
                                        #   in Loop: Header=BB72_6 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_6
.LBB72_9:                               # %for.end68
	movl	$0, -4(%rbp)
.LBB72_10:                              # %for.cond69
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB72_13
# %bb.11:                               # %for.body75
                                        #   in Loop: Header=BB72_10 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.12:                               # %for.inc89
                                        #   in Loop: Header=BB72_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_10
.LBB72_13:                              # %for.end91
	movl	$0, -4(%rbp)
.LBB72_14:                              # %for.cond92
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB72_17
# %bb.15:                               # %for.body98
                                        #   in Loop: Header=BB72_14 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.16:                               # %for.inc131
                                        #   in Loop: Header=BB72_14 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_14
.LBB72_17:                              # %for.end133
	movq	-16(%rbp), %rax
	movq	48(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	56(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6380(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6380(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6380(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6376(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	-16(%rbp), %rcx
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	$1, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	$1, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6416(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6416(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6416(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6552(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB72_27
# %bb.18:                               # %if.then211
	movl	$0, -4(%rbp)
.LBB72_19:                              # %for.cond212
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB72_22
# %bb.20:                               # %for.body215
                                        #   in Loop: Header=BB72_19 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	816(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	816(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	1344(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	1344(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
# %bb.21:                               # %for.inc267
                                        #   in Loop: Header=BB72_19 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_19
.LBB72_22:                              # %for.end269
	movl	$0, -4(%rbp)
.LBB72_23:                              # %for.cond270
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB72_26
# %bb.24:                               # %for.body273
                                        #   in Loop: Header=BB72_23 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	552(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	552(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	1080(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	1080(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
# %bb.25:                               # %for.inc326
                                        #   in Loop: Header=BB72_23 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_23
.LBB72_26:                              # %for.end328
	jmp	.LBB72_27
.LBB72_27:                              # %if.end
	jmp	.LBB72_29
.LBB72_28:                              # %if.else
	movq	-16(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 56(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	$0, 6528(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	$0, 6536(%rax)
.LBB72_29:                              # %if.end335
	movl	$0, -8(%rbp)
.LBB72_30:                              # %for.cond336
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_32 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB72_59
# %bb.31:                               # %for.body342
                                        #   in Loop: Header=BB72_30 Depth=1
	movl	$0, -4(%rbp)
.LBB72_32:                              # %for.cond343
                                        #   Parent Loop BB72_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB72_57
# %bb.33:                               # %for.body349
                                        #   in Loop: Header=BB72_32 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -72(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-48(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	imull	%eax, %ecx
	movl	-72(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-48(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB72_48
# %bb.34:                               # %land.lhs.true
                                        #   in Loop: Header=BB72_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-40(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB72_48
# %bb.35:                               # %if.then369
                                        #   in Loop: Header=BB72_32 Depth=2
	movl	-40(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	movl	%ecx, -28(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB72_37
# %bb.36:                               # %cond.true
                                        #   in Loop: Header=BB72_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB72_38
.LBB72_37:                              # %cond.false
                                        #   in Loop: Header=BB72_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB72_38
.LBB72_38:                              # %cond.end
                                        #   in Loop: Header=BB72_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB72_40
# %bb.39:                               # %cond.true407
                                        #   in Loop: Header=BB72_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB72_41
.LBB72_40:                              # %cond.false415
                                        #   in Loop: Header=BB72_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB72_41
.LBB72_41:                              # %cond.end416
                                        #   in Loop: Header=BB72_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB72_43
# %bb.42:                               # %cond.true429
                                        #   in Loop: Header=BB72_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$1608, %rax             # imm = 0x648
	movl	-28(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB72_44
.LBB72_43:                              # %cond.false436
                                        #   in Loop: Header=BB72_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB72_44
.LBB72_44:                              # %cond.end437
                                        #   in Loop: Header=BB72_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB72_46
# %bb.45:                               # %cond.true448
                                        #   in Loop: Header=BB72_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$1608, %rax             # imm = 0x648
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB72_47
.LBB72_46:                              # %cond.false456
                                        #   in Loop: Header=BB72_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB72_47
.LBB72_47:                              # %cond.end457
                                        #   in Loop: Header=BB72_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB72_55
.LBB72_48:                              # %if.else466
                                        #   in Loop: Header=BB72_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB72_50
# %bb.49:                               # %cond.true485
                                        #   in Loop: Header=BB72_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB72_51
.LBB72_50:                              # %cond.false491
                                        #   in Loop: Header=BB72_32 Depth=2
	movq	$-1, %rax
	jmp	.LBB72_51
.LBB72_51:                              # %cond.end492
                                        #   in Loop: Header=BB72_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB72_53
# %bb.52:                               # %cond.true503
                                        #   in Loop: Header=BB72_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB72_54
.LBB72_53:                              # %cond.false509
                                        #   in Loop: Header=BB72_32 Depth=2
	movq	$-1, %rax
	jmp	.LBB72_54
.LBB72_54:                              # %cond.end510
                                        #   in Loop: Header=BB72_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB72_55:                              # %if.end519
                                        #   in Loop: Header=BB72_32 Depth=2
	jmp	.LBB72_56
.LBB72_56:                              # %for.inc520
                                        #   in Loop: Header=BB72_32 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_32
.LBB72_57:                              # %for.end522
                                        #   in Loop: Header=BB72_30 Depth=1
	jmp	.LBB72_58
.LBB72_58:                              # %for.inc523
                                        #   in Loop: Header=BB72_30 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_30
.LBB72_59:                              # %for.end525
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	je	.LBB72_61
# %bb.60:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB72_73
.LBB72_61:                              # %if.then530
	movl	$0, -4(%rbp)
.LBB72_62:                              # %for.cond531
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_64 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB72_72
# %bb.63:                               # %for.body537
                                        #   in Loop: Header=BB72_62 Depth=1
	movl	$0, -8(%rbp)
.LBB72_64:                              # %for.cond538
                                        #   Parent Loop BB72_62 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB72_70
# %bb.65:                               # %for.body544
                                        #   in Loop: Header=BB72_64 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -52(%rbp)
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	imull	%eax, %ecx
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB72_68
# %bb.66:                               # %land.lhs.true563
                                        #   in Loop: Header=BB72_64 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-56(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB72_68
# %bb.67:                               # %if.then570
                                        #   in Loop: Header=BB72_64 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	32(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	40(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB72_68:                              # %if.end908
                                        #   in Loop: Header=BB72_64 Depth=2
	jmp	.LBB72_69
.LBB72_69:                              # %for.inc909
                                        #   in Loop: Header=BB72_64 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_64
.LBB72_70:                              # %for.end911
                                        #   in Loop: Header=BB72_62 Depth=1
	jmp	.LBB72_71
.LBB72_71:                              # %for.inc912
                                        #   in Loop: Header=BB72_62 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_62
.LBB72_72:                              # %for.end914
	jmp	.LBB72_73
.LBB72_73:                              # %if.end915
	movl	$0, -4(%rbp)
.LBB72_74:                              # %for.cond916
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_76 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB72_152
# %bb.75:                               # %for.body922
                                        #   in Loop: Header=BB72_74 Depth=1
	movl	$0, -8(%rbp)
.LBB72_76:                              # %for.cond923
                                        #   Parent Loop BB72_74 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB72_150
# %bb.77:                               # %for.body929
                                        #   in Loop: Header=BB72_76 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -64(%rbp)
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-44(%rbp), %eax
	cltd
	idivl	%esi
	imull	%eax, %ecx
	movl	-64(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-44(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -60(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB72_79
# %bb.78:                               # %lor.lhs.false948
                                        #   in Loop: Header=BB72_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-60(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB72_148
.LBB72_79:                              # %if.then954
                                        #   in Loop: Header=BB72_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB72_147
# %bb.80:                               # %if.then973
                                        #   in Loop: Header=BB72_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB72_82
# %bb.81:                               # %cond.true990
                                        #   in Loop: Header=BB72_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB72_83
.LBB72_82:                              # %cond.false991
                                        #   in Loop: Header=BB72_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB72_83:                              # %cond.end993
                                        #   in Loop: Header=BB72_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB72_85
# %bb.84:                               # %cond.true999
                                        #   in Loop: Header=BB72_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB72_86
.LBB72_85:                              # %cond.false1001
                                        #   in Loop: Header=BB72_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB72_86:                              # %cond.end1003
                                        #   in Loop: Header=BB72_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB72_88
# %bb.87:                               # %cond.true1030
                                        #   in Loop: Header=BB72_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB72_89
.LBB72_88:                              # %cond.false1032
                                        #   in Loop: Header=BB72_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB72_89:                              # %cond.end1034
                                        #   in Loop: Header=BB72_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB72_91
# %bb.90:                               # %cond.true1040
                                        #   in Loop: Header=BB72_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB72_92
.LBB72_91:                              # %cond.false1042
                                        #   in Loop: Header=BB72_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB72_92:                              # %cond.end1044
                                        #   in Loop: Header=BB72_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB72_94
# %bb.93:                               # %cond.true1071
                                        #   in Loop: Header=BB72_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB72_95
.LBB72_94:                              # %cond.false1073
                                        #   in Loop: Header=BB72_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB72_95:                              # %cond.end1075
                                        #   in Loop: Header=BB72_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB72_97
# %bb.96:                               # %cond.true1081
                                        #   in Loop: Header=BB72_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB72_98
.LBB72_97:                              # %cond.false1083
                                        #   in Loop: Header=BB72_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB72_98:                              # %cond.end1085
                                        #   in Loop: Header=BB72_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB72_100
# %bb.99:                               # %cond.true1112
                                        #   in Loop: Header=BB72_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB72_101
.LBB72_100:                             # %cond.false1114
                                        #   in Loop: Header=BB72_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB72_101:                             # %cond.end1116
                                        #   in Loop: Header=BB72_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB72_103
# %bb.102:                              # %cond.true1122
                                        #   in Loop: Header=BB72_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB72_104
.LBB72_103:                             # %cond.false1124
                                        #   in Loop: Header=BB72_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB72_104:                             # %cond.end1126
                                        #   in Loop: Header=BB72_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB72_106
# %bb.105:                              # %cond.true1153
                                        #   in Loop: Header=BB72_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB72_107
.LBB72_106:                             # %cond.false1155
                                        #   in Loop: Header=BB72_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB72_107:                             # %cond.end1157
                                        #   in Loop: Header=BB72_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB72_109
# %bb.108:                              # %cond.true1163
                                        #   in Loop: Header=BB72_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB72_110
.LBB72_109:                             # %cond.false1165
                                        #   in Loop: Header=BB72_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB72_110:                             # %cond.end1167
                                        #   in Loop: Header=BB72_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB72_112
# %bb.111:                              # %if.then1175
                                        #   in Loop: Header=BB72_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	jmp	.LBB72_125
.LBB72_112:                             # %if.else1190
                                        #   in Loop: Header=BB72_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB72_114
# %bb.113:                              # %cond.true1196
                                        #   in Loop: Header=BB72_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB72_115
.LBB72_114:                             # %cond.false1198
                                        #   in Loop: Header=BB72_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB72_115:                             # %cond.end1200
                                        #   in Loop: Header=BB72_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB72_117
# %bb.116:                              # %cond.true1206
                                        #   in Loop: Header=BB72_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB72_118
.LBB72_117:                             # %cond.false1208
                                        #   in Loop: Header=BB72_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB72_118:                             # %cond.end1210
                                        #   in Loop: Header=BB72_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cwtl
	movl	%eax, -24(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB72_120
# %bb.119:                              # %cond.true1232
                                        #   in Loop: Header=BB72_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	3192(%rax,%rcx,8), %rax
	jmp	.LBB72_121
.LBB72_120:                             # %cond.false1237
                                        #   in Loop: Header=BB72_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB72_121
.LBB72_121:                             # %cond.end1238
                                        #   in Loop: Header=BB72_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB72_123
# %bb.122:                              # %cond.true1249
                                        #   in Loop: Header=BB72_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	4776(%rax,%rcx,8), %rax
	jmp	.LBB72_124
.LBB72_123:                             # %cond.false1254
                                        #   in Loop: Header=BB72_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB72_124
.LBB72_124:                             # %cond.end1255
                                        #   in Loop: Header=BB72_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB72_125:                             # %if.end1264
                                        #   in Loop: Header=BB72_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB72_127
# %bb.126:                              # %cond.true1270
                                        #   in Loop: Header=BB72_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB72_128
.LBB72_127:                             # %cond.false1272
                                        #   in Loop: Header=BB72_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB72_128:                             # %cond.end1274
                                        #   in Loop: Header=BB72_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB72_130
# %bb.129:                              # %cond.true1280
                                        #   in Loop: Header=BB72_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB72_131
.LBB72_130:                             # %cond.false1282
                                        #   in Loop: Header=BB72_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB72_131:                             # %cond.end1284
                                        #   in Loop: Header=BB72_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB72_133
# %bb.132:                              # %if.then1292
                                        #   in Loop: Header=BB72_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	jmp	.LBB72_146
.LBB72_133:                             # %if.else1307
                                        #   in Loop: Header=BB72_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB72_135
# %bb.134:                              # %cond.true1313
                                        #   in Loop: Header=BB72_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB72_136
.LBB72_135:                             # %cond.false1315
                                        #   in Loop: Header=BB72_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB72_136:                             # %cond.end1317
                                        #   in Loop: Header=BB72_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB72_138
# %bb.137:                              # %cond.true1323
                                        #   in Loop: Header=BB72_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB72_139
.LBB72_138:                             # %cond.false1325
                                        #   in Loop: Header=BB72_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB72_139:                             # %cond.end1327
                                        #   in Loop: Header=BB72_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cwtl
	movl	%eax, -20(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB72_141
# %bb.140:                              # %cond.true1349
                                        #   in Loop: Header=BB72_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	3456(%rax,%rcx,8), %rax
	jmp	.LBB72_142
.LBB72_141:                             # %cond.false1355
                                        #   in Loop: Header=BB72_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB72_142
.LBB72_142:                             # %cond.end1356
                                        #   in Loop: Header=BB72_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB72_144
# %bb.143:                              # %cond.true1367
                                        #   in Loop: Header=BB72_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	5040(%rax,%rcx,8), %rax
	jmp	.LBB72_145
.LBB72_144:                             # %cond.false1373
                                        #   in Loop: Header=BB72_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB72_145
.LBB72_145:                             # %cond.end1374
                                        #   in Loop: Header=BB72_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB72_146:                             # %if.end1383
                                        #   in Loop: Header=BB72_76 Depth=2
	jmp	.LBB72_147
.LBB72_147:                             # %if.end1384
                                        #   in Loop: Header=BB72_76 Depth=2
	jmp	.LBB72_148
.LBB72_148:                             # %if.end1385
                                        #   in Loop: Header=BB72_76 Depth=2
	jmp	.LBB72_149
.LBB72_149:                             # %for.inc1386
                                        #   in Loop: Header=BB72_76 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_76
.LBB72_150:                             # %for.end1388
                                        #   in Loop: Header=BB72_74 Depth=1
	jmp	.LBB72_151
.LBB72_151:                             # %for.inc1389
                                        #   in Loop: Header=BB72_74 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_74
.LBB72_152:                             # %for.end1391
	movl	$0, -8(%rbp)
.LBB72_153:                             # %for.cond1392
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_155 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB72_160
# %bb.154:                              # %for.body1398
                                        #   in Loop: Header=BB72_153 Depth=1
	movl	$0, -4(%rbp)
.LBB72_155:                             # %for.cond1399
                                        #   Parent Loop BB72_153 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB72_158
# %bb.156:                              # %for.body1405
                                        #   in Loop: Header=BB72_155 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
# %bb.157:                              # %for.inc1412
                                        #   in Loop: Header=BB72_155 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_155
.LBB72_158:                             # %for.end1414
                                        #   in Loop: Header=BB72_153 Depth=1
	jmp	.LBB72_159
.LBB72_159:                             # %for.inc1415
                                        #   in Loop: Header=BB72_153 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_153
.LBB72_160:                             # %for.end1417
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB72_162
# %bb.161:                              # %lor.lhs.false1420
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB72_174
.LBB72_162:                             # %if.then1423
	movl	$0, -8(%rbp)
.LBB72_163:                             # %for.cond1424
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_165 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB72_173
# %bb.164:                              # %for.body1430
                                        #   in Loop: Header=BB72_163 Depth=1
	movl	$0, -4(%rbp)
.LBB72_165:                             # %for.cond1431
                                        #   Parent Loop BB72_163 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB72_171
# %bb.166:                              # %for.body1437
                                        #   in Loop: Header=BB72_165 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -80(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	imull	%eax, %ecx
	movl	-80(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-36(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -76(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB72_168
# %bb.167:                              # %cond.true1456
                                        #   in Loop: Header=BB72_165 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-76(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	jmp	.LBB72_169
.LBB72_168:                             # %cond.false1462
                                        #   in Loop: Header=BB72_165 Depth=2
	xorl	%eax, %eax
	jmp	.LBB72_169
.LBB72_169:                             # %cond.end1463
                                        #   in Loop: Header=BB72_165 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6520(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.170:                              # %for.inc1472
                                        #   in Loop: Header=BB72_165 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_165
.LBB72_171:                             # %for.end1474
                                        #   in Loop: Header=BB72_163 Depth=1
	jmp	.LBB72_172
.LBB72_172:                             # %for.inc1475
                                        #   in Loop: Header=BB72_163 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_163
.LBB72_173:                             # %for.end1477
	jmp	.LBB72_174
.LBB72_174:                             # %if.end1478
	cmpl	$165917408, -68(%rbp)   # imm = 0x9E3B2E0
	jne	.LBB72_176
.LBB72_175:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB72_176:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB72_175
.Lfunc_end72:
	.size	dpb_split_field.9, .Lfunc_end72-dpb_split_field.9
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_unmark_long_term_for_reference.10
	.type	mm_unmark_long_term_for_reference.10,@function
mm_unmark_long_term_for_reference.10:   # @mm_unmark_long_term_for_reference.10
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$170759018, -12(%rbp)   # imm = 0xA2D936A
	movq	%rdi, -24(%rbp)
	movl	%esi, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB73_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB73_26
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB73_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB73_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB73_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB73_8
# %bb.4:                                # %land.lhs.true
                                        #   in Loop: Header=BB73_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB73_8
# %bb.5:                                # %if.then6
                                        #   in Loop: Header=BB73_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB73_7
# %bb.6:                                # %if.then11
                                        #   in Loop: Header=BB73_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB73_7:                               # %if.end
                                        #   in Loop: Header=BB73_1 Depth=1
	jmp	.LBB73_8
.LBB73_8:                               # %if.end14
                                        #   in Loop: Header=BB73_1 Depth=1
	jmp	.LBB73_24
.LBB73_9:                               # %if.else
                                        #   in Loop: Header=BB73_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB73_16
# %bb.10:                               # %land.lhs.true18
                                        #   in Loop: Header=BB73_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB73_16
# %bb.11:                               # %if.then24
                                        #   in Loop: Header=BB73_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB73_15
# %bb.12:                               # %if.then29
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$0, 6376(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$2, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	andl	$2, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB73_14
# %bb.13:                               # %if.then48
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6376(%rax)
.LBB73_14:                              # %if.end57
	jmp	.LBB73_27
.LBB73_15:                              # %if.end58
                                        #   in Loop: Header=BB73_1 Depth=1
	jmp	.LBB73_16
.LBB73_16:                              # %if.end59
                                        #   in Loop: Header=BB73_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB73_23
# %bb.17:                               # %land.lhs.true65
                                        #   in Loop: Header=BB73_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB73_23
# %bb.18:                               # %if.then71
                                        #   in Loop: Header=BB73_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB73_22
# %bb.19:                               # %if.then76
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$0, 6376(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB73_21
# %bb.20:                               # %if.then97
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6376(%rax)
.LBB73_21:                              # %if.end106
	jmp	.LBB73_27
.LBB73_22:                              # %if.end107
                                        #   in Loop: Header=BB73_1 Depth=1
	jmp	.LBB73_23
.LBB73_23:                              # %if.end108
                                        #   in Loop: Header=BB73_1 Depth=1
	jmp	.LBB73_24
.LBB73_24:                              # %if.end109
                                        #   in Loop: Header=BB73_1 Depth=1
	jmp	.LBB73_25
.LBB73_25:                              # %for.inc
                                        #   in Loop: Header=BB73_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_1
.LBB73_26:                              # %for.end.loopexit
	jmp	.LBB73_27
.LBB73_27:                              # %for.end
	cmpl	$170759018, -12(%rbp)   # imm = 0xA2D936A
	jne	.LBB73_29
.LBB73_28:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB73_29:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB73_28
.Lfunc_end73:
	.size	mm_unmark_long_term_for_reference.10, .Lfunc_end73-mm_unmark_long_term_for_reference.10
	.cfi_endproc
                                        # -- End function
	.globl	init_lists.11           # -- Begin function init_lists.11
	.p2align	4, 0x90
	.type	init_lists.11,@function
init_lists.11:                          # @init_lists.11
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$1719316447, -76(%rbp)  # imm = 0x667AAFDF
	movl	%edi, -52(%rbp)
	movl	%esi, -20(%rbp)
	movl	$0, -44(%rbp)
	movl	$0, -48(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -8(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jne	.LBB74_14
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB74_2:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB74_13
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB74_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB74_11
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB74_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB74_10
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB74_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB74_10
# %bb.6:                                # %if.then10
                                        #   in Loop: Header=BB74_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jbe	.LBB74_8
# %bb.7:                                # %if.then15
                                        #   in Loop: Header=BB74_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	subl	-68(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
	jmp	.LBB74_9
.LBB74_8:                               # %if.else
                                        #   in Loop: Header=BB74_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
.LBB74_9:                               # %if.end
                                        #   in Loop: Header=BB74_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6364(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
.LBB74_10:                              # %if.end36
                                        #   in Loop: Header=BB74_2 Depth=1
	jmp	.LBB74_11
.LBB74_11:                              # %if.end37
                                        #   in Loop: Header=BB74_2 Depth=1
	jmp	.LBB74_12
.LBB74_12:                              # %for.inc
                                        #   in Loop: Header=BB74_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_2
.LBB74_13:                              # %for.end
	jmp	.LBB74_31
.LBB74_14:                              # %if.else38
	cmpl	$1, -20(%rbp)
	jne	.LBB74_16
# %bb.15:                               # %if.then40
	movl	$1, -44(%rbp)
	movl	$0, -48(%rbp)
	jmp	.LBB74_17
.LBB74_16:                              # %if.else41
	movl	$0, -44(%rbp)
	movl	$1, -48(%rbp)
.LBB74_17:                              # %if.end42
	movl	$0, -4(%rbp)
.LBB74_18:                              # %for.cond43
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB74_30
# %bb.19:                               # %for.body45
                                        #   in Loop: Header=BB74_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 4(%rax)
	je	.LBB74_28
# %bb.20:                               # %if.then49
                                        #   in Loop: Header=BB74_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jbe	.LBB74_22
# %bb.21:                               # %if.then55
                                        #   in Loop: Header=BB74_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	subl	-68(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
	jmp	.LBB74_23
.LBB74_22:                              # %if.else63
                                        #   in Loop: Header=BB74_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
.LBB74_23:                              # %if.end70
                                        #   in Loop: Header=BB74_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB74_25
# %bb.24:                               # %if.then75
                                        #   in Loop: Header=BB74_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6364(%rcx)
.LBB74_25:                              # %if.end83
                                        #   in Loop: Header=BB74_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB74_27
# %bb.26:                               # %if.then89
                                        #   in Loop: Header=BB74_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6364(%rcx)
.LBB74_27:                              # %if.end98
                                        #   in Loop: Header=BB74_18 Depth=1
	jmp	.LBB74_28
.LBB74_28:                              # %if.end99
                                        #   in Loop: Header=BB74_18 Depth=1
	jmp	.LBB74_29
.LBB74_29:                              # %for.inc100
                                        #   in Loop: Header=BB74_18 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_18
.LBB74_30:                              # %for.end102
	jmp	.LBB74_31
.LBB74_31:                              # %if.end103
	cmpl	$2, -52(%rbp)
	je	.LBB74_33
# %bb.32:                               # %lor.lhs.false
	cmpl	$4, -52(%rbp)
	jne	.LBB74_34
.LBB74_33:                              # %if.then106
	movl	$0, listXsize
	movl	$0, listXsize+4
	jmp	.LBB74_181
.LBB74_34:                              # %if.end107
	cmpl	$0, -52(%rbp)
	je	.LBB74_36
# %bb.35:                               # %lor.lhs.false109
	cmpl	$3, -52(%rbp)
	jne	.LBB74_75
.LBB74_36:                              # %if.then111
	cmpl	$0, -20(%rbp)
	jne	.LBB74_55
# %bb.37:                               # %if.then113
	movl	$0, -4(%rbp)
.LBB74_38:                              # %for.cond114
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB74_46
# %bb.39:                               # %for.body116
                                        #   in Loop: Header=BB74_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB74_44
# %bb.40:                               # %if.then121
                                        #   in Loop: Header=BB74_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB74_43
# %bb.41:                               # %land.lhs.true127
                                        #   in Loop: Header=BB74_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB74_43
# %bb.42:                               # %if.then133
                                        #   in Loop: Header=BB74_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB74_43:                              # %if.end140
                                        #   in Loop: Header=BB74_38 Depth=1
	jmp	.LBB74_44
.LBB74_44:                              # %if.end141
                                        #   in Loop: Header=BB74_38 Depth=1
	jmp	.LBB74_45
.LBB74_45:                              # %for.inc142
                                        #   in Loop: Header=BB74_38 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_38
.LBB74_46:                              # %for.end144
	movq	listX, %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_pic_num_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize
	movl	$0, -4(%rbp)
.LBB74_47:                              # %for.cond145
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB74_54
# %bb.48:                               # %for.body148
                                        #   in Loop: Header=BB74_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB74_52
# %bb.49:                               # %if.then154
                                        #   in Loop: Header=BB74_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB74_51
# %bb.50:                               # %if.then160
                                        #   in Loop: Header=BB74_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB74_51:                              # %if.end177
                                        #   in Loop: Header=BB74_47 Depth=1
	jmp	.LBB74_52
.LBB74_52:                              # %if.end178
                                        #   in Loop: Header=BB74_47 Depth=1
	jmp	.LBB74_53
.LBB74_53:                              # %for.inc179
                                        #   in Loop: Header=BB74_47 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_47
.LBB74_54:                              # %for.end181
	movq	listX, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize
	jmp	.LBB74_74
.LBB74_55:                              # %if.else186
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -32(%rbp)
	cmpq	-32(%rbp), %rcx
	jne	.LBB74_57
# %bb.56:                               # %if.then190
	movabsq	$.L.str.9, %rdi
	callq	no_mem_exit
.LBB74_57:                              # %if.end191
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -40(%rbp)
	cmpq	-40(%rbp), %rcx
	jne	.LBB74_59
# %bb.58:                               # %if.then196
	movabsq	$.L.str.10, %rdi
	callq	no_mem_exit
.LBB74_59:                              # %if.end197
	movl	$0, -4(%rbp)
.LBB74_60:                              # %for.cond198
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB74_65
# %bb.61:                               # %for.body201
                                        #   in Loop: Header=BB74_60 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 4(%rax)
	je	.LBB74_63
# %bb.62:                               # %if.then206
                                        #   in Loop: Header=BB74_60 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB74_63:                              # %if.end212
                                        #   in Loop: Header=BB74_60 Depth=1
	jmp	.LBB74_64
.LBB74_64:                              # %for.inc213
                                        #   in Loop: Header=BB74_60 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_60
.LBB74_65:                              # %for.end215
	movq	-32(%rbp), %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_frame_num_desc, %rcx
	callq	qsort
	movl	$0, listXsize
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movl	$0, -4(%rbp)
.LBB74_66:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB74_73
# %bb.67:                               # %for.body220
                                        #   in Loop: Header=BB74_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-40(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB74_69
# %bb.68:                               # %if.then231
                                        #   in Loop: Header=BB74_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB74_69:                              # %if.end242
                                        #   in Loop: Header=BB74_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB74_71
# %bb.70:                               # %if.then248
                                        #   in Loop: Header=BB74_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB74_71:                              # %if.end259
                                        #   in Loop: Header=BB74_66 Depth=1
	jmp	.LBB74_72
.LBB74_72:                              # %for.inc260
                                        #   in Loop: Header=BB74_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_66
.LBB74_73:                              # %for.end262
	movq	-40(%rbp), %rdi
	movslq	-24(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_lt_pic_idx_asc, %rcx
	callq	qsort
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movq	-32(%rbp), %rdi
	callq	free
	movq	-40(%rbp), %rdi
	callq	free
.LBB74_74:                              # %if.end264
	movl	$0, listXsize+4
	jmp	.LBB74_155
.LBB74_75:                              # %if.else265
	cmpl	$0, -20(%rbp)
	jne	.LBB74_115
# %bb.76:                               # %if.then268
	movl	$0, -4(%rbp)
.LBB74_77:                              # %for.cond269
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB74_87
# %bb.78:                               # %for.body272
                                        #   in Loop: Header=BB74_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB74_85
# %bb.79:                               # %if.then278
                                        #   in Loop: Header=BB74_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB74_84
# %bb.80:                               # %land.lhs.true284
                                        #   in Loop: Header=BB74_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB74_84
# %bb.81:                               # %if.then290
                                        #   in Loop: Header=BB74_77 Depth=1
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB74_83
# %bb.82:                               # %if.then296
                                        #   in Loop: Header=BB74_77 Depth=1
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB74_83:                              # %if.end307
                                        #   in Loop: Header=BB74_77 Depth=1
	jmp	.LBB74_84
.LBB74_84:                              # %if.end308
                                        #   in Loop: Header=BB74_77 Depth=1
	jmp	.LBB74_85
.LBB74_85:                              # %if.end309
                                        #   in Loop: Header=BB74_77 Depth=1
	jmp	.LBB74_86
.LBB74_86:                              # %for.inc310
                                        #   in Loop: Header=BB74_77 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_77
.LBB74_87:                              # %for.end312
	movq	listX, %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_poc_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB74_88:                              # %for.cond314
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB74_98
# %bb.89:                               # %for.body317
                                        #   in Loop: Header=BB74_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB74_96
# %bb.90:                               # %if.then323
                                        #   in Loop: Header=BB74_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB74_95
# %bb.91:                               # %land.lhs.true329
                                        #   in Loop: Header=BB74_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB74_95
# %bb.92:                               # %if.then335
                                        #   in Loop: Header=BB74_88 Depth=1
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB74_94
# %bb.93:                               # %if.then343
                                        #   in Loop: Header=BB74_88 Depth=1
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB74_94:                              # %if.end354
                                        #   in Loop: Header=BB74_88 Depth=1
	jmp	.LBB74_95
.LBB74_95:                              # %if.end355
                                        #   in Loop: Header=BB74_88 Depth=1
	jmp	.LBB74_96
.LBB74_96:                              # %if.end356
                                        #   in Loop: Header=BB74_88 Depth=1
	jmp	.LBB74_97
.LBB74_97:                              # %for.inc357
                                        #   in Loop: Header=BB74_88 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_88
.LBB74_98:                              # %for.end359
	movq	listX, %rdi
	movslq	-16(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_poc_asc, %rcx
	callq	qsort
	movl	$0, -12(%rbp)
.LBB74_99:                              # %for.cond364
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB74_102
# %bb.100:                              # %for.body367
                                        #   in Loop: Header=BB74_99 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movl	-8(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.101:                              # %for.inc374
                                        #   in Loop: Header=BB74_99 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_99
.LBB74_102:                             # %for.end376
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB74_103:                             # %for.cond377
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB74_106
# %bb.104:                              # %for.body380
                                        #   in Loop: Header=BB74_103 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.105:                              # %for.inc386
                                        #   in Loop: Header=BB74_103 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_103
.LBB74_106:                             # %for.end388
	movl	-8(%rbp), %eax
	movl	%eax, listXsize+4
	movl	%eax, listXsize
	movl	$0, -4(%rbp)
.LBB74_107:                             # %for.cond389
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB74_114
# %bb.108:                              # %for.body392
                                        #   in Loop: Header=BB74_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB74_112
# %bb.109:                              # %if.then398
                                        #   in Loop: Header=BB74_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB74_111
# %bb.110:                              # %if.then404
                                        #   in Loop: Header=BB74_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX+8, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB74_111:                             # %if.end428
                                        #   in Loop: Header=BB74_107 Depth=1
	jmp	.LBB74_112
.LBB74_112:                             # %if.end429
                                        #   in Loop: Header=BB74_107 Depth=1
	jmp	.LBB74_113
.LBB74_113:                             # %for.inc430
                                        #   in Loop: Header=BB74_107 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_107
.LBB74_114:                             # %for.end432
	movq	listX, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movq	listX+8, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize+4
	movl	%eax, listXsize
	jmp	.LBB74_154
.LBB74_115:                             # %if.else441
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -32(%rbp)
	cmpq	-32(%rbp), %rcx
	jne	.LBB74_117
# %bb.116:                              # %if.then446
	movabsq	$.L.str.9, %rdi
	callq	no_mem_exit
.LBB74_117:                             # %if.end447
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -64(%rbp)
	cmpq	-64(%rbp), %rcx
	jne	.LBB74_119
# %bb.118:                              # %if.then452
	movabsq	$.L.str.11, %rdi
	callq	no_mem_exit
.LBB74_119:                             # %if.end453
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -40(%rbp)
	cmpq	-40(%rbp), %rcx
	jne	.LBB74_121
# %bb.120:                              # %if.then458
	movabsq	$.L.str.10, %rdi
	callq	no_mem_exit
.LBB74_121:                             # %if.end459
	movl	$0, listXsize
	movl	$1, listXsize+4
	movl	$0, -4(%rbp)
.LBB74_122:                             # %for.cond460
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB74_129
# %bb.123:                              # %for.body463
                                        #   in Loop: Header=BB74_122 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, (%rax)
	je	.LBB74_127
# %bb.124:                              # %if.then468
                                        #   in Loop: Header=BB74_122 Depth=1
	movq	img, %rax
	movl	72460(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jl	.LBB74_126
# %bb.125:                              # %if.then474
                                        #   in Loop: Header=BB74_122 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB74_126:                             # %if.end480
                                        #   in Loop: Header=BB74_122 Depth=1
	jmp	.LBB74_127
.LBB74_127:                             # %if.end481
                                        #   in Loop: Header=BB74_122 Depth=1
	jmp	.LBB74_128
.LBB74_128:                             # %for.inc482
                                        #   in Loop: Header=BB74_122 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_122
.LBB74_129:                             # %for.end484
	movq	-32(%rbp), %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_poc_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB74_130:                             # %for.cond486
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB74_137
# %bb.131:                              # %for.body489
                                        #   in Loop: Header=BB74_130 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, (%rax)
	je	.LBB74_135
# %bb.132:                              # %if.then494
                                        #   in Loop: Header=BB74_130 Depth=1
	movq	img, %rax
	movl	72460(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB74_134
# %bb.133:                              # %if.then501
                                        #   in Loop: Header=BB74_130 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB74_134:                             # %if.end507
                                        #   in Loop: Header=BB74_130 Depth=1
	jmp	.LBB74_135
.LBB74_135:                             # %if.end508
                                        #   in Loop: Header=BB74_130 Depth=1
	jmp	.LBB74_136
.LBB74_136:                             # %for.inc509
                                        #   in Loop: Header=BB74_130 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_130
.LBB74_137:                             # %for.end511
	movq	-32(%rbp), %rdi
	movslq	-16(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_poc_asc, %rcx
	callq	qsort
	movl	$0, -12(%rbp)
.LBB74_138:                             # %for.cond516
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB74_141
# %bb.139:                              # %for.body519
                                        #   in Loop: Header=BB74_138 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	-8(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.140:                              # %for.inc526
                                        #   in Loop: Header=BB74_138 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_138
.LBB74_141:                             # %for.end528
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB74_142:                             # %for.cond529
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB74_145
# %bb.143:                              # %for.body532
                                        #   in Loop: Header=BB74_142 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.144:                              # %for.inc538
                                        #   in Loop: Header=BB74_142 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_142
.LBB74_145:                             # %for.end540
	movl	$0, listXsize
	movl	$0, listXsize+4
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movabsq	$listXsize, %r8
	addq	$4, %r8
	movl	-20(%rbp), %edi
	movq	-64(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX+8, %rcx
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movl	$0, -4(%rbp)
.LBB74_146:                             # %for.cond541
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB74_153
# %bb.147:                              # %for.body544
                                        #   in Loop: Header=BB74_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-40(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB74_149
# %bb.148:                              # %if.then555
                                        #   in Loop: Header=BB74_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB74_149:                             # %if.end566
                                        #   in Loop: Header=BB74_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB74_151
# %bb.150:                              # %if.then572
                                        #   in Loop: Header=BB74_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB74_151:                             # %if.end583
                                        #   in Loop: Header=BB74_146 Depth=1
	jmp	.LBB74_152
.LBB74_152:                             # %for.inc584
                                        #   in Loop: Header=BB74_146 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_146
.LBB74_153:                             # %for.end586
	movq	-40(%rbp), %rdi
	movslq	-24(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_lt_pic_idx_asc, %rcx
	callq	qsort
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movabsq	$listXsize, %r8
	addq	$4, %r8
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX+8, %rcx
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movq	-32(%rbp), %rdi
	callq	free
	movq	-64(%rbp), %rdi
	callq	free
	movq	-40(%rbp), %rdi
	callq	free
.LBB74_154:                             # %if.end588
	jmp	.LBB74_155
.LBB74_155:                             # %if.end589
	movl	listXsize, %eax
	cmpl	listXsize+4, %eax
	jne	.LBB74_166
# %bb.156:                              # %land.lhs.true592
	cmpl	$1, listXsize
	jle	.LBB74_166
# %bb.157:                              # %if.then595
	movl	$0, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB74_158:                             # %for.cond596
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB74_163
# %bb.159:                              # %for.body599
                                        #   in Loop: Header=BB74_158 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movslq	-12(%rbp), %rdx
	cmpq	(%rcx,%rdx,8), %rax
	je	.LBB74_161
# %bb.160:                              # %if.then606
                                        #   in Loop: Header=BB74_158 Depth=1
	movl	$1, -72(%rbp)
.LBB74_161:                             # %if.end607
                                        #   in Loop: Header=BB74_158 Depth=1
	jmp	.LBB74_162
.LBB74_162:                             # %for.inc608
                                        #   in Loop: Header=BB74_158 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_158
.LBB74_163:                             # %for.end610
	cmpl	$0, -72(%rbp)
	jne	.LBB74_165
# %bb.164:                              # %if.then612
	movq	listX+8, %rax
	movq	(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	listX+8, %rax
	movq	8(%rax), %rax
	movq	listX+8, %rcx
	movq	%rax, (%rcx)
	movq	-88(%rbp), %rax
	movq	listX+8, %rcx
	movq	%rax, 8(%rcx)
.LBB74_165:                             # %if.end617
	jmp	.LBB74_166
.LBB74_166:                             # %if.end618
	movl	listXsize, %eax
	movq	img, %rcx
	cmpl	72000(%rcx), %eax
	jge	.LBB74_168
# %bb.167:                              # %cond.true
	movl	listXsize, %eax
	jmp	.LBB74_169
.LBB74_168:                             # %cond.false
	movq	img, %rax
	movl	72000(%rax), %eax
.LBB74_169:                             # %cond.end
	movl	%eax, listXsize
	movl	listXsize+4, %eax
	movq	img, %rcx
	cmpl	72004(%rcx), %eax
	jge	.LBB74_171
# %bb.170:                              # %cond.true624
	movl	listXsize+4, %eax
	jmp	.LBB74_172
.LBB74_171:                             # %cond.false625
	movq	img, %rax
	movl	72004(%rax), %eax
.LBB74_172:                             # %cond.end627
	movl	%eax, listXsize+4
	movl	listXsize, %eax
	movl	%eax, -4(%rbp)
.LBB74_173:                             # %for.cond629
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$33, -4(%rbp)
	jae	.LBB74_176
# %bb.174:                              # %for.body632
                                        #   in Loop: Header=BB74_173 Depth=1
	movq	listX, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.175:                              # %for.inc635
                                        #   in Loop: Header=BB74_173 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_173
.LBB74_176:                             # %for.end637
	movl	listXsize+4, %eax
	movl	%eax, -4(%rbp)
.LBB74_177:                             # %for.cond638
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$33, -4(%rbp)
	jae	.LBB74_180
# %bb.178:                              # %for.body641
                                        #   in Loop: Header=BB74_177 Depth=1
	movq	listX+8, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.179:                              # %for.inc644
                                        #   in Loop: Header=BB74_177 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_177
.LBB74_180:                             # %for.end646.loopexit
	jmp	.LBB74_181
.LBB74_181:                             # %for.end646
	cmpl	$1719316447, -76(%rbp)  # imm = 0x667AAFDF
	jne	.LBB74_183
.LBB74_182:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB74_183:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB74_182
.Lfunc_end74:
	.size	init_lists.11, .Lfunc_end74-init_lists.11
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function is_long_term_reference.12
	.type	is_long_term_reference.12,@function
is_long_term_reference.12:              # @is_long_term_reference.12
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$720046493, -24(%rbp)   # imm = 0x2AEB099D
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$3, (%rax)
	jne	.LBB75_5
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB75_4
# %bb.2:                                # %land.lhs.true
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB75_4
# %bb.3:                                # %if.then3
	movl	$1, -20(%rbp)
	jmp	.LBB75_18
.LBB75_4:                               # %if.end
	jmp	.LBB75_5
.LBB75_5:                               # %if.end4
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	jne	.LBB75_17
# %bb.6:                                # %if.then6
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB75_11
# %bb.7:                                # %if.then9
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB75_10
# %bb.8:                                # %land.lhs.true12
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB75_10
# %bb.9:                                # %if.then16
	movl	$1, -20(%rbp)
	jmp	.LBB75_18
.LBB75_10:                              # %if.end17
	jmp	.LBB75_11
.LBB75_11:                              # %if.end18
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB75_16
# %bb.12:                               # %if.then22
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB75_15
# %bb.13:                               # %land.lhs.true25
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB75_15
# %bb.14:                               # %if.then29
	movl	$1, -20(%rbp)
	jmp	.LBB75_18
.LBB75_15:                              # %if.end30
	jmp	.LBB75_16
.LBB75_16:                              # %if.end31
	jmp	.LBB75_17
.LBB75_17:                              # %if.end32
	movl	$0, -20(%rbp)
.LBB75_18:                              # %return
	movl	-20(%rbp), %ebx
	cmpl	$720046493, -24(%rbp)   # imm = 0x2AEB099D
	jne	.LBB75_20
.LBB75_19:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB75_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB75_19
.Lfunc_end75:
	.size	is_long_term_reference.12, .Lfunc_end75-is_long_term_reference.12
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_pic_num_desc.13
	.type	compare_pic_by_pic_num_desc.13,@function
compare_pic_by_pic_num_desc.13:         # @compare_pic_by_pic_num_desc.13
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1757584835, -16(%rbp)  # imm = 0x68C29DC3
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	6364(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6364(%rcx), %eax
	jge	.LBB76_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB76_5
.LBB76_2:                               # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	6364(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6364(%rcx), %eax
	jle	.LBB76_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB76_5
.LBB76_4:                               # %if.else
	movl	$0, -12(%rbp)
.LBB76_5:                               # %return
	movl	-12(%rbp), %ebx
	cmpl	$1757584835, -16(%rbp)  # imm = 0x68C29DC3
	jne	.LBB76_7
.LBB76_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB76_7:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB76_6
.Lfunc_end76:
	.size	compare_pic_by_pic_num_desc.13, .Lfunc_end76-compare_pic_by_pic_num_desc.13
	.cfi_endproc
                                        # -- End function
	.globl	dpb_split_field.14      # -- Begin function dpb_split_field.14
	.p2align	4, 0x90
	.type	dpb_split_field.14,@function
dpb_split_field.14:                     # @dpb_split_field.14
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$302083196, -72(%rbp)   # imm = 0x12016C7C
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 36(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB77_28
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %r8d
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	idivl	%edi
	movl	$1, %edi
	movl	%r8d, %edx
	movl	%eax, %r8d
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %r8d
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	idivl	%edi
	movl	$2, %edi
	movl	%r8d, %edx
	movl	%eax, %r8d
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 56(%rcx)
	movl	$0, -4(%rbp)
.LBB77_2:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB77_5
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB77_2 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.4:                                # %for.inc
                                        #   in Loop: Header=BB77_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_2
.LBB77_5:                               # %for.end
	movl	$0, -4(%rbp)
.LBB77_6:                               # %for.cond30
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB77_9
# %bb.7:                                # %for.body36
                                        #   in Loop: Header=BB77_6 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.8:                                # %for.inc66
                                        #   in Loop: Header=BB77_6 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_6
.LBB77_9:                               # %for.end68
	movl	$0, -4(%rbp)
.LBB77_10:                              # %for.cond69
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB77_13
# %bb.11:                               # %for.body75
                                        #   in Loop: Header=BB77_10 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.12:                               # %for.inc89
                                        #   in Loop: Header=BB77_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_10
.LBB77_13:                              # %for.end91
	movl	$0, -4(%rbp)
.LBB77_14:                              # %for.cond92
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB77_17
# %bb.15:                               # %for.body98
                                        #   in Loop: Header=BB77_14 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.16:                               # %for.inc131
                                        #   in Loop: Header=BB77_14 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_14
.LBB77_17:                              # %for.end133
	movq	-16(%rbp), %rax
	movq	48(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	56(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6380(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6380(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6380(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6376(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	-16(%rbp), %rcx
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	$1, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	$1, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6416(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6416(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6416(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6552(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB77_27
# %bb.18:                               # %if.then211
	movl	$0, -4(%rbp)
.LBB77_19:                              # %for.cond212
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB77_22
# %bb.20:                               # %for.body215
                                        #   in Loop: Header=BB77_19 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	816(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	816(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	1344(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	1344(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
# %bb.21:                               # %for.inc267
                                        #   in Loop: Header=BB77_19 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_19
.LBB77_22:                              # %for.end269
	movl	$0, -4(%rbp)
.LBB77_23:                              # %for.cond270
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB77_26
# %bb.24:                               # %for.body273
                                        #   in Loop: Header=BB77_23 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	552(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	552(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	1080(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	1080(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
# %bb.25:                               # %for.inc326
                                        #   in Loop: Header=BB77_23 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_23
.LBB77_26:                              # %for.end328
	jmp	.LBB77_27
.LBB77_27:                              # %if.end
	jmp	.LBB77_29
.LBB77_28:                              # %if.else
	movq	-16(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 56(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	$0, 6528(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	$0, 6536(%rax)
.LBB77_29:                              # %if.end335
	movl	$0, -8(%rbp)
.LBB77_30:                              # %for.cond336
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_32 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB77_59
# %bb.31:                               # %for.body342
                                        #   in Loop: Header=BB77_30 Depth=1
	movl	$0, -4(%rbp)
.LBB77_32:                              # %for.cond343
                                        #   Parent Loop BB77_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB77_57
# %bb.33:                               # %for.body349
                                        #   in Loop: Header=BB77_32 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -68(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-40(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	imull	%eax, %ecx
	movl	-68(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-40(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -32(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB77_48
# %bb.34:                               # %land.lhs.true
                                        #   in Loop: Header=BB77_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-32(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB77_48
# %bb.35:                               # %if.then369
                                        #   in Loop: Header=BB77_32 Depth=2
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	movl	%ecx, -28(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB77_37
# %bb.36:                               # %cond.true
                                        #   in Loop: Header=BB77_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB77_38
.LBB77_37:                              # %cond.false
                                        #   in Loop: Header=BB77_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB77_38
.LBB77_38:                              # %cond.end
                                        #   in Loop: Header=BB77_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB77_40
# %bb.39:                               # %cond.true407
                                        #   in Loop: Header=BB77_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB77_41
.LBB77_40:                              # %cond.false415
                                        #   in Loop: Header=BB77_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB77_41
.LBB77_41:                              # %cond.end416
                                        #   in Loop: Header=BB77_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB77_43
# %bb.42:                               # %cond.true429
                                        #   in Loop: Header=BB77_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$1608, %rax             # imm = 0x648
	movl	-28(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB77_44
.LBB77_43:                              # %cond.false436
                                        #   in Loop: Header=BB77_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB77_44
.LBB77_44:                              # %cond.end437
                                        #   in Loop: Header=BB77_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB77_46
# %bb.45:                               # %cond.true448
                                        #   in Loop: Header=BB77_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$1608, %rax             # imm = 0x648
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB77_47
.LBB77_46:                              # %cond.false456
                                        #   in Loop: Header=BB77_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB77_47
.LBB77_47:                              # %cond.end457
                                        #   in Loop: Header=BB77_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB77_55
.LBB77_48:                              # %if.else466
                                        #   in Loop: Header=BB77_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB77_50
# %bb.49:                               # %cond.true485
                                        #   in Loop: Header=BB77_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB77_51
.LBB77_50:                              # %cond.false491
                                        #   in Loop: Header=BB77_32 Depth=2
	movq	$-1, %rax
	jmp	.LBB77_51
.LBB77_51:                              # %cond.end492
                                        #   in Loop: Header=BB77_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB77_53
# %bb.52:                               # %cond.true503
                                        #   in Loop: Header=BB77_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB77_54
.LBB77_53:                              # %cond.false509
                                        #   in Loop: Header=BB77_32 Depth=2
	movq	$-1, %rax
	jmp	.LBB77_54
.LBB77_54:                              # %cond.end510
                                        #   in Loop: Header=BB77_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB77_55:                              # %if.end519
                                        #   in Loop: Header=BB77_32 Depth=2
	jmp	.LBB77_56
.LBB77_56:                              # %for.inc520
                                        #   in Loop: Header=BB77_32 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_32
.LBB77_57:                              # %for.end522
                                        #   in Loop: Header=BB77_30 Depth=1
	jmp	.LBB77_58
.LBB77_58:                              # %for.inc523
                                        #   in Loop: Header=BB77_30 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_30
.LBB77_59:                              # %for.end525
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	je	.LBB77_61
# %bb.60:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB77_73
.LBB77_61:                              # %if.then530
	movl	$0, -4(%rbp)
.LBB77_62:                              # %for.cond531
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_64 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB77_72
# %bb.63:                               # %for.body537
                                        #   in Loop: Header=BB77_62 Depth=1
	movl	$0, -8(%rbp)
.LBB77_64:                              # %for.cond538
                                        #   Parent Loop BB77_62 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB77_70
# %bb.65:                               # %for.body544
                                        #   in Loop: Header=BB77_64 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -52(%rbp)
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-36(%rbp), %eax
	cltd
	idivl	%esi
	imull	%eax, %ecx
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-36(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB77_68
# %bb.66:                               # %land.lhs.true563
                                        #   in Loop: Header=BB77_64 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-64(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB77_68
# %bb.67:                               # %if.then570
                                        #   in Loop: Header=BB77_64 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	32(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	40(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB77_68:                              # %if.end908
                                        #   in Loop: Header=BB77_64 Depth=2
	jmp	.LBB77_69
.LBB77_69:                              # %for.inc909
                                        #   in Loop: Header=BB77_64 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_64
.LBB77_70:                              # %for.end911
                                        #   in Loop: Header=BB77_62 Depth=1
	jmp	.LBB77_71
.LBB77_71:                              # %for.inc912
                                        #   in Loop: Header=BB77_62 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_62
.LBB77_72:                              # %for.end914
	jmp	.LBB77_73
.LBB77_73:                              # %if.end915
	movl	$0, -4(%rbp)
.LBB77_74:                              # %for.cond916
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_76 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB77_152
# %bb.75:                               # %for.body922
                                        #   in Loop: Header=BB77_74 Depth=1
	movl	$0, -8(%rbp)
.LBB77_76:                              # %for.cond923
                                        #   Parent Loop BB77_74 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB77_150
# %bb.77:                               # %for.body929
                                        #   in Loop: Header=BB77_76 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -76(%rbp)
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-44(%rbp), %eax
	cltd
	idivl	%esi
	imull	%eax, %ecx
	movl	-76(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-44(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -80(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB77_79
# %bb.78:                               # %lor.lhs.false948
                                        #   in Loop: Header=BB77_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-80(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB77_148
.LBB77_79:                              # %if.then954
                                        #   in Loop: Header=BB77_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB77_147
# %bb.80:                               # %if.then973
                                        #   in Loop: Header=BB77_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB77_82
# %bb.81:                               # %cond.true990
                                        #   in Loop: Header=BB77_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB77_83
.LBB77_82:                              # %cond.false991
                                        #   in Loop: Header=BB77_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB77_83:                              # %cond.end993
                                        #   in Loop: Header=BB77_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB77_85
# %bb.84:                               # %cond.true999
                                        #   in Loop: Header=BB77_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB77_86
.LBB77_85:                              # %cond.false1001
                                        #   in Loop: Header=BB77_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB77_86:                              # %cond.end1003
                                        #   in Loop: Header=BB77_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB77_88
# %bb.87:                               # %cond.true1030
                                        #   in Loop: Header=BB77_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB77_89
.LBB77_88:                              # %cond.false1032
                                        #   in Loop: Header=BB77_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB77_89:                              # %cond.end1034
                                        #   in Loop: Header=BB77_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB77_91
# %bb.90:                               # %cond.true1040
                                        #   in Loop: Header=BB77_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB77_92
.LBB77_91:                              # %cond.false1042
                                        #   in Loop: Header=BB77_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB77_92:                              # %cond.end1044
                                        #   in Loop: Header=BB77_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB77_94
# %bb.93:                               # %cond.true1071
                                        #   in Loop: Header=BB77_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB77_95
.LBB77_94:                              # %cond.false1073
                                        #   in Loop: Header=BB77_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB77_95:                              # %cond.end1075
                                        #   in Loop: Header=BB77_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB77_97
# %bb.96:                               # %cond.true1081
                                        #   in Loop: Header=BB77_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB77_98
.LBB77_97:                              # %cond.false1083
                                        #   in Loop: Header=BB77_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB77_98:                              # %cond.end1085
                                        #   in Loop: Header=BB77_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB77_100
# %bb.99:                               # %cond.true1112
                                        #   in Loop: Header=BB77_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB77_101
.LBB77_100:                             # %cond.false1114
                                        #   in Loop: Header=BB77_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB77_101:                             # %cond.end1116
                                        #   in Loop: Header=BB77_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB77_103
# %bb.102:                              # %cond.true1122
                                        #   in Loop: Header=BB77_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB77_104
.LBB77_103:                             # %cond.false1124
                                        #   in Loop: Header=BB77_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB77_104:                             # %cond.end1126
                                        #   in Loop: Header=BB77_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB77_106
# %bb.105:                              # %cond.true1153
                                        #   in Loop: Header=BB77_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB77_107
.LBB77_106:                             # %cond.false1155
                                        #   in Loop: Header=BB77_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB77_107:                             # %cond.end1157
                                        #   in Loop: Header=BB77_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB77_109
# %bb.108:                              # %cond.true1163
                                        #   in Loop: Header=BB77_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB77_110
.LBB77_109:                             # %cond.false1165
                                        #   in Loop: Header=BB77_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB77_110:                             # %cond.end1167
                                        #   in Loop: Header=BB77_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB77_112
# %bb.111:                              # %if.then1175
                                        #   in Loop: Header=BB77_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	jmp	.LBB77_125
.LBB77_112:                             # %if.else1190
                                        #   in Loop: Header=BB77_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB77_114
# %bb.113:                              # %cond.true1196
                                        #   in Loop: Header=BB77_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB77_115
.LBB77_114:                             # %cond.false1198
                                        #   in Loop: Header=BB77_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB77_115:                             # %cond.end1200
                                        #   in Loop: Header=BB77_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB77_117
# %bb.116:                              # %cond.true1206
                                        #   in Loop: Header=BB77_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB77_118
.LBB77_117:                             # %cond.false1208
                                        #   in Loop: Header=BB77_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB77_118:                             # %cond.end1210
                                        #   in Loop: Header=BB77_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cwtl
	movl	%eax, -24(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB77_120
# %bb.119:                              # %cond.true1232
                                        #   in Loop: Header=BB77_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	3192(%rax,%rcx,8), %rax
	jmp	.LBB77_121
.LBB77_120:                             # %cond.false1237
                                        #   in Loop: Header=BB77_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB77_121
.LBB77_121:                             # %cond.end1238
                                        #   in Loop: Header=BB77_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB77_123
# %bb.122:                              # %cond.true1249
                                        #   in Loop: Header=BB77_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	4776(%rax,%rcx,8), %rax
	jmp	.LBB77_124
.LBB77_123:                             # %cond.false1254
                                        #   in Loop: Header=BB77_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB77_124
.LBB77_124:                             # %cond.end1255
                                        #   in Loop: Header=BB77_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB77_125:                             # %if.end1264
                                        #   in Loop: Header=BB77_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB77_127
# %bb.126:                              # %cond.true1270
                                        #   in Loop: Header=BB77_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB77_128
.LBB77_127:                             # %cond.false1272
                                        #   in Loop: Header=BB77_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB77_128:                             # %cond.end1274
                                        #   in Loop: Header=BB77_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB77_130
# %bb.129:                              # %cond.true1280
                                        #   in Loop: Header=BB77_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB77_131
.LBB77_130:                             # %cond.false1282
                                        #   in Loop: Header=BB77_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB77_131:                             # %cond.end1284
                                        #   in Loop: Header=BB77_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB77_133
# %bb.132:                              # %if.then1292
                                        #   in Loop: Header=BB77_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	jmp	.LBB77_146
.LBB77_133:                             # %if.else1307
                                        #   in Loop: Header=BB77_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB77_135
# %bb.134:                              # %cond.true1313
                                        #   in Loop: Header=BB77_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB77_136
.LBB77_135:                             # %cond.false1315
                                        #   in Loop: Header=BB77_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB77_136:                             # %cond.end1317
                                        #   in Loop: Header=BB77_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB77_138
# %bb.137:                              # %cond.true1323
                                        #   in Loop: Header=BB77_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB77_139
.LBB77_138:                             # %cond.false1325
                                        #   in Loop: Header=BB77_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB77_139:                             # %cond.end1327
                                        #   in Loop: Header=BB77_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cwtl
	movl	%eax, -20(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB77_141
# %bb.140:                              # %cond.true1349
                                        #   in Loop: Header=BB77_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	3456(%rax,%rcx,8), %rax
	jmp	.LBB77_142
.LBB77_141:                             # %cond.false1355
                                        #   in Loop: Header=BB77_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB77_142
.LBB77_142:                             # %cond.end1356
                                        #   in Loop: Header=BB77_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB77_144
# %bb.143:                              # %cond.true1367
                                        #   in Loop: Header=BB77_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	5040(%rax,%rcx,8), %rax
	jmp	.LBB77_145
.LBB77_144:                             # %cond.false1373
                                        #   in Loop: Header=BB77_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB77_145
.LBB77_145:                             # %cond.end1374
                                        #   in Loop: Header=BB77_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB77_146:                             # %if.end1383
                                        #   in Loop: Header=BB77_76 Depth=2
	jmp	.LBB77_147
.LBB77_147:                             # %if.end1384
                                        #   in Loop: Header=BB77_76 Depth=2
	jmp	.LBB77_148
.LBB77_148:                             # %if.end1385
                                        #   in Loop: Header=BB77_76 Depth=2
	jmp	.LBB77_149
.LBB77_149:                             # %for.inc1386
                                        #   in Loop: Header=BB77_76 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_76
.LBB77_150:                             # %for.end1388
                                        #   in Loop: Header=BB77_74 Depth=1
	jmp	.LBB77_151
.LBB77_151:                             # %for.inc1389
                                        #   in Loop: Header=BB77_74 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_74
.LBB77_152:                             # %for.end1391
	movl	$0, -8(%rbp)
.LBB77_153:                             # %for.cond1392
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_155 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB77_160
# %bb.154:                              # %for.body1398
                                        #   in Loop: Header=BB77_153 Depth=1
	movl	$0, -4(%rbp)
.LBB77_155:                             # %for.cond1399
                                        #   Parent Loop BB77_153 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB77_158
# %bb.156:                              # %for.body1405
                                        #   in Loop: Header=BB77_155 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
# %bb.157:                              # %for.inc1412
                                        #   in Loop: Header=BB77_155 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_155
.LBB77_158:                             # %for.end1414
                                        #   in Loop: Header=BB77_153 Depth=1
	jmp	.LBB77_159
.LBB77_159:                             # %for.inc1415
                                        #   in Loop: Header=BB77_153 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_153
.LBB77_160:                             # %for.end1417
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB77_162
# %bb.161:                              # %lor.lhs.false1420
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB77_174
.LBB77_162:                             # %if.then1423
	movl	$0, -8(%rbp)
.LBB77_163:                             # %for.cond1424
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_165 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB77_173
# %bb.164:                              # %for.body1430
                                        #   in Loop: Header=BB77_163 Depth=1
	movl	$0, -4(%rbp)
.LBB77_165:                             # %for.cond1431
                                        #   Parent Loop BB77_163 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB77_171
# %bb.166:                              # %for.body1437
                                        #   in Loop: Header=BB77_165 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -60(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-48(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	imull	%eax, %ecx
	movl	-60(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-48(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB77_168
# %bb.167:                              # %cond.true1456
                                        #   in Loop: Header=BB77_165 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-56(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	jmp	.LBB77_169
.LBB77_168:                             # %cond.false1462
                                        #   in Loop: Header=BB77_165 Depth=2
	xorl	%eax, %eax
	jmp	.LBB77_169
.LBB77_169:                             # %cond.end1463
                                        #   in Loop: Header=BB77_165 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6520(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.170:                              # %for.inc1472
                                        #   in Loop: Header=BB77_165 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_165
.LBB77_171:                             # %for.end1474
                                        #   in Loop: Header=BB77_163 Depth=1
	jmp	.LBB77_172
.LBB77_172:                             # %for.inc1475
                                        #   in Loop: Header=BB77_163 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_163
.LBB77_173:                             # %for.end1477
	jmp	.LBB77_174
.LBB77_174:                             # %if.end1478
	cmpl	$302083196, -72(%rbp)   # imm = 0x12016C7C
	jne	.LBB77_176
.LBB77_175:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB77_176:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB77_175
.Lfunc_end77:
	.size	dpb_split_field.14, .Lfunc_end77-dpb_split_field.14
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function unmark_long_term_field_for_reference_by_frame_idx.15
	.type	unmark_long_term_field_for_reference_by_frame_idx.15,@function
unmark_long_term_field_for_reference_by_frame_idx.15: # @unmark_long_term_field_for_reference_by_frame_idx.15
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1138334347, -24(%rbp)  # imm = 0x43D99A8B
	movl	%edi, -12(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -16(%rbp)
	movl	%r8d, -8(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -8(%rbp)
	jge	.LBB78_2
# %bb.1:                                # %if.then
	movl	-32(%rbp), %eax
	shll	$1, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB78_2:                               # %if.end
	movl	$0, -4(%rbp)
.LBB78_3:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB78_46
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB78_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB78_44
# %bb.5:                                # %if.then5
                                        #   in Loop: Header=BB78_3 Depth=1
	cmpl	$1, -12(%rbp)
	jne	.LBB78_24
# %bb.6:                                # %if.then7
                                        #   in Loop: Header=BB78_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB78_8
# %bb.7:                                # %if.then11
                                        #   in Loop: Header=BB78_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB78_23
.LBB78_8:                               # %if.else
                                        #   in Loop: Header=BB78_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, 8(%rax)
	jne	.LBB78_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB78_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB78_22
.LBB78_10:                              # %if.else21
                                        #   in Loop: Header=BB78_3 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB78_18
# %bb.11:                               # %if.then22
                                        #   in Loop: Header=BB78_3 Depth=1
	cmpq	$0, dpb+56
	je	.LBB78_16
# %bb.12:                               # %if.then24
                                        #   in Loop: Header=BB78_3 Depth=1
	movq	dpb+56, %rax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	cmpq	(%rcx,%rdx,8), %rax
	jne	.LBB78_14
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB78_3 Depth=1
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB78_15
.LBB78_14:                              # %if.then29
                                        #   in Loop: Header=BB78_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB78_15:                              # %if.end32
                                        #   in Loop: Header=BB78_3 Depth=1
	jmp	.LBB78_17
.LBB78_16:                              # %if.else33
                                        #   in Loop: Header=BB78_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB78_17:                              # %if.end36
                                        #   in Loop: Header=BB78_3 Depth=1
	jmp	.LBB78_21
.LBB78_18:                              # %if.else37
                                        #   in Loop: Header=BB78_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %ecx
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	je	.LBB78_20
# %bb.19:                               # %if.then42
                                        #   in Loop: Header=BB78_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB78_20:                              # %if.end45
                                        #   in Loop: Header=BB78_3 Depth=1
	jmp	.LBB78_21
.LBB78_21:                              # %if.end46
                                        #   in Loop: Header=BB78_3 Depth=1
	jmp	.LBB78_22
.LBB78_22:                              # %if.end47
                                        #   in Loop: Header=BB78_3 Depth=1
	jmp	.LBB78_23
.LBB78_23:                              # %if.end48
                                        #   in Loop: Header=BB78_3 Depth=1
	jmp	.LBB78_24
.LBB78_24:                              # %if.end49
                                        #   in Loop: Header=BB78_3 Depth=1
	cmpl	$2, -12(%rbp)
	jne	.LBB78_43
# %bb.25:                               # %if.then51
                                        #   in Loop: Header=BB78_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB78_27
# %bb.26:                               # %if.then56
                                        #   in Loop: Header=BB78_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB78_42
.LBB78_27:                              # %if.else59
                                        #   in Loop: Header=BB78_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$2, 8(%rax)
	jne	.LBB78_29
# %bb.28:                               # %if.then64
                                        #   in Loop: Header=BB78_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB78_41
.LBB78_29:                              # %if.else67
                                        #   in Loop: Header=BB78_3 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB78_37
# %bb.30:                               # %if.then69
                                        #   in Loop: Header=BB78_3 Depth=1
	cmpq	$0, dpb+56
	je	.LBB78_35
# %bb.31:                               # %if.then71
                                        #   in Loop: Header=BB78_3 Depth=1
	movq	dpb+56, %rax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	cmpq	(%rcx,%rdx,8), %rax
	jne	.LBB78_33
# %bb.32:                               # %lor.lhs.false75
                                        #   in Loop: Header=BB78_3 Depth=1
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB78_34
.LBB78_33:                              # %if.then78
                                        #   in Loop: Header=BB78_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB78_34:                              # %if.end81
                                        #   in Loop: Header=BB78_3 Depth=1
	jmp	.LBB78_36
.LBB78_35:                              # %if.else82
                                        #   in Loop: Header=BB78_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB78_36:                              # %if.end85
                                        #   in Loop: Header=BB78_3 Depth=1
	jmp	.LBB78_40
.LBB78_37:                              # %if.else86
                                        #   in Loop: Header=BB78_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %ecx
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	je	.LBB78_39
# %bb.38:                               # %if.then92
                                        #   in Loop: Header=BB78_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB78_39:                              # %if.end95
                                        #   in Loop: Header=BB78_3 Depth=1
	jmp	.LBB78_40
.LBB78_40:                              # %if.end96
                                        #   in Loop: Header=BB78_3 Depth=1
	jmp	.LBB78_41
.LBB78_41:                              # %if.end97
                                        #   in Loop: Header=BB78_3 Depth=1
	jmp	.LBB78_42
.LBB78_42:                              # %if.end98
                                        #   in Loop: Header=BB78_3 Depth=1
	jmp	.LBB78_43
.LBB78_43:                              # %if.end99
                                        #   in Loop: Header=BB78_3 Depth=1
	jmp	.LBB78_44
.LBB78_44:                              # %if.end100
                                        #   in Loop: Header=BB78_3 Depth=1
	jmp	.LBB78_45
.LBB78_45:                              # %for.inc
                                        #   in Loop: Header=BB78_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_3
.LBB78_46:                              # %for.end
	cmpl	$1138334347, -24(%rbp)  # imm = 0x43D99A8B
	jne	.LBB78_48
.LBB78_47:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB78_48:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB78_47
.Lfunc_end78:
	.size	unmark_long_term_field_for_reference_by_frame_idx.15, .Lfunc_end78-unmark_long_term_field_for_reference_by_frame_idx.15
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function adaptive_memory_management.16
	.type	adaptive_memory_management.16,@function
adaptive_memory_management.16:          # @adaptive_memory_management.16
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1453773460, -20(%rbp)  # imm = 0x56A6D294
	movq	%rdi, -16(%rbp)
	movq	img, %rax
	movl	$0, 72644(%rax)
.LBB79_1:                               # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	img, %rax
	cmpq	$0, 72512(%rax)
	je	.LBB79_15
# %bb.2:                                # %while.body
                                        #   in Loop: Header=BB79_1 Depth=1
	movq	img(%rip), %rax
	movq	72512(%rax), %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	movq	%rax, %rcx
	subq	$6, %rcx
	ja	.LBB79_13
# %bb.3:                                # %while.body
                                        #   in Loop: Header=BB79_1 Depth=1
	movq	.LJTI79_0(,%rax,8), %rax
	jmpq	*%rax
.LBB79_4:                               # %sw.bb
                                        #   in Loop: Header=BB79_1 Depth=1
	movq	-8(%rbp), %rax
	cmpq	$0, 24(%rax)
	je	.LBB79_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB79_1 Depth=1
	movabsq	$.L.str.22, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB79_6:                               # %if.end
                                        #   in Loop: Header=BB79_1 Depth=1
	jmp	.LBB79_14
.LBB79_7:                               # %sw.bb2
                                        #   in Loop: Header=BB79_1 Depth=1
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rax
	movl	4(%rax), %esi
	callq	mm_unmark_short_term_for_reference
	callq	update_ref_list
	jmp	.LBB79_14
.LBB79_8:                               # %sw.bb3
                                        #   in Loop: Header=BB79_1 Depth=1
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rax
	movl	8(%rax), %esi
	callq	mm_unmark_long_term_for_reference
	callq	update_ltref_list
	jmp	.LBB79_14
.LBB79_9:                               # %sw.bb4
                                        #   in Loop: Header=BB79_1 Depth=1
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rax
	movl	4(%rax), %esi
	movq	-8(%rbp), %rax
	movl	12(%rax), %edx
	callq	mm_assign_long_term_frame_idx
	callq	update_ref_list
	callq	update_ltref_list
	jmp	.LBB79_14
.LBB79_10:                              # %sw.bb6
                                        #   in Loop: Header=BB79_1 Depth=1
	movq	-8(%rbp), %rax
	movl	16(%rax), %edi
	callq	mm_update_max_long_term_frame_idx
	callq	update_ltref_list
	jmp	.LBB79_14
.LBB79_11:                              # %sw.bb7
                                        #   in Loop: Header=BB79_1 Depth=1
	callq	mm_unmark_all_short_term_for_reference
	callq	mm_unmark_all_long_term_for_reference
	movq	img, %rax
	movl	$1, 72644(%rax)
	jmp	.LBB79_14
.LBB79_12:                              # %sw.bb9
                                        #   in Loop: Header=BB79_1 Depth=1
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rax
	movl	12(%rax), %esi
	callq	mm_mark_current_picture_long_term
	jmp	.LBB79_14
.LBB79_13:                              # %sw.default
                                        #   in Loop: Header=BB79_1 Depth=1
	movabsq	$.L.str.23, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB79_14:                              # %sw.epilog
                                        #   in Loop: Header=BB79_1 Depth=1
	movq	-8(%rbp), %rax
	movq	24(%rax), %rax
	movq	img, %rcx
	movq	%rax, 72512(%rcx)
	movq	-8(%rbp), %rdi
	callq	free
	jmp	.LBB79_1
.LBB79_15:                              # %while.end
	movq	img, %rax
	cmpl	$0, 72644(%rax)
	je	.LBB79_23
# %bb.16:                               # %if.then15
	movq	-16(%rbp), %rax
	movl	$0, 6360(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6364(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 4(%rax)
	movq	img(%rip), %rax
	movl	$0, 72460(%rax)
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	testl	%eax, %eax
	je	.LBB79_21
	jmp	.LBB79_17
.LBB79_17:                              # %if.then15
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB79_19
	jmp	.LBB79_18
.LBB79_18:                              # %if.then15
	subl	$2, %eax
	je	.LBB79_20
	jmp	.LBB79_22
.LBB79_19:                              # %sw.bb16
	movq	img, %rax
	movl	$0, 72448(%rax)
	jmp	.LBB79_22
.LBB79_20:                              # %sw.bb17
	movq	img, %rax
	movl	$0, 72452(%rax)
	jmp	.LBB79_22
.LBB79_21:                              # %sw.bb18
	movq	img, %rax
	movl	$0, 72456(%rax)
.LBB79_22:                              # %sw.epilog19
	callq	flush_dpb
.LBB79_23:                              # %if.end20
	cmpl	$1453773460, -20(%rbp)  # imm = 0x56A6D294
	jne	.LBB79_25
.LBB79_24:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB79_25:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB79_24
.Lfunc_end79:
	.size	adaptive_memory_management.16, .Lfunc_end79-adaptive_memory_management.16
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI79_0:
	.quad	.LBB79_4
	.quad	.LBB79_7
	.quad	.LBB79_8
	.quad	.LBB79_9
	.quad	.LBB79_10
	.quad	.LBB79_11
	.quad	.LBB79_12
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function mm_assign_long_term_frame_idx.17
	.type	mm_assign_long_term_frame_idx.17,@function
mm_assign_long_term_frame_idx.17:       # @mm_assign_long_term_frame_idx.17
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1930610956, -28(%rbp)  # imm = 0x7312C90C
	movq	%rdi, -24(%rbp)
	movl	%esi, -32(%rbp)
	movl	%edx, -16(%rbp)
	movq	-24(%rbp), %rdi
	movl	-32(%rbp), %esi
	callq	get_pic_num_x
	movl	%eax, -8(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB80_2
# %bb.1:                                # %if.then
	movl	-16(%rbp), %edi
	callq	unmark_long_term_frame_for_reference_by_frame_idx
	jmp	.LBB80_18
.LBB80_2:                               # %if.else
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB80_3:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB80_14
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB80_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB80_8
# %bb.5:                                # %if.then3
                                        #   in Loop: Header=BB80_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB80_7
# %bb.6:                                # %if.then7
	movl	$1, -12(%rbp)
	jmp	.LBB80_15
.LBB80_7:                               # %if.end
                                        #   in Loop: Header=BB80_3 Depth=1
	jmp	.LBB80_8
.LBB80_8:                               # %if.end8
                                        #   in Loop: Header=BB80_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB80_12
# %bb.9:                                # %if.then14
                                        #   in Loop: Header=BB80_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB80_11
# %bb.10:                               # %if.then19
	movl	$2, -12(%rbp)
	jmp	.LBB80_15
.LBB80_11:                              # %if.end20
                                        #   in Loop: Header=BB80_3 Depth=1
	jmp	.LBB80_12
.LBB80_12:                              # %if.end21
                                        #   in Loop: Header=BB80_3 Depth=1
	jmp	.LBB80_13
.LBB80_13:                              # %for.inc
                                        #   in Loop: Header=BB80_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_3
.LBB80_14:                              # %for.end.loopexit
	jmp	.LBB80_15
.LBB80_15:                              # %for.end
	cmpl	$0, -12(%rbp)
	jne	.LBB80_17
# %bb.16:                               # %if.then23
	movabsq	$.L.str.24, %rdi
	movl	$200, %esi
	callq	error
.LBB80_17:                              # %if.end24
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-8(%rbp), %r8d
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	callq	unmark_long_term_field_for_reference_by_frame_idx
.LBB80_18:                              # %if.end25
	movq	-24(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-8(%rbp), %edx
	callq	mark_pic_long_term
	cmpl	$1930610956, -28(%rbp)  # imm = 0x7312C90C
	jne	.LBB80_20
.LBB80_19:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB80_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB80_19
.Lfunc_end80:
	.size	mm_assign_long_term_frame_idx.17, .Lfunc_end80-mm_assign_long_term_frame_idx.17
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_frame_num_desc.18
	.type	compare_fs_by_frame_num_desc.18,@function
compare_fs_by_frame_num_desc.18:        # @compare_fs_by_frame_num_desc.18
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1819306623, -16(%rbp)  # imm = 0x6C706A7F
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	24(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	24(%rcx), %eax
	jge	.LBB81_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB81_5
.LBB81_2:                               # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	24(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	24(%rcx), %eax
	jle	.LBB81_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB81_5
.LBB81_4:                               # %if.else
	movl	$0, -12(%rbp)
.LBB81_5:                               # %return
	movl	-12(%rbp), %ebx
	cmpl	$1819306623, -16(%rbp)  # imm = 0x6C706A7F
	jne	.LBB81_7
.LBB81_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB81_7:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB81_6
.Lfunc_end81:
	.size	compare_fs_by_frame_num_desc.18, .Lfunc_end81-compare_fs_by_frame_num_desc.18
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_pic_num_desc.19
	.type	compare_pic_by_pic_num_desc.19,@function
compare_pic_by_pic_num_desc.19:         # @compare_pic_by_pic_num_desc.19
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$245508511, -16(%rbp)   # imm = 0xEA2299F
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	6364(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6364(%rcx), %eax
	jge	.LBB82_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB82_5
.LBB82_2:                               # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	6364(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6364(%rcx), %eax
	jle	.LBB82_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB82_5
.LBB82_4:                               # %if.else
	movl	$0, -12(%rbp)
.LBB82_5:                               # %return
	movl	-12(%rbp), %ebx
	cmpl	$245508511, -16(%rbp)   # imm = 0xEA2299F
	jne	.LBB82_7
.LBB82_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB82_7:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB82_6
.Lfunc_end82:
	.size	compare_pic_by_pic_num_desc.19, .Lfunc_end82-compare_pic_by_pic_num_desc.19
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function remove_frame_from_dpb.20
	.type	remove_frame_from_dpb.20,@function
remove_frame_from_dpb.20:               # @remove_frame_from_dpb.20
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$479039442, -20(%rbp)   # imm = 0x1C8D8FD2
	movl	%edi, -16(%rbp)
	movq	dpb(%rip), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB83_6
# %bb.1:                                # %entry
	movq	.LJTI83_0(,%rax,8), %rax
	jmpq	*%rax
.LBB83_2:                               # %sw.bb
	movq	-8(%rbp), %rax
	movq	40(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	56(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 40(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 56(%rax)
	jmp	.LBB83_7
.LBB83_3:                               # %sw.bb4
	movq	-8(%rbp), %rax
	movq	56(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 56(%rax)
	jmp	.LBB83_7
.LBB83_4:                               # %sw.bb7
	movq	-8(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 48(%rax)
	jmp	.LBB83_7
.LBB83_5:                               # %sw.bb10
	jmp	.LBB83_7
.LBB83_6:                               # %sw.default
	movabsq	$.L.str.29, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB83_7:                               # %sw.epilog
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 4(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 12(%rax)
	movq	dpb, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -32(%rbp)
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB83_8:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movl	dpb+28, %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jae	.LBB83_11
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB83_8 Depth=1
	movq	dpb, %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movl	%ecx, %ecx
	movq	(%rax,%rcx,8), %rax
	movq	dpb, %rcx
	movl	-12(%rbp), %edx
	movq	%rax, (%rcx,%rdx,8)
# %bb.10:                               # %for.inc
                                        #   in Loop: Header=BB83_8 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB83_8
.LBB83_11:                              # %for.end
	movq	-32(%rbp), %rax
	movq	dpb, %rcx
	movl	dpb+28, %edx
	subl	$1, %edx
	movl	%edx, %edx
	movq	%rax, (%rcx,%rdx,8)
	movl	dpb+28, %eax
	addl	$-1, %eax
	movl	%eax, dpb+28
	cmpl	$479039442, -20(%rbp)   # imm = 0x1C8D8FD2
	jne	.LBB83_13
.LBB83_12:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB83_13:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB83_12
.Lfunc_end83:
	.size	remove_frame_from_dpb.20, .Lfunc_end83-remove_frame_from_dpb.20
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI83_0:
	.quad	.LBB83_5
	.quad	.LBB83_4
	.quad	.LBB83_3
	.quad	.LBB83_2
                                        # -- End function
	.text
	.globl	alloc_storable_picture.21 # -- Begin function alloc_storable_picture.21
	.p2align	4, 0x90
	.type	alloc_storable_picture.21,@function
alloc_storable_picture.21:              # @alloc_storable_picture.21
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1631023676, -40(%rbp)  # imm = 0x6137723C
	movl	%edi, -36(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -32(%rbp)
	movl	$1, %edi
	movl	$6584, %esi             # imm = 0x19B8
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -16(%rbp)
	cmpq	-16(%rbp), %rcx
	jne	.LBB84_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.7, %rdi
	callq	no_mem_exit
.LBB84_2:                               # %if.end
	movq	-16(%rbp), %rdi
	addq	$6424, %rdi             # imm = 0x1918
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	callq	get_mem2Dpel
	movq	-16(%rbp), %rax
	movq	$0, 6432(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6448(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6464(%rax)
	movq	input, %rax
	cmpl	$0, 1284(%rax)
	jne	.LBB84_5
# %bb.3:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 1288(%rax)
	jne	.LBB84_5
# %bb.4:                                # %lor.lhs.false3
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB84_6
.LBB84_5:                               # %if.then5
	movq	-16(%rbp), %rax
	movq	$0, 6440(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6456(%rax)
.LBB84_6:                               # %if.end6
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB84_8
# %bb.7:                                # %if.then8
	movq	-16(%rbp), %rdi
	addq	$6464, %rdi             # imm = 0x1940
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	$2, %esi
	callq	get_mem3Dpel
.LBB84_8:                               # %if.end11
	movq	img, %rax
	movl	72484(%rax), %edi
	movl	$4, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	-16(%rbp), %rdx
	movq	%rax, 6472(%rdx)
	movq	-16(%rbp), %rax
	cmpq	6472(%rax), %rcx
	jne	.LBB84_10
# %bb.9:                                # %if.then16
	movabsq	$.L.str.8, %rdi
	callq	no_mem_exit
.LBB84_10:                              # %if.end17
	movq	-16(%rbp), %rdi
	addq	$6480, %rdi             # imm = 0x1950
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-16(%rbp), %rdi
	addq	$6488, %rdi             # imm = 0x1958
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	$6, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-16(%rbp), %rdi
	addq	$6496, %rdi             # imm = 0x1960
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	$6, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-16(%rbp), %rdi
	addq	$6504, %rdi             # imm = 0x1968
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-16(%rbp), %rdi
	addq	$6512, %rdi             # imm = 0x1970
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-20(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-16(%rbp), %rdi
	addq	$6520, %rdi             # imm = 0x1978
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-20(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-16(%rbp), %rax
	movl	$0, 6364(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6360(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6372(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6368(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6380(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6376(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6388(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6384(%rax)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6392(%rcx)
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6396(%rcx)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6400(%rcx)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6404(%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 6528(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6536(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6544(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6412(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6416(%rax)
	movq	-16(%rbp), %rbx
	cmpl	$1631023676, -40(%rbp)  # imm = 0x6137723C
	jne	.LBB84_12
.LBB84_11:
	movq	%rbx, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB84_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB84_11
.Lfunc_end84:
	.size	alloc_storable_picture.21, .Lfunc_end84-alloc_storable_picture.21
	.cfi_endproc
                                        # -- End function
	.globl	gen_field_ref_ids.22    # -- Begin function gen_field_ref_ids.22
	.p2align	4, 0x90
	.type	gen_field_ref_ids.22,@function
gen_field_ref_ids.22:                   # @gen_field_ref_ids.22
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$733120001, -28(%rbp)   # imm = 0x2BB28601
	movq	%rdi, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB85_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_3 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB85_14
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB85_1 Depth=1
	movl	$0, -8(%rbp)
.LBB85_3:                               # %for.cond1
                                        #   Parent Loop BB85_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB85_12
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB85_3 Depth=2
	movq	-16(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB85_6
# %bb.5:                                # %cond.true
                                        #   in Loop: Header=BB85_3 Depth=2
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB85_7
.LBB85_6:                               # %cond.false
                                        #   in Loop: Header=BB85_3 Depth=2
	xorl	%eax, %eax
	jmp	.LBB85_7
.LBB85_7:                               # %cond.end
                                        #   in Loop: Header=BB85_3 Depth=2
	movq	-16(%rbp), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB85_9
# %bb.8:                                # %cond.true27
                                        #   in Loop: Header=BB85_3 Depth=2
	movq	-16(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB85_10
.LBB85_9:                               # %cond.false32
                                        #   in Loop: Header=BB85_3 Depth=2
	xorl	%eax, %eax
	jmp	.LBB85_10
.LBB85_10:                              # %cond.end33
                                        #   in Loop: Header=BB85_3 Depth=2
	movq	-16(%rbp), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB85_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_3
.LBB85_12:                              # %for.end
                                        #   in Loop: Header=BB85_1 Depth=1
	jmp	.LBB85_13
.LBB85_13:                              # %for.inc45
                                        #   in Loop: Header=BB85_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_1
.LBB85_14:                              # %for.end47
	cmpl	$733120001, -28(%rbp)   # imm = 0x2BB28601
	jne	.LBB85_16
.LBB85_15:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB85_16:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB85_15
.Lfunc_end85:
	.size	gen_field_ref_ids.22, .Lfunc_end85-gen_field_ref_ids.22
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_pic_num_desc.23
	.type	compare_pic_by_pic_num_desc.23,@function
compare_pic_by_pic_num_desc.23:         # @compare_pic_by_pic_num_desc.23
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$2091111109, -16(%rbp)  # imm = 0x7CA3D2C5
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	6364(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6364(%rcx), %eax
	jge	.LBB86_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB86_5
.LBB86_2:                               # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	6364(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6364(%rcx), %eax
	jle	.LBB86_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB86_5
.LBB86_4:                               # %if.else
	movl	$0, -12(%rbp)
.LBB86_5:                               # %return
	movl	-12(%rbp), %ebx
	cmpl	$2091111109, -16(%rbp)  # imm = 0x7CA3D2C5
	jne	.LBB86_7
.LBB86_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB86_7:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB86_6
.Lfunc_end86:
	.size	compare_pic_by_pic_num_desc.23, .Lfunc_end86-compare_pic_by_pic_num_desc.23
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_poc_asc.24
	.type	compare_pic_by_poc_asc.24,@function
compare_pic_by_poc_asc.24:              # @compare_pic_by_poc_asc.24
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1938539285, -16(%rbp)  # imm = 0x738BC315
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB87_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB87_5
.LBB87_2:                               # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB87_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB87_5
.LBB87_4:                               # %if.else
	movl	$0, -12(%rbp)
.LBB87_5:                               # %return
	movl	-12(%rbp), %ebx
	cmpl	$1938539285, -16(%rbp)  # imm = 0x738BC315
	jne	.LBB87_7
.LBB87_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB87_7:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB87_6
.Lfunc_end87:
	.size	compare_pic_by_poc_asc.24, .Lfunc_end87-compare_pic_by_poc_asc.24
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function is_long_term_reference.25
	.type	is_long_term_reference.25,@function
is_long_term_reference.25:              # @is_long_term_reference.25
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$55105070, -24(%rbp)    # imm = 0x348D62E
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$3, (%rax)
	jne	.LBB88_5
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB88_4
# %bb.2:                                # %land.lhs.true
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB88_4
# %bb.3:                                # %if.then3
	movl	$1, -20(%rbp)
	jmp	.LBB88_18
.LBB88_4:                               # %if.end
	jmp	.LBB88_5
.LBB88_5:                               # %if.end4
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	jne	.LBB88_17
# %bb.6:                                # %if.then6
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB88_11
# %bb.7:                                # %if.then9
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB88_10
# %bb.8:                                # %land.lhs.true12
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB88_10
# %bb.9:                                # %if.then16
	movl	$1, -20(%rbp)
	jmp	.LBB88_18
.LBB88_10:                              # %if.end17
	jmp	.LBB88_11
.LBB88_11:                              # %if.end18
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB88_16
# %bb.12:                               # %if.then22
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB88_15
# %bb.13:                               # %land.lhs.true25
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB88_15
# %bb.14:                               # %if.then29
	movl	$1, -20(%rbp)
	jmp	.LBB88_18
.LBB88_15:                              # %if.end30
	jmp	.LBB88_16
.LBB88_16:                              # %if.end31
	jmp	.LBB88_17
.LBB88_17:                              # %if.end32
	movl	$0, -20(%rbp)
.LBB88_18:                              # %return
	movl	-20(%rbp), %ebx
	cmpl	$55105070, -24(%rbp)    # imm = 0x348D62E
	jne	.LBB88_20
.LBB88_19:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB88_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB88_19
.Lfunc_end88:
	.size	is_long_term_reference.25, .Lfunc_end88-is_long_term_reference.25
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function remove_frame_from_dpb.26
	.type	remove_frame_from_dpb.26,@function
remove_frame_from_dpb.26:               # @remove_frame_from_dpb.26
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$2082884966, -20(%rbp)  # imm = 0x7C264D66
	movl	%edi, -16(%rbp)
	movq	dpb(%rip), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB89_6
# %bb.1:                                # %entry
	movq	.LJTI89_0(,%rax,8), %rax
	jmpq	*%rax
.LBB89_2:                               # %sw.bb
	movq	-8(%rbp), %rax
	movq	40(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	56(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 40(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 56(%rax)
	jmp	.LBB89_7
.LBB89_3:                               # %sw.bb4
	movq	-8(%rbp), %rax
	movq	56(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 56(%rax)
	jmp	.LBB89_7
.LBB89_4:                               # %sw.bb7
	movq	-8(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 48(%rax)
	jmp	.LBB89_7
.LBB89_5:                               # %sw.bb10
	jmp	.LBB89_7
.LBB89_6:                               # %sw.default
	movabsq	$.L.str.29, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB89_7:                               # %sw.epilog
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 4(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 12(%rax)
	movq	dpb, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -32(%rbp)
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB89_8:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movl	dpb+28, %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jae	.LBB89_11
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB89_8 Depth=1
	movq	dpb, %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movl	%ecx, %ecx
	movq	(%rax,%rcx,8), %rax
	movq	dpb, %rcx
	movl	-12(%rbp), %edx
	movq	%rax, (%rcx,%rdx,8)
# %bb.10:                               # %for.inc
                                        #   in Loop: Header=BB89_8 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB89_8
.LBB89_11:                              # %for.end
	movq	-32(%rbp), %rax
	movq	dpb, %rcx
	movl	dpb+28, %edx
	subl	$1, %edx
	movl	%edx, %edx
	movq	%rax, (%rcx,%rdx,8)
	movl	dpb+28, %eax
	addl	$-1, %eax
	movl	%eax, dpb+28
	cmpl	$2082884966, -20(%rbp)  # imm = 0x7C264D66
	jne	.LBB89_13
.LBB89_12:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB89_13:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB89_12
.Lfunc_end89:
	.size	remove_frame_from_dpb.26, .Lfunc_end89-remove_frame_from_dpb.26
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI89_0:
	.quad	.LBB89_5
	.quad	.LBB89_4
	.quad	.LBB89_3
	.quad	.LBB89_2
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function compare_fs_by_frame_num_desc.27
	.type	compare_fs_by_frame_num_desc.27,@function
compare_fs_by_frame_num_desc.27:        # @compare_fs_by_frame_num_desc.27
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$897493786, -16(%rbp)   # imm = 0x357EAB1A
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	24(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	24(%rcx), %eax
	jge	.LBB90_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB90_5
.LBB90_2:                               # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	24(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	24(%rcx), %eax
	jle	.LBB90_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB90_5
.LBB90_4:                               # %if.else
	movl	$0, -12(%rbp)
.LBB90_5:                               # %return
	movl	-12(%rbp), %ebx
	cmpl	$897493786, -16(%rbp)   # imm = 0x357EAB1A
	jne	.LBB90_7
.LBB90_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB90_7:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB90_6
.Lfunc_end90:
	.size	compare_fs_by_frame_num_desc.27, .Lfunc_end90-compare_fs_by_frame_num_desc.27
	.cfi_endproc
                                        # -- End function
	.globl	alloc_ref_pic_list_reordering_buffer.28 # -- Begin function alloc_ref_pic_list_reordering_buffer.28
	.p2align	4, 0x90
	.type	alloc_ref_pic_list_reordering_buffer.28,@function
alloc_ref_pic_list_reordering_buffer.28: # @alloc_ref_pic_list_reordering_buffer.28
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$483145194, -20(%rbp)   # imm = 0x1CCC35EA
	movq	%rdi, -16(%rbp)
	movq	img, %rax
	movl	72000(%rax), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB91_9
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$4, 24(%rax)
	je	.LBB91_9
# %bb.2:                                # %if.then
	movslq	-4(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	-16(%rbp), %rcx
	movq	%rax, 64(%rcx)
	cmpq	$0, %rax
	jne	.LBB91_4
# %bb.3:                                # %if.then5
	movabsq	$.L.str.15, %rdi
	callq	no_mem_exit
.LBB91_4:                               # %if.end
	movslq	-4(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	-16(%rbp), %rcx
	movq	%rax, 72(%rcx)
	cmpq	$0, %rax
	jne	.LBB91_6
# %bb.5:                                # %if.then10
	movabsq	$.L.str.16, %rdi
	callq	no_mem_exit
.LBB91_6:                               # %if.end11
	movslq	-4(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	-16(%rbp), %rcx
	movq	%rax, 80(%rcx)
	cmpq	$0, %rax
	jne	.LBB91_8
# %bb.7:                                # %if.then16
	movabsq	$.L.str.17, %rdi
	callq	no_mem_exit
.LBB91_8:                               # %if.end17
	jmp	.LBB91_10
.LBB91_9:                               # %if.else
	movq	-16(%rbp), %rax
	movq	$0, 64(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 72(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 80(%rax)
.LBB91_10:                              # %if.end21
	movq	img, %rax
	movl	72004(%rax), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB91_18
# %bb.11:                               # %if.then26
	movslq	-4(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	-16(%rbp), %rcx
	movq	%rax, 96(%rcx)
	cmpq	$0, %rax
	jne	.LBB91_13
# %bb.12:                               # %if.then31
	movabsq	$.L.str.18, %rdi
	callq	no_mem_exit
.LBB91_13:                              # %if.end32
	movslq	-4(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	-16(%rbp), %rcx
	movq	%rax, 104(%rcx)
	cmpq	$0, %rax
	jne	.LBB91_15
# %bb.14:                               # %if.then37
	movabsq	$.L.str.19, %rdi
	callq	no_mem_exit
.LBB91_15:                              # %if.end38
	movslq	-4(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	-16(%rbp), %rcx
	movq	%rax, 112(%rcx)
	cmpq	$0, %rax
	jne	.LBB91_17
# %bb.16:                               # %if.then43
	movabsq	$.L.str.20, %rdi
	callq	no_mem_exit
.LBB91_17:                              # %if.end44
	jmp	.LBB91_19
.LBB91_18:                              # %if.else45
	movq	-16(%rbp), %rax
	movq	$0, 96(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 104(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 112(%rax)
.LBB91_19:                              # %if.end49
	cmpl	$483145194, -20(%rbp)   # imm = 0x1CCC35EA
	jne	.LBB91_21
.LBB91_20:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB91_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB91_20
.Lfunc_end91:
	.size	alloc_ref_pic_list_reordering_buffer.28, .Lfunc_end91-alloc_ref_pic_list_reordering_buffer.28
	.cfi_endproc
                                        # -- End function
	.globl	gen_field_ref_ids.29    # -- Begin function gen_field_ref_ids.29
	.p2align	4, 0x90
	.type	gen_field_ref_ids.29,@function
gen_field_ref_ids.29:                   # @gen_field_ref_ids.29
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1389760319, -28(%rbp)  # imm = 0x52D60F3F
	movq	%rdi, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB92_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_3 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB92_14
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB92_1 Depth=1
	movl	$0, -4(%rbp)
.LBB92_3:                               # %for.cond1
                                        #   Parent Loop BB92_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB92_12
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB92_3 Depth=2
	movq	-16(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB92_6
# %bb.5:                                # %cond.true
                                        #   in Loop: Header=BB92_3 Depth=2
	movq	-16(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB92_7
.LBB92_6:                               # %cond.false
                                        #   in Loop: Header=BB92_3 Depth=2
	xorl	%eax, %eax
	jmp	.LBB92_7
.LBB92_7:                               # %cond.end
                                        #   in Loop: Header=BB92_3 Depth=2
	movq	-16(%rbp), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB92_9
# %bb.8:                                # %cond.true27
                                        #   in Loop: Header=BB92_3 Depth=2
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB92_10
.LBB92_9:                               # %cond.false32
                                        #   in Loop: Header=BB92_3 Depth=2
	xorl	%eax, %eax
	jmp	.LBB92_10
.LBB92_10:                              # %cond.end33
                                        #   in Loop: Header=BB92_3 Depth=2
	movq	-16(%rbp), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB92_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB92_3
.LBB92_12:                              # %for.end
                                        #   in Loop: Header=BB92_1 Depth=1
	jmp	.LBB92_13
.LBB92_13:                              # %for.inc45
                                        #   in Loop: Header=BB92_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB92_1
.LBB92_14:                              # %for.end47
	cmpl	$1389760319, -28(%rbp)  # imm = 0x52D60F3F
	jne	.LBB92_16
.LBB92_15:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB92_16:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB92_15
.Lfunc_end92:
	.size	gen_field_ref_ids.29, .Lfunc_end92-gen_field_ref_ids.29
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function insert_picture_in_dpb.30
	.type	insert_picture_in_dpb.30,@function
insert_picture_in_dpb.30:               # @insert_picture_in_dpb.30
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$2138214793, -20(%rbp)  # imm = 0x7F729189
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB93_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rdi
	callq	UnifiedOneForthPix
.LBB93_2:                               # %if.end
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	testl	%eax, %eax
	je	.LBB93_5
	jmp	.LBB93_3
.LBB93_3:                               # %if.end
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB93_10
	jmp	.LBB93_4
.LBB93_4:                               # %if.end
	subl	$2, %eax
	je	.LBB93_18
	jmp	.LBB93_26
.LBB93_5:                               # %sw.bb
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movq	-8(%rbp), %rax
	movl	$3, (%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB93_9
# %bb.6:                                # %if.then3
	movq	-8(%rbp), %rax
	movl	$3, 4(%rax)
	movq	-8(%rbp), %rax
	movl	$3, 12(%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB93_8
# %bb.7:                                # %if.then5
	movq	-8(%rbp), %rax
	movl	$3, 8(%rax)
.LBB93_8:                               # %if.end7
	jmp	.LBB93_9
.LBB93_9:                               # %if.end8
	movq	-8(%rbp), %rdi
	callq	dpb_split_field
	jmp	.LBB93_26
.LBB93_10:                              # %sw.bb9
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-8(%rbp), %rax
	movl	(%rax), %ecx
	orl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB93_14
# %bb.11:                               # %if.then13
	movq	-8(%rbp), %rax
	movl	4(%rax), %ecx
	orl	$1, %ecx
	movl	%ecx, 4(%rax)
	movq	-8(%rbp), %rax
	movl	12(%rax), %ecx
	orl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB93_13
# %bb.12:                               # %if.then20
	movq	-8(%rbp), %rax
	movl	8(%rax), %ecx
	orl	$1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movl	6372(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 28(%rcx)
.LBB93_13:                              # %if.end24
	jmp	.LBB93_14
.LBB93_14:                              # %if.end25
	movq	-8(%rbp), %rax
	cmpl	$3, (%rax)
	jne	.LBB93_16
# %bb.15:                               # %if.then27
	movq	-8(%rbp), %rdi
	callq	dpb_combine_field
	jmp	.LBB93_17
.LBB93_16:                              # %if.else
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 36(%rcx)
	movq	-16(%rbp), %rdi
	callq	gen_field_ref_ids
.LBB93_17:                              # %if.end29
	jmp	.LBB93_26
.LBB93_18:                              # %sw.bb30
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 56(%rcx)
	movq	-8(%rbp), %rax
	movl	(%rax), %ecx
	orl	$2, %ecx
	movl	%ecx, (%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB93_22
# %bb.19:                               # %if.then35
	movq	-8(%rbp), %rax
	movl	4(%rax), %ecx
	orl	$2, %ecx
	movl	%ecx, 4(%rax)
	movq	-8(%rbp), %rax
	movl	12(%rax), %ecx
	orl	$2, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB93_21
# %bb.20:                               # %if.then42
	movq	-8(%rbp), %rax
	movl	8(%rax), %ecx
	orl	$2, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movl	6372(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 28(%rcx)
.LBB93_21:                              # %if.end47
	jmp	.LBB93_22
.LBB93_22:                              # %if.end48
	movq	-8(%rbp), %rax
	cmpl	$3, (%rax)
	jne	.LBB93_24
# %bb.23:                               # %if.then51
	movq	-8(%rbp), %rdi
	callq	dpb_combine_field
	jmp	.LBB93_25
.LBB93_24:                              # %if.else52
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 36(%rcx)
	movq	-16(%rbp), %rdi
	callq	gen_field_ref_ids
.LBB93_25:                              # %if.end55
	jmp	.LBB93_26
.LBB93_26:                              # %sw.epilog
	movq	-16(%rbp), %rax
	movl	6364(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	6384(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 32(%rcx)
	cmpl	$2138214793, -20(%rbp)  # imm = 0x7F729189
	jne	.LBB93_28
.LBB93_27:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB93_28:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB93_27
.Lfunc_end93:
	.size	insert_picture_in_dpb.30, .Lfunc_end93-insert_picture_in_dpb.30
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_pic_num_desc.31
	.type	compare_pic_by_pic_num_desc.31,@function
compare_pic_by_pic_num_desc.31:         # @compare_pic_by_pic_num_desc.31
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1800781306, -16(%rbp)  # imm = 0x6B55BDFA
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	6364(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6364(%rcx), %eax
	jge	.LBB94_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB94_5
.LBB94_2:                               # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	6364(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6364(%rcx), %eax
	jle	.LBB94_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB94_5
.LBB94_4:                               # %if.else
	movl	$0, -12(%rbp)
.LBB94_5:                               # %return
	movl	-12(%rbp), %ebx
	cmpl	$1800781306, -16(%rbp)  # imm = 0x6B55BDFA
	jne	.LBB94_7
.LBB94_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB94_7:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB94_6
.Lfunc_end94:
	.size	compare_pic_by_pic_num_desc.31, .Lfunc_end94-compare_pic_by_pic_num_desc.31
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_unmark_short_term_for_reference.32
	.type	mm_unmark_short_term_for_reference.32,@function
mm_unmark_short_term_for_reference.32:  # @mm_unmark_short_term_for_reference.32
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$811832522, -12(%rbp)   # imm = 0x306394CA
	movq	%rdi, -24(%rbp)
	movl	%esi, -16(%rbp)
	movq	-24(%rbp), %rdi
	movl	-16(%rbp), %esi
	callq	get_pic_num_x
	movl	%eax, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB95_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB95_26
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB95_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB95_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB95_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB95_8
# %bb.4:                                # %land.lhs.true
                                        #   in Loop: Header=BB95_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB95_8
# %bb.5:                                # %if.then6
                                        #   in Loop: Header=BB95_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB95_7
# %bb.6:                                # %if.then10
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_reference
	jmp	.LBB95_27
.LBB95_7:                               # %if.end
                                        #   in Loop: Header=BB95_1 Depth=1
	jmp	.LBB95_8
.LBB95_8:                               # %if.end13
                                        #   in Loop: Header=BB95_1 Depth=1
	jmp	.LBB95_24
.LBB95_9:                               # %if.else
                                        #   in Loop: Header=BB95_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB95_16
# %bb.10:                               # %land.lhs.true17
                                        #   in Loop: Header=BB95_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB95_16
# %bb.11:                               # %if.then23
                                        #   in Loop: Header=BB95_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB95_15
# %bb.12:                               # %if.then28
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$2, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB95_14
# %bb.13:                               # %if.then39
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
.LBB95_14:                              # %if.end44
	jmp	.LBB95_27
.LBB95_15:                              # %if.end45
                                        #   in Loop: Header=BB95_1 Depth=1
	jmp	.LBB95_16
.LBB95_16:                              # %if.end46
                                        #   in Loop: Header=BB95_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB95_23
# %bb.17:                               # %land.lhs.true52
                                        #   in Loop: Header=BB95_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	jne	.LBB95_23
# %bb.18:                               # %if.then58
                                        #   in Loop: Header=BB95_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB95_22
# %bb.19:                               # %if.then63
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB95_21
# %bb.20:                               # %if.then76
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
.LBB95_21:                              # %if.end81
	jmp	.LBB95_27
.LBB95_22:                              # %if.end82
                                        #   in Loop: Header=BB95_1 Depth=1
	jmp	.LBB95_23
.LBB95_23:                              # %if.end83
                                        #   in Loop: Header=BB95_1 Depth=1
	jmp	.LBB95_24
.LBB95_24:                              # %if.end84
                                        #   in Loop: Header=BB95_1 Depth=1
	jmp	.LBB95_25
.LBB95_25:                              # %for.inc
                                        #   in Loop: Header=BB95_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB95_1
.LBB95_26:                              # %for.end.loopexit
	jmp	.LBB95_27
.LBB95_27:                              # %for.end
	cmpl	$811832522, -12(%rbp)   # imm = 0x306394CA
	jne	.LBB95_29
.LBB95_28:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB95_29:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB95_28
.Lfunc_end95:
	.size	mm_unmark_short_term_for_reference.32, .Lfunc_end95-mm_unmark_short_term_for_reference.32
	.cfi_endproc
                                        # -- End function
	.globl	update_ref_list.33      # -- Begin function update_ref_list.33
	.p2align	4, 0x90
	.type	update_ref_list.33,@function
update_ref_list.33:                     # @update_ref_list.33
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$849779830, -12(%rbp)   # imm = 0x32A69C76
	movl	$0, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB96_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB96_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB96_1 Depth=1
	movq	dpb, %rax
	movl	-8(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	is_short_term_reference
	cmpl	$0, %eax
	je	.LBB96_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB96_1 Depth=1
	movq	dpb, %rax
	movl	-8(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -4(%rbp)
	movl	%edx, %edx
	movq	%rax, (%rcx,%rdx,8)
.LBB96_4:                               # %if.end
                                        #   in Loop: Header=BB96_1 Depth=1
	jmp	.LBB96_5
.LBB96_5:                               # %for.inc
                                        #   in Loop: Header=BB96_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB96_1
.LBB96_6:                               # %for.end
	movl	-4(%rbp), %eax
	movl	%eax, dpb+32
.LBB96_7:                               # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+24, %eax
	jae	.LBB96_9
# %bb.8:                                # %while.body
                                        #   in Loop: Header=BB96_7 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, -4(%rbp)
	movl	%ecx, %ecx
	movq	$0, (%rax,%rcx,8)
	jmp	.LBB96_7
.LBB96_9:                               # %while.end
	cmpl	$849779830, -12(%rbp)   # imm = 0x32A69C76
	jne	.LBB96_11
.LBB96_10:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB96_11:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB96_10
.Lfunc_end96:
	.size	update_ref_list.33, .Lfunc_end96-update_ref_list.33
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_frame_num_desc.34
	.type	compare_fs_by_frame_num_desc.34,@function
compare_fs_by_frame_num_desc.34:        # @compare_fs_by_frame_num_desc.34
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$330797725, -16(%rbp)   # imm = 0x13B7929D
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	24(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	24(%rcx), %eax
	jge	.LBB97_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB97_5
.LBB97_2:                               # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	24(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	24(%rcx), %eax
	jle	.LBB97_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB97_5
.LBB97_4:                               # %if.else
	movl	$0, -12(%rbp)
.LBB97_5:                               # %return
	movl	-12(%rbp), %ebx
	cmpl	$330797725, -16(%rbp)   # imm = 0x13B7929D
	jne	.LBB97_7
.LBB97_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB97_7:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB97_6
.Lfunc_end97:
	.size	compare_fs_by_frame_num_desc.34, .Lfunc_end97-compare_fs_by_frame_num_desc.34
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_poc_desc.35
	.type	compare_fs_by_poc_desc.35,@function
compare_fs_by_poc_desc.35:              # @compare_fs_by_poc_desc.35
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1796837758, -16(%rbp)  # imm = 0x6B19917E
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB98_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB98_5
.LBB98_2:                               # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jle	.LBB98_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB98_5
.LBB98_4:                               # %if.else
	movl	$0, -12(%rbp)
.LBB98_5:                               # %return
	movl	-12(%rbp), %ebx
	cmpl	$1796837758, -16(%rbp)  # imm = 0x6B19917E
	jne	.LBB98_7
.LBB98_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB98_7:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB98_6
.Lfunc_end98:
	.size	compare_fs_by_poc_desc.35, .Lfunc_end98-compare_fs_by_poc_desc.35
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_lt_pic_idx_asc.36
	.type	compare_fs_by_lt_pic_idx_asc.36,@function
compare_fs_by_lt_pic_idx_asc.36:        # @compare_fs_by_lt_pic_idx_asc.36
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1338644108, -16(%rbp)  # imm = 0x4FCA168C
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	28(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	28(%rcx), %eax
	jge	.LBB99_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB99_5
.LBB99_2:                               # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	28(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	28(%rcx), %eax
	jle	.LBB99_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB99_5
.LBB99_4:                               # %if.else
	movl	$0, -12(%rbp)
.LBB99_5:                               # %return
	movl	-12(%rbp), %ebx
	cmpl	$1338644108, -16(%rbp)  # imm = 0x4FCA168C
	jne	.LBB99_7
.LBB99_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB99_7:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB99_6
.Lfunc_end99:
	.size	compare_fs_by_lt_pic_idx_asc.36, .Lfunc_end99-compare_fs_by_lt_pic_idx_asc.36
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_long_term_pic.37
	.type	get_long_term_pic.37,@function
get_long_term_pic.37:                   # @get_long_term_pic.37
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1463762928, -28(%rbp)  # imm = 0x573F3FF0
	movl	%edi, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB100_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB100_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB100_1 Depth=1
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB100_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB100_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB100_8
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB100_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB100_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB100_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB100_7
# %bb.6:                                # %if.then10
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB100_23
.LBB100_7:                              # %if.end
                                        #   in Loop: Header=BB100_1 Depth=1
	jmp	.LBB100_8
.LBB100_8:                              # %if.end14
                                        #   in Loop: Header=BB100_1 Depth=1
	jmp	.LBB100_20
.LBB100_9:                              # %if.else
                                        #   in Loop: Header=BB100_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB100_14
# %bb.10:                               # %if.then19
                                        #   in Loop: Header=BB100_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB100_13
# %bb.11:                               # %land.lhs.true24
                                        #   in Loop: Header=BB100_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB100_13
# %bb.12:                               # %if.then30
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB100_23
.LBB100_13:                             # %if.end34
                                        #   in Loop: Header=BB100_1 Depth=1
	jmp	.LBB100_14
.LBB100_14:                             # %if.end35
                                        #   in Loop: Header=BB100_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB100_19
# %bb.15:                               # %if.then41
                                        #   in Loop: Header=BB100_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB100_18
# %bb.16:                               # %land.lhs.true46
                                        #   in Loop: Header=BB100_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB100_18
# %bb.17:                               # %if.then52
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB100_23
.LBB100_18:                             # %if.end56
                                        #   in Loop: Header=BB100_1 Depth=1
	jmp	.LBB100_19
.LBB100_19:                             # %if.end57
                                        #   in Loop: Header=BB100_1 Depth=1
	jmp	.LBB100_20
.LBB100_20:                             # %if.end58
                                        #   in Loop: Header=BB100_1 Depth=1
	jmp	.LBB100_21
.LBB100_21:                             # %for.inc
                                        #   in Loop: Header=BB100_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB100_1
.LBB100_22:                             # %for.end
	movq	$0, -24(%rbp)
.LBB100_23:                             # %return
	movq	-24(%rbp), %rbx
	cmpl	$1463762928, -28(%rbp)  # imm = 0x573F3FF0
	jne	.LBB100_25
.LBB100_24:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB100_25:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB100_24
.Lfunc_end100:
	.size	get_long_term_pic.37, .Lfunc_end100-get_long_term_pic.37
	.cfi_endproc
                                        # -- End function
	.globl	alloc_storable_picture.38 # -- Begin function alloc_storable_picture.38
	.p2align	4, 0x90
	.type	alloc_storable_picture.38,@function
alloc_storable_picture.38:              # @alloc_storable_picture.38
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1567050740, -40(%rbp)  # imm = 0x5D674BF4
	movl	%edi, -36(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -32(%rbp)
	movl	$1, %edi
	movl	$6584, %esi             # imm = 0x19B8
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -16(%rbp)
	cmpq	-16(%rbp), %rcx
	jne	.LBB101_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.7, %rdi
	callq	no_mem_exit
.LBB101_2:                              # %if.end
	movq	-16(%rbp), %rdi
	addq	$6424, %rdi             # imm = 0x1918
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	callq	get_mem2Dpel
	movq	-16(%rbp), %rax
	movq	$0, 6432(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6448(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6464(%rax)
	movq	input, %rax
	cmpl	$0, 1284(%rax)
	jne	.LBB101_5
# %bb.3:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 1288(%rax)
	jne	.LBB101_5
# %bb.4:                                # %lor.lhs.false3
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB101_6
.LBB101_5:                              # %if.then5
	movq	-16(%rbp), %rax
	movq	$0, 6440(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6456(%rax)
.LBB101_6:                              # %if.end6
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB101_8
# %bb.7:                                # %if.then8
	movq	-16(%rbp), %rdi
	addq	$6464, %rdi             # imm = 0x1940
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	$2, %esi
	callq	get_mem3Dpel
.LBB101_8:                              # %if.end11
	movq	img, %rax
	movl	72484(%rax), %edi
	movl	$4, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	-16(%rbp), %rdx
	movq	%rax, 6472(%rdx)
	movq	-16(%rbp), %rax
	cmpq	6472(%rax), %rcx
	jne	.LBB101_10
# %bb.9:                                # %if.then16
	movabsq	$.L.str.8, %rdi
	callq	no_mem_exit
.LBB101_10:                             # %if.end17
	movq	-16(%rbp), %rdi
	addq	$6480, %rdi             # imm = 0x1950
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-16(%rbp), %rdi
	addq	$6488, %rdi             # imm = 0x1958
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	$6, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-16(%rbp), %rdi
	addq	$6496, %rdi             # imm = 0x1960
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	$6, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-16(%rbp), %rdi
	addq	$6504, %rdi             # imm = 0x1968
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-16(%rbp), %rdi
	addq	$6512, %rdi             # imm = 0x1970
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-20(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-16(%rbp), %rdi
	addq	$6520, %rdi             # imm = 0x1978
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-20(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-16(%rbp), %rax
	movl	$0, 6364(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6360(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6372(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6368(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6380(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6376(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6388(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6384(%rax)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6392(%rcx)
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6396(%rcx)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6400(%rcx)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6404(%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 6528(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6536(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6544(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6412(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6416(%rax)
	movq	-16(%rbp), %rbx
	cmpl	$1567050740, -40(%rbp)  # imm = 0x5D674BF4
	jne	.LBB101_12
.LBB101_11:
	movq	%rbx, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB101_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB101_11
.Lfunc_end101:
	.size	alloc_storable_picture.38, .Lfunc_end101-alloc_storable_picture.38
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_poc_desc.39
	.type	compare_fs_by_poc_desc.39,@function
compare_fs_by_poc_desc.39:              # @compare_fs_by_poc_desc.39
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$2073085379, -16(%rbp)  # imm = 0x7B90C5C3
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB102_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB102_5
.LBB102_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jle	.LBB102_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB102_5
.LBB102_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB102_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$2073085379, -16(%rbp)  # imm = 0x7B90C5C3
	jne	.LBB102_7
.LBB102_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB102_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB102_6
.Lfunc_end102:
	.size	compare_fs_by_poc_desc.39, .Lfunc_end102-compare_fs_by_poc_desc.39
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function gen_pic_list_from_frame_list.40
	.type	gen_pic_list_from_frame_list.40,@function
gen_pic_list_from_frame_list.40:        # @gen_pic_list_from_frame_list.40
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$116720919, -64(%rbp)   # imm = 0x6F50517
	movl	%edi, -44(%rbp)
	movq	%rsi, -24(%rbp)
	movl	%edx, -12(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -32(%rbp)
	movl	%r9d, -60(%rbp)
	movl	$0, -8(%rbp)
	movl	$0, -4(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB103_2
# %bb.1:                                # %if.then
	movabsq	$is_long_ref, %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB103_3
.LBB103_2:                              # %if.else
	movabsq	$is_short_ref, %rax
	movq	%rax, -40(%rbp)
.LBB103_3:                              # %if.end
	cmpl	$1, -44(%rbp)
	jne	.LBB103_28
# %bb.4:                                # %if.then1
	jmp	.LBB103_5
.LBB103_5:                              # %while.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB103_9 Depth 2
                                        #     Child Loop BB103_18 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	movb	$1, %al
	jl	.LBB103_7
# %bb.6:                                # %lor.rhs
                                        #   in Loop: Header=BB103_5 Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	setl	%al
.LBB103_7:                              # %lor.end
                                        #   in Loop: Header=BB103_5 Depth=1
	testb	$1, %al
	jne	.LBB103_8
	jmp	.LBB103_27
.LBB103_8:                              # %while.body
                                        #   in Loop: Header=BB103_5 Depth=1
	jmp	.LBB103_9
.LBB103_9:                              # %for.cond
                                        #   Parent Loop BB103_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB103_16
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB103_9 Depth=2
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB103_14
# %bb.11:                               # %if.then6
                                        #   in Loop: Header=BB103_9 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB103_13
# %bb.12:                               # %if.then10
                                        #   in Loop: Header=BB103_5 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB103_17
.LBB103_13:                             # %if.end17
                                        #   in Loop: Header=BB103_9 Depth=2
	jmp	.LBB103_14
.LBB103_14:                             # %if.end18
                                        #   in Loop: Header=BB103_9 Depth=2
	jmp	.LBB103_15
.LBB103_15:                             # %for.inc
                                        #   in Loop: Header=BB103_9 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB103_9
.LBB103_16:                             # %for.end.loopexit
                                        #   in Loop: Header=BB103_5 Depth=1
	jmp	.LBB103_17
.LBB103_17:                             # %for.end
                                        #   in Loop: Header=BB103_5 Depth=1
	jmp	.LBB103_18
.LBB103_18:                             # %for.cond20
                                        #   Parent Loop BB103_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB103_25
# %bb.19:                               # %for.body22
                                        #   in Loop: Header=BB103_18 Depth=2
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB103_23
# %bb.20:                               # %if.then28
                                        #   in Loop: Header=BB103_18 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB103_22
# %bb.21:                               # %if.then33
                                        #   in Loop: Header=BB103_5 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB103_26
.LBB103_22:                             # %if.end41
                                        #   in Loop: Header=BB103_18 Depth=2
	jmp	.LBB103_23
.LBB103_23:                             # %if.end42
                                        #   in Loop: Header=BB103_18 Depth=2
	jmp	.LBB103_24
.LBB103_24:                             # %for.inc43
                                        #   in Loop: Header=BB103_18 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB103_18
.LBB103_25:                             # %for.end45.loopexit
                                        #   in Loop: Header=BB103_5 Depth=1
	jmp	.LBB103_26
.LBB103_26:                             # %for.end45
                                        #   in Loop: Header=BB103_5 Depth=1
	jmp	.LBB103_5
.LBB103_27:                             # %while.end
	jmp	.LBB103_28
.LBB103_28:                             # %if.end46
	cmpl	$2, -44(%rbp)
	jne	.LBB103_53
# %bb.29:                               # %if.then48
	jmp	.LBB103_30
.LBB103_30:                             # %while.cond49
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB103_34 Depth 2
                                        #     Child Loop BB103_43 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	movb	$1, %al
	jl	.LBB103_32
# %bb.31:                               # %lor.rhs51
                                        #   in Loop: Header=BB103_30 Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	setl	%al
.LBB103_32:                             # %lor.end53
                                        #   in Loop: Header=BB103_30 Depth=1
	testb	$1, %al
	jne	.LBB103_33
	jmp	.LBB103_52
.LBB103_33:                             # %while.body54
                                        #   in Loop: Header=BB103_30 Depth=1
	jmp	.LBB103_34
.LBB103_34:                             # %for.cond55
                                        #   Parent Loop BB103_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB103_41
# %bb.35:                               # %for.body57
                                        #   in Loop: Header=BB103_34 Depth=2
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB103_39
# %bb.36:                               # %if.then63
                                        #   in Loop: Header=BB103_34 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB103_38
# %bb.37:                               # %if.then69
                                        #   in Loop: Header=BB103_30 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB103_42
.LBB103_38:                             # %if.end77
                                        #   in Loop: Header=BB103_34 Depth=2
	jmp	.LBB103_39
.LBB103_39:                             # %if.end78
                                        #   in Loop: Header=BB103_34 Depth=2
	jmp	.LBB103_40
.LBB103_40:                             # %for.inc79
                                        #   in Loop: Header=BB103_34 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB103_34
.LBB103_41:                             # %for.end81.loopexit
                                        #   in Loop: Header=BB103_30 Depth=1
	jmp	.LBB103_42
.LBB103_42:                             # %for.end81
                                        #   in Loop: Header=BB103_30 Depth=1
	jmp	.LBB103_43
.LBB103_43:                             # %for.cond82
                                        #   Parent Loop BB103_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB103_50
# %bb.44:                               # %for.body84
                                        #   in Loop: Header=BB103_43 Depth=2
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB103_48
# %bb.45:                               # %if.then90
                                        #   in Loop: Header=BB103_43 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB103_47
# %bb.46:                               # %if.then96
                                        #   in Loop: Header=BB103_30 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB103_51
.LBB103_47:                             # %if.end104
                                        #   in Loop: Header=BB103_43 Depth=2
	jmp	.LBB103_48
.LBB103_48:                             # %if.end105
                                        #   in Loop: Header=BB103_43 Depth=2
	jmp	.LBB103_49
.LBB103_49:                             # %for.inc106
                                        #   in Loop: Header=BB103_43 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB103_43
.LBB103_50:                             # %for.end108.loopexit
                                        #   in Loop: Header=BB103_30 Depth=1
	jmp	.LBB103_51
.LBB103_51:                             # %for.end108
                                        #   in Loop: Header=BB103_30 Depth=1
	jmp	.LBB103_30
.LBB103_52:                             # %while.end109
	jmp	.LBB103_53
.LBB103_53:                             # %if.end110
	cmpl	$116720919, -64(%rbp)   # imm = 0x6F50517
	jne	.LBB103_55
.LBB103_54:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB103_55:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB103_54
.Lfunc_end103:
	.size	gen_pic_list_from_frame_list.40, .Lfunc_end103-gen_pic_list_from_frame_list.40
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_poc_desc.41
	.type	compare_pic_by_poc_desc.41,@function
compare_pic_by_poc_desc.41:             # @compare_pic_by_poc_desc.41
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$57310498, -16(%rbp)    # imm = 0x36A7D22
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB104_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB104_5
.LBB104_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB104_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB104_5
.LBB104_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB104_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$57310498, -16(%rbp)    # imm = 0x36A7D22
	jne	.LBB104_7
.LBB104_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB104_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB104_6
.Lfunc_end104:
	.size	compare_pic_by_poc_desc.41, .Lfunc_end104-compare_pic_by_poc_desc.41
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_assign_long_term_frame_idx.42
	.type	mm_assign_long_term_frame_idx.42,@function
mm_assign_long_term_frame_idx.42:       # @mm_assign_long_term_frame_idx.42
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$142049503, -32(%rbp)   # imm = 0x87780DF
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -16(%rbp)
	movq	-24(%rbp), %rdi
	movl	-28(%rbp), %esi
	callq	get_pic_num_x
	movl	%eax, -12(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB105_2
# %bb.1:                                # %if.then
	movl	-16(%rbp), %edi
	callq	unmark_long_term_frame_for_reference_by_frame_idx
	jmp	.LBB105_18
.LBB105_2:                              # %if.else
	movl	$0, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB105_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB105_14
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB105_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB105_8
# %bb.5:                                # %if.then3
                                        #   in Loop: Header=BB105_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB105_7
# %bb.6:                                # %if.then7
	movl	$1, -8(%rbp)
	jmp	.LBB105_15
.LBB105_7:                              # %if.end
                                        #   in Loop: Header=BB105_3 Depth=1
	jmp	.LBB105_8
.LBB105_8:                              # %if.end8
                                        #   in Loop: Header=BB105_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB105_12
# %bb.9:                                # %if.then14
                                        #   in Loop: Header=BB105_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB105_11
# %bb.10:                               # %if.then19
	movl	$2, -8(%rbp)
	jmp	.LBB105_15
.LBB105_11:                             # %if.end20
                                        #   in Loop: Header=BB105_3 Depth=1
	jmp	.LBB105_12
.LBB105_12:                             # %if.end21
                                        #   in Loop: Header=BB105_3 Depth=1
	jmp	.LBB105_13
.LBB105_13:                             # %for.inc
                                        #   in Loop: Header=BB105_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB105_3
.LBB105_14:                             # %for.end.loopexit
	jmp	.LBB105_15
.LBB105_15:                             # %for.end
	cmpl	$0, -8(%rbp)
	jne	.LBB105_17
# %bb.16:                               # %if.then23
	movabsq	$.L.str.24, %rdi
	movl	$200, %esi
	callq	error
.LBB105_17:                             # %if.end24
	movl	-8(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %r8d
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	callq	unmark_long_term_field_for_reference_by_frame_idx
.LBB105_18:                             # %if.end25
	movq	-24(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	callq	mark_pic_long_term
	cmpl	$142049503, -32(%rbp)   # imm = 0x87780DF
	jne	.LBB105_20
.LBB105_19:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB105_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB105_19
.Lfunc_end105:
	.size	mm_assign_long_term_frame_idx.42, .Lfunc_end105-mm_assign_long_term_frame_idx.42
	.cfi_endproc
                                        # -- End function
	.globl	init_dpb.43             # -- Begin function init_dpb.43
	.p2align	4, 0x90
	.type	init_dpb.43,@function
init_dpb.43:                            # @init_dpb.43
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$492890938, -12(%rbp)   # imm = 0x1D60EB3A
	cmpl	$0, dpb+48
	je	.LBB106_2
# %bb.1:                                # %if.then
	callq	free_dpb
.LBB106_2:                              # %if.end
	callq	getDpbSize
	movl	%eax, dpb+24
	movl	dpb+24, %eax
	movq	input, %rcx
	cmpl	36(%rcx), %eax
	jae	.LBB106_4
# %bb.3:                                # %if.then1
	movabsq	$.L.str.1, %rdi
	movl	$1000, %esi             # imm = 0x3E8
	callq	error
.LBB106_4:                              # %if.end2
	movl	$0, dpb+28
	movq	$0, dpb+56
	movl	$0, dpb+32
	movl	$0, dpb+36
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, dpb
	cmpq	dpb, %rcx
	jne	.LBB106_6
# %bb.5:                                # %if.then6
	movabsq	$.L.str.2, %rdi
	callq	no_mem_exit
.LBB106_6:                              # %if.end7
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, dpb+8
	cmpq	dpb+8, %rcx
	jne	.LBB106_8
# %bb.7:                                # %if.then12
	movabsq	$.L.str.3, %rdi
	callq	no_mem_exit
.LBB106_8:                              # %if.end13
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, dpb+16
	cmpq	dpb+16, %rcx
	jne	.LBB106_10
# %bb.9:                                # %if.then18
	movabsq	$.L.str.4, %rdi
	callq	no_mem_exit
.LBB106_10:                             # %if.end19
	movl	$0, -4(%rbp)
.LBB106_11:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+24, %eax
	jae	.LBB106_14
# %bb.12:                               # %for.body
                                        #   in Loop: Header=BB106_11 Depth=1
	callq	alloc_frame_store
	movq	dpb, %rcx
	movl	-4(%rbp), %edx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB106_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB106_11
.LBB106_14:                             # %for.end
	movl	$0, -4(%rbp)
.LBB106_15:                             # %for.cond27
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$6, -4(%rbp)
	jae	.LBB106_20
# %bb.16:                               # %for.body30
                                        #   in Loop: Header=BB106_15 Depth=1
	movl	$33, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movl	-4(%rbp), %edx
	movq	%rax, listX(,%rdx,8)
	movl	-4(%rbp), %eax
	cmpq	listX(,%rax,8), %rcx
	jne	.LBB106_18
# %bb.17:                               # %if.then38
                                        #   in Loop: Header=BB106_15 Depth=1
	movabsq	$.L.str.5, %rdi
	callq	no_mem_exit
.LBB106_18:                             # %if.end39
                                        #   in Loop: Header=BB106_15 Depth=1
	jmp	.LBB106_19
.LBB106_19:                             # %for.inc40
                                        #   in Loop: Header=BB106_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB106_15
.LBB106_20:                             # %for.end42
	movl	$0, -8(%rbp)
.LBB106_21:                             # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB106_23 Depth 2
	cmpl	$6, -8(%rbp)
	jae	.LBB106_28
# %bb.22:                               # %for.body46
                                        #   in Loop: Header=BB106_21 Depth=1
	movl	$0, -4(%rbp)
.LBB106_23:                             # %for.cond47
                                        #   Parent Loop BB106_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$33, -4(%rbp)
	jae	.LBB106_26
# %bb.24:                               # %for.body50
                                        #   in Loop: Header=BB106_23 Depth=2
	movl	-8(%rbp), %eax
	movq	listX(,%rax,8), %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.25:                               # %for.inc55
                                        #   in Loop: Header=BB106_23 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB106_23
.LBB106_26:                             # %for.end57
                                        #   in Loop: Header=BB106_21 Depth=1
	movl	-8(%rbp), %eax
	movl	$0, listXsize(,%rax,4)
# %bb.27:                               # %for.inc60
                                        #   in Loop: Header=BB106_21 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB106_21
.LBB106_28:                             # %for.end62
	movl	$-2147483648, dpb+40    # imm = 0x80000000
	movq	img, %rax
	movl	$0, 72644(%rax)
	movl	$1, dpb+48
	cmpl	$492890938, -12(%rbp)   # imm = 0x1D60EB3A
	jne	.LBB106_30
.LBB106_29:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB106_30:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB106_29
.Lfunc_end106:
	.size	init_dpb.43, .Lfunc_end106-init_dpb.43
	.cfi_endproc
                                        # -- End function
	.globl	fill_frame_num_gap.44   # -- Begin function fill_frame_num_gap.44
	.p2align	4, 0x90
	.type	fill_frame_num_gap.44,@function
fill_frame_num_gap.44:                  # @fill_frame_num_gap.44
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1243659787, -40(%rbp)  # imm = 0x4A20BE0B
	movq	%rdi, -8(%rbp)
	movq	$0, -24(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -28(%rbp)
	movq	-8(%rbp), %rax
	movl	72496(%rax), %eax
	movl	%eax, -36(%rbp)
	movq	-8(%rbp), %rax
	movl	$1, 72496(%rax)
	movq	-8(%rbp), %rax
	movl	72648(%rax), %eax
	addl	$1, %eax
	cltd
	idivl	-28(%rbp)
	movl	%edx, -12(%rbp)
	movq	-8(%rbp), %rax
	movl	72464(%rax), %eax
	movl	%eax, -32(%rbp)
.LBB107_1:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-32(%rbp), %eax
	cmpl	-12(%rbp), %eax
	je	.LBB107_3
# %bb.2:                                # %while.body
                                        #   in Loop: Header=BB107_1 Depth=1
	movq	-8(%rbp), %rax
	movl	52(%rax), %esi
	movq	-8(%rbp), %rax
	movl	60(%rax), %edx
	movq	-8(%rbp), %rax
	movl	56(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	64(%rax), %r8d
	xorl	%edi, %edi
	callq	alloc_storable_picture
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	$1, 6412(%rax)
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 6364(%rcx)
	movq	-24(%rbp), %rax
	movl	$1, 6388(%rax)
	movq	-24(%rbp), %rax
	movl	$1, 6384(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 72500(%rax)
	movq	-24(%rbp), %rdi
	callq	store_picture_in_dpb
	movq	$0, -24(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	-28(%rbp)
	movl	%edx, -12(%rbp)
	jmp	.LBB107_1
.LBB107_3:                              # %while.end
	movl	-36(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 72496(%rcx)
	cmpl	$1243659787, -40(%rbp)  # imm = 0x4A20BE0B
	jne	.LBB107_5
.LBB107_4:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB107_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB107_4
.Lfunc_end107:
	.size	fill_frame_num_gap.44, .Lfunc_end107-fill_frame_num_gap.44
	.cfi_endproc
                                        # -- End function
	.globl	alloc_ref_pic_list_reordering_buffer.45 # -- Begin function alloc_ref_pic_list_reordering_buffer.45
	.p2align	4, 0x90
	.type	alloc_ref_pic_list_reordering_buffer.45,@function
alloc_ref_pic_list_reordering_buffer.45: # @alloc_ref_pic_list_reordering_buffer.45
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1779925555, -20(%rbp)  # imm = 0x6A178233
	movq	%rdi, -16(%rbp)
	movq	img, %rax
	movl	72000(%rax), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB108_9
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$4, 24(%rax)
	je	.LBB108_9
# %bb.2:                                # %if.then
	movslq	-4(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	-16(%rbp), %rcx
	movq	%rax, 64(%rcx)
	cmpq	$0, %rax
	jne	.LBB108_4
# %bb.3:                                # %if.then5
	movabsq	$.L.str.15, %rdi
	callq	no_mem_exit
.LBB108_4:                              # %if.end
	movslq	-4(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	-16(%rbp), %rcx
	movq	%rax, 72(%rcx)
	cmpq	$0, %rax
	jne	.LBB108_6
# %bb.5:                                # %if.then10
	movabsq	$.L.str.16, %rdi
	callq	no_mem_exit
.LBB108_6:                              # %if.end11
	movslq	-4(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	-16(%rbp), %rcx
	movq	%rax, 80(%rcx)
	cmpq	$0, %rax
	jne	.LBB108_8
# %bb.7:                                # %if.then16
	movabsq	$.L.str.17, %rdi
	callq	no_mem_exit
.LBB108_8:                              # %if.end17
	jmp	.LBB108_10
.LBB108_9:                              # %if.else
	movq	-16(%rbp), %rax
	movq	$0, 64(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 72(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 80(%rax)
.LBB108_10:                             # %if.end21
	movq	img, %rax
	movl	72004(%rax), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB108_18
# %bb.11:                               # %if.then26
	movslq	-4(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	-16(%rbp), %rcx
	movq	%rax, 96(%rcx)
	cmpq	$0, %rax
	jne	.LBB108_13
# %bb.12:                               # %if.then31
	movabsq	$.L.str.18, %rdi
	callq	no_mem_exit
.LBB108_13:                             # %if.end32
	movslq	-4(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	-16(%rbp), %rcx
	movq	%rax, 104(%rcx)
	cmpq	$0, %rax
	jne	.LBB108_15
# %bb.14:                               # %if.then37
	movabsq	$.L.str.19, %rdi
	callq	no_mem_exit
.LBB108_15:                             # %if.end38
	movslq	-4(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	-16(%rbp), %rcx
	movq	%rax, 112(%rcx)
	cmpq	$0, %rax
	jne	.LBB108_17
# %bb.16:                               # %if.then43
	movabsq	$.L.str.20, %rdi
	callq	no_mem_exit
.LBB108_17:                             # %if.end44
	jmp	.LBB108_19
.LBB108_18:                             # %if.else45
	movq	-16(%rbp), %rax
	movq	$0, 96(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 104(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 112(%rax)
.LBB108_19:                             # %if.end49
	cmpl	$1779925555, -20(%rbp)  # imm = 0x6A178233
	jne	.LBB108_21
.LBB108_20:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB108_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB108_20
.Lfunc_end108:
	.size	alloc_ref_pic_list_reordering_buffer.45, .Lfunc_end108-alloc_ref_pic_list_reordering_buffer.45
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_poc_asc.46
	.type	compare_pic_by_poc_asc.46,@function
compare_pic_by_poc_asc.46:              # @compare_pic_by_poc_asc.46
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$2013822667, -16(%rbp)  # imm = 0x78087ECB
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB109_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB109_5
.LBB109_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB109_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB109_5
.LBB109_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB109_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$2013822667, -16(%rbp)  # imm = 0x78087ECB
	jne	.LBB109_7
.LBB109_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB109_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB109_6
.Lfunc_end109:
	.size	compare_pic_by_poc_asc.46, .Lfunc_end109-compare_pic_by_poc_asc.46
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_unmark_long_term_for_reference.47
	.type	mm_unmark_long_term_for_reference.47,@function
mm_unmark_long_term_for_reference.47:   # @mm_unmark_long_term_for_reference.47
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1613103909, -12(%rbp)  # imm = 0x60260325
	movq	%rdi, -24(%rbp)
	movl	%esi, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB110_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB110_26
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB110_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB110_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB110_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB110_8
# %bb.4:                                # %land.lhs.true
                                        #   in Loop: Header=BB110_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB110_8
# %bb.5:                                # %if.then6
                                        #   in Loop: Header=BB110_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB110_7
# %bb.6:                                # %if.then11
                                        #   in Loop: Header=BB110_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB110_7:                              # %if.end
                                        #   in Loop: Header=BB110_1 Depth=1
	jmp	.LBB110_8
.LBB110_8:                              # %if.end14
                                        #   in Loop: Header=BB110_1 Depth=1
	jmp	.LBB110_24
.LBB110_9:                              # %if.else
                                        #   in Loop: Header=BB110_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB110_16
# %bb.10:                               # %land.lhs.true18
                                        #   in Loop: Header=BB110_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB110_16
# %bb.11:                               # %if.then24
                                        #   in Loop: Header=BB110_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB110_15
# %bb.12:                               # %if.then29
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$0, 6376(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$2, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	andl	$2, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB110_14
# %bb.13:                               # %if.then48
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6376(%rax)
.LBB110_14:                             # %if.end57
	jmp	.LBB110_27
.LBB110_15:                             # %if.end58
                                        #   in Loop: Header=BB110_1 Depth=1
	jmp	.LBB110_16
.LBB110_16:                             # %if.end59
                                        #   in Loop: Header=BB110_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB110_23
# %bb.17:                               # %land.lhs.true65
                                        #   in Loop: Header=BB110_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB110_23
# %bb.18:                               # %if.then71
                                        #   in Loop: Header=BB110_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB110_22
# %bb.19:                               # %if.then76
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$0, 6376(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB110_21
# %bb.20:                               # %if.then97
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6376(%rax)
.LBB110_21:                             # %if.end106
	jmp	.LBB110_27
.LBB110_22:                             # %if.end107
                                        #   in Loop: Header=BB110_1 Depth=1
	jmp	.LBB110_23
.LBB110_23:                             # %if.end108
                                        #   in Loop: Header=BB110_1 Depth=1
	jmp	.LBB110_24
.LBB110_24:                             # %if.end109
                                        #   in Loop: Header=BB110_1 Depth=1
	jmp	.LBB110_25
.LBB110_25:                             # %for.inc
                                        #   in Loop: Header=BB110_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB110_1
.LBB110_26:                             # %for.end.loopexit
	jmp	.LBB110_27
.LBB110_27:                             # %for.end
	cmpl	$1613103909, -12(%rbp)  # imm = 0x60260325
	jne	.LBB110_29
.LBB110_28:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB110_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB110_28
.Lfunc_end110:
	.size	mm_unmark_long_term_for_reference.47, .Lfunc_end110-mm_unmark_long_term_for_reference.47
	.cfi_endproc
                                        # -- End function
	.globl	gen_field_ref_ids.48    # -- Begin function gen_field_ref_ids.48
	.p2align	4, 0x90
	.type	gen_field_ref_ids.48,@function
gen_field_ref_ids.48:                   # @gen_field_ref_ids.48
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$588910399, -28(%rbp)   # imm = 0x231A0F3F
	movq	%rdi, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB111_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_3 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB111_14
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB111_1 Depth=1
	movl	$0, -8(%rbp)
.LBB111_3:                              # %for.cond1
                                        #   Parent Loop BB111_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB111_12
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB111_3 Depth=2
	movq	-16(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB111_6
# %bb.5:                                # %cond.true
                                        #   in Loop: Header=BB111_3 Depth=2
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB111_7
.LBB111_6:                              # %cond.false
                                        #   in Loop: Header=BB111_3 Depth=2
	xorl	%eax, %eax
	jmp	.LBB111_7
.LBB111_7:                              # %cond.end
                                        #   in Loop: Header=BB111_3 Depth=2
	movq	-16(%rbp), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB111_9
# %bb.8:                                # %cond.true27
                                        #   in Loop: Header=BB111_3 Depth=2
	movq	-16(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB111_10
.LBB111_9:                              # %cond.false32
                                        #   in Loop: Header=BB111_3 Depth=2
	xorl	%eax, %eax
	jmp	.LBB111_10
.LBB111_10:                             # %cond.end33
                                        #   in Loop: Header=BB111_3 Depth=2
	movq	-16(%rbp), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB111_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB111_3
.LBB111_12:                             # %for.end
                                        #   in Loop: Header=BB111_1 Depth=1
	jmp	.LBB111_13
.LBB111_13:                             # %for.inc45
                                        #   in Loop: Header=BB111_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB111_1
.LBB111_14:                             # %for.end47
	cmpl	$588910399, -28(%rbp)   # imm = 0x231A0F3F
	jne	.LBB111_16
.LBB111_15:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB111_16:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB111_15
.Lfunc_end111:
	.size	gen_field_ref_ids.48, .Lfunc_end111-gen_field_ref_ids.48
	.cfi_endproc
                                        # -- End function
	.globl	reorder_ref_pic_list.49 # -- Begin function reorder_ref_pic_list.49
	.p2align	4, 0x90
	.type	reorder_ref_pic_list.49,@function
reorder_ref_pic_list.49:                # @reorder_ref_pic_list.49
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$265430896, -60(%rbp)   # imm = 0xFD22770
	movq	%rdi, -72(%rbp)
	movq	%rsi, -88(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -32(%rbp)
	movq	%r9, -80(%rbp)
	movl	$0, -44(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB112_2
# %bb.1:                                # %if.then
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	72464(%rax), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB112_3
.LBB112_2:                              # %if.else
	movl	-36(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	72464(%rax), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB112_3:                              # %if.end
	movl	-20(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB112_4:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$3, (%rax,%rcx,4)
	je	.LBB112_24
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB112_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$3, (%rax,%rcx,4)
	jle	.LBB112_7
# %bb.6:                                # %if.then8
                                        #   in Loop: Header=BB112_4 Depth=1
	movabsq	$.L.str.12, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB112_7:                              # %if.end9
                                        #   in Loop: Header=BB112_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$2, (%rax,%rcx,4)
	jge	.LBB112_21
# %bb.8:                                # %if.then13
                                        #   in Loop: Header=BB112_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	jne	.LBB112_13
# %bb.9:                                # %if.then17
                                        #   in Loop: Header=BB112_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB112_11
# %bb.10:                               # %if.then22
                                        #   in Loop: Header=BB112_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	addl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB112_12
.LBB112_11:                             # %if.else28
                                        #   in Loop: Header=BB112_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -8(%rbp)
.LBB112_12:                             # %if.end33
                                        #   in Loop: Header=BB112_4 Depth=1
	jmp	.LBB112_17
.LBB112_13:                             # %if.else34
                                        #   in Loop: Header=BB112_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	cmpl	-16(%rbp), %eax
	jl	.LBB112_15
# %bb.14:                               # %if.then40
                                        #   in Loop: Header=BB112_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB112_16
.LBB112_15:                             # %if.else46
                                        #   in Loop: Header=BB112_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -8(%rbp)
.LBB112_16:                             # %if.end51
                                        #   in Loop: Header=BB112_4 Depth=1
	jmp	.LBB112_17
.LBB112_17:                             # %if.end52
                                        #   in Loop: Header=BB112_4 Depth=1
	movl	-8(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jle	.LBB112_19
# %bb.18:                               # %if.then54
                                        #   in Loop: Header=BB112_4 Depth=1
	movl	-8(%rbp), %eax
	subl	-16(%rbp), %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB112_20
.LBB112_19:                             # %if.else56
                                        #   in Loop: Header=BB112_4 Depth=1
	movl	-8(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB112_20:                             # %if.end57
                                        #   in Loop: Header=BB112_4 Depth=1
	movq	-72(%rbp), %rdi
	movl	-24(%rbp), %esi
	movl	-40(%rbp), %edx
	leaq	-44(%rbp), %rcx
	callq	reorder_short_term
	jmp	.LBB112_22
.LBB112_21:                             # %if.else58
                                        #   in Loop: Header=BB112_4 Depth=1
	movq	-72(%rbp), %rdi
	movl	-24(%rbp), %esi
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %edx
	leaq	-44(%rbp), %rcx
	callq	reorder_long_term
.LBB112_22:                             # %if.end61
                                        #   in Loop: Header=BB112_4 Depth=1
	jmp	.LBB112_23
.LBB112_23:                             # %for.inc
                                        #   in Loop: Header=BB112_4 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB112_4
.LBB112_24:                             # %for.end
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$265430896, -60(%rbp)   # imm = 0xFD22770
	jne	.LBB112_26
.LBB112_25:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB112_26:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB112_25
.Lfunc_end112:
	.size	reorder_ref_pic_list.49, .Lfunc_end112-reorder_ref_pic_list.49
	.cfi_endproc
                                        # -- End function
	.globl	mm_update_max_long_term_frame_idx.50 # -- Begin function mm_update_max_long_term_frame_idx.50
	.p2align	4, 0x90
	.type	mm_update_max_long_term_frame_idx.50,@function
mm_update_max_long_term_frame_idx.50:   # @mm_update_max_long_term_frame_idx.50
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1200890310, -12(%rbp)  # imm = 0x479421C6
	movl	%edi, -8(%rbp)
	movl	-8(%rbp), %eax
	subl	$1, %eax
	movl	%eax, dpb+44
	movl	$0, -4(%rbp)
.LBB113_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB113_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB113_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	dpb+44, %eax
	jle	.LBB113_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB113_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB113_4:                              # %if.end
                                        #   in Loop: Header=BB113_1 Depth=1
	jmp	.LBB113_5
.LBB113_5:                              # %for.inc
                                        #   in Loop: Header=BB113_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB113_1
.LBB113_6:                              # %for.end
	cmpl	$1200890310, -12(%rbp)  # imm = 0x479421C6
	jne	.LBB113_8
.LBB113_7:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB113_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB113_7
.Lfunc_end113:
	.size	mm_update_max_long_term_frame_idx.50, .Lfunc_end113-mm_update_max_long_term_frame_idx.50
	.cfi_endproc
                                        # -- End function
	.globl	alloc_colocated.51      # -- Begin function alloc_colocated.51
	.p2align	4, 0x90
	.type	alloc_colocated.51,@function
alloc_colocated.51:                     # @alloc_colocated.51
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1019496902, -32(%rbp)  # imm = 0x3CC449C6
	movl	%edi, -12(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -28(%rbp)
	movl	$1, %edi
	movl	$4880, %esi             # imm = 0x1310
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -24(%rbp)
	cmpq	-24(%rbp), %rcx
	jne	.LBB114_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.21, %rdi
	callq	no_mem_exit
.LBB114_2:                              # %if.end
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-16(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-24(%rbp), %rdi
	addq	$1600, %rdi             # imm = 0x640
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$1608, %rdi             # imm = 0x648
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$1616, %rdi             # imm = 0x650
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$1624, %rdi             # imm = 0x658
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-24(%rbp), %rdi
	addq	$4872, %rdi             # imm = 0x1308
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	cmpl	$0, -28(%rbp)
	je	.LBB114_4
# %bb.3:                                # %if.then17
	movq	-24(%rbp), %rdi
	addq	$3216, %rdi             # imm = 0xC90
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$3224, %rdi             # imm = 0xC98
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$3232, %rdi             # imm = 0xCA0
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$3240, %rdi             # imm = 0xCA8
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-24(%rbp), %rdi
	addq	$4832, %rdi             # imm = 0x12E0
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$4840, %rdi             # imm = 0x12E8
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$4848, %rdi             # imm = 0x12F0
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$4856, %rdi             # imm = 0x12F8
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
.LBB114_4:                              # %if.end50
	movl	-28(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rbx
	cmpl	$1019496902, -32(%rbp)  # imm = 0x3CC449C6
	jne	.LBB114_6
.LBB114_5:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB114_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB114_5
.Lfunc_end114:
	.size	alloc_colocated.51, .Lfunc_end114-alloc_colocated.51
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_smallest_poc.52
	.type	get_smallest_poc.52,@function
get_smallest_poc.52:                    # @get_smallest_poc.52
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1801912989, -20(%rbp)  # imm = 0x6B67029D
	movq	%rdi, -16(%rbp)
	movq	%rsi, -32(%rbp)
	cmpl	$1, dpb+28
	jae	.LBB115_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.28, %rdi
	movl	$150, %esi
	callq	error
.LBB115_2:                              # %if.end
	movq	-32(%rbp), %rax
	movl	$-1, (%rax)
	movq	-16(%rbp), %rax
	movl	$2147483647, (%rax)     # imm = 0x7FFFFFFF
	movl	$0, -4(%rbp)
.LBB115_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB115_9
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB115_3 Depth=1
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	dpb, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jle	.LBB115_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB115_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 32(%rax)
	jne	.LBB115_7
# %bb.6:                                # %if.then6
                                        #   in Loop: Header=BB115_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	36(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB115_7:                              # %if.end10
                                        #   in Loop: Header=BB115_3 Depth=1
	jmp	.LBB115_8
.LBB115_8:                              # %for.inc
                                        #   in Loop: Header=BB115_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB115_3
.LBB115_9:                              # %for.end
	cmpl	$1801912989, -20(%rbp)  # imm = 0x6B67029D
	jne	.LBB115_11
.LBB115_10:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB115_11:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB115_10
.Lfunc_end115:
	.size	get_smallest_poc.52, .Lfunc_end115-get_smallest_poc.52
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_pic_num_x.53
	.type	get_pic_num_x.53,@function
get_pic_num_x.53:                       # @get_pic_num_x.53
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1025712020, -32(%rbp)  # imm = 0x3D231F94
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB116_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	movl	6360(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB116_3
.LBB116_2:                              # %if.else
	movq	-24(%rbp), %rax
	movl	6360(%rax), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
.LBB116_3:                              # %if.end
	movl	-12(%rbp), %ebx
	movl	-28(%rbp), %eax
	addl	$1, %eax
	subl	%eax, %ebx
	cmpl	$1025712020, -32(%rbp)  # imm = 0x3D231F94
	jne	.LBB116_5
.LBB116_4:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB116_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB116_4
.Lfunc_end116:
	.size	get_pic_num_x.53, .Lfunc_end116-get_pic_num_x.53
	.cfi_endproc
                                        # -- End function
	.globl	alloc_colocated.54      # -- Begin function alloc_colocated.54
	.p2align	4, 0x90
	.type	alloc_colocated.54,@function
alloc_colocated.54:                     # @alloc_colocated.54
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$2118677763, -32(%rbp)  # imm = 0x7E487503
	movl	%edi, -12(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -28(%rbp)
	movl	$1, %edi
	movl	$4880, %esi             # imm = 0x1310
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -24(%rbp)
	cmpq	-24(%rbp), %rcx
	jne	.LBB117_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.21, %rdi
	callq	no_mem_exit
.LBB117_2:                              # %if.end
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-16(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-24(%rbp), %rdi
	addq	$1600, %rdi             # imm = 0x640
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$1608, %rdi             # imm = 0x648
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$1616, %rdi             # imm = 0x650
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$1624, %rdi             # imm = 0x658
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-24(%rbp), %rdi
	addq	$4872, %rdi             # imm = 0x1308
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	cmpl	$0, -28(%rbp)
	je	.LBB117_4
# %bb.3:                                # %if.then17
	movq	-24(%rbp), %rdi
	addq	$3216, %rdi             # imm = 0xC90
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$3224, %rdi             # imm = 0xC98
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$3232, %rdi             # imm = 0xCA0
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$3240, %rdi             # imm = 0xCA8
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-24(%rbp), %rdi
	addq	$4832, %rdi             # imm = 0x12E0
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$4840, %rdi             # imm = 0x12E8
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$4848, %rdi             # imm = 0x12F0
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$4856, %rdi             # imm = 0x12F8
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
.LBB117_4:                              # %if.end50
	movl	-28(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rbx
	cmpl	$2118677763, -32(%rbp)  # imm = 0x7E487503
	jne	.LBB117_6
.LBB117_5:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB117_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB117_5
.Lfunc_end117:
	.size	alloc_colocated.54, .Lfunc_end117-alloc_colocated.54
	.cfi_endproc
                                        # -- End function
	.globl	fill_frame_num_gap.55   # -- Begin function fill_frame_num_gap.55
	.p2align	4, 0x90
	.type	fill_frame_num_gap.55,@function
fill_frame_num_gap.55:                  # @fill_frame_num_gap.55
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1540585253, -32(%rbp)  # imm = 0x5BD37725
	movq	%rdi, -8(%rbp)
	movq	$0, -24(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -28(%rbp)
	movq	-8(%rbp), %rax
	movl	72496(%rax), %eax
	movl	%eax, -36(%rbp)
	movq	-8(%rbp), %rax
	movl	$1, 72496(%rax)
	movq	-8(%rbp), %rax
	movl	72648(%rax), %eax
	addl	$1, %eax
	cltd
	idivl	-28(%rbp)
	movl	%edx, -12(%rbp)
	movq	-8(%rbp), %rax
	movl	72464(%rax), %eax
	movl	%eax, -40(%rbp)
.LBB118_1:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-40(%rbp), %eax
	cmpl	-12(%rbp), %eax
	je	.LBB118_3
# %bb.2:                                # %while.body
                                        #   in Loop: Header=BB118_1 Depth=1
	movq	-8(%rbp), %rax
	movl	52(%rax), %esi
	movq	-8(%rbp), %rax
	movl	60(%rax), %edx
	movq	-8(%rbp), %rax
	movl	56(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	64(%rax), %r8d
	xorl	%edi, %edi
	callq	alloc_storable_picture
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	$1, 6412(%rax)
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 6364(%rcx)
	movq	-24(%rbp), %rax
	movl	$1, 6388(%rax)
	movq	-24(%rbp), %rax
	movl	$1, 6384(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 72500(%rax)
	movq	-24(%rbp), %rdi
	callq	store_picture_in_dpb
	movq	$0, -24(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	-28(%rbp)
	movl	%edx, -12(%rbp)
	jmp	.LBB118_1
.LBB118_3:                              # %while.end
	movl	-36(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 72496(%rcx)
	cmpl	$1540585253, -32(%rbp)  # imm = 0x5BD37725
	jne	.LBB118_5
.LBB118_4:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB118_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB118_4
.Lfunc_end118:
	.size	fill_frame_num_gap.55, .Lfunc_end118-fill_frame_num_gap.55
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function reorder_long_term.56
	.type	reorder_long_term.56,@function
reorder_long_term.56:                   # @reorder_long_term.56
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$822318601, -44(%rbp)   # imm = 0x31039609
	movq	%rdi, -16(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -28(%rbp)
	movq	%rcx, -40(%rbp)
	movl	-28(%rbp), %edi
	callq	get_long_term_pic
	movq	%rax, -56(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB119_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-40(%rbp), %rcx
	cmpl	(%rcx), %eax
	jle	.LBB119_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB119_1 Depth=1
	movq	-16(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB119_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_1
.LBB119_4:                              # %for.end
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movl	(%rdx), %esi
	movl	%esi, %edi
	addl	$1, %edi
	movl	%edi, (%rdx)
	movslq	%esi, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB119_5:                              # %for.cond5
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jg	.LBB119_11
# %bb.6:                                # %for.body8
                                        #   in Loop: Header=BB119_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB119_8
# %bb.7:                                # %lor.lhs.false
                                        #   in Loop: Header=BB119_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6368(%rax), %eax
	cmpl	-28(%rbp), %eax
	je	.LBB119_9
.LBB119_8:                              # %if.then
                                        #   in Loop: Header=BB119_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB119_9:                              # %if.end
                                        #   in Loop: Header=BB119_5 Depth=1
	jmp	.LBB119_10
.LBB119_10:                             # %for.inc19
                                        #   in Loop: Header=BB119_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_5
.LBB119_11:                             # %for.end21
	cmpl	$822318601, -44(%rbp)   # imm = 0x31039609
	jne	.LBB119_13
.LBB119_12:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB119_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB119_12
.Lfunc_end119:
	.size	reorder_long_term.56, .Lfunc_end119-reorder_long_term.56
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function gen_pic_list_from_frame_list.57
	.type	gen_pic_list_from_frame_list.57,@function
gen_pic_list_from_frame_list.57:        # @gen_pic_list_from_frame_list.57
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$50603031, -64(%rbp)    # imm = 0x3042417
	movl	%edi, -44(%rbp)
	movq	%rsi, -24(%rbp)
	movl	%edx, -12(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -32(%rbp)
	movl	%r9d, -60(%rbp)
	movl	$0, -8(%rbp)
	movl	$0, -4(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB120_2
# %bb.1:                                # %if.then
	movabsq	$is_long_ref, %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB120_3
.LBB120_2:                              # %if.else
	movabsq	$is_short_ref, %rax
	movq	%rax, -40(%rbp)
.LBB120_3:                              # %if.end
	cmpl	$1, -44(%rbp)
	jne	.LBB120_28
# %bb.4:                                # %if.then1
	jmp	.LBB120_5
.LBB120_5:                              # %while.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_9 Depth 2
                                        #     Child Loop BB120_18 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	movb	$1, %al
	jl	.LBB120_7
# %bb.6:                                # %lor.rhs
                                        #   in Loop: Header=BB120_5 Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	setl	%al
.LBB120_7:                              # %lor.end
                                        #   in Loop: Header=BB120_5 Depth=1
	testb	$1, %al
	jne	.LBB120_8
	jmp	.LBB120_27
.LBB120_8:                              # %while.body
                                        #   in Loop: Header=BB120_5 Depth=1
	jmp	.LBB120_9
.LBB120_9:                              # %for.cond
                                        #   Parent Loop BB120_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB120_16
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB120_9 Depth=2
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB120_14
# %bb.11:                               # %if.then6
                                        #   in Loop: Header=BB120_9 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB120_13
# %bb.12:                               # %if.then10
                                        #   in Loop: Header=BB120_5 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB120_17
.LBB120_13:                             # %if.end17
                                        #   in Loop: Header=BB120_9 Depth=2
	jmp	.LBB120_14
.LBB120_14:                             # %if.end18
                                        #   in Loop: Header=BB120_9 Depth=2
	jmp	.LBB120_15
.LBB120_15:                             # %for.inc
                                        #   in Loop: Header=BB120_9 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB120_9
.LBB120_16:                             # %for.end.loopexit
                                        #   in Loop: Header=BB120_5 Depth=1
	jmp	.LBB120_17
.LBB120_17:                             # %for.end
                                        #   in Loop: Header=BB120_5 Depth=1
	jmp	.LBB120_18
.LBB120_18:                             # %for.cond20
                                        #   Parent Loop BB120_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB120_25
# %bb.19:                               # %for.body22
                                        #   in Loop: Header=BB120_18 Depth=2
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB120_23
# %bb.20:                               # %if.then28
                                        #   in Loop: Header=BB120_18 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB120_22
# %bb.21:                               # %if.then33
                                        #   in Loop: Header=BB120_5 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB120_26
.LBB120_22:                             # %if.end41
                                        #   in Loop: Header=BB120_18 Depth=2
	jmp	.LBB120_23
.LBB120_23:                             # %if.end42
                                        #   in Loop: Header=BB120_18 Depth=2
	jmp	.LBB120_24
.LBB120_24:                             # %for.inc43
                                        #   in Loop: Header=BB120_18 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB120_18
.LBB120_25:                             # %for.end45.loopexit
                                        #   in Loop: Header=BB120_5 Depth=1
	jmp	.LBB120_26
.LBB120_26:                             # %for.end45
                                        #   in Loop: Header=BB120_5 Depth=1
	jmp	.LBB120_5
.LBB120_27:                             # %while.end
	jmp	.LBB120_28
.LBB120_28:                             # %if.end46
	cmpl	$2, -44(%rbp)
	jne	.LBB120_53
# %bb.29:                               # %if.then48
	jmp	.LBB120_30
.LBB120_30:                             # %while.cond49
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_34 Depth 2
                                        #     Child Loop BB120_43 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	movb	$1, %al
	jl	.LBB120_32
# %bb.31:                               # %lor.rhs51
                                        #   in Loop: Header=BB120_30 Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	setl	%al
.LBB120_32:                             # %lor.end53
                                        #   in Loop: Header=BB120_30 Depth=1
	testb	$1, %al
	jne	.LBB120_33
	jmp	.LBB120_52
.LBB120_33:                             # %while.body54
                                        #   in Loop: Header=BB120_30 Depth=1
	jmp	.LBB120_34
.LBB120_34:                             # %for.cond55
                                        #   Parent Loop BB120_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB120_41
# %bb.35:                               # %for.body57
                                        #   in Loop: Header=BB120_34 Depth=2
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB120_39
# %bb.36:                               # %if.then63
                                        #   in Loop: Header=BB120_34 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB120_38
# %bb.37:                               # %if.then69
                                        #   in Loop: Header=BB120_30 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB120_42
.LBB120_38:                             # %if.end77
                                        #   in Loop: Header=BB120_34 Depth=2
	jmp	.LBB120_39
.LBB120_39:                             # %if.end78
                                        #   in Loop: Header=BB120_34 Depth=2
	jmp	.LBB120_40
.LBB120_40:                             # %for.inc79
                                        #   in Loop: Header=BB120_34 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB120_34
.LBB120_41:                             # %for.end81.loopexit
                                        #   in Loop: Header=BB120_30 Depth=1
	jmp	.LBB120_42
.LBB120_42:                             # %for.end81
                                        #   in Loop: Header=BB120_30 Depth=1
	jmp	.LBB120_43
.LBB120_43:                             # %for.cond82
                                        #   Parent Loop BB120_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB120_50
# %bb.44:                               # %for.body84
                                        #   in Loop: Header=BB120_43 Depth=2
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB120_48
# %bb.45:                               # %if.then90
                                        #   in Loop: Header=BB120_43 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB120_47
# %bb.46:                               # %if.then96
                                        #   in Loop: Header=BB120_30 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB120_51
.LBB120_47:                             # %if.end104
                                        #   in Loop: Header=BB120_43 Depth=2
	jmp	.LBB120_48
.LBB120_48:                             # %if.end105
                                        #   in Loop: Header=BB120_43 Depth=2
	jmp	.LBB120_49
.LBB120_49:                             # %for.inc106
                                        #   in Loop: Header=BB120_43 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB120_43
.LBB120_50:                             # %for.end108.loopexit
                                        #   in Loop: Header=BB120_30 Depth=1
	jmp	.LBB120_51
.LBB120_51:                             # %for.end108
                                        #   in Loop: Header=BB120_30 Depth=1
	jmp	.LBB120_30
.LBB120_52:                             # %while.end109
	jmp	.LBB120_53
.LBB120_53:                             # %if.end110
	cmpl	$50603031, -64(%rbp)    # imm = 0x3042417
	jne	.LBB120_55
.LBB120_54:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB120_55:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB120_54
.Lfunc_end120:
	.size	gen_pic_list_from_frame_list.57, .Lfunc_end120-gen_pic_list_from_frame_list.57
	.cfi_endproc
                                        # -- End function
	.globl	init_dpb.58             # -- Begin function init_dpb.58
	.p2align	4, 0x90
	.type	init_dpb.58,@function
init_dpb.58:                            # @init_dpb.58
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1572030278, -12(%rbp)  # imm = 0x5DB34746
	cmpl	$0, dpb+48
	je	.LBB121_2
# %bb.1:                                # %if.then
	callq	free_dpb
.LBB121_2:                              # %if.end
	callq	getDpbSize
	movl	%eax, dpb+24
	movl	dpb+24, %eax
	movq	input, %rcx
	cmpl	36(%rcx), %eax
	jae	.LBB121_4
# %bb.3:                                # %if.then1
	movabsq	$.L.str.1, %rdi
	movl	$1000, %esi             # imm = 0x3E8
	callq	error
.LBB121_4:                              # %if.end2
	movl	$0, dpb+28
	movq	$0, dpb+56
	movl	$0, dpb+32
	movl	$0, dpb+36
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, dpb
	cmpq	dpb, %rcx
	jne	.LBB121_6
# %bb.5:                                # %if.then6
	movabsq	$.L.str.2, %rdi
	callq	no_mem_exit
.LBB121_6:                              # %if.end7
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, dpb+8
	cmpq	dpb+8, %rcx
	jne	.LBB121_8
# %bb.7:                                # %if.then12
	movabsq	$.L.str.3, %rdi
	callq	no_mem_exit
.LBB121_8:                              # %if.end13
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, dpb+16
	cmpq	dpb+16, %rcx
	jne	.LBB121_10
# %bb.9:                                # %if.then18
	movabsq	$.L.str.4, %rdi
	callq	no_mem_exit
.LBB121_10:                             # %if.end19
	movl	$0, -4(%rbp)
.LBB121_11:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+24, %eax
	jae	.LBB121_14
# %bb.12:                               # %for.body
                                        #   in Loop: Header=BB121_11 Depth=1
	callq	alloc_frame_store
	movq	dpb, %rcx
	movl	-4(%rbp), %edx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB121_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB121_11
.LBB121_14:                             # %for.end
	movl	$0, -4(%rbp)
.LBB121_15:                             # %for.cond27
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$6, -4(%rbp)
	jae	.LBB121_20
# %bb.16:                               # %for.body30
                                        #   in Loop: Header=BB121_15 Depth=1
	movl	$33, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movl	-4(%rbp), %edx
	movq	%rax, listX(,%rdx,8)
	movl	-4(%rbp), %eax
	cmpq	listX(,%rax,8), %rcx
	jne	.LBB121_18
# %bb.17:                               # %if.then38
                                        #   in Loop: Header=BB121_15 Depth=1
	movabsq	$.L.str.5, %rdi
	callq	no_mem_exit
.LBB121_18:                             # %if.end39
                                        #   in Loop: Header=BB121_15 Depth=1
	jmp	.LBB121_19
.LBB121_19:                             # %for.inc40
                                        #   in Loop: Header=BB121_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB121_15
.LBB121_20:                             # %for.end42
	movl	$0, -8(%rbp)
.LBB121_21:                             # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_23 Depth 2
	cmpl	$6, -8(%rbp)
	jae	.LBB121_28
# %bb.22:                               # %for.body46
                                        #   in Loop: Header=BB121_21 Depth=1
	movl	$0, -4(%rbp)
.LBB121_23:                             # %for.cond47
                                        #   Parent Loop BB121_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$33, -4(%rbp)
	jae	.LBB121_26
# %bb.24:                               # %for.body50
                                        #   in Loop: Header=BB121_23 Depth=2
	movl	-8(%rbp), %eax
	movq	listX(,%rax,8), %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.25:                               # %for.inc55
                                        #   in Loop: Header=BB121_23 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB121_23
.LBB121_26:                             # %for.end57
                                        #   in Loop: Header=BB121_21 Depth=1
	movl	-8(%rbp), %eax
	movl	$0, listXsize(,%rax,4)
# %bb.27:                               # %for.inc60
                                        #   in Loop: Header=BB121_21 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB121_21
.LBB121_28:                             # %for.end62
	movl	$-2147483648, dpb+40    # imm = 0x80000000
	movq	img, %rax
	movl	$0, 72644(%rax)
	movl	$1, dpb+48
	cmpl	$1572030278, -12(%rbp)  # imm = 0x5DB34746
	jne	.LBB121_30
.LBB121_29:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB121_30:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB121_29
.Lfunc_end121:
	.size	init_dpb.58, .Lfunc_end121-init_dpb.58
	.cfi_endproc
                                        # -- End function
	.globl	store_picture_in_dpb.59 # -- Begin function store_picture_in_dpb.59
	.p2align	4, 0x90
	.type	store_picture_in_dpb.59,@function
store_picture_in_dpb.59:                # @store_picture_in_dpb.59
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$2038064926, -20(%rbp)  # imm = 0x797A671E
	movq	%rdi, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 6380(%rcx)
	movq	img, %rax
	movl	$0, 72644(%rax)
	movq	img, %rax
	cmpl	$2, 28(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 72640(%rcx)
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	je	.LBB122_2
# %bb.1:                                # %if.then
	movq	-8(%rbp), %rdi
	callq	idr_memory_management
	jmp	.LBB122_6
.LBB122_2:                              # %if.else
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB122_5
# %bb.3:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72500(%rax)
	je	.LBB122_5
# %bb.4:                                # %if.then6
	movq	-8(%rbp), %rdi
	callq	adaptive_memory_management
.LBB122_5:                              # %if.end
	jmp	.LBB122_6
.LBB122_6:                              # %if.end7
	movq	-8(%rbp), %rax
	cmpl	$1, (%rax)
	je	.LBB122_8
# %bb.7:                                # %lor.lhs.false
	movq	-8(%rbp), %rax
	cmpl	$2, (%rax)
	jne	.LBB122_23
.LBB122_8:                              # %if.then14
	cmpq	$0, dpb+56
	je	.LBB122_22
# %bb.9:                                # %if.then16
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	cmpl	6364(%rcx), %eax
	jne	.LBB122_21
# %bb.10:                               # %if.then19
	movq	-8(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB122_12
# %bb.11:                               # %land.lhs.true23
	movq	dpb+56, %rax
	cmpl	$2, (%rax)
	je	.LBB122_14
.LBB122_12:                             # %lor.lhs.false26
	movq	-8(%rbp), %rax
	cmpl	$2, (%rax)
	jne	.LBB122_20
# %bb.13:                               # %land.lhs.true30
	movq	dpb+56, %rax
	cmpl	$1, (%rax)
	jne	.LBB122_20
.LBB122_14:                             # %if.then34
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB122_16
# %bb.15:                               # %land.lhs.true37
	movq	dpb+56, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB122_18
.LBB122_16:                             # %lor.lhs.false40
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	jne	.LBB122_19
# %bb.17:                               # %land.lhs.true43
	movq	dpb+56, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB122_19
.LBB122_18:                             # %if.then47
	movq	dpb+56, %rdi
	movq	-8(%rbp), %rsi
	callq	insert_picture_in_dpb
	callq	update_ref_list
	callq	update_ltref_list
	callq	dump_dpb
	movq	$0, dpb+56
	jmp	.LBB122_50
.LBB122_19:                             # %if.end48
	jmp	.LBB122_20
.LBB122_20:                             # %if.end49
	jmp	.LBB122_21
.LBB122_21:                             # %if.end50
	jmp	.LBB122_22
.LBB122_22:                             # %if.end51
	jmp	.LBB122_23
.LBB122_23:                             # %if.end52
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	jne	.LBB122_27
# %bb.24:                               # %land.lhs.true56
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB122_27
# %bb.25:                               # %land.lhs.true59
	movq	img, %rax
	cmpl	$0, 72500(%rax)
	jne	.LBB122_27
# %bb.26:                               # %if.then62
	movq	-8(%rbp), %rdi
	callq	sliding_window_memory_management
.LBB122_27:                             # %if.end63
	movl	dpb+28, %eax
	cmpl	dpb+24, %eax
	jne	.LBB122_29
# %bb.28:                               # %if.then66
	callq	remove_unused_frame_from_dpb
.LBB122_29:                             # %if.end67
	jmp	.LBB122_30
.LBB122_30:                             # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	dpb+28, %eax
	cmpl	dpb+24, %eax
	jne	.LBB122_37
# %bb.31:                               # %while.body
                                        #   in Loop: Header=BB122_30 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	jne	.LBB122_36
# %bb.32:                               # %if.then72
                                        #   in Loop: Header=BB122_30 Depth=1
	leaq	-24(%rbp), %rdi
	leaq	-16(%rbp), %rsi
	callq	get_smallest_poc
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	cmpl	-16(%rbp), %eax
	je	.LBB122_34
# %bb.33:                               # %lor.lhs.false75
                                        #   in Loop: Header=BB122_30 Depth=1
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB122_35
.LBB122_34:                             # %if.then79
	movq	-8(%rbp), %rdi
	movl	p_dec, %esi
	callq	direct_output
	jmp	.LBB122_50
.LBB122_35:                             # %if.end80
                                        #   in Loop: Header=BB122_30 Depth=1
	jmp	.LBB122_36
.LBB122_36:                             # %if.end81
                                        #   in Loop: Header=BB122_30 Depth=1
	callq	output_one_frame_from_dpb
	jmp	.LBB122_30
.LBB122_37:                             # %while.end
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB122_46
# %bb.38:                               # %land.lhs.true84
	movq	-8(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB122_46
# %bb.39:                               # %if.then86
	movl	$0, -12(%rbp)
.LBB122_40:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB122_45
# %bb.41:                               # %for.body
                                        #   in Loop: Header=BB122_40 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	cmpl	6360(%rcx), %eax
	jne	.LBB122_43
# %bb.42:                               # %if.then93
                                        #   in Loop: Header=BB122_40 Depth=1
	movabsq	$.L.str.13, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB122_43:                             # %if.end94
                                        #   in Loop: Header=BB122_40 Depth=1
	jmp	.LBB122_44
.LBB122_44:                             # %for.inc
                                        #   in Loop: Header=BB122_40 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB122_40
.LBB122_45:                             # %for.end
	jmp	.LBB122_46
.LBB122_46:                             # %if.end95
	movq	dpb, %rax
	movl	dpb+28, %ecx
	movq	(%rax,%rcx,8), %rdi
	movq	-8(%rbp), %rsi
	callq	insert_picture_in_dpb
	movq	-8(%rbp), %rax
	cmpl	$0, (%rax)
	je	.LBB122_48
# %bb.47:                               # %if.then101
	movq	dpb, %rax
	movl	dpb+28, %ecx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, dpb+56
	jmp	.LBB122_49
.LBB122_48:                             # %if.else104
	movq	$0, dpb+56
.LBB122_49:                             # %if.end105
	movl	dpb+28, %eax
	addl	$1, %eax
	movl	%eax, dpb+28
	callq	update_ref_list
	callq	update_ltref_list
	callq	dump_dpb
.LBB122_50:                             # %return
	cmpl	$2038064926, -20(%rbp)  # imm = 0x797A671E
	jne	.LBB122_52
.LBB122_51:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB122_52:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB122_51
.Lfunc_end122:
	.size	store_picture_in_dpb.59, .Lfunc_end122-store_picture_in_dpb.59
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function is_used_for_reference.60
	.type	is_used_for_reference.60,@function
is_used_for_reference.60:               # @is_used_for_reference.60
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$870202881, -28(%rbp)   # imm = 0x33DE3E01
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, 4(%rax)
	je	.LBB123_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB123_17
.LBB123_2:                              # %if.end
	movq	-24(%rbp), %rax
	cmpl	$3, (%rax)
	jne	.LBB123_6
# %bb.3:                                # %if.then1
	movq	-24(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB123_5
# %bb.4:                                # %if.then3
	movl	$1, -12(%rbp)
	jmp	.LBB123_17
.LBB123_5:                              # %if.end4
	jmp	.LBB123_6
.LBB123_6:                              # %if.end5
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	jne	.LBB123_16
# %bb.7:                                # %if.then7
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB123_11
# %bb.8:                                # %if.then10
	movq	-24(%rbp), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB123_10
# %bb.9:                                # %if.then13
	movl	$1, -12(%rbp)
	jmp	.LBB123_17
.LBB123_10:                             # %if.end14
	jmp	.LBB123_11
.LBB123_11:                             # %if.end15
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB123_15
# %bb.12:                               # %if.then19
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB123_14
# %bb.13:                               # %if.then22
	movl	$1, -12(%rbp)
	jmp	.LBB123_17
.LBB123_14:                             # %if.end23
	jmp	.LBB123_15
.LBB123_15:                             # %if.end24
	jmp	.LBB123_16
.LBB123_16:                             # %if.end25
	movl	$0, -12(%rbp)
.LBB123_17:                             # %return
	movl	-12(%rbp), %ebx
	cmpl	$870202881, -28(%rbp)   # imm = 0x33DE3E01
	jne	.LBB123_19
.LBB123_18:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB123_19:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB123_18
.Lfunc_end123:
	.size	is_used_for_reference.60, .Lfunc_end123-is_used_for_reference.60
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function idr_memory_management.61
	.type	idr_memory_management.61,@function
idr_memory_management.61:               # @idr_memory_management.61
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$503341619, -20(%rbp)   # imm = 0x1E006233
	movq	%rdi, -16(%rbp)
	movq	img, %rax
	cmpl	$0, 72504(%rax)
	je	.LBB124_14
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB124_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB124_5
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB124_2 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	free_frame_store
	callq	alloc_frame_store
	movq	dpb, %rcx
	movl	-4(%rbp), %edx
	movq	%rax, (%rcx,%rdx,8)
# %bb.4:                                # %for.inc
                                        #   in Loop: Header=BB124_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB124_2
.LBB124_5:                              # %for.end
	movl	$0, -4(%rbp)
.LBB124_6:                              # %for.cond3
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB124_9
# %bb.7:                                # %for.body5
                                        #   in Loop: Header=BB124_6 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.8:                                # %for.inc8
                                        #   in Loop: Header=BB124_6 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB124_6
.LBB124_9:                              # %for.end10
	movl	$0, -4(%rbp)
.LBB124_10:                             # %for.cond11
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB124_13
# %bb.11:                               # %for.body13
                                        #   in Loop: Header=BB124_10 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.12:                               # %for.inc16
                                        #   in Loop: Header=BB124_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB124_10
.LBB124_13:                             # %for.end18
	movl	$0, dpb+28
	jmp	.LBB124_15
.LBB124_14:                             # %if.else
	callq	flush_dpb
.LBB124_15:                             # %if.end
	movq	$0, dpb+56
	callq	update_ref_list
	callq	update_ltref_list
	movl	$-2147483648, dpb+40    # imm = 0x80000000
	movq	img, %rax
	cmpl	$0, 72508(%rax)
	je	.LBB124_17
# %bb.16:                               # %if.then20
	movl	$0, dpb+44
	movq	-16(%rbp), %rax
	movl	$1, 6376(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6372(%rax)
	jmp	.LBB124_18
.LBB124_17:                             # %if.else21
	movl	$-1, dpb+44
	movq	-16(%rbp), %rax
	movl	$0, 6376(%rax)
.LBB124_18:                             # %if.end23
	cmpl	$503341619, -20(%rbp)   # imm = 0x1E006233
	jne	.LBB124_20
.LBB124_19:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB124_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB124_19
.Lfunc_end124:
	.size	idr_memory_management.61, .Lfunc_end124-idr_memory_management.61
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function remove_unused_frame_from_dpb.62
	.type	remove_unused_frame_from_dpb.62,@function
remove_unused_frame_from_dpb.62:        # @remove_unused_frame_from_dpb.62
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$326068621, -20(%rbp)   # imm = 0x136F698D
	movl	$0, -12(%rbp)
.LBB125_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB125_7
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB125_1 Depth=1
	movq	dpb, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 32(%rax)
	je	.LBB125_5
# %bb.3:                                # %land.lhs.true
                                        #   in Loop: Header=BB125_1 Depth=1
	movq	dpb, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	is_used_for_reference
	cmpl	$0, %eax
	jne	.LBB125_5
# %bb.4:                                # %if.then
	movl	-12(%rbp), %edi
	callq	remove_frame_from_dpb
	movl	$1, -16(%rbp)
	jmp	.LBB125_8
.LBB125_5:                              # %if.end
                                        #   in Loop: Header=BB125_1 Depth=1
	jmp	.LBB125_6
.LBB125_6:                              # %for.inc
                                        #   in Loop: Header=BB125_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB125_1
.LBB125_7:                              # %for.end
	movl	$0, -16(%rbp)
.LBB125_8:                              # %return
	movl	-16(%rbp), %ebx
	cmpl	$326068621, -20(%rbp)   # imm = 0x136F698D
	jne	.LBB125_10
.LBB125_9:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB125_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB125_9
.Lfunc_end125:
	.size	remove_unused_frame_from_dpb.62, .Lfunc_end125-remove_unused_frame_from_dpb.62
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function reorder_long_term.63
	.type	reorder_long_term.63,@function
reorder_long_term.63:                   # @reorder_long_term.63
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$972403291, -44(%rbp)   # imm = 0x39F5B25B
	movq	%rdi, -16(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -40(%rbp)
	movl	-24(%rbp), %edi
	callq	get_long_term_pic
	movq	%rax, -56(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB126_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-40(%rbp), %rcx
	cmpl	(%rcx), %eax
	jle	.LBB126_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB126_1 Depth=1
	movq	-16(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB126_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB126_1
.LBB126_4:                              # %for.end
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movl	(%rdx), %esi
	movl	%esi, %edi
	addl	$1, %edi
	movl	%edi, (%rdx)
	movslq	%esi, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB126_5:                              # %for.cond5
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jg	.LBB126_11
# %bb.6:                                # %for.body8
                                        #   in Loop: Header=BB126_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB126_8
# %bb.7:                                # %lor.lhs.false
                                        #   in Loop: Header=BB126_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6368(%rax), %eax
	cmpl	-24(%rbp), %eax
	je	.LBB126_9
.LBB126_8:                              # %if.then
                                        #   in Loop: Header=BB126_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movl	-28(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -28(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB126_9:                              # %if.end
                                        #   in Loop: Header=BB126_5 Depth=1
	jmp	.LBB126_10
.LBB126_10:                             # %for.inc19
                                        #   in Loop: Header=BB126_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB126_5
.LBB126_11:                             # %for.end21
	cmpl	$972403291, -44(%rbp)   # imm = 0x39F5B25B
	jne	.LBB126_13
.LBB126_12:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB126_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB126_12
.Lfunc_end126:
	.size	reorder_long_term.63, .Lfunc_end126-reorder_long_term.63
	.cfi_endproc
                                        # -- End function
	.globl	dpb_combine_field.64    # -- Begin function dpb_combine_field.64
	.p2align	4, 0x90
	.type	dpb_combine_field.64,@function
dpb_combine_field.64:                   # @dpb_combine_field.64
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1050397373, -32(%rbp)  # imm = 0x3E9BCABD
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %edx
	shll	$1, %edx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6404(%rax), %r8d
	shll	$1, %r8d
	xorl	%edi, %edi
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movl	$0, -4(%rbp)
.LBB127_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	6396(%rcx), %eax
	jge	.LBB127_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB127_1 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB127_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_1
.LBB127_4:                              # %for.end
	movl	$0, -4(%rbp)
.LBB127_5:                              # %for.cond28
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	6404(%rcx), %eax
	jge	.LBB127_8
# %bb.6:                                # %for.body33
                                        #   in Loop: Header=BB127_5 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.7:                                # %for.inc95
                                        #   in Loop: Header=BB127_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_5
.LBB127_8:                              # %for.end97
	movq	-16(%rbp), %rax
	movq	40(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB127_10
# %bb.9:                                # %cond.true
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	4(%rax), %ecx
	jmp	.LBB127_11
.LBB127_10:                             # %cond.false
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	4(%rax), %ecx
.LBB127_11:                             # %cond.end
	xorl	%eax, %eax
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 4(%rdx)
	movq	-16(%rbp), %rdx
	movl	%ecx, 36(%rdx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 8(%rdx)
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	56(%rdx), %rdx
	movl	%ecx, 8(%rdx)
	movq	-16(%rbp), %rdx
	movq	48(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	56(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	48(%rdx), %rdx
	movl	%ecx, 12(%rdx)
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 12(%rdx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	$0, 6380(%rcx)
	je	.LBB127_13
# %bb.12:                               # %land.rhs
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6380(%rax)
	setne	%al
.LBB127_13:                             # %land.end
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%eax, 6380(%rdx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB127_15
# %bb.14:                               # %land.rhs138
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	setne	%cl
.LBB127_15:                             # %land.end142
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB127_17
# %bb.16:                               # %if.then
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB127_17:                             # %if.end
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	$0, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6552(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6560(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6560(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6560(%rax)
	je	.LBB127_19
# %bb.18:                               # %if.then167
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6572(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6572(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6576(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6576(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6564(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6564(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6568(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6568(%rcx)
.LBB127_19:                             # %if.end180
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movl	$0, -4(%rbp)
.LBB127_20:                             # %for.cond186
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	listXsize+4, %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB127_26
# %bb.21:                               # %for.body190
                                        #   in Loop: Header=BB127_20 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %esi
	idivq	%rsi
	movq	%rax, %rcx
	shlq	$1, %rcx
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	288(%rax,%rdx,8), %rax
	cqto
	idivq	%rsi
	shlq	$1, %rax
	cmpq	%rax, %rcx
	jge	.LBB127_23
# %bb.22:                               # %cond.true208
                                        #   in Loop: Header=BB127_20 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
	jmp	.LBB127_24
.LBB127_23:                             # %cond.false217
                                        #   in Loop: Header=BB127_20 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
.LBB127_24:                             # %cond.end226
                                        #   in Loop: Header=BB127_20 Depth=1
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, 288(%rcx,%rdx,8)
# %bb.25:                               # %for.inc233
                                        #   in Loop: Header=BB127_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_20
.LBB127_26:                             # %for.end235
	movl	$0, -4(%rbp)
.LBB127_27:                             # %for.cond236
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	listXsize, %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB127_33
# %bb.28:                               # %for.body241
                                        #   in Loop: Header=BB127_27 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %esi
	idivq	%rsi
	movq	%rax, %rcx
	shlq	$1, %rcx
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	24(%rax,%rdx,8), %rax
	cqto
	idivq	%rsi
	shlq	$1, %rax
	cmpq	%rax, %rcx
	jge	.LBB127_30
# %bb.29:                               # %cond.true260
                                        #   in Loop: Header=BB127_27 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
	jmp	.LBB127_31
.LBB127_30:                             # %cond.false269
                                        #   in Loop: Header=BB127_27 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
.LBB127_31:                             # %cond.end278
                                        #   in Loop: Header=BB127_27 Depth=1
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, 24(%rcx,%rdx,8)
# %bb.32:                               # %for.inc285
                                        #   in Loop: Header=BB127_27 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_27
.LBB127_33:                             # %for.end287
	movl	$0, -4(%rbp)
.LBB127_34:                             # %for.cond288
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_36 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB127_65
# %bb.35:                               # %for.body294
                                        #   in Loop: Header=BB127_34 Depth=1
	movl	$0, -20(%rbp)
.LBB127_36:                             # %for.cond295
                                        #   Parent Loop BB127_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB127_63
# %bb.37:                               # %for.body301
                                        #   in Loop: Header=BB127_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movb	$1, (%rdi,%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movb	$1, (%rdi,%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %di
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rsi,%rax,8), %rax
	movw	%di, (%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -28(%rbp)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -28(%rbp)
	jl	.LBB127_39
# %bb.38:                               # %cond.true439
                                        #   in Loop: Header=BB127_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB127_40
.LBB127_39:                             # %cond.false445
                                        #   in Loop: Header=BB127_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB127_40
.LBB127_40:                             # %cond.end446
                                        #   in Loop: Header=BB127_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB127_42
# %bb.41:                               # %cond.true456
                                        #   in Loop: Header=BB127_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB127_43
.LBB127_42:                             # %cond.false462
                                        #   in Loop: Header=BB127_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB127_43
.LBB127_43:                             # %cond.end463
                                        #   in Loop: Header=BB127_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB127_45
# %bb.44:                               # %cond.true474
                                        #   in Loop: Header=BB127_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	1608(%rax,%rcx,8), %r8
	jmp	.LBB127_46
.LBB127_45:                             # %cond.false479
                                        #   in Loop: Header=BB127_36 Depth=2
	xorl	%r8d, %r8d
	jmp	.LBB127_46
.LBB127_46:                             # %cond.end480
                                        #   in Loop: Header=BB127_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB127_48
# %bb.47:                               # %cond.true495
                                        #   in Loop: Header=BB127_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	1872(%rax,%rcx,8), %rdi
	jmp	.LBB127_49
.LBB127_48:                             # %cond.false501
                                        #   in Loop: Header=BB127_36 Depth=2
	xorl	%edi, %edi
	jmp	.LBB127_49
.LBB127_49:                             # %cond.end502
                                        #   in Loop: Header=BB127_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	%rdi, (%rsi,%rax,8)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -28(%rbp)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -28(%rbp)
	jl	.LBB127_51
# %bb.50:                               # %cond.true641
                                        #   in Loop: Header=BB127_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB127_52
.LBB127_51:                             # %cond.false647
                                        #   in Loop: Header=BB127_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB127_52
.LBB127_52:                             # %cond.end648
                                        #   in Loop: Header=BB127_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB127_54
# %bb.53:                               # %cond.true659
                                        #   in Loop: Header=BB127_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB127_55
.LBB127_54:                             # %cond.false665
                                        #   in Loop: Header=BB127_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB127_55
.LBB127_55:                             # %cond.end666
                                        #   in Loop: Header=BB127_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB127_57
# %bb.56:                               # %cond.true677
                                        #   in Loop: Header=BB127_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	1608(%rax,%rcx,8), %r8
	jmp	.LBB127_58
.LBB127_57:                             # %cond.false683
                                        #   in Loop: Header=BB127_36 Depth=2
	movq	$-1, %r8
	jmp	.LBB127_58
.LBB127_58:                             # %cond.end684
                                        #   in Loop: Header=BB127_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB127_60
# %bb.59:                               # %cond.true700
                                        #   in Loop: Header=BB127_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	1872(%rax,%rcx,8), %r8
	jmp	.LBB127_61
.LBB127_60:                             # %cond.false706
                                        #   in Loop: Header=BB127_36 Depth=2
	movq	$-1, %r8
	jmp	.LBB127_61
.LBB127_61:                             # %cond.end707
                                        #   in Loop: Header=BB127_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
# %bb.62:                               # %for.inc721
                                        #   in Loop: Header=BB127_36 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB127_36
.LBB127_63:                             # %for.end723
                                        #   in Loop: Header=BB127_34 Depth=1
	jmp	.LBB127_64
.LBB127_64:                             # %for.inc724
                                        #   in Loop: Header=BB127_34 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_34
.LBB127_65:                             # %for.end726
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB127_67
# %bb.66:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB127_76
.LBB127_67:                             # %if.then729
	movl	$0, -4(%rbp)
.LBB127_68:                             # %for.cond730
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_70 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB127_75
# %bb.69:                               # %for.body736
                                        #   in Loop: Header=BB127_68 Depth=1
	movl	$0, -20(%rbp)
.LBB127_70:                             # %for.cond737
                                        #   Parent Loop BB127_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB127_73
# %bb.71:                               # %for.body743
                                        #   in Loop: Header=BB127_70 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.72:                               # %for.inc756
                                        #   in Loop: Header=BB127_70 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB127_70
.LBB127_73:                             # %for.end758
                                        #   in Loop: Header=BB127_68 Depth=1
	jmp	.LBB127_74
.LBB127_74:                             # %for.inc759
                                        #   in Loop: Header=BB127_68 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_68
.LBB127_75:                             # %for.end761
	jmp	.LBB127_76
.LBB127_76:                             # %if.end762
	cmpl	$1050397373, -32(%rbp)  # imm = 0x3E9BCABD
	jne	.LBB127_78
.LBB127_77:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB127_78:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB127_77
.Lfunc_end127:
	.size	dpb_combine_field.64, .Lfunc_end127-dpb_combine_field.64
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_poc_asc.65
	.type	compare_pic_by_poc_asc.65,@function
compare_pic_by_poc_asc.65:              # @compare_pic_by_poc_asc.65
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1950168566, -16(%rbp)  # imm = 0x743D35F6
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB128_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB128_5
.LBB128_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB128_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB128_5
.LBB128_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB128_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1950168566, -16(%rbp)  # imm = 0x743D35F6
	jne	.LBB128_7
.LBB128_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB128_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB128_6
.Lfunc_end128:
	.size	compare_pic_by_poc_asc.65, .Lfunc_end128-compare_pic_by_poc_asc.65
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_smallest_poc.66
	.type	get_smallest_poc.66,@function
get_smallest_poc.66:                    # @get_smallest_poc.66
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1956209351, -20(%rbp)  # imm = 0x749962C7
	movq	%rdi, -16(%rbp)
	movq	%rsi, -32(%rbp)
	cmpl	$1, dpb+28
	jae	.LBB129_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.28, %rdi
	movl	$150, %esi
	callq	error
.LBB129_2:                              # %if.end
	movq	-32(%rbp), %rax
	movl	$-1, (%rax)
	movq	-16(%rbp), %rax
	movl	$2147483647, (%rax)     # imm = 0x7FFFFFFF
	movl	$0, -4(%rbp)
.LBB129_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB129_9
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB129_3 Depth=1
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	dpb, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jle	.LBB129_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB129_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 32(%rax)
	jne	.LBB129_7
# %bb.6:                                # %if.then6
                                        #   in Loop: Header=BB129_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	36(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB129_7:                              # %if.end10
                                        #   in Loop: Header=BB129_3 Depth=1
	jmp	.LBB129_8
.LBB129_8:                              # %for.inc
                                        #   in Loop: Header=BB129_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB129_3
.LBB129_9:                              # %for.end
	cmpl	$1956209351, -20(%rbp)  # imm = 0x749962C7
	jne	.LBB129_11
.LBB129_10:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB129_11:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB129_10
.Lfunc_end129:
	.size	get_smallest_poc.66, .Lfunc_end129-get_smallest_poc.66
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function is_short_term_reference.67
	.type	is_short_term_reference.67,@function
is_short_term_reference.67:             # @is_short_term_reference.67
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$747481881, -24(%rbp)   # imm = 0x2C8DAB19
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$3, (%rax)
	jne	.LBB130_5
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB130_4
# %bb.2:                                # %land.lhs.true
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB130_4
# %bb.3:                                # %if.then3
	movl	$1, -20(%rbp)
	jmp	.LBB130_18
.LBB130_4:                              # %if.end
	jmp	.LBB130_5
.LBB130_5:                              # %if.end4
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	jne	.LBB130_17
# %bb.6:                                # %if.then6
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB130_11
# %bb.7:                                # %if.then9
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB130_10
# %bb.8:                                # %land.lhs.true12
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB130_10
# %bb.9:                                # %if.then16
	movl	$1, -20(%rbp)
	jmp	.LBB130_18
.LBB130_10:                             # %if.end17
	jmp	.LBB130_11
.LBB130_11:                             # %if.end18
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB130_16
# %bb.12:                               # %if.then22
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB130_15
# %bb.13:                               # %land.lhs.true25
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB130_15
# %bb.14:                               # %if.then29
	movl	$1, -20(%rbp)
	jmp	.LBB130_18
.LBB130_15:                             # %if.end30
	jmp	.LBB130_16
.LBB130_16:                             # %if.end31
	jmp	.LBB130_17
.LBB130_17:                             # %if.end32
	movl	$0, -20(%rbp)
.LBB130_18:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$747481881, -24(%rbp)   # imm = 0x2C8DAB19
	jne	.LBB130_20
.LBB130_19:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB130_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB130_19
.Lfunc_end130:
	.size	is_short_term_reference.67, .Lfunc_end130-is_short_term_reference.67
	.cfi_endproc
                                        # -- End function
	.globl	reorder_ref_pic_list.68 # -- Begin function reorder_ref_pic_list.68
	.p2align	4, 0x90
	.type	reorder_ref_pic_list.68,@function
reorder_ref_pic_list.68:                # @reorder_ref_pic_list.68
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$1061585142, -60(%rbp)  # imm = 0x3F4680F6
	movq	%rdi, -72(%rbp)
	movq	%rsi, -88(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -32(%rbp)
	movq	%r9, -80(%rbp)
	movl	$0, -36(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB131_2
# %bb.1:                                # %if.then
	movl	-44(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	72464(%rax), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB131_3
.LBB131_2:                              # %if.else
	movl	-44(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	72464(%rax), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB131_3:                              # %if.end
	movl	-20(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB131_4:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$3, (%rax,%rcx,4)
	je	.LBB131_24
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB131_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$3, (%rax,%rcx,4)
	jle	.LBB131_7
# %bb.6:                                # %if.then8
                                        #   in Loop: Header=BB131_4 Depth=1
	movabsq	$.L.str.12, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB131_7:                              # %if.end9
                                        #   in Loop: Header=BB131_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$2, (%rax,%rcx,4)
	jge	.LBB131_21
# %bb.8:                                # %if.then13
                                        #   in Loop: Header=BB131_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	jne	.LBB131_13
# %bb.9:                                # %if.then17
                                        #   in Loop: Header=BB131_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB131_11
# %bb.10:                               # %if.then22
                                        #   in Loop: Header=BB131_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	addl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB131_12
.LBB131_11:                             # %if.else28
                                        #   in Loop: Header=BB131_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -8(%rbp)
.LBB131_12:                             # %if.end33
                                        #   in Loop: Header=BB131_4 Depth=1
	jmp	.LBB131_17
.LBB131_13:                             # %if.else34
                                        #   in Loop: Header=BB131_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	cmpl	-16(%rbp), %eax
	jl	.LBB131_15
# %bb.14:                               # %if.then40
                                        #   in Loop: Header=BB131_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB131_16
.LBB131_15:                             # %if.else46
                                        #   in Loop: Header=BB131_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -8(%rbp)
.LBB131_16:                             # %if.end51
                                        #   in Loop: Header=BB131_4 Depth=1
	jmp	.LBB131_17
.LBB131_17:                             # %if.end52
                                        #   in Loop: Header=BB131_4 Depth=1
	movl	-8(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jle	.LBB131_19
# %bb.18:                               # %if.then54
                                        #   in Loop: Header=BB131_4 Depth=1
	movl	-8(%rbp), %eax
	subl	-16(%rbp), %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB131_20
.LBB131_19:                             # %if.else56
                                        #   in Loop: Header=BB131_4 Depth=1
	movl	-8(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB131_20:                             # %if.end57
                                        #   in Loop: Header=BB131_4 Depth=1
	movq	-72(%rbp), %rdi
	movl	-24(%rbp), %esi
	movl	-40(%rbp), %edx
	leaq	-36(%rbp), %rcx
	callq	reorder_short_term
	jmp	.LBB131_22
.LBB131_21:                             # %if.else58
                                        #   in Loop: Header=BB131_4 Depth=1
	movq	-72(%rbp), %rdi
	movl	-24(%rbp), %esi
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %edx
	leaq	-36(%rbp), %rcx
	callq	reorder_long_term
.LBB131_22:                             # %if.end61
                                        #   in Loop: Header=BB131_4 Depth=1
	jmp	.LBB131_23
.LBB131_23:                             # %for.inc
                                        #   in Loop: Header=BB131_4 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB131_4
.LBB131_24:                             # %for.end
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$1061585142, -60(%rbp)  # imm = 0x3F4680F6
	jne	.LBB131_26
.LBB131_25:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB131_26:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB131_25
.Lfunc_end131:
	.size	reorder_ref_pic_list.68, .Lfunc_end131-reorder_ref_pic_list.68
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_unmark_short_term_for_reference.69
	.type	mm_unmark_short_term_for_reference.69,@function
mm_unmark_short_term_for_reference.69:  # @mm_unmark_short_term_for_reference.69
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$533513953, -16(%rbp)   # imm = 0x1FCCC6E1
	movq	%rdi, -24(%rbp)
	movl	%esi, -12(%rbp)
	movq	-24(%rbp), %rdi
	movl	-12(%rbp), %esi
	callq	get_pic_num_x
	movl	%eax, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB132_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB132_26
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB132_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB132_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB132_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB132_8
# %bb.4:                                # %land.lhs.true
                                        #   in Loop: Header=BB132_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB132_8
# %bb.5:                                # %if.then6
                                        #   in Loop: Header=BB132_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB132_7
# %bb.6:                                # %if.then10
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_reference
	jmp	.LBB132_27
.LBB132_7:                              # %if.end
                                        #   in Loop: Header=BB132_1 Depth=1
	jmp	.LBB132_8
.LBB132_8:                              # %if.end13
                                        #   in Loop: Header=BB132_1 Depth=1
	jmp	.LBB132_24
.LBB132_9:                              # %if.else
                                        #   in Loop: Header=BB132_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB132_16
# %bb.10:                               # %land.lhs.true17
                                        #   in Loop: Header=BB132_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB132_16
# %bb.11:                               # %if.then23
                                        #   in Loop: Header=BB132_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB132_15
# %bb.12:                               # %if.then28
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$2, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB132_14
# %bb.13:                               # %if.then39
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
.LBB132_14:                             # %if.end44
	jmp	.LBB132_27
.LBB132_15:                             # %if.end45
                                        #   in Loop: Header=BB132_1 Depth=1
	jmp	.LBB132_16
.LBB132_16:                             # %if.end46
                                        #   in Loop: Header=BB132_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB132_23
# %bb.17:                               # %land.lhs.true52
                                        #   in Loop: Header=BB132_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	jne	.LBB132_23
# %bb.18:                               # %if.then58
                                        #   in Loop: Header=BB132_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB132_22
# %bb.19:                               # %if.then63
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB132_21
# %bb.20:                               # %if.then76
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
.LBB132_21:                             # %if.end81
	jmp	.LBB132_27
.LBB132_22:                             # %if.end82
                                        #   in Loop: Header=BB132_1 Depth=1
	jmp	.LBB132_23
.LBB132_23:                             # %if.end83
                                        #   in Loop: Header=BB132_1 Depth=1
	jmp	.LBB132_24
.LBB132_24:                             # %if.end84
                                        #   in Loop: Header=BB132_1 Depth=1
	jmp	.LBB132_25
.LBB132_25:                             # %for.inc
                                        #   in Loop: Header=BB132_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB132_1
.LBB132_26:                             # %for.end.loopexit
	jmp	.LBB132_27
.LBB132_27:                             # %for.end
	cmpl	$533513953, -16(%rbp)   # imm = 0x1FCCC6E1
	jne	.LBB132_29
.LBB132_28:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB132_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB132_28
.Lfunc_end132:
	.size	mm_unmark_short_term_for_reference.69, .Lfunc_end132-mm_unmark_short_term_for_reference.69
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function insert_picture_in_dpb.70
	.type	insert_picture_in_dpb.70,@function
insert_picture_in_dpb.70:               # @insert_picture_in_dpb.70
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$625206697, -20(%rbp)   # imm = 0x2543E5A9
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB133_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rdi
	callq	UnifiedOneForthPix
.LBB133_2:                              # %if.end
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	testl	%eax, %eax
	je	.LBB133_5
	jmp	.LBB133_3
.LBB133_3:                              # %if.end
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB133_10
	jmp	.LBB133_4
.LBB133_4:                              # %if.end
	subl	$2, %eax
	je	.LBB133_18
	jmp	.LBB133_26
.LBB133_5:                              # %sw.bb
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movq	-8(%rbp), %rax
	movl	$3, (%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB133_9
# %bb.6:                                # %if.then3
	movq	-8(%rbp), %rax
	movl	$3, 4(%rax)
	movq	-8(%rbp), %rax
	movl	$3, 12(%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB133_8
# %bb.7:                                # %if.then5
	movq	-8(%rbp), %rax
	movl	$3, 8(%rax)
.LBB133_8:                              # %if.end7
	jmp	.LBB133_9
.LBB133_9:                              # %if.end8
	movq	-8(%rbp), %rdi
	callq	dpb_split_field
	jmp	.LBB133_26
.LBB133_10:                             # %sw.bb9
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-8(%rbp), %rax
	movl	(%rax), %ecx
	orl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB133_14
# %bb.11:                               # %if.then13
	movq	-8(%rbp), %rax
	movl	4(%rax), %ecx
	orl	$1, %ecx
	movl	%ecx, 4(%rax)
	movq	-8(%rbp), %rax
	movl	12(%rax), %ecx
	orl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB133_13
# %bb.12:                               # %if.then20
	movq	-8(%rbp), %rax
	movl	8(%rax), %ecx
	orl	$1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movl	6372(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 28(%rcx)
.LBB133_13:                             # %if.end24
	jmp	.LBB133_14
.LBB133_14:                             # %if.end25
	movq	-8(%rbp), %rax
	cmpl	$3, (%rax)
	jne	.LBB133_16
# %bb.15:                               # %if.then27
	movq	-8(%rbp), %rdi
	callq	dpb_combine_field
	jmp	.LBB133_17
.LBB133_16:                             # %if.else
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 36(%rcx)
	movq	-16(%rbp), %rdi
	callq	gen_field_ref_ids
.LBB133_17:                             # %if.end29
	jmp	.LBB133_26
.LBB133_18:                             # %sw.bb30
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 56(%rcx)
	movq	-8(%rbp), %rax
	movl	(%rax), %ecx
	orl	$2, %ecx
	movl	%ecx, (%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB133_22
# %bb.19:                               # %if.then35
	movq	-8(%rbp), %rax
	movl	4(%rax), %ecx
	orl	$2, %ecx
	movl	%ecx, 4(%rax)
	movq	-8(%rbp), %rax
	movl	12(%rax), %ecx
	orl	$2, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB133_21
# %bb.20:                               # %if.then42
	movq	-8(%rbp), %rax
	movl	8(%rax), %ecx
	orl	$2, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movl	6372(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 28(%rcx)
.LBB133_21:                             # %if.end47
	jmp	.LBB133_22
.LBB133_22:                             # %if.end48
	movq	-8(%rbp), %rax
	cmpl	$3, (%rax)
	jne	.LBB133_24
# %bb.23:                               # %if.then51
	movq	-8(%rbp), %rdi
	callq	dpb_combine_field
	jmp	.LBB133_25
.LBB133_24:                             # %if.else52
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 36(%rcx)
	movq	-16(%rbp), %rdi
	callq	gen_field_ref_ids
.LBB133_25:                             # %if.end55
	jmp	.LBB133_26
.LBB133_26:                             # %sw.epilog
	movq	-16(%rbp), %rax
	movl	6364(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	6384(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 32(%rcx)
	cmpl	$625206697, -20(%rbp)   # imm = 0x2543E5A9
	jne	.LBB133_28
.LBB133_27:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB133_28:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB133_27
.Lfunc_end133:
	.size	insert_picture_in_dpb.70, .Lfunc_end133-insert_picture_in_dpb.70
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function idr_memory_management.71
	.type	idr_memory_management.71,@function
idr_memory_management.71:               # @idr_memory_management.71
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$259216551, -20(%rbp)   # imm = 0xF7354A7
	movq	%rdi, -16(%rbp)
	movq	img, %rax
	cmpl	$0, 72504(%rax)
	je	.LBB134_14
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB134_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB134_5
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB134_2 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	free_frame_store
	callq	alloc_frame_store
	movq	dpb, %rcx
	movl	-4(%rbp), %edx
	movq	%rax, (%rcx,%rdx,8)
# %bb.4:                                # %for.inc
                                        #   in Loop: Header=BB134_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB134_2
.LBB134_5:                              # %for.end
	movl	$0, -4(%rbp)
.LBB134_6:                              # %for.cond3
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB134_9
# %bb.7:                                # %for.body5
                                        #   in Loop: Header=BB134_6 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.8:                                # %for.inc8
                                        #   in Loop: Header=BB134_6 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB134_6
.LBB134_9:                              # %for.end10
	movl	$0, -4(%rbp)
.LBB134_10:                             # %for.cond11
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB134_13
# %bb.11:                               # %for.body13
                                        #   in Loop: Header=BB134_10 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.12:                               # %for.inc16
                                        #   in Loop: Header=BB134_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB134_10
.LBB134_13:                             # %for.end18
	movl	$0, dpb+28
	jmp	.LBB134_15
.LBB134_14:                             # %if.else
	callq	flush_dpb
.LBB134_15:                             # %if.end
	movq	$0, dpb+56
	callq	update_ref_list
	callq	update_ltref_list
	movl	$-2147483648, dpb+40    # imm = 0x80000000
	movq	img, %rax
	cmpl	$0, 72508(%rax)
	je	.LBB134_17
# %bb.16:                               # %if.then20
	movl	$0, dpb+44
	movq	-16(%rbp), %rax
	movl	$1, 6376(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6372(%rax)
	jmp	.LBB134_18
.LBB134_17:                             # %if.else21
	movl	$-1, dpb+44
	movq	-16(%rbp), %rax
	movl	$0, 6376(%rax)
.LBB134_18:                             # %if.end23
	cmpl	$259216551, -20(%rbp)   # imm = 0xF7354A7
	jne	.LBB134_20
.LBB134_19:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB134_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB134_19
.Lfunc_end134:
	.size	idr_memory_management.71, .Lfunc_end134-idr_memory_management.71
	.cfi_endproc
                                        # -- End function
	.globl	dpb_combine_field.72    # -- Begin function dpb_combine_field.72
	.p2align	4, 0x90
	.type	dpb_combine_field.72,@function
dpb_combine_field.72:                   # @dpb_combine_field.72
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$445812098, -32(%rbp)   # imm = 0x1A928D82
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %edx
	shll	$1, %edx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6404(%rax), %r8d
	shll	$1, %r8d
	xorl	%edi, %edi
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movl	$0, -4(%rbp)
.LBB135_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	6396(%rcx), %eax
	jge	.LBB135_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB135_1 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB135_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB135_1
.LBB135_4:                              # %for.end
	movl	$0, -4(%rbp)
.LBB135_5:                              # %for.cond28
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	6404(%rcx), %eax
	jge	.LBB135_8
# %bb.6:                                # %for.body33
                                        #   in Loop: Header=BB135_5 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.7:                                # %for.inc95
                                        #   in Loop: Header=BB135_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB135_5
.LBB135_8:                              # %for.end97
	movq	-16(%rbp), %rax
	movq	40(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB135_10
# %bb.9:                                # %cond.true
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	4(%rax), %ecx
	jmp	.LBB135_11
.LBB135_10:                             # %cond.false
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	4(%rax), %ecx
.LBB135_11:                             # %cond.end
	xorl	%eax, %eax
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 4(%rdx)
	movq	-16(%rbp), %rdx
	movl	%ecx, 36(%rdx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 8(%rdx)
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	56(%rdx), %rdx
	movl	%ecx, 8(%rdx)
	movq	-16(%rbp), %rdx
	movq	48(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	56(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	48(%rdx), %rdx
	movl	%ecx, 12(%rdx)
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 12(%rdx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	$0, 6380(%rcx)
	je	.LBB135_13
# %bb.12:                               # %land.rhs
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6380(%rax)
	setne	%al
.LBB135_13:                             # %land.end
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%eax, 6380(%rdx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB135_15
# %bb.14:                               # %land.rhs138
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	setne	%cl
.LBB135_15:                             # %land.end142
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB135_17
# %bb.16:                               # %if.then
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB135_17:                             # %if.end
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	$0, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6552(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6560(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6560(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6560(%rax)
	je	.LBB135_19
# %bb.18:                               # %if.then167
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6572(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6572(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6576(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6576(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6564(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6564(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6568(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6568(%rcx)
.LBB135_19:                             # %if.end180
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movl	$0, -4(%rbp)
.LBB135_20:                             # %for.cond186
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	listXsize+4, %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB135_26
# %bb.21:                               # %for.body190
                                        #   in Loop: Header=BB135_20 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %esi
	idivq	%rsi
	movq	%rax, %rcx
	shlq	$1, %rcx
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	288(%rax,%rdx,8), %rax
	cqto
	idivq	%rsi
	shlq	$1, %rax
	cmpq	%rax, %rcx
	jge	.LBB135_23
# %bb.22:                               # %cond.true208
                                        #   in Loop: Header=BB135_20 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
	jmp	.LBB135_24
.LBB135_23:                             # %cond.false217
                                        #   in Loop: Header=BB135_20 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
.LBB135_24:                             # %cond.end226
                                        #   in Loop: Header=BB135_20 Depth=1
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, 288(%rcx,%rdx,8)
# %bb.25:                               # %for.inc233
                                        #   in Loop: Header=BB135_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB135_20
.LBB135_26:                             # %for.end235
	movl	$0, -4(%rbp)
.LBB135_27:                             # %for.cond236
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	listXsize, %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB135_33
# %bb.28:                               # %for.body241
                                        #   in Loop: Header=BB135_27 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %esi
	idivq	%rsi
	movq	%rax, %rcx
	shlq	$1, %rcx
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	24(%rax,%rdx,8), %rax
	cqto
	idivq	%rsi
	shlq	$1, %rax
	cmpq	%rax, %rcx
	jge	.LBB135_30
# %bb.29:                               # %cond.true260
                                        #   in Loop: Header=BB135_27 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
	jmp	.LBB135_31
.LBB135_30:                             # %cond.false269
                                        #   in Loop: Header=BB135_27 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
.LBB135_31:                             # %cond.end278
                                        #   in Loop: Header=BB135_27 Depth=1
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, 24(%rcx,%rdx,8)
# %bb.32:                               # %for.inc285
                                        #   in Loop: Header=BB135_27 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB135_27
.LBB135_33:                             # %for.end287
	movl	$0, -4(%rbp)
.LBB135_34:                             # %for.cond288
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB135_36 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB135_65
# %bb.35:                               # %for.body294
                                        #   in Loop: Header=BB135_34 Depth=1
	movl	$0, -20(%rbp)
.LBB135_36:                             # %for.cond295
                                        #   Parent Loop BB135_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB135_63
# %bb.37:                               # %for.body301
                                        #   in Loop: Header=BB135_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movb	$1, (%rdi,%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movb	$1, (%rdi,%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %di
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rsi,%rax,8), %rax
	movw	%di, (%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -28(%rbp)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -28(%rbp)
	jl	.LBB135_39
# %bb.38:                               # %cond.true439
                                        #   in Loop: Header=BB135_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB135_40
.LBB135_39:                             # %cond.false445
                                        #   in Loop: Header=BB135_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB135_40
.LBB135_40:                             # %cond.end446
                                        #   in Loop: Header=BB135_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB135_42
# %bb.41:                               # %cond.true456
                                        #   in Loop: Header=BB135_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB135_43
.LBB135_42:                             # %cond.false462
                                        #   in Loop: Header=BB135_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB135_43
.LBB135_43:                             # %cond.end463
                                        #   in Loop: Header=BB135_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB135_45
# %bb.44:                               # %cond.true474
                                        #   in Loop: Header=BB135_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	1608(%rax,%rcx,8), %r8
	jmp	.LBB135_46
.LBB135_45:                             # %cond.false479
                                        #   in Loop: Header=BB135_36 Depth=2
	xorl	%r8d, %r8d
	jmp	.LBB135_46
.LBB135_46:                             # %cond.end480
                                        #   in Loop: Header=BB135_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB135_48
# %bb.47:                               # %cond.true495
                                        #   in Loop: Header=BB135_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	1872(%rax,%rcx,8), %rdi
	jmp	.LBB135_49
.LBB135_48:                             # %cond.false501
                                        #   in Loop: Header=BB135_36 Depth=2
	xorl	%edi, %edi
	jmp	.LBB135_49
.LBB135_49:                             # %cond.end502
                                        #   in Loop: Header=BB135_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	%rdi, (%rsi,%rax,8)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -28(%rbp)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -28(%rbp)
	jl	.LBB135_51
# %bb.50:                               # %cond.true641
                                        #   in Loop: Header=BB135_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB135_52
.LBB135_51:                             # %cond.false647
                                        #   in Loop: Header=BB135_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB135_52
.LBB135_52:                             # %cond.end648
                                        #   in Loop: Header=BB135_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB135_54
# %bb.53:                               # %cond.true659
                                        #   in Loop: Header=BB135_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB135_55
.LBB135_54:                             # %cond.false665
                                        #   in Loop: Header=BB135_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB135_55
.LBB135_55:                             # %cond.end666
                                        #   in Loop: Header=BB135_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB135_57
# %bb.56:                               # %cond.true677
                                        #   in Loop: Header=BB135_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	1608(%rax,%rcx,8), %r8
	jmp	.LBB135_58
.LBB135_57:                             # %cond.false683
                                        #   in Loop: Header=BB135_36 Depth=2
	movq	$-1, %r8
	jmp	.LBB135_58
.LBB135_58:                             # %cond.end684
                                        #   in Loop: Header=BB135_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB135_60
# %bb.59:                               # %cond.true700
                                        #   in Loop: Header=BB135_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	1872(%rax,%rcx,8), %r8
	jmp	.LBB135_61
.LBB135_60:                             # %cond.false706
                                        #   in Loop: Header=BB135_36 Depth=2
	movq	$-1, %r8
	jmp	.LBB135_61
.LBB135_61:                             # %cond.end707
                                        #   in Loop: Header=BB135_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
# %bb.62:                               # %for.inc721
                                        #   in Loop: Header=BB135_36 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB135_36
.LBB135_63:                             # %for.end723
                                        #   in Loop: Header=BB135_34 Depth=1
	jmp	.LBB135_64
.LBB135_64:                             # %for.inc724
                                        #   in Loop: Header=BB135_34 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB135_34
.LBB135_65:                             # %for.end726
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB135_67
# %bb.66:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB135_76
.LBB135_67:                             # %if.then729
	movl	$0, -4(%rbp)
.LBB135_68:                             # %for.cond730
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB135_70 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB135_75
# %bb.69:                               # %for.body736
                                        #   in Loop: Header=BB135_68 Depth=1
	movl	$0, -20(%rbp)
.LBB135_70:                             # %for.cond737
                                        #   Parent Loop BB135_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB135_73
# %bb.71:                               # %for.body743
                                        #   in Loop: Header=BB135_70 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.72:                               # %for.inc756
                                        #   in Loop: Header=BB135_70 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB135_70
.LBB135_73:                             # %for.end758
                                        #   in Loop: Header=BB135_68 Depth=1
	jmp	.LBB135_74
.LBB135_74:                             # %for.inc759
                                        #   in Loop: Header=BB135_68 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB135_68
.LBB135_75:                             # %for.end761
	jmp	.LBB135_76
.LBB135_76:                             # %if.end762
	cmpl	$445812098, -32(%rbp)   # imm = 0x1A928D82
	jne	.LBB135_78
.LBB135_77:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB135_78:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB135_77
.Lfunc_end135:
	.size	dpb_combine_field.72, .Lfunc_end135-dpb_combine_field.72
	.cfi_endproc
                                        # -- End function
	.globl	dpb_split_field.73      # -- Begin function dpb_split_field.73
	.p2align	4, 0x90
	.type	dpb_split_field.73,@function
dpb_split_field.73:                     # @dpb_split_field.73
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$562029335, -64(%rbp)   # imm = 0x217FE317
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 36(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB136_28
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %r8d
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	idivl	%edi
	movl	$1, %edi
	movl	%r8d, %edx
	movl	%eax, %r8d
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %r8d
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	idivl	%edi
	movl	$2, %edi
	movl	%r8d, %edx
	movl	%eax, %r8d
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 56(%rcx)
	movl	$0, -4(%rbp)
.LBB136_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB136_5
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB136_2 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.4:                                # %for.inc
                                        #   in Loop: Header=BB136_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB136_2
.LBB136_5:                              # %for.end
	movl	$0, -4(%rbp)
.LBB136_6:                              # %for.cond30
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB136_9
# %bb.7:                                # %for.body36
                                        #   in Loop: Header=BB136_6 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.8:                                # %for.inc66
                                        #   in Loop: Header=BB136_6 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB136_6
.LBB136_9:                              # %for.end68
	movl	$0, -4(%rbp)
.LBB136_10:                             # %for.cond69
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB136_13
# %bb.11:                               # %for.body75
                                        #   in Loop: Header=BB136_10 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.12:                               # %for.inc89
                                        #   in Loop: Header=BB136_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB136_10
.LBB136_13:                             # %for.end91
	movl	$0, -4(%rbp)
.LBB136_14:                             # %for.cond92
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB136_17
# %bb.15:                               # %for.body98
                                        #   in Loop: Header=BB136_14 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.16:                               # %for.inc131
                                        #   in Loop: Header=BB136_14 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB136_14
.LBB136_17:                             # %for.end133
	movq	-16(%rbp), %rax
	movq	48(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	56(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6380(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6380(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6380(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6376(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	-16(%rbp), %rcx
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	$1, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	$1, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6416(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6416(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6416(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6552(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB136_27
# %bb.18:                               # %if.then211
	movl	$0, -4(%rbp)
.LBB136_19:                             # %for.cond212
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB136_22
# %bb.20:                               # %for.body215
                                        #   in Loop: Header=BB136_19 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	816(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	816(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	1344(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	1344(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
# %bb.21:                               # %for.inc267
                                        #   in Loop: Header=BB136_19 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB136_19
.LBB136_22:                             # %for.end269
	movl	$0, -4(%rbp)
.LBB136_23:                             # %for.cond270
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB136_26
# %bb.24:                               # %for.body273
                                        #   in Loop: Header=BB136_23 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	552(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	552(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	1080(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	1080(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
# %bb.25:                               # %for.inc326
                                        #   in Loop: Header=BB136_23 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB136_23
.LBB136_26:                             # %for.end328
	jmp	.LBB136_27
.LBB136_27:                             # %if.end
	jmp	.LBB136_29
.LBB136_28:                             # %if.else
	movq	-16(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 56(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	$0, 6528(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	$0, 6536(%rax)
.LBB136_29:                             # %if.end335
	movl	$0, -8(%rbp)
.LBB136_30:                             # %for.cond336
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB136_32 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB136_59
# %bb.31:                               # %for.body342
                                        #   in Loop: Header=BB136_30 Depth=1
	movl	$0, -4(%rbp)
.LBB136_32:                             # %for.cond343
                                        #   Parent Loop BB136_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB136_57
# %bb.33:                               # %for.body349
                                        #   in Loop: Header=BB136_32 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -72(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-44(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	imull	%eax, %ecx
	movl	-72(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-44(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB136_48
# %bb.34:                               # %land.lhs.true
                                        #   in Loop: Header=BB136_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-48(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB136_48
# %bb.35:                               # %if.then369
                                        #   in Loop: Header=BB136_32 Depth=2
	movl	-48(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	movl	%ecx, -28(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB136_37
# %bb.36:                               # %cond.true
                                        #   in Loop: Header=BB136_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB136_38
.LBB136_37:                             # %cond.false
                                        #   in Loop: Header=BB136_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB136_38
.LBB136_38:                             # %cond.end
                                        #   in Loop: Header=BB136_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB136_40
# %bb.39:                               # %cond.true407
                                        #   in Loop: Header=BB136_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB136_41
.LBB136_40:                             # %cond.false415
                                        #   in Loop: Header=BB136_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB136_41
.LBB136_41:                             # %cond.end416
                                        #   in Loop: Header=BB136_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB136_43
# %bb.42:                               # %cond.true429
                                        #   in Loop: Header=BB136_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$1608, %rax             # imm = 0x648
	movl	-28(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB136_44
.LBB136_43:                             # %cond.false436
                                        #   in Loop: Header=BB136_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB136_44
.LBB136_44:                             # %cond.end437
                                        #   in Loop: Header=BB136_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB136_46
# %bb.45:                               # %cond.true448
                                        #   in Loop: Header=BB136_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$1608, %rax             # imm = 0x648
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB136_47
.LBB136_46:                             # %cond.false456
                                        #   in Loop: Header=BB136_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB136_47
.LBB136_47:                             # %cond.end457
                                        #   in Loop: Header=BB136_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB136_55
.LBB136_48:                             # %if.else466
                                        #   in Loop: Header=BB136_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB136_50
# %bb.49:                               # %cond.true485
                                        #   in Loop: Header=BB136_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB136_51
.LBB136_50:                             # %cond.false491
                                        #   in Loop: Header=BB136_32 Depth=2
	movq	$-1, %rax
	jmp	.LBB136_51
.LBB136_51:                             # %cond.end492
                                        #   in Loop: Header=BB136_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB136_53
# %bb.52:                               # %cond.true503
                                        #   in Loop: Header=BB136_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB136_54
.LBB136_53:                             # %cond.false509
                                        #   in Loop: Header=BB136_32 Depth=2
	movq	$-1, %rax
	jmp	.LBB136_54
.LBB136_54:                             # %cond.end510
                                        #   in Loop: Header=BB136_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB136_55:                             # %if.end519
                                        #   in Loop: Header=BB136_32 Depth=2
	jmp	.LBB136_56
.LBB136_56:                             # %for.inc520
                                        #   in Loop: Header=BB136_32 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB136_32
.LBB136_57:                             # %for.end522
                                        #   in Loop: Header=BB136_30 Depth=1
	jmp	.LBB136_58
.LBB136_58:                             # %for.inc523
                                        #   in Loop: Header=BB136_30 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB136_30
.LBB136_59:                             # %for.end525
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	je	.LBB136_61
# %bb.60:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB136_73
.LBB136_61:                             # %if.then530
	movl	$0, -4(%rbp)
.LBB136_62:                             # %for.cond531
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB136_64 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB136_72
# %bb.63:                               # %for.body537
                                        #   in Loop: Header=BB136_62 Depth=1
	movl	$0, -8(%rbp)
.LBB136_64:                             # %for.cond538
                                        #   Parent Loop BB136_62 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB136_70
# %bb.65:                               # %for.body544
                                        #   in Loop: Header=BB136_64 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -60(%rbp)
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-40(%rbp), %eax
	cltd
	idivl	%esi
	imull	%eax, %ecx
	movl	-60(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-40(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB136_68
# %bb.66:                               # %land.lhs.true563
                                        #   in Loop: Header=BB136_64 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-56(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB136_68
# %bb.67:                               # %if.then570
                                        #   in Loop: Header=BB136_64 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	32(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	40(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB136_68:                             # %if.end908
                                        #   in Loop: Header=BB136_64 Depth=2
	jmp	.LBB136_69
.LBB136_69:                             # %for.inc909
                                        #   in Loop: Header=BB136_64 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB136_64
.LBB136_70:                             # %for.end911
                                        #   in Loop: Header=BB136_62 Depth=1
	jmp	.LBB136_71
.LBB136_71:                             # %for.inc912
                                        #   in Loop: Header=BB136_62 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB136_62
.LBB136_72:                             # %for.end914
	jmp	.LBB136_73
.LBB136_73:                             # %if.end915
	movl	$0, -4(%rbp)
.LBB136_74:                             # %for.cond916
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB136_76 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB136_152
# %bb.75:                               # %for.body922
                                        #   in Loop: Header=BB136_74 Depth=1
	movl	$0, -8(%rbp)
.LBB136_76:                             # %for.cond923
                                        #   Parent Loop BB136_74 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB136_150
# %bb.77:                               # %for.body929
                                        #   in Loop: Header=BB136_76 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -68(%rbp)
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	imull	%eax, %ecx
	movl	-68(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -52(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB136_79
# %bb.78:                               # %lor.lhs.false948
                                        #   in Loop: Header=BB136_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-52(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB136_148
.LBB136_79:                             # %if.then954
                                        #   in Loop: Header=BB136_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB136_147
# %bb.80:                               # %if.then973
                                        #   in Loop: Header=BB136_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB136_82
# %bb.81:                               # %cond.true990
                                        #   in Loop: Header=BB136_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB136_83
.LBB136_82:                             # %cond.false991
                                        #   in Loop: Header=BB136_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB136_83:                             # %cond.end993
                                        #   in Loop: Header=BB136_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB136_85
# %bb.84:                               # %cond.true999
                                        #   in Loop: Header=BB136_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB136_86
.LBB136_85:                             # %cond.false1001
                                        #   in Loop: Header=BB136_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB136_86:                             # %cond.end1003
                                        #   in Loop: Header=BB136_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB136_88
# %bb.87:                               # %cond.true1030
                                        #   in Loop: Header=BB136_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB136_89
.LBB136_88:                             # %cond.false1032
                                        #   in Loop: Header=BB136_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB136_89:                             # %cond.end1034
                                        #   in Loop: Header=BB136_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB136_91
# %bb.90:                               # %cond.true1040
                                        #   in Loop: Header=BB136_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB136_92
.LBB136_91:                             # %cond.false1042
                                        #   in Loop: Header=BB136_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB136_92:                             # %cond.end1044
                                        #   in Loop: Header=BB136_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB136_94
# %bb.93:                               # %cond.true1071
                                        #   in Loop: Header=BB136_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB136_95
.LBB136_94:                             # %cond.false1073
                                        #   in Loop: Header=BB136_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB136_95:                             # %cond.end1075
                                        #   in Loop: Header=BB136_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB136_97
# %bb.96:                               # %cond.true1081
                                        #   in Loop: Header=BB136_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB136_98
.LBB136_97:                             # %cond.false1083
                                        #   in Loop: Header=BB136_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB136_98:                             # %cond.end1085
                                        #   in Loop: Header=BB136_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB136_100
# %bb.99:                               # %cond.true1112
                                        #   in Loop: Header=BB136_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB136_101
.LBB136_100:                            # %cond.false1114
                                        #   in Loop: Header=BB136_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB136_101:                            # %cond.end1116
                                        #   in Loop: Header=BB136_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB136_103
# %bb.102:                              # %cond.true1122
                                        #   in Loop: Header=BB136_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB136_104
.LBB136_103:                            # %cond.false1124
                                        #   in Loop: Header=BB136_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB136_104:                            # %cond.end1126
                                        #   in Loop: Header=BB136_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB136_106
# %bb.105:                              # %cond.true1153
                                        #   in Loop: Header=BB136_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB136_107
.LBB136_106:                            # %cond.false1155
                                        #   in Loop: Header=BB136_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB136_107:                            # %cond.end1157
                                        #   in Loop: Header=BB136_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB136_109
# %bb.108:                              # %cond.true1163
                                        #   in Loop: Header=BB136_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB136_110
.LBB136_109:                            # %cond.false1165
                                        #   in Loop: Header=BB136_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB136_110:                            # %cond.end1167
                                        #   in Loop: Header=BB136_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB136_112
# %bb.111:                              # %if.then1175
                                        #   in Loop: Header=BB136_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	jmp	.LBB136_125
.LBB136_112:                            # %if.else1190
                                        #   in Loop: Header=BB136_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB136_114
# %bb.113:                              # %cond.true1196
                                        #   in Loop: Header=BB136_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB136_115
.LBB136_114:                            # %cond.false1198
                                        #   in Loop: Header=BB136_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB136_115:                            # %cond.end1200
                                        #   in Loop: Header=BB136_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB136_117
# %bb.116:                              # %cond.true1206
                                        #   in Loop: Header=BB136_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB136_118
.LBB136_117:                            # %cond.false1208
                                        #   in Loop: Header=BB136_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB136_118:                            # %cond.end1210
                                        #   in Loop: Header=BB136_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cwtl
	movl	%eax, -20(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB136_120
# %bb.119:                              # %cond.true1232
                                        #   in Loop: Header=BB136_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	3192(%rax,%rcx,8), %rax
	jmp	.LBB136_121
.LBB136_120:                            # %cond.false1237
                                        #   in Loop: Header=BB136_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB136_121
.LBB136_121:                            # %cond.end1238
                                        #   in Loop: Header=BB136_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB136_123
# %bb.122:                              # %cond.true1249
                                        #   in Loop: Header=BB136_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	4776(%rax,%rcx,8), %rax
	jmp	.LBB136_124
.LBB136_123:                            # %cond.false1254
                                        #   in Loop: Header=BB136_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB136_124
.LBB136_124:                            # %cond.end1255
                                        #   in Loop: Header=BB136_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB136_125:                            # %if.end1264
                                        #   in Loop: Header=BB136_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB136_127
# %bb.126:                              # %cond.true1270
                                        #   in Loop: Header=BB136_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB136_128
.LBB136_127:                            # %cond.false1272
                                        #   in Loop: Header=BB136_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB136_128:                            # %cond.end1274
                                        #   in Loop: Header=BB136_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB136_130
# %bb.129:                              # %cond.true1280
                                        #   in Loop: Header=BB136_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB136_131
.LBB136_130:                            # %cond.false1282
                                        #   in Loop: Header=BB136_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB136_131:                            # %cond.end1284
                                        #   in Loop: Header=BB136_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB136_133
# %bb.132:                              # %if.then1292
                                        #   in Loop: Header=BB136_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	jmp	.LBB136_146
.LBB136_133:                            # %if.else1307
                                        #   in Loop: Header=BB136_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB136_135
# %bb.134:                              # %cond.true1313
                                        #   in Loop: Header=BB136_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB136_136
.LBB136_135:                            # %cond.false1315
                                        #   in Loop: Header=BB136_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB136_136:                            # %cond.end1317
                                        #   in Loop: Header=BB136_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB136_138
# %bb.137:                              # %cond.true1323
                                        #   in Loop: Header=BB136_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB136_139
.LBB136_138:                            # %cond.false1325
                                        #   in Loop: Header=BB136_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB136_139:                            # %cond.end1327
                                        #   in Loop: Header=BB136_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cwtl
	movl	%eax, -24(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB136_141
# %bb.140:                              # %cond.true1349
                                        #   in Loop: Header=BB136_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	3456(%rax,%rcx,8), %rax
	jmp	.LBB136_142
.LBB136_141:                            # %cond.false1355
                                        #   in Loop: Header=BB136_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB136_142
.LBB136_142:                            # %cond.end1356
                                        #   in Loop: Header=BB136_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB136_144
# %bb.143:                              # %cond.true1367
                                        #   in Loop: Header=BB136_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	5040(%rax,%rcx,8), %rax
	jmp	.LBB136_145
.LBB136_144:                            # %cond.false1373
                                        #   in Loop: Header=BB136_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB136_145
.LBB136_145:                            # %cond.end1374
                                        #   in Loop: Header=BB136_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB136_146:                            # %if.end1383
                                        #   in Loop: Header=BB136_76 Depth=2
	jmp	.LBB136_147
.LBB136_147:                            # %if.end1384
                                        #   in Loop: Header=BB136_76 Depth=2
	jmp	.LBB136_148
.LBB136_148:                            # %if.end1385
                                        #   in Loop: Header=BB136_76 Depth=2
	jmp	.LBB136_149
.LBB136_149:                            # %for.inc1386
                                        #   in Loop: Header=BB136_76 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB136_76
.LBB136_150:                            # %for.end1388
                                        #   in Loop: Header=BB136_74 Depth=1
	jmp	.LBB136_151
.LBB136_151:                            # %for.inc1389
                                        #   in Loop: Header=BB136_74 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB136_74
.LBB136_152:                            # %for.end1391
	movl	$0, -8(%rbp)
.LBB136_153:                            # %for.cond1392
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB136_155 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB136_160
# %bb.154:                              # %for.body1398
                                        #   in Loop: Header=BB136_153 Depth=1
	movl	$0, -4(%rbp)
.LBB136_155:                            # %for.cond1399
                                        #   Parent Loop BB136_153 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB136_158
# %bb.156:                              # %for.body1405
                                        #   in Loop: Header=BB136_155 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
# %bb.157:                              # %for.inc1412
                                        #   in Loop: Header=BB136_155 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB136_155
.LBB136_158:                            # %for.end1414
                                        #   in Loop: Header=BB136_153 Depth=1
	jmp	.LBB136_159
.LBB136_159:                            # %for.inc1415
                                        #   in Loop: Header=BB136_153 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB136_153
.LBB136_160:                            # %for.end1417
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB136_162
# %bb.161:                              # %lor.lhs.false1420
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB136_174
.LBB136_162:                            # %if.then1423
	movl	$0, -8(%rbp)
.LBB136_163:                            # %for.cond1424
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB136_165 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB136_173
# %bb.164:                              # %for.body1430
                                        #   in Loop: Header=BB136_163 Depth=1
	movl	$0, -4(%rbp)
.LBB136_165:                            # %for.cond1431
                                        #   Parent Loop BB136_163 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB136_171
# %bb.166:                              # %for.body1437
                                        #   in Loop: Header=BB136_165 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -80(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	imull	%eax, %ecx
	movl	-80(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-36(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -76(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB136_168
# %bb.167:                              # %cond.true1456
                                        #   in Loop: Header=BB136_165 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-76(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	jmp	.LBB136_169
.LBB136_168:                            # %cond.false1462
                                        #   in Loop: Header=BB136_165 Depth=2
	xorl	%eax, %eax
	jmp	.LBB136_169
.LBB136_169:                            # %cond.end1463
                                        #   in Loop: Header=BB136_165 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6520(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.170:                              # %for.inc1472
                                        #   in Loop: Header=BB136_165 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB136_165
.LBB136_171:                            # %for.end1474
                                        #   in Loop: Header=BB136_163 Depth=1
	jmp	.LBB136_172
.LBB136_172:                            # %for.inc1475
                                        #   in Loop: Header=BB136_163 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB136_163
.LBB136_173:                            # %for.end1477
	jmp	.LBB136_174
.LBB136_174:                            # %if.end1478
	cmpl	$562029335, -64(%rbp)   # imm = 0x217FE317
	jne	.LBB136_176
.LBB136_175:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB136_176:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB136_175
.Lfunc_end136:
	.size	dpb_split_field.73, .Lfunc_end136-dpb_split_field.73
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_frame_num_desc.74
	.type	compare_fs_by_frame_num_desc.74,@function
compare_fs_by_frame_num_desc.74:        # @compare_fs_by_frame_num_desc.74
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$868237030, -16(%rbp)   # imm = 0x33C03EE6
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	24(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	24(%rcx), %eax
	jge	.LBB137_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB137_5
.LBB137_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	24(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	24(%rcx), %eax
	jle	.LBB137_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB137_5
.LBB137_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB137_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$868237030, -16(%rbp)   # imm = 0x33C03EE6
	jne	.LBB137_7
.LBB137_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB137_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB137_6
.Lfunc_end137:
	.size	compare_fs_by_frame_num_desc.74, .Lfunc_end137-compare_fs_by_frame_num_desc.74
	.cfi_endproc
                                        # -- End function
	.globl	init_mbaff_lists.75     # -- Begin function init_mbaff_lists.75
	.p2align	4, 0x90
	.type	init_mbaff_lists.75,@function
init_mbaff_lists.75:                    # @init_mbaff_lists.75
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$231127514, -12(%rbp)   # imm = 0xDC6B9DA
	movl	$2, -4(%rbp)
.LBB138_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB138_3 Depth 2
	cmpl	$6, -4(%rbp)
	jge	.LBB138_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB138_1 Depth=1
	movl	$0, -8(%rbp)
.LBB138_3:                              # %for.cond1
                                        #   Parent Loop BB138_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$33, -8(%rbp)
	jae	.LBB138_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB138_3 Depth=2
	movslq	-4(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movl	-8(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB138_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB138_3
.LBB138_6:                              # %for.end
                                        #   in Loop: Header=BB138_1 Depth=1
	movslq	-4(%rbp), %rax
	movl	$0, listXsize(,%rax,4)
# %bb.7:                                # %for.inc8
                                        #   in Loop: Header=BB138_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB138_1
.LBB138_8:                              # %for.end10
	movl	$0, -4(%rbp)
.LBB138_9:                              # %for.cond11
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB138_12
# %bb.10:                               # %for.body13
                                        #   in Loop: Header=BB138_9 Depth=1
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6528(%rax), %rax
	movq	listX+16, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6536(%rax), %rax
	movq	listX+16, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6536(%rax), %rax
	movq	listX+32, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6528(%rax), %rax
	movq	listX+32, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.11:                               # %for.inc36
                                        #   in Loop: Header=BB138_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB138_9
.LBB138_12:                             # %for.end38
	movl	listXsize, %eax
	shll	$1, %eax
	movl	%eax, listXsize+16
	movl	%eax, listXsize+8
	movl	$0, -4(%rbp)
.LBB138_13:                             # %for.cond40
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB138_16
# %bb.14:                               # %for.body42
                                        #   in Loop: Header=BB138_13 Depth=1
	movq	listX+8, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6528(%rax), %rax
	movq	listX+24, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	listX+8, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6536(%rax), %rax
	movq	listX+24, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	listX+8, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6536(%rax), %rax
	movq	listX+40, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	listX+8, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6528(%rax), %rax
	movq	listX+40, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.15:                               # %for.inc69
                                        #   in Loop: Header=BB138_13 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB138_13
.LBB138_16:                             # %for.end71
	movl	listXsize+4, %eax
	shll	$1, %eax
	movl	%eax, listXsize+20
	movl	%eax, listXsize+12
	cmpl	$231127514, -12(%rbp)   # imm = 0xDC6B9DA
	jne	.LBB138_18
.LBB138_17:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB138_18:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB138_17
.Lfunc_end138:
	.size	init_mbaff_lists.75, .Lfunc_end138-init_mbaff_lists.75
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_mark_current_picture_long_term.76
	.type	mm_mark_current_picture_long_term.76,@function
mm_mark_current_picture_long_term.76:   # @mm_mark_current_picture_long_term.76
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$165921307, -20(%rbp)   # imm = 0x9E3C21B
	movq	%rdi, -16(%rbp)
	movl	%esi, -4(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB139_2
# %bb.1:                                # %if.then
	movl	-4(%rbp), %edi
	callq	unmark_long_term_frame_for_reference_by_frame_idx
	jmp	.LBB139_3
.LBB139_2:                              # %if.else
	movq	-16(%rbp), %rax
	movl	(%rax), %edi
	movl	-4(%rbp), %esi
	movq	-16(%rbp), %rax
	movl	6364(%rax), %ecx
	movl	$1, %edx
	xorl	%r8d, %r8d
	callq	unmark_long_term_field_for_reference_by_frame_idx
.LBB139_3:                              # %if.end
	movq	-16(%rbp), %rax
	movl	$1, 6376(%rax)
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6372(%rcx)
	cmpl	$165921307, -20(%rbp)   # imm = 0x9E3C21B
	jne	.LBB139_5
.LBB139_4:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB139_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB139_4
.Lfunc_end139:
	.size	mm_mark_current_picture_long_term.76, .Lfunc_end139-mm_mark_current_picture_long_term.76
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function is_used_for_reference.77
	.type	is_used_for_reference.77,@function
is_used_for_reference.77:               # @is_used_for_reference.77
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1059654071, -28(%rbp)  # imm = 0x3F2909B7
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, 4(%rax)
	je	.LBB140_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB140_17
.LBB140_2:                              # %if.end
	movq	-24(%rbp), %rax
	cmpl	$3, (%rax)
	jne	.LBB140_6
# %bb.3:                                # %if.then1
	movq	-24(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB140_5
# %bb.4:                                # %if.then3
	movl	$1, -12(%rbp)
	jmp	.LBB140_17
.LBB140_5:                              # %if.end4
	jmp	.LBB140_6
.LBB140_6:                              # %if.end5
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	jne	.LBB140_16
# %bb.7:                                # %if.then7
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB140_11
# %bb.8:                                # %if.then10
	movq	-24(%rbp), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB140_10
# %bb.9:                                # %if.then13
	movl	$1, -12(%rbp)
	jmp	.LBB140_17
.LBB140_10:                             # %if.end14
	jmp	.LBB140_11
.LBB140_11:                             # %if.end15
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB140_15
# %bb.12:                               # %if.then19
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB140_14
# %bb.13:                               # %if.then22
	movl	$1, -12(%rbp)
	jmp	.LBB140_17
.LBB140_14:                             # %if.end23
	jmp	.LBB140_15
.LBB140_15:                             # %if.end24
	jmp	.LBB140_16
.LBB140_16:                             # %if.end25
	movl	$0, -12(%rbp)
.LBB140_17:                             # %return
	movl	-12(%rbp), %ebx
	cmpl	$1059654071, -28(%rbp)  # imm = 0x3F2909B7
	jne	.LBB140_19
.LBB140_18:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB140_19:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB140_18
.Lfunc_end140:
	.size	is_used_for_reference.77, .Lfunc_end140-is_used_for_reference.77
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function remove_unused_frame_from_dpb.78
	.type	remove_unused_frame_from_dpb.78,@function
remove_unused_frame_from_dpb.78:        # @remove_unused_frame_from_dpb.78
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$153907056, -20(%rbp)   # imm = 0x92C6F70
	movl	$0, -12(%rbp)
.LBB141_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB141_7
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB141_1 Depth=1
	movq	dpb, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 32(%rax)
	je	.LBB141_5
# %bb.3:                                # %land.lhs.true
                                        #   in Loop: Header=BB141_1 Depth=1
	movq	dpb, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	is_used_for_reference
	cmpl	$0, %eax
	jne	.LBB141_5
# %bb.4:                                # %if.then
	movl	-12(%rbp), %edi
	callq	remove_frame_from_dpb
	movl	$1, -16(%rbp)
	jmp	.LBB141_8
.LBB141_5:                              # %if.end
                                        #   in Loop: Header=BB141_1 Depth=1
	jmp	.LBB141_6
.LBB141_6:                              # %for.inc
                                        #   in Loop: Header=BB141_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB141_1
.LBB141_7:                              # %for.end
	movl	$0, -16(%rbp)
.LBB141_8:                              # %return
	movl	-16(%rbp), %ebx
	cmpl	$153907056, -20(%rbp)   # imm = 0x92C6F70
	jne	.LBB141_10
.LBB141_9:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB141_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB141_9
.Lfunc_end141:
	.size	remove_unused_frame_from_dpb.78, .Lfunc_end141-remove_unused_frame_from_dpb.78
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_lt_pic_num_asc.79
	.type	compare_pic_by_lt_pic_num_asc.79,@function
compare_pic_by_lt_pic_num_asc.79:       # @compare_pic_by_lt_pic_num_asc.79
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1254785264, -16(%rbp)  # imm = 0x4ACA80F0
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	6368(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6368(%rcx), %eax
	jge	.LBB142_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB142_5
.LBB142_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	6368(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6368(%rcx), %eax
	jle	.LBB142_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB142_5
.LBB142_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB142_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1254785264, -16(%rbp)  # imm = 0x4ACA80F0
	jne	.LBB142_7
.LBB142_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB142_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB142_6
.Lfunc_end142:
	.size	compare_pic_by_lt_pic_num_asc.79, .Lfunc_end142-compare_pic_by_lt_pic_num_asc.79
	.cfi_endproc
                                        # -- End function
	.globl	update_ltref_list.80    # -- Begin function update_ltref_list.80
	.p2align	4, 0x90
	.type	update_ltref_list.80,@function
update_ltref_list.80:                   # @update_ltref_list.80
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1398064687, -12(%rbp)  # imm = 0x5354C62F
	movl	$0, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB143_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB143_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB143_1 Depth=1
	movq	dpb, %rax
	movl	-8(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	is_long_term_reference
	cmpl	$0, %eax
	je	.LBB143_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB143_1 Depth=1
	movq	dpb, %rax
	movl	-8(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -4(%rbp)
	movl	%edx, %edx
	movq	%rax, (%rcx,%rdx,8)
.LBB143_4:                              # %if.end
                                        #   in Loop: Header=BB143_1 Depth=1
	jmp	.LBB143_5
.LBB143_5:                              # %for.inc
                                        #   in Loop: Header=BB143_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB143_1
.LBB143_6:                              # %for.end
	movl	-4(%rbp), %eax
	movl	%eax, dpb+36
.LBB143_7:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+24, %eax
	jae	.LBB143_9
# %bb.8:                                # %while.body
                                        #   in Loop: Header=BB143_7 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, -4(%rbp)
	movl	%ecx, %ecx
	movq	$0, (%rax,%rcx,8)
	jmp	.LBB143_7
.LBB143_9:                              # %while.end
	cmpl	$1398064687, -12(%rbp)  # imm = 0x5354C62F
	jne	.LBB143_11
.LBB143_10:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB143_11:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB143_10
.Lfunc_end143:
	.size	update_ltref_list.80, .Lfunc_end143-update_ltref_list.80
	.cfi_endproc
                                        # -- End function
	.globl	gen_field_ref_ids.81    # -- Begin function gen_field_ref_ids.81
	.p2align	4, 0x90
	.type	gen_field_ref_ids.81,@function
gen_field_ref_ids.81:                   # @gen_field_ref_ids.81
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$257282201, -28(%rbp)   # imm = 0xF55D099
	movq	%rdi, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB144_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB144_3 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB144_14
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB144_1 Depth=1
	movl	$0, -8(%rbp)
.LBB144_3:                              # %for.cond1
                                        #   Parent Loop BB144_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB144_12
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB144_3 Depth=2
	movq	-16(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB144_6
# %bb.5:                                # %cond.true
                                        #   in Loop: Header=BB144_3 Depth=2
	movq	-16(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB144_7
.LBB144_6:                              # %cond.false
                                        #   in Loop: Header=BB144_3 Depth=2
	xorl	%eax, %eax
	jmp	.LBB144_7
.LBB144_7:                              # %cond.end
                                        #   in Loop: Header=BB144_3 Depth=2
	movq	-16(%rbp), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB144_9
# %bb.8:                                # %cond.true27
                                        #   in Loop: Header=BB144_3 Depth=2
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB144_10
.LBB144_9:                              # %cond.false32
                                        #   in Loop: Header=BB144_3 Depth=2
	xorl	%eax, %eax
	jmp	.LBB144_10
.LBB144_10:                             # %cond.end33
                                        #   in Loop: Header=BB144_3 Depth=2
	movq	-16(%rbp), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB144_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB144_3
.LBB144_12:                             # %for.end
                                        #   in Loop: Header=BB144_1 Depth=1
	jmp	.LBB144_13
.LBB144_13:                             # %for.inc45
                                        #   in Loop: Header=BB144_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB144_1
.LBB144_14:                             # %for.end47
	cmpl	$257282201, -28(%rbp)   # imm = 0xF55D099
	jne	.LBB144_16
.LBB144_15:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB144_16:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB144_15
.Lfunc_end144:
	.size	gen_field_ref_ids.81, .Lfunc_end144-gen_field_ref_ids.81
	.cfi_endproc
                                        # -- End function
	.globl	alloc_colocated.82      # -- Begin function alloc_colocated.82
	.p2align	4, 0x90
	.type	alloc_colocated.82,@function
alloc_colocated.82:                     # @alloc_colocated.82
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1183963318, -32(%rbp)  # imm = 0x4691D8B6
	movl	%edi, -16(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -28(%rbp)
	movl	$1, %edi
	movl	$4880, %esi             # imm = 0x1310
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -24(%rbp)
	cmpq	-24(%rbp), %rcx
	jne	.LBB145_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.21, %rdi
	callq	no_mem_exit
.LBB145_2:                              # %if.end
	movl	-16(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-24(%rbp), %rdi
	addq	$1600, %rdi             # imm = 0x640
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$1608, %rdi             # imm = 0x648
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$1616, %rdi             # imm = 0x650
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$1624, %rdi             # imm = 0x658
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-24(%rbp), %rdi
	addq	$4872, %rdi             # imm = 0x1308
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	cmpl	$0, -28(%rbp)
	je	.LBB145_4
# %bb.3:                                # %if.then17
	movq	-24(%rbp), %rdi
	addq	$3216, %rdi             # imm = 0xC90
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$3224, %rdi             # imm = 0xC98
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$3232, %rdi             # imm = 0xCA0
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$3240, %rdi             # imm = 0xCA8
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-24(%rbp), %rdi
	addq	$4832, %rdi             # imm = 0x12E0
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$4840, %rdi             # imm = 0x12E8
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$4848, %rdi             # imm = 0x12F0
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$4856, %rdi             # imm = 0x12F8
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
.LBB145_4:                              # %if.end50
	movl	-28(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rbx
	cmpl	$1183963318, -32(%rbp)  # imm = 0x4691D8B6
	jne	.LBB145_6
.LBB145_5:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB145_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB145_5
.Lfunc_end145:
	.size	alloc_colocated.82, .Lfunc_end145-alloc_colocated.82
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_poc_desc.83
	.type	compare_fs_by_poc_desc.83,@function
compare_fs_by_poc_desc.83:              # @compare_fs_by_poc_desc.83
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1396470108, -16(%rbp)  # imm = 0x533C715C
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB146_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB146_5
.LBB146_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jle	.LBB146_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB146_5
.LBB146_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB146_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1396470108, -16(%rbp)  # imm = 0x533C715C
	jne	.LBB146_7
.LBB146_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB146_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB146_6
.Lfunc_end146:
	.size	compare_fs_by_poc_desc.83, .Lfunc_end146-compare_fs_by_poc_desc.83
	.cfi_endproc
                                        # -- End function
	.globl	update_ref_list.84      # -- Begin function update_ref_list.84
	.p2align	4, 0x90
	.type	update_ref_list.84,@function
update_ref_list.84:                     # @update_ref_list.84
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$427444147, -12(%rbp)   # imm = 0x197A47B3
	movl	$0, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB147_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB147_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB147_1 Depth=1
	movq	dpb, %rax
	movl	-8(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	is_short_term_reference
	cmpl	$0, %eax
	je	.LBB147_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB147_1 Depth=1
	movq	dpb, %rax
	movl	-8(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -4(%rbp)
	movl	%edx, %edx
	movq	%rax, (%rcx,%rdx,8)
.LBB147_4:                              # %if.end
                                        #   in Loop: Header=BB147_1 Depth=1
	jmp	.LBB147_5
.LBB147_5:                              # %for.inc
                                        #   in Loop: Header=BB147_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB147_1
.LBB147_6:                              # %for.end
	movl	-4(%rbp), %eax
	movl	%eax, dpb+32
.LBB147_7:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+24, %eax
	jae	.LBB147_9
# %bb.8:                                # %while.body
                                        #   in Loop: Header=BB147_7 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, -4(%rbp)
	movl	%ecx, %ecx
	movq	$0, (%rax,%rcx,8)
	jmp	.LBB147_7
.LBB147_9:                              # %while.end
	cmpl	$427444147, -12(%rbp)   # imm = 0x197A47B3
	jne	.LBB147_11
.LBB147_10:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB147_11:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB147_10
.Lfunc_end147:
	.size	update_ref_list.84, .Lfunc_end147-update_ref_list.84
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_long_term_pic.85
	.type	get_long_term_pic.85,@function
get_long_term_pic.85:                   # @get_long_term_pic.85
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$777467030, -28(%rbp)   # imm = 0x2E573496
	movl	%edi, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB148_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB148_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB148_1 Depth=1
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB148_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB148_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB148_8
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB148_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB148_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB148_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB148_7
# %bb.6:                                # %if.then10
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB148_23
.LBB148_7:                              # %if.end
                                        #   in Loop: Header=BB148_1 Depth=1
	jmp	.LBB148_8
.LBB148_8:                              # %if.end14
                                        #   in Loop: Header=BB148_1 Depth=1
	jmp	.LBB148_20
.LBB148_9:                              # %if.else
                                        #   in Loop: Header=BB148_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB148_14
# %bb.10:                               # %if.then19
                                        #   in Loop: Header=BB148_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB148_13
# %bb.11:                               # %land.lhs.true24
                                        #   in Loop: Header=BB148_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB148_13
# %bb.12:                               # %if.then30
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB148_23
.LBB148_13:                             # %if.end34
                                        #   in Loop: Header=BB148_1 Depth=1
	jmp	.LBB148_14
.LBB148_14:                             # %if.end35
                                        #   in Loop: Header=BB148_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB148_19
# %bb.15:                               # %if.then41
                                        #   in Loop: Header=BB148_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB148_18
# %bb.16:                               # %land.lhs.true46
                                        #   in Loop: Header=BB148_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB148_18
# %bb.17:                               # %if.then52
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB148_23
.LBB148_18:                             # %if.end56
                                        #   in Loop: Header=BB148_1 Depth=1
	jmp	.LBB148_19
.LBB148_19:                             # %if.end57
                                        #   in Loop: Header=BB148_1 Depth=1
	jmp	.LBB148_20
.LBB148_20:                             # %if.end58
                                        #   in Loop: Header=BB148_1 Depth=1
	jmp	.LBB148_21
.LBB148_21:                             # %for.inc
                                        #   in Loop: Header=BB148_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB148_1
.LBB148_22:                             # %for.end
	movq	$0, -24(%rbp)
.LBB148_23:                             # %return
	movq	-24(%rbp), %rbx
	cmpl	$777467030, -28(%rbp)   # imm = 0x2E573496
	jne	.LBB148_25
.LBB148_24:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB148_25:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB148_24
.Lfunc_end148:
	.size	get_long_term_pic.85, .Lfunc_end148-get_long_term_pic.85
	.cfi_endproc
                                        # -- End function
	.globl	fill_frame_num_gap.86   # -- Begin function fill_frame_num_gap.86
	.p2align	4, 0x90
	.type	fill_frame_num_gap.86,@function
fill_frame_num_gap.86:                  # @fill_frame_num_gap.86
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$390489943, -36(%rbp)   # imm = 0x17466757
	movq	%rdi, -8(%rbp)
	movq	$0, -24(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -28(%rbp)
	movq	-8(%rbp), %rax
	movl	72496(%rax), %eax
	movl	%eax, -32(%rbp)
	movq	-8(%rbp), %rax
	movl	$1, 72496(%rax)
	movq	-8(%rbp), %rax
	movl	72648(%rax), %eax
	addl	$1, %eax
	cltd
	idivl	-28(%rbp)
	movl	%edx, -12(%rbp)
	movq	-8(%rbp), %rax
	movl	72464(%rax), %eax
	movl	%eax, -40(%rbp)
.LBB149_1:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-40(%rbp), %eax
	cmpl	-12(%rbp), %eax
	je	.LBB149_3
# %bb.2:                                # %while.body
                                        #   in Loop: Header=BB149_1 Depth=1
	movq	-8(%rbp), %rax
	movl	52(%rax), %esi
	movq	-8(%rbp), %rax
	movl	60(%rax), %edx
	movq	-8(%rbp), %rax
	movl	56(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	64(%rax), %r8d
	xorl	%edi, %edi
	callq	alloc_storable_picture
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	$1, 6412(%rax)
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 6364(%rcx)
	movq	-24(%rbp), %rax
	movl	$1, 6388(%rax)
	movq	-24(%rbp), %rax
	movl	$1, 6384(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 72500(%rax)
	movq	-24(%rbp), %rdi
	callq	store_picture_in_dpb
	movq	$0, -24(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	-28(%rbp)
	movl	%edx, -12(%rbp)
	jmp	.LBB149_1
.LBB149_3:                              # %while.end
	movl	-32(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 72496(%rcx)
	cmpl	$390489943, -36(%rbp)   # imm = 0x17466757
	jne	.LBB149_5
.LBB149_4:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB149_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB149_4
.Lfunc_end149:
	.size	fill_frame_num_gap.86, .Lfunc_end149-fill_frame_num_gap.86
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_smallest_poc.87
	.type	get_smallest_poc.87,@function
get_smallest_poc.87:                    # @get_smallest_poc.87
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$387623184, -20(%rbp)   # imm = 0x171AA910
	movq	%rdi, -16(%rbp)
	movq	%rsi, -32(%rbp)
	cmpl	$1, dpb+28
	jae	.LBB150_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.28, %rdi
	movl	$150, %esi
	callq	error
.LBB150_2:                              # %if.end
	movq	-32(%rbp), %rax
	movl	$-1, (%rax)
	movq	-16(%rbp), %rax
	movl	$2147483647, (%rax)     # imm = 0x7FFFFFFF
	movl	$0, -4(%rbp)
.LBB150_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB150_9
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB150_3 Depth=1
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	dpb, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jle	.LBB150_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB150_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 32(%rax)
	jne	.LBB150_7
# %bb.6:                                # %if.then6
                                        #   in Loop: Header=BB150_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	36(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB150_7:                              # %if.end10
                                        #   in Loop: Header=BB150_3 Depth=1
	jmp	.LBB150_8
.LBB150_8:                              # %for.inc
                                        #   in Loop: Header=BB150_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB150_3
.LBB150_9:                              # %for.end
	cmpl	$387623184, -20(%rbp)   # imm = 0x171AA910
	jne	.LBB150_11
.LBB150_10:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB150_11:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB150_10
.Lfunc_end150:
	.size	get_smallest_poc.87, .Lfunc_end150-get_smallest_poc.87
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_unmark_short_term_for_reference.88
	.type	mm_unmark_short_term_for_reference.88,@function
mm_unmark_short_term_for_reference.88:  # @mm_unmark_short_term_for_reference.88
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$670868072, -16(%rbp)   # imm = 0x27FCA268
	movq	%rdi, -24(%rbp)
	movl	%esi, -12(%rbp)
	movq	-24(%rbp), %rdi
	movl	-12(%rbp), %esi
	callq	get_pic_num_x
	movl	%eax, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB151_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB151_26
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB151_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB151_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB151_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB151_8
# %bb.4:                                # %land.lhs.true
                                        #   in Loop: Header=BB151_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB151_8
# %bb.5:                                # %if.then6
                                        #   in Loop: Header=BB151_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB151_7
# %bb.6:                                # %if.then10
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_reference
	jmp	.LBB151_27
.LBB151_7:                              # %if.end
                                        #   in Loop: Header=BB151_1 Depth=1
	jmp	.LBB151_8
.LBB151_8:                              # %if.end13
                                        #   in Loop: Header=BB151_1 Depth=1
	jmp	.LBB151_24
.LBB151_9:                              # %if.else
                                        #   in Loop: Header=BB151_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB151_16
# %bb.10:                               # %land.lhs.true17
                                        #   in Loop: Header=BB151_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB151_16
# %bb.11:                               # %if.then23
                                        #   in Loop: Header=BB151_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB151_15
# %bb.12:                               # %if.then28
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$2, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB151_14
# %bb.13:                               # %if.then39
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
.LBB151_14:                             # %if.end44
	jmp	.LBB151_27
.LBB151_15:                             # %if.end45
                                        #   in Loop: Header=BB151_1 Depth=1
	jmp	.LBB151_16
.LBB151_16:                             # %if.end46
                                        #   in Loop: Header=BB151_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB151_23
# %bb.17:                               # %land.lhs.true52
                                        #   in Loop: Header=BB151_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	jne	.LBB151_23
# %bb.18:                               # %if.then58
                                        #   in Loop: Header=BB151_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB151_22
# %bb.19:                               # %if.then63
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB151_21
# %bb.20:                               # %if.then76
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
.LBB151_21:                             # %if.end81
	jmp	.LBB151_27
.LBB151_22:                             # %if.end82
                                        #   in Loop: Header=BB151_1 Depth=1
	jmp	.LBB151_23
.LBB151_23:                             # %if.end83
                                        #   in Loop: Header=BB151_1 Depth=1
	jmp	.LBB151_24
.LBB151_24:                             # %if.end84
                                        #   in Loop: Header=BB151_1 Depth=1
	jmp	.LBB151_25
.LBB151_25:                             # %for.inc
                                        #   in Loop: Header=BB151_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB151_1
.LBB151_26:                             # %for.end.loopexit
	jmp	.LBB151_27
.LBB151_27:                             # %for.end
	cmpl	$670868072, -16(%rbp)   # imm = 0x27FCA268
	jne	.LBB151_29
.LBB151_28:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB151_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB151_28
.Lfunc_end151:
	.size	mm_unmark_short_term_for_reference.88, .Lfunc_end151-mm_unmark_short_term_for_reference.88
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_frame_num_desc.89
	.type	compare_fs_by_frame_num_desc.89,@function
compare_fs_by_frame_num_desc.89:        # @compare_fs_by_frame_num_desc.89
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1777268961, -16(%rbp)  # imm = 0x69EEF8E1
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	24(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	24(%rcx), %eax
	jge	.LBB152_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB152_5
.LBB152_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	24(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	24(%rcx), %eax
	jle	.LBB152_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB152_5
.LBB152_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB152_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1777268961, -16(%rbp)  # imm = 0x69EEF8E1
	jne	.LBB152_7
.LBB152_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB152_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB152_6
.Lfunc_end152:
	.size	compare_fs_by_frame_num_desc.89, .Lfunc_end152-compare_fs_by_frame_num_desc.89
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function sliding_window_memory_management.90
	.type	sliding_window_memory_management.90,@function
sliding_window_memory_management.90:    # @sliding_window_memory_management.90
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$666756849, -8(%rbp)    # imm = 0x27BDE6F1
	movq	%rdi, -16(%rbp)
	movl	dpb+32, %eax
	movq	active_sps, %rcx
	movl	1132(%rcx), %ecx
	subl	dpb+36, %ecx
	cmpl	%ecx, %eax
	jne	.LBB153_10
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB153_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB153_8
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB153_2 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 4(%rax)
	je	.LBB153_6
# %bb.4:                                # %land.lhs.true
                                        #   in Loop: Header=BB153_2 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB153_6
# %bb.5:                                # %if.then5
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_reference
	callq	update_ref_list
	jmp	.LBB153_9
.LBB153_6:                              # %if.end
                                        #   in Loop: Header=BB153_2 Depth=1
	jmp	.LBB153_7
.LBB153_7:                              # %for.inc
                                        #   in Loop: Header=BB153_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB153_2
.LBB153_8:                              # %for.end.loopexit
	jmp	.LBB153_9
.LBB153_9:                              # %for.end
	jmp	.LBB153_10
.LBB153_10:                             # %if.end8
	movq	-16(%rbp), %rax
	movl	$0, 6376(%rax)
	cmpl	$666756849, -8(%rbp)    # imm = 0x27BDE6F1
	jne	.LBB153_12
.LBB153_11:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB153_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB153_11
.Lfunc_end153:
	.size	sliding_window_memory_management.90, .Lfunc_end153-sliding_window_memory_management.90
	.cfi_endproc
                                        # -- End function
	.globl	reorder_ref_pic_list.91 # -- Begin function reorder_ref_pic_list.91
	.p2align	4, 0x90
	.type	reorder_ref_pic_list.91,@function
reorder_ref_pic_list.91:                # @reorder_ref_pic_list.91
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$1856237340, -60(%rbp)  # imm = 0x6EA3EF1C
	movq	%rdi, -72(%rbp)
	movq	%rsi, -80(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -32(%rbp)
	movq	%r9, -88(%rbp)
	movl	$0, -36(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB154_2
# %bb.1:                                # %if.then
	movl	-44(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	72464(%rax), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB154_3
.LBB154_2:                              # %if.else
	movl	-44(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	72464(%rax), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
.LBB154_3:                              # %if.end
	movl	-24(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB154_4:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$3, (%rax,%rcx,4)
	je	.LBB154_24
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB154_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$3, (%rax,%rcx,4)
	jle	.LBB154_7
# %bb.6:                                # %if.then8
                                        #   in Loop: Header=BB154_4 Depth=1
	movabsq	$.L.str.12, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB154_7:                              # %if.end9
                                        #   in Loop: Header=BB154_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$2, (%rax,%rcx,4)
	jge	.LBB154_21
# %bb.8:                                # %if.then13
                                        #   in Loop: Header=BB154_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	jne	.LBB154_13
# %bb.9:                                # %if.then17
                                        #   in Loop: Header=BB154_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB154_11
# %bb.10:                               # %if.then22
                                        #   in Loop: Header=BB154_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	addl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB154_12
.LBB154_11:                             # %if.else28
                                        #   in Loop: Header=BB154_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -8(%rbp)
.LBB154_12:                             # %if.end33
                                        #   in Loop: Header=BB154_4 Depth=1
	jmp	.LBB154_17
.LBB154_13:                             # %if.else34
                                        #   in Loop: Header=BB154_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	cmpl	-16(%rbp), %eax
	jl	.LBB154_15
# %bb.14:                               # %if.then40
                                        #   in Loop: Header=BB154_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB154_16
.LBB154_15:                             # %if.else46
                                        #   in Loop: Header=BB154_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -8(%rbp)
.LBB154_16:                             # %if.end51
                                        #   in Loop: Header=BB154_4 Depth=1
	jmp	.LBB154_17
.LBB154_17:                             # %if.end52
                                        #   in Loop: Header=BB154_4 Depth=1
	movl	-8(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jle	.LBB154_19
# %bb.18:                               # %if.then54
                                        #   in Loop: Header=BB154_4 Depth=1
	movl	-8(%rbp), %eax
	subl	-16(%rbp), %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB154_20
.LBB154_19:                             # %if.else56
                                        #   in Loop: Header=BB154_4 Depth=1
	movl	-8(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB154_20:                             # %if.end57
                                        #   in Loop: Header=BB154_4 Depth=1
	movq	-72(%rbp), %rdi
	movl	-20(%rbp), %esi
	movl	-40(%rbp), %edx
	leaq	-36(%rbp), %rcx
	callq	reorder_short_term
	jmp	.LBB154_22
.LBB154_21:                             # %if.else58
                                        #   in Loop: Header=BB154_4 Depth=1
	movq	-72(%rbp), %rdi
	movl	-20(%rbp), %esi
	movq	-88(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %edx
	leaq	-36(%rbp), %rcx
	callq	reorder_long_term
.LBB154_22:                             # %if.end61
                                        #   in Loop: Header=BB154_4 Depth=1
	jmp	.LBB154_23
.LBB154_23:                             # %for.inc
                                        #   in Loop: Header=BB154_4 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB154_4
.LBB154_24:                             # %for.end
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movq	-80(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$1856237340, -60(%rbp)  # imm = 0x6EA3EF1C
	jne	.LBB154_26
.LBB154_25:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB154_26:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB154_25
.Lfunc_end154:
	.size	reorder_ref_pic_list.91, .Lfunc_end154-reorder_ref_pic_list.91
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_pic_num_desc.92
	.type	compare_pic_by_pic_num_desc.92,@function
compare_pic_by_pic_num_desc.92:         # @compare_pic_by_pic_num_desc.92
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$785488551, -16(%rbp)   # imm = 0x2ED19AA7
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	6364(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6364(%rcx), %eax
	jge	.LBB155_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB155_5
.LBB155_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	6364(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6364(%rcx), %eax
	jle	.LBB155_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB155_5
.LBB155_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB155_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$785488551, -16(%rbp)   # imm = 0x2ED19AA7
	jne	.LBB155_7
.LBB155_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB155_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB155_6
.Lfunc_end155:
	.size	compare_pic_by_pic_num_desc.92, .Lfunc_end155-compare_pic_by_pic_num_desc.92
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mark_pic_long_term.93
	.type	mark_pic_long_term.93,@function
mark_pic_long_term.93:                  # @mark_pic_long_term.93
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1991857342, -24(%rbp)  # imm = 0x76B954BE
	movq	%rdi, -32(%rbp)
	movl	%esi, -8(%rbp)
	movl	%edx, -12(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB156_11
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB156_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB156_10
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB156_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB156_8
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB156_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB156_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB156_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB156_7
# %bb.6:                                # %if.then10
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	$3, 8(%rax)
	jmp	.LBB156_39
.LBB156_7:                              # %if.end
                                        #   in Loop: Header=BB156_2 Depth=1
	jmp	.LBB156_8
.LBB156_8:                              # %if.end50
                                        #   in Loop: Header=BB156_2 Depth=1
	jmp	.LBB156_9
.LBB156_9:                              # %for.inc
                                        #   in Loop: Header=BB156_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB156_2
.LBB156_10:                             # %for.end
	movabsq	$.L.str.25, %rdi
	movb	$0, %al
	callq	printf
	jmp	.LBB156_39
.LBB156_11:                             # %if.else
	movq	-32(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB156_13
# %bb.12:                               # %if.then53
	movl	$1, -16(%rbp)
	movl	$0, -20(%rbp)
	jmp	.LBB156_14
.LBB156_13:                             # %if.else54
	movl	$0, -16(%rbp)
	movl	$1, -20(%rbp)
.LBB156_14:                             # %if.end55
	movl	$0, -4(%rbp)
.LBB156_15:                             # %for.cond56
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB156_38
# %bb.16:                               # %for.body58
                                        #   in Loop: Header=BB156_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB156_26
# %bb.17:                               # %if.then63
                                        #   in Loop: Header=BB156_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB156_25
# %bb.18:                               # %land.lhs.true69
                                        #   in Loop: Header=BB156_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB156_25
# %bb.19:                               # %if.then75
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	je	.LBB156_22
# %bb.20:                               # %land.lhs.true80
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-8(%rbp), %eax
	je	.LBB156_22
# %bb.21:                               # %if.then85
	movabsq	$.L.str.26, %rdi
	movb	$0, %al
	callq	printf
.LBB156_22:                             # %if.end87
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	shll	$1, %eax
	addl	-16(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	orl	$1, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB156_24
# %bb.23:                               # %if.then110
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB156_24:                             # %if.end123
	jmp	.LBB156_39
.LBB156_25:                             # %if.end124
                                        #   in Loop: Header=BB156_15 Depth=1
	jmp	.LBB156_26
.LBB156_26:                             # %if.end125
                                        #   in Loop: Header=BB156_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB156_36
# %bb.27:                               # %if.then131
                                        #   in Loop: Header=BB156_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB156_35
# %bb.28:                               # %land.lhs.true137
                                        #   in Loop: Header=BB156_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB156_35
# %bb.29:                               # %if.then143
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	je	.LBB156_32
# %bb.30:                               # %land.lhs.true148
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-8(%rbp), %eax
	je	.LBB156_32
# %bb.31:                               # %if.then153
	movabsq	$.L.str.26, %rdi
	movb	$0, %al
	callq	printf
.LBB156_32:                             # %if.end155
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	shll	$1, %eax
	addl	-16(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	orl	$2, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB156_34
# %bb.33:                               # %if.then181
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB156_34:                             # %if.end194
	jmp	.LBB156_39
.LBB156_35:                             # %if.end195
                                        #   in Loop: Header=BB156_15 Depth=1
	jmp	.LBB156_36
.LBB156_36:                             # %if.end196
                                        #   in Loop: Header=BB156_15 Depth=1
	jmp	.LBB156_37
.LBB156_37:                             # %for.inc197
                                        #   in Loop: Header=BB156_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB156_15
.LBB156_38:                             # %for.end199
	movabsq	$.L.str.27, %rdi
	movb	$0, %al
	callq	printf
.LBB156_39:                             # %if.end201
	cmpl	$1991857342, -24(%rbp)  # imm = 0x76B954BE
	jne	.LBB156_41
.LBB156_40:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB156_41:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB156_40
.Lfunc_end156:
	.size	mark_pic_long_term.93, .Lfunc_end156-mark_pic_long_term.93
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mark_pic_long_term.94
	.type	mark_pic_long_term.94,@function
mark_pic_long_term.94:                  # @mark_pic_long_term.94
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$464457731, -20(%rbp)   # imm = 0x1BAF1003
	movq	%rdi, -32(%rbp)
	movl	%esi, -8(%rbp)
	movl	%edx, -12(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB157_11
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB157_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB157_10
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB157_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB157_8
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB157_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB157_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB157_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB157_7
# %bb.6:                                # %if.then10
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	$3, 8(%rax)
	jmp	.LBB157_39
.LBB157_7:                              # %if.end
                                        #   in Loop: Header=BB157_2 Depth=1
	jmp	.LBB157_8
.LBB157_8:                              # %if.end50
                                        #   in Loop: Header=BB157_2 Depth=1
	jmp	.LBB157_9
.LBB157_9:                              # %for.inc
                                        #   in Loop: Header=BB157_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB157_2
.LBB157_10:                             # %for.end
	movabsq	$.L.str.25, %rdi
	movb	$0, %al
	callq	printf
	jmp	.LBB157_39
.LBB157_11:                             # %if.else
	movq	-32(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB157_13
# %bb.12:                               # %if.then53
	movl	$1, -16(%rbp)
	movl	$0, -24(%rbp)
	jmp	.LBB157_14
.LBB157_13:                             # %if.else54
	movl	$0, -16(%rbp)
	movl	$1, -24(%rbp)
.LBB157_14:                             # %if.end55
	movl	$0, -4(%rbp)
.LBB157_15:                             # %for.cond56
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB157_38
# %bb.16:                               # %for.body58
                                        #   in Loop: Header=BB157_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB157_26
# %bb.17:                               # %if.then63
                                        #   in Loop: Header=BB157_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB157_25
# %bb.18:                               # %land.lhs.true69
                                        #   in Loop: Header=BB157_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB157_25
# %bb.19:                               # %if.then75
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	je	.LBB157_22
# %bb.20:                               # %land.lhs.true80
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-8(%rbp), %eax
	je	.LBB157_22
# %bb.21:                               # %if.then85
	movabsq	$.L.str.26, %rdi
	movb	$0, %al
	callq	printf
.LBB157_22:                             # %if.end87
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	shll	$1, %eax
	addl	-16(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	orl	$1, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB157_24
# %bb.23:                               # %if.then110
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB157_24:                             # %if.end123
	jmp	.LBB157_39
.LBB157_25:                             # %if.end124
                                        #   in Loop: Header=BB157_15 Depth=1
	jmp	.LBB157_26
.LBB157_26:                             # %if.end125
                                        #   in Loop: Header=BB157_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB157_36
# %bb.27:                               # %if.then131
                                        #   in Loop: Header=BB157_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB157_35
# %bb.28:                               # %land.lhs.true137
                                        #   in Loop: Header=BB157_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB157_35
# %bb.29:                               # %if.then143
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	je	.LBB157_32
# %bb.30:                               # %land.lhs.true148
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-8(%rbp), %eax
	je	.LBB157_32
# %bb.31:                               # %if.then153
	movabsq	$.L.str.26, %rdi
	movb	$0, %al
	callq	printf
.LBB157_32:                             # %if.end155
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	shll	$1, %eax
	addl	-16(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	orl	$2, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB157_34
# %bb.33:                               # %if.then181
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB157_34:                             # %if.end194
	jmp	.LBB157_39
.LBB157_35:                             # %if.end195
                                        #   in Loop: Header=BB157_15 Depth=1
	jmp	.LBB157_36
.LBB157_36:                             # %if.end196
                                        #   in Loop: Header=BB157_15 Depth=1
	jmp	.LBB157_37
.LBB157_37:                             # %for.inc197
                                        #   in Loop: Header=BB157_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB157_15
.LBB157_38:                             # %for.end199
	movabsq	$.L.str.27, %rdi
	movb	$0, %al
	callq	printf
.LBB157_39:                             # %if.end201
	cmpl	$464457731, -20(%rbp)   # imm = 0x1BAF1003
	jne	.LBB157_41
.LBB157_40:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB157_41:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB157_40
.Lfunc_end157:
	.size	mark_pic_long_term.94, .Lfunc_end157-mark_pic_long_term.94
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function reorder_long_term.95
	.type	reorder_long_term.95,@function
reorder_long_term.95:                   # @reorder_long_term.95
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1346230232, -44(%rbp)  # imm = 0x503DD7D8
	movq	%rdi, -16(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -40(%rbp)
	movl	-24(%rbp), %edi
	callq	get_long_term_pic
	movq	%rax, -56(%rbp)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB158_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-40(%rbp), %rcx
	cmpl	(%rcx), %eax
	jle	.LBB158_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB158_1 Depth=1
	movq	-16(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB158_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB158_1
.LBB158_4:                              # %for.end
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movl	(%rdx), %esi
	movl	%esi, %edi
	addl	$1, %edi
	movl	%edi, (%rdx)
	movslq	%esi, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB158_5:                              # %for.cond5
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jg	.LBB158_11
# %bb.6:                                # %for.body8
                                        #   in Loop: Header=BB158_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB158_8
# %bb.7:                                # %lor.lhs.false
                                        #   in Loop: Header=BB158_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6368(%rax), %eax
	cmpl	-24(%rbp), %eax
	je	.LBB158_9
.LBB158_8:                              # %if.then
                                        #   in Loop: Header=BB158_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movl	-20(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -20(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB158_9:                              # %if.end
                                        #   in Loop: Header=BB158_5 Depth=1
	jmp	.LBB158_10
.LBB158_10:                             # %for.inc19
                                        #   in Loop: Header=BB158_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB158_5
.LBB158_11:                             # %for.end21
	cmpl	$1346230232, -44(%rbp)  # imm = 0x503DD7D8
	jne	.LBB158_13
.LBB158_12:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB158_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB158_12
.Lfunc_end158:
	.size	reorder_long_term.95, .Lfunc_end158-reorder_long_term.95
	.cfi_endproc
                                        # -- End function
	.globl	store_picture_in_dpb.96 # -- Begin function store_picture_in_dpb.96
	.p2align	4, 0x90
	.type	store_picture_in_dpb.96,@function
store_picture_in_dpb.96:                # @store_picture_in_dpb.96
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$762843851, -24(%rbp)   # imm = 0x2D7812CB
	movq	%rdi, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 6380(%rcx)
	movq	img, %rax
	movl	$0, 72644(%rax)
	movq	img, %rax
	cmpl	$2, 28(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 72640(%rcx)
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	je	.LBB159_2
# %bb.1:                                # %if.then
	movq	-8(%rbp), %rdi
	callq	idr_memory_management
	jmp	.LBB159_6
.LBB159_2:                              # %if.else
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB159_5
# %bb.3:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72500(%rax)
	je	.LBB159_5
# %bb.4:                                # %if.then6
	movq	-8(%rbp), %rdi
	callq	adaptive_memory_management
.LBB159_5:                              # %if.end
	jmp	.LBB159_6
.LBB159_6:                              # %if.end7
	movq	-8(%rbp), %rax
	cmpl	$1, (%rax)
	je	.LBB159_8
# %bb.7:                                # %lor.lhs.false
	movq	-8(%rbp), %rax
	cmpl	$2, (%rax)
	jne	.LBB159_23
.LBB159_8:                              # %if.then14
	cmpq	$0, dpb+56
	je	.LBB159_22
# %bb.9:                                # %if.then16
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	cmpl	6364(%rcx), %eax
	jne	.LBB159_21
# %bb.10:                               # %if.then19
	movq	-8(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB159_12
# %bb.11:                               # %land.lhs.true23
	movq	dpb+56, %rax
	cmpl	$2, (%rax)
	je	.LBB159_14
.LBB159_12:                             # %lor.lhs.false26
	movq	-8(%rbp), %rax
	cmpl	$2, (%rax)
	jne	.LBB159_20
# %bb.13:                               # %land.lhs.true30
	movq	dpb+56, %rax
	cmpl	$1, (%rax)
	jne	.LBB159_20
.LBB159_14:                             # %if.then34
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB159_16
# %bb.15:                               # %land.lhs.true37
	movq	dpb+56, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB159_18
.LBB159_16:                             # %lor.lhs.false40
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	jne	.LBB159_19
# %bb.17:                               # %land.lhs.true43
	movq	dpb+56, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB159_19
.LBB159_18:                             # %if.then47
	movq	dpb+56, %rdi
	movq	-8(%rbp), %rsi
	callq	insert_picture_in_dpb
	callq	update_ref_list
	callq	update_ltref_list
	callq	dump_dpb
	movq	$0, dpb+56
	jmp	.LBB159_50
.LBB159_19:                             # %if.end48
	jmp	.LBB159_20
.LBB159_20:                             # %if.end49
	jmp	.LBB159_21
.LBB159_21:                             # %if.end50
	jmp	.LBB159_22
.LBB159_22:                             # %if.end51
	jmp	.LBB159_23
.LBB159_23:                             # %if.end52
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	jne	.LBB159_27
# %bb.24:                               # %land.lhs.true56
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB159_27
# %bb.25:                               # %land.lhs.true59
	movq	img, %rax
	cmpl	$0, 72500(%rax)
	jne	.LBB159_27
# %bb.26:                               # %if.then62
	movq	-8(%rbp), %rdi
	callq	sliding_window_memory_management
.LBB159_27:                             # %if.end63
	movl	dpb+28, %eax
	cmpl	dpb+24, %eax
	jne	.LBB159_29
# %bb.28:                               # %if.then66
	callq	remove_unused_frame_from_dpb
.LBB159_29:                             # %if.end67
	jmp	.LBB159_30
.LBB159_30:                             # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	dpb+28, %eax
	cmpl	dpb+24, %eax
	jne	.LBB159_37
# %bb.31:                               # %while.body
                                        #   in Loop: Header=BB159_30 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	jne	.LBB159_36
# %bb.32:                               # %if.then72
                                        #   in Loop: Header=BB159_30 Depth=1
	leaq	-16(%rbp), %rdi
	leaq	-20(%rbp), %rsi
	callq	get_smallest_poc
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	cmpl	-20(%rbp), %eax
	je	.LBB159_34
# %bb.33:                               # %lor.lhs.false75
                                        #   in Loop: Header=BB159_30 Depth=1
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB159_35
.LBB159_34:                             # %if.then79
	movq	-8(%rbp), %rdi
	movl	p_dec, %esi
	callq	direct_output
	jmp	.LBB159_50
.LBB159_35:                             # %if.end80
                                        #   in Loop: Header=BB159_30 Depth=1
	jmp	.LBB159_36
.LBB159_36:                             # %if.end81
                                        #   in Loop: Header=BB159_30 Depth=1
	callq	output_one_frame_from_dpb
	jmp	.LBB159_30
.LBB159_37:                             # %while.end
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB159_46
# %bb.38:                               # %land.lhs.true84
	movq	-8(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB159_46
# %bb.39:                               # %if.then86
	movl	$0, -12(%rbp)
.LBB159_40:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB159_45
# %bb.41:                               # %for.body
                                        #   in Loop: Header=BB159_40 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	cmpl	6360(%rcx), %eax
	jne	.LBB159_43
# %bb.42:                               # %if.then93
                                        #   in Loop: Header=BB159_40 Depth=1
	movabsq	$.L.str.13, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB159_43:                             # %if.end94
                                        #   in Loop: Header=BB159_40 Depth=1
	jmp	.LBB159_44
.LBB159_44:                             # %for.inc
                                        #   in Loop: Header=BB159_40 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB159_40
.LBB159_45:                             # %for.end
	jmp	.LBB159_46
.LBB159_46:                             # %if.end95
	movq	dpb, %rax
	movl	dpb+28, %ecx
	movq	(%rax,%rcx,8), %rdi
	movq	-8(%rbp), %rsi
	callq	insert_picture_in_dpb
	movq	-8(%rbp), %rax
	cmpl	$0, (%rax)
	je	.LBB159_48
# %bb.47:                               # %if.then101
	movq	dpb, %rax
	movl	dpb+28, %ecx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, dpb+56
	jmp	.LBB159_49
.LBB159_48:                             # %if.else104
	movq	$0, dpb+56
.LBB159_49:                             # %if.end105
	movl	dpb+28, %eax
	addl	$1, %eax
	movl	%eax, dpb+28
	callq	update_ref_list
	callq	update_ltref_list
	callq	dump_dpb
.LBB159_50:                             # %return
	cmpl	$762843851, -24(%rbp)   # imm = 0x2D7812CB
	jne	.LBB159_52
.LBB159_51:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB159_52:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB159_51
.Lfunc_end159:
	.size	store_picture_in_dpb.96, .Lfunc_end159-store_picture_in_dpb.96
	.cfi_endproc
                                        # -- End function
	.globl	reorder_ref_pic_list.97 # -- Begin function reorder_ref_pic_list.97
	.p2align	4, 0x90
	.type	reorder_ref_pic_list.97,@function
reorder_ref_pic_list.97:                # @reorder_ref_pic_list.97
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$597315131, -60(%rbp)   # imm = 0x239A4E3B
	movq	%rdi, -72(%rbp)
	movq	%rsi, -80(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -32(%rbp)
	movq	%r9, -88(%rbp)
	movl	$0, -36(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB160_2
# %bb.1:                                # %if.then
	movl	-44(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	72464(%rax), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB160_3
.LBB160_2:                              # %if.else
	movl	-44(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	72464(%rax), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
.LBB160_3:                              # %if.end
	movl	-24(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB160_4:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$3, (%rax,%rcx,4)
	je	.LBB160_24
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB160_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$3, (%rax,%rcx,4)
	jle	.LBB160_7
# %bb.6:                                # %if.then8
                                        #   in Loop: Header=BB160_4 Depth=1
	movabsq	$.L.str.12, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB160_7:                              # %if.end9
                                        #   in Loop: Header=BB160_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$2, (%rax,%rcx,4)
	jge	.LBB160_21
# %bb.8:                                # %if.then13
                                        #   in Loop: Header=BB160_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	jne	.LBB160_13
# %bb.9:                                # %if.then17
                                        #   in Loop: Header=BB160_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB160_11
# %bb.10:                               # %if.then22
                                        #   in Loop: Header=BB160_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	addl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB160_12
.LBB160_11:                             # %if.else28
                                        #   in Loop: Header=BB160_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -8(%rbp)
.LBB160_12:                             # %if.end33
                                        #   in Loop: Header=BB160_4 Depth=1
	jmp	.LBB160_17
.LBB160_13:                             # %if.else34
                                        #   in Loop: Header=BB160_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	cmpl	-16(%rbp), %eax
	jl	.LBB160_15
# %bb.14:                               # %if.then40
                                        #   in Loop: Header=BB160_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB160_16
.LBB160_15:                             # %if.else46
                                        #   in Loop: Header=BB160_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -8(%rbp)
.LBB160_16:                             # %if.end51
                                        #   in Loop: Header=BB160_4 Depth=1
	jmp	.LBB160_17
.LBB160_17:                             # %if.end52
                                        #   in Loop: Header=BB160_4 Depth=1
	movl	-8(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jle	.LBB160_19
# %bb.18:                               # %if.then54
                                        #   in Loop: Header=BB160_4 Depth=1
	movl	-8(%rbp), %eax
	subl	-16(%rbp), %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB160_20
.LBB160_19:                             # %if.else56
                                        #   in Loop: Header=BB160_4 Depth=1
	movl	-8(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB160_20:                             # %if.end57
                                        #   in Loop: Header=BB160_4 Depth=1
	movq	-72(%rbp), %rdi
	movl	-20(%rbp), %esi
	movl	-40(%rbp), %edx
	leaq	-36(%rbp), %rcx
	callq	reorder_short_term
	jmp	.LBB160_22
.LBB160_21:                             # %if.else58
                                        #   in Loop: Header=BB160_4 Depth=1
	movq	-72(%rbp), %rdi
	movl	-20(%rbp), %esi
	movq	-88(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %edx
	leaq	-36(%rbp), %rcx
	callq	reorder_long_term
.LBB160_22:                             # %if.end61
                                        #   in Loop: Header=BB160_4 Depth=1
	jmp	.LBB160_23
.LBB160_23:                             # %for.inc
                                        #   in Loop: Header=BB160_4 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB160_4
.LBB160_24:                             # %for.end
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movq	-80(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$597315131, -60(%rbp)   # imm = 0x239A4E3B
	jne	.LBB160_26
.LBB160_25:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB160_26:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB160_25
.Lfunc_end160:
	.size	reorder_ref_pic_list.97, .Lfunc_end160-reorder_ref_pic_list.97
	.cfi_endproc
                                        # -- End function
	.globl	dpb_combine_field.98    # -- Begin function dpb_combine_field.98
	.p2align	4, 0x90
	.type	dpb_combine_field.98,@function
dpb_combine_field.98:                   # @dpb_combine_field.98
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1758217853, -32(%rbp)  # imm = 0x68CC467D
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %edx
	shll	$1, %edx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6404(%rax), %r8d
	shll	$1, %r8d
	xorl	%edi, %edi
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movl	$0, -4(%rbp)
.LBB161_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	6396(%rcx), %eax
	jge	.LBB161_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB161_1 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB161_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB161_1
.LBB161_4:                              # %for.end
	movl	$0, -4(%rbp)
.LBB161_5:                              # %for.cond28
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	6404(%rcx), %eax
	jge	.LBB161_8
# %bb.6:                                # %for.body33
                                        #   in Loop: Header=BB161_5 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.7:                                # %for.inc95
                                        #   in Loop: Header=BB161_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB161_5
.LBB161_8:                              # %for.end97
	movq	-16(%rbp), %rax
	movq	40(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB161_10
# %bb.9:                                # %cond.true
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	4(%rax), %ecx
	jmp	.LBB161_11
.LBB161_10:                             # %cond.false
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	4(%rax), %ecx
.LBB161_11:                             # %cond.end
	xorl	%eax, %eax
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 4(%rdx)
	movq	-16(%rbp), %rdx
	movl	%ecx, 36(%rdx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 8(%rdx)
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	56(%rdx), %rdx
	movl	%ecx, 8(%rdx)
	movq	-16(%rbp), %rdx
	movq	48(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	56(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	48(%rdx), %rdx
	movl	%ecx, 12(%rdx)
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 12(%rdx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	$0, 6380(%rcx)
	je	.LBB161_13
# %bb.12:                               # %land.rhs
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6380(%rax)
	setne	%al
.LBB161_13:                             # %land.end
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%eax, 6380(%rdx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB161_15
# %bb.14:                               # %land.rhs138
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	setne	%cl
.LBB161_15:                             # %land.end142
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB161_17
# %bb.16:                               # %if.then
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB161_17:                             # %if.end
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	$0, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6552(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6560(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6560(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6560(%rax)
	je	.LBB161_19
# %bb.18:                               # %if.then167
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6572(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6572(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6576(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6576(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6564(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6564(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6568(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6568(%rcx)
.LBB161_19:                             # %if.end180
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movl	$0, -4(%rbp)
.LBB161_20:                             # %for.cond186
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	listXsize+4, %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB161_26
# %bb.21:                               # %for.body190
                                        #   in Loop: Header=BB161_20 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %esi
	idivq	%rsi
	movq	%rax, %rcx
	shlq	$1, %rcx
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	288(%rax,%rdx,8), %rax
	cqto
	idivq	%rsi
	shlq	$1, %rax
	cmpq	%rax, %rcx
	jge	.LBB161_23
# %bb.22:                               # %cond.true208
                                        #   in Loop: Header=BB161_20 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
	jmp	.LBB161_24
.LBB161_23:                             # %cond.false217
                                        #   in Loop: Header=BB161_20 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
.LBB161_24:                             # %cond.end226
                                        #   in Loop: Header=BB161_20 Depth=1
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, 288(%rcx,%rdx,8)
# %bb.25:                               # %for.inc233
                                        #   in Loop: Header=BB161_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB161_20
.LBB161_26:                             # %for.end235
	movl	$0, -4(%rbp)
.LBB161_27:                             # %for.cond236
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	listXsize, %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB161_33
# %bb.28:                               # %for.body241
                                        #   in Loop: Header=BB161_27 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %esi
	idivq	%rsi
	movq	%rax, %rcx
	shlq	$1, %rcx
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	24(%rax,%rdx,8), %rax
	cqto
	idivq	%rsi
	shlq	$1, %rax
	cmpq	%rax, %rcx
	jge	.LBB161_30
# %bb.29:                               # %cond.true260
                                        #   in Loop: Header=BB161_27 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
	jmp	.LBB161_31
.LBB161_30:                             # %cond.false269
                                        #   in Loop: Header=BB161_27 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
.LBB161_31:                             # %cond.end278
                                        #   in Loop: Header=BB161_27 Depth=1
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, 24(%rcx,%rdx,8)
# %bb.32:                               # %for.inc285
                                        #   in Loop: Header=BB161_27 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB161_27
.LBB161_33:                             # %for.end287
	movl	$0, -4(%rbp)
.LBB161_34:                             # %for.cond288
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB161_36 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB161_65
# %bb.35:                               # %for.body294
                                        #   in Loop: Header=BB161_34 Depth=1
	movl	$0, -20(%rbp)
.LBB161_36:                             # %for.cond295
                                        #   Parent Loop BB161_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB161_63
# %bb.37:                               # %for.body301
                                        #   in Loop: Header=BB161_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movb	$1, (%rdi,%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movb	$1, (%rdi,%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %di
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rsi,%rax,8), %rax
	movw	%di, (%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -28(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB161_39
# %bb.38:                               # %cond.true439
                                        #   in Loop: Header=BB161_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB161_40
.LBB161_39:                             # %cond.false445
                                        #   in Loop: Header=BB161_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB161_40
.LBB161_40:                             # %cond.end446
                                        #   in Loop: Header=BB161_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB161_42
# %bb.41:                               # %cond.true456
                                        #   in Loop: Header=BB161_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB161_43
.LBB161_42:                             # %cond.false462
                                        #   in Loop: Header=BB161_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB161_43
.LBB161_43:                             # %cond.end463
                                        #   in Loop: Header=BB161_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB161_45
# %bb.44:                               # %cond.true474
                                        #   in Loop: Header=BB161_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	1608(%rax,%rcx,8), %r8
	jmp	.LBB161_46
.LBB161_45:                             # %cond.false479
                                        #   in Loop: Header=BB161_36 Depth=2
	xorl	%r8d, %r8d
	jmp	.LBB161_46
.LBB161_46:                             # %cond.end480
                                        #   in Loop: Header=BB161_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB161_48
# %bb.47:                               # %cond.true495
                                        #   in Loop: Header=BB161_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	1872(%rax,%rcx,8), %rdi
	jmp	.LBB161_49
.LBB161_48:                             # %cond.false501
                                        #   in Loop: Header=BB161_36 Depth=2
	xorl	%edi, %edi
	jmp	.LBB161_49
.LBB161_49:                             # %cond.end502
                                        #   in Loop: Header=BB161_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	%rdi, (%rsi,%rax,8)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -28(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB161_51
# %bb.50:                               # %cond.true641
                                        #   in Loop: Header=BB161_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB161_52
.LBB161_51:                             # %cond.false647
                                        #   in Loop: Header=BB161_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB161_52
.LBB161_52:                             # %cond.end648
                                        #   in Loop: Header=BB161_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB161_54
# %bb.53:                               # %cond.true659
                                        #   in Loop: Header=BB161_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB161_55
.LBB161_54:                             # %cond.false665
                                        #   in Loop: Header=BB161_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB161_55
.LBB161_55:                             # %cond.end666
                                        #   in Loop: Header=BB161_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB161_57
# %bb.56:                               # %cond.true677
                                        #   in Loop: Header=BB161_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	1608(%rax,%rcx,8), %r8
	jmp	.LBB161_58
.LBB161_57:                             # %cond.false683
                                        #   in Loop: Header=BB161_36 Depth=2
	movq	$-1, %r8
	jmp	.LBB161_58
.LBB161_58:                             # %cond.end684
                                        #   in Loop: Header=BB161_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB161_60
# %bb.59:                               # %cond.true700
                                        #   in Loop: Header=BB161_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	1872(%rax,%rcx,8), %r8
	jmp	.LBB161_61
.LBB161_60:                             # %cond.false706
                                        #   in Loop: Header=BB161_36 Depth=2
	movq	$-1, %r8
	jmp	.LBB161_61
.LBB161_61:                             # %cond.end707
                                        #   in Loop: Header=BB161_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
# %bb.62:                               # %for.inc721
                                        #   in Loop: Header=BB161_36 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB161_36
.LBB161_63:                             # %for.end723
                                        #   in Loop: Header=BB161_34 Depth=1
	jmp	.LBB161_64
.LBB161_64:                             # %for.inc724
                                        #   in Loop: Header=BB161_34 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB161_34
.LBB161_65:                             # %for.end726
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB161_67
# %bb.66:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB161_76
.LBB161_67:                             # %if.then729
	movl	$0, -4(%rbp)
.LBB161_68:                             # %for.cond730
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB161_70 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB161_75
# %bb.69:                               # %for.body736
                                        #   in Loop: Header=BB161_68 Depth=1
	movl	$0, -20(%rbp)
.LBB161_70:                             # %for.cond737
                                        #   Parent Loop BB161_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB161_73
# %bb.71:                               # %for.body743
                                        #   in Loop: Header=BB161_70 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.72:                               # %for.inc756
                                        #   in Loop: Header=BB161_70 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB161_70
.LBB161_73:                             # %for.end758
                                        #   in Loop: Header=BB161_68 Depth=1
	jmp	.LBB161_74
.LBB161_74:                             # %for.inc759
                                        #   in Loop: Header=BB161_68 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB161_68
.LBB161_75:                             # %for.end761
	jmp	.LBB161_76
.LBB161_76:                             # %if.end762
	cmpl	$1758217853, -32(%rbp)  # imm = 0x68CC467D
	jne	.LBB161_78
.LBB161_77:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB161_78:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB161_77
.Lfunc_end161:
	.size	dpb_combine_field.98, .Lfunc_end161-dpb_combine_field.98
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_poc_asc.99
	.type	compare_fs_by_poc_asc.99,@function
compare_fs_by_poc_asc.99:               # @compare_fs_by_poc_asc.99
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$669169441, -16(%rbp)   # imm = 0x27E2B721
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB162_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB162_5
.LBB162_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jle	.LBB162_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB162_5
.LBB162_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB162_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$669169441, -16(%rbp)   # imm = 0x27E2B721
	jne	.LBB162_7
.LBB162_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB162_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB162_6
.Lfunc_end162:
	.size	compare_fs_by_poc_asc.99, .Lfunc_end162-compare_fs_by_poc_asc.99
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_mark_current_picture_long_term.100
	.type	mm_mark_current_picture_long_term.100,@function
mm_mark_current_picture_long_term.100:  # @mm_mark_current_picture_long_term.100
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1910764791, -20(%rbp)  # imm = 0x71E3F4F7
	movq	%rdi, -16(%rbp)
	movl	%esi, -4(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB163_2
# %bb.1:                                # %if.then
	movl	-4(%rbp), %edi
	callq	unmark_long_term_frame_for_reference_by_frame_idx
	jmp	.LBB163_3
.LBB163_2:                              # %if.else
	movq	-16(%rbp), %rax
	movl	(%rax), %edi
	movl	-4(%rbp), %esi
	movq	-16(%rbp), %rax
	movl	6364(%rax), %ecx
	movl	$1, %edx
	xorl	%r8d, %r8d
	callq	unmark_long_term_field_for_reference_by_frame_idx
.LBB163_3:                              # %if.end
	movq	-16(%rbp), %rax
	movl	$1, 6376(%rax)
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6372(%rcx)
	cmpl	$1910764791, -20(%rbp)  # imm = 0x71E3F4F7
	jne	.LBB163_5
.LBB163_4:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB163_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB163_4
.Lfunc_end163:
	.size	mm_mark_current_picture_long_term.100, .Lfunc_end163-mm_mark_current_picture_long_term.100
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_pic_num_desc.101
	.type	compare_pic_by_pic_num_desc.101,@function
compare_pic_by_pic_num_desc.101:        # @compare_pic_by_pic_num_desc.101
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1789756305, -16(%rbp)  # imm = 0x6AAD8391
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	6364(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6364(%rcx), %eax
	jge	.LBB164_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB164_5
.LBB164_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	6364(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6364(%rcx), %eax
	jle	.LBB164_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB164_5
.LBB164_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB164_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1789756305, -16(%rbp)  # imm = 0x6AAD8391
	jne	.LBB164_7
.LBB164_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB164_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB164_6
.Lfunc_end164:
	.size	compare_pic_by_pic_num_desc.101, .Lfunc_end164-compare_pic_by_pic_num_desc.101
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function unmark_long_term_frame_for_reference_by_frame_idx.102
	.type	unmark_long_term_frame_for_reference_by_frame_idx.102,@function
unmark_long_term_frame_for_reference_by_frame_idx.102: # @unmark_long_term_frame_for_reference_by_frame_idx.102
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$2105546064, -8(%rbp)   # imm = 0x7D801550
	movl	%edi, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB165_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB165_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB165_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB165_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB165_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB165_4:                              # %if.end
                                        #   in Loop: Header=BB165_1 Depth=1
	jmp	.LBB165_5
.LBB165_5:                              # %for.inc
                                        #   in Loop: Header=BB165_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB165_1
.LBB165_6:                              # %for.end
	cmpl	$2105546064, -8(%rbp)   # imm = 0x7D801550
	jne	.LBB165_8
.LBB165_7:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB165_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB165_7
.Lfunc_end165:
	.size	unmark_long_term_frame_for_reference_by_frame_idx.102, .Lfunc_end165-unmark_long_term_frame_for_reference_by_frame_idx.102
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_poc_desc.103
	.type	compare_pic_by_poc_desc.103,@function
compare_pic_by_poc_desc.103:            # @compare_pic_by_poc_desc.103
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1675582021, -16(%rbp)  # imm = 0x63DF5A45
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB166_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB166_5
.LBB166_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB166_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB166_5
.LBB166_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB166_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1675582021, -16(%rbp)  # imm = 0x63DF5A45
	jne	.LBB166_7
.LBB166_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB166_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB166_6
.Lfunc_end166:
	.size	compare_pic_by_poc_desc.103, .Lfunc_end166-compare_pic_by_poc_desc.103
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_poc_desc.104
	.type	compare_fs_by_poc_desc.104,@function
compare_fs_by_poc_desc.104:             # @compare_fs_by_poc_desc.104
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1119029879, -16(%rbp)  # imm = 0x42B30A77
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB167_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB167_5
.LBB167_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jle	.LBB167_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB167_5
.LBB167_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB167_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1119029879, -16(%rbp)  # imm = 0x42B30A77
	jne	.LBB167_7
.LBB167_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB167_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB167_6
.Lfunc_end167:
	.size	compare_fs_by_poc_desc.104, .Lfunc_end167-compare_fs_by_poc_desc.104
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_poc_asc.105
	.type	compare_pic_by_poc_asc.105,@function
compare_pic_by_poc_asc.105:             # @compare_pic_by_poc_asc.105
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$476927563, -16(%rbp)   # imm = 0x1C6D564B
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB168_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB168_5
.LBB168_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB168_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB168_5
.LBB168_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB168_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$476927563, -16(%rbp)   # imm = 0x1C6D564B
	jne	.LBB168_7
.LBB168_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB168_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB168_6
.Lfunc_end168:
	.size	compare_pic_by_poc_asc.105, .Lfunc_end168-compare_pic_by_poc_asc.105
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function gen_pic_list_from_frame_list.106
	.type	gen_pic_list_from_frame_list.106,@function
gen_pic_list_from_frame_list.106:       # @gen_pic_list_from_frame_list.106
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1279954761, -64(%rbp)  # imm = 0x4C4A8F49
	movl	%edi, -44(%rbp)
	movq	%rsi, -24(%rbp)
	movl	%edx, -12(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -32(%rbp)
	movl	%r9d, -60(%rbp)
	movl	$0, -4(%rbp)
	movl	$0, -8(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB169_2
# %bb.1:                                # %if.then
	movabsq	$is_long_ref, %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB169_3
.LBB169_2:                              # %if.else
	movabsq	$is_short_ref, %rax
	movq	%rax, -40(%rbp)
.LBB169_3:                              # %if.end
	cmpl	$1, -44(%rbp)
	jne	.LBB169_28
# %bb.4:                                # %if.then1
	jmp	.LBB169_5
.LBB169_5:                              # %while.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB169_9 Depth 2
                                        #     Child Loop BB169_18 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	movb	$1, %al
	jl	.LBB169_7
# %bb.6:                                # %lor.rhs
                                        #   in Loop: Header=BB169_5 Depth=1
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	setl	%al
.LBB169_7:                              # %lor.end
                                        #   in Loop: Header=BB169_5 Depth=1
	testb	$1, %al
	jne	.LBB169_8
	jmp	.LBB169_27
.LBB169_8:                              # %while.body
                                        #   in Loop: Header=BB169_5 Depth=1
	jmp	.LBB169_9
.LBB169_9:                              # %for.cond
                                        #   Parent Loop BB169_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB169_16
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB169_9 Depth=2
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB169_14
# %bb.11:                               # %if.then6
                                        #   in Loop: Header=BB169_9 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB169_13
# %bb.12:                               # %if.then10
                                        #   in Loop: Header=BB169_5 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB169_17
.LBB169_13:                             # %if.end17
                                        #   in Loop: Header=BB169_9 Depth=2
	jmp	.LBB169_14
.LBB169_14:                             # %if.end18
                                        #   in Loop: Header=BB169_9 Depth=2
	jmp	.LBB169_15
.LBB169_15:                             # %for.inc
                                        #   in Loop: Header=BB169_9 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB169_9
.LBB169_16:                             # %for.end.loopexit
                                        #   in Loop: Header=BB169_5 Depth=1
	jmp	.LBB169_17
.LBB169_17:                             # %for.end
                                        #   in Loop: Header=BB169_5 Depth=1
	jmp	.LBB169_18
.LBB169_18:                             # %for.cond20
                                        #   Parent Loop BB169_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB169_25
# %bb.19:                               # %for.body22
                                        #   in Loop: Header=BB169_18 Depth=2
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB169_23
# %bb.20:                               # %if.then28
                                        #   in Loop: Header=BB169_18 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB169_22
# %bb.21:                               # %if.then33
                                        #   in Loop: Header=BB169_5 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB169_26
.LBB169_22:                             # %if.end41
                                        #   in Loop: Header=BB169_18 Depth=2
	jmp	.LBB169_23
.LBB169_23:                             # %if.end42
                                        #   in Loop: Header=BB169_18 Depth=2
	jmp	.LBB169_24
.LBB169_24:                             # %for.inc43
                                        #   in Loop: Header=BB169_18 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB169_18
.LBB169_25:                             # %for.end45.loopexit
                                        #   in Loop: Header=BB169_5 Depth=1
	jmp	.LBB169_26
.LBB169_26:                             # %for.end45
                                        #   in Loop: Header=BB169_5 Depth=1
	jmp	.LBB169_5
.LBB169_27:                             # %while.end
	jmp	.LBB169_28
.LBB169_28:                             # %if.end46
	cmpl	$2, -44(%rbp)
	jne	.LBB169_53
# %bb.29:                               # %if.then48
	jmp	.LBB169_30
.LBB169_30:                             # %while.cond49
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB169_34 Depth 2
                                        #     Child Loop BB169_43 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	movb	$1, %al
	jl	.LBB169_32
# %bb.31:                               # %lor.rhs51
                                        #   in Loop: Header=BB169_30 Depth=1
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	setl	%al
.LBB169_32:                             # %lor.end53
                                        #   in Loop: Header=BB169_30 Depth=1
	testb	$1, %al
	jne	.LBB169_33
	jmp	.LBB169_52
.LBB169_33:                             # %while.body54
                                        #   in Loop: Header=BB169_30 Depth=1
	jmp	.LBB169_34
.LBB169_34:                             # %for.cond55
                                        #   Parent Loop BB169_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB169_41
# %bb.35:                               # %for.body57
                                        #   in Loop: Header=BB169_34 Depth=2
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB169_39
# %bb.36:                               # %if.then63
                                        #   in Loop: Header=BB169_34 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB169_38
# %bb.37:                               # %if.then69
                                        #   in Loop: Header=BB169_30 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB169_42
.LBB169_38:                             # %if.end77
                                        #   in Loop: Header=BB169_34 Depth=2
	jmp	.LBB169_39
.LBB169_39:                             # %if.end78
                                        #   in Loop: Header=BB169_34 Depth=2
	jmp	.LBB169_40
.LBB169_40:                             # %for.inc79
                                        #   in Loop: Header=BB169_34 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB169_34
.LBB169_41:                             # %for.end81.loopexit
                                        #   in Loop: Header=BB169_30 Depth=1
	jmp	.LBB169_42
.LBB169_42:                             # %for.end81
                                        #   in Loop: Header=BB169_30 Depth=1
	jmp	.LBB169_43
.LBB169_43:                             # %for.cond82
                                        #   Parent Loop BB169_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB169_50
# %bb.44:                               # %for.body84
                                        #   in Loop: Header=BB169_43 Depth=2
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB169_48
# %bb.45:                               # %if.then90
                                        #   in Loop: Header=BB169_43 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB169_47
# %bb.46:                               # %if.then96
                                        #   in Loop: Header=BB169_30 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB169_51
.LBB169_47:                             # %if.end104
                                        #   in Loop: Header=BB169_43 Depth=2
	jmp	.LBB169_48
.LBB169_48:                             # %if.end105
                                        #   in Loop: Header=BB169_43 Depth=2
	jmp	.LBB169_49
.LBB169_49:                             # %for.inc106
                                        #   in Loop: Header=BB169_43 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB169_43
.LBB169_50:                             # %for.end108.loopexit
                                        #   in Loop: Header=BB169_30 Depth=1
	jmp	.LBB169_51
.LBB169_51:                             # %for.end108
                                        #   in Loop: Header=BB169_30 Depth=1
	jmp	.LBB169_30
.LBB169_52:                             # %while.end109
	jmp	.LBB169_53
.LBB169_53:                             # %if.end110
	cmpl	$1279954761, -64(%rbp)  # imm = 0x4C4A8F49
	jne	.LBB169_55
.LBB169_54:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB169_55:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB169_54
.Lfunc_end169:
	.size	gen_pic_list_from_frame_list.106, .Lfunc_end169-gen_pic_list_from_frame_list.106
	.cfi_endproc
                                        # -- End function
	.globl	update_ltref_list.107   # -- Begin function update_ltref_list.107
	.p2align	4, 0x90
	.type	update_ltref_list.107,@function
update_ltref_list.107:                  # @update_ltref_list.107
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1887981726, -12(%rbp)  # imm = 0x7088509E
	movl	$0, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB170_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB170_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB170_1 Depth=1
	movq	dpb, %rax
	movl	-8(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	is_long_term_reference
	cmpl	$0, %eax
	je	.LBB170_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB170_1 Depth=1
	movq	dpb, %rax
	movl	-8(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -4(%rbp)
	movl	%edx, %edx
	movq	%rax, (%rcx,%rdx,8)
.LBB170_4:                              # %if.end
                                        #   in Loop: Header=BB170_1 Depth=1
	jmp	.LBB170_5
.LBB170_5:                              # %for.inc
                                        #   in Loop: Header=BB170_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB170_1
.LBB170_6:                              # %for.end
	movl	-4(%rbp), %eax
	movl	%eax, dpb+36
.LBB170_7:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+24, %eax
	jae	.LBB170_9
# %bb.8:                                # %while.body
                                        #   in Loop: Header=BB170_7 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, -4(%rbp)
	movl	%ecx, %ecx
	movq	$0, (%rax,%rcx,8)
	jmp	.LBB170_7
.LBB170_9:                              # %while.end
	cmpl	$1887981726, -12(%rbp)  # imm = 0x7088509E
	jne	.LBB170_11
.LBB170_10:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB170_11:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB170_10
.Lfunc_end170:
	.size	update_ltref_list.107, .Lfunc_end170-update_ltref_list.107
	.cfi_endproc
                                        # -- End function
	.globl	dpb_combine_field.108   # -- Begin function dpb_combine_field.108
	.p2align	4, 0x90
	.type	dpb_combine_field.108,@function
dpb_combine_field.108:                  # @dpb_combine_field.108
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$451975430, -32(%rbp)   # imm = 0x1AF09906
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %edx
	shll	$1, %edx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6404(%rax), %r8d
	shll	$1, %r8d
	xorl	%edi, %edi
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movl	$0, -4(%rbp)
.LBB171_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	6396(%rcx), %eax
	jge	.LBB171_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB171_1 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB171_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB171_1
.LBB171_4:                              # %for.end
	movl	$0, -4(%rbp)
.LBB171_5:                              # %for.cond28
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	6404(%rcx), %eax
	jge	.LBB171_8
# %bb.6:                                # %for.body33
                                        #   in Loop: Header=BB171_5 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.7:                                # %for.inc95
                                        #   in Loop: Header=BB171_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB171_5
.LBB171_8:                              # %for.end97
	movq	-16(%rbp), %rax
	movq	40(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB171_10
# %bb.9:                                # %cond.true
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	4(%rax), %ecx
	jmp	.LBB171_11
.LBB171_10:                             # %cond.false
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	4(%rax), %ecx
.LBB171_11:                             # %cond.end
	xorl	%eax, %eax
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 4(%rdx)
	movq	-16(%rbp), %rdx
	movl	%ecx, 36(%rdx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 8(%rdx)
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	56(%rdx), %rdx
	movl	%ecx, 8(%rdx)
	movq	-16(%rbp), %rdx
	movq	48(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	56(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	48(%rdx), %rdx
	movl	%ecx, 12(%rdx)
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 12(%rdx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	$0, 6380(%rcx)
	je	.LBB171_13
# %bb.12:                               # %land.rhs
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6380(%rax)
	setne	%al
.LBB171_13:                             # %land.end
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%eax, 6380(%rdx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB171_15
# %bb.14:                               # %land.rhs138
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	setne	%cl
.LBB171_15:                             # %land.end142
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB171_17
# %bb.16:                               # %if.then
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB171_17:                             # %if.end
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	$0, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6552(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6560(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6560(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6560(%rax)
	je	.LBB171_19
# %bb.18:                               # %if.then167
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6572(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6572(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6576(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6576(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6564(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6564(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6568(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6568(%rcx)
.LBB171_19:                             # %if.end180
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movl	$0, -4(%rbp)
.LBB171_20:                             # %for.cond186
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	listXsize+4, %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB171_26
# %bb.21:                               # %for.body190
                                        #   in Loop: Header=BB171_20 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %esi
	idivq	%rsi
	movq	%rax, %rcx
	shlq	$1, %rcx
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	288(%rax,%rdx,8), %rax
	cqto
	idivq	%rsi
	shlq	$1, %rax
	cmpq	%rax, %rcx
	jge	.LBB171_23
# %bb.22:                               # %cond.true208
                                        #   in Loop: Header=BB171_20 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
	jmp	.LBB171_24
.LBB171_23:                             # %cond.false217
                                        #   in Loop: Header=BB171_20 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
.LBB171_24:                             # %cond.end226
                                        #   in Loop: Header=BB171_20 Depth=1
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, 288(%rcx,%rdx,8)
# %bb.25:                               # %for.inc233
                                        #   in Loop: Header=BB171_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB171_20
.LBB171_26:                             # %for.end235
	movl	$0, -4(%rbp)
.LBB171_27:                             # %for.cond236
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	listXsize, %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB171_33
# %bb.28:                               # %for.body241
                                        #   in Loop: Header=BB171_27 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %esi
	idivq	%rsi
	movq	%rax, %rcx
	shlq	$1, %rcx
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	24(%rax,%rdx,8), %rax
	cqto
	idivq	%rsi
	shlq	$1, %rax
	cmpq	%rax, %rcx
	jge	.LBB171_30
# %bb.29:                               # %cond.true260
                                        #   in Loop: Header=BB171_27 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
	jmp	.LBB171_31
.LBB171_30:                             # %cond.false269
                                        #   in Loop: Header=BB171_27 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
.LBB171_31:                             # %cond.end278
                                        #   in Loop: Header=BB171_27 Depth=1
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, 24(%rcx,%rdx,8)
# %bb.32:                               # %for.inc285
                                        #   in Loop: Header=BB171_27 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB171_27
.LBB171_33:                             # %for.end287
	movl	$0, -4(%rbp)
.LBB171_34:                             # %for.cond288
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB171_36 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB171_65
# %bb.35:                               # %for.body294
                                        #   in Loop: Header=BB171_34 Depth=1
	movl	$0, -20(%rbp)
.LBB171_36:                             # %for.cond295
                                        #   Parent Loop BB171_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB171_63
# %bb.37:                               # %for.body301
                                        #   in Loop: Header=BB171_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movb	$1, (%rdi,%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movb	$1, (%rdi,%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %di
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rsi,%rax,8), %rax
	movw	%di, (%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -28(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB171_39
# %bb.38:                               # %cond.true439
                                        #   in Loop: Header=BB171_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB171_40
.LBB171_39:                             # %cond.false445
                                        #   in Loop: Header=BB171_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB171_40
.LBB171_40:                             # %cond.end446
                                        #   in Loop: Header=BB171_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB171_42
# %bb.41:                               # %cond.true456
                                        #   in Loop: Header=BB171_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB171_43
.LBB171_42:                             # %cond.false462
                                        #   in Loop: Header=BB171_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB171_43
.LBB171_43:                             # %cond.end463
                                        #   in Loop: Header=BB171_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB171_45
# %bb.44:                               # %cond.true474
                                        #   in Loop: Header=BB171_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	1608(%rax,%rcx,8), %r8
	jmp	.LBB171_46
.LBB171_45:                             # %cond.false479
                                        #   in Loop: Header=BB171_36 Depth=2
	xorl	%r8d, %r8d
	jmp	.LBB171_46
.LBB171_46:                             # %cond.end480
                                        #   in Loop: Header=BB171_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB171_48
# %bb.47:                               # %cond.true495
                                        #   in Loop: Header=BB171_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	1872(%rax,%rcx,8), %rdi
	jmp	.LBB171_49
.LBB171_48:                             # %cond.false501
                                        #   in Loop: Header=BB171_36 Depth=2
	xorl	%edi, %edi
	jmp	.LBB171_49
.LBB171_49:                             # %cond.end502
                                        #   in Loop: Header=BB171_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	%rdi, (%rsi,%rax,8)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -28(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB171_51
# %bb.50:                               # %cond.true641
                                        #   in Loop: Header=BB171_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB171_52
.LBB171_51:                             # %cond.false647
                                        #   in Loop: Header=BB171_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB171_52
.LBB171_52:                             # %cond.end648
                                        #   in Loop: Header=BB171_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB171_54
# %bb.53:                               # %cond.true659
                                        #   in Loop: Header=BB171_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB171_55
.LBB171_54:                             # %cond.false665
                                        #   in Loop: Header=BB171_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB171_55
.LBB171_55:                             # %cond.end666
                                        #   in Loop: Header=BB171_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB171_57
# %bb.56:                               # %cond.true677
                                        #   in Loop: Header=BB171_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	1608(%rax,%rcx,8), %r8
	jmp	.LBB171_58
.LBB171_57:                             # %cond.false683
                                        #   in Loop: Header=BB171_36 Depth=2
	movq	$-1, %r8
	jmp	.LBB171_58
.LBB171_58:                             # %cond.end684
                                        #   in Loop: Header=BB171_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB171_60
# %bb.59:                               # %cond.true700
                                        #   in Loop: Header=BB171_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	1872(%rax,%rcx,8), %r8
	jmp	.LBB171_61
.LBB171_60:                             # %cond.false706
                                        #   in Loop: Header=BB171_36 Depth=2
	movq	$-1, %r8
	jmp	.LBB171_61
.LBB171_61:                             # %cond.end707
                                        #   in Loop: Header=BB171_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
# %bb.62:                               # %for.inc721
                                        #   in Loop: Header=BB171_36 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB171_36
.LBB171_63:                             # %for.end723
                                        #   in Loop: Header=BB171_34 Depth=1
	jmp	.LBB171_64
.LBB171_64:                             # %for.inc724
                                        #   in Loop: Header=BB171_34 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB171_34
.LBB171_65:                             # %for.end726
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB171_67
# %bb.66:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB171_76
.LBB171_67:                             # %if.then729
	movl	$0, -4(%rbp)
.LBB171_68:                             # %for.cond730
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB171_70 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB171_75
# %bb.69:                               # %for.body736
                                        #   in Loop: Header=BB171_68 Depth=1
	movl	$0, -20(%rbp)
.LBB171_70:                             # %for.cond737
                                        #   Parent Loop BB171_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB171_73
# %bb.71:                               # %for.body743
                                        #   in Loop: Header=BB171_70 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.72:                               # %for.inc756
                                        #   in Loop: Header=BB171_70 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB171_70
.LBB171_73:                             # %for.end758
                                        #   in Loop: Header=BB171_68 Depth=1
	jmp	.LBB171_74
.LBB171_74:                             # %for.inc759
                                        #   in Loop: Header=BB171_68 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB171_68
.LBB171_75:                             # %for.end761
	jmp	.LBB171_76
.LBB171_76:                             # %if.end762
	cmpl	$451975430, -32(%rbp)   # imm = 0x1AF09906
	jne	.LBB171_78
.LBB171_77:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB171_78:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB171_77
.Lfunc_end171:
	.size	dpb_combine_field.108, .Lfunc_end171-dpb_combine_field.108
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_long_term_pic.109
	.type	get_long_term_pic.109,@function
get_long_term_pic.109:                  # @get_long_term_pic.109
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1172454388, -28(%rbp)  # imm = 0x45E23BF4
	movl	%edi, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB172_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB172_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB172_1 Depth=1
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB172_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB172_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB172_8
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB172_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB172_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB172_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB172_7
# %bb.6:                                # %if.then10
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB172_23
.LBB172_7:                              # %if.end
                                        #   in Loop: Header=BB172_1 Depth=1
	jmp	.LBB172_8
.LBB172_8:                              # %if.end14
                                        #   in Loop: Header=BB172_1 Depth=1
	jmp	.LBB172_20
.LBB172_9:                              # %if.else
                                        #   in Loop: Header=BB172_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB172_14
# %bb.10:                               # %if.then19
                                        #   in Loop: Header=BB172_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB172_13
# %bb.11:                               # %land.lhs.true24
                                        #   in Loop: Header=BB172_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB172_13
# %bb.12:                               # %if.then30
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB172_23
.LBB172_13:                             # %if.end34
                                        #   in Loop: Header=BB172_1 Depth=1
	jmp	.LBB172_14
.LBB172_14:                             # %if.end35
                                        #   in Loop: Header=BB172_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB172_19
# %bb.15:                               # %if.then41
                                        #   in Loop: Header=BB172_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB172_18
# %bb.16:                               # %land.lhs.true46
                                        #   in Loop: Header=BB172_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB172_18
# %bb.17:                               # %if.then52
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB172_23
.LBB172_18:                             # %if.end56
                                        #   in Loop: Header=BB172_1 Depth=1
	jmp	.LBB172_19
.LBB172_19:                             # %if.end57
                                        #   in Loop: Header=BB172_1 Depth=1
	jmp	.LBB172_20
.LBB172_20:                             # %if.end58
                                        #   in Loop: Header=BB172_1 Depth=1
	jmp	.LBB172_21
.LBB172_21:                             # %for.inc
                                        #   in Loop: Header=BB172_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB172_1
.LBB172_22:                             # %for.end
	movq	$0, -24(%rbp)
.LBB172_23:                             # %return
	movq	-24(%rbp), %rbx
	cmpl	$1172454388, -28(%rbp)  # imm = 0x45E23BF4
	jne	.LBB172_25
.LBB172_24:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB172_25:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB172_24
.Lfunc_end172:
	.size	get_long_term_pic.109, .Lfunc_end172-get_long_term_pic.109
	.cfi_endproc
                                        # -- End function
	.globl	init_lists.110          # -- Begin function init_lists.110
	.p2align	4, 0x90
	.type	init_lists.110,@function
init_lists.110:                         # @init_lists.110
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$231180273, -76(%rbp)   # imm = 0xDC787F1
	movl	%edi, -52(%rbp)
	movl	%esi, -20(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -44(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -8(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jne	.LBB173_14
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB173_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB173_13
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB173_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB173_11
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB173_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB173_10
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB173_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB173_10
# %bb.6:                                # %if.then10
                                        #   in Loop: Header=BB173_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jbe	.LBB173_8
# %bb.7:                                # %if.then15
                                        #   in Loop: Header=BB173_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	subl	-68(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
	jmp	.LBB173_9
.LBB173_8:                              # %if.else
                                        #   in Loop: Header=BB173_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
.LBB173_9:                              # %if.end
                                        #   in Loop: Header=BB173_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6364(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
.LBB173_10:                             # %if.end36
                                        #   in Loop: Header=BB173_2 Depth=1
	jmp	.LBB173_11
.LBB173_11:                             # %if.end37
                                        #   in Loop: Header=BB173_2 Depth=1
	jmp	.LBB173_12
.LBB173_12:                             # %for.inc
                                        #   in Loop: Header=BB173_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB173_2
.LBB173_13:                             # %for.end
	jmp	.LBB173_31
.LBB173_14:                             # %if.else38
	cmpl	$1, -20(%rbp)
	jne	.LBB173_16
# %bb.15:                               # %if.then40
	movl	$1, -48(%rbp)
	movl	$0, -44(%rbp)
	jmp	.LBB173_17
.LBB173_16:                             # %if.else41
	movl	$0, -48(%rbp)
	movl	$1, -44(%rbp)
.LBB173_17:                             # %if.end42
	movl	$0, -4(%rbp)
.LBB173_18:                             # %for.cond43
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB173_30
# %bb.19:                               # %for.body45
                                        #   in Loop: Header=BB173_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 4(%rax)
	je	.LBB173_28
# %bb.20:                               # %if.then49
                                        #   in Loop: Header=BB173_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jbe	.LBB173_22
# %bb.21:                               # %if.then55
                                        #   in Loop: Header=BB173_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	subl	-68(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
	jmp	.LBB173_23
.LBB173_22:                             # %if.else63
                                        #   in Loop: Header=BB173_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
.LBB173_23:                             # %if.end70
                                        #   in Loop: Header=BB173_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB173_25
# %bb.24:                               # %if.then75
                                        #   in Loop: Header=BB173_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6364(%rcx)
.LBB173_25:                             # %if.end83
                                        #   in Loop: Header=BB173_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB173_27
# %bb.26:                               # %if.then89
                                        #   in Loop: Header=BB173_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6364(%rcx)
.LBB173_27:                             # %if.end98
                                        #   in Loop: Header=BB173_18 Depth=1
	jmp	.LBB173_28
.LBB173_28:                             # %if.end99
                                        #   in Loop: Header=BB173_18 Depth=1
	jmp	.LBB173_29
.LBB173_29:                             # %for.inc100
                                        #   in Loop: Header=BB173_18 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB173_18
.LBB173_30:                             # %for.end102
	jmp	.LBB173_31
.LBB173_31:                             # %if.end103
	cmpl	$2, -52(%rbp)
	je	.LBB173_33
# %bb.32:                               # %lor.lhs.false
	cmpl	$4, -52(%rbp)
	jne	.LBB173_34
.LBB173_33:                             # %if.then106
	movl	$0, listXsize
	movl	$0, listXsize+4
	jmp	.LBB173_181
.LBB173_34:                             # %if.end107
	cmpl	$0, -52(%rbp)
	je	.LBB173_36
# %bb.35:                               # %lor.lhs.false109
	cmpl	$3, -52(%rbp)
	jne	.LBB173_75
.LBB173_36:                             # %if.then111
	cmpl	$0, -20(%rbp)
	jne	.LBB173_55
# %bb.37:                               # %if.then113
	movl	$0, -4(%rbp)
.LBB173_38:                             # %for.cond114
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB173_46
# %bb.39:                               # %for.body116
                                        #   in Loop: Header=BB173_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB173_44
# %bb.40:                               # %if.then121
                                        #   in Loop: Header=BB173_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB173_43
# %bb.41:                               # %land.lhs.true127
                                        #   in Loop: Header=BB173_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB173_43
# %bb.42:                               # %if.then133
                                        #   in Loop: Header=BB173_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB173_43:                             # %if.end140
                                        #   in Loop: Header=BB173_38 Depth=1
	jmp	.LBB173_44
.LBB173_44:                             # %if.end141
                                        #   in Loop: Header=BB173_38 Depth=1
	jmp	.LBB173_45
.LBB173_45:                             # %for.inc142
                                        #   in Loop: Header=BB173_38 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB173_38
.LBB173_46:                             # %for.end144
	movq	listX, %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_pic_num_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize
	movl	$0, -4(%rbp)
.LBB173_47:                             # %for.cond145
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB173_54
# %bb.48:                               # %for.body148
                                        #   in Loop: Header=BB173_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB173_52
# %bb.49:                               # %if.then154
                                        #   in Loop: Header=BB173_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB173_51
# %bb.50:                               # %if.then160
                                        #   in Loop: Header=BB173_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB173_51:                             # %if.end177
                                        #   in Loop: Header=BB173_47 Depth=1
	jmp	.LBB173_52
.LBB173_52:                             # %if.end178
                                        #   in Loop: Header=BB173_47 Depth=1
	jmp	.LBB173_53
.LBB173_53:                             # %for.inc179
                                        #   in Loop: Header=BB173_47 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB173_47
.LBB173_54:                             # %for.end181
	movq	listX, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize
	jmp	.LBB173_74
.LBB173_55:                             # %if.else186
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -32(%rbp)
	cmpq	-32(%rbp), %rcx
	jne	.LBB173_57
# %bb.56:                               # %if.then190
	movabsq	$.L.str.9, %rdi
	callq	no_mem_exit
.LBB173_57:                             # %if.end191
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -40(%rbp)
	cmpq	-40(%rbp), %rcx
	jne	.LBB173_59
# %bb.58:                               # %if.then196
	movabsq	$.L.str.10, %rdi
	callq	no_mem_exit
.LBB173_59:                             # %if.end197
	movl	$0, -4(%rbp)
.LBB173_60:                             # %for.cond198
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB173_65
# %bb.61:                               # %for.body201
                                        #   in Loop: Header=BB173_60 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 4(%rax)
	je	.LBB173_63
# %bb.62:                               # %if.then206
                                        #   in Loop: Header=BB173_60 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB173_63:                             # %if.end212
                                        #   in Loop: Header=BB173_60 Depth=1
	jmp	.LBB173_64
.LBB173_64:                             # %for.inc213
                                        #   in Loop: Header=BB173_60 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB173_60
.LBB173_65:                             # %for.end215
	movq	-32(%rbp), %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_frame_num_desc, %rcx
	callq	qsort
	movl	$0, listXsize
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movl	$0, -4(%rbp)
.LBB173_66:                             # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB173_73
# %bb.67:                               # %for.body220
                                        #   in Loop: Header=BB173_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-40(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB173_69
# %bb.68:                               # %if.then231
                                        #   in Loop: Header=BB173_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB173_69:                             # %if.end242
                                        #   in Loop: Header=BB173_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB173_71
# %bb.70:                               # %if.then248
                                        #   in Loop: Header=BB173_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB173_71:                             # %if.end259
                                        #   in Loop: Header=BB173_66 Depth=1
	jmp	.LBB173_72
.LBB173_72:                             # %for.inc260
                                        #   in Loop: Header=BB173_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB173_66
.LBB173_73:                             # %for.end262
	movq	-40(%rbp), %rdi
	movslq	-24(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_lt_pic_idx_asc, %rcx
	callq	qsort
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movq	-32(%rbp), %rdi
	callq	free
	movq	-40(%rbp), %rdi
	callq	free
.LBB173_74:                             # %if.end264
	movl	$0, listXsize+4
	jmp	.LBB173_155
.LBB173_75:                             # %if.else265
	cmpl	$0, -20(%rbp)
	jne	.LBB173_115
# %bb.76:                               # %if.then268
	movl	$0, -4(%rbp)
.LBB173_77:                             # %for.cond269
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB173_87
# %bb.78:                               # %for.body272
                                        #   in Loop: Header=BB173_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB173_85
# %bb.79:                               # %if.then278
                                        #   in Loop: Header=BB173_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB173_84
# %bb.80:                               # %land.lhs.true284
                                        #   in Loop: Header=BB173_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB173_84
# %bb.81:                               # %if.then290
                                        #   in Loop: Header=BB173_77 Depth=1
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB173_83
# %bb.82:                               # %if.then296
                                        #   in Loop: Header=BB173_77 Depth=1
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB173_83:                             # %if.end307
                                        #   in Loop: Header=BB173_77 Depth=1
	jmp	.LBB173_84
.LBB173_84:                             # %if.end308
                                        #   in Loop: Header=BB173_77 Depth=1
	jmp	.LBB173_85
.LBB173_85:                             # %if.end309
                                        #   in Loop: Header=BB173_77 Depth=1
	jmp	.LBB173_86
.LBB173_86:                             # %for.inc310
                                        #   in Loop: Header=BB173_77 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB173_77
.LBB173_87:                             # %for.end312
	movq	listX, %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_poc_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB173_88:                             # %for.cond314
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB173_98
# %bb.89:                               # %for.body317
                                        #   in Loop: Header=BB173_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB173_96
# %bb.90:                               # %if.then323
                                        #   in Loop: Header=BB173_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB173_95
# %bb.91:                               # %land.lhs.true329
                                        #   in Loop: Header=BB173_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB173_95
# %bb.92:                               # %if.then335
                                        #   in Loop: Header=BB173_88 Depth=1
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB173_94
# %bb.93:                               # %if.then343
                                        #   in Loop: Header=BB173_88 Depth=1
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB173_94:                             # %if.end354
                                        #   in Loop: Header=BB173_88 Depth=1
	jmp	.LBB173_95
.LBB173_95:                             # %if.end355
                                        #   in Loop: Header=BB173_88 Depth=1
	jmp	.LBB173_96
.LBB173_96:                             # %if.end356
                                        #   in Loop: Header=BB173_88 Depth=1
	jmp	.LBB173_97
.LBB173_97:                             # %for.inc357
                                        #   in Loop: Header=BB173_88 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB173_88
.LBB173_98:                             # %for.end359
	movq	listX, %rdi
	movslq	-16(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_poc_asc, %rcx
	callq	qsort
	movl	$0, -12(%rbp)
.LBB173_99:                             # %for.cond364
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB173_102
# %bb.100:                              # %for.body367
                                        #   in Loop: Header=BB173_99 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movl	-8(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.101:                              # %for.inc374
                                        #   in Loop: Header=BB173_99 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB173_99
.LBB173_102:                            # %for.end376
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB173_103:                            # %for.cond377
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB173_106
# %bb.104:                              # %for.body380
                                        #   in Loop: Header=BB173_103 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.105:                              # %for.inc386
                                        #   in Loop: Header=BB173_103 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB173_103
.LBB173_106:                            # %for.end388
	movl	-8(%rbp), %eax
	movl	%eax, listXsize+4
	movl	%eax, listXsize
	movl	$0, -4(%rbp)
.LBB173_107:                            # %for.cond389
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB173_114
# %bb.108:                              # %for.body392
                                        #   in Loop: Header=BB173_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB173_112
# %bb.109:                              # %if.then398
                                        #   in Loop: Header=BB173_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB173_111
# %bb.110:                              # %if.then404
                                        #   in Loop: Header=BB173_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX+8, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB173_111:                            # %if.end428
                                        #   in Loop: Header=BB173_107 Depth=1
	jmp	.LBB173_112
.LBB173_112:                            # %if.end429
                                        #   in Loop: Header=BB173_107 Depth=1
	jmp	.LBB173_113
.LBB173_113:                            # %for.inc430
                                        #   in Loop: Header=BB173_107 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB173_107
.LBB173_114:                            # %for.end432
	movq	listX, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movq	listX+8, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize+4
	movl	%eax, listXsize
	jmp	.LBB173_154
.LBB173_115:                            # %if.else441
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -32(%rbp)
	cmpq	-32(%rbp), %rcx
	jne	.LBB173_117
# %bb.116:                              # %if.then446
	movabsq	$.L.str.9, %rdi
	callq	no_mem_exit
.LBB173_117:                            # %if.end447
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -64(%rbp)
	cmpq	-64(%rbp), %rcx
	jne	.LBB173_119
# %bb.118:                              # %if.then452
	movabsq	$.L.str.11, %rdi
	callq	no_mem_exit
.LBB173_119:                            # %if.end453
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -40(%rbp)
	cmpq	-40(%rbp), %rcx
	jne	.LBB173_121
# %bb.120:                              # %if.then458
	movabsq	$.L.str.10, %rdi
	callq	no_mem_exit
.LBB173_121:                            # %if.end459
	movl	$0, listXsize
	movl	$1, listXsize+4
	movl	$0, -4(%rbp)
.LBB173_122:                            # %for.cond460
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB173_129
# %bb.123:                              # %for.body463
                                        #   in Loop: Header=BB173_122 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, (%rax)
	je	.LBB173_127
# %bb.124:                              # %if.then468
                                        #   in Loop: Header=BB173_122 Depth=1
	movq	img, %rax
	movl	72460(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jl	.LBB173_126
# %bb.125:                              # %if.then474
                                        #   in Loop: Header=BB173_122 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB173_126:                            # %if.end480
                                        #   in Loop: Header=BB173_122 Depth=1
	jmp	.LBB173_127
.LBB173_127:                            # %if.end481
                                        #   in Loop: Header=BB173_122 Depth=1
	jmp	.LBB173_128
.LBB173_128:                            # %for.inc482
                                        #   in Loop: Header=BB173_122 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB173_122
.LBB173_129:                            # %for.end484
	movq	-32(%rbp), %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_poc_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB173_130:                            # %for.cond486
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB173_137
# %bb.131:                              # %for.body489
                                        #   in Loop: Header=BB173_130 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, (%rax)
	je	.LBB173_135
# %bb.132:                              # %if.then494
                                        #   in Loop: Header=BB173_130 Depth=1
	movq	img, %rax
	movl	72460(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB173_134
# %bb.133:                              # %if.then501
                                        #   in Loop: Header=BB173_130 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB173_134:                            # %if.end507
                                        #   in Loop: Header=BB173_130 Depth=1
	jmp	.LBB173_135
.LBB173_135:                            # %if.end508
                                        #   in Loop: Header=BB173_130 Depth=1
	jmp	.LBB173_136
.LBB173_136:                            # %for.inc509
                                        #   in Loop: Header=BB173_130 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB173_130
.LBB173_137:                            # %for.end511
	movq	-32(%rbp), %rdi
	movslq	-16(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_poc_asc, %rcx
	callq	qsort
	movl	$0, -12(%rbp)
.LBB173_138:                            # %for.cond516
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB173_141
# %bb.139:                              # %for.body519
                                        #   in Loop: Header=BB173_138 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	-8(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.140:                              # %for.inc526
                                        #   in Loop: Header=BB173_138 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB173_138
.LBB173_141:                            # %for.end528
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB173_142:                            # %for.cond529
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB173_145
# %bb.143:                              # %for.body532
                                        #   in Loop: Header=BB173_142 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.144:                              # %for.inc538
                                        #   in Loop: Header=BB173_142 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB173_142
.LBB173_145:                            # %for.end540
	movl	$0, listXsize
	movl	$0, listXsize+4
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movabsq	$listXsize, %r8
	addq	$4, %r8
	movl	-20(%rbp), %edi
	movq	-64(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX+8, %rcx
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movl	$0, -4(%rbp)
.LBB173_146:                            # %for.cond541
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB173_153
# %bb.147:                              # %for.body544
                                        #   in Loop: Header=BB173_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-40(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB173_149
# %bb.148:                              # %if.then555
                                        #   in Loop: Header=BB173_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB173_149:                            # %if.end566
                                        #   in Loop: Header=BB173_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB173_151
# %bb.150:                              # %if.then572
                                        #   in Loop: Header=BB173_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB173_151:                            # %if.end583
                                        #   in Loop: Header=BB173_146 Depth=1
	jmp	.LBB173_152
.LBB173_152:                            # %for.inc584
                                        #   in Loop: Header=BB173_146 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB173_146
.LBB173_153:                            # %for.end586
	movq	-40(%rbp), %rdi
	movslq	-24(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_lt_pic_idx_asc, %rcx
	callq	qsort
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movabsq	$listXsize, %r8
	addq	$4, %r8
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX+8, %rcx
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movq	-32(%rbp), %rdi
	callq	free
	movq	-64(%rbp), %rdi
	callq	free
	movq	-40(%rbp), %rdi
	callq	free
.LBB173_154:                            # %if.end588
	jmp	.LBB173_155
.LBB173_155:                            # %if.end589
	movl	listXsize, %eax
	cmpl	listXsize+4, %eax
	jne	.LBB173_166
# %bb.156:                              # %land.lhs.true592
	cmpl	$1, listXsize
	jle	.LBB173_166
# %bb.157:                              # %if.then595
	movl	$0, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB173_158:                            # %for.cond596
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB173_163
# %bb.159:                              # %for.body599
                                        #   in Loop: Header=BB173_158 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movslq	-12(%rbp), %rdx
	cmpq	(%rcx,%rdx,8), %rax
	je	.LBB173_161
# %bb.160:                              # %if.then606
                                        #   in Loop: Header=BB173_158 Depth=1
	movl	$1, -72(%rbp)
.LBB173_161:                            # %if.end607
                                        #   in Loop: Header=BB173_158 Depth=1
	jmp	.LBB173_162
.LBB173_162:                            # %for.inc608
                                        #   in Loop: Header=BB173_158 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB173_158
.LBB173_163:                            # %for.end610
	cmpl	$0, -72(%rbp)
	jne	.LBB173_165
# %bb.164:                              # %if.then612
	movq	listX+8, %rax
	movq	(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	listX+8, %rax
	movq	8(%rax), %rax
	movq	listX+8, %rcx
	movq	%rax, (%rcx)
	movq	-88(%rbp), %rax
	movq	listX+8, %rcx
	movq	%rax, 8(%rcx)
.LBB173_165:                            # %if.end617
	jmp	.LBB173_166
.LBB173_166:                            # %if.end618
	movl	listXsize, %eax
	movq	img, %rcx
	cmpl	72000(%rcx), %eax
	jge	.LBB173_168
# %bb.167:                              # %cond.true
	movl	listXsize, %eax
	jmp	.LBB173_169
.LBB173_168:                            # %cond.false
	movq	img, %rax
	movl	72000(%rax), %eax
.LBB173_169:                            # %cond.end
	movl	%eax, listXsize
	movl	listXsize+4, %eax
	movq	img, %rcx
	cmpl	72004(%rcx), %eax
	jge	.LBB173_171
# %bb.170:                              # %cond.true624
	movl	listXsize+4, %eax
	jmp	.LBB173_172
.LBB173_171:                            # %cond.false625
	movq	img, %rax
	movl	72004(%rax), %eax
.LBB173_172:                            # %cond.end627
	movl	%eax, listXsize+4
	movl	listXsize, %eax
	movl	%eax, -4(%rbp)
.LBB173_173:                            # %for.cond629
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$33, -4(%rbp)
	jae	.LBB173_176
# %bb.174:                              # %for.body632
                                        #   in Loop: Header=BB173_173 Depth=1
	movq	listX, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.175:                              # %for.inc635
                                        #   in Loop: Header=BB173_173 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB173_173
.LBB173_176:                            # %for.end637
	movl	listXsize+4, %eax
	movl	%eax, -4(%rbp)
.LBB173_177:                            # %for.cond638
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$33, -4(%rbp)
	jae	.LBB173_180
# %bb.178:                              # %for.body641
                                        #   in Loop: Header=BB173_177 Depth=1
	movq	listX+8, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.179:                              # %for.inc644
                                        #   in Loop: Header=BB173_177 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB173_177
.LBB173_180:                            # %for.end646.loopexit
	jmp	.LBB173_181
.LBB173_181:                            # %for.end646
	cmpl	$231180273, -76(%rbp)   # imm = 0xDC787F1
	jne	.LBB173_183
.LBB173_182:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB173_183:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB173_182
.Lfunc_end173:
	.size	init_lists.110, .Lfunc_end173-init_lists.110
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_pic_num_x.111
	.type	get_pic_num_x.111,@function
get_pic_num_x.111:                      # @get_pic_num_x.111
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$970831275, -28(%rbp)   # imm = 0x39DDB5AB
	movq	%rdi, -24(%rbp)
	movl	%esi, -32(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB174_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	movl	6360(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB174_3
.LBB174_2:                              # %if.else
	movq	-24(%rbp), %rax
	movl	6360(%rax), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
.LBB174_3:                              # %if.end
	movl	-12(%rbp), %ebx
	movl	-32(%rbp), %eax
	addl	$1, %eax
	subl	%eax, %ebx
	cmpl	$970831275, -28(%rbp)   # imm = 0x39DDB5AB
	jne	.LBB174_5
.LBB174_4:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB174_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB174_4
.Lfunc_end174:
	.size	get_pic_num_x.111, .Lfunc_end174-get_pic_num_x.111
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_frame_num_desc.112
	.type	compare_fs_by_frame_num_desc.112,@function
compare_fs_by_frame_num_desc.112:       # @compare_fs_by_frame_num_desc.112
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$420166686, -16(%rbp)   # imm = 0x190B3C1E
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	24(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	24(%rcx), %eax
	jge	.LBB175_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB175_5
.LBB175_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	24(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	24(%rcx), %eax
	jle	.LBB175_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB175_5
.LBB175_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB175_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$420166686, -16(%rbp)   # imm = 0x190B3C1E
	jne	.LBB175_7
.LBB175_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB175_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB175_6
.Lfunc_end175:
	.size	compare_fs_by_frame_num_desc.112, .Lfunc_end175-compare_fs_by_frame_num_desc.112
	.cfi_endproc
                                        # -- End function
	.globl	dpb_combine_field.113   # -- Begin function dpb_combine_field.113
	.p2align	4, 0x90
	.type	dpb_combine_field.113,@function
dpb_combine_field.113:                  # @dpb_combine_field.113
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1600275362, -32(%rbp)  # imm = 0x5F6243A2
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %edx
	shll	$1, %edx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6404(%rax), %r8d
	shll	$1, %r8d
	xorl	%edi, %edi
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movl	$0, -4(%rbp)
.LBB176_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	6396(%rcx), %eax
	jge	.LBB176_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB176_1 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB176_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB176_1
.LBB176_4:                              # %for.end
	movl	$0, -4(%rbp)
.LBB176_5:                              # %for.cond28
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	6404(%rcx), %eax
	jge	.LBB176_8
# %bb.6:                                # %for.body33
                                        #   in Loop: Header=BB176_5 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.7:                                # %for.inc95
                                        #   in Loop: Header=BB176_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB176_5
.LBB176_8:                              # %for.end97
	movq	-16(%rbp), %rax
	movq	40(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB176_10
# %bb.9:                                # %cond.true
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	4(%rax), %ecx
	jmp	.LBB176_11
.LBB176_10:                             # %cond.false
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	4(%rax), %ecx
.LBB176_11:                             # %cond.end
	xorl	%eax, %eax
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 4(%rdx)
	movq	-16(%rbp), %rdx
	movl	%ecx, 36(%rdx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 8(%rdx)
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	56(%rdx), %rdx
	movl	%ecx, 8(%rdx)
	movq	-16(%rbp), %rdx
	movq	48(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	56(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	48(%rdx), %rdx
	movl	%ecx, 12(%rdx)
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 12(%rdx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	$0, 6380(%rcx)
	je	.LBB176_13
# %bb.12:                               # %land.rhs
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6380(%rax)
	setne	%al
.LBB176_13:                             # %land.end
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%eax, 6380(%rdx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB176_15
# %bb.14:                               # %land.rhs138
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	setne	%cl
.LBB176_15:                             # %land.end142
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB176_17
# %bb.16:                               # %if.then
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB176_17:                             # %if.end
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	$0, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6552(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6560(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6560(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6560(%rax)
	je	.LBB176_19
# %bb.18:                               # %if.then167
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6572(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6572(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6576(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6576(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6564(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6564(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6568(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6568(%rcx)
.LBB176_19:                             # %if.end180
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movl	$0, -4(%rbp)
.LBB176_20:                             # %for.cond186
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	listXsize+4, %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB176_26
# %bb.21:                               # %for.body190
                                        #   in Loop: Header=BB176_20 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %esi
	idivq	%rsi
	movq	%rax, %rcx
	shlq	$1, %rcx
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	288(%rax,%rdx,8), %rax
	cqto
	idivq	%rsi
	shlq	$1, %rax
	cmpq	%rax, %rcx
	jge	.LBB176_23
# %bb.22:                               # %cond.true208
                                        #   in Loop: Header=BB176_20 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
	jmp	.LBB176_24
.LBB176_23:                             # %cond.false217
                                        #   in Loop: Header=BB176_20 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
.LBB176_24:                             # %cond.end226
                                        #   in Loop: Header=BB176_20 Depth=1
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, 288(%rcx,%rdx,8)
# %bb.25:                               # %for.inc233
                                        #   in Loop: Header=BB176_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB176_20
.LBB176_26:                             # %for.end235
	movl	$0, -4(%rbp)
.LBB176_27:                             # %for.cond236
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	listXsize, %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB176_33
# %bb.28:                               # %for.body241
                                        #   in Loop: Header=BB176_27 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %esi
	idivq	%rsi
	movq	%rax, %rcx
	shlq	$1, %rcx
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	24(%rax,%rdx,8), %rax
	cqto
	idivq	%rsi
	shlq	$1, %rax
	cmpq	%rax, %rcx
	jge	.LBB176_30
# %bb.29:                               # %cond.true260
                                        #   in Loop: Header=BB176_27 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
	jmp	.LBB176_31
.LBB176_30:                             # %cond.false269
                                        #   in Loop: Header=BB176_27 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
.LBB176_31:                             # %cond.end278
                                        #   in Loop: Header=BB176_27 Depth=1
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, 24(%rcx,%rdx,8)
# %bb.32:                               # %for.inc285
                                        #   in Loop: Header=BB176_27 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB176_27
.LBB176_33:                             # %for.end287
	movl	$0, -4(%rbp)
.LBB176_34:                             # %for.cond288
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB176_36 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB176_65
# %bb.35:                               # %for.body294
                                        #   in Loop: Header=BB176_34 Depth=1
	movl	$0, -20(%rbp)
.LBB176_36:                             # %for.cond295
                                        #   Parent Loop BB176_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB176_63
# %bb.37:                               # %for.body301
                                        #   in Loop: Header=BB176_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movb	$1, (%rdi,%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movb	$1, (%rdi,%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %di
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rsi,%rax,8), %rax
	movw	%di, (%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -28(%rbp)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -28(%rbp)
	jl	.LBB176_39
# %bb.38:                               # %cond.true439
                                        #   in Loop: Header=BB176_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB176_40
.LBB176_39:                             # %cond.false445
                                        #   in Loop: Header=BB176_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB176_40
.LBB176_40:                             # %cond.end446
                                        #   in Loop: Header=BB176_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB176_42
# %bb.41:                               # %cond.true456
                                        #   in Loop: Header=BB176_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB176_43
.LBB176_42:                             # %cond.false462
                                        #   in Loop: Header=BB176_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB176_43
.LBB176_43:                             # %cond.end463
                                        #   in Loop: Header=BB176_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB176_45
# %bb.44:                               # %cond.true474
                                        #   in Loop: Header=BB176_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	1608(%rax,%rcx,8), %r8
	jmp	.LBB176_46
.LBB176_45:                             # %cond.false479
                                        #   in Loop: Header=BB176_36 Depth=2
	xorl	%r8d, %r8d
	jmp	.LBB176_46
.LBB176_46:                             # %cond.end480
                                        #   in Loop: Header=BB176_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB176_48
# %bb.47:                               # %cond.true495
                                        #   in Loop: Header=BB176_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	1872(%rax,%rcx,8), %rdi
	jmp	.LBB176_49
.LBB176_48:                             # %cond.false501
                                        #   in Loop: Header=BB176_36 Depth=2
	xorl	%edi, %edi
	jmp	.LBB176_49
.LBB176_49:                             # %cond.end502
                                        #   in Loop: Header=BB176_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	%rdi, (%rsi,%rax,8)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -28(%rbp)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -28(%rbp)
	jl	.LBB176_51
# %bb.50:                               # %cond.true641
                                        #   in Loop: Header=BB176_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB176_52
.LBB176_51:                             # %cond.false647
                                        #   in Loop: Header=BB176_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB176_52
.LBB176_52:                             # %cond.end648
                                        #   in Loop: Header=BB176_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB176_54
# %bb.53:                               # %cond.true659
                                        #   in Loop: Header=BB176_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB176_55
.LBB176_54:                             # %cond.false665
                                        #   in Loop: Header=BB176_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB176_55
.LBB176_55:                             # %cond.end666
                                        #   in Loop: Header=BB176_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB176_57
# %bb.56:                               # %cond.true677
                                        #   in Loop: Header=BB176_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	1608(%rax,%rcx,8), %r8
	jmp	.LBB176_58
.LBB176_57:                             # %cond.false683
                                        #   in Loop: Header=BB176_36 Depth=2
	movq	$-1, %r8
	jmp	.LBB176_58
.LBB176_58:                             # %cond.end684
                                        #   in Loop: Header=BB176_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB176_60
# %bb.59:                               # %cond.true700
                                        #   in Loop: Header=BB176_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	1872(%rax,%rcx,8), %r8
	jmp	.LBB176_61
.LBB176_60:                             # %cond.false706
                                        #   in Loop: Header=BB176_36 Depth=2
	movq	$-1, %r8
	jmp	.LBB176_61
.LBB176_61:                             # %cond.end707
                                        #   in Loop: Header=BB176_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
# %bb.62:                               # %for.inc721
                                        #   in Loop: Header=BB176_36 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB176_36
.LBB176_63:                             # %for.end723
                                        #   in Loop: Header=BB176_34 Depth=1
	jmp	.LBB176_64
.LBB176_64:                             # %for.inc724
                                        #   in Loop: Header=BB176_34 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB176_34
.LBB176_65:                             # %for.end726
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB176_67
# %bb.66:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB176_76
.LBB176_67:                             # %if.then729
	movl	$0, -4(%rbp)
.LBB176_68:                             # %for.cond730
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB176_70 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB176_75
# %bb.69:                               # %for.body736
                                        #   in Loop: Header=BB176_68 Depth=1
	movl	$0, -20(%rbp)
.LBB176_70:                             # %for.cond737
                                        #   Parent Loop BB176_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB176_73
# %bb.71:                               # %for.body743
                                        #   in Loop: Header=BB176_70 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.72:                               # %for.inc756
                                        #   in Loop: Header=BB176_70 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB176_70
.LBB176_73:                             # %for.end758
                                        #   in Loop: Header=BB176_68 Depth=1
	jmp	.LBB176_74
.LBB176_74:                             # %for.inc759
                                        #   in Loop: Header=BB176_68 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB176_68
.LBB176_75:                             # %for.end761
	jmp	.LBB176_76
.LBB176_76:                             # %if.end762
	cmpl	$1600275362, -32(%rbp)  # imm = 0x5F6243A2
	jne	.LBB176_78
.LBB176_77:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB176_78:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB176_77
.Lfunc_end176:
	.size	dpb_combine_field.113, .Lfunc_end176-dpb_combine_field.113
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_pic_num_x.114
	.type	get_pic_num_x.114,@function
get_pic_num_x.114:                      # @get_pic_num_x.114
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1694718776, -28(%rbp)  # imm = 0x65035B38
	movq	%rdi, -24(%rbp)
	movl	%esi, -32(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB177_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	movl	6360(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB177_3
.LBB177_2:                              # %if.else
	movq	-24(%rbp), %rax
	movl	6360(%rax), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
.LBB177_3:                              # %if.end
	movl	-12(%rbp), %ebx
	movl	-32(%rbp), %eax
	addl	$1, %eax
	subl	%eax, %ebx
	cmpl	$1694718776, -28(%rbp)  # imm = 0x65035B38
	jne	.LBB177_5
.LBB177_4:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB177_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB177_4
.Lfunc_end177:
	.size	get_pic_num_x.114, .Lfunc_end177-get_pic_num_x.114
	.cfi_endproc
                                        # -- End function
	.globl	alloc_storable_picture.115 # -- Begin function alloc_storable_picture.115
	.p2align	4, 0x90
	.type	alloc_storable_picture.115,@function
alloc_storable_picture.115:             # @alloc_storable_picture.115
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1540974149, -36(%rbp)  # imm = 0x5BD96645
	movl	%edi, -40(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -32(%rbp)
	movl	$1, %edi
	movl	$6584, %esi             # imm = 0x19B8
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -16(%rbp)
	cmpq	-16(%rbp), %rcx
	jne	.LBB178_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.7, %rdi
	callq	no_mem_exit
.LBB178_2:                              # %if.end
	movq	-16(%rbp), %rdi
	addq	$6424, %rdi             # imm = 0x1918
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	callq	get_mem2Dpel
	movq	-16(%rbp), %rax
	movq	$0, 6432(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6448(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6464(%rax)
	movq	input, %rax
	cmpl	$0, 1284(%rax)
	jne	.LBB178_5
# %bb.3:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 1288(%rax)
	jne	.LBB178_5
# %bb.4:                                # %lor.lhs.false3
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB178_6
.LBB178_5:                              # %if.then5
	movq	-16(%rbp), %rax
	movq	$0, 6440(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6456(%rax)
.LBB178_6:                              # %if.end6
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB178_8
# %bb.7:                                # %if.then8
	movq	-16(%rbp), %rdi
	addq	$6464, %rdi             # imm = 0x1940
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	$2, %esi
	callq	get_mem3Dpel
.LBB178_8:                              # %if.end11
	movq	img, %rax
	movl	72484(%rax), %edi
	movl	$4, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	-16(%rbp), %rdx
	movq	%rax, 6472(%rdx)
	movq	-16(%rbp), %rax
	cmpq	6472(%rax), %rcx
	jne	.LBB178_10
# %bb.9:                                # %if.then16
	movabsq	$.L.str.8, %rdi
	callq	no_mem_exit
.LBB178_10:                             # %if.end17
	movq	-16(%rbp), %rdi
	addq	$6480, %rdi             # imm = 0x1950
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-16(%rbp), %rdi
	addq	$6488, %rdi             # imm = 0x1958
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	movl	$6, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-16(%rbp), %rdi
	addq	$6496, %rdi             # imm = 0x1960
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	movl	$6, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-16(%rbp), %rdi
	addq	$6504, %rdi             # imm = 0x1968
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-16(%rbp), %rdi
	addq	$6512, %rdi             # imm = 0x1970
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-24(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-16(%rbp), %rdi
	addq	$6520, %rdi             # imm = 0x1978
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-24(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-16(%rbp), %rax
	movl	$0, 6364(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6360(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6372(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6368(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6380(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6376(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6388(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6384(%rax)
	movl	-40(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6392(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6396(%rcx)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6400(%rcx)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6404(%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 6528(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6536(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6544(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6412(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6416(%rax)
	movq	-16(%rbp), %rbx
	cmpl	$1540974149, -36(%rbp)  # imm = 0x5BD96645
	jne	.LBB178_12
.LBB178_11:
	movq	%rbx, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB178_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB178_11
.Lfunc_end178:
	.size	alloc_storable_picture.115, .Lfunc_end178-alloc_storable_picture.115
	.cfi_endproc
                                        # -- End function
	.globl	store_picture_in_dpb.116 # -- Begin function store_picture_in_dpb.116
	.p2align	4, 0x90
	.type	store_picture_in_dpb.116,@function
store_picture_in_dpb.116:               # @store_picture_in_dpb.116
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$931531782, -20(%rbp)   # imm = 0x37860C06
	movq	%rdi, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 6380(%rcx)
	movq	img, %rax
	movl	$0, 72644(%rax)
	movq	img, %rax
	cmpl	$2, 28(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 72640(%rcx)
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	je	.LBB179_2
# %bb.1:                                # %if.then
	movq	-8(%rbp), %rdi
	callq	idr_memory_management
	jmp	.LBB179_6
.LBB179_2:                              # %if.else
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB179_5
# %bb.3:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72500(%rax)
	je	.LBB179_5
# %bb.4:                                # %if.then6
	movq	-8(%rbp), %rdi
	callq	adaptive_memory_management
.LBB179_5:                              # %if.end
	jmp	.LBB179_6
.LBB179_6:                              # %if.end7
	movq	-8(%rbp), %rax
	cmpl	$1, (%rax)
	je	.LBB179_8
# %bb.7:                                # %lor.lhs.false
	movq	-8(%rbp), %rax
	cmpl	$2, (%rax)
	jne	.LBB179_23
.LBB179_8:                              # %if.then14
	cmpq	$0, dpb+56
	je	.LBB179_22
# %bb.9:                                # %if.then16
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	cmpl	6364(%rcx), %eax
	jne	.LBB179_21
# %bb.10:                               # %if.then19
	movq	-8(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB179_12
# %bb.11:                               # %land.lhs.true23
	movq	dpb+56, %rax
	cmpl	$2, (%rax)
	je	.LBB179_14
.LBB179_12:                             # %lor.lhs.false26
	movq	-8(%rbp), %rax
	cmpl	$2, (%rax)
	jne	.LBB179_20
# %bb.13:                               # %land.lhs.true30
	movq	dpb+56, %rax
	cmpl	$1, (%rax)
	jne	.LBB179_20
.LBB179_14:                             # %if.then34
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB179_16
# %bb.15:                               # %land.lhs.true37
	movq	dpb+56, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB179_18
.LBB179_16:                             # %lor.lhs.false40
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	jne	.LBB179_19
# %bb.17:                               # %land.lhs.true43
	movq	dpb+56, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB179_19
.LBB179_18:                             # %if.then47
	movq	dpb+56, %rdi
	movq	-8(%rbp), %rsi
	callq	insert_picture_in_dpb
	callq	update_ref_list
	callq	update_ltref_list
	callq	dump_dpb
	movq	$0, dpb+56
	jmp	.LBB179_50
.LBB179_19:                             # %if.end48
	jmp	.LBB179_20
.LBB179_20:                             # %if.end49
	jmp	.LBB179_21
.LBB179_21:                             # %if.end50
	jmp	.LBB179_22
.LBB179_22:                             # %if.end51
	jmp	.LBB179_23
.LBB179_23:                             # %if.end52
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	jne	.LBB179_27
# %bb.24:                               # %land.lhs.true56
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB179_27
# %bb.25:                               # %land.lhs.true59
	movq	img, %rax
	cmpl	$0, 72500(%rax)
	jne	.LBB179_27
# %bb.26:                               # %if.then62
	movq	-8(%rbp), %rdi
	callq	sliding_window_memory_management
.LBB179_27:                             # %if.end63
	movl	dpb+28, %eax
	cmpl	dpb+24, %eax
	jne	.LBB179_29
# %bb.28:                               # %if.then66
	callq	remove_unused_frame_from_dpb
.LBB179_29:                             # %if.end67
	jmp	.LBB179_30
.LBB179_30:                             # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	dpb+28, %eax
	cmpl	dpb+24, %eax
	jne	.LBB179_37
# %bb.31:                               # %while.body
                                        #   in Loop: Header=BB179_30 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	jne	.LBB179_36
# %bb.32:                               # %if.then72
                                        #   in Loop: Header=BB179_30 Depth=1
	leaq	-24(%rbp), %rdi
	leaq	-16(%rbp), %rsi
	callq	get_smallest_poc
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	cmpl	-16(%rbp), %eax
	je	.LBB179_34
# %bb.33:                               # %lor.lhs.false75
                                        #   in Loop: Header=BB179_30 Depth=1
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB179_35
.LBB179_34:                             # %if.then79
	movq	-8(%rbp), %rdi
	movl	p_dec, %esi
	callq	direct_output
	jmp	.LBB179_50
.LBB179_35:                             # %if.end80
                                        #   in Loop: Header=BB179_30 Depth=1
	jmp	.LBB179_36
.LBB179_36:                             # %if.end81
                                        #   in Loop: Header=BB179_30 Depth=1
	callq	output_one_frame_from_dpb
	jmp	.LBB179_30
.LBB179_37:                             # %while.end
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB179_46
# %bb.38:                               # %land.lhs.true84
	movq	-8(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB179_46
# %bb.39:                               # %if.then86
	movl	$0, -12(%rbp)
.LBB179_40:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB179_45
# %bb.41:                               # %for.body
                                        #   in Loop: Header=BB179_40 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	cmpl	6360(%rcx), %eax
	jne	.LBB179_43
# %bb.42:                               # %if.then93
                                        #   in Loop: Header=BB179_40 Depth=1
	movabsq	$.L.str.13, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB179_43:                             # %if.end94
                                        #   in Loop: Header=BB179_40 Depth=1
	jmp	.LBB179_44
.LBB179_44:                             # %for.inc
                                        #   in Loop: Header=BB179_40 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB179_40
.LBB179_45:                             # %for.end
	jmp	.LBB179_46
.LBB179_46:                             # %if.end95
	movq	dpb, %rax
	movl	dpb+28, %ecx
	movq	(%rax,%rcx,8), %rdi
	movq	-8(%rbp), %rsi
	callq	insert_picture_in_dpb
	movq	-8(%rbp), %rax
	cmpl	$0, (%rax)
	je	.LBB179_48
# %bb.47:                               # %if.then101
	movq	dpb, %rax
	movl	dpb+28, %ecx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, dpb+56
	jmp	.LBB179_49
.LBB179_48:                             # %if.else104
	movq	$0, dpb+56
.LBB179_49:                             # %if.end105
	movl	dpb+28, %eax
	addl	$1, %eax
	movl	%eax, dpb+28
	callq	update_ref_list
	callq	update_ltref_list
	callq	dump_dpb
.LBB179_50:                             # %return
	cmpl	$931531782, -20(%rbp)   # imm = 0x37860C06
	jne	.LBB179_52
.LBB179_51:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB179_52:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB179_51
.Lfunc_end179:
	.size	store_picture_in_dpb.116, .Lfunc_end179-store_picture_in_dpb.116
	.cfi_endproc
                                        # -- End function
	.globl	getDpbSize.117          # -- Begin function getDpbSize.117
	.p2align	4, 0x90
	.type	getDpbSize.117,@function
getDpbSize.117:                         # @getDpbSize.117
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$484790485, -20(%rbp)   # imm = 0x1CE550D5
	movq	active_sps(%rip), %rax
	movl	1140(%rax), %ecx
	movl	1144(%rax), %edx
	addl	$1, %ecx
	addl	$1, %edx
	imull	%edx, %ecx
	movl	1148(%rax), %eax
	cmpl	$1, %eax
	movl	$2, %eax
	adcl	$-1, %eax
	imull	%eax, %ecx
	shll	$7, %ecx
	leal	(%rcx,%rcx,2), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -12(%rbp)
	movq	active_sps(%rip), %rax
	movl	24(%rax), %eax
	addl	$-10, %eax
	movl	%eax, %ecx
	subl	$41, %ecx
	ja	.LBB180_17
# %bb.1:                                # %entry
	movq	.LJTI180_0(,%rax,8), %rax
	jmpq	*%rax
.LBB180_2:                              # %sw.bb
	movl	$152064, -12(%rbp)      # imm = 0x25200
	jmp	.LBB180_18
.LBB180_3:                              # %sw.bb4
	movl	$345600, -12(%rbp)      # imm = 0x54600
	jmp	.LBB180_18
.LBB180_4:                              # %sw.bb5
	movl	$912384, -12(%rbp)      # imm = 0xDEC00
	jmp	.LBB180_18
.LBB180_5:                              # %sw.bb6
	movl	$912384, -12(%rbp)      # imm = 0xDEC00
	jmp	.LBB180_18
.LBB180_6:                              # %sw.bb7
	movl	$912384, -12(%rbp)      # imm = 0xDEC00
	jmp	.LBB180_18
.LBB180_7:                              # %sw.bb8
	movl	$1824768, -12(%rbp)     # imm = 0x1BD800
	jmp	.LBB180_18
.LBB180_8:                              # %sw.bb9
	movl	$3110400, -12(%rbp)     # imm = 0x2F7600
	jmp	.LBB180_18
.LBB180_9:                              # %sw.bb10
	movl	$3110400, -12(%rbp)     # imm = 0x2F7600
	jmp	.LBB180_18
.LBB180_10:                             # %sw.bb11
	movl	$6912000, -12(%rbp)     # imm = 0x697800
	jmp	.LBB180_18
.LBB180_11:                             # %sw.bb12
	movl	$7864320, -12(%rbp)     # imm = 0x780000
	jmp	.LBB180_18
.LBB180_12:                             # %sw.bb13
	movl	$12582912, -12(%rbp)    # imm = 0xC00000
	jmp	.LBB180_18
.LBB180_13:                             # %sw.bb14
	movl	$12582912, -12(%rbp)    # imm = 0xC00000
	jmp	.LBB180_18
.LBB180_14:                             # %sw.bb15
	movl	$12582912, -12(%rbp)    # imm = 0xC00000
	jmp	.LBB180_18
.LBB180_15:                             # %sw.bb16
	movl	$42393600, -12(%rbp)    # imm = 0x286E000
	jmp	.LBB180_18
.LBB180_16:                             # %sw.bb17
	movl	$70778880, -12(%rbp)    # imm = 0x4380000
	jmp	.LBB180_18
.LBB180_17:                             # %sw.default
	movabsq	$.L.str, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB180_18:                             # %sw.epilog
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
	cmpl	$16, -12(%rbp)
	jge	.LBB180_20
# %bb.19:                               # %cond.true
	movl	-12(%rbp), %ebx
	jmp	.LBB180_21
.LBB180_20:                             # %cond.false
	movl	$16, %ebx
	jmp	.LBB180_21
.LBB180_21:                             # %cond.end
	cmpl	$484790485, -20(%rbp)   # imm = 0x1CE550D5
	jne	.LBB180_23
.LBB180_22:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB180_23:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB180_22
.Lfunc_end180:
	.size	getDpbSize.117, .Lfunc_end180-getDpbSize.117
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI180_0:
	.quad	.LBB180_2
	.quad	.LBB180_3
	.quad	.LBB180_4
	.quad	.LBB180_5
	.quad	.LBB180_17
	.quad	.LBB180_17
	.quad	.LBB180_17
	.quad	.LBB180_17
	.quad	.LBB180_17
	.quad	.LBB180_17
	.quad	.LBB180_6
	.quad	.LBB180_7
	.quad	.LBB180_8
	.quad	.LBB180_17
	.quad	.LBB180_17
	.quad	.LBB180_17
	.quad	.LBB180_17
	.quad	.LBB180_17
	.quad	.LBB180_17
	.quad	.LBB180_17
	.quad	.LBB180_9
	.quad	.LBB180_10
	.quad	.LBB180_11
	.quad	.LBB180_17
	.quad	.LBB180_17
	.quad	.LBB180_17
	.quad	.LBB180_17
	.quad	.LBB180_17
	.quad	.LBB180_17
	.quad	.LBB180_17
	.quad	.LBB180_12
	.quad	.LBB180_13
	.quad	.LBB180_14
	.quad	.LBB180_17
	.quad	.LBB180_17
	.quad	.LBB180_17
	.quad	.LBB180_17
	.quad	.LBB180_17
	.quad	.LBB180_17
	.quad	.LBB180_17
	.quad	.LBB180_15
	.quad	.LBB180_16
                                        # -- End function
	.text
	.globl	replace_top_pic_with_frame.118 # -- Begin function replace_top_pic_with_frame.118
	.p2align	4, 0x90
	.type	replace_top_pic_with_frame.118,@function
replace_top_pic_with_frame.118:         # @replace_top_pic_with_frame.118
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1203745949, -32(%rbp)  # imm = 0x47BFB49D
	movq	%rdi, -24(%rbp)
	movq	$0, -16(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 6380(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB181_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rdi
	callq	UnifiedOneForthPix
.LBB181_2:                              # %if.end
	movl	$0, -28(%rbp)
	movl	$0, -4(%rbp)
.LBB181_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB181_9
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB181_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jne	.LBB181_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB181_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, (%rax)
	jne	.LBB181_7
# %bb.6:                                # %if.then11
	movl	$1, -28(%rbp)
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB181_10
.LBB181_7:                              # %if.end14
                                        #   in Loop: Header=BB181_3 Depth=1
	jmp	.LBB181_8
.LBB181_8:                              # %for.inc
                                        #   in Loop: Header=BB181_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB181_3
.LBB181_9:                              # %for.end.loopexit
	jmp	.LBB181_10
.LBB181_10:                             # %for.end
	cmpl	$0, -28(%rbp)
	jne	.LBB181_12
# %bb.11:                               # %if.then16
	movabsq	$.L.str.14, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB181_12:                             # %if.end17
	movq	-16(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-16(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movq	-16(%rbp), %rax
	movl	$3, (%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB181_16
# %bb.13:                               # %if.then22
	movq	-16(%rbp), %rax
	movl	$3, 4(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB181_15
# %bb.14:                               # %if.then24
	movq	-16(%rbp), %rax
	movl	$3, 8(%rax)
.LBB181_15:                             # %if.end26
	jmp	.LBB181_16
.LBB181_16:                             # %if.end27
	movq	-16(%rbp), %rdi
	callq	dpb_split_field
	callq	update_ref_list
	callq	update_ltref_list
	cmpl	$1203745949, -32(%rbp)  # imm = 0x47BFB49D
	jne	.LBB181_18
.LBB181_17:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB181_18:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB181_17
.Lfunc_end181:
	.size	replace_top_pic_with_frame.118, .Lfunc_end181-replace_top_pic_with_frame.118
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_short_term_pic.119
	.type	get_short_term_pic.119,@function
get_short_term_pic.119:                 # @get_short_term_pic.119
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$607104282, -28(%rbp)   # imm = 0x242FAD1A
	movl	%edi, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB182_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB182_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB182_1 Depth=1
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB182_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB182_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB182_8
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB182_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB182_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB182_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB182_7
# %bb.6:                                # %if.then10
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB182_23
.LBB182_7:                              # %if.end
                                        #   in Loop: Header=BB182_1 Depth=1
	jmp	.LBB182_8
.LBB182_8:                              # %if.end14
                                        #   in Loop: Header=BB182_1 Depth=1
	jmp	.LBB182_20
.LBB182_9:                              # %if.else
                                        #   in Loop: Header=BB182_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB182_14
# %bb.10:                               # %if.then19
                                        #   in Loop: Header=BB182_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB182_13
# %bb.11:                               # %land.lhs.true24
                                        #   in Loop: Header=BB182_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB182_13
# %bb.12:                               # %if.then30
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB182_23
.LBB182_13:                             # %if.end34
                                        #   in Loop: Header=BB182_1 Depth=1
	jmp	.LBB182_14
.LBB182_14:                             # %if.end35
                                        #   in Loop: Header=BB182_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB182_19
# %bb.15:                               # %if.then41
                                        #   in Loop: Header=BB182_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB182_18
# %bb.16:                               # %land.lhs.true46
                                        #   in Loop: Header=BB182_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB182_18
# %bb.17:                               # %if.then52
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB182_23
.LBB182_18:                             # %if.end56
                                        #   in Loop: Header=BB182_1 Depth=1
	jmp	.LBB182_19
.LBB182_19:                             # %if.end57
                                        #   in Loop: Header=BB182_1 Depth=1
	jmp	.LBB182_20
.LBB182_20:                             # %if.end58
                                        #   in Loop: Header=BB182_1 Depth=1
	jmp	.LBB182_21
.LBB182_21:                             # %for.inc
                                        #   in Loop: Header=BB182_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB182_1
.LBB182_22:                             # %for.end
	movq	$0, -24(%rbp)
.LBB182_23:                             # %return
	movq	-24(%rbp), %rbx
	cmpl	$607104282, -28(%rbp)   # imm = 0x242FAD1A
	jne	.LBB182_25
.LBB182_24:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB182_25:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB182_24
.Lfunc_end182:
	.size	get_short_term_pic.119, .Lfunc_end182-get_short_term_pic.119
	.cfi_endproc
                                        # -- End function
	.globl	dpb_combine_field.120   # -- Begin function dpb_combine_field.120
	.p2align	4, 0x90
	.type	dpb_combine_field.120,@function
dpb_combine_field.120:                  # @dpb_combine_field.120
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$592654847, -32(%rbp)   # imm = 0x235331FF
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %edx
	shll	$1, %edx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6404(%rax), %r8d
	shll	$1, %r8d
	xorl	%edi, %edi
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movl	$0, -4(%rbp)
.LBB183_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	6396(%rcx), %eax
	jge	.LBB183_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB183_1 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB183_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB183_1
.LBB183_4:                              # %for.end
	movl	$0, -4(%rbp)
.LBB183_5:                              # %for.cond28
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	6404(%rcx), %eax
	jge	.LBB183_8
# %bb.6:                                # %for.body33
                                        #   in Loop: Header=BB183_5 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.7:                                # %for.inc95
                                        #   in Loop: Header=BB183_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB183_5
.LBB183_8:                              # %for.end97
	movq	-16(%rbp), %rax
	movq	40(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB183_10
# %bb.9:                                # %cond.true
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	4(%rax), %ecx
	jmp	.LBB183_11
.LBB183_10:                             # %cond.false
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	4(%rax), %ecx
.LBB183_11:                             # %cond.end
	xorl	%eax, %eax
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 4(%rdx)
	movq	-16(%rbp), %rdx
	movl	%ecx, 36(%rdx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 8(%rdx)
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	56(%rdx), %rdx
	movl	%ecx, 8(%rdx)
	movq	-16(%rbp), %rdx
	movq	48(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	56(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	48(%rdx), %rdx
	movl	%ecx, 12(%rdx)
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 12(%rdx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	$0, 6380(%rcx)
	je	.LBB183_13
# %bb.12:                               # %land.rhs
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6380(%rax)
	setne	%al
.LBB183_13:                             # %land.end
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%eax, 6380(%rdx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB183_15
# %bb.14:                               # %land.rhs138
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	setne	%cl
.LBB183_15:                             # %land.end142
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB183_17
# %bb.16:                               # %if.then
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB183_17:                             # %if.end
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	$0, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6552(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6560(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6560(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6560(%rax)
	je	.LBB183_19
# %bb.18:                               # %if.then167
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6572(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6572(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6576(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6576(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6564(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6564(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6568(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6568(%rcx)
.LBB183_19:                             # %if.end180
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movl	$0, -4(%rbp)
.LBB183_20:                             # %for.cond186
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	listXsize+4, %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB183_26
# %bb.21:                               # %for.body190
                                        #   in Loop: Header=BB183_20 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %esi
	idivq	%rsi
	movq	%rax, %rcx
	shlq	$1, %rcx
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	288(%rax,%rdx,8), %rax
	cqto
	idivq	%rsi
	shlq	$1, %rax
	cmpq	%rax, %rcx
	jge	.LBB183_23
# %bb.22:                               # %cond.true208
                                        #   in Loop: Header=BB183_20 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
	jmp	.LBB183_24
.LBB183_23:                             # %cond.false217
                                        #   in Loop: Header=BB183_20 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
.LBB183_24:                             # %cond.end226
                                        #   in Loop: Header=BB183_20 Depth=1
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, 288(%rcx,%rdx,8)
# %bb.25:                               # %for.inc233
                                        #   in Loop: Header=BB183_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB183_20
.LBB183_26:                             # %for.end235
	movl	$0, -4(%rbp)
.LBB183_27:                             # %for.cond236
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	listXsize, %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB183_33
# %bb.28:                               # %for.body241
                                        #   in Loop: Header=BB183_27 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %esi
	idivq	%rsi
	movq	%rax, %rcx
	shlq	$1, %rcx
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	24(%rax,%rdx,8), %rax
	cqto
	idivq	%rsi
	shlq	$1, %rax
	cmpq	%rax, %rcx
	jge	.LBB183_30
# %bb.29:                               # %cond.true260
                                        #   in Loop: Header=BB183_27 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
	jmp	.LBB183_31
.LBB183_30:                             # %cond.false269
                                        #   in Loop: Header=BB183_27 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
.LBB183_31:                             # %cond.end278
                                        #   in Loop: Header=BB183_27 Depth=1
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, 24(%rcx,%rdx,8)
# %bb.32:                               # %for.inc285
                                        #   in Loop: Header=BB183_27 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB183_27
.LBB183_33:                             # %for.end287
	movl	$0, -4(%rbp)
.LBB183_34:                             # %for.cond288
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB183_36 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB183_65
# %bb.35:                               # %for.body294
                                        #   in Loop: Header=BB183_34 Depth=1
	movl	$0, -20(%rbp)
.LBB183_36:                             # %for.cond295
                                        #   Parent Loop BB183_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB183_63
# %bb.37:                               # %for.body301
                                        #   in Loop: Header=BB183_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movb	$1, (%rdi,%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movb	$1, (%rdi,%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %di
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rsi,%rax,8), %rax
	movw	%di, (%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -28(%rbp)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -28(%rbp)
	jl	.LBB183_39
# %bb.38:                               # %cond.true439
                                        #   in Loop: Header=BB183_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB183_40
.LBB183_39:                             # %cond.false445
                                        #   in Loop: Header=BB183_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB183_40
.LBB183_40:                             # %cond.end446
                                        #   in Loop: Header=BB183_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB183_42
# %bb.41:                               # %cond.true456
                                        #   in Loop: Header=BB183_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB183_43
.LBB183_42:                             # %cond.false462
                                        #   in Loop: Header=BB183_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB183_43
.LBB183_43:                             # %cond.end463
                                        #   in Loop: Header=BB183_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB183_45
# %bb.44:                               # %cond.true474
                                        #   in Loop: Header=BB183_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	1608(%rax,%rcx,8), %r8
	jmp	.LBB183_46
.LBB183_45:                             # %cond.false479
                                        #   in Loop: Header=BB183_36 Depth=2
	xorl	%r8d, %r8d
	jmp	.LBB183_46
.LBB183_46:                             # %cond.end480
                                        #   in Loop: Header=BB183_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB183_48
# %bb.47:                               # %cond.true495
                                        #   in Loop: Header=BB183_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	1872(%rax,%rcx,8), %rdi
	jmp	.LBB183_49
.LBB183_48:                             # %cond.false501
                                        #   in Loop: Header=BB183_36 Depth=2
	xorl	%edi, %edi
	jmp	.LBB183_49
.LBB183_49:                             # %cond.end502
                                        #   in Loop: Header=BB183_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	%rdi, (%rsi,%rax,8)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -28(%rbp)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -28(%rbp)
	jl	.LBB183_51
# %bb.50:                               # %cond.true641
                                        #   in Loop: Header=BB183_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB183_52
.LBB183_51:                             # %cond.false647
                                        #   in Loop: Header=BB183_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB183_52
.LBB183_52:                             # %cond.end648
                                        #   in Loop: Header=BB183_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB183_54
# %bb.53:                               # %cond.true659
                                        #   in Loop: Header=BB183_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB183_55
.LBB183_54:                             # %cond.false665
                                        #   in Loop: Header=BB183_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB183_55
.LBB183_55:                             # %cond.end666
                                        #   in Loop: Header=BB183_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB183_57
# %bb.56:                               # %cond.true677
                                        #   in Loop: Header=BB183_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	1608(%rax,%rcx,8), %r8
	jmp	.LBB183_58
.LBB183_57:                             # %cond.false683
                                        #   in Loop: Header=BB183_36 Depth=2
	movq	$-1, %r8
	jmp	.LBB183_58
.LBB183_58:                             # %cond.end684
                                        #   in Loop: Header=BB183_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB183_60
# %bb.59:                               # %cond.true700
                                        #   in Loop: Header=BB183_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	1872(%rax,%rcx,8), %r8
	jmp	.LBB183_61
.LBB183_60:                             # %cond.false706
                                        #   in Loop: Header=BB183_36 Depth=2
	movq	$-1, %r8
	jmp	.LBB183_61
.LBB183_61:                             # %cond.end707
                                        #   in Loop: Header=BB183_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
# %bb.62:                               # %for.inc721
                                        #   in Loop: Header=BB183_36 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB183_36
.LBB183_63:                             # %for.end723
                                        #   in Loop: Header=BB183_34 Depth=1
	jmp	.LBB183_64
.LBB183_64:                             # %for.inc724
                                        #   in Loop: Header=BB183_34 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB183_34
.LBB183_65:                             # %for.end726
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB183_67
# %bb.66:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB183_76
.LBB183_67:                             # %if.then729
	movl	$0, -4(%rbp)
.LBB183_68:                             # %for.cond730
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB183_70 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB183_75
# %bb.69:                               # %for.body736
                                        #   in Loop: Header=BB183_68 Depth=1
	movl	$0, -20(%rbp)
.LBB183_70:                             # %for.cond737
                                        #   Parent Loop BB183_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB183_73
# %bb.71:                               # %for.body743
                                        #   in Loop: Header=BB183_70 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.72:                               # %for.inc756
                                        #   in Loop: Header=BB183_70 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB183_70
.LBB183_73:                             # %for.end758
                                        #   in Loop: Header=BB183_68 Depth=1
	jmp	.LBB183_74
.LBB183_74:                             # %for.inc759
                                        #   in Loop: Header=BB183_68 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB183_68
.LBB183_75:                             # %for.end761
	jmp	.LBB183_76
.LBB183_76:                             # %if.end762
	cmpl	$592654847, -32(%rbp)   # imm = 0x235331FF
	jne	.LBB183_78
.LBB183_77:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB183_78:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB183_77
.Lfunc_end183:
	.size	dpb_combine_field.120, .Lfunc_end183-dpb_combine_field.120
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mark_pic_long_term.121
	.type	mark_pic_long_term.121,@function
mark_pic_long_term.121:                 # @mark_pic_long_term.121
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1792984274, -20(%rbp)  # imm = 0x6ADEC4D2
	movq	%rdi, -32(%rbp)
	movl	%esi, -8(%rbp)
	movl	%edx, -16(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB184_11
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB184_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB184_10
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB184_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB184_8
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB184_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB184_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB184_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB184_7
# %bb.6:                                # %if.then10
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	$3, 8(%rax)
	jmp	.LBB184_39
.LBB184_7:                              # %if.end
                                        #   in Loop: Header=BB184_2 Depth=1
	jmp	.LBB184_8
.LBB184_8:                              # %if.end50
                                        #   in Loop: Header=BB184_2 Depth=1
	jmp	.LBB184_9
.LBB184_9:                              # %for.inc
                                        #   in Loop: Header=BB184_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB184_2
.LBB184_10:                             # %for.end
	movabsq	$.L.str.25, %rdi
	movb	$0, %al
	callq	printf
	jmp	.LBB184_39
.LBB184_11:                             # %if.else
	movq	-32(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB184_13
# %bb.12:                               # %if.then53
	movl	$1, -12(%rbp)
	movl	$0, -24(%rbp)
	jmp	.LBB184_14
.LBB184_13:                             # %if.else54
	movl	$0, -12(%rbp)
	movl	$1, -24(%rbp)
.LBB184_14:                             # %if.end55
	movl	$0, -4(%rbp)
.LBB184_15:                             # %for.cond56
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB184_38
# %bb.16:                               # %for.body58
                                        #   in Loop: Header=BB184_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB184_26
# %bb.17:                               # %if.then63
                                        #   in Loop: Header=BB184_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB184_25
# %bb.18:                               # %land.lhs.true69
                                        #   in Loop: Header=BB184_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB184_25
# %bb.19:                               # %if.then75
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	je	.LBB184_22
# %bb.20:                               # %land.lhs.true80
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-8(%rbp), %eax
	je	.LBB184_22
# %bb.21:                               # %if.then85
	movabsq	$.L.str.26, %rdi
	movb	$0, %al
	callq	printf
.LBB184_22:                             # %if.end87
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	shll	$1, %eax
	addl	-12(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	orl	$1, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB184_24
# %bb.23:                               # %if.then110
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB184_24:                             # %if.end123
	jmp	.LBB184_39
.LBB184_25:                             # %if.end124
                                        #   in Loop: Header=BB184_15 Depth=1
	jmp	.LBB184_26
.LBB184_26:                             # %if.end125
                                        #   in Loop: Header=BB184_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB184_36
# %bb.27:                               # %if.then131
                                        #   in Loop: Header=BB184_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB184_35
# %bb.28:                               # %land.lhs.true137
                                        #   in Loop: Header=BB184_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB184_35
# %bb.29:                               # %if.then143
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	je	.LBB184_32
# %bb.30:                               # %land.lhs.true148
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-8(%rbp), %eax
	je	.LBB184_32
# %bb.31:                               # %if.then153
	movabsq	$.L.str.26, %rdi
	movb	$0, %al
	callq	printf
.LBB184_32:                             # %if.end155
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	shll	$1, %eax
	addl	-12(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	orl	$2, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB184_34
# %bb.33:                               # %if.then181
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB184_34:                             # %if.end194
	jmp	.LBB184_39
.LBB184_35:                             # %if.end195
                                        #   in Loop: Header=BB184_15 Depth=1
	jmp	.LBB184_36
.LBB184_36:                             # %if.end196
                                        #   in Loop: Header=BB184_15 Depth=1
	jmp	.LBB184_37
.LBB184_37:                             # %for.inc197
                                        #   in Loop: Header=BB184_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB184_15
.LBB184_38:                             # %for.end199
	movabsq	$.L.str.27, %rdi
	movb	$0, %al
	callq	printf
.LBB184_39:                             # %if.end201
	cmpl	$1792984274, -20(%rbp)  # imm = 0x6ADEC4D2
	jne	.LBB184_41
.LBB184_40:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB184_41:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB184_40
.Lfunc_end184:
	.size	mark_pic_long_term.121, .Lfunc_end184-mark_pic_long_term.121
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_poc_asc.122
	.type	compare_pic_by_poc_asc.122,@function
compare_pic_by_poc_asc.122:             # @compare_pic_by_poc_asc.122
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1847994737, -16(%rbp)  # imm = 0x6E262971
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB185_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB185_5
.LBB185_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB185_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB185_5
.LBB185_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB185_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1847994737, -16(%rbp)  # imm = 0x6E262971
	jne	.LBB185_7
.LBB185_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB185_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB185_6
.Lfunc_end185:
	.size	compare_pic_by_poc_asc.122, .Lfunc_end185-compare_pic_by_poc_asc.122
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_long_term_pic.123
	.type	get_long_term_pic.123,@function
get_long_term_pic.123:                  # @get_long_term_pic.123
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$2034348352, -28(%rbp)  # imm = 0x7941B140
	movl	%edi, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB186_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB186_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB186_1 Depth=1
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB186_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB186_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB186_8
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB186_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB186_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB186_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB186_7
# %bb.6:                                # %if.then10
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB186_23
.LBB186_7:                              # %if.end
                                        #   in Loop: Header=BB186_1 Depth=1
	jmp	.LBB186_8
.LBB186_8:                              # %if.end14
                                        #   in Loop: Header=BB186_1 Depth=1
	jmp	.LBB186_20
.LBB186_9:                              # %if.else
                                        #   in Loop: Header=BB186_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB186_14
# %bb.10:                               # %if.then19
                                        #   in Loop: Header=BB186_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB186_13
# %bb.11:                               # %land.lhs.true24
                                        #   in Loop: Header=BB186_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB186_13
# %bb.12:                               # %if.then30
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB186_23
.LBB186_13:                             # %if.end34
                                        #   in Loop: Header=BB186_1 Depth=1
	jmp	.LBB186_14
.LBB186_14:                             # %if.end35
                                        #   in Loop: Header=BB186_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB186_19
# %bb.15:                               # %if.then41
                                        #   in Loop: Header=BB186_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB186_18
# %bb.16:                               # %land.lhs.true46
                                        #   in Loop: Header=BB186_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB186_18
# %bb.17:                               # %if.then52
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB186_23
.LBB186_18:                             # %if.end56
                                        #   in Loop: Header=BB186_1 Depth=1
	jmp	.LBB186_19
.LBB186_19:                             # %if.end57
                                        #   in Loop: Header=BB186_1 Depth=1
	jmp	.LBB186_20
.LBB186_20:                             # %if.end58
                                        #   in Loop: Header=BB186_1 Depth=1
	jmp	.LBB186_21
.LBB186_21:                             # %for.inc
                                        #   in Loop: Header=BB186_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB186_1
.LBB186_22:                             # %for.end
	movq	$0, -24(%rbp)
.LBB186_23:                             # %return
	movq	-24(%rbp), %rbx
	cmpl	$2034348352, -28(%rbp)  # imm = 0x7941B140
	jne	.LBB186_25
.LBB186_24:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB186_25:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB186_24
.Lfunc_end186:
	.size	get_long_term_pic.123, .Lfunc_end186-get_long_term_pic.123
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_poc_asc.124
	.type	compare_fs_by_poc_asc.124,@function
compare_fs_by_poc_asc.124:              # @compare_fs_by_poc_asc.124
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1646609997, -16(%rbp)  # imm = 0x6225464D
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB187_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB187_5
.LBB187_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jle	.LBB187_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB187_5
.LBB187_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB187_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1646609997, -16(%rbp)  # imm = 0x6225464D
	jne	.LBB187_7
.LBB187_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB187_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB187_6
.Lfunc_end187:
	.size	compare_fs_by_poc_asc.124, .Lfunc_end187-compare_fs_by_poc_asc.124
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_lt_pic_num_asc.125
	.type	compare_pic_by_lt_pic_num_asc.125,@function
compare_pic_by_lt_pic_num_asc.125:      # @compare_pic_by_lt_pic_num_asc.125
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1601209905, -16(%rbp)  # imm = 0x5F708631
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	6368(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6368(%rcx), %eax
	jge	.LBB188_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB188_5
.LBB188_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	6368(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6368(%rcx), %eax
	jle	.LBB188_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB188_5
.LBB188_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB188_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1601209905, -16(%rbp)  # imm = 0x5F708631
	jne	.LBB188_7
.LBB188_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB188_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB188_6
.Lfunc_end188:
	.size	compare_pic_by_lt_pic_num_asc.125, .Lfunc_end188-compare_pic_by_lt_pic_num_asc.125
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_poc_desc.126
	.type	compare_pic_by_poc_desc.126,@function
compare_pic_by_poc_desc.126:            # @compare_pic_by_poc_desc.126
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1238965293, -16(%rbp)  # imm = 0x49D91C2D
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB189_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB189_5
.LBB189_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB189_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB189_5
.LBB189_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB189_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1238965293, -16(%rbp)  # imm = 0x49D91C2D
	jne	.LBB189_7
.LBB189_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB189_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB189_6
.Lfunc_end189:
	.size	compare_pic_by_poc_desc.126, .Lfunc_end189-compare_pic_by_poc_desc.126
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function reorder_long_term.127
	.type	reorder_long_term.127,@function
reorder_long_term.127:                  # @reorder_long_term.127
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1907315018, -44(%rbp)  # imm = 0x71AF514A
	movq	%rdi, -16(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -40(%rbp)
	movl	-24(%rbp), %edi
	callq	get_long_term_pic
	movq	%rax, -56(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB190_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-40(%rbp), %rcx
	cmpl	(%rcx), %eax
	jle	.LBB190_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB190_1 Depth=1
	movq	-16(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB190_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB190_1
.LBB190_4:                              # %for.end
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movl	(%rdx), %esi
	movl	%esi, %edi
	addl	$1, %edi
	movl	%edi, (%rdx)
	movslq	%esi, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB190_5:                              # %for.cond5
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jg	.LBB190_11
# %bb.6:                                # %for.body8
                                        #   in Loop: Header=BB190_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB190_8
# %bb.7:                                # %lor.lhs.false
                                        #   in Loop: Header=BB190_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6368(%rax), %eax
	cmpl	-24(%rbp), %eax
	je	.LBB190_9
.LBB190_8:                              # %if.then
                                        #   in Loop: Header=BB190_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movl	-28(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -28(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB190_9:                              # %if.end
                                        #   in Loop: Header=BB190_5 Depth=1
	jmp	.LBB190_10
.LBB190_10:                             # %for.inc19
                                        #   in Loop: Header=BB190_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB190_5
.LBB190_11:                             # %for.end21
	cmpl	$1907315018, -44(%rbp)  # imm = 0x71AF514A
	jne	.LBB190_13
.LBB190_12:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB190_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB190_12
.Lfunc_end190:
	.size	reorder_long_term.127, .Lfunc_end190-reorder_long_term.127
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_unmark_short_term_for_reference.128
	.type	mm_unmark_short_term_for_reference.128,@function
mm_unmark_short_term_for_reference.128: # @mm_unmark_short_term_for_reference.128
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$110705815, -12(%rbp)   # imm = 0x6993C97
	movq	%rdi, -24(%rbp)
	movl	%esi, -16(%rbp)
	movq	-24(%rbp), %rdi
	movl	-16(%rbp), %esi
	callq	get_pic_num_x
	movl	%eax, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB191_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB191_26
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB191_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB191_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB191_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB191_8
# %bb.4:                                # %land.lhs.true
                                        #   in Loop: Header=BB191_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB191_8
# %bb.5:                                # %if.then6
                                        #   in Loop: Header=BB191_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB191_7
# %bb.6:                                # %if.then10
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_reference
	jmp	.LBB191_27
.LBB191_7:                              # %if.end
                                        #   in Loop: Header=BB191_1 Depth=1
	jmp	.LBB191_8
.LBB191_8:                              # %if.end13
                                        #   in Loop: Header=BB191_1 Depth=1
	jmp	.LBB191_24
.LBB191_9:                              # %if.else
                                        #   in Loop: Header=BB191_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB191_16
# %bb.10:                               # %land.lhs.true17
                                        #   in Loop: Header=BB191_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB191_16
# %bb.11:                               # %if.then23
                                        #   in Loop: Header=BB191_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB191_15
# %bb.12:                               # %if.then28
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$2, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB191_14
# %bb.13:                               # %if.then39
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
.LBB191_14:                             # %if.end44
	jmp	.LBB191_27
.LBB191_15:                             # %if.end45
                                        #   in Loop: Header=BB191_1 Depth=1
	jmp	.LBB191_16
.LBB191_16:                             # %if.end46
                                        #   in Loop: Header=BB191_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB191_23
# %bb.17:                               # %land.lhs.true52
                                        #   in Loop: Header=BB191_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	jne	.LBB191_23
# %bb.18:                               # %if.then58
                                        #   in Loop: Header=BB191_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB191_22
# %bb.19:                               # %if.then63
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB191_21
# %bb.20:                               # %if.then76
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
.LBB191_21:                             # %if.end81
	jmp	.LBB191_27
.LBB191_22:                             # %if.end82
                                        #   in Loop: Header=BB191_1 Depth=1
	jmp	.LBB191_23
.LBB191_23:                             # %if.end83
                                        #   in Loop: Header=BB191_1 Depth=1
	jmp	.LBB191_24
.LBB191_24:                             # %if.end84
                                        #   in Loop: Header=BB191_1 Depth=1
	jmp	.LBB191_25
.LBB191_25:                             # %for.inc
                                        #   in Loop: Header=BB191_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB191_1
.LBB191_26:                             # %for.end.loopexit
	jmp	.LBB191_27
.LBB191_27:                             # %for.end
	cmpl	$110705815, -12(%rbp)   # imm = 0x6993C97
	jne	.LBB191_29
.LBB191_28:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB191_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB191_28
.Lfunc_end191:
	.size	mm_unmark_short_term_for_reference.128, .Lfunc_end191-mm_unmark_short_term_for_reference.128
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_pic_num_x.129
	.type	get_pic_num_x.129,@function
get_pic_num_x.129:                      # @get_pic_num_x.129
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$737433540, -28(%rbp)   # imm = 0x2BF457C4
	movq	%rdi, -24(%rbp)
	movl	%esi, -32(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB192_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	movl	6360(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB192_3
.LBB192_2:                              # %if.else
	movq	-24(%rbp), %rax
	movl	6360(%rax), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
.LBB192_3:                              # %if.end
	movl	-12(%rbp), %ebx
	movl	-32(%rbp), %eax
	addl	$1, %eax
	subl	%eax, %ebx
	cmpl	$737433540, -28(%rbp)   # imm = 0x2BF457C4
	jne	.LBB192_5
.LBB192_4:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB192_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB192_4
.Lfunc_end192:
	.size	get_pic_num_x.129, .Lfunc_end192-get_pic_num_x.129
	.cfi_endproc
                                        # -- End function
	.globl	reorder_ref_pic_list.130 # -- Begin function reorder_ref_pic_list.130
	.p2align	4, 0x90
	.type	reorder_ref_pic_list.130,@function
reorder_ref_pic_list.130:               # @reorder_ref_pic_list.130
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$1460384534, -60(%rbp)  # imm = 0x570BB316
	movq	%rdi, -72(%rbp)
	movq	%rsi, -88(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -32(%rbp)
	movq	%r9, -80(%rbp)
	movl	$0, -44(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB193_2
# %bb.1:                                # %if.then
	movl	-40(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	72464(%rax), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB193_3
.LBB193_2:                              # %if.else
	movl	-40(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	72464(%rax), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
.LBB193_3:                              # %if.end
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB193_4:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$3, (%rax,%rcx,4)
	je	.LBB193_24
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB193_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$3, (%rax,%rcx,4)
	jle	.LBB193_7
# %bb.6:                                # %if.then8
                                        #   in Loop: Header=BB193_4 Depth=1
	movabsq	$.L.str.12, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB193_7:                              # %if.end9
                                        #   in Loop: Header=BB193_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$2, (%rax,%rcx,4)
	jge	.LBB193_21
# %bb.8:                                # %if.then13
                                        #   in Loop: Header=BB193_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	jne	.LBB193_13
# %bb.9:                                # %if.then17
                                        #   in Loop: Header=BB193_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB193_11
# %bb.10:                               # %if.then22
                                        #   in Loop: Header=BB193_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	addl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB193_12
.LBB193_11:                             # %if.else28
                                        #   in Loop: Header=BB193_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -12(%rbp)
.LBB193_12:                             # %if.end33
                                        #   in Loop: Header=BB193_4 Depth=1
	jmp	.LBB193_17
.LBB193_13:                             # %if.else34
                                        #   in Loop: Header=BB193_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	cmpl	-16(%rbp), %eax
	jl	.LBB193_15
# %bb.14:                               # %if.then40
                                        #   in Loop: Header=BB193_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB193_16
.LBB193_15:                             # %if.else46
                                        #   in Loop: Header=BB193_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
.LBB193_16:                             # %if.end51
                                        #   in Loop: Header=BB193_4 Depth=1
	jmp	.LBB193_17
.LBB193_17:                             # %if.end52
                                        #   in Loop: Header=BB193_4 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jle	.LBB193_19
# %bb.18:                               # %if.then54
                                        #   in Loop: Header=BB193_4 Depth=1
	movl	-12(%rbp), %eax
	subl	-16(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB193_20
.LBB193_19:                             # %if.else56
                                        #   in Loop: Header=BB193_4 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB193_20:                             # %if.end57
                                        #   in Loop: Header=BB193_4 Depth=1
	movq	-72(%rbp), %rdi
	movl	-20(%rbp), %esi
	movl	-36(%rbp), %edx
	leaq	-44(%rbp), %rcx
	callq	reorder_short_term
	jmp	.LBB193_22
.LBB193_21:                             # %if.else58
                                        #   in Loop: Header=BB193_4 Depth=1
	movq	-72(%rbp), %rdi
	movl	-20(%rbp), %esi
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %edx
	leaq	-44(%rbp), %rcx
	callq	reorder_long_term
.LBB193_22:                             # %if.end61
                                        #   in Loop: Header=BB193_4 Depth=1
	jmp	.LBB193_23
.LBB193_23:                             # %for.inc
                                        #   in Loop: Header=BB193_4 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB193_4
.LBB193_24:                             # %for.end
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$1460384534, -60(%rbp)  # imm = 0x570BB316
	jne	.LBB193_26
.LBB193_25:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB193_26:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB193_25
.Lfunc_end193:
	.size	reorder_ref_pic_list.130, .Lfunc_end193-reorder_ref_pic_list.130
	.cfi_endproc
                                        # -- End function
	.globl	store_picture_in_dpb.131 # -- Begin function store_picture_in_dpb.131
	.p2align	4, 0x90
	.type	store_picture_in_dpb.131,@function
store_picture_in_dpb.131:               # @store_picture_in_dpb.131
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1746020678, -16(%rbp)  # imm = 0x68122946
	movq	%rdi, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 6380(%rcx)
	movq	img, %rax
	movl	$0, 72644(%rax)
	movq	img, %rax
	cmpl	$2, 28(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 72640(%rcx)
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	je	.LBB194_2
# %bb.1:                                # %if.then
	movq	-8(%rbp), %rdi
	callq	idr_memory_management
	jmp	.LBB194_6
.LBB194_2:                              # %if.else
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB194_5
# %bb.3:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72500(%rax)
	je	.LBB194_5
# %bb.4:                                # %if.then6
	movq	-8(%rbp), %rdi
	callq	adaptive_memory_management
.LBB194_5:                              # %if.end
	jmp	.LBB194_6
.LBB194_6:                              # %if.end7
	movq	-8(%rbp), %rax
	cmpl	$1, (%rax)
	je	.LBB194_8
# %bb.7:                                # %lor.lhs.false
	movq	-8(%rbp), %rax
	cmpl	$2, (%rax)
	jne	.LBB194_23
.LBB194_8:                              # %if.then14
	cmpq	$0, dpb+56
	je	.LBB194_22
# %bb.9:                                # %if.then16
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	cmpl	6364(%rcx), %eax
	jne	.LBB194_21
# %bb.10:                               # %if.then19
	movq	-8(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB194_12
# %bb.11:                               # %land.lhs.true23
	movq	dpb+56, %rax
	cmpl	$2, (%rax)
	je	.LBB194_14
.LBB194_12:                             # %lor.lhs.false26
	movq	-8(%rbp), %rax
	cmpl	$2, (%rax)
	jne	.LBB194_20
# %bb.13:                               # %land.lhs.true30
	movq	dpb+56, %rax
	cmpl	$1, (%rax)
	jne	.LBB194_20
.LBB194_14:                             # %if.then34
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB194_16
# %bb.15:                               # %land.lhs.true37
	movq	dpb+56, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB194_18
.LBB194_16:                             # %lor.lhs.false40
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	jne	.LBB194_19
# %bb.17:                               # %land.lhs.true43
	movq	dpb+56, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB194_19
.LBB194_18:                             # %if.then47
	movq	dpb+56, %rdi
	movq	-8(%rbp), %rsi
	callq	insert_picture_in_dpb
	callq	update_ref_list
	callq	update_ltref_list
	callq	dump_dpb
	movq	$0, dpb+56
	jmp	.LBB194_50
.LBB194_19:                             # %if.end48
	jmp	.LBB194_20
.LBB194_20:                             # %if.end49
	jmp	.LBB194_21
.LBB194_21:                             # %if.end50
	jmp	.LBB194_22
.LBB194_22:                             # %if.end51
	jmp	.LBB194_23
.LBB194_23:                             # %if.end52
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	jne	.LBB194_27
# %bb.24:                               # %land.lhs.true56
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB194_27
# %bb.25:                               # %land.lhs.true59
	movq	img, %rax
	cmpl	$0, 72500(%rax)
	jne	.LBB194_27
# %bb.26:                               # %if.then62
	movq	-8(%rbp), %rdi
	callq	sliding_window_memory_management
.LBB194_27:                             # %if.end63
	movl	dpb+28, %eax
	cmpl	dpb+24, %eax
	jne	.LBB194_29
# %bb.28:                               # %if.then66
	callq	remove_unused_frame_from_dpb
.LBB194_29:                             # %if.end67
	jmp	.LBB194_30
.LBB194_30:                             # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	dpb+28, %eax
	cmpl	dpb+24, %eax
	jne	.LBB194_37
# %bb.31:                               # %while.body
                                        #   in Loop: Header=BB194_30 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	jne	.LBB194_36
# %bb.32:                               # %if.then72
                                        #   in Loop: Header=BB194_30 Depth=1
	leaq	-20(%rbp), %rdi
	leaq	-24(%rbp), %rsi
	callq	get_smallest_poc
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	cmpl	-24(%rbp), %eax
	je	.LBB194_34
# %bb.33:                               # %lor.lhs.false75
                                        #   in Loop: Header=BB194_30 Depth=1
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB194_35
.LBB194_34:                             # %if.then79
	movq	-8(%rbp), %rdi
	movl	p_dec, %esi
	callq	direct_output
	jmp	.LBB194_50
.LBB194_35:                             # %if.end80
                                        #   in Loop: Header=BB194_30 Depth=1
	jmp	.LBB194_36
.LBB194_36:                             # %if.end81
                                        #   in Loop: Header=BB194_30 Depth=1
	callq	output_one_frame_from_dpb
	jmp	.LBB194_30
.LBB194_37:                             # %while.end
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB194_46
# %bb.38:                               # %land.lhs.true84
	movq	-8(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB194_46
# %bb.39:                               # %if.then86
	movl	$0, -12(%rbp)
.LBB194_40:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB194_45
# %bb.41:                               # %for.body
                                        #   in Loop: Header=BB194_40 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	cmpl	6360(%rcx), %eax
	jne	.LBB194_43
# %bb.42:                               # %if.then93
                                        #   in Loop: Header=BB194_40 Depth=1
	movabsq	$.L.str.13, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB194_43:                             # %if.end94
                                        #   in Loop: Header=BB194_40 Depth=1
	jmp	.LBB194_44
.LBB194_44:                             # %for.inc
                                        #   in Loop: Header=BB194_40 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB194_40
.LBB194_45:                             # %for.end
	jmp	.LBB194_46
.LBB194_46:                             # %if.end95
	movq	dpb, %rax
	movl	dpb+28, %ecx
	movq	(%rax,%rcx,8), %rdi
	movq	-8(%rbp), %rsi
	callq	insert_picture_in_dpb
	movq	-8(%rbp), %rax
	cmpl	$0, (%rax)
	je	.LBB194_48
# %bb.47:                               # %if.then101
	movq	dpb, %rax
	movl	dpb+28, %ecx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, dpb+56
	jmp	.LBB194_49
.LBB194_48:                             # %if.else104
	movq	$0, dpb+56
.LBB194_49:                             # %if.end105
	movl	dpb+28, %eax
	addl	$1, %eax
	movl	%eax, dpb+28
	callq	update_ref_list
	callq	update_ltref_list
	callq	dump_dpb
.LBB194_50:                             # %return
	cmpl	$1746020678, -16(%rbp)  # imm = 0x68122946
	jne	.LBB194_52
.LBB194_51:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB194_52:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB194_51
.Lfunc_end194:
	.size	store_picture_in_dpb.131, .Lfunc_end194-store_picture_in_dpb.131
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mark_pic_long_term.132
	.type	mark_pic_long_term.132,@function
mark_pic_long_term.132:                 # @mark_pic_long_term.132
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$211195247, -24(%rbp)   # imm = 0xC96956F
	movq	%rdi, -32(%rbp)
	movl	%esi, -8(%rbp)
	movl	%edx, -12(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB195_11
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB195_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB195_10
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB195_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB195_8
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB195_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB195_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB195_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB195_7
# %bb.6:                                # %if.then10
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	$3, 8(%rax)
	jmp	.LBB195_39
.LBB195_7:                              # %if.end
                                        #   in Loop: Header=BB195_2 Depth=1
	jmp	.LBB195_8
.LBB195_8:                              # %if.end50
                                        #   in Loop: Header=BB195_2 Depth=1
	jmp	.LBB195_9
.LBB195_9:                              # %for.inc
                                        #   in Loop: Header=BB195_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB195_2
.LBB195_10:                             # %for.end
	movabsq	$.L.str.25, %rdi
	movb	$0, %al
	callq	printf
	jmp	.LBB195_39
.LBB195_11:                             # %if.else
	movq	-32(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB195_13
# %bb.12:                               # %if.then53
	movl	$1, -16(%rbp)
	movl	$0, -20(%rbp)
	jmp	.LBB195_14
.LBB195_13:                             # %if.else54
	movl	$0, -16(%rbp)
	movl	$1, -20(%rbp)
.LBB195_14:                             # %if.end55
	movl	$0, -4(%rbp)
.LBB195_15:                             # %for.cond56
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB195_38
# %bb.16:                               # %for.body58
                                        #   in Loop: Header=BB195_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB195_26
# %bb.17:                               # %if.then63
                                        #   in Loop: Header=BB195_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB195_25
# %bb.18:                               # %land.lhs.true69
                                        #   in Loop: Header=BB195_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB195_25
# %bb.19:                               # %if.then75
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	je	.LBB195_22
# %bb.20:                               # %land.lhs.true80
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-8(%rbp), %eax
	je	.LBB195_22
# %bb.21:                               # %if.then85
	movabsq	$.L.str.26, %rdi
	movb	$0, %al
	callq	printf
.LBB195_22:                             # %if.end87
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	shll	$1, %eax
	addl	-16(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	orl	$1, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB195_24
# %bb.23:                               # %if.then110
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB195_24:                             # %if.end123
	jmp	.LBB195_39
.LBB195_25:                             # %if.end124
                                        #   in Loop: Header=BB195_15 Depth=1
	jmp	.LBB195_26
.LBB195_26:                             # %if.end125
                                        #   in Loop: Header=BB195_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB195_36
# %bb.27:                               # %if.then131
                                        #   in Loop: Header=BB195_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB195_35
# %bb.28:                               # %land.lhs.true137
                                        #   in Loop: Header=BB195_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB195_35
# %bb.29:                               # %if.then143
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	je	.LBB195_32
# %bb.30:                               # %land.lhs.true148
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-8(%rbp), %eax
	je	.LBB195_32
# %bb.31:                               # %if.then153
	movabsq	$.L.str.26, %rdi
	movb	$0, %al
	callq	printf
.LBB195_32:                             # %if.end155
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	shll	$1, %eax
	addl	-16(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	orl	$2, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB195_34
# %bb.33:                               # %if.then181
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB195_34:                             # %if.end194
	jmp	.LBB195_39
.LBB195_35:                             # %if.end195
                                        #   in Loop: Header=BB195_15 Depth=1
	jmp	.LBB195_36
.LBB195_36:                             # %if.end196
                                        #   in Loop: Header=BB195_15 Depth=1
	jmp	.LBB195_37
.LBB195_37:                             # %for.inc197
                                        #   in Loop: Header=BB195_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB195_15
.LBB195_38:                             # %for.end199
	movabsq	$.L.str.27, %rdi
	movb	$0, %al
	callq	printf
.LBB195_39:                             # %if.end201
	cmpl	$211195247, -24(%rbp)   # imm = 0xC96956F
	jne	.LBB195_41
.LBB195_40:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB195_41:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB195_40
.Lfunc_end195:
	.size	mark_pic_long_term.132, .Lfunc_end195-mark_pic_long_term.132
	.cfi_endproc
                                        # -- End function
	.globl	init_lists.133          # -- Begin function init_lists.133
	.p2align	4, 0x90
	.type	init_lists.133,@function
init_lists.133:                         # @init_lists.133
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$127548438, -76(%rbp)   # imm = 0x79A3C16
	movl	%edi, -52(%rbp)
	movl	%esi, -20(%rbp)
	movl	$0, -44(%rbp)
	movl	$0, -48(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -8(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jne	.LBB196_14
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB196_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB196_13
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB196_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB196_11
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB196_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB196_10
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB196_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB196_10
# %bb.6:                                # %if.then10
                                        #   in Loop: Header=BB196_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jbe	.LBB196_8
# %bb.7:                                # %if.then15
                                        #   in Loop: Header=BB196_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	subl	-68(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
	jmp	.LBB196_9
.LBB196_8:                              # %if.else
                                        #   in Loop: Header=BB196_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
.LBB196_9:                              # %if.end
                                        #   in Loop: Header=BB196_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6364(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
.LBB196_10:                             # %if.end36
                                        #   in Loop: Header=BB196_2 Depth=1
	jmp	.LBB196_11
.LBB196_11:                             # %if.end37
                                        #   in Loop: Header=BB196_2 Depth=1
	jmp	.LBB196_12
.LBB196_12:                             # %for.inc
                                        #   in Loop: Header=BB196_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB196_2
.LBB196_13:                             # %for.end
	jmp	.LBB196_31
.LBB196_14:                             # %if.else38
	cmpl	$1, -20(%rbp)
	jne	.LBB196_16
# %bb.15:                               # %if.then40
	movl	$1, -44(%rbp)
	movl	$0, -48(%rbp)
	jmp	.LBB196_17
.LBB196_16:                             # %if.else41
	movl	$0, -44(%rbp)
	movl	$1, -48(%rbp)
.LBB196_17:                             # %if.end42
	movl	$0, -4(%rbp)
.LBB196_18:                             # %for.cond43
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB196_30
# %bb.19:                               # %for.body45
                                        #   in Loop: Header=BB196_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 4(%rax)
	je	.LBB196_28
# %bb.20:                               # %if.then49
                                        #   in Loop: Header=BB196_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jbe	.LBB196_22
# %bb.21:                               # %if.then55
                                        #   in Loop: Header=BB196_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	subl	-68(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
	jmp	.LBB196_23
.LBB196_22:                             # %if.else63
                                        #   in Loop: Header=BB196_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
.LBB196_23:                             # %if.end70
                                        #   in Loop: Header=BB196_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB196_25
# %bb.24:                               # %if.then75
                                        #   in Loop: Header=BB196_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6364(%rcx)
.LBB196_25:                             # %if.end83
                                        #   in Loop: Header=BB196_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB196_27
# %bb.26:                               # %if.then89
                                        #   in Loop: Header=BB196_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6364(%rcx)
.LBB196_27:                             # %if.end98
                                        #   in Loop: Header=BB196_18 Depth=1
	jmp	.LBB196_28
.LBB196_28:                             # %if.end99
                                        #   in Loop: Header=BB196_18 Depth=1
	jmp	.LBB196_29
.LBB196_29:                             # %for.inc100
                                        #   in Loop: Header=BB196_18 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB196_18
.LBB196_30:                             # %for.end102
	jmp	.LBB196_31
.LBB196_31:                             # %if.end103
	cmpl	$2, -52(%rbp)
	je	.LBB196_33
# %bb.32:                               # %lor.lhs.false
	cmpl	$4, -52(%rbp)
	jne	.LBB196_34
.LBB196_33:                             # %if.then106
	movl	$0, listXsize
	movl	$0, listXsize+4
	jmp	.LBB196_181
.LBB196_34:                             # %if.end107
	cmpl	$0, -52(%rbp)
	je	.LBB196_36
# %bb.35:                               # %lor.lhs.false109
	cmpl	$3, -52(%rbp)
	jne	.LBB196_75
.LBB196_36:                             # %if.then111
	cmpl	$0, -20(%rbp)
	jne	.LBB196_55
# %bb.37:                               # %if.then113
	movl	$0, -4(%rbp)
.LBB196_38:                             # %for.cond114
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB196_46
# %bb.39:                               # %for.body116
                                        #   in Loop: Header=BB196_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB196_44
# %bb.40:                               # %if.then121
                                        #   in Loop: Header=BB196_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB196_43
# %bb.41:                               # %land.lhs.true127
                                        #   in Loop: Header=BB196_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB196_43
# %bb.42:                               # %if.then133
                                        #   in Loop: Header=BB196_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB196_43:                             # %if.end140
                                        #   in Loop: Header=BB196_38 Depth=1
	jmp	.LBB196_44
.LBB196_44:                             # %if.end141
                                        #   in Loop: Header=BB196_38 Depth=1
	jmp	.LBB196_45
.LBB196_45:                             # %for.inc142
                                        #   in Loop: Header=BB196_38 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB196_38
.LBB196_46:                             # %for.end144
	movq	listX, %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_pic_num_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize
	movl	$0, -4(%rbp)
.LBB196_47:                             # %for.cond145
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB196_54
# %bb.48:                               # %for.body148
                                        #   in Loop: Header=BB196_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB196_52
# %bb.49:                               # %if.then154
                                        #   in Loop: Header=BB196_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB196_51
# %bb.50:                               # %if.then160
                                        #   in Loop: Header=BB196_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB196_51:                             # %if.end177
                                        #   in Loop: Header=BB196_47 Depth=1
	jmp	.LBB196_52
.LBB196_52:                             # %if.end178
                                        #   in Loop: Header=BB196_47 Depth=1
	jmp	.LBB196_53
.LBB196_53:                             # %for.inc179
                                        #   in Loop: Header=BB196_47 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB196_47
.LBB196_54:                             # %for.end181
	movq	listX, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize
	jmp	.LBB196_74
.LBB196_55:                             # %if.else186
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -32(%rbp)
	cmpq	-32(%rbp), %rcx
	jne	.LBB196_57
# %bb.56:                               # %if.then190
	movabsq	$.L.str.9, %rdi
	callq	no_mem_exit
.LBB196_57:                             # %if.end191
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -40(%rbp)
	cmpq	-40(%rbp), %rcx
	jne	.LBB196_59
# %bb.58:                               # %if.then196
	movabsq	$.L.str.10, %rdi
	callq	no_mem_exit
.LBB196_59:                             # %if.end197
	movl	$0, -4(%rbp)
.LBB196_60:                             # %for.cond198
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB196_65
# %bb.61:                               # %for.body201
                                        #   in Loop: Header=BB196_60 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 4(%rax)
	je	.LBB196_63
# %bb.62:                               # %if.then206
                                        #   in Loop: Header=BB196_60 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB196_63:                             # %if.end212
                                        #   in Loop: Header=BB196_60 Depth=1
	jmp	.LBB196_64
.LBB196_64:                             # %for.inc213
                                        #   in Loop: Header=BB196_60 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB196_60
.LBB196_65:                             # %for.end215
	movq	-32(%rbp), %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_frame_num_desc, %rcx
	callq	qsort
	movl	$0, listXsize
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movl	$0, -4(%rbp)
.LBB196_66:                             # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB196_73
# %bb.67:                               # %for.body220
                                        #   in Loop: Header=BB196_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-40(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB196_69
# %bb.68:                               # %if.then231
                                        #   in Loop: Header=BB196_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB196_69:                             # %if.end242
                                        #   in Loop: Header=BB196_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB196_71
# %bb.70:                               # %if.then248
                                        #   in Loop: Header=BB196_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB196_71:                             # %if.end259
                                        #   in Loop: Header=BB196_66 Depth=1
	jmp	.LBB196_72
.LBB196_72:                             # %for.inc260
                                        #   in Loop: Header=BB196_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB196_66
.LBB196_73:                             # %for.end262
	movq	-40(%rbp), %rdi
	movslq	-24(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_lt_pic_idx_asc, %rcx
	callq	qsort
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movq	-32(%rbp), %rdi
	callq	free
	movq	-40(%rbp), %rdi
	callq	free
.LBB196_74:                             # %if.end264
	movl	$0, listXsize+4
	jmp	.LBB196_155
.LBB196_75:                             # %if.else265
	cmpl	$0, -20(%rbp)
	jne	.LBB196_115
# %bb.76:                               # %if.then268
	movl	$0, -4(%rbp)
.LBB196_77:                             # %for.cond269
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB196_87
# %bb.78:                               # %for.body272
                                        #   in Loop: Header=BB196_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB196_85
# %bb.79:                               # %if.then278
                                        #   in Loop: Header=BB196_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB196_84
# %bb.80:                               # %land.lhs.true284
                                        #   in Loop: Header=BB196_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB196_84
# %bb.81:                               # %if.then290
                                        #   in Loop: Header=BB196_77 Depth=1
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB196_83
# %bb.82:                               # %if.then296
                                        #   in Loop: Header=BB196_77 Depth=1
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB196_83:                             # %if.end307
                                        #   in Loop: Header=BB196_77 Depth=1
	jmp	.LBB196_84
.LBB196_84:                             # %if.end308
                                        #   in Loop: Header=BB196_77 Depth=1
	jmp	.LBB196_85
.LBB196_85:                             # %if.end309
                                        #   in Loop: Header=BB196_77 Depth=1
	jmp	.LBB196_86
.LBB196_86:                             # %for.inc310
                                        #   in Loop: Header=BB196_77 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB196_77
.LBB196_87:                             # %for.end312
	movq	listX, %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_poc_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB196_88:                             # %for.cond314
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB196_98
# %bb.89:                               # %for.body317
                                        #   in Loop: Header=BB196_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB196_96
# %bb.90:                               # %if.then323
                                        #   in Loop: Header=BB196_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB196_95
# %bb.91:                               # %land.lhs.true329
                                        #   in Loop: Header=BB196_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB196_95
# %bb.92:                               # %if.then335
                                        #   in Loop: Header=BB196_88 Depth=1
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB196_94
# %bb.93:                               # %if.then343
                                        #   in Loop: Header=BB196_88 Depth=1
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB196_94:                             # %if.end354
                                        #   in Loop: Header=BB196_88 Depth=1
	jmp	.LBB196_95
.LBB196_95:                             # %if.end355
                                        #   in Loop: Header=BB196_88 Depth=1
	jmp	.LBB196_96
.LBB196_96:                             # %if.end356
                                        #   in Loop: Header=BB196_88 Depth=1
	jmp	.LBB196_97
.LBB196_97:                             # %for.inc357
                                        #   in Loop: Header=BB196_88 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB196_88
.LBB196_98:                             # %for.end359
	movq	listX, %rdi
	movslq	-16(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_poc_asc, %rcx
	callq	qsort
	movl	$0, -12(%rbp)
.LBB196_99:                             # %for.cond364
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB196_102
# %bb.100:                              # %for.body367
                                        #   in Loop: Header=BB196_99 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movl	-8(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.101:                              # %for.inc374
                                        #   in Loop: Header=BB196_99 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB196_99
.LBB196_102:                            # %for.end376
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB196_103:                            # %for.cond377
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB196_106
# %bb.104:                              # %for.body380
                                        #   in Loop: Header=BB196_103 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.105:                              # %for.inc386
                                        #   in Loop: Header=BB196_103 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB196_103
.LBB196_106:                            # %for.end388
	movl	-8(%rbp), %eax
	movl	%eax, listXsize+4
	movl	%eax, listXsize
	movl	$0, -4(%rbp)
.LBB196_107:                            # %for.cond389
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB196_114
# %bb.108:                              # %for.body392
                                        #   in Loop: Header=BB196_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB196_112
# %bb.109:                              # %if.then398
                                        #   in Loop: Header=BB196_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB196_111
# %bb.110:                              # %if.then404
                                        #   in Loop: Header=BB196_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX+8, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB196_111:                            # %if.end428
                                        #   in Loop: Header=BB196_107 Depth=1
	jmp	.LBB196_112
.LBB196_112:                            # %if.end429
                                        #   in Loop: Header=BB196_107 Depth=1
	jmp	.LBB196_113
.LBB196_113:                            # %for.inc430
                                        #   in Loop: Header=BB196_107 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB196_107
.LBB196_114:                            # %for.end432
	movq	listX, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movq	listX+8, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize+4
	movl	%eax, listXsize
	jmp	.LBB196_154
.LBB196_115:                            # %if.else441
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -32(%rbp)
	cmpq	-32(%rbp), %rcx
	jne	.LBB196_117
# %bb.116:                              # %if.then446
	movabsq	$.L.str.9, %rdi
	callq	no_mem_exit
.LBB196_117:                            # %if.end447
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -64(%rbp)
	cmpq	-64(%rbp), %rcx
	jne	.LBB196_119
# %bb.118:                              # %if.then452
	movabsq	$.L.str.11, %rdi
	callq	no_mem_exit
.LBB196_119:                            # %if.end453
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -40(%rbp)
	cmpq	-40(%rbp), %rcx
	jne	.LBB196_121
# %bb.120:                              # %if.then458
	movabsq	$.L.str.10, %rdi
	callq	no_mem_exit
.LBB196_121:                            # %if.end459
	movl	$0, listXsize
	movl	$1, listXsize+4
	movl	$0, -4(%rbp)
.LBB196_122:                            # %for.cond460
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB196_129
# %bb.123:                              # %for.body463
                                        #   in Loop: Header=BB196_122 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, (%rax)
	je	.LBB196_127
# %bb.124:                              # %if.then468
                                        #   in Loop: Header=BB196_122 Depth=1
	movq	img, %rax
	movl	72460(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jl	.LBB196_126
# %bb.125:                              # %if.then474
                                        #   in Loop: Header=BB196_122 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB196_126:                            # %if.end480
                                        #   in Loop: Header=BB196_122 Depth=1
	jmp	.LBB196_127
.LBB196_127:                            # %if.end481
                                        #   in Loop: Header=BB196_122 Depth=1
	jmp	.LBB196_128
.LBB196_128:                            # %for.inc482
                                        #   in Loop: Header=BB196_122 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB196_122
.LBB196_129:                            # %for.end484
	movq	-32(%rbp), %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_poc_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB196_130:                            # %for.cond486
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB196_137
# %bb.131:                              # %for.body489
                                        #   in Loop: Header=BB196_130 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, (%rax)
	je	.LBB196_135
# %bb.132:                              # %if.then494
                                        #   in Loop: Header=BB196_130 Depth=1
	movq	img, %rax
	movl	72460(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB196_134
# %bb.133:                              # %if.then501
                                        #   in Loop: Header=BB196_130 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB196_134:                            # %if.end507
                                        #   in Loop: Header=BB196_130 Depth=1
	jmp	.LBB196_135
.LBB196_135:                            # %if.end508
                                        #   in Loop: Header=BB196_130 Depth=1
	jmp	.LBB196_136
.LBB196_136:                            # %for.inc509
                                        #   in Loop: Header=BB196_130 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB196_130
.LBB196_137:                            # %for.end511
	movq	-32(%rbp), %rdi
	movslq	-16(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_poc_asc, %rcx
	callq	qsort
	movl	$0, -12(%rbp)
.LBB196_138:                            # %for.cond516
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB196_141
# %bb.139:                              # %for.body519
                                        #   in Loop: Header=BB196_138 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	-8(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.140:                              # %for.inc526
                                        #   in Loop: Header=BB196_138 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB196_138
.LBB196_141:                            # %for.end528
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB196_142:                            # %for.cond529
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB196_145
# %bb.143:                              # %for.body532
                                        #   in Loop: Header=BB196_142 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.144:                              # %for.inc538
                                        #   in Loop: Header=BB196_142 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB196_142
.LBB196_145:                            # %for.end540
	movl	$0, listXsize
	movl	$0, listXsize+4
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movabsq	$listXsize, %r8
	addq	$4, %r8
	movl	-20(%rbp), %edi
	movq	-64(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX+8, %rcx
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movl	$0, -4(%rbp)
.LBB196_146:                            # %for.cond541
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB196_153
# %bb.147:                              # %for.body544
                                        #   in Loop: Header=BB196_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-40(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB196_149
# %bb.148:                              # %if.then555
                                        #   in Loop: Header=BB196_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB196_149:                            # %if.end566
                                        #   in Loop: Header=BB196_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB196_151
# %bb.150:                              # %if.then572
                                        #   in Loop: Header=BB196_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB196_151:                            # %if.end583
                                        #   in Loop: Header=BB196_146 Depth=1
	jmp	.LBB196_152
.LBB196_152:                            # %for.inc584
                                        #   in Loop: Header=BB196_146 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB196_146
.LBB196_153:                            # %for.end586
	movq	-40(%rbp), %rdi
	movslq	-24(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_lt_pic_idx_asc, %rcx
	callq	qsort
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movabsq	$listXsize, %r8
	addq	$4, %r8
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX+8, %rcx
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movq	-32(%rbp), %rdi
	callq	free
	movq	-64(%rbp), %rdi
	callq	free
	movq	-40(%rbp), %rdi
	callq	free
.LBB196_154:                            # %if.end588
	jmp	.LBB196_155
.LBB196_155:                            # %if.end589
	movl	listXsize, %eax
	cmpl	listXsize+4, %eax
	jne	.LBB196_166
# %bb.156:                              # %land.lhs.true592
	cmpl	$1, listXsize
	jle	.LBB196_166
# %bb.157:                              # %if.then595
	movl	$0, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB196_158:                            # %for.cond596
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB196_163
# %bb.159:                              # %for.body599
                                        #   in Loop: Header=BB196_158 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movslq	-12(%rbp), %rdx
	cmpq	(%rcx,%rdx,8), %rax
	je	.LBB196_161
# %bb.160:                              # %if.then606
                                        #   in Loop: Header=BB196_158 Depth=1
	movl	$1, -72(%rbp)
.LBB196_161:                            # %if.end607
                                        #   in Loop: Header=BB196_158 Depth=1
	jmp	.LBB196_162
.LBB196_162:                            # %for.inc608
                                        #   in Loop: Header=BB196_158 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB196_158
.LBB196_163:                            # %for.end610
	cmpl	$0, -72(%rbp)
	jne	.LBB196_165
# %bb.164:                              # %if.then612
	movq	listX+8, %rax
	movq	(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	listX+8, %rax
	movq	8(%rax), %rax
	movq	listX+8, %rcx
	movq	%rax, (%rcx)
	movq	-88(%rbp), %rax
	movq	listX+8, %rcx
	movq	%rax, 8(%rcx)
.LBB196_165:                            # %if.end617
	jmp	.LBB196_166
.LBB196_166:                            # %if.end618
	movl	listXsize, %eax
	movq	img, %rcx
	cmpl	72000(%rcx), %eax
	jge	.LBB196_168
# %bb.167:                              # %cond.true
	movl	listXsize, %eax
	jmp	.LBB196_169
.LBB196_168:                            # %cond.false
	movq	img, %rax
	movl	72000(%rax), %eax
.LBB196_169:                            # %cond.end
	movl	%eax, listXsize
	movl	listXsize+4, %eax
	movq	img, %rcx
	cmpl	72004(%rcx), %eax
	jge	.LBB196_171
# %bb.170:                              # %cond.true624
	movl	listXsize+4, %eax
	jmp	.LBB196_172
.LBB196_171:                            # %cond.false625
	movq	img, %rax
	movl	72004(%rax), %eax
.LBB196_172:                            # %cond.end627
	movl	%eax, listXsize+4
	movl	listXsize, %eax
	movl	%eax, -4(%rbp)
.LBB196_173:                            # %for.cond629
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$33, -4(%rbp)
	jae	.LBB196_176
# %bb.174:                              # %for.body632
                                        #   in Loop: Header=BB196_173 Depth=1
	movq	listX, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.175:                              # %for.inc635
                                        #   in Loop: Header=BB196_173 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB196_173
.LBB196_176:                            # %for.end637
	movl	listXsize+4, %eax
	movl	%eax, -4(%rbp)
.LBB196_177:                            # %for.cond638
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$33, -4(%rbp)
	jae	.LBB196_180
# %bb.178:                              # %for.body641
                                        #   in Loop: Header=BB196_177 Depth=1
	movq	listX+8, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.179:                              # %for.inc644
                                        #   in Loop: Header=BB196_177 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB196_177
.LBB196_180:                            # %for.end646.loopexit
	jmp	.LBB196_181
.LBB196_181:                            # %for.end646
	cmpl	$127548438, -76(%rbp)   # imm = 0x79A3C16
	jne	.LBB196_183
.LBB196_182:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB196_183:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB196_182
.Lfunc_end196:
	.size	init_lists.133, .Lfunc_end196-init_lists.133
	.cfi_endproc
                                        # -- End function
	.globl	init_lists.134          # -- Begin function init_lists.134
	.p2align	4, 0x90
	.type	init_lists.134,@function
init_lists.134:                         # @init_lists.134
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$1071761265, -76(%rbp)  # imm = 0x3FE1C771
	movl	%edi, -52(%rbp)
	movl	%esi, -20(%rbp)
	movl	$0, -44(%rbp)
	movl	$0, -48(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -72(%rbp)
	movl	$0, -8(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jne	.LBB197_14
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB197_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB197_13
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB197_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB197_11
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB197_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB197_10
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB197_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB197_10
# %bb.6:                                # %if.then10
                                        #   in Loop: Header=BB197_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jbe	.LBB197_8
# %bb.7:                                # %if.then15
                                        #   in Loop: Header=BB197_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	subl	-72(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
	jmp	.LBB197_9
.LBB197_8:                              # %if.else
                                        #   in Loop: Header=BB197_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
.LBB197_9:                              # %if.end
                                        #   in Loop: Header=BB197_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6364(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
.LBB197_10:                             # %if.end36
                                        #   in Loop: Header=BB197_2 Depth=1
	jmp	.LBB197_11
.LBB197_11:                             # %if.end37
                                        #   in Loop: Header=BB197_2 Depth=1
	jmp	.LBB197_12
.LBB197_12:                             # %for.inc
                                        #   in Loop: Header=BB197_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB197_2
.LBB197_13:                             # %for.end
	jmp	.LBB197_31
.LBB197_14:                             # %if.else38
	cmpl	$1, -20(%rbp)
	jne	.LBB197_16
# %bb.15:                               # %if.then40
	movl	$1, -44(%rbp)
	movl	$0, -48(%rbp)
	jmp	.LBB197_17
.LBB197_16:                             # %if.else41
	movl	$0, -44(%rbp)
	movl	$1, -48(%rbp)
.LBB197_17:                             # %if.end42
	movl	$0, -4(%rbp)
.LBB197_18:                             # %for.cond43
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB197_30
# %bb.19:                               # %for.body45
                                        #   in Loop: Header=BB197_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 4(%rax)
	je	.LBB197_28
# %bb.20:                               # %if.then49
                                        #   in Loop: Header=BB197_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jbe	.LBB197_22
# %bb.21:                               # %if.then55
                                        #   in Loop: Header=BB197_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	subl	-72(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
	jmp	.LBB197_23
.LBB197_22:                             # %if.else63
                                        #   in Loop: Header=BB197_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
.LBB197_23:                             # %if.end70
                                        #   in Loop: Header=BB197_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB197_25
# %bb.24:                               # %if.then75
                                        #   in Loop: Header=BB197_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6364(%rcx)
.LBB197_25:                             # %if.end83
                                        #   in Loop: Header=BB197_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB197_27
# %bb.26:                               # %if.then89
                                        #   in Loop: Header=BB197_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6364(%rcx)
.LBB197_27:                             # %if.end98
                                        #   in Loop: Header=BB197_18 Depth=1
	jmp	.LBB197_28
.LBB197_28:                             # %if.end99
                                        #   in Loop: Header=BB197_18 Depth=1
	jmp	.LBB197_29
.LBB197_29:                             # %for.inc100
                                        #   in Loop: Header=BB197_18 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB197_18
.LBB197_30:                             # %for.end102
	jmp	.LBB197_31
.LBB197_31:                             # %if.end103
	cmpl	$2, -52(%rbp)
	je	.LBB197_33
# %bb.32:                               # %lor.lhs.false
	cmpl	$4, -52(%rbp)
	jne	.LBB197_34
.LBB197_33:                             # %if.then106
	movl	$0, listXsize
	movl	$0, listXsize+4
	jmp	.LBB197_181
.LBB197_34:                             # %if.end107
	cmpl	$0, -52(%rbp)
	je	.LBB197_36
# %bb.35:                               # %lor.lhs.false109
	cmpl	$3, -52(%rbp)
	jne	.LBB197_75
.LBB197_36:                             # %if.then111
	cmpl	$0, -20(%rbp)
	jne	.LBB197_55
# %bb.37:                               # %if.then113
	movl	$0, -4(%rbp)
.LBB197_38:                             # %for.cond114
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB197_46
# %bb.39:                               # %for.body116
                                        #   in Loop: Header=BB197_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB197_44
# %bb.40:                               # %if.then121
                                        #   in Loop: Header=BB197_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB197_43
# %bb.41:                               # %land.lhs.true127
                                        #   in Loop: Header=BB197_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB197_43
# %bb.42:                               # %if.then133
                                        #   in Loop: Header=BB197_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB197_43:                             # %if.end140
                                        #   in Loop: Header=BB197_38 Depth=1
	jmp	.LBB197_44
.LBB197_44:                             # %if.end141
                                        #   in Loop: Header=BB197_38 Depth=1
	jmp	.LBB197_45
.LBB197_45:                             # %for.inc142
                                        #   in Loop: Header=BB197_38 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB197_38
.LBB197_46:                             # %for.end144
	movq	listX, %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_pic_num_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize
	movl	$0, -4(%rbp)
.LBB197_47:                             # %for.cond145
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB197_54
# %bb.48:                               # %for.body148
                                        #   in Loop: Header=BB197_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB197_52
# %bb.49:                               # %if.then154
                                        #   in Loop: Header=BB197_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB197_51
# %bb.50:                               # %if.then160
                                        #   in Loop: Header=BB197_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB197_51:                             # %if.end177
                                        #   in Loop: Header=BB197_47 Depth=1
	jmp	.LBB197_52
.LBB197_52:                             # %if.end178
                                        #   in Loop: Header=BB197_47 Depth=1
	jmp	.LBB197_53
.LBB197_53:                             # %for.inc179
                                        #   in Loop: Header=BB197_47 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB197_47
.LBB197_54:                             # %for.end181
	movq	listX, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize
	jmp	.LBB197_74
.LBB197_55:                             # %if.else186
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -32(%rbp)
	cmpq	-32(%rbp), %rcx
	jne	.LBB197_57
# %bb.56:                               # %if.then190
	movabsq	$.L.str.9, %rdi
	callq	no_mem_exit
.LBB197_57:                             # %if.end191
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -40(%rbp)
	cmpq	-40(%rbp), %rcx
	jne	.LBB197_59
# %bb.58:                               # %if.then196
	movabsq	$.L.str.10, %rdi
	callq	no_mem_exit
.LBB197_59:                             # %if.end197
	movl	$0, -4(%rbp)
.LBB197_60:                             # %for.cond198
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB197_65
# %bb.61:                               # %for.body201
                                        #   in Loop: Header=BB197_60 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 4(%rax)
	je	.LBB197_63
# %bb.62:                               # %if.then206
                                        #   in Loop: Header=BB197_60 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB197_63:                             # %if.end212
                                        #   in Loop: Header=BB197_60 Depth=1
	jmp	.LBB197_64
.LBB197_64:                             # %for.inc213
                                        #   in Loop: Header=BB197_60 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB197_60
.LBB197_65:                             # %for.end215
	movq	-32(%rbp), %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_frame_num_desc, %rcx
	callq	qsort
	movl	$0, listXsize
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movl	$0, -4(%rbp)
.LBB197_66:                             # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB197_73
# %bb.67:                               # %for.body220
                                        #   in Loop: Header=BB197_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-40(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB197_69
# %bb.68:                               # %if.then231
                                        #   in Loop: Header=BB197_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB197_69:                             # %if.end242
                                        #   in Loop: Header=BB197_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB197_71
# %bb.70:                               # %if.then248
                                        #   in Loop: Header=BB197_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB197_71:                             # %if.end259
                                        #   in Loop: Header=BB197_66 Depth=1
	jmp	.LBB197_72
.LBB197_72:                             # %for.inc260
                                        #   in Loop: Header=BB197_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB197_66
.LBB197_73:                             # %for.end262
	movq	-40(%rbp), %rdi
	movslq	-24(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_lt_pic_idx_asc, %rcx
	callq	qsort
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movq	-32(%rbp), %rdi
	callq	free
	movq	-40(%rbp), %rdi
	callq	free
.LBB197_74:                             # %if.end264
	movl	$0, listXsize+4
	jmp	.LBB197_155
.LBB197_75:                             # %if.else265
	cmpl	$0, -20(%rbp)
	jne	.LBB197_115
# %bb.76:                               # %if.then268
	movl	$0, -4(%rbp)
.LBB197_77:                             # %for.cond269
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB197_87
# %bb.78:                               # %for.body272
                                        #   in Loop: Header=BB197_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB197_85
# %bb.79:                               # %if.then278
                                        #   in Loop: Header=BB197_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB197_84
# %bb.80:                               # %land.lhs.true284
                                        #   in Loop: Header=BB197_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB197_84
# %bb.81:                               # %if.then290
                                        #   in Loop: Header=BB197_77 Depth=1
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB197_83
# %bb.82:                               # %if.then296
                                        #   in Loop: Header=BB197_77 Depth=1
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB197_83:                             # %if.end307
                                        #   in Loop: Header=BB197_77 Depth=1
	jmp	.LBB197_84
.LBB197_84:                             # %if.end308
                                        #   in Loop: Header=BB197_77 Depth=1
	jmp	.LBB197_85
.LBB197_85:                             # %if.end309
                                        #   in Loop: Header=BB197_77 Depth=1
	jmp	.LBB197_86
.LBB197_86:                             # %for.inc310
                                        #   in Loop: Header=BB197_77 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB197_77
.LBB197_87:                             # %for.end312
	movq	listX, %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_poc_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB197_88:                             # %for.cond314
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB197_98
# %bb.89:                               # %for.body317
                                        #   in Loop: Header=BB197_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB197_96
# %bb.90:                               # %if.then323
                                        #   in Loop: Header=BB197_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB197_95
# %bb.91:                               # %land.lhs.true329
                                        #   in Loop: Header=BB197_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB197_95
# %bb.92:                               # %if.then335
                                        #   in Loop: Header=BB197_88 Depth=1
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB197_94
# %bb.93:                               # %if.then343
                                        #   in Loop: Header=BB197_88 Depth=1
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB197_94:                             # %if.end354
                                        #   in Loop: Header=BB197_88 Depth=1
	jmp	.LBB197_95
.LBB197_95:                             # %if.end355
                                        #   in Loop: Header=BB197_88 Depth=1
	jmp	.LBB197_96
.LBB197_96:                             # %if.end356
                                        #   in Loop: Header=BB197_88 Depth=1
	jmp	.LBB197_97
.LBB197_97:                             # %for.inc357
                                        #   in Loop: Header=BB197_88 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB197_88
.LBB197_98:                             # %for.end359
	movq	listX, %rdi
	movslq	-16(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_poc_asc, %rcx
	callq	qsort
	movl	$0, -12(%rbp)
.LBB197_99:                             # %for.cond364
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB197_102
# %bb.100:                              # %for.body367
                                        #   in Loop: Header=BB197_99 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movl	-8(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.101:                              # %for.inc374
                                        #   in Loop: Header=BB197_99 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB197_99
.LBB197_102:                            # %for.end376
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB197_103:                            # %for.cond377
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB197_106
# %bb.104:                              # %for.body380
                                        #   in Loop: Header=BB197_103 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.105:                              # %for.inc386
                                        #   in Loop: Header=BB197_103 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB197_103
.LBB197_106:                            # %for.end388
	movl	-8(%rbp), %eax
	movl	%eax, listXsize+4
	movl	%eax, listXsize
	movl	$0, -4(%rbp)
.LBB197_107:                            # %for.cond389
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB197_114
# %bb.108:                              # %for.body392
                                        #   in Loop: Header=BB197_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB197_112
# %bb.109:                              # %if.then398
                                        #   in Loop: Header=BB197_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB197_111
# %bb.110:                              # %if.then404
                                        #   in Loop: Header=BB197_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX+8, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB197_111:                            # %if.end428
                                        #   in Loop: Header=BB197_107 Depth=1
	jmp	.LBB197_112
.LBB197_112:                            # %if.end429
                                        #   in Loop: Header=BB197_107 Depth=1
	jmp	.LBB197_113
.LBB197_113:                            # %for.inc430
                                        #   in Loop: Header=BB197_107 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB197_107
.LBB197_114:                            # %for.end432
	movq	listX, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movq	listX+8, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize+4
	movl	%eax, listXsize
	jmp	.LBB197_154
.LBB197_115:                            # %if.else441
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -32(%rbp)
	cmpq	-32(%rbp), %rcx
	jne	.LBB197_117
# %bb.116:                              # %if.then446
	movabsq	$.L.str.9, %rdi
	callq	no_mem_exit
.LBB197_117:                            # %if.end447
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -64(%rbp)
	cmpq	-64(%rbp), %rcx
	jne	.LBB197_119
# %bb.118:                              # %if.then452
	movabsq	$.L.str.11, %rdi
	callq	no_mem_exit
.LBB197_119:                            # %if.end453
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -40(%rbp)
	cmpq	-40(%rbp), %rcx
	jne	.LBB197_121
# %bb.120:                              # %if.then458
	movabsq	$.L.str.10, %rdi
	callq	no_mem_exit
.LBB197_121:                            # %if.end459
	movl	$0, listXsize
	movl	$1, listXsize+4
	movl	$0, -4(%rbp)
.LBB197_122:                            # %for.cond460
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB197_129
# %bb.123:                              # %for.body463
                                        #   in Loop: Header=BB197_122 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, (%rax)
	je	.LBB197_127
# %bb.124:                              # %if.then468
                                        #   in Loop: Header=BB197_122 Depth=1
	movq	img, %rax
	movl	72460(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jl	.LBB197_126
# %bb.125:                              # %if.then474
                                        #   in Loop: Header=BB197_122 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB197_126:                            # %if.end480
                                        #   in Loop: Header=BB197_122 Depth=1
	jmp	.LBB197_127
.LBB197_127:                            # %if.end481
                                        #   in Loop: Header=BB197_122 Depth=1
	jmp	.LBB197_128
.LBB197_128:                            # %for.inc482
                                        #   in Loop: Header=BB197_122 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB197_122
.LBB197_129:                            # %for.end484
	movq	-32(%rbp), %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_poc_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB197_130:                            # %for.cond486
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB197_137
# %bb.131:                              # %for.body489
                                        #   in Loop: Header=BB197_130 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, (%rax)
	je	.LBB197_135
# %bb.132:                              # %if.then494
                                        #   in Loop: Header=BB197_130 Depth=1
	movq	img, %rax
	movl	72460(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB197_134
# %bb.133:                              # %if.then501
                                        #   in Loop: Header=BB197_130 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB197_134:                            # %if.end507
                                        #   in Loop: Header=BB197_130 Depth=1
	jmp	.LBB197_135
.LBB197_135:                            # %if.end508
                                        #   in Loop: Header=BB197_130 Depth=1
	jmp	.LBB197_136
.LBB197_136:                            # %for.inc509
                                        #   in Loop: Header=BB197_130 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB197_130
.LBB197_137:                            # %for.end511
	movq	-32(%rbp), %rdi
	movslq	-16(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_poc_asc, %rcx
	callq	qsort
	movl	$0, -12(%rbp)
.LBB197_138:                            # %for.cond516
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB197_141
# %bb.139:                              # %for.body519
                                        #   in Loop: Header=BB197_138 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	-8(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.140:                              # %for.inc526
                                        #   in Loop: Header=BB197_138 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB197_138
.LBB197_141:                            # %for.end528
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB197_142:                            # %for.cond529
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB197_145
# %bb.143:                              # %for.body532
                                        #   in Loop: Header=BB197_142 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.144:                              # %for.inc538
                                        #   in Loop: Header=BB197_142 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB197_142
.LBB197_145:                            # %for.end540
	movl	$0, listXsize
	movl	$0, listXsize+4
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movabsq	$listXsize, %r8
	addq	$4, %r8
	movl	-20(%rbp), %edi
	movq	-64(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX+8, %rcx
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movl	$0, -4(%rbp)
.LBB197_146:                            # %for.cond541
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB197_153
# %bb.147:                              # %for.body544
                                        #   in Loop: Header=BB197_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-40(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB197_149
# %bb.148:                              # %if.then555
                                        #   in Loop: Header=BB197_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB197_149:                            # %if.end566
                                        #   in Loop: Header=BB197_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB197_151
# %bb.150:                              # %if.then572
                                        #   in Loop: Header=BB197_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB197_151:                            # %if.end583
                                        #   in Loop: Header=BB197_146 Depth=1
	jmp	.LBB197_152
.LBB197_152:                            # %for.inc584
                                        #   in Loop: Header=BB197_146 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB197_146
.LBB197_153:                            # %for.end586
	movq	-40(%rbp), %rdi
	movslq	-24(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_lt_pic_idx_asc, %rcx
	callq	qsort
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movabsq	$listXsize, %r8
	addq	$4, %r8
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX+8, %rcx
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movq	-32(%rbp), %rdi
	callq	free
	movq	-64(%rbp), %rdi
	callq	free
	movq	-40(%rbp), %rdi
	callq	free
.LBB197_154:                            # %if.end588
	jmp	.LBB197_155
.LBB197_155:                            # %if.end589
	movl	listXsize, %eax
	cmpl	listXsize+4, %eax
	jne	.LBB197_166
# %bb.156:                              # %land.lhs.true592
	cmpl	$1, listXsize
	jle	.LBB197_166
# %bb.157:                              # %if.then595
	movl	$0, -68(%rbp)
	movl	$0, -12(%rbp)
.LBB197_158:                            # %for.cond596
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB197_163
# %bb.159:                              # %for.body599
                                        #   in Loop: Header=BB197_158 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movslq	-12(%rbp), %rdx
	cmpq	(%rcx,%rdx,8), %rax
	je	.LBB197_161
# %bb.160:                              # %if.then606
                                        #   in Loop: Header=BB197_158 Depth=1
	movl	$1, -68(%rbp)
.LBB197_161:                            # %if.end607
                                        #   in Loop: Header=BB197_158 Depth=1
	jmp	.LBB197_162
.LBB197_162:                            # %for.inc608
                                        #   in Loop: Header=BB197_158 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB197_158
.LBB197_163:                            # %for.end610
	cmpl	$0, -68(%rbp)
	jne	.LBB197_165
# %bb.164:                              # %if.then612
	movq	listX+8, %rax
	movq	(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	listX+8, %rax
	movq	8(%rax), %rax
	movq	listX+8, %rcx
	movq	%rax, (%rcx)
	movq	-88(%rbp), %rax
	movq	listX+8, %rcx
	movq	%rax, 8(%rcx)
.LBB197_165:                            # %if.end617
	jmp	.LBB197_166
.LBB197_166:                            # %if.end618
	movl	listXsize, %eax
	movq	img, %rcx
	cmpl	72000(%rcx), %eax
	jge	.LBB197_168
# %bb.167:                              # %cond.true
	movl	listXsize, %eax
	jmp	.LBB197_169
.LBB197_168:                            # %cond.false
	movq	img, %rax
	movl	72000(%rax), %eax
.LBB197_169:                            # %cond.end
	movl	%eax, listXsize
	movl	listXsize+4, %eax
	movq	img, %rcx
	cmpl	72004(%rcx), %eax
	jge	.LBB197_171
# %bb.170:                              # %cond.true624
	movl	listXsize+4, %eax
	jmp	.LBB197_172
.LBB197_171:                            # %cond.false625
	movq	img, %rax
	movl	72004(%rax), %eax
.LBB197_172:                            # %cond.end627
	movl	%eax, listXsize+4
	movl	listXsize, %eax
	movl	%eax, -4(%rbp)
.LBB197_173:                            # %for.cond629
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$33, -4(%rbp)
	jae	.LBB197_176
# %bb.174:                              # %for.body632
                                        #   in Loop: Header=BB197_173 Depth=1
	movq	listX, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.175:                              # %for.inc635
                                        #   in Loop: Header=BB197_173 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB197_173
.LBB197_176:                            # %for.end637
	movl	listXsize+4, %eax
	movl	%eax, -4(%rbp)
.LBB197_177:                            # %for.cond638
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$33, -4(%rbp)
	jae	.LBB197_180
# %bb.178:                              # %for.body641
                                        #   in Loop: Header=BB197_177 Depth=1
	movq	listX+8, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.179:                              # %for.inc644
                                        #   in Loop: Header=BB197_177 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB197_177
.LBB197_180:                            # %for.end646.loopexit
	jmp	.LBB197_181
.LBB197_181:                            # %for.end646
	cmpl	$1071761265, -76(%rbp)  # imm = 0x3FE1C771
	jne	.LBB197_183
.LBB197_182:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB197_183:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB197_182
.Lfunc_end197:
	.size	init_lists.134, .Lfunc_end197-init_lists.134
	.cfi_endproc
                                        # -- End function
	.globl	store_picture_in_dpb.135 # -- Begin function store_picture_in_dpb.135
	.p2align	4, 0x90
	.type	store_picture_in_dpb.135,@function
store_picture_in_dpb.135:               # @store_picture_in_dpb.135
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$448422789, -20(%rbp)   # imm = 0x1ABA6385
	movq	%rdi, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 6380(%rcx)
	movq	img, %rax
	movl	$0, 72644(%rax)
	movq	img, %rax
	cmpl	$2, 28(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 72640(%rcx)
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	je	.LBB198_2
# %bb.1:                                # %if.then
	movq	-8(%rbp), %rdi
	callq	idr_memory_management
	jmp	.LBB198_6
.LBB198_2:                              # %if.else
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB198_5
# %bb.3:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72500(%rax)
	je	.LBB198_5
# %bb.4:                                # %if.then6
	movq	-8(%rbp), %rdi
	callq	adaptive_memory_management
.LBB198_5:                              # %if.end
	jmp	.LBB198_6
.LBB198_6:                              # %if.end7
	movq	-8(%rbp), %rax
	cmpl	$1, (%rax)
	je	.LBB198_8
# %bb.7:                                # %lor.lhs.false
	movq	-8(%rbp), %rax
	cmpl	$2, (%rax)
	jne	.LBB198_23
.LBB198_8:                              # %if.then14
	cmpq	$0, dpb+56
	je	.LBB198_22
# %bb.9:                                # %if.then16
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	cmpl	6364(%rcx), %eax
	jne	.LBB198_21
# %bb.10:                               # %if.then19
	movq	-8(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB198_12
# %bb.11:                               # %land.lhs.true23
	movq	dpb+56, %rax
	cmpl	$2, (%rax)
	je	.LBB198_14
.LBB198_12:                             # %lor.lhs.false26
	movq	-8(%rbp), %rax
	cmpl	$2, (%rax)
	jne	.LBB198_20
# %bb.13:                               # %land.lhs.true30
	movq	dpb+56, %rax
	cmpl	$1, (%rax)
	jne	.LBB198_20
.LBB198_14:                             # %if.then34
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB198_16
# %bb.15:                               # %land.lhs.true37
	movq	dpb+56, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB198_18
.LBB198_16:                             # %lor.lhs.false40
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	jne	.LBB198_19
# %bb.17:                               # %land.lhs.true43
	movq	dpb+56, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB198_19
.LBB198_18:                             # %if.then47
	movq	dpb+56, %rdi
	movq	-8(%rbp), %rsi
	callq	insert_picture_in_dpb
	callq	update_ref_list
	callq	update_ltref_list
	callq	dump_dpb
	movq	$0, dpb+56
	jmp	.LBB198_50
.LBB198_19:                             # %if.end48
	jmp	.LBB198_20
.LBB198_20:                             # %if.end49
	jmp	.LBB198_21
.LBB198_21:                             # %if.end50
	jmp	.LBB198_22
.LBB198_22:                             # %if.end51
	jmp	.LBB198_23
.LBB198_23:                             # %if.end52
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	jne	.LBB198_27
# %bb.24:                               # %land.lhs.true56
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB198_27
# %bb.25:                               # %land.lhs.true59
	movq	img, %rax
	cmpl	$0, 72500(%rax)
	jne	.LBB198_27
# %bb.26:                               # %if.then62
	movq	-8(%rbp), %rdi
	callq	sliding_window_memory_management
.LBB198_27:                             # %if.end63
	movl	dpb+28, %eax
	cmpl	dpb+24, %eax
	jne	.LBB198_29
# %bb.28:                               # %if.then66
	callq	remove_unused_frame_from_dpb
.LBB198_29:                             # %if.end67
	jmp	.LBB198_30
.LBB198_30:                             # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	dpb+28, %eax
	cmpl	dpb+24, %eax
	jne	.LBB198_37
# %bb.31:                               # %while.body
                                        #   in Loop: Header=BB198_30 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	jne	.LBB198_36
# %bb.32:                               # %if.then72
                                        #   in Loop: Header=BB198_30 Depth=1
	leaq	-24(%rbp), %rdi
	leaq	-16(%rbp), %rsi
	callq	get_smallest_poc
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	cmpl	-16(%rbp), %eax
	je	.LBB198_34
# %bb.33:                               # %lor.lhs.false75
                                        #   in Loop: Header=BB198_30 Depth=1
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB198_35
.LBB198_34:                             # %if.then79
	movq	-8(%rbp), %rdi
	movl	p_dec, %esi
	callq	direct_output
	jmp	.LBB198_50
.LBB198_35:                             # %if.end80
                                        #   in Loop: Header=BB198_30 Depth=1
	jmp	.LBB198_36
.LBB198_36:                             # %if.end81
                                        #   in Loop: Header=BB198_30 Depth=1
	callq	output_one_frame_from_dpb
	jmp	.LBB198_30
.LBB198_37:                             # %while.end
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB198_46
# %bb.38:                               # %land.lhs.true84
	movq	-8(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB198_46
# %bb.39:                               # %if.then86
	movl	$0, -12(%rbp)
.LBB198_40:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB198_45
# %bb.41:                               # %for.body
                                        #   in Loop: Header=BB198_40 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	cmpl	6360(%rcx), %eax
	jne	.LBB198_43
# %bb.42:                               # %if.then93
                                        #   in Loop: Header=BB198_40 Depth=1
	movabsq	$.L.str.13, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB198_43:                             # %if.end94
                                        #   in Loop: Header=BB198_40 Depth=1
	jmp	.LBB198_44
.LBB198_44:                             # %for.inc
                                        #   in Loop: Header=BB198_40 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB198_40
.LBB198_45:                             # %for.end
	jmp	.LBB198_46
.LBB198_46:                             # %if.end95
	movq	dpb, %rax
	movl	dpb+28, %ecx
	movq	(%rax,%rcx,8), %rdi
	movq	-8(%rbp), %rsi
	callq	insert_picture_in_dpb
	movq	-8(%rbp), %rax
	cmpl	$0, (%rax)
	je	.LBB198_48
# %bb.47:                               # %if.then101
	movq	dpb, %rax
	movl	dpb+28, %ecx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, dpb+56
	jmp	.LBB198_49
.LBB198_48:                             # %if.else104
	movq	$0, dpb+56
.LBB198_49:                             # %if.end105
	movl	dpb+28, %eax
	addl	$1, %eax
	movl	%eax, dpb+28
	callq	update_ref_list
	callq	update_ltref_list
	callq	dump_dpb
.LBB198_50:                             # %return
	cmpl	$448422789, -20(%rbp)   # imm = 0x1ABA6385
	jne	.LBB198_52
.LBB198_51:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB198_52:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB198_51
.Lfunc_end198:
	.size	store_picture_in_dpb.135, .Lfunc_end198-store_picture_in_dpb.135
	.cfi_endproc
                                        # -- End function
	.globl	replace_top_pic_with_frame.136 # -- Begin function replace_top_pic_with_frame.136
	.p2align	4, 0x90
	.type	replace_top_pic_with_frame.136,@function
replace_top_pic_with_frame.136:         # @replace_top_pic_with_frame.136
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$683448149, -32(%rbp)   # imm = 0x28BC9755
	movq	%rdi, -24(%rbp)
	movq	$0, -16(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 6380(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB199_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rdi
	callq	UnifiedOneForthPix
.LBB199_2:                              # %if.end
	movl	$0, -28(%rbp)
	movl	$0, -4(%rbp)
.LBB199_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB199_9
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB199_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jne	.LBB199_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB199_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, (%rax)
	jne	.LBB199_7
# %bb.6:                                # %if.then11
	movl	$1, -28(%rbp)
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB199_10
.LBB199_7:                              # %if.end14
                                        #   in Loop: Header=BB199_3 Depth=1
	jmp	.LBB199_8
.LBB199_8:                              # %for.inc
                                        #   in Loop: Header=BB199_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB199_3
.LBB199_9:                              # %for.end.loopexit
	jmp	.LBB199_10
.LBB199_10:                             # %for.end
	cmpl	$0, -28(%rbp)
	jne	.LBB199_12
# %bb.11:                               # %if.then16
	movabsq	$.L.str.14, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB199_12:                             # %if.end17
	movq	-16(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-16(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movq	-16(%rbp), %rax
	movl	$3, (%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB199_16
# %bb.13:                               # %if.then22
	movq	-16(%rbp), %rax
	movl	$3, 4(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB199_15
# %bb.14:                               # %if.then24
	movq	-16(%rbp), %rax
	movl	$3, 8(%rax)
.LBB199_15:                             # %if.end26
	jmp	.LBB199_16
.LBB199_16:                             # %if.end27
	movq	-16(%rbp), %rdi
	callq	dpb_split_field
	callq	update_ref_list
	callq	update_ltref_list
	cmpl	$683448149, -32(%rbp)   # imm = 0x28BC9755
	jne	.LBB199_18
.LBB199_17:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB199_18:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB199_17
.Lfunc_end199:
	.size	replace_top_pic_with_frame.136, .Lfunc_end199-replace_top_pic_with_frame.136
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_long_term_pic.137
	.type	get_long_term_pic.137,@function
get_long_term_pic.137:                  # @get_long_term_pic.137
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1604989724, -28(%rbp)  # imm = 0x5FAA331C
	movl	%edi, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB200_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB200_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB200_1 Depth=1
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB200_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB200_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB200_8
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB200_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB200_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB200_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB200_7
# %bb.6:                                # %if.then10
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB200_23
.LBB200_7:                              # %if.end
                                        #   in Loop: Header=BB200_1 Depth=1
	jmp	.LBB200_8
.LBB200_8:                              # %if.end14
                                        #   in Loop: Header=BB200_1 Depth=1
	jmp	.LBB200_20
.LBB200_9:                              # %if.else
                                        #   in Loop: Header=BB200_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB200_14
# %bb.10:                               # %if.then19
                                        #   in Loop: Header=BB200_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB200_13
# %bb.11:                               # %land.lhs.true24
                                        #   in Loop: Header=BB200_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB200_13
# %bb.12:                               # %if.then30
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB200_23
.LBB200_13:                             # %if.end34
                                        #   in Loop: Header=BB200_1 Depth=1
	jmp	.LBB200_14
.LBB200_14:                             # %if.end35
                                        #   in Loop: Header=BB200_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB200_19
# %bb.15:                               # %if.then41
                                        #   in Loop: Header=BB200_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB200_18
# %bb.16:                               # %land.lhs.true46
                                        #   in Loop: Header=BB200_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB200_18
# %bb.17:                               # %if.then52
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB200_23
.LBB200_18:                             # %if.end56
                                        #   in Loop: Header=BB200_1 Depth=1
	jmp	.LBB200_19
.LBB200_19:                             # %if.end57
                                        #   in Loop: Header=BB200_1 Depth=1
	jmp	.LBB200_20
.LBB200_20:                             # %if.end58
                                        #   in Loop: Header=BB200_1 Depth=1
	jmp	.LBB200_21
.LBB200_21:                             # %for.inc
                                        #   in Loop: Header=BB200_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB200_1
.LBB200_22:                             # %for.end
	movq	$0, -24(%rbp)
.LBB200_23:                             # %return
	movq	-24(%rbp), %rbx
	cmpl	$1604989724, -28(%rbp)  # imm = 0x5FAA331C
	jne	.LBB200_25
.LBB200_24:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB200_25:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB200_24
.Lfunc_end200:
	.size	get_long_term_pic.137, .Lfunc_end200-get_long_term_pic.137
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mark_pic_long_term.138
	.type	mark_pic_long_term.138,@function
mark_pic_long_term.138:                 # @mark_pic_long_term.138
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$83617119, -20(%rbp)    # imm = 0x4FBE55F
	movq	%rdi, -32(%rbp)
	movl	%esi, -8(%rbp)
	movl	%edx, -12(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB201_11
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB201_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB201_10
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB201_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB201_8
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB201_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB201_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB201_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB201_7
# %bb.6:                                # %if.then10
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	$3, 8(%rax)
	jmp	.LBB201_39
.LBB201_7:                              # %if.end
                                        #   in Loop: Header=BB201_2 Depth=1
	jmp	.LBB201_8
.LBB201_8:                              # %if.end50
                                        #   in Loop: Header=BB201_2 Depth=1
	jmp	.LBB201_9
.LBB201_9:                              # %for.inc
                                        #   in Loop: Header=BB201_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB201_2
.LBB201_10:                             # %for.end
	movabsq	$.L.str.25, %rdi
	movb	$0, %al
	callq	printf
	jmp	.LBB201_39
.LBB201_11:                             # %if.else
	movq	-32(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB201_13
# %bb.12:                               # %if.then53
	movl	$1, -16(%rbp)
	movl	$0, -24(%rbp)
	jmp	.LBB201_14
.LBB201_13:                             # %if.else54
	movl	$0, -16(%rbp)
	movl	$1, -24(%rbp)
.LBB201_14:                             # %if.end55
	movl	$0, -4(%rbp)
.LBB201_15:                             # %for.cond56
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB201_38
# %bb.16:                               # %for.body58
                                        #   in Loop: Header=BB201_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB201_26
# %bb.17:                               # %if.then63
                                        #   in Loop: Header=BB201_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB201_25
# %bb.18:                               # %land.lhs.true69
                                        #   in Loop: Header=BB201_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB201_25
# %bb.19:                               # %if.then75
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	je	.LBB201_22
# %bb.20:                               # %land.lhs.true80
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-8(%rbp), %eax
	je	.LBB201_22
# %bb.21:                               # %if.then85
	movabsq	$.L.str.26, %rdi
	movb	$0, %al
	callq	printf
.LBB201_22:                             # %if.end87
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	shll	$1, %eax
	addl	-16(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	orl	$1, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB201_24
# %bb.23:                               # %if.then110
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB201_24:                             # %if.end123
	jmp	.LBB201_39
.LBB201_25:                             # %if.end124
                                        #   in Loop: Header=BB201_15 Depth=1
	jmp	.LBB201_26
.LBB201_26:                             # %if.end125
                                        #   in Loop: Header=BB201_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB201_36
# %bb.27:                               # %if.then131
                                        #   in Loop: Header=BB201_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB201_35
# %bb.28:                               # %land.lhs.true137
                                        #   in Loop: Header=BB201_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB201_35
# %bb.29:                               # %if.then143
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	je	.LBB201_32
# %bb.30:                               # %land.lhs.true148
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-8(%rbp), %eax
	je	.LBB201_32
# %bb.31:                               # %if.then153
	movabsq	$.L.str.26, %rdi
	movb	$0, %al
	callq	printf
.LBB201_32:                             # %if.end155
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	shll	$1, %eax
	addl	-16(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	orl	$2, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB201_34
# %bb.33:                               # %if.then181
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB201_34:                             # %if.end194
	jmp	.LBB201_39
.LBB201_35:                             # %if.end195
                                        #   in Loop: Header=BB201_15 Depth=1
	jmp	.LBB201_36
.LBB201_36:                             # %if.end196
                                        #   in Loop: Header=BB201_15 Depth=1
	jmp	.LBB201_37
.LBB201_37:                             # %for.inc197
                                        #   in Loop: Header=BB201_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB201_15
.LBB201_38:                             # %for.end199
	movabsq	$.L.str.27, %rdi
	movb	$0, %al
	callq	printf
.LBB201_39:                             # %if.end201
	cmpl	$83617119, -20(%rbp)    # imm = 0x4FBE55F
	jne	.LBB201_41
.LBB201_40:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB201_41:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB201_40
.Lfunc_end201:
	.size	mark_pic_long_term.138, .Lfunc_end201-mark_pic_long_term.138
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function sliding_window_memory_management.139
	.type	sliding_window_memory_management.139,@function
sliding_window_memory_management.139:   # @sliding_window_memory_management.139
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$578067799, -8(%rbp)    # imm = 0x22749D57
	movq	%rdi, -16(%rbp)
	movl	dpb+32, %eax
	movq	active_sps, %rcx
	movl	1132(%rcx), %ecx
	subl	dpb+36, %ecx
	cmpl	%ecx, %eax
	jne	.LBB202_10
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB202_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB202_8
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB202_2 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 4(%rax)
	je	.LBB202_6
# %bb.4:                                # %land.lhs.true
                                        #   in Loop: Header=BB202_2 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB202_6
# %bb.5:                                # %if.then5
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_reference
	callq	update_ref_list
	jmp	.LBB202_9
.LBB202_6:                              # %if.end
                                        #   in Loop: Header=BB202_2 Depth=1
	jmp	.LBB202_7
.LBB202_7:                              # %for.inc
                                        #   in Loop: Header=BB202_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB202_2
.LBB202_8:                              # %for.end.loopexit
	jmp	.LBB202_9
.LBB202_9:                              # %for.end
	jmp	.LBB202_10
.LBB202_10:                             # %if.end8
	movq	-16(%rbp), %rax
	movl	$0, 6376(%rax)
	cmpl	$578067799, -8(%rbp)    # imm = 0x22749D57
	jne	.LBB202_12
.LBB202_11:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB202_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB202_11
.Lfunc_end202:
	.size	sliding_window_memory_management.139, .Lfunc_end202-sliding_window_memory_management.139
	.cfi_endproc
                                        # -- End function
	.globl	init_lists.140          # -- Begin function init_lists.140
	.p2align	4, 0x90
	.type	init_lists.140,@function
init_lists.140:                         # @init_lists.140
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$2110854060, -76(%rbp)  # imm = 0x7DD113AC
	movl	%edi, -52(%rbp)
	movl	%esi, -20(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -44(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -72(%rbp)
	movl	$0, -8(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jne	.LBB203_14
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB203_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB203_13
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB203_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB203_11
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB203_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB203_10
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB203_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB203_10
# %bb.6:                                # %if.then10
                                        #   in Loop: Header=BB203_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jbe	.LBB203_8
# %bb.7:                                # %if.then15
                                        #   in Loop: Header=BB203_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	subl	-72(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
	jmp	.LBB203_9
.LBB203_8:                              # %if.else
                                        #   in Loop: Header=BB203_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
.LBB203_9:                              # %if.end
                                        #   in Loop: Header=BB203_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6364(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
.LBB203_10:                             # %if.end36
                                        #   in Loop: Header=BB203_2 Depth=1
	jmp	.LBB203_11
.LBB203_11:                             # %if.end37
                                        #   in Loop: Header=BB203_2 Depth=1
	jmp	.LBB203_12
.LBB203_12:                             # %for.inc
                                        #   in Loop: Header=BB203_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB203_2
.LBB203_13:                             # %for.end
	jmp	.LBB203_31
.LBB203_14:                             # %if.else38
	cmpl	$1, -20(%rbp)
	jne	.LBB203_16
# %bb.15:                               # %if.then40
	movl	$1, -48(%rbp)
	movl	$0, -44(%rbp)
	jmp	.LBB203_17
.LBB203_16:                             # %if.else41
	movl	$0, -48(%rbp)
	movl	$1, -44(%rbp)
.LBB203_17:                             # %if.end42
	movl	$0, -4(%rbp)
.LBB203_18:                             # %for.cond43
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB203_30
# %bb.19:                               # %for.body45
                                        #   in Loop: Header=BB203_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 4(%rax)
	je	.LBB203_28
# %bb.20:                               # %if.then49
                                        #   in Loop: Header=BB203_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jbe	.LBB203_22
# %bb.21:                               # %if.then55
                                        #   in Loop: Header=BB203_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	subl	-72(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
	jmp	.LBB203_23
.LBB203_22:                             # %if.else63
                                        #   in Loop: Header=BB203_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
.LBB203_23:                             # %if.end70
                                        #   in Loop: Header=BB203_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB203_25
# %bb.24:                               # %if.then75
                                        #   in Loop: Header=BB203_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6364(%rcx)
.LBB203_25:                             # %if.end83
                                        #   in Loop: Header=BB203_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB203_27
# %bb.26:                               # %if.then89
                                        #   in Loop: Header=BB203_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6364(%rcx)
.LBB203_27:                             # %if.end98
                                        #   in Loop: Header=BB203_18 Depth=1
	jmp	.LBB203_28
.LBB203_28:                             # %if.end99
                                        #   in Loop: Header=BB203_18 Depth=1
	jmp	.LBB203_29
.LBB203_29:                             # %for.inc100
                                        #   in Loop: Header=BB203_18 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB203_18
.LBB203_30:                             # %for.end102
	jmp	.LBB203_31
.LBB203_31:                             # %if.end103
	cmpl	$2, -52(%rbp)
	je	.LBB203_33
# %bb.32:                               # %lor.lhs.false
	cmpl	$4, -52(%rbp)
	jne	.LBB203_34
.LBB203_33:                             # %if.then106
	movl	$0, listXsize
	movl	$0, listXsize+4
	jmp	.LBB203_181
.LBB203_34:                             # %if.end107
	cmpl	$0, -52(%rbp)
	je	.LBB203_36
# %bb.35:                               # %lor.lhs.false109
	cmpl	$3, -52(%rbp)
	jne	.LBB203_75
.LBB203_36:                             # %if.then111
	cmpl	$0, -20(%rbp)
	jne	.LBB203_55
# %bb.37:                               # %if.then113
	movl	$0, -4(%rbp)
.LBB203_38:                             # %for.cond114
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB203_46
# %bb.39:                               # %for.body116
                                        #   in Loop: Header=BB203_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB203_44
# %bb.40:                               # %if.then121
                                        #   in Loop: Header=BB203_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB203_43
# %bb.41:                               # %land.lhs.true127
                                        #   in Loop: Header=BB203_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB203_43
# %bb.42:                               # %if.then133
                                        #   in Loop: Header=BB203_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB203_43:                             # %if.end140
                                        #   in Loop: Header=BB203_38 Depth=1
	jmp	.LBB203_44
.LBB203_44:                             # %if.end141
                                        #   in Loop: Header=BB203_38 Depth=1
	jmp	.LBB203_45
.LBB203_45:                             # %for.inc142
                                        #   in Loop: Header=BB203_38 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB203_38
.LBB203_46:                             # %for.end144
	movq	listX, %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_pic_num_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize
	movl	$0, -4(%rbp)
.LBB203_47:                             # %for.cond145
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB203_54
# %bb.48:                               # %for.body148
                                        #   in Loop: Header=BB203_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB203_52
# %bb.49:                               # %if.then154
                                        #   in Loop: Header=BB203_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB203_51
# %bb.50:                               # %if.then160
                                        #   in Loop: Header=BB203_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB203_51:                             # %if.end177
                                        #   in Loop: Header=BB203_47 Depth=1
	jmp	.LBB203_52
.LBB203_52:                             # %if.end178
                                        #   in Loop: Header=BB203_47 Depth=1
	jmp	.LBB203_53
.LBB203_53:                             # %for.inc179
                                        #   in Loop: Header=BB203_47 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB203_47
.LBB203_54:                             # %for.end181
	movq	listX, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize
	jmp	.LBB203_74
.LBB203_55:                             # %if.else186
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -32(%rbp)
	cmpq	-32(%rbp), %rcx
	jne	.LBB203_57
# %bb.56:                               # %if.then190
	movabsq	$.L.str.9, %rdi
	callq	no_mem_exit
.LBB203_57:                             # %if.end191
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -40(%rbp)
	cmpq	-40(%rbp), %rcx
	jne	.LBB203_59
# %bb.58:                               # %if.then196
	movabsq	$.L.str.10, %rdi
	callq	no_mem_exit
.LBB203_59:                             # %if.end197
	movl	$0, -4(%rbp)
.LBB203_60:                             # %for.cond198
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB203_65
# %bb.61:                               # %for.body201
                                        #   in Loop: Header=BB203_60 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 4(%rax)
	je	.LBB203_63
# %bb.62:                               # %if.then206
                                        #   in Loop: Header=BB203_60 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB203_63:                             # %if.end212
                                        #   in Loop: Header=BB203_60 Depth=1
	jmp	.LBB203_64
.LBB203_64:                             # %for.inc213
                                        #   in Loop: Header=BB203_60 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB203_60
.LBB203_65:                             # %for.end215
	movq	-32(%rbp), %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_frame_num_desc, %rcx
	callq	qsort
	movl	$0, listXsize
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movl	$0, -4(%rbp)
.LBB203_66:                             # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB203_73
# %bb.67:                               # %for.body220
                                        #   in Loop: Header=BB203_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-40(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB203_69
# %bb.68:                               # %if.then231
                                        #   in Loop: Header=BB203_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB203_69:                             # %if.end242
                                        #   in Loop: Header=BB203_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB203_71
# %bb.70:                               # %if.then248
                                        #   in Loop: Header=BB203_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB203_71:                             # %if.end259
                                        #   in Loop: Header=BB203_66 Depth=1
	jmp	.LBB203_72
.LBB203_72:                             # %for.inc260
                                        #   in Loop: Header=BB203_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB203_66
.LBB203_73:                             # %for.end262
	movq	-40(%rbp), %rdi
	movslq	-24(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_lt_pic_idx_asc, %rcx
	callq	qsort
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movq	-32(%rbp), %rdi
	callq	free
	movq	-40(%rbp), %rdi
	callq	free
.LBB203_74:                             # %if.end264
	movl	$0, listXsize+4
	jmp	.LBB203_155
.LBB203_75:                             # %if.else265
	cmpl	$0, -20(%rbp)
	jne	.LBB203_115
# %bb.76:                               # %if.then268
	movl	$0, -4(%rbp)
.LBB203_77:                             # %for.cond269
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB203_87
# %bb.78:                               # %for.body272
                                        #   in Loop: Header=BB203_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB203_85
# %bb.79:                               # %if.then278
                                        #   in Loop: Header=BB203_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB203_84
# %bb.80:                               # %land.lhs.true284
                                        #   in Loop: Header=BB203_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB203_84
# %bb.81:                               # %if.then290
                                        #   in Loop: Header=BB203_77 Depth=1
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB203_83
# %bb.82:                               # %if.then296
                                        #   in Loop: Header=BB203_77 Depth=1
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB203_83:                             # %if.end307
                                        #   in Loop: Header=BB203_77 Depth=1
	jmp	.LBB203_84
.LBB203_84:                             # %if.end308
                                        #   in Loop: Header=BB203_77 Depth=1
	jmp	.LBB203_85
.LBB203_85:                             # %if.end309
                                        #   in Loop: Header=BB203_77 Depth=1
	jmp	.LBB203_86
.LBB203_86:                             # %for.inc310
                                        #   in Loop: Header=BB203_77 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB203_77
.LBB203_87:                             # %for.end312
	movq	listX, %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_poc_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB203_88:                             # %for.cond314
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB203_98
# %bb.89:                               # %for.body317
                                        #   in Loop: Header=BB203_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB203_96
# %bb.90:                               # %if.then323
                                        #   in Loop: Header=BB203_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB203_95
# %bb.91:                               # %land.lhs.true329
                                        #   in Loop: Header=BB203_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB203_95
# %bb.92:                               # %if.then335
                                        #   in Loop: Header=BB203_88 Depth=1
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB203_94
# %bb.93:                               # %if.then343
                                        #   in Loop: Header=BB203_88 Depth=1
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB203_94:                             # %if.end354
                                        #   in Loop: Header=BB203_88 Depth=1
	jmp	.LBB203_95
.LBB203_95:                             # %if.end355
                                        #   in Loop: Header=BB203_88 Depth=1
	jmp	.LBB203_96
.LBB203_96:                             # %if.end356
                                        #   in Loop: Header=BB203_88 Depth=1
	jmp	.LBB203_97
.LBB203_97:                             # %for.inc357
                                        #   in Loop: Header=BB203_88 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB203_88
.LBB203_98:                             # %for.end359
	movq	listX, %rdi
	movslq	-16(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_poc_asc, %rcx
	callq	qsort
	movl	$0, -12(%rbp)
.LBB203_99:                             # %for.cond364
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB203_102
# %bb.100:                              # %for.body367
                                        #   in Loop: Header=BB203_99 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movl	-8(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.101:                              # %for.inc374
                                        #   in Loop: Header=BB203_99 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB203_99
.LBB203_102:                            # %for.end376
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB203_103:                            # %for.cond377
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB203_106
# %bb.104:                              # %for.body380
                                        #   in Loop: Header=BB203_103 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.105:                              # %for.inc386
                                        #   in Loop: Header=BB203_103 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB203_103
.LBB203_106:                            # %for.end388
	movl	-8(%rbp), %eax
	movl	%eax, listXsize+4
	movl	%eax, listXsize
	movl	$0, -4(%rbp)
.LBB203_107:                            # %for.cond389
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB203_114
# %bb.108:                              # %for.body392
                                        #   in Loop: Header=BB203_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB203_112
# %bb.109:                              # %if.then398
                                        #   in Loop: Header=BB203_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB203_111
# %bb.110:                              # %if.then404
                                        #   in Loop: Header=BB203_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX+8, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB203_111:                            # %if.end428
                                        #   in Loop: Header=BB203_107 Depth=1
	jmp	.LBB203_112
.LBB203_112:                            # %if.end429
                                        #   in Loop: Header=BB203_107 Depth=1
	jmp	.LBB203_113
.LBB203_113:                            # %for.inc430
                                        #   in Loop: Header=BB203_107 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB203_107
.LBB203_114:                            # %for.end432
	movq	listX, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movq	listX+8, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize+4
	movl	%eax, listXsize
	jmp	.LBB203_154
.LBB203_115:                            # %if.else441
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -32(%rbp)
	cmpq	-32(%rbp), %rcx
	jne	.LBB203_117
# %bb.116:                              # %if.then446
	movabsq	$.L.str.9, %rdi
	callq	no_mem_exit
.LBB203_117:                            # %if.end447
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -64(%rbp)
	cmpq	-64(%rbp), %rcx
	jne	.LBB203_119
# %bb.118:                              # %if.then452
	movabsq	$.L.str.11, %rdi
	callq	no_mem_exit
.LBB203_119:                            # %if.end453
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -40(%rbp)
	cmpq	-40(%rbp), %rcx
	jne	.LBB203_121
# %bb.120:                              # %if.then458
	movabsq	$.L.str.10, %rdi
	callq	no_mem_exit
.LBB203_121:                            # %if.end459
	movl	$0, listXsize
	movl	$1, listXsize+4
	movl	$0, -4(%rbp)
.LBB203_122:                            # %for.cond460
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB203_129
# %bb.123:                              # %for.body463
                                        #   in Loop: Header=BB203_122 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, (%rax)
	je	.LBB203_127
# %bb.124:                              # %if.then468
                                        #   in Loop: Header=BB203_122 Depth=1
	movq	img, %rax
	movl	72460(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jl	.LBB203_126
# %bb.125:                              # %if.then474
                                        #   in Loop: Header=BB203_122 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB203_126:                            # %if.end480
                                        #   in Loop: Header=BB203_122 Depth=1
	jmp	.LBB203_127
.LBB203_127:                            # %if.end481
                                        #   in Loop: Header=BB203_122 Depth=1
	jmp	.LBB203_128
.LBB203_128:                            # %for.inc482
                                        #   in Loop: Header=BB203_122 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB203_122
.LBB203_129:                            # %for.end484
	movq	-32(%rbp), %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_poc_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB203_130:                            # %for.cond486
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB203_137
# %bb.131:                              # %for.body489
                                        #   in Loop: Header=BB203_130 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, (%rax)
	je	.LBB203_135
# %bb.132:                              # %if.then494
                                        #   in Loop: Header=BB203_130 Depth=1
	movq	img, %rax
	movl	72460(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB203_134
# %bb.133:                              # %if.then501
                                        #   in Loop: Header=BB203_130 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB203_134:                            # %if.end507
                                        #   in Loop: Header=BB203_130 Depth=1
	jmp	.LBB203_135
.LBB203_135:                            # %if.end508
                                        #   in Loop: Header=BB203_130 Depth=1
	jmp	.LBB203_136
.LBB203_136:                            # %for.inc509
                                        #   in Loop: Header=BB203_130 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB203_130
.LBB203_137:                            # %for.end511
	movq	-32(%rbp), %rdi
	movslq	-16(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_poc_asc, %rcx
	callq	qsort
	movl	$0, -12(%rbp)
.LBB203_138:                            # %for.cond516
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB203_141
# %bb.139:                              # %for.body519
                                        #   in Loop: Header=BB203_138 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	-8(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.140:                              # %for.inc526
                                        #   in Loop: Header=BB203_138 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB203_138
.LBB203_141:                            # %for.end528
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB203_142:                            # %for.cond529
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB203_145
# %bb.143:                              # %for.body532
                                        #   in Loop: Header=BB203_142 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.144:                              # %for.inc538
                                        #   in Loop: Header=BB203_142 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB203_142
.LBB203_145:                            # %for.end540
	movl	$0, listXsize
	movl	$0, listXsize+4
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movabsq	$listXsize, %r8
	addq	$4, %r8
	movl	-20(%rbp), %edi
	movq	-64(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX+8, %rcx
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movl	$0, -4(%rbp)
.LBB203_146:                            # %for.cond541
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB203_153
# %bb.147:                              # %for.body544
                                        #   in Loop: Header=BB203_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-40(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB203_149
# %bb.148:                              # %if.then555
                                        #   in Loop: Header=BB203_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB203_149:                            # %if.end566
                                        #   in Loop: Header=BB203_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB203_151
# %bb.150:                              # %if.then572
                                        #   in Loop: Header=BB203_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB203_151:                            # %if.end583
                                        #   in Loop: Header=BB203_146 Depth=1
	jmp	.LBB203_152
.LBB203_152:                            # %for.inc584
                                        #   in Loop: Header=BB203_146 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB203_146
.LBB203_153:                            # %for.end586
	movq	-40(%rbp), %rdi
	movslq	-24(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_lt_pic_idx_asc, %rcx
	callq	qsort
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movabsq	$listXsize, %r8
	addq	$4, %r8
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX+8, %rcx
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movq	-32(%rbp), %rdi
	callq	free
	movq	-64(%rbp), %rdi
	callq	free
	movq	-40(%rbp), %rdi
	callq	free
.LBB203_154:                            # %if.end588
	jmp	.LBB203_155
.LBB203_155:                            # %if.end589
	movl	listXsize, %eax
	cmpl	listXsize+4, %eax
	jne	.LBB203_166
# %bb.156:                              # %land.lhs.true592
	cmpl	$1, listXsize
	jle	.LBB203_166
# %bb.157:                              # %if.then595
	movl	$0, -68(%rbp)
	movl	$0, -12(%rbp)
.LBB203_158:                            # %for.cond596
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB203_163
# %bb.159:                              # %for.body599
                                        #   in Loop: Header=BB203_158 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movslq	-12(%rbp), %rdx
	cmpq	(%rcx,%rdx,8), %rax
	je	.LBB203_161
# %bb.160:                              # %if.then606
                                        #   in Loop: Header=BB203_158 Depth=1
	movl	$1, -68(%rbp)
.LBB203_161:                            # %if.end607
                                        #   in Loop: Header=BB203_158 Depth=1
	jmp	.LBB203_162
.LBB203_162:                            # %for.inc608
                                        #   in Loop: Header=BB203_158 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB203_158
.LBB203_163:                            # %for.end610
	cmpl	$0, -68(%rbp)
	jne	.LBB203_165
# %bb.164:                              # %if.then612
	movq	listX+8, %rax
	movq	(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	listX+8, %rax
	movq	8(%rax), %rax
	movq	listX+8, %rcx
	movq	%rax, (%rcx)
	movq	-88(%rbp), %rax
	movq	listX+8, %rcx
	movq	%rax, 8(%rcx)
.LBB203_165:                            # %if.end617
	jmp	.LBB203_166
.LBB203_166:                            # %if.end618
	movl	listXsize, %eax
	movq	img, %rcx
	cmpl	72000(%rcx), %eax
	jge	.LBB203_168
# %bb.167:                              # %cond.true
	movl	listXsize, %eax
	jmp	.LBB203_169
.LBB203_168:                            # %cond.false
	movq	img, %rax
	movl	72000(%rax), %eax
.LBB203_169:                            # %cond.end
	movl	%eax, listXsize
	movl	listXsize+4, %eax
	movq	img, %rcx
	cmpl	72004(%rcx), %eax
	jge	.LBB203_171
# %bb.170:                              # %cond.true624
	movl	listXsize+4, %eax
	jmp	.LBB203_172
.LBB203_171:                            # %cond.false625
	movq	img, %rax
	movl	72004(%rax), %eax
.LBB203_172:                            # %cond.end627
	movl	%eax, listXsize+4
	movl	listXsize, %eax
	movl	%eax, -4(%rbp)
.LBB203_173:                            # %for.cond629
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$33, -4(%rbp)
	jae	.LBB203_176
# %bb.174:                              # %for.body632
                                        #   in Loop: Header=BB203_173 Depth=1
	movq	listX, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.175:                              # %for.inc635
                                        #   in Loop: Header=BB203_173 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB203_173
.LBB203_176:                            # %for.end637
	movl	listXsize+4, %eax
	movl	%eax, -4(%rbp)
.LBB203_177:                            # %for.cond638
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$33, -4(%rbp)
	jae	.LBB203_180
# %bb.178:                              # %for.body641
                                        #   in Loop: Header=BB203_177 Depth=1
	movq	listX+8, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.179:                              # %for.inc644
                                        #   in Loop: Header=BB203_177 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB203_177
.LBB203_180:                            # %for.end646.loopexit
	jmp	.LBB203_181
.LBB203_181:                            # %for.end646
	cmpl	$2110854060, -76(%rbp)  # imm = 0x7DD113AC
	jne	.LBB203_183
.LBB203_182:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB203_183:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB203_182
.Lfunc_end203:
	.size	init_lists.140, .Lfunc_end203-init_lists.140
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_short_term_pic.141
	.type	get_short_term_pic.141,@function
get_short_term_pic.141:                 # @get_short_term_pic.141
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1230819468, -28(%rbp)  # imm = 0x495CD08C
	movl	%edi, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB204_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB204_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB204_1 Depth=1
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB204_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB204_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB204_8
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB204_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB204_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB204_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB204_7
# %bb.6:                                # %if.then10
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB204_23
.LBB204_7:                              # %if.end
                                        #   in Loop: Header=BB204_1 Depth=1
	jmp	.LBB204_8
.LBB204_8:                              # %if.end14
                                        #   in Loop: Header=BB204_1 Depth=1
	jmp	.LBB204_20
.LBB204_9:                              # %if.else
                                        #   in Loop: Header=BB204_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB204_14
# %bb.10:                               # %if.then19
                                        #   in Loop: Header=BB204_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB204_13
# %bb.11:                               # %land.lhs.true24
                                        #   in Loop: Header=BB204_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB204_13
# %bb.12:                               # %if.then30
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB204_23
.LBB204_13:                             # %if.end34
                                        #   in Loop: Header=BB204_1 Depth=1
	jmp	.LBB204_14
.LBB204_14:                             # %if.end35
                                        #   in Loop: Header=BB204_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB204_19
# %bb.15:                               # %if.then41
                                        #   in Loop: Header=BB204_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB204_18
# %bb.16:                               # %land.lhs.true46
                                        #   in Loop: Header=BB204_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB204_18
# %bb.17:                               # %if.then52
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB204_23
.LBB204_18:                             # %if.end56
                                        #   in Loop: Header=BB204_1 Depth=1
	jmp	.LBB204_19
.LBB204_19:                             # %if.end57
                                        #   in Loop: Header=BB204_1 Depth=1
	jmp	.LBB204_20
.LBB204_20:                             # %if.end58
                                        #   in Loop: Header=BB204_1 Depth=1
	jmp	.LBB204_21
.LBB204_21:                             # %for.inc
                                        #   in Loop: Header=BB204_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB204_1
.LBB204_22:                             # %for.end
	movq	$0, -24(%rbp)
.LBB204_23:                             # %return
	movq	-24(%rbp), %rbx
	cmpl	$1230819468, -28(%rbp)  # imm = 0x495CD08C
	jne	.LBB204_25
.LBB204_24:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB204_25:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB204_24
.Lfunc_end204:
	.size	get_short_term_pic.141, .Lfunc_end204-get_short_term_pic.141
	.cfi_endproc
                                        # -- End function
	.globl	mm_update_max_long_term_frame_idx.142 # -- Begin function mm_update_max_long_term_frame_idx.142
	.p2align	4, 0x90
	.type	mm_update_max_long_term_frame_idx.142,@function
mm_update_max_long_term_frame_idx.142:  # @mm_update_max_long_term_frame_idx.142
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1211148257, -12(%rbp)  # imm = 0x4830A7E1
	movl	%edi, -8(%rbp)
	movl	-8(%rbp), %eax
	subl	$1, %eax
	movl	%eax, dpb+44
	movl	$0, -4(%rbp)
.LBB205_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB205_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB205_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	dpb+44, %eax
	jle	.LBB205_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB205_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB205_4:                              # %if.end
                                        #   in Loop: Header=BB205_1 Depth=1
	jmp	.LBB205_5
.LBB205_5:                              # %for.inc
                                        #   in Loop: Header=BB205_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB205_1
.LBB205_6:                              # %for.end
	cmpl	$1211148257, -12(%rbp)  # imm = 0x4830A7E1
	jne	.LBB205_8
.LBB205_7:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB205_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB205_7
.Lfunc_end205:
	.size	mm_update_max_long_term_frame_idx.142, .Lfunc_end205-mm_update_max_long_term_frame_idx.142
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function reorder_short_term.143
	.type	reorder_short_term.143,@function
reorder_short_term.143:                 # @reorder_short_term.143
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$538358938, -44(%rbp)   # imm = 0x2016B49A
	movq	%rdi, -16(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -40(%rbp)
	movl	-20(%rbp), %edi
	callq	get_short_term_pic
	movq	%rax, -56(%rbp)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB206_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-40(%rbp), %rcx
	cmpl	(%rcx), %eax
	jle	.LBB206_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB206_1 Depth=1
	movq	-16(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB206_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB206_1
.LBB206_4:                              # %for.end
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movl	(%rdx), %esi
	movl	%esi, %edi
	addl	$1, %edi
	movl	%edi, (%rdx)
	movslq	%esi, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB206_5:                              # %for.cond5
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jg	.LBB206_13
# %bb.6:                                # %for.body8
                                        #   in Loop: Header=BB206_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	je	.LBB206_11
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB206_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB206_9
# %bb.8:                                # %lor.lhs.false
                                        #   in Loop: Header=BB206_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6364(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB206_10
.LBB206_9:                              # %if.then17
                                        #   in Loop: Header=BB206_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB206_10:                             # %if.end
                                        #   in Loop: Header=BB206_5 Depth=1
	jmp	.LBB206_11
.LBB206_11:                             # %if.end23
                                        #   in Loop: Header=BB206_5 Depth=1
	jmp	.LBB206_12
.LBB206_12:                             # %for.inc24
                                        #   in Loop: Header=BB206_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB206_5
.LBB206_13:                             # %for.end26
	cmpl	$538358938, -44(%rbp)   # imm = 0x2016B49A
	jne	.LBB206_15
.LBB206_14:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB206_15:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB206_14
.Lfunc_end206:
	.size	reorder_short_term.143, .Lfunc_end206-reorder_short_term.143
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function unmark_long_term_frame_for_reference_by_frame_idx.144
	.type	unmark_long_term_frame_for_reference_by_frame_idx.144,@function
unmark_long_term_frame_for_reference_by_frame_idx.144: # @unmark_long_term_frame_for_reference_by_frame_idx.144
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1957472449, -12(%rbp)  # imm = 0x74ACA8C1
	movl	%edi, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB207_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB207_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB207_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB207_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB207_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB207_4:                              # %if.end
                                        #   in Loop: Header=BB207_1 Depth=1
	jmp	.LBB207_5
.LBB207_5:                              # %for.inc
                                        #   in Loop: Header=BB207_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB207_1
.LBB207_6:                              # %for.end
	cmpl	$1957472449, -12(%rbp)  # imm = 0x74ACA8C1
	jne	.LBB207_8
.LBB207_7:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB207_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB207_7
.Lfunc_end207:
	.size	unmark_long_term_frame_for_reference_by_frame_idx.144, .Lfunc_end207-unmark_long_term_frame_for_reference_by_frame_idx.144
	.cfi_endproc
                                        # -- End function
	.globl	dpb_combine_field.145   # -- Begin function dpb_combine_field.145
	.p2align	4, 0x90
	.type	dpb_combine_field.145,@function
dpb_combine_field.145:                  # @dpb_combine_field.145
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1668440483, -32(%rbp)  # imm = 0x637261A3
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %edx
	shll	$1, %edx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6404(%rax), %r8d
	shll	$1, %r8d
	xorl	%edi, %edi
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movl	$0, -4(%rbp)
.LBB208_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	6396(%rcx), %eax
	jge	.LBB208_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB208_1 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB208_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB208_1
.LBB208_4:                              # %for.end
	movl	$0, -4(%rbp)
.LBB208_5:                              # %for.cond28
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	6404(%rcx), %eax
	jge	.LBB208_8
# %bb.6:                                # %for.body33
                                        #   in Loop: Header=BB208_5 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.7:                                # %for.inc95
                                        #   in Loop: Header=BB208_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB208_5
.LBB208_8:                              # %for.end97
	movq	-16(%rbp), %rax
	movq	40(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB208_10
# %bb.9:                                # %cond.true
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	4(%rax), %ecx
	jmp	.LBB208_11
.LBB208_10:                             # %cond.false
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	4(%rax), %ecx
.LBB208_11:                             # %cond.end
	xorl	%eax, %eax
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 4(%rdx)
	movq	-16(%rbp), %rdx
	movl	%ecx, 36(%rdx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 8(%rdx)
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	56(%rdx), %rdx
	movl	%ecx, 8(%rdx)
	movq	-16(%rbp), %rdx
	movq	48(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	56(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	48(%rdx), %rdx
	movl	%ecx, 12(%rdx)
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 12(%rdx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	$0, 6380(%rcx)
	je	.LBB208_13
# %bb.12:                               # %land.rhs
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6380(%rax)
	setne	%al
.LBB208_13:                             # %land.end
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%eax, 6380(%rdx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB208_15
# %bb.14:                               # %land.rhs138
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	setne	%cl
.LBB208_15:                             # %land.end142
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB208_17
# %bb.16:                               # %if.then
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB208_17:                             # %if.end
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	$0, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6552(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6560(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6560(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6560(%rax)
	je	.LBB208_19
# %bb.18:                               # %if.then167
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6572(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6572(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6576(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6576(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6564(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6564(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6568(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6568(%rcx)
.LBB208_19:                             # %if.end180
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movl	$0, -4(%rbp)
.LBB208_20:                             # %for.cond186
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	listXsize+4, %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB208_26
# %bb.21:                               # %for.body190
                                        #   in Loop: Header=BB208_20 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %esi
	idivq	%rsi
	movq	%rax, %rcx
	shlq	$1, %rcx
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	288(%rax,%rdx,8), %rax
	cqto
	idivq	%rsi
	shlq	$1, %rax
	cmpq	%rax, %rcx
	jge	.LBB208_23
# %bb.22:                               # %cond.true208
                                        #   in Loop: Header=BB208_20 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
	jmp	.LBB208_24
.LBB208_23:                             # %cond.false217
                                        #   in Loop: Header=BB208_20 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
.LBB208_24:                             # %cond.end226
                                        #   in Loop: Header=BB208_20 Depth=1
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, 288(%rcx,%rdx,8)
# %bb.25:                               # %for.inc233
                                        #   in Loop: Header=BB208_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB208_20
.LBB208_26:                             # %for.end235
	movl	$0, -4(%rbp)
.LBB208_27:                             # %for.cond236
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	listXsize, %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB208_33
# %bb.28:                               # %for.body241
                                        #   in Loop: Header=BB208_27 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %esi
	idivq	%rsi
	movq	%rax, %rcx
	shlq	$1, %rcx
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	24(%rax,%rdx,8), %rax
	cqto
	idivq	%rsi
	shlq	$1, %rax
	cmpq	%rax, %rcx
	jge	.LBB208_30
# %bb.29:                               # %cond.true260
                                        #   in Loop: Header=BB208_27 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
	jmp	.LBB208_31
.LBB208_30:                             # %cond.false269
                                        #   in Loop: Header=BB208_27 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
.LBB208_31:                             # %cond.end278
                                        #   in Loop: Header=BB208_27 Depth=1
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, 24(%rcx,%rdx,8)
# %bb.32:                               # %for.inc285
                                        #   in Loop: Header=BB208_27 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB208_27
.LBB208_33:                             # %for.end287
	movl	$0, -4(%rbp)
.LBB208_34:                             # %for.cond288
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB208_36 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB208_65
# %bb.35:                               # %for.body294
                                        #   in Loop: Header=BB208_34 Depth=1
	movl	$0, -20(%rbp)
.LBB208_36:                             # %for.cond295
                                        #   Parent Loop BB208_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB208_63
# %bb.37:                               # %for.body301
                                        #   in Loop: Header=BB208_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movb	$1, (%rdi,%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movb	$1, (%rdi,%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %di
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rsi,%rax,8), %rax
	movw	%di, (%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -28(%rbp)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -28(%rbp)
	jl	.LBB208_39
# %bb.38:                               # %cond.true439
                                        #   in Loop: Header=BB208_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB208_40
.LBB208_39:                             # %cond.false445
                                        #   in Loop: Header=BB208_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB208_40
.LBB208_40:                             # %cond.end446
                                        #   in Loop: Header=BB208_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB208_42
# %bb.41:                               # %cond.true456
                                        #   in Loop: Header=BB208_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB208_43
.LBB208_42:                             # %cond.false462
                                        #   in Loop: Header=BB208_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB208_43
.LBB208_43:                             # %cond.end463
                                        #   in Loop: Header=BB208_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB208_45
# %bb.44:                               # %cond.true474
                                        #   in Loop: Header=BB208_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	1608(%rax,%rcx,8), %r8
	jmp	.LBB208_46
.LBB208_45:                             # %cond.false479
                                        #   in Loop: Header=BB208_36 Depth=2
	xorl	%r8d, %r8d
	jmp	.LBB208_46
.LBB208_46:                             # %cond.end480
                                        #   in Loop: Header=BB208_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB208_48
# %bb.47:                               # %cond.true495
                                        #   in Loop: Header=BB208_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	1872(%rax,%rcx,8), %rdi
	jmp	.LBB208_49
.LBB208_48:                             # %cond.false501
                                        #   in Loop: Header=BB208_36 Depth=2
	xorl	%edi, %edi
	jmp	.LBB208_49
.LBB208_49:                             # %cond.end502
                                        #   in Loop: Header=BB208_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	%rdi, (%rsi,%rax,8)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -28(%rbp)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -28(%rbp)
	jl	.LBB208_51
# %bb.50:                               # %cond.true641
                                        #   in Loop: Header=BB208_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB208_52
.LBB208_51:                             # %cond.false647
                                        #   in Loop: Header=BB208_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB208_52
.LBB208_52:                             # %cond.end648
                                        #   in Loop: Header=BB208_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB208_54
# %bb.53:                               # %cond.true659
                                        #   in Loop: Header=BB208_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB208_55
.LBB208_54:                             # %cond.false665
                                        #   in Loop: Header=BB208_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB208_55
.LBB208_55:                             # %cond.end666
                                        #   in Loop: Header=BB208_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB208_57
# %bb.56:                               # %cond.true677
                                        #   in Loop: Header=BB208_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	1608(%rax,%rcx,8), %r8
	jmp	.LBB208_58
.LBB208_57:                             # %cond.false683
                                        #   in Loop: Header=BB208_36 Depth=2
	movq	$-1, %r8
	jmp	.LBB208_58
.LBB208_58:                             # %cond.end684
                                        #   in Loop: Header=BB208_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB208_60
# %bb.59:                               # %cond.true700
                                        #   in Loop: Header=BB208_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	1872(%rax,%rcx,8), %r8
	jmp	.LBB208_61
.LBB208_60:                             # %cond.false706
                                        #   in Loop: Header=BB208_36 Depth=2
	movq	$-1, %r8
	jmp	.LBB208_61
.LBB208_61:                             # %cond.end707
                                        #   in Loop: Header=BB208_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
# %bb.62:                               # %for.inc721
                                        #   in Loop: Header=BB208_36 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB208_36
.LBB208_63:                             # %for.end723
                                        #   in Loop: Header=BB208_34 Depth=1
	jmp	.LBB208_64
.LBB208_64:                             # %for.inc724
                                        #   in Loop: Header=BB208_34 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB208_34
.LBB208_65:                             # %for.end726
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB208_67
# %bb.66:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB208_76
.LBB208_67:                             # %if.then729
	movl	$0, -4(%rbp)
.LBB208_68:                             # %for.cond730
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB208_70 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB208_75
# %bb.69:                               # %for.body736
                                        #   in Loop: Header=BB208_68 Depth=1
	movl	$0, -20(%rbp)
.LBB208_70:                             # %for.cond737
                                        #   Parent Loop BB208_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB208_73
# %bb.71:                               # %for.body743
                                        #   in Loop: Header=BB208_70 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.72:                               # %for.inc756
                                        #   in Loop: Header=BB208_70 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB208_70
.LBB208_73:                             # %for.end758
                                        #   in Loop: Header=BB208_68 Depth=1
	jmp	.LBB208_74
.LBB208_74:                             # %for.inc759
                                        #   in Loop: Header=BB208_68 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB208_68
.LBB208_75:                             # %for.end761
	jmp	.LBB208_76
.LBB208_76:                             # %if.end762
	cmpl	$1668440483, -32(%rbp)  # imm = 0x637261A3
	jne	.LBB208_78
.LBB208_77:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB208_78:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB208_77
.Lfunc_end208:
	.size	dpb_combine_field.145, .Lfunc_end208-dpb_combine_field.145
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_poc_asc.146
	.type	compare_pic_by_poc_asc.146,@function
compare_pic_by_poc_asc.146:             # @compare_pic_by_poc_asc.146
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$866305153, -16(%rbp)   # imm = 0x33A2C481
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB209_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB209_5
.LBB209_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB209_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB209_5
.LBB209_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB209_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$866305153, -16(%rbp)   # imm = 0x33A2C481
	jne	.LBB209_7
.LBB209_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB209_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB209_6
.Lfunc_end209:
	.size	compare_pic_by_poc_asc.146, .Lfunc_end209-compare_pic_by_poc_asc.146
	.cfi_endproc
                                        # -- End function
	.globl	dpb_combine_field.147   # -- Begin function dpb_combine_field.147
	.p2align	4, 0x90
	.type	dpb_combine_field.147,@function
dpb_combine_field.147:                  # @dpb_combine_field.147
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$879112524, -32(%rbp)   # imm = 0x3466314C
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %edx
	shll	$1, %edx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6404(%rax), %r8d
	shll	$1, %r8d
	xorl	%edi, %edi
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movl	$0, -4(%rbp)
.LBB210_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	6396(%rcx), %eax
	jge	.LBB210_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB210_1 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB210_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB210_1
.LBB210_4:                              # %for.end
	movl	$0, -4(%rbp)
.LBB210_5:                              # %for.cond28
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	6404(%rcx), %eax
	jge	.LBB210_8
# %bb.6:                                # %for.body33
                                        #   in Loop: Header=BB210_5 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.7:                                # %for.inc95
                                        #   in Loop: Header=BB210_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB210_5
.LBB210_8:                              # %for.end97
	movq	-16(%rbp), %rax
	movq	40(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB210_10
# %bb.9:                                # %cond.true
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	4(%rax), %ecx
	jmp	.LBB210_11
.LBB210_10:                             # %cond.false
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	4(%rax), %ecx
.LBB210_11:                             # %cond.end
	xorl	%eax, %eax
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 4(%rdx)
	movq	-16(%rbp), %rdx
	movl	%ecx, 36(%rdx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 8(%rdx)
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	56(%rdx), %rdx
	movl	%ecx, 8(%rdx)
	movq	-16(%rbp), %rdx
	movq	48(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	56(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	48(%rdx), %rdx
	movl	%ecx, 12(%rdx)
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 12(%rdx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	$0, 6380(%rcx)
	je	.LBB210_13
# %bb.12:                               # %land.rhs
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6380(%rax)
	setne	%al
.LBB210_13:                             # %land.end
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%eax, 6380(%rdx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB210_15
# %bb.14:                               # %land.rhs138
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	setne	%cl
.LBB210_15:                             # %land.end142
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB210_17
# %bb.16:                               # %if.then
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB210_17:                             # %if.end
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	$0, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6552(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6560(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6560(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6560(%rax)
	je	.LBB210_19
# %bb.18:                               # %if.then167
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6572(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6572(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6576(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6576(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6564(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6564(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6568(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6568(%rcx)
.LBB210_19:                             # %if.end180
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movl	$0, -4(%rbp)
.LBB210_20:                             # %for.cond186
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	listXsize+4, %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB210_26
# %bb.21:                               # %for.body190
                                        #   in Loop: Header=BB210_20 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %esi
	idivq	%rsi
	movq	%rax, %rcx
	shlq	$1, %rcx
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	288(%rax,%rdx,8), %rax
	cqto
	idivq	%rsi
	shlq	$1, %rax
	cmpq	%rax, %rcx
	jge	.LBB210_23
# %bb.22:                               # %cond.true208
                                        #   in Loop: Header=BB210_20 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
	jmp	.LBB210_24
.LBB210_23:                             # %cond.false217
                                        #   in Loop: Header=BB210_20 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
.LBB210_24:                             # %cond.end226
                                        #   in Loop: Header=BB210_20 Depth=1
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, 288(%rcx,%rdx,8)
# %bb.25:                               # %for.inc233
                                        #   in Loop: Header=BB210_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB210_20
.LBB210_26:                             # %for.end235
	movl	$0, -4(%rbp)
.LBB210_27:                             # %for.cond236
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	listXsize, %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB210_33
# %bb.28:                               # %for.body241
                                        #   in Loop: Header=BB210_27 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %esi
	idivq	%rsi
	movq	%rax, %rcx
	shlq	$1, %rcx
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	24(%rax,%rdx,8), %rax
	cqto
	idivq	%rsi
	shlq	$1, %rax
	cmpq	%rax, %rcx
	jge	.LBB210_30
# %bb.29:                               # %cond.true260
                                        #   in Loop: Header=BB210_27 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
	jmp	.LBB210_31
.LBB210_30:                             # %cond.false269
                                        #   in Loop: Header=BB210_27 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
.LBB210_31:                             # %cond.end278
                                        #   in Loop: Header=BB210_27 Depth=1
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, 24(%rcx,%rdx,8)
# %bb.32:                               # %for.inc285
                                        #   in Loop: Header=BB210_27 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB210_27
.LBB210_33:                             # %for.end287
	movl	$0, -4(%rbp)
.LBB210_34:                             # %for.cond288
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB210_36 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB210_65
# %bb.35:                               # %for.body294
                                        #   in Loop: Header=BB210_34 Depth=1
	movl	$0, -20(%rbp)
.LBB210_36:                             # %for.cond295
                                        #   Parent Loop BB210_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB210_63
# %bb.37:                               # %for.body301
                                        #   in Loop: Header=BB210_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movb	$1, (%rdi,%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movb	$1, (%rdi,%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %di
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rsi,%rax,8), %rax
	movw	%di, (%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -28(%rbp)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -28(%rbp)
	jl	.LBB210_39
# %bb.38:                               # %cond.true439
                                        #   in Loop: Header=BB210_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB210_40
.LBB210_39:                             # %cond.false445
                                        #   in Loop: Header=BB210_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB210_40
.LBB210_40:                             # %cond.end446
                                        #   in Loop: Header=BB210_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB210_42
# %bb.41:                               # %cond.true456
                                        #   in Loop: Header=BB210_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB210_43
.LBB210_42:                             # %cond.false462
                                        #   in Loop: Header=BB210_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB210_43
.LBB210_43:                             # %cond.end463
                                        #   in Loop: Header=BB210_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB210_45
# %bb.44:                               # %cond.true474
                                        #   in Loop: Header=BB210_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	1608(%rax,%rcx,8), %r8
	jmp	.LBB210_46
.LBB210_45:                             # %cond.false479
                                        #   in Loop: Header=BB210_36 Depth=2
	xorl	%r8d, %r8d
	jmp	.LBB210_46
.LBB210_46:                             # %cond.end480
                                        #   in Loop: Header=BB210_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB210_48
# %bb.47:                               # %cond.true495
                                        #   in Loop: Header=BB210_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	1872(%rax,%rcx,8), %rdi
	jmp	.LBB210_49
.LBB210_48:                             # %cond.false501
                                        #   in Loop: Header=BB210_36 Depth=2
	xorl	%edi, %edi
	jmp	.LBB210_49
.LBB210_49:                             # %cond.end502
                                        #   in Loop: Header=BB210_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	%rdi, (%rsi,%rax,8)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -28(%rbp)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -28(%rbp)
	jl	.LBB210_51
# %bb.50:                               # %cond.true641
                                        #   in Loop: Header=BB210_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB210_52
.LBB210_51:                             # %cond.false647
                                        #   in Loop: Header=BB210_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB210_52
.LBB210_52:                             # %cond.end648
                                        #   in Loop: Header=BB210_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB210_54
# %bb.53:                               # %cond.true659
                                        #   in Loop: Header=BB210_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB210_55
.LBB210_54:                             # %cond.false665
                                        #   in Loop: Header=BB210_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB210_55
.LBB210_55:                             # %cond.end666
                                        #   in Loop: Header=BB210_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB210_57
# %bb.56:                               # %cond.true677
                                        #   in Loop: Header=BB210_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	1608(%rax,%rcx,8), %r8
	jmp	.LBB210_58
.LBB210_57:                             # %cond.false683
                                        #   in Loop: Header=BB210_36 Depth=2
	movq	$-1, %r8
	jmp	.LBB210_58
.LBB210_58:                             # %cond.end684
                                        #   in Loop: Header=BB210_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB210_60
# %bb.59:                               # %cond.true700
                                        #   in Loop: Header=BB210_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	1872(%rax,%rcx,8), %r8
	jmp	.LBB210_61
.LBB210_60:                             # %cond.false706
                                        #   in Loop: Header=BB210_36 Depth=2
	movq	$-1, %r8
	jmp	.LBB210_61
.LBB210_61:                             # %cond.end707
                                        #   in Loop: Header=BB210_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
# %bb.62:                               # %for.inc721
                                        #   in Loop: Header=BB210_36 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB210_36
.LBB210_63:                             # %for.end723
                                        #   in Loop: Header=BB210_34 Depth=1
	jmp	.LBB210_64
.LBB210_64:                             # %for.inc724
                                        #   in Loop: Header=BB210_34 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB210_34
.LBB210_65:                             # %for.end726
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB210_67
# %bb.66:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB210_76
.LBB210_67:                             # %if.then729
	movl	$0, -4(%rbp)
.LBB210_68:                             # %for.cond730
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB210_70 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB210_75
# %bb.69:                               # %for.body736
                                        #   in Loop: Header=BB210_68 Depth=1
	movl	$0, -20(%rbp)
.LBB210_70:                             # %for.cond737
                                        #   Parent Loop BB210_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB210_73
# %bb.71:                               # %for.body743
                                        #   in Loop: Header=BB210_70 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.72:                               # %for.inc756
                                        #   in Loop: Header=BB210_70 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB210_70
.LBB210_73:                             # %for.end758
                                        #   in Loop: Header=BB210_68 Depth=1
	jmp	.LBB210_74
.LBB210_74:                             # %for.inc759
                                        #   in Loop: Header=BB210_68 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB210_68
.LBB210_75:                             # %for.end761
	jmp	.LBB210_76
.LBB210_76:                             # %if.end762
	cmpl	$879112524, -32(%rbp)   # imm = 0x3466314C
	jne	.LBB210_78
.LBB210_77:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB210_78:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB210_77
.Lfunc_end210:
	.size	dpb_combine_field.147, .Lfunc_end210-dpb_combine_field.147
	.cfi_endproc
                                        # -- End function
	.globl	fill_frame_num_gap.148  # -- Begin function fill_frame_num_gap.148
	.p2align	4, 0x90
	.type	fill_frame_num_gap.148,@function
fill_frame_num_gap.148:                 # @fill_frame_num_gap.148
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1214527239, -36(%rbp)  # imm = 0x48643707
	movq	%rdi, -8(%rbp)
	movq	$0, -24(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -28(%rbp)
	movq	-8(%rbp), %rax
	movl	72496(%rax), %eax
	movl	%eax, -40(%rbp)
	movq	-8(%rbp), %rax
	movl	$1, 72496(%rax)
	movq	-8(%rbp), %rax
	movl	72648(%rax), %eax
	addl	$1, %eax
	cltd
	idivl	-28(%rbp)
	movl	%edx, -12(%rbp)
	movq	-8(%rbp), %rax
	movl	72464(%rax), %eax
	movl	%eax, -32(%rbp)
.LBB211_1:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-32(%rbp), %eax
	cmpl	-12(%rbp), %eax
	je	.LBB211_3
# %bb.2:                                # %while.body
                                        #   in Loop: Header=BB211_1 Depth=1
	movq	-8(%rbp), %rax
	movl	52(%rax), %esi
	movq	-8(%rbp), %rax
	movl	60(%rax), %edx
	movq	-8(%rbp), %rax
	movl	56(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	64(%rax), %r8d
	xorl	%edi, %edi
	callq	alloc_storable_picture
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	$1, 6412(%rax)
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 6364(%rcx)
	movq	-24(%rbp), %rax
	movl	$1, 6388(%rax)
	movq	-24(%rbp), %rax
	movl	$1, 6384(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 72500(%rax)
	movq	-24(%rbp), %rdi
	callq	store_picture_in_dpb
	movq	$0, -24(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	-28(%rbp)
	movl	%edx, -12(%rbp)
	jmp	.LBB211_1
.LBB211_3:                              # %while.end
	movl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 72496(%rcx)
	cmpl	$1214527239, -36(%rbp)  # imm = 0x48643707
	jne	.LBB211_5
.LBB211_4:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB211_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB211_4
.Lfunc_end211:
	.size	fill_frame_num_gap.148, .Lfunc_end211-fill_frame_num_gap.148
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function remove_frame_from_dpb.149
	.type	remove_frame_from_dpb.149,@function
remove_frame_from_dpb.149:              # @remove_frame_from_dpb.149
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$99777391, -20(%rbp)    # imm = 0x5F27B6F
	movl	%edi, -16(%rbp)
	movq	dpb(%rip), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB212_6
# %bb.1:                                # %entry
	movq	.LJTI212_0(,%rax,8), %rax
	jmpq	*%rax
.LBB212_2:                              # %sw.bb
	movq	-8(%rbp), %rax
	movq	40(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	56(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 40(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 56(%rax)
	jmp	.LBB212_7
.LBB212_3:                              # %sw.bb4
	movq	-8(%rbp), %rax
	movq	56(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 56(%rax)
	jmp	.LBB212_7
.LBB212_4:                              # %sw.bb7
	movq	-8(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 48(%rax)
	jmp	.LBB212_7
.LBB212_5:                              # %sw.bb10
	jmp	.LBB212_7
.LBB212_6:                              # %sw.default
	movabsq	$.L.str.29, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB212_7:                              # %sw.epilog
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 4(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 12(%rax)
	movq	dpb, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -32(%rbp)
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB212_8:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movl	dpb+28, %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jae	.LBB212_11
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB212_8 Depth=1
	movq	dpb, %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movl	%ecx, %ecx
	movq	(%rax,%rcx,8), %rax
	movq	dpb, %rcx
	movl	-12(%rbp), %edx
	movq	%rax, (%rcx,%rdx,8)
# %bb.10:                               # %for.inc
                                        #   in Loop: Header=BB212_8 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB212_8
.LBB212_11:                             # %for.end
	movq	-32(%rbp), %rax
	movq	dpb, %rcx
	movl	dpb+28, %edx
	subl	$1, %edx
	movl	%edx, %edx
	movq	%rax, (%rcx,%rdx,8)
	movl	dpb+28, %eax
	addl	$-1, %eax
	movl	%eax, dpb+28
	cmpl	$99777391, -20(%rbp)    # imm = 0x5F27B6F
	jne	.LBB212_13
.LBB212_12:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB212_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB212_12
.Lfunc_end212:
	.size	remove_frame_from_dpb.149, .Lfunc_end212-remove_frame_from_dpb.149
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI212_0:
	.quad	.LBB212_5
	.quad	.LBB212_4
	.quad	.LBB212_3
	.quad	.LBB212_2
                                        # -- End function
	.text
	.globl	alloc_storable_picture.150 # -- Begin function alloc_storable_picture.150
	.p2align	4, 0x90
	.type	alloc_storable_picture.150,@function
alloc_storable_picture.150:             # @alloc_storable_picture.150
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$23993701, -36(%rbp)    # imm = 0x16E1D65
	movl	%edi, -40(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -32(%rbp)
	movl	%r8d, -28(%rbp)
	movl	$1, %edi
	movl	$6584, %esi             # imm = 0x19B8
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -16(%rbp)
	cmpq	-16(%rbp), %rcx
	jne	.LBB213_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.7, %rdi
	callq	no_mem_exit
.LBB213_2:                              # %if.end
	movq	-16(%rbp), %rdi
	addq	$6424, %rdi             # imm = 0x1918
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	callq	get_mem2Dpel
	movq	-16(%rbp), %rax
	movq	$0, 6432(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6448(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6464(%rax)
	movq	input, %rax
	cmpl	$0, 1284(%rax)
	jne	.LBB213_5
# %bb.3:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 1288(%rax)
	jne	.LBB213_5
# %bb.4:                                # %lor.lhs.false3
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB213_6
.LBB213_5:                              # %if.then5
	movq	-16(%rbp), %rax
	movq	$0, 6440(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6456(%rax)
.LBB213_6:                              # %if.end6
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB213_8
# %bb.7:                                # %if.then8
	movq	-16(%rbp), %rdi
	addq	$6464, %rdi             # imm = 0x1940
	movl	-28(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	$2, %esi
	callq	get_mem3Dpel
.LBB213_8:                              # %if.end11
	movq	img, %rax
	movl	72484(%rax), %edi
	movl	$4, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	-16(%rbp), %rdx
	movq	%rax, 6472(%rdx)
	movq	-16(%rbp), %rax
	cmpq	6472(%rax), %rcx
	jne	.LBB213_10
# %bb.9:                                # %if.then16
	movabsq	$.L.str.8, %rdi
	callq	no_mem_exit
.LBB213_10:                             # %if.end17
	movq	-16(%rbp), %rdi
	addq	$6480, %rdi             # imm = 0x1950
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-16(%rbp), %rdi
	addq	$6488, %rdi             # imm = 0x1958
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	movl	$6, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-16(%rbp), %rdi
	addq	$6496, %rdi             # imm = 0x1960
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	movl	$6, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-16(%rbp), %rdi
	addq	$6504, %rdi             # imm = 0x1968
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-16(%rbp), %rdi
	addq	$6512, %rdi             # imm = 0x1970
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-24(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-16(%rbp), %rdi
	addq	$6520, %rdi             # imm = 0x1978
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-24(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-16(%rbp), %rax
	movl	$0, 6364(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6360(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6372(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6368(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6380(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6376(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6388(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6384(%rax)
	movl	-40(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6392(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6396(%rcx)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6400(%rcx)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6404(%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 6528(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6536(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6544(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6412(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6416(%rax)
	movq	-16(%rbp), %rbx
	cmpl	$23993701, -36(%rbp)    # imm = 0x16E1D65
	jne	.LBB213_12
.LBB213_11:
	movq	%rbx, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB213_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB213_11
.Lfunc_end213:
	.size	alloc_storable_picture.150, .Lfunc_end213-alloc_storable_picture.150
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function reorder_long_term.151
	.type	reorder_long_term.151,@function
reorder_long_term.151:                  # @reorder_long_term.151
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$685494362, -44(%rbp)   # imm = 0x28DBD05A
	movq	%rdi, -16(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -40(%rbp)
	movl	-24(%rbp), %edi
	callq	get_long_term_pic
	movq	%rax, -56(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB214_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-40(%rbp), %rcx
	cmpl	(%rcx), %eax
	jle	.LBB214_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB214_1 Depth=1
	movq	-16(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB214_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB214_1
.LBB214_4:                              # %for.end
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movl	(%rdx), %esi
	movl	%esi, %edi
	addl	$1, %edi
	movl	%edi, (%rdx)
	movslq	%esi, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB214_5:                              # %for.cond5
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jg	.LBB214_11
# %bb.6:                                # %for.body8
                                        #   in Loop: Header=BB214_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB214_8
# %bb.7:                                # %lor.lhs.false
                                        #   in Loop: Header=BB214_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6368(%rax), %eax
	cmpl	-24(%rbp), %eax
	je	.LBB214_9
.LBB214_8:                              # %if.then
                                        #   in Loop: Header=BB214_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movl	-28(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -28(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB214_9:                              # %if.end
                                        #   in Loop: Header=BB214_5 Depth=1
	jmp	.LBB214_10
.LBB214_10:                             # %for.inc19
                                        #   in Loop: Header=BB214_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB214_5
.LBB214_11:                             # %for.end21
	cmpl	$685494362, -44(%rbp)   # imm = 0x28DBD05A
	jne	.LBB214_13
.LBB214_12:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB214_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB214_12
.Lfunc_end214:
	.size	reorder_long_term.151, .Lfunc_end214-reorder_long_term.151
	.cfi_endproc
                                        # -- End function
	.globl	reorder_ref_pic_list.152 # -- Begin function reorder_ref_pic_list.152
	.p2align	4, 0x90
	.type	reorder_ref_pic_list.152,@function
reorder_ref_pic_list.152:               # @reorder_ref_pic_list.152
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$237145511, -60(%rbp)   # imm = 0xE228DA7
	movq	%rdi, -72(%rbp)
	movq	%rsi, -80(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -32(%rbp)
	movq	%r9, -88(%rbp)
	movl	$0, -40(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB215_2
# %bb.1:                                # %if.then
	movl	-44(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	72464(%rax), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB215_3
.LBB215_2:                              # %if.else
	movl	-44(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	72464(%rax), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB215_3:                              # %if.end
	movl	-20(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB215_4:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$3, (%rax,%rcx,4)
	je	.LBB215_24
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB215_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$3, (%rax,%rcx,4)
	jle	.LBB215_7
# %bb.6:                                # %if.then8
                                        #   in Loop: Header=BB215_4 Depth=1
	movabsq	$.L.str.12, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB215_7:                              # %if.end9
                                        #   in Loop: Header=BB215_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$2, (%rax,%rcx,4)
	jge	.LBB215_21
# %bb.8:                                # %if.then13
                                        #   in Loop: Header=BB215_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	jne	.LBB215_13
# %bb.9:                                # %if.then17
                                        #   in Loop: Header=BB215_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB215_11
# %bb.10:                               # %if.then22
                                        #   in Loop: Header=BB215_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	addl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB215_12
.LBB215_11:                             # %if.else28
                                        #   in Loop: Header=BB215_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -8(%rbp)
.LBB215_12:                             # %if.end33
                                        #   in Loop: Header=BB215_4 Depth=1
	jmp	.LBB215_17
.LBB215_13:                             # %if.else34
                                        #   in Loop: Header=BB215_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	cmpl	-16(%rbp), %eax
	jl	.LBB215_15
# %bb.14:                               # %if.then40
                                        #   in Loop: Header=BB215_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB215_16
.LBB215_15:                             # %if.else46
                                        #   in Loop: Header=BB215_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -8(%rbp)
.LBB215_16:                             # %if.end51
                                        #   in Loop: Header=BB215_4 Depth=1
	jmp	.LBB215_17
.LBB215_17:                             # %if.end52
                                        #   in Loop: Header=BB215_4 Depth=1
	movl	-8(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jle	.LBB215_19
# %bb.18:                               # %if.then54
                                        #   in Loop: Header=BB215_4 Depth=1
	movl	-8(%rbp), %eax
	subl	-16(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB215_20
.LBB215_19:                             # %if.else56
                                        #   in Loop: Header=BB215_4 Depth=1
	movl	-8(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB215_20:                             # %if.end57
                                        #   in Loop: Header=BB215_4 Depth=1
	movq	-72(%rbp), %rdi
	movl	-24(%rbp), %esi
	movl	-36(%rbp), %edx
	leaq	-40(%rbp), %rcx
	callq	reorder_short_term
	jmp	.LBB215_22
.LBB215_21:                             # %if.else58
                                        #   in Loop: Header=BB215_4 Depth=1
	movq	-72(%rbp), %rdi
	movl	-24(%rbp), %esi
	movq	-88(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %edx
	leaq	-40(%rbp), %rcx
	callq	reorder_long_term
.LBB215_22:                             # %if.end61
                                        #   in Loop: Header=BB215_4 Depth=1
	jmp	.LBB215_23
.LBB215_23:                             # %for.inc
                                        #   in Loop: Header=BB215_4 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB215_4
.LBB215_24:                             # %for.end
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movq	-80(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$237145511, -60(%rbp)   # imm = 0xE228DA7
	jne	.LBB215_26
.LBB215_25:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB215_26:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB215_25
.Lfunc_end215:
	.size	reorder_ref_pic_list.152, .Lfunc_end215-reorder_ref_pic_list.152
	.cfi_endproc
                                        # -- End function
	.globl	fill_frame_num_gap.153  # -- Begin function fill_frame_num_gap.153
	.p2align	4, 0x90
	.type	fill_frame_num_gap.153,@function
fill_frame_num_gap.153:                 # @fill_frame_num_gap.153
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$992494283, -32(%rbp)   # imm = 0x3B2842CB
	movq	%rdi, -8(%rbp)
	movq	$0, -24(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -28(%rbp)
	movq	-8(%rbp), %rax
	movl	72496(%rax), %eax
	movl	%eax, -36(%rbp)
	movq	-8(%rbp), %rax
	movl	$1, 72496(%rax)
	movq	-8(%rbp), %rax
	movl	72648(%rax), %eax
	addl	$1, %eax
	cltd
	idivl	-28(%rbp)
	movl	%edx, -12(%rbp)
	movq	-8(%rbp), %rax
	movl	72464(%rax), %eax
	movl	%eax, -40(%rbp)
.LBB216_1:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-40(%rbp), %eax
	cmpl	-12(%rbp), %eax
	je	.LBB216_3
# %bb.2:                                # %while.body
                                        #   in Loop: Header=BB216_1 Depth=1
	movq	-8(%rbp), %rax
	movl	52(%rax), %esi
	movq	-8(%rbp), %rax
	movl	60(%rax), %edx
	movq	-8(%rbp), %rax
	movl	56(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	64(%rax), %r8d
	xorl	%edi, %edi
	callq	alloc_storable_picture
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	$1, 6412(%rax)
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 6364(%rcx)
	movq	-24(%rbp), %rax
	movl	$1, 6388(%rax)
	movq	-24(%rbp), %rax
	movl	$1, 6384(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 72500(%rax)
	movq	-24(%rbp), %rdi
	callq	store_picture_in_dpb
	movq	$0, -24(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	-28(%rbp)
	movl	%edx, -12(%rbp)
	jmp	.LBB216_1
.LBB216_3:                              # %while.end
	movl	-36(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 72496(%rcx)
	cmpl	$992494283, -32(%rbp)   # imm = 0x3B2842CB
	jne	.LBB216_5
.LBB216_4:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB216_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB216_4
.Lfunc_end216:
	.size	fill_frame_num_gap.153, .Lfunc_end216-fill_frame_num_gap.153
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function unmark_long_term_field_for_reference_by_frame_idx.154
	.type	unmark_long_term_field_for_reference_by_frame_idx.154,@function
unmark_long_term_field_for_reference_by_frame_idx.154: # @unmark_long_term_field_for_reference_by_frame_idx.154
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$250253910, -28(%rbp)   # imm = 0xEEA9256
	movl	%edi, -20(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -12(%rbp)
	movl	%r8d, -8(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -8(%rbp)
	jge	.LBB217_2
# %bb.1:                                # %if.then
	movl	-32(%rbp), %eax
	shll	$1, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB217_2:                              # %if.end
	movl	$0, -4(%rbp)
.LBB217_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB217_46
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB217_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-24(%rbp), %eax
	jne	.LBB217_44
# %bb.5:                                # %if.then5
                                        #   in Loop: Header=BB217_3 Depth=1
	cmpl	$1, -20(%rbp)
	jne	.LBB217_24
# %bb.6:                                # %if.then7
                                        #   in Loop: Header=BB217_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB217_8
# %bb.7:                                # %if.then11
                                        #   in Loop: Header=BB217_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB217_23
.LBB217_8:                              # %if.else
                                        #   in Loop: Header=BB217_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, 8(%rax)
	jne	.LBB217_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB217_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB217_22
.LBB217_10:                             # %if.else21
                                        #   in Loop: Header=BB217_3 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB217_18
# %bb.11:                               # %if.then22
                                        #   in Loop: Header=BB217_3 Depth=1
	cmpq	$0, dpb+56
	je	.LBB217_16
# %bb.12:                               # %if.then24
                                        #   in Loop: Header=BB217_3 Depth=1
	movq	dpb+56, %rax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	cmpq	(%rcx,%rdx,8), %rax
	jne	.LBB217_14
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB217_3 Depth=1
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	cmpl	-12(%rbp), %eax
	je	.LBB217_15
.LBB217_14:                             # %if.then29
                                        #   in Loop: Header=BB217_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB217_15:                             # %if.end32
                                        #   in Loop: Header=BB217_3 Depth=1
	jmp	.LBB217_17
.LBB217_16:                             # %if.else33
                                        #   in Loop: Header=BB217_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB217_17:                             # %if.end36
                                        #   in Loop: Header=BB217_3 Depth=1
	jmp	.LBB217_21
.LBB217_18:                             # %if.else37
                                        #   in Loop: Header=BB217_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %ecx
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	je	.LBB217_20
# %bb.19:                               # %if.then42
                                        #   in Loop: Header=BB217_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB217_20:                             # %if.end45
                                        #   in Loop: Header=BB217_3 Depth=1
	jmp	.LBB217_21
.LBB217_21:                             # %if.end46
                                        #   in Loop: Header=BB217_3 Depth=1
	jmp	.LBB217_22
.LBB217_22:                             # %if.end47
                                        #   in Loop: Header=BB217_3 Depth=1
	jmp	.LBB217_23
.LBB217_23:                             # %if.end48
                                        #   in Loop: Header=BB217_3 Depth=1
	jmp	.LBB217_24
.LBB217_24:                             # %if.end49
                                        #   in Loop: Header=BB217_3 Depth=1
	cmpl	$2, -20(%rbp)
	jne	.LBB217_43
# %bb.25:                               # %if.then51
                                        #   in Loop: Header=BB217_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB217_27
# %bb.26:                               # %if.then56
                                        #   in Loop: Header=BB217_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB217_42
.LBB217_27:                             # %if.else59
                                        #   in Loop: Header=BB217_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$2, 8(%rax)
	jne	.LBB217_29
# %bb.28:                               # %if.then64
                                        #   in Loop: Header=BB217_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB217_41
.LBB217_29:                             # %if.else67
                                        #   in Loop: Header=BB217_3 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB217_37
# %bb.30:                               # %if.then69
                                        #   in Loop: Header=BB217_3 Depth=1
	cmpq	$0, dpb+56
	je	.LBB217_35
# %bb.31:                               # %if.then71
                                        #   in Loop: Header=BB217_3 Depth=1
	movq	dpb+56, %rax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	cmpq	(%rcx,%rdx,8), %rax
	jne	.LBB217_33
# %bb.32:                               # %lor.lhs.false75
                                        #   in Loop: Header=BB217_3 Depth=1
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	cmpl	-12(%rbp), %eax
	je	.LBB217_34
.LBB217_33:                             # %if.then78
                                        #   in Loop: Header=BB217_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB217_34:                             # %if.end81
                                        #   in Loop: Header=BB217_3 Depth=1
	jmp	.LBB217_36
.LBB217_35:                             # %if.else82
                                        #   in Loop: Header=BB217_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB217_36:                             # %if.end85
                                        #   in Loop: Header=BB217_3 Depth=1
	jmp	.LBB217_40
.LBB217_37:                             # %if.else86
                                        #   in Loop: Header=BB217_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %ecx
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	je	.LBB217_39
# %bb.38:                               # %if.then92
                                        #   in Loop: Header=BB217_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB217_39:                             # %if.end95
                                        #   in Loop: Header=BB217_3 Depth=1
	jmp	.LBB217_40
.LBB217_40:                             # %if.end96
                                        #   in Loop: Header=BB217_3 Depth=1
	jmp	.LBB217_41
.LBB217_41:                             # %if.end97
                                        #   in Loop: Header=BB217_3 Depth=1
	jmp	.LBB217_42
.LBB217_42:                             # %if.end98
                                        #   in Loop: Header=BB217_3 Depth=1
	jmp	.LBB217_43
.LBB217_43:                             # %if.end99
                                        #   in Loop: Header=BB217_3 Depth=1
	jmp	.LBB217_44
.LBB217_44:                             # %if.end100
                                        #   in Loop: Header=BB217_3 Depth=1
	jmp	.LBB217_45
.LBB217_45:                             # %for.inc
                                        #   in Loop: Header=BB217_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB217_3
.LBB217_46:                             # %for.end
	cmpl	$250253910, -28(%rbp)   # imm = 0xEEA9256
	jne	.LBB217_48
.LBB217_47:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB217_48:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB217_47
.Lfunc_end217:
	.size	unmark_long_term_field_for_reference_by_frame_idx.154, .Lfunc_end217-unmark_long_term_field_for_reference_by_frame_idx.154
	.cfi_endproc
                                        # -- End function
	.globl	fill_frame_num_gap.155  # -- Begin function fill_frame_num_gap.155
	.p2align	4, 0x90
	.type	fill_frame_num_gap.155,@function
fill_frame_num_gap.155:                 # @fill_frame_num_gap.155
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1832073396, -32(%rbp)  # imm = 0x6D3338B4
	movq	%rdi, -8(%rbp)
	movq	$0, -24(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -28(%rbp)
	movq	-8(%rbp), %rax
	movl	72496(%rax), %eax
	movl	%eax, -36(%rbp)
	movq	-8(%rbp), %rax
	movl	$1, 72496(%rax)
	movq	-8(%rbp), %rax
	movl	72648(%rax), %eax
	addl	$1, %eax
	cltd
	idivl	-28(%rbp)
	movl	%edx, -12(%rbp)
	movq	-8(%rbp), %rax
	movl	72464(%rax), %eax
	movl	%eax, -40(%rbp)
.LBB218_1:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-40(%rbp), %eax
	cmpl	-12(%rbp), %eax
	je	.LBB218_3
# %bb.2:                                # %while.body
                                        #   in Loop: Header=BB218_1 Depth=1
	movq	-8(%rbp), %rax
	movl	52(%rax), %esi
	movq	-8(%rbp), %rax
	movl	60(%rax), %edx
	movq	-8(%rbp), %rax
	movl	56(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	64(%rax), %r8d
	xorl	%edi, %edi
	callq	alloc_storable_picture
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	$1, 6412(%rax)
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 6364(%rcx)
	movq	-24(%rbp), %rax
	movl	$1, 6388(%rax)
	movq	-24(%rbp), %rax
	movl	$1, 6384(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 72500(%rax)
	movq	-24(%rbp), %rdi
	callq	store_picture_in_dpb
	movq	$0, -24(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	-28(%rbp)
	movl	%edx, -12(%rbp)
	jmp	.LBB218_1
.LBB218_3:                              # %while.end
	movl	-36(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 72496(%rcx)
	cmpl	$1832073396, -32(%rbp)  # imm = 0x6D3338B4
	jne	.LBB218_5
.LBB218_4:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB218_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB218_4
.Lfunc_end218:
	.size	fill_frame_num_gap.155, .Lfunc_end218-fill_frame_num_gap.155
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function output_one_frame_from_dpb.156
	.type	output_one_frame_from_dpb.156,@function
output_one_frame_from_dpb.156:          # @output_one_frame_from_dpb.156
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1733279033, -12(%rbp)  # imm = 0x674FBD39
	cmpl	$1, dpb+28
	jae	.LBB219_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.30, %rdi
	movl	$150, %esi
	callq	error
.LBB219_2:                              # %if.end
	leaq	-8(%rbp), %rdi
	leaq	-4(%rbp), %rsi
	callq	get_smallest_poc
	cmpl	$-1, -4(%rbp)
	jne	.LBB219_4
# %bb.3:                                # %if.then2
	movabsq	$.L.str.31, %rdi
	movl	$150, %esi
	callq	error
.LBB219_4:                              # %if.end3
	movq	dpb, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	p_dec, %esi
	callq	write_stored_frame
	movl	dpb+40, %eax
	cmpl	-8(%rbp), %eax
	jl	.LBB219_6
# %bb.5:                                # %if.then5
	movabsq	$.L.str.32, %rdi
	movl	$150, %esi
	callq	error
.LBB219_6:                              # %if.end6
	movl	-8(%rbp), %eax
	movl	%eax, dpb+40
	movq	dpb, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	is_used_for_reference
	cmpl	$0, %eax
	jne	.LBB219_8
# %bb.7:                                # %if.then9
	movl	-4(%rbp), %edi
	callq	remove_frame_from_dpb
.LBB219_8:                              # %if.end10
	cmpl	$1733279033, -12(%rbp)  # imm = 0x674FBD39
	jne	.LBB219_10
.LBB219_9:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB219_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB219_9
.Lfunc_end219:
	.size	output_one_frame_from_dpb.156, .Lfunc_end219-output_one_frame_from_dpb.156
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_unmark_long_term_for_reference.157
	.type	mm_unmark_long_term_for_reference.157,@function
mm_unmark_long_term_for_reference.157:  # @mm_unmark_long_term_for_reference.157
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1489670163, -12(%rbp)  # imm = 0x58CA9013
	movq	%rdi, -24(%rbp)
	movl	%esi, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB220_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB220_26
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB220_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB220_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB220_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB220_8
# %bb.4:                                # %land.lhs.true
                                        #   in Loop: Header=BB220_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB220_8
# %bb.5:                                # %if.then6
                                        #   in Loop: Header=BB220_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB220_7
# %bb.6:                                # %if.then11
                                        #   in Loop: Header=BB220_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB220_7:                              # %if.end
                                        #   in Loop: Header=BB220_1 Depth=1
	jmp	.LBB220_8
.LBB220_8:                              # %if.end14
                                        #   in Loop: Header=BB220_1 Depth=1
	jmp	.LBB220_24
.LBB220_9:                              # %if.else
                                        #   in Loop: Header=BB220_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB220_16
# %bb.10:                               # %land.lhs.true18
                                        #   in Loop: Header=BB220_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB220_16
# %bb.11:                               # %if.then24
                                        #   in Loop: Header=BB220_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB220_15
# %bb.12:                               # %if.then29
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$0, 6376(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$2, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	andl	$2, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB220_14
# %bb.13:                               # %if.then48
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6376(%rax)
.LBB220_14:                             # %if.end57
	jmp	.LBB220_27
.LBB220_15:                             # %if.end58
                                        #   in Loop: Header=BB220_1 Depth=1
	jmp	.LBB220_16
.LBB220_16:                             # %if.end59
                                        #   in Loop: Header=BB220_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB220_23
# %bb.17:                               # %land.lhs.true65
                                        #   in Loop: Header=BB220_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB220_23
# %bb.18:                               # %if.then71
                                        #   in Loop: Header=BB220_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB220_22
# %bb.19:                               # %if.then76
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$0, 6376(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB220_21
# %bb.20:                               # %if.then97
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6376(%rax)
.LBB220_21:                             # %if.end106
	jmp	.LBB220_27
.LBB220_22:                             # %if.end107
                                        #   in Loop: Header=BB220_1 Depth=1
	jmp	.LBB220_23
.LBB220_23:                             # %if.end108
                                        #   in Loop: Header=BB220_1 Depth=1
	jmp	.LBB220_24
.LBB220_24:                             # %if.end109
                                        #   in Loop: Header=BB220_1 Depth=1
	jmp	.LBB220_25
.LBB220_25:                             # %for.inc
                                        #   in Loop: Header=BB220_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB220_1
.LBB220_26:                             # %for.end.loopexit
	jmp	.LBB220_27
.LBB220_27:                             # %for.end
	cmpl	$1489670163, -12(%rbp)  # imm = 0x58CA9013
	jne	.LBB220_29
.LBB220_28:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB220_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB220_28
.Lfunc_end220:
	.size	mm_unmark_long_term_for_reference.157, .Lfunc_end220-mm_unmark_long_term_for_reference.157
	.cfi_endproc
                                        # -- End function
	.globl	gen_field_ref_ids.158   # -- Begin function gen_field_ref_ids.158
	.p2align	4, 0x90
	.type	gen_field_ref_ids.158,@function
gen_field_ref_ids.158:                  # @gen_field_ref_ids.158
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1044693700, -28(%rbp)  # imm = 0x3E44C2C4
	movq	%rdi, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB221_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB221_3 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB221_14
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB221_1 Depth=1
	movl	$0, -4(%rbp)
.LBB221_3:                              # %for.cond1
                                        #   Parent Loop BB221_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB221_12
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB221_3 Depth=2
	movq	-16(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB221_6
# %bb.5:                                # %cond.true
                                        #   in Loop: Header=BB221_3 Depth=2
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB221_7
.LBB221_6:                              # %cond.false
                                        #   in Loop: Header=BB221_3 Depth=2
	xorl	%eax, %eax
	jmp	.LBB221_7
.LBB221_7:                              # %cond.end
                                        #   in Loop: Header=BB221_3 Depth=2
	movq	-16(%rbp), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB221_9
# %bb.8:                                # %cond.true27
                                        #   in Loop: Header=BB221_3 Depth=2
	movq	-16(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB221_10
.LBB221_9:                              # %cond.false32
                                        #   in Loop: Header=BB221_3 Depth=2
	xorl	%eax, %eax
	jmp	.LBB221_10
.LBB221_10:                             # %cond.end33
                                        #   in Loop: Header=BB221_3 Depth=2
	movq	-16(%rbp), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB221_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB221_3
.LBB221_12:                             # %for.end
                                        #   in Loop: Header=BB221_1 Depth=1
	jmp	.LBB221_13
.LBB221_13:                             # %for.inc45
                                        #   in Loop: Header=BB221_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB221_1
.LBB221_14:                             # %for.end47
	cmpl	$1044693700, -28(%rbp)  # imm = 0x3E44C2C4
	jne	.LBB221_16
.LBB221_15:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB221_16:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB221_15
.Lfunc_end221:
	.size	gen_field_ref_ids.158, .Lfunc_end221-gen_field_ref_ids.158
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function reorder_long_term.159
	.type	reorder_long_term.159,@function
reorder_long_term.159:                  # @reorder_long_term.159
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1764019004, -44(%rbp)  # imm = 0x6924CB3C
	movq	%rdi, -16(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -40(%rbp)
	movl	-20(%rbp), %edi
	callq	get_long_term_pic
	movq	%rax, -56(%rbp)
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB222_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-40(%rbp), %rcx
	cmpl	(%rcx), %eax
	jle	.LBB222_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB222_1 Depth=1
	movq	-16(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB222_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB222_1
.LBB222_4:                              # %for.end
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movl	(%rdx), %esi
	movl	%esi, %edi
	addl	$1, %edi
	movl	%edi, (%rdx)
	movslq	%esi, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB222_5:                              # %for.cond5
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jg	.LBB222_11
# %bb.6:                                # %for.body8
                                        #   in Loop: Header=BB222_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB222_8
# %bb.7:                                # %lor.lhs.false
                                        #   in Loop: Header=BB222_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6368(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB222_9
.LBB222_8:                              # %if.then
                                        #   in Loop: Header=BB222_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movl	-28(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -28(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB222_9:                              # %if.end
                                        #   in Loop: Header=BB222_5 Depth=1
	jmp	.LBB222_10
.LBB222_10:                             # %for.inc19
                                        #   in Loop: Header=BB222_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB222_5
.LBB222_11:                             # %for.end21
	cmpl	$1764019004, -44(%rbp)  # imm = 0x6924CB3C
	jne	.LBB222_13
.LBB222_12:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB222_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB222_12
.Lfunc_end222:
	.size	reorder_long_term.159, .Lfunc_end222-reorder_long_term.159
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function unmark_long_term_field_for_reference_by_frame_idx.160
	.type	unmark_long_term_field_for_reference_by_frame_idx.160,@function
unmark_long_term_field_for_reference_by_frame_idx.160: # @unmark_long_term_field_for_reference_by_frame_idx.160
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$351883850, -32(%rbp)   # imm = 0x14F9524A
	movl	%edi, -12(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -8(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -28(%rbp)
	cmpl	$0, -8(%rbp)
	jge	.LBB223_2
# %bb.1:                                # %if.then
	movl	-28(%rbp), %eax
	shll	$1, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB223_2:                              # %if.end
	movl	$0, -4(%rbp)
.LBB223_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB223_46
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB223_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-24(%rbp), %eax
	jne	.LBB223_44
# %bb.5:                                # %if.then5
                                        #   in Loop: Header=BB223_3 Depth=1
	cmpl	$1, -12(%rbp)
	jne	.LBB223_24
# %bb.6:                                # %if.then7
                                        #   in Loop: Header=BB223_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB223_8
# %bb.7:                                # %if.then11
                                        #   in Loop: Header=BB223_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB223_23
.LBB223_8:                              # %if.else
                                        #   in Loop: Header=BB223_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, 8(%rax)
	jne	.LBB223_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB223_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB223_22
.LBB223_10:                             # %if.else21
                                        #   in Loop: Header=BB223_3 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB223_18
# %bb.11:                               # %if.then22
                                        #   in Loop: Header=BB223_3 Depth=1
	cmpq	$0, dpb+56
	je	.LBB223_16
# %bb.12:                               # %if.then24
                                        #   in Loop: Header=BB223_3 Depth=1
	movq	dpb+56, %rax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	cmpq	(%rcx,%rdx,8), %rax
	jne	.LBB223_14
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB223_3 Depth=1
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB223_15
.LBB223_14:                             # %if.then29
                                        #   in Loop: Header=BB223_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB223_15:                             # %if.end32
                                        #   in Loop: Header=BB223_3 Depth=1
	jmp	.LBB223_17
.LBB223_16:                             # %if.else33
                                        #   in Loop: Header=BB223_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB223_17:                             # %if.end36
                                        #   in Loop: Header=BB223_3 Depth=1
	jmp	.LBB223_21
.LBB223_18:                             # %if.else37
                                        #   in Loop: Header=BB223_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %ecx
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	je	.LBB223_20
# %bb.19:                               # %if.then42
                                        #   in Loop: Header=BB223_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB223_20:                             # %if.end45
                                        #   in Loop: Header=BB223_3 Depth=1
	jmp	.LBB223_21
.LBB223_21:                             # %if.end46
                                        #   in Loop: Header=BB223_3 Depth=1
	jmp	.LBB223_22
.LBB223_22:                             # %if.end47
                                        #   in Loop: Header=BB223_3 Depth=1
	jmp	.LBB223_23
.LBB223_23:                             # %if.end48
                                        #   in Loop: Header=BB223_3 Depth=1
	jmp	.LBB223_24
.LBB223_24:                             # %if.end49
                                        #   in Loop: Header=BB223_3 Depth=1
	cmpl	$2, -12(%rbp)
	jne	.LBB223_43
# %bb.25:                               # %if.then51
                                        #   in Loop: Header=BB223_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB223_27
# %bb.26:                               # %if.then56
                                        #   in Loop: Header=BB223_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB223_42
.LBB223_27:                             # %if.else59
                                        #   in Loop: Header=BB223_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$2, 8(%rax)
	jne	.LBB223_29
# %bb.28:                               # %if.then64
                                        #   in Loop: Header=BB223_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB223_41
.LBB223_29:                             # %if.else67
                                        #   in Loop: Header=BB223_3 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB223_37
# %bb.30:                               # %if.then69
                                        #   in Loop: Header=BB223_3 Depth=1
	cmpq	$0, dpb+56
	je	.LBB223_35
# %bb.31:                               # %if.then71
                                        #   in Loop: Header=BB223_3 Depth=1
	movq	dpb+56, %rax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	cmpq	(%rcx,%rdx,8), %rax
	jne	.LBB223_33
# %bb.32:                               # %lor.lhs.false75
                                        #   in Loop: Header=BB223_3 Depth=1
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB223_34
.LBB223_33:                             # %if.then78
                                        #   in Loop: Header=BB223_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB223_34:                             # %if.end81
                                        #   in Loop: Header=BB223_3 Depth=1
	jmp	.LBB223_36
.LBB223_35:                             # %if.else82
                                        #   in Loop: Header=BB223_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB223_36:                             # %if.end85
                                        #   in Loop: Header=BB223_3 Depth=1
	jmp	.LBB223_40
.LBB223_37:                             # %if.else86
                                        #   in Loop: Header=BB223_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %ecx
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	je	.LBB223_39
# %bb.38:                               # %if.then92
                                        #   in Loop: Header=BB223_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB223_39:                             # %if.end95
                                        #   in Loop: Header=BB223_3 Depth=1
	jmp	.LBB223_40
.LBB223_40:                             # %if.end96
                                        #   in Loop: Header=BB223_3 Depth=1
	jmp	.LBB223_41
.LBB223_41:                             # %if.end97
                                        #   in Loop: Header=BB223_3 Depth=1
	jmp	.LBB223_42
.LBB223_42:                             # %if.end98
                                        #   in Loop: Header=BB223_3 Depth=1
	jmp	.LBB223_43
.LBB223_43:                             # %if.end99
                                        #   in Loop: Header=BB223_3 Depth=1
	jmp	.LBB223_44
.LBB223_44:                             # %if.end100
                                        #   in Loop: Header=BB223_3 Depth=1
	jmp	.LBB223_45
.LBB223_45:                             # %for.inc
                                        #   in Loop: Header=BB223_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB223_3
.LBB223_46:                             # %for.end
	cmpl	$351883850, -32(%rbp)   # imm = 0x14F9524A
	jne	.LBB223_48
.LBB223_47:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB223_48:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB223_47
.Lfunc_end223:
	.size	unmark_long_term_field_for_reference_by_frame_idx.160, .Lfunc_end223-unmark_long_term_field_for_reference_by_frame_idx.160
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_short_term_pic.161
	.type	get_short_term_pic.161,@function
get_short_term_pic.161:                 # @get_short_term_pic.161
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1332806641, -28(%rbp)  # imm = 0x4F7103F1
	movl	%edi, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB224_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB224_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB224_1 Depth=1
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB224_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB224_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB224_8
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB224_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB224_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB224_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB224_7
# %bb.6:                                # %if.then10
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB224_23
.LBB224_7:                              # %if.end
                                        #   in Loop: Header=BB224_1 Depth=1
	jmp	.LBB224_8
.LBB224_8:                              # %if.end14
                                        #   in Loop: Header=BB224_1 Depth=1
	jmp	.LBB224_20
.LBB224_9:                              # %if.else
                                        #   in Loop: Header=BB224_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB224_14
# %bb.10:                               # %if.then19
                                        #   in Loop: Header=BB224_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB224_13
# %bb.11:                               # %land.lhs.true24
                                        #   in Loop: Header=BB224_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB224_13
# %bb.12:                               # %if.then30
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB224_23
.LBB224_13:                             # %if.end34
                                        #   in Loop: Header=BB224_1 Depth=1
	jmp	.LBB224_14
.LBB224_14:                             # %if.end35
                                        #   in Loop: Header=BB224_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB224_19
# %bb.15:                               # %if.then41
                                        #   in Loop: Header=BB224_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB224_18
# %bb.16:                               # %land.lhs.true46
                                        #   in Loop: Header=BB224_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB224_18
# %bb.17:                               # %if.then52
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB224_23
.LBB224_18:                             # %if.end56
                                        #   in Loop: Header=BB224_1 Depth=1
	jmp	.LBB224_19
.LBB224_19:                             # %if.end57
                                        #   in Loop: Header=BB224_1 Depth=1
	jmp	.LBB224_20
.LBB224_20:                             # %if.end58
                                        #   in Loop: Header=BB224_1 Depth=1
	jmp	.LBB224_21
.LBB224_21:                             # %for.inc
                                        #   in Loop: Header=BB224_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB224_1
.LBB224_22:                             # %for.end
	movq	$0, -24(%rbp)
.LBB224_23:                             # %return
	movq	-24(%rbp), %rbx
	cmpl	$1332806641, -28(%rbp)  # imm = 0x4F7103F1
	jne	.LBB224_25
.LBB224_24:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB224_25:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB224_24
.Lfunc_end224:
	.size	get_short_term_pic.161, .Lfunc_end224-get_short_term_pic.161
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_long_term_pic.162
	.type	get_long_term_pic.162,@function
get_long_term_pic.162:                  # @get_long_term_pic.162
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$355134476, -28(%rbp)   # imm = 0x152AEC0C
	movl	%edi, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB225_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB225_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB225_1 Depth=1
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB225_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB225_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB225_8
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB225_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB225_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB225_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB225_7
# %bb.6:                                # %if.then10
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB225_23
.LBB225_7:                              # %if.end
                                        #   in Loop: Header=BB225_1 Depth=1
	jmp	.LBB225_8
.LBB225_8:                              # %if.end14
                                        #   in Loop: Header=BB225_1 Depth=1
	jmp	.LBB225_20
.LBB225_9:                              # %if.else
                                        #   in Loop: Header=BB225_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB225_14
# %bb.10:                               # %if.then19
                                        #   in Loop: Header=BB225_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB225_13
# %bb.11:                               # %land.lhs.true24
                                        #   in Loop: Header=BB225_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB225_13
# %bb.12:                               # %if.then30
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB225_23
.LBB225_13:                             # %if.end34
                                        #   in Loop: Header=BB225_1 Depth=1
	jmp	.LBB225_14
.LBB225_14:                             # %if.end35
                                        #   in Loop: Header=BB225_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB225_19
# %bb.15:                               # %if.then41
                                        #   in Loop: Header=BB225_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB225_18
# %bb.16:                               # %land.lhs.true46
                                        #   in Loop: Header=BB225_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB225_18
# %bb.17:                               # %if.then52
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB225_23
.LBB225_18:                             # %if.end56
                                        #   in Loop: Header=BB225_1 Depth=1
	jmp	.LBB225_19
.LBB225_19:                             # %if.end57
                                        #   in Loop: Header=BB225_1 Depth=1
	jmp	.LBB225_20
.LBB225_20:                             # %if.end58
                                        #   in Loop: Header=BB225_1 Depth=1
	jmp	.LBB225_21
.LBB225_21:                             # %for.inc
                                        #   in Loop: Header=BB225_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB225_1
.LBB225_22:                             # %for.end
	movq	$0, -24(%rbp)
.LBB225_23:                             # %return
	movq	-24(%rbp), %rbx
	cmpl	$355134476, -28(%rbp)   # imm = 0x152AEC0C
	jne	.LBB225_25
.LBB225_24:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB225_25:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB225_24
.Lfunc_end225:
	.size	get_long_term_pic.162, .Lfunc_end225-get_long_term_pic.162
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function reorder_short_term.163
	.type	reorder_short_term.163,@function
reorder_short_term.163:                 # @reorder_short_term.163
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1857975794, -44(%rbp)  # imm = 0x6EBE75F2
	movq	%rdi, -16(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movq	%rcx, -40(%rbp)
	movl	-28(%rbp), %edi
	callq	get_short_term_pic
	movq	%rax, -56(%rbp)
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB226_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-40(%rbp), %rcx
	cmpl	(%rcx), %eax
	jle	.LBB226_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB226_1 Depth=1
	movq	-16(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB226_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB226_1
.LBB226_4:                              # %for.end
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movl	(%rdx), %esi
	movl	%esi, %edi
	addl	$1, %edi
	movl	%edi, (%rdx)
	movslq	%esi, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB226_5:                              # %for.cond5
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jg	.LBB226_13
# %bb.6:                                # %for.body8
                                        #   in Loop: Header=BB226_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	je	.LBB226_11
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB226_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB226_9
# %bb.8:                                # %lor.lhs.false
                                        #   in Loop: Header=BB226_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6364(%rax), %eax
	cmpl	-28(%rbp), %eax
	je	.LBB226_10
.LBB226_9:                              # %if.then17
                                        #   in Loop: Header=BB226_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movl	-20(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -20(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB226_10:                             # %if.end
                                        #   in Loop: Header=BB226_5 Depth=1
	jmp	.LBB226_11
.LBB226_11:                             # %if.end23
                                        #   in Loop: Header=BB226_5 Depth=1
	jmp	.LBB226_12
.LBB226_12:                             # %for.inc24
                                        #   in Loop: Header=BB226_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB226_5
.LBB226_13:                             # %for.end26
	cmpl	$1857975794, -44(%rbp)  # imm = 0x6EBE75F2
	jne	.LBB226_15
.LBB226_14:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB226_15:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB226_14
.Lfunc_end226:
	.size	reorder_short_term.163, .Lfunc_end226-reorder_short_term.163
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function output_one_frame_from_dpb.164
	.type	output_one_frame_from_dpb.164,@function
output_one_frame_from_dpb.164:          # @output_one_frame_from_dpb.164
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$2078444028, -12(%rbp)  # imm = 0x7BE289FC
	cmpl	$1, dpb+28
	jae	.LBB227_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.30, %rdi
	movl	$150, %esi
	callq	error
.LBB227_2:                              # %if.end
	leaq	-8(%rbp), %rdi
	leaq	-4(%rbp), %rsi
	callq	get_smallest_poc
	cmpl	$-1, -4(%rbp)
	jne	.LBB227_4
# %bb.3:                                # %if.then2
	movabsq	$.L.str.31, %rdi
	movl	$150, %esi
	callq	error
.LBB227_4:                              # %if.end3
	movq	dpb, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	p_dec, %esi
	callq	write_stored_frame
	movl	dpb+40, %eax
	cmpl	-8(%rbp), %eax
	jl	.LBB227_6
# %bb.5:                                # %if.then5
	movabsq	$.L.str.32, %rdi
	movl	$150, %esi
	callq	error
.LBB227_6:                              # %if.end6
	movl	-8(%rbp), %eax
	movl	%eax, dpb+40
	movq	dpb, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	is_used_for_reference
	cmpl	$0, %eax
	jne	.LBB227_8
# %bb.7:                                # %if.then9
	movl	-4(%rbp), %edi
	callq	remove_frame_from_dpb
.LBB227_8:                              # %if.end10
	cmpl	$2078444028, -12(%rbp)  # imm = 0x7BE289FC
	jne	.LBB227_10
.LBB227_9:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB227_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB227_9
.Lfunc_end227:
	.size	output_one_frame_from_dpb.164, .Lfunc_end227-output_one_frame_from_dpb.164
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_poc_asc.165
	.type	compare_fs_by_poc_asc.165,@function
compare_fs_by_poc_asc.165:              # @compare_fs_by_poc_asc.165
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$339622086, -16(%rbp)   # imm = 0x143E38C6
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB228_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB228_5
.LBB228_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jle	.LBB228_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB228_5
.LBB228_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB228_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$339622086, -16(%rbp)   # imm = 0x143E38C6
	jne	.LBB228_7
.LBB228_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB228_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB228_6
.Lfunc_end228:
	.size	compare_fs_by_poc_asc.165, .Lfunc_end228-compare_fs_by_poc_asc.165
	.cfi_endproc
                                        # -- End function
	.globl	compute_colocated.166   # -- Begin function compute_colocated.166
	.p2align	4, 0x90
	.type	compute_colocated.166,@function
compute_colocated.166:                  # @compute_colocated.166
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$917512175, -72(%rbp)   # imm = 0x36B01FEF
	movq	%rdi, -24(%rbp)
	movq	%rsi, -56(%rbp)
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -40(%rbp)
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB229_2
# %bb.1:                                # %if.then
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-56(%rbp), %rax
	movq	40(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB229_11
.LBB229_2:                              # %if.else
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB229_10
# %bb.3:                                # %if.then6
	movq	img, %rax
	movl	28(%rax), %eax
	movq	-32(%rbp), %rcx
	cmpl	(%rcx), %eax
	je	.LBB229_9
# %bb.4:                                # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$0, 6412(%rax)
	je	.LBB229_9
# %bb.5:                                # %if.then11
	movq	img, %rax
	cmpl	$1, 28(%rax)
	jne	.LBB229_7
# %bb.6:                                # %if.then14
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	6528(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -40(%rbp)
	movq	%rax, -48(%rbp)
	jmp	.LBB229_8
.LBB229_7:                              # %if.else17
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	6536(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -40(%rbp)
	movq	%rax, -48(%rbp)
.LBB229_8:                              # %if.end
	jmp	.LBB229_9
.LBB229_9:                              # %if.end20
	jmp	.LBB229_10
.LBB229_10:                             # %if.end21
	jmp	.LBB229_11
.LBB229_11:                             # %if.end22
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB229_13
# %bb.12:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB229_29
.LBB229_13:                             # %if.then25
	movl	$0, -12(%rbp)
.LBB229_14:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB229_16 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB229_28
# %bb.15:                               # %for.body
                                        #   in Loop: Header=BB229_14 Depth=1
	movl	$0, -16(%rbp)
.LBB229_16:                             # %for.cond27
                                        #   Parent Loop BB229_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB229_26
# %bb.17:                               # %for.body30
                                        #   in Loop: Header=BB229_16 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB229_23
# %bb.18:                               # %land.lhs.true33
                                        #   in Loop: Header=BB229_16 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB229_23
# %bb.19:                               # %if.then38
                                        #   in Loop: Header=BB229_16 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-40(%rbp), %rax
	subl	4(%rax), %edi
	callq	abs
	movl	%eax, %ebx
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-48(%rbp), %rax
	subl	4(%rax), %edi
	callq	abs
	cmpl	%eax, %ebx
	jle	.LBB229_21
# %bb.20:                               # %if.then46
                                        #   in Loop: Header=BB229_16 Depth=2
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-48(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	jmp	.LBB229_22
.LBB229_21:                             # %if.else160
                                        #   in Loop: Header=BB229_16 Depth=2
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB229_22:                             # %if.end283
                                        #   in Loop: Header=BB229_16 Depth=2
	jmp	.LBB229_24
.LBB229_23:                             # %if.else284
                                        #   in Loop: Header=BB229_16 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB229_24:                             # %if.end391
                                        #   in Loop: Header=BB229_16 Depth=2
	jmp	.LBB229_25
.LBB229_25:                             # %for.inc
                                        #   in Loop: Header=BB229_16 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB229_16
.LBB229_26:                             # %for.end
                                        #   in Loop: Header=BB229_14 Depth=1
	jmp	.LBB229_27
.LBB229_27:                             # %for.inc392
                                        #   in Loop: Header=BB229_14 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB229_14
.LBB229_28:                             # %for.end394
	jmp	.LBB229_29
.LBB229_29:                             # %if.end395
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB229_31
# %bb.30:                               # %lor.lhs.false398
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB229_241
.LBB229_31:                             # %if.then401
	movl	$0, -16(%rbp)
.LBB229_32:                             # %for.cond402
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB229_34 Depth 2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB229_240
# %bb.33:                               # %for.body407
                                        #   in Loop: Header=BB229_32 Depth=1
	movl	$0, -12(%rbp)
.LBB229_34:                             # %for.cond408
                                        #   Parent Loop BB229_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB229_238
# %bb.35:                               # %for.body413
                                        #   in Loop: Header=BB229_34 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB229_114
# %bb.36:                               # %if.then416
                                        #   in Loop: Header=BB229_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB229_38
# %bb.37:                               # %cond.true
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB229_39
.LBB229_38:                             # %cond.false
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB229_39:                             # %cond.end
                                        #   in Loop: Header=BB229_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB229_41
# %bb.40:                               # %cond.true425
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB229_42
.LBB229_41:                             # %cond.false427
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB229_42:                             # %cond.end429
                                        #   in Loop: Header=BB229_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB229_44
# %bb.43:                               # %cond.true445
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB229_45
.LBB229_44:                             # %cond.false447
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB229_45:                             # %cond.end449
                                        #   in Loop: Header=BB229_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB229_47
# %bb.46:                               # %cond.true455
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB229_48
.LBB229_47:                             # %cond.false457
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB229_48:                             # %cond.end459
                                        #   in Loop: Header=BB229_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB229_50
# %bb.49:                               # %cond.true475
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB229_51
.LBB229_50:                             # %cond.false477
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB229_51:                             # %cond.end479
                                        #   in Loop: Header=BB229_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB229_53
# %bb.52:                               # %cond.true485
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB229_54
.LBB229_53:                             # %cond.false487
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB229_54:                             # %cond.end489
                                        #   in Loop: Header=BB229_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB229_56
# %bb.55:                               # %cond.true505
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB229_57
.LBB229_56:                             # %cond.false507
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB229_57:                             # %cond.end509
                                        #   in Loop: Header=BB229_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB229_59
# %bb.58:                               # %cond.true515
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB229_60
.LBB229_59:                             # %cond.false517
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB229_60:                             # %cond.end519
                                        #   in Loop: Header=BB229_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB229_62
# %bb.61:                               # %cond.true535
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB229_63
.LBB229_62:                             # %cond.false537
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB229_63:                             # %cond.end539
                                        #   in Loop: Header=BB229_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB229_65
# %bb.64:                               # %cond.true545
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB229_66
.LBB229_65:                             # %cond.false547
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB229_66:                             # %cond.end549
                                        #   in Loop: Header=BB229_34 Depth=2
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB229_68
# %bb.67:                               # %if.then556
                                        #   in Loop: Header=BB229_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	$-1, (%rax,%rcx,8)
	jmp	.LBB229_81
.LBB229_68:                             # %if.else569
                                        #   in Loop: Header=BB229_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB229_70
# %bb.69:                               # %cond.true574
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB229_71
.LBB229_70:                             # %cond.false576
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB229_71:                             # %cond.end578
                                        #   in Loop: Header=BB229_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB229_73
# %bb.72:                               # %cond.true584
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB229_74
.LBB229_73:                             # %cond.false586
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB229_74:                             # %cond.end588
                                        #   in Loop: Header=BB229_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB229_76
# %bb.75:                               # %cond.true602
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB229_77
.LBB229_76:                             # %cond.false604
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB229_77:                             # %cond.end606
                                        #   in Loop: Header=BB229_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB229_79
# %bb.78:                               # %cond.true612
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB229_80
.LBB229_79:                             # %cond.false614
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB229_80:                             # %cond.end616
                                        #   in Loop: Header=BB229_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB229_81:                             # %if.end626
                                        #   in Loop: Header=BB229_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB229_83
# %bb.82:                               # %cond.true631
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB229_84
.LBB229_83:                             # %cond.false633
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB229_84:                             # %cond.end635
                                        #   in Loop: Header=BB229_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB229_86
# %bb.85:                               # %cond.true641
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB229_87
.LBB229_86:                             # %cond.false643
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB229_87:                             # %cond.end645
                                        #   in Loop: Header=BB229_34 Depth=2
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB229_89
# %bb.88:                               # %if.then652
                                        #   in Loop: Header=BB229_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	$-1, (%rax,%rcx,8)
	jmp	.LBB229_102
.LBB229_89:                             # %if.else665
                                        #   in Loop: Header=BB229_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB229_91
# %bb.90:                               # %cond.true670
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB229_92
.LBB229_91:                             # %cond.false672
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB229_92:                             # %cond.end674
                                        #   in Loop: Header=BB229_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB229_94
# %bb.93:                               # %cond.true680
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB229_95
.LBB229_94:                             # %cond.false682
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB229_95:                             # %cond.end684
                                        #   in Loop: Header=BB229_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB229_97
# %bb.96:                               # %cond.true698
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB229_98
.LBB229_97:                             # %cond.false700
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB229_98:                             # %cond.end702
                                        #   in Loop: Header=BB229_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB229_100
# %bb.99:                               # %cond.true708
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB229_101
.LBB229_100:                            # %cond.false710
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB229_101:                            # %cond.end712
                                        #   in Loop: Header=BB229_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB229_102:                            # %if.end722
                                        #   in Loop: Header=BB229_34 Depth=2
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB229_113
# %bb.103:                              # %if.then727
                                        #   in Loop: Header=BB229_34 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 4864(%rax)
	jne	.LBB229_107
# %bb.104:                              # %land.lhs.true730
                                        #   in Loop: Header=BB229_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB229_107
# %bb.105:                              # %land.lhs.true740
                                        #   in Loop: Header=BB229_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB229_107
# %bb.106:                              # %land.lhs.true752
                                        #   in Loop: Header=BB229_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB229_112
.LBB229_107:                            # %lor.rhs
                                        #   in Loop: Header=BB229_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB229_111
# %bb.108:                              # %land.lhs.true774
                                        #   in Loop: Header=BB229_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB229_111
# %bb.109:                              # %land.lhs.true784
                                        #   in Loop: Header=BB229_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB229_111
# %bb.110:                              # %land.rhs
                                        #   in Loop: Header=BB229_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB229_111:                            # %land.end
                                        #   in Loop: Header=BB229_34 Depth=2
.LBB229_112:                            # %lor.end
                                        #   in Loop: Header=BB229_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	1624(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB229_113:                            # %if.end814
                                        #   in Loop: Header=BB229_34 Depth=2
	jmp	.LBB229_236
.LBB229_114:                            # %if.else815
                                        #   in Loop: Header=BB229_34 Depth=2
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB229_116
# %bb.115:                              # %cond.true820
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB229_117
.LBB229_116:                            # %cond.false822
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB229_117:                            # %cond.end824
                                        #   in Loop: Header=BB229_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB229_119
# %bb.118:                              # %cond.true830
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB229_120
.LBB229_119:                            # %cond.false832
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB229_120:                            # %cond.end834
                                        #   in Loop: Header=BB229_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB229_122
# %bb.121:                              # %cond.true849
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB229_123
.LBB229_122:                            # %cond.false851
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB229_123:                            # %cond.end853
                                        #   in Loop: Header=BB229_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB229_125
# %bb.124:                              # %cond.true859
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB229_126
.LBB229_125:                            # %cond.false861
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB229_126:                            # %cond.end863
                                        #   in Loop: Header=BB229_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB229_128
# %bb.127:                              # %cond.true879
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB229_129
.LBB229_128:                            # %cond.false881
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB229_129:                            # %cond.end883
                                        #   in Loop: Header=BB229_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB229_131
# %bb.130:                              # %cond.true889
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB229_132
.LBB229_131:                            # %cond.false891
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB229_132:                            # %cond.end893
                                        #   in Loop: Header=BB229_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB229_134
# %bb.133:                              # %cond.true909
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB229_135
.LBB229_134:                            # %cond.false911
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB229_135:                            # %cond.end913
                                        #   in Loop: Header=BB229_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB229_137
# %bb.136:                              # %cond.true919
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB229_138
.LBB229_137:                            # %cond.false921
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB229_138:                            # %cond.end923
                                        #   in Loop: Header=BB229_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB229_140
# %bb.139:                              # %cond.true939
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB229_141
.LBB229_140:                            # %cond.false941
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB229_141:                            # %cond.end943
                                        #   in Loop: Header=BB229_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB229_143
# %bb.142:                              # %cond.true949
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB229_144
.LBB229_143:                            # %cond.false951
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB229_144:                            # %cond.end953
                                        #   in Loop: Header=BB229_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	4832(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB229_146
# %bb.145:                              # %cond.true966
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB229_147
.LBB229_146:                            # %cond.false968
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB229_147:                            # %cond.end970
                                        #   in Loop: Header=BB229_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB229_149
# %bb.148:                              # %cond.true976
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB229_150
.LBB229_149:                            # %cond.false978
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB229_150:                            # %cond.end980
                                        #   in Loop: Header=BB229_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	4832(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-40(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB229_152
# %bb.151:                              # %cond.true994
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB229_153
.LBB229_152:                            # %cond.false996
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB229_153:                            # %cond.end998
                                        #   in Loop: Header=BB229_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB229_155
# %bb.154:                              # %cond.true1004
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB229_156
.LBB229_155:                            # %cond.false1006
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB229_156:                            # %cond.end1008
                                        #   in Loop: Header=BB229_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	4840(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB229_158
# %bb.157:                              # %cond.true1021
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB229_159
.LBB229_158:                            # %cond.false1023
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB229_159:                            # %cond.end1025
                                        #   in Loop: Header=BB229_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB229_161
# %bb.160:                              # %cond.true1031
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB229_162
.LBB229_161:                            # %cond.false1033
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB229_162:                            # %cond.end1035
                                        #   in Loop: Header=BB229_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	4840(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB229_173
# %bb.163:                              # %if.then1048
                                        #   in Loop: Header=BB229_34 Depth=2
	movq	-40(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB229_167
# %bb.164:                              # %land.lhs.true1051
                                        #   in Loop: Header=BB229_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB229_167
# %bb.165:                              # %land.lhs.true1061
                                        #   in Loop: Header=BB229_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB229_167
# %bb.166:                              # %land.lhs.true1074
                                        #   in Loop: Header=BB229_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB229_172
.LBB229_167:                            # %lor.rhs1087
                                        #   in Loop: Header=BB229_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB229_171
# %bb.168:                              # %land.lhs.true1097
                                        #   in Loop: Header=BB229_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB229_171
# %bb.169:                              # %land.lhs.true1107
                                        #   in Loop: Header=BB229_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB229_171
# %bb.170:                              # %land.rhs1120
                                        #   in Loop: Header=BB229_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB229_171:                            # %land.end1133
                                        #   in Loop: Header=BB229_34 Depth=2
.LBB229_172:                            # %lor.end1134
                                        #   in Loop: Header=BB229_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	4856(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB229_173:                            # %if.end1142
                                        #   in Loop: Header=BB229_34 Depth=2
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB229_175
# %bb.174:                              # %cond.true1147
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB229_176
.LBB229_175:                            # %cond.false1149
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB229_176:                            # %cond.end1151
                                        #   in Loop: Header=BB229_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB229_178
# %bb.177:                              # %cond.true1157
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB229_179
.LBB229_178:                            # %cond.false1159
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB229_179:                            # %cond.end1161
                                        #   in Loop: Header=BB229_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB229_181
# %bb.180:                              # %cond.true1176
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB229_182
.LBB229_181:                            # %cond.false1178
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB229_182:                            # %cond.end1180
                                        #   in Loop: Header=BB229_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB229_184
# %bb.183:                              # %cond.true1186
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB229_185
.LBB229_184:                            # %cond.false1188
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB229_185:                            # %cond.end1190
                                        #   in Loop: Header=BB229_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB229_187
# %bb.186:                              # %cond.true1206
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB229_188
.LBB229_187:                            # %cond.false1208
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB229_188:                            # %cond.end1210
                                        #   in Loop: Header=BB229_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB229_190
# %bb.189:                              # %cond.true1216
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB229_191
.LBB229_190:                            # %cond.false1218
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB229_191:                            # %cond.end1220
                                        #   in Loop: Header=BB229_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB229_193
# %bb.192:                              # %cond.true1236
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB229_194
.LBB229_193:                            # %cond.false1238
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB229_194:                            # %cond.end1240
                                        #   in Loop: Header=BB229_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB229_196
# %bb.195:                              # %cond.true1246
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB229_197
.LBB229_196:                            # %cond.false1248
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB229_197:                            # %cond.end1250
                                        #   in Loop: Header=BB229_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB229_199
# %bb.198:                              # %cond.true1266
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB229_200
.LBB229_199:                            # %cond.false1268
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB229_200:                            # %cond.end1270
                                        #   in Loop: Header=BB229_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB229_202
# %bb.201:                              # %cond.true1276
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB229_203
.LBB229_202:                            # %cond.false1278
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB229_203:                            # %cond.end1280
                                        #   in Loop: Header=BB229_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	3216(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB229_205
# %bb.204:                              # %cond.true1293
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB229_206
.LBB229_205:                            # %cond.false1295
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB229_206:                            # %cond.end1297
                                        #   in Loop: Header=BB229_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB229_208
# %bb.207:                              # %cond.true1303
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB229_209
.LBB229_208:                            # %cond.false1305
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB229_209:                            # %cond.end1307
                                        #   in Loop: Header=BB229_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	3216(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-48(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB229_211
# %bb.210:                              # %cond.true1321
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB229_212
.LBB229_211:                            # %cond.false1323
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB229_212:                            # %cond.end1325
                                        #   in Loop: Header=BB229_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB229_214
# %bb.213:                              # %cond.true1331
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB229_215
.LBB229_214:                            # %cond.false1333
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB229_215:                            # %cond.end1335
                                        #   in Loop: Header=BB229_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	3224(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-48(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB229_217
# %bb.216:                              # %cond.true1348
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB229_218
.LBB229_217:                            # %cond.false1350
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB229_218:                            # %cond.end1352
                                        #   in Loop: Header=BB229_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB229_220
# %bb.219:                              # %cond.true1358
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB229_221
.LBB229_220:                            # %cond.false1360
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB229_221:                            # %cond.end1362
                                        #   in Loop: Header=BB229_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	3224(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB229_232
# %bb.222:                              # %if.then1375
                                        #   in Loop: Header=BB229_34 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB229_226
# %bb.223:                              # %land.lhs.true1378
                                        #   in Loop: Header=BB229_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB229_226
# %bb.224:                              # %land.lhs.true1388
                                        #   in Loop: Header=BB229_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB229_226
# %bb.225:                              # %land.lhs.true1401
                                        #   in Loop: Header=BB229_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB229_231
.LBB229_226:                            # %lor.rhs1414
                                        #   in Loop: Header=BB229_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB229_230
# %bb.227:                              # %land.lhs.true1424
                                        #   in Loop: Header=BB229_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB229_230
# %bb.228:                              # %land.lhs.true1434
                                        #   in Loop: Header=BB229_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB229_230
# %bb.229:                              # %land.rhs1447
                                        #   in Loop: Header=BB229_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB229_230:                            # %land.end1460
                                        #   in Loop: Header=BB229_34 Depth=2
.LBB229_231:                            # %lor.end1461
                                        #   in Loop: Header=BB229_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	3240(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB229_232:                            # %if.end1469
                                        #   in Loop: Header=BB229_34 Depth=2
	movq	img, %rax
	cmpl	$0, 71996(%rax)
	jne	.LBB229_235
# %bb.233:                              # %land.lhs.true1473
                                        #   in Loop: Header=BB229_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB229_235
# %bb.234:                              # %if.then1481
                                        #   in Loop: Header=BB229_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
.LBB229_235:                            # %if.end1522
                                        #   in Loop: Header=BB229_34 Depth=2
	jmp	.LBB229_236
.LBB229_236:                            # %if.end1523
                                        #   in Loop: Header=BB229_34 Depth=2
	jmp	.LBB229_237
.LBB229_237:                            # %for.inc1524
                                        #   in Loop: Header=BB229_34 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB229_34
.LBB229_238:                            # %for.end1526
                                        #   in Loop: Header=BB229_32 Depth=1
	jmp	.LBB229_239
.LBB229_239:                            # %for.inc1527
                                        #   in Loop: Header=BB229_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB229_32
.LBB229_240:                            # %for.end1529
	jmp	.LBB229_241
.LBB229_241:                            # %if.end1530
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB229_243
# %bb.242:                              # %lor.lhs.false1533
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB229_259
.LBB229_243:                            # %if.then1536
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB229_258
# %bb.244:                              # %if.then1539
	movl	$0, -12(%rbp)
.LBB229_245:                            # %for.cond1540
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB229_247 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB229_257
# %bb.246:                              # %for.body1545
                                        #   in Loop: Header=BB229_245 Depth=1
	movl	$0, -16(%rbp)
.LBB229_247:                            # %for.cond1546
                                        #   Parent Loop BB229_245 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB229_255
# %bb.248:                              # %for.body1551
                                        #   in Loop: Header=BB229_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB229_253
# %bb.249:                              # %if.then1558
                                        #   in Loop: Header=BB229_247 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	subl	4(%rax), %edi
	callq	abs
	movl	%eax, %ebx
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	subl	4(%rax), %edi
	callq	abs
	cmpl	%eax, %ebx
	jle	.LBB229_251
# %bb.250:                              # %if.then1571
                                        #   in Loop: Header=BB229_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	jmp	.LBB229_252
.LBB229_251:                            # %if.else1699
                                        #   in Loop: Header=BB229_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB229_252:                            # %if.end1829
                                        #   in Loop: Header=BB229_247 Depth=2
	jmp	.LBB229_253
.LBB229_253:                            # %if.end1830
                                        #   in Loop: Header=BB229_247 Depth=2
	jmp	.LBB229_254
.LBB229_254:                            # %for.inc1831
                                        #   in Loop: Header=BB229_247 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB229_247
.LBB229_255:                            # %for.end1833
                                        #   in Loop: Header=BB229_245 Depth=1
	jmp	.LBB229_256
.LBB229_256:                            # %for.inc1834
                                        #   in Loop: Header=BB229_245 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB229_245
.LBB229_257:                            # %for.end1836
	jmp	.LBB229_258
.LBB229_258:                            # %if.end1837
	jmp	.LBB229_259
.LBB229_259:                            # %if.end1838
	movl	$0, -12(%rbp)
.LBB229_260:                            # %for.cond1839
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB229_262 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB229_330
# %bb.261:                              # %for.body1844
                                        #   in Loop: Header=BB229_260 Depth=1
	movl	$0, -16(%rbp)
.LBB229_262:                            # %for.cond1845
                                        #   Parent Loop BB229_260 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB229_328
# %bb.263:                              # %for.body1850
                                        #   in Loop: Header=BB229_262 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB229_265
# %bb.264:                              # %lor.lhs.false1853
                                        #   in Loop: Header=BB229_262 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB229_314
.LBB229_265:                            # %if.then1856
                                        #   in Loop: Header=BB229_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB229_267
# %bb.266:                              # %cond.true1861
                                        #   in Loop: Header=BB229_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB229_268
.LBB229_267:                            # %cond.false1863
                                        #   in Loop: Header=BB229_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB229_268:                            # %cond.end1865
                                        #   in Loop: Header=BB229_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB229_270
# %bb.269:                              # %cond.true1871
                                        #   in Loop: Header=BB229_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB229_271
.LBB229_270:                            # %cond.false1873
                                        #   in Loop: Header=BB229_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB229_271:                            # %cond.end1875
                                        #   in Loop: Header=BB229_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB229_273
# %bb.272:                              # %cond.true1891
                                        #   in Loop: Header=BB229_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB229_274
.LBB229_273:                            # %cond.false1893
                                        #   in Loop: Header=BB229_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB229_274:                            # %cond.end1895
                                        #   in Loop: Header=BB229_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB229_276
# %bb.275:                              # %cond.true1901
                                        #   in Loop: Header=BB229_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB229_277
.LBB229_276:                            # %cond.false1903
                                        #   in Loop: Header=BB229_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB229_277:                            # %cond.end1905
                                        #   in Loop: Header=BB229_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB229_279
# %bb.278:                              # %cond.true1921
                                        #   in Loop: Header=BB229_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB229_280
.LBB229_279:                            # %cond.false1923
                                        #   in Loop: Header=BB229_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB229_280:                            # %cond.end1925
                                        #   in Loop: Header=BB229_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB229_282
# %bb.281:                              # %cond.true1931
                                        #   in Loop: Header=BB229_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB229_283
.LBB229_282:                            # %cond.false1933
                                        #   in Loop: Header=BB229_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB229_283:                            # %cond.end1935
                                        #   in Loop: Header=BB229_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB229_285
# %bb.284:                              # %cond.true1951
                                        #   in Loop: Header=BB229_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB229_286
.LBB229_285:                            # %cond.false1953
                                        #   in Loop: Header=BB229_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB229_286:                            # %cond.end1955
                                        #   in Loop: Header=BB229_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB229_288
# %bb.287:                              # %cond.true1961
                                        #   in Loop: Header=BB229_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB229_289
.LBB229_288:                            # %cond.false1963
                                        #   in Loop: Header=BB229_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB229_289:                            # %cond.end1965
                                        #   in Loop: Header=BB229_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB229_291
# %bb.290:                              # %cond.true1981
                                        #   in Loop: Header=BB229_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB229_292
.LBB229_291:                            # %cond.false1983
                                        #   in Loop: Header=BB229_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB229_292:                            # %cond.end1985
                                        #   in Loop: Header=BB229_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB229_294
# %bb.293:                              # %cond.true1991
                                        #   in Loop: Header=BB229_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB229_295
.LBB229_294:                            # %cond.false1993
                                        #   in Loop: Header=BB229_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB229_295:                            # %cond.end1995
                                        #   in Loop: Header=BB229_262 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB229_297
# %bb.296:                              # %cond.true2009
                                        #   in Loop: Header=BB229_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB229_298
.LBB229_297:                            # %cond.false2011
                                        #   in Loop: Header=BB229_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB229_298:                            # %cond.end2013
                                        #   in Loop: Header=BB229_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB229_300
# %bb.299:                              # %cond.true2019
                                        #   in Loop: Header=BB229_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB229_301
.LBB229_300:                            # %cond.false2021
                                        #   in Loop: Header=BB229_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB229_301:                            # %cond.end2023
                                        #   in Loop: Header=BB229_262 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB229_303
# %bb.302:                              # %cond.true2037
                                        #   in Loop: Header=BB229_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB229_304
.LBB229_303:                            # %cond.false2039
                                        #   in Loop: Header=BB229_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB229_304:                            # %cond.end2041
                                        #   in Loop: Header=BB229_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB229_306
# %bb.305:                              # %cond.true2047
                                        #   in Loop: Header=BB229_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB229_307
.LBB229_306:                            # %cond.false2049
                                        #   in Loop: Header=BB229_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB229_307:                            # %cond.end2051
                                        #   in Loop: Header=BB229_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB229_309
# %bb.308:                              # %cond.true2065
                                        #   in Loop: Header=BB229_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB229_310
.LBB229_309:                            # %cond.false2067
                                        #   in Loop: Header=BB229_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB229_310:                            # %cond.end2069
                                        #   in Loop: Header=BB229_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB229_312
# %bb.311:                              # %cond.true2075
                                        #   in Loop: Header=BB229_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB229_313
.LBB229_312:                            # %cond.false2077
                                        #   in Loop: Header=BB229_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB229_313:                            # %cond.end2079
                                        #   in Loop: Header=BB229_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB229_315
.LBB229_314:                            # %if.else2089
                                        #   in Loop: Header=BB229_262 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB229_315:                            # %if.end2194
                                        #   in Loop: Header=BB229_262 Depth=2
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB229_326
# %bb.316:                              # %if.then2200
                                        #   in Loop: Header=BB229_262 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 4864(%rax)
	jne	.LBB229_320
# %bb.317:                              # %land.lhs.true2203
                                        #   in Loop: Header=BB229_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB229_320
# %bb.318:                              # %land.lhs.true2213
                                        #   in Loop: Header=BB229_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB229_320
# %bb.319:                              # %land.lhs.true2226
                                        #   in Loop: Header=BB229_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB229_325
.LBB229_320:                            # %lor.rhs2239
                                        #   in Loop: Header=BB229_262 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB229_324
# %bb.321:                              # %land.lhs.true2249
                                        #   in Loop: Header=BB229_262 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB229_324
# %bb.322:                              # %land.lhs.true2259
                                        #   in Loop: Header=BB229_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB229_324
# %bb.323:                              # %land.rhs2272
                                        #   in Loop: Header=BB229_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB229_324:                            # %land.end2285
                                        #   in Loop: Header=BB229_262 Depth=2
.LBB229_325:                            # %lor.end2286
                                        #   in Loop: Header=BB229_262 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	1624(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB229_326:                            # %if.end2295
                                        #   in Loop: Header=BB229_262 Depth=2
	jmp	.LBB229_327
.LBB229_327:                            # %for.inc2296
                                        #   in Loop: Header=BB229_262 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB229_262
.LBB229_328:                            # %for.end2298
                                        #   in Loop: Header=BB229_260 Depth=1
	jmp	.LBB229_329
.LBB229_329:                            # %for.inc2299
                                        #   in Loop: Header=BB229_260 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB229_260
.LBB229_330:                            # %for.end2301
	movq	img, %rax
	cmpl	$0, 71996(%rax)
	jne	.LBB229_397
# %bb.331:                              # %if.then2305
	movl	$0, -12(%rbp)
.LBB229_332:                            # %for.cond2306
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB229_334 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB229_349
# %bb.333:                              # %for.body2311
                                        #   in Loop: Header=BB229_332 Depth=1
	movl	$0, -16(%rbp)
.LBB229_334:                            # %for.cond2312
                                        #   Parent Loop BB229_332 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB229_347
# %bb.335:                              # %for.body2317
                                        #   in Loop: Header=BB229_334 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB229_338
# %bb.336:                              # %land.lhs.true2320
                                        #   in Loop: Header=BB229_334 Depth=2
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB229_338
# %bb.337:                              # %land.lhs.true2323
                                        #   in Loop: Header=BB229_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB229_340
.LBB229_338:                            # %lor.lhs.false2331
                                        #   in Loop: Header=BB229_334 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB229_341
# %bb.339:                              # %land.lhs.true2334
                                        #   in Loop: Header=BB229_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB229_341
.LBB229_340:                            # %if.then2342
                                        #   in Loop: Header=BB229_334 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %ecx
	shll	$1, %ecx
	movw	%cx, 2(%rax)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %ecx
	shll	$1, %ecx
	movw	%cx, 2(%rax)
	jmp	.LBB229_345
.LBB229_341:                            # %if.else2363
                                        #   in Loop: Header=BB229_334 Depth=2
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB229_344
# %bb.342:                              # %land.lhs.true2366
                                        #   in Loop: Header=BB229_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB229_344
# %bb.343:                              # %if.then2373
                                        #   in Loop: Header=BB229_334 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movswl	2(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movswl	2(%rcx), %eax
	cltd
	idivl	%esi
	movw	%ax, 2(%rcx)
.LBB229_344:                            # %if.end2394
                                        #   in Loop: Header=BB229_334 Depth=2
	jmp	.LBB229_345
.LBB229_345:                            # %if.end2395
                                        #   in Loop: Header=BB229_334 Depth=2
	jmp	.LBB229_346
.LBB229_346:                            # %for.inc2396
                                        #   in Loop: Header=BB229_334 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB229_334
.LBB229_347:                            # %for.end2398
                                        #   in Loop: Header=BB229_332 Depth=1
	jmp	.LBB229_348
.LBB229_348:                            # %for.inc2399
                                        #   in Loop: Header=BB229_332 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB229_332
.LBB229_349:                            # %for.end2401
	movl	$0, -12(%rbp)
.LBB229_350:                            # %for.cond2402
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB229_352 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	72400(%rcx), %ecx
	shll	$2, %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB229_396
# %bb.351:                              # %for.body2408
                                        #   in Loop: Header=BB229_350 Depth=1
	movl	$0, -16(%rbp)
.LBB229_352:                            # %for.cond2409
                                        #   Parent Loop BB229_350 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB229_394
# %bb.353:                              # %for.body2414
                                        #   in Loop: Header=BB229_352 Depth=2
	cmpl	$0, -12(%rbp)
	jne	.LBB229_361
# %bb.354:                              # %if.then2417
                                        #   in Loop: Header=BB229_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB229_356
# %bb.355:                              # %cond.true2428
                                        #   in Loop: Header=BB229_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB229_360
.LBB229_356:                            # %cond.false2429
                                        #   in Loop: Header=BB229_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB229_358
# %bb.357:                              # %cond.true2440
                                        #   in Loop: Header=BB229_352 Depth=2
	movl	$127, %eax
	jmp	.LBB229_359
.LBB229_358:                            # %cond.false2441
                                        #   in Loop: Header=BB229_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB229_359:                            # %cond.end2450
                                        #   in Loop: Header=BB229_352 Depth=2
.LBB229_360:                            # %cond.end2452
                                        #   in Loop: Header=BB229_352 Depth=2
	movl	%eax, -60(%rbp)
	jmp	.LBB229_377
.LBB229_361:                            # %if.else2454
                                        #   in Loop: Header=BB229_352 Depth=2
	cmpl	$2, -12(%rbp)
	jne	.LBB229_369
# %bb.362:                              # %if.then2457
                                        #   in Loop: Header=BB229_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB229_364
# %bb.363:                              # %cond.true2467
                                        #   in Loop: Header=BB229_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB229_368
.LBB229_364:                            # %cond.false2468
                                        #   in Loop: Header=BB229_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB229_366
# %bb.365:                              # %cond.true2479
                                        #   in Loop: Header=BB229_352 Depth=2
	movl	$127, %eax
	jmp	.LBB229_367
.LBB229_366:                            # %cond.false2480
                                        #   in Loop: Header=BB229_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB229_367:                            # %cond.end2489
                                        #   in Loop: Header=BB229_352 Depth=2
.LBB229_368:                            # %cond.end2491
                                        #   in Loop: Header=BB229_352 Depth=2
	movl	%eax, -60(%rbp)
	jmp	.LBB229_376
.LBB229_369:                            # %if.else2493
                                        #   in Loop: Header=BB229_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB229_371
# %bb.370:                              # %cond.true2503
                                        #   in Loop: Header=BB229_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB229_375
.LBB229_371:                            # %cond.false2504
                                        #   in Loop: Header=BB229_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB229_373
# %bb.372:                              # %cond.true2515
                                        #   in Loop: Header=BB229_352 Depth=2
	movl	$127, %eax
	jmp	.LBB229_374
.LBB229_373:                            # %cond.false2516
                                        #   in Loop: Header=BB229_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB229_374:                            # %cond.end2525
                                        #   in Loop: Header=BB229_352 Depth=2
.LBB229_375:                            # %cond.end2527
                                        #   in Loop: Header=BB229_352 Depth=2
	movl	%eax, -60(%rbp)
.LBB229_376:                            # %if.end2529
                                        #   in Loop: Header=BB229_352 Depth=2
	jmp	.LBB229_377
.LBB229_377:                            # %if.end2530
                                        #   in Loop: Header=BB229_352 Depth=2
	movq	-56(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB229_379
# %bb.378:                              # %cond.true2545
                                        #   in Loop: Header=BB229_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB229_383
.LBB229_379:                            # %cond.false2546
                                        #   in Loop: Header=BB229_352 Depth=2
	movq	-56(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB229_381
# %bb.380:                              # %cond.true2561
                                        #   in Loop: Header=BB229_352 Depth=2
	movl	$127, %eax
	jmp	.LBB229_382
.LBB229_381:                            # %cond.false2562
                                        #   in Loop: Header=BB229_352 Depth=2
	movq	-56(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB229_382:                            # %cond.end2575
                                        #   in Loop: Header=BB229_352 Depth=2
.LBB229_383:                            # %cond.end2577
                                        #   in Loop: Header=BB229_352 Depth=2
	movl	%eax, -64(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB229_391
# %bb.384:                              # %if.then2581
                                        #   in Loop: Header=BB229_352 Depth=2
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-64(%rbp)
	movl	%eax, -68(%rbp)
	movl	-60(%rbp), %eax
	imull	-68(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB229_386
# %bb.385:                              # %cond.true2591
                                        #   in Loop: Header=BB229_352 Depth=2
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB229_390
.LBB229_386:                            # %cond.false2592
                                        #   in Loop: Header=BB229_352 Depth=2
	movl	-60(%rbp), %eax
	imull	-68(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB229_388
# %bb.387:                              # %cond.true2598
                                        #   in Loop: Header=BB229_352 Depth=2
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB229_389
.LBB229_388:                            # %cond.false2599
                                        #   in Loop: Header=BB229_352 Depth=2
	movl	-60(%rbp), %eax
	imull	-68(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB229_389:                            # %cond.end2603
                                        #   in Loop: Header=BB229_352 Depth=2
.LBB229_390:                            # %cond.end2605
                                        #   in Loop: Header=BB229_352 Depth=2
	movq	img, %rcx
	addq	$72016, %rcx            # imm = 0x11950
	movslq	-12(%rbp), %rdx
	imulq	$60, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB229_392
.LBB229_391:                            # %if.else2611
                                        #   in Loop: Header=BB229_352 Depth=2
	movq	img, %rax
	addq	$72016, %rax            # imm = 0x11950
	movslq	-12(%rbp), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$9999, (%rax,%rcx,4)    # imm = 0x270F
.LBB229_392:                            # %if.end2617
                                        #   in Loop: Header=BB229_352 Depth=2
	jmp	.LBB229_393
.LBB229_393:                            # %for.inc2618
                                        #   in Loop: Header=BB229_352 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB229_352
.LBB229_394:                            # %for.end2620
                                        #   in Loop: Header=BB229_350 Depth=1
	jmp	.LBB229_395
.LBB229_395:                            # %for.inc2621
                                        #   in Loop: Header=BB229_350 Depth=1
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB229_350
.LBB229_396:                            # %for.end2623
	jmp	.LBB229_397
.LBB229_397:                            # %if.end2624
	cmpl	$917512175, -72(%rbp)   # imm = 0x36B01FEF
	jne	.LBB229_399
.LBB229_398:
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB229_399:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB229_398
.Lfunc_end229:
	.size	compute_colocated.166, .Lfunc_end229-compute_colocated.166
	.cfi_endproc
                                        # -- End function
	.globl	compute_colocated.167   # -- Begin function compute_colocated.167
	.p2align	4, 0x90
	.type	compute_colocated.167,@function
compute_colocated.167:                  # @compute_colocated.167
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$1472009941, -72(%rbp)  # imm = 0x57BD16D5
	movq	%rdi, -24(%rbp)
	movq	%rsi, -40(%rbp)
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -48(%rbp)
	movq	%rax, -56(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB230_2
# %bb.1:                                # %if.then
	movq	-40(%rbp), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-40(%rbp), %rax
	movq	40(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	jmp	.LBB230_11
.LBB230_2:                              # %if.else
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB230_10
# %bb.3:                                # %if.then6
	movq	img, %rax
	movl	28(%rax), %eax
	movq	-32(%rbp), %rcx
	cmpl	(%rcx), %eax
	je	.LBB230_9
# %bb.4:                                # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$0, 6412(%rax)
	je	.LBB230_9
# %bb.5:                                # %if.then11
	movq	img, %rax
	cmpl	$1, 28(%rax)
	jne	.LBB230_7
# %bb.6:                                # %if.then14
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	6528(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -48(%rbp)
	movq	%rax, -56(%rbp)
	jmp	.LBB230_8
.LBB230_7:                              # %if.else17
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	6536(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -48(%rbp)
	movq	%rax, -56(%rbp)
.LBB230_8:                              # %if.end
	jmp	.LBB230_9
.LBB230_9:                              # %if.end20
	jmp	.LBB230_10
.LBB230_10:                             # %if.end21
	jmp	.LBB230_11
.LBB230_11:                             # %if.end22
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB230_13
# %bb.12:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB230_29
.LBB230_13:                             # %if.then25
	movl	$0, -12(%rbp)
.LBB230_14:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB230_16 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB230_28
# %bb.15:                               # %for.body
                                        #   in Loop: Header=BB230_14 Depth=1
	movl	$0, -16(%rbp)
.LBB230_16:                             # %for.cond27
                                        #   Parent Loop BB230_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB230_26
# %bb.17:                               # %for.body30
                                        #   in Loop: Header=BB230_16 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB230_23
# %bb.18:                               # %land.lhs.true33
                                        #   in Loop: Header=BB230_16 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB230_23
# %bb.19:                               # %if.then38
                                        #   in Loop: Header=BB230_16 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-48(%rbp), %rax
	subl	4(%rax), %edi
	callq	abs
	movl	%eax, %ebx
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-56(%rbp), %rax
	subl	4(%rax), %edi
	callq	abs
	cmpl	%eax, %ebx
	jle	.LBB230_21
# %bb.20:                               # %if.then46
                                        #   in Loop: Header=BB230_16 Depth=2
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-56(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	jmp	.LBB230_22
.LBB230_21:                             # %if.else160
                                        #   in Loop: Header=BB230_16 Depth=2
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-48(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB230_22:                             # %if.end283
                                        #   in Loop: Header=BB230_16 Depth=2
	jmp	.LBB230_24
.LBB230_23:                             # %if.else284
                                        #   in Loop: Header=BB230_16 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB230_24:                             # %if.end391
                                        #   in Loop: Header=BB230_16 Depth=2
	jmp	.LBB230_25
.LBB230_25:                             # %for.inc
                                        #   in Loop: Header=BB230_16 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB230_16
.LBB230_26:                             # %for.end
                                        #   in Loop: Header=BB230_14 Depth=1
	jmp	.LBB230_27
.LBB230_27:                             # %for.inc392
                                        #   in Loop: Header=BB230_14 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB230_14
.LBB230_28:                             # %for.end394
	jmp	.LBB230_29
.LBB230_29:                             # %if.end395
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB230_31
# %bb.30:                               # %lor.lhs.false398
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB230_241
.LBB230_31:                             # %if.then401
	movl	$0, -16(%rbp)
.LBB230_32:                             # %for.cond402
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB230_34 Depth 2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB230_240
# %bb.33:                               # %for.body407
                                        #   in Loop: Header=BB230_32 Depth=1
	movl	$0, -12(%rbp)
.LBB230_34:                             # %for.cond408
                                        #   Parent Loop BB230_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB230_238
# %bb.35:                               # %for.body413
                                        #   in Loop: Header=BB230_34 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB230_114
# %bb.36:                               # %if.then416
                                        #   in Loop: Header=BB230_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB230_38
# %bb.37:                               # %cond.true
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB230_39
.LBB230_38:                             # %cond.false
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB230_39:                             # %cond.end
                                        #   in Loop: Header=BB230_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB230_41
# %bb.40:                               # %cond.true425
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB230_42
.LBB230_41:                             # %cond.false427
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB230_42:                             # %cond.end429
                                        #   in Loop: Header=BB230_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB230_44
# %bb.43:                               # %cond.true445
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB230_45
.LBB230_44:                             # %cond.false447
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB230_45:                             # %cond.end449
                                        #   in Loop: Header=BB230_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB230_47
# %bb.46:                               # %cond.true455
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB230_48
.LBB230_47:                             # %cond.false457
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB230_48:                             # %cond.end459
                                        #   in Loop: Header=BB230_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB230_50
# %bb.49:                               # %cond.true475
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB230_51
.LBB230_50:                             # %cond.false477
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB230_51:                             # %cond.end479
                                        #   in Loop: Header=BB230_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB230_53
# %bb.52:                               # %cond.true485
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB230_54
.LBB230_53:                             # %cond.false487
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB230_54:                             # %cond.end489
                                        #   in Loop: Header=BB230_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB230_56
# %bb.55:                               # %cond.true505
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB230_57
.LBB230_56:                             # %cond.false507
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB230_57:                             # %cond.end509
                                        #   in Loop: Header=BB230_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB230_59
# %bb.58:                               # %cond.true515
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB230_60
.LBB230_59:                             # %cond.false517
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB230_60:                             # %cond.end519
                                        #   in Loop: Header=BB230_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB230_62
# %bb.61:                               # %cond.true535
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB230_63
.LBB230_62:                             # %cond.false537
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB230_63:                             # %cond.end539
                                        #   in Loop: Header=BB230_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB230_65
# %bb.64:                               # %cond.true545
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB230_66
.LBB230_65:                             # %cond.false547
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB230_66:                             # %cond.end549
                                        #   in Loop: Header=BB230_34 Depth=2
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB230_68
# %bb.67:                               # %if.then556
                                        #   in Loop: Header=BB230_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	$-1, (%rax,%rcx,8)
	jmp	.LBB230_81
.LBB230_68:                             # %if.else569
                                        #   in Loop: Header=BB230_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB230_70
# %bb.69:                               # %cond.true574
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB230_71
.LBB230_70:                             # %cond.false576
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB230_71:                             # %cond.end578
                                        #   in Loop: Header=BB230_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB230_73
# %bb.72:                               # %cond.true584
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB230_74
.LBB230_73:                             # %cond.false586
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB230_74:                             # %cond.end588
                                        #   in Loop: Header=BB230_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB230_76
# %bb.75:                               # %cond.true602
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB230_77
.LBB230_76:                             # %cond.false604
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB230_77:                             # %cond.end606
                                        #   in Loop: Header=BB230_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB230_79
# %bb.78:                               # %cond.true612
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB230_80
.LBB230_79:                             # %cond.false614
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB230_80:                             # %cond.end616
                                        #   in Loop: Header=BB230_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB230_81:                             # %if.end626
                                        #   in Loop: Header=BB230_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB230_83
# %bb.82:                               # %cond.true631
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB230_84
.LBB230_83:                             # %cond.false633
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB230_84:                             # %cond.end635
                                        #   in Loop: Header=BB230_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB230_86
# %bb.85:                               # %cond.true641
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB230_87
.LBB230_86:                             # %cond.false643
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB230_87:                             # %cond.end645
                                        #   in Loop: Header=BB230_34 Depth=2
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB230_89
# %bb.88:                               # %if.then652
                                        #   in Loop: Header=BB230_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	$-1, (%rax,%rcx,8)
	jmp	.LBB230_102
.LBB230_89:                             # %if.else665
                                        #   in Loop: Header=BB230_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB230_91
# %bb.90:                               # %cond.true670
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB230_92
.LBB230_91:                             # %cond.false672
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB230_92:                             # %cond.end674
                                        #   in Loop: Header=BB230_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB230_94
# %bb.93:                               # %cond.true680
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB230_95
.LBB230_94:                             # %cond.false682
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB230_95:                             # %cond.end684
                                        #   in Loop: Header=BB230_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB230_97
# %bb.96:                               # %cond.true698
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB230_98
.LBB230_97:                             # %cond.false700
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB230_98:                             # %cond.end702
                                        #   in Loop: Header=BB230_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB230_100
# %bb.99:                               # %cond.true708
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB230_101
.LBB230_100:                            # %cond.false710
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB230_101:                            # %cond.end712
                                        #   in Loop: Header=BB230_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB230_102:                            # %if.end722
                                        #   in Loop: Header=BB230_34 Depth=2
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB230_113
# %bb.103:                              # %if.then727
                                        #   in Loop: Header=BB230_34 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 4864(%rax)
	jne	.LBB230_107
# %bb.104:                              # %land.lhs.true730
                                        #   in Loop: Header=BB230_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB230_107
# %bb.105:                              # %land.lhs.true740
                                        #   in Loop: Header=BB230_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB230_107
# %bb.106:                              # %land.lhs.true752
                                        #   in Loop: Header=BB230_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB230_112
.LBB230_107:                            # %lor.rhs
                                        #   in Loop: Header=BB230_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB230_111
# %bb.108:                              # %land.lhs.true774
                                        #   in Loop: Header=BB230_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB230_111
# %bb.109:                              # %land.lhs.true784
                                        #   in Loop: Header=BB230_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB230_111
# %bb.110:                              # %land.rhs
                                        #   in Loop: Header=BB230_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB230_111:                            # %land.end
                                        #   in Loop: Header=BB230_34 Depth=2
.LBB230_112:                            # %lor.end
                                        #   in Loop: Header=BB230_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	1624(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB230_113:                            # %if.end814
                                        #   in Loop: Header=BB230_34 Depth=2
	jmp	.LBB230_236
.LBB230_114:                            # %if.else815
                                        #   in Loop: Header=BB230_34 Depth=2
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB230_116
# %bb.115:                              # %cond.true820
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB230_117
.LBB230_116:                            # %cond.false822
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB230_117:                            # %cond.end824
                                        #   in Loop: Header=BB230_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB230_119
# %bb.118:                              # %cond.true830
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB230_120
.LBB230_119:                            # %cond.false832
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB230_120:                            # %cond.end834
                                        #   in Loop: Header=BB230_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB230_122
# %bb.121:                              # %cond.true849
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB230_123
.LBB230_122:                            # %cond.false851
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB230_123:                            # %cond.end853
                                        #   in Loop: Header=BB230_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB230_125
# %bb.124:                              # %cond.true859
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB230_126
.LBB230_125:                            # %cond.false861
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB230_126:                            # %cond.end863
                                        #   in Loop: Header=BB230_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB230_128
# %bb.127:                              # %cond.true879
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB230_129
.LBB230_128:                            # %cond.false881
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB230_129:                            # %cond.end883
                                        #   in Loop: Header=BB230_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB230_131
# %bb.130:                              # %cond.true889
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB230_132
.LBB230_131:                            # %cond.false891
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB230_132:                            # %cond.end893
                                        #   in Loop: Header=BB230_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB230_134
# %bb.133:                              # %cond.true909
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB230_135
.LBB230_134:                            # %cond.false911
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB230_135:                            # %cond.end913
                                        #   in Loop: Header=BB230_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB230_137
# %bb.136:                              # %cond.true919
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB230_138
.LBB230_137:                            # %cond.false921
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB230_138:                            # %cond.end923
                                        #   in Loop: Header=BB230_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB230_140
# %bb.139:                              # %cond.true939
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB230_141
.LBB230_140:                            # %cond.false941
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB230_141:                            # %cond.end943
                                        #   in Loop: Header=BB230_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB230_143
# %bb.142:                              # %cond.true949
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB230_144
.LBB230_143:                            # %cond.false951
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB230_144:                            # %cond.end953
                                        #   in Loop: Header=BB230_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	4832(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB230_146
# %bb.145:                              # %cond.true966
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB230_147
.LBB230_146:                            # %cond.false968
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB230_147:                            # %cond.end970
                                        #   in Loop: Header=BB230_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB230_149
# %bb.148:                              # %cond.true976
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB230_150
.LBB230_149:                            # %cond.false978
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB230_150:                            # %cond.end980
                                        #   in Loop: Header=BB230_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	4832(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-48(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB230_152
# %bb.151:                              # %cond.true994
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB230_153
.LBB230_152:                            # %cond.false996
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB230_153:                            # %cond.end998
                                        #   in Loop: Header=BB230_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB230_155
# %bb.154:                              # %cond.true1004
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB230_156
.LBB230_155:                            # %cond.false1006
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB230_156:                            # %cond.end1008
                                        #   in Loop: Header=BB230_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	4840(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-48(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB230_158
# %bb.157:                              # %cond.true1021
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB230_159
.LBB230_158:                            # %cond.false1023
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB230_159:                            # %cond.end1025
                                        #   in Loop: Header=BB230_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB230_161
# %bb.160:                              # %cond.true1031
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB230_162
.LBB230_161:                            # %cond.false1033
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB230_162:                            # %cond.end1035
                                        #   in Loop: Header=BB230_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	4840(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB230_173
# %bb.163:                              # %if.then1048
                                        #   in Loop: Header=BB230_34 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB230_167
# %bb.164:                              # %land.lhs.true1051
                                        #   in Loop: Header=BB230_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB230_167
# %bb.165:                              # %land.lhs.true1061
                                        #   in Loop: Header=BB230_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB230_167
# %bb.166:                              # %land.lhs.true1074
                                        #   in Loop: Header=BB230_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB230_172
.LBB230_167:                            # %lor.rhs1087
                                        #   in Loop: Header=BB230_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB230_171
# %bb.168:                              # %land.lhs.true1097
                                        #   in Loop: Header=BB230_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB230_171
# %bb.169:                              # %land.lhs.true1107
                                        #   in Loop: Header=BB230_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB230_171
# %bb.170:                              # %land.rhs1120
                                        #   in Loop: Header=BB230_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB230_171:                            # %land.end1133
                                        #   in Loop: Header=BB230_34 Depth=2
.LBB230_172:                            # %lor.end1134
                                        #   in Loop: Header=BB230_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	4856(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB230_173:                            # %if.end1142
                                        #   in Loop: Header=BB230_34 Depth=2
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB230_175
# %bb.174:                              # %cond.true1147
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB230_176
.LBB230_175:                            # %cond.false1149
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB230_176:                            # %cond.end1151
                                        #   in Loop: Header=BB230_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB230_178
# %bb.177:                              # %cond.true1157
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB230_179
.LBB230_178:                            # %cond.false1159
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB230_179:                            # %cond.end1161
                                        #   in Loop: Header=BB230_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB230_181
# %bb.180:                              # %cond.true1176
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB230_182
.LBB230_181:                            # %cond.false1178
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB230_182:                            # %cond.end1180
                                        #   in Loop: Header=BB230_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB230_184
# %bb.183:                              # %cond.true1186
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB230_185
.LBB230_184:                            # %cond.false1188
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB230_185:                            # %cond.end1190
                                        #   in Loop: Header=BB230_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB230_187
# %bb.186:                              # %cond.true1206
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB230_188
.LBB230_187:                            # %cond.false1208
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB230_188:                            # %cond.end1210
                                        #   in Loop: Header=BB230_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB230_190
# %bb.189:                              # %cond.true1216
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB230_191
.LBB230_190:                            # %cond.false1218
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB230_191:                            # %cond.end1220
                                        #   in Loop: Header=BB230_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB230_193
# %bb.192:                              # %cond.true1236
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB230_194
.LBB230_193:                            # %cond.false1238
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB230_194:                            # %cond.end1240
                                        #   in Loop: Header=BB230_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB230_196
# %bb.195:                              # %cond.true1246
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB230_197
.LBB230_196:                            # %cond.false1248
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB230_197:                            # %cond.end1250
                                        #   in Loop: Header=BB230_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB230_199
# %bb.198:                              # %cond.true1266
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB230_200
.LBB230_199:                            # %cond.false1268
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB230_200:                            # %cond.end1270
                                        #   in Loop: Header=BB230_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB230_202
# %bb.201:                              # %cond.true1276
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB230_203
.LBB230_202:                            # %cond.false1278
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB230_203:                            # %cond.end1280
                                        #   in Loop: Header=BB230_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	3216(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB230_205
# %bb.204:                              # %cond.true1293
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB230_206
.LBB230_205:                            # %cond.false1295
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB230_206:                            # %cond.end1297
                                        #   in Loop: Header=BB230_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB230_208
# %bb.207:                              # %cond.true1303
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB230_209
.LBB230_208:                            # %cond.false1305
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB230_209:                            # %cond.end1307
                                        #   in Loop: Header=BB230_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	3216(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-56(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB230_211
# %bb.210:                              # %cond.true1321
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB230_212
.LBB230_211:                            # %cond.false1323
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB230_212:                            # %cond.end1325
                                        #   in Loop: Header=BB230_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB230_214
# %bb.213:                              # %cond.true1331
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB230_215
.LBB230_214:                            # %cond.false1333
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB230_215:                            # %cond.end1335
                                        #   in Loop: Header=BB230_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	3224(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-56(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB230_217
# %bb.216:                              # %cond.true1348
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB230_218
.LBB230_217:                            # %cond.false1350
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB230_218:                            # %cond.end1352
                                        #   in Loop: Header=BB230_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB230_220
# %bb.219:                              # %cond.true1358
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB230_221
.LBB230_220:                            # %cond.false1360
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB230_221:                            # %cond.end1362
                                        #   in Loop: Header=BB230_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	3224(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB230_232
# %bb.222:                              # %if.then1375
                                        #   in Loop: Header=BB230_34 Depth=2
	movq	-56(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB230_226
# %bb.223:                              # %land.lhs.true1378
                                        #   in Loop: Header=BB230_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB230_226
# %bb.224:                              # %land.lhs.true1388
                                        #   in Loop: Header=BB230_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB230_226
# %bb.225:                              # %land.lhs.true1401
                                        #   in Loop: Header=BB230_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB230_231
.LBB230_226:                            # %lor.rhs1414
                                        #   in Loop: Header=BB230_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB230_230
# %bb.227:                              # %land.lhs.true1424
                                        #   in Loop: Header=BB230_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB230_230
# %bb.228:                              # %land.lhs.true1434
                                        #   in Loop: Header=BB230_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB230_230
# %bb.229:                              # %land.rhs1447
                                        #   in Loop: Header=BB230_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB230_230:                            # %land.end1460
                                        #   in Loop: Header=BB230_34 Depth=2
.LBB230_231:                            # %lor.end1461
                                        #   in Loop: Header=BB230_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	3240(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB230_232:                            # %if.end1469
                                        #   in Loop: Header=BB230_34 Depth=2
	movq	img, %rax
	cmpl	$0, 71996(%rax)
	jne	.LBB230_235
# %bb.233:                              # %land.lhs.true1473
                                        #   in Loop: Header=BB230_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB230_235
# %bb.234:                              # %if.then1481
                                        #   in Loop: Header=BB230_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
.LBB230_235:                            # %if.end1522
                                        #   in Loop: Header=BB230_34 Depth=2
	jmp	.LBB230_236
.LBB230_236:                            # %if.end1523
                                        #   in Loop: Header=BB230_34 Depth=2
	jmp	.LBB230_237
.LBB230_237:                            # %for.inc1524
                                        #   in Loop: Header=BB230_34 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB230_34
.LBB230_238:                            # %for.end1526
                                        #   in Loop: Header=BB230_32 Depth=1
	jmp	.LBB230_239
.LBB230_239:                            # %for.inc1527
                                        #   in Loop: Header=BB230_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB230_32
.LBB230_240:                            # %for.end1529
	jmp	.LBB230_241
.LBB230_241:                            # %if.end1530
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB230_243
# %bb.242:                              # %lor.lhs.false1533
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB230_259
.LBB230_243:                            # %if.then1536
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB230_258
# %bb.244:                              # %if.then1539
	movl	$0, -12(%rbp)
.LBB230_245:                            # %for.cond1540
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB230_247 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB230_257
# %bb.246:                              # %for.body1545
                                        #   in Loop: Header=BB230_245 Depth=1
	movl	$0, -16(%rbp)
.LBB230_247:                            # %for.cond1546
                                        #   Parent Loop BB230_245 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB230_255
# %bb.248:                              # %for.body1551
                                        #   in Loop: Header=BB230_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB230_253
# %bb.249:                              # %if.then1558
                                        #   in Loop: Header=BB230_247 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	subl	4(%rax), %edi
	callq	abs
	movl	%eax, %ebx
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	subl	4(%rax), %edi
	callq	abs
	cmpl	%eax, %ebx
	jle	.LBB230_251
# %bb.250:                              # %if.then1571
                                        #   in Loop: Header=BB230_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	jmp	.LBB230_252
.LBB230_251:                            # %if.else1699
                                        #   in Loop: Header=BB230_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB230_252:                            # %if.end1829
                                        #   in Loop: Header=BB230_247 Depth=2
	jmp	.LBB230_253
.LBB230_253:                            # %if.end1830
                                        #   in Loop: Header=BB230_247 Depth=2
	jmp	.LBB230_254
.LBB230_254:                            # %for.inc1831
                                        #   in Loop: Header=BB230_247 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB230_247
.LBB230_255:                            # %for.end1833
                                        #   in Loop: Header=BB230_245 Depth=1
	jmp	.LBB230_256
.LBB230_256:                            # %for.inc1834
                                        #   in Loop: Header=BB230_245 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB230_245
.LBB230_257:                            # %for.end1836
	jmp	.LBB230_258
.LBB230_258:                            # %if.end1837
	jmp	.LBB230_259
.LBB230_259:                            # %if.end1838
	movl	$0, -12(%rbp)
.LBB230_260:                            # %for.cond1839
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB230_262 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB230_330
# %bb.261:                              # %for.body1844
                                        #   in Loop: Header=BB230_260 Depth=1
	movl	$0, -16(%rbp)
.LBB230_262:                            # %for.cond1845
                                        #   Parent Loop BB230_260 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB230_328
# %bb.263:                              # %for.body1850
                                        #   in Loop: Header=BB230_262 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB230_265
# %bb.264:                              # %lor.lhs.false1853
                                        #   in Loop: Header=BB230_262 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB230_314
.LBB230_265:                            # %if.then1856
                                        #   in Loop: Header=BB230_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB230_267
# %bb.266:                              # %cond.true1861
                                        #   in Loop: Header=BB230_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB230_268
.LBB230_267:                            # %cond.false1863
                                        #   in Loop: Header=BB230_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB230_268:                            # %cond.end1865
                                        #   in Loop: Header=BB230_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB230_270
# %bb.269:                              # %cond.true1871
                                        #   in Loop: Header=BB230_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB230_271
.LBB230_270:                            # %cond.false1873
                                        #   in Loop: Header=BB230_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB230_271:                            # %cond.end1875
                                        #   in Loop: Header=BB230_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB230_273
# %bb.272:                              # %cond.true1891
                                        #   in Loop: Header=BB230_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB230_274
.LBB230_273:                            # %cond.false1893
                                        #   in Loop: Header=BB230_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB230_274:                            # %cond.end1895
                                        #   in Loop: Header=BB230_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB230_276
# %bb.275:                              # %cond.true1901
                                        #   in Loop: Header=BB230_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB230_277
.LBB230_276:                            # %cond.false1903
                                        #   in Loop: Header=BB230_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB230_277:                            # %cond.end1905
                                        #   in Loop: Header=BB230_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB230_279
# %bb.278:                              # %cond.true1921
                                        #   in Loop: Header=BB230_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB230_280
.LBB230_279:                            # %cond.false1923
                                        #   in Loop: Header=BB230_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB230_280:                            # %cond.end1925
                                        #   in Loop: Header=BB230_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB230_282
# %bb.281:                              # %cond.true1931
                                        #   in Loop: Header=BB230_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB230_283
.LBB230_282:                            # %cond.false1933
                                        #   in Loop: Header=BB230_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB230_283:                            # %cond.end1935
                                        #   in Loop: Header=BB230_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB230_285
# %bb.284:                              # %cond.true1951
                                        #   in Loop: Header=BB230_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB230_286
.LBB230_285:                            # %cond.false1953
                                        #   in Loop: Header=BB230_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB230_286:                            # %cond.end1955
                                        #   in Loop: Header=BB230_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB230_288
# %bb.287:                              # %cond.true1961
                                        #   in Loop: Header=BB230_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB230_289
.LBB230_288:                            # %cond.false1963
                                        #   in Loop: Header=BB230_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB230_289:                            # %cond.end1965
                                        #   in Loop: Header=BB230_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB230_291
# %bb.290:                              # %cond.true1981
                                        #   in Loop: Header=BB230_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB230_292
.LBB230_291:                            # %cond.false1983
                                        #   in Loop: Header=BB230_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB230_292:                            # %cond.end1985
                                        #   in Loop: Header=BB230_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB230_294
# %bb.293:                              # %cond.true1991
                                        #   in Loop: Header=BB230_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB230_295
.LBB230_294:                            # %cond.false1993
                                        #   in Loop: Header=BB230_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB230_295:                            # %cond.end1995
                                        #   in Loop: Header=BB230_262 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB230_297
# %bb.296:                              # %cond.true2009
                                        #   in Loop: Header=BB230_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB230_298
.LBB230_297:                            # %cond.false2011
                                        #   in Loop: Header=BB230_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB230_298:                            # %cond.end2013
                                        #   in Loop: Header=BB230_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB230_300
# %bb.299:                              # %cond.true2019
                                        #   in Loop: Header=BB230_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB230_301
.LBB230_300:                            # %cond.false2021
                                        #   in Loop: Header=BB230_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB230_301:                            # %cond.end2023
                                        #   in Loop: Header=BB230_262 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB230_303
# %bb.302:                              # %cond.true2037
                                        #   in Loop: Header=BB230_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB230_304
.LBB230_303:                            # %cond.false2039
                                        #   in Loop: Header=BB230_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB230_304:                            # %cond.end2041
                                        #   in Loop: Header=BB230_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB230_306
# %bb.305:                              # %cond.true2047
                                        #   in Loop: Header=BB230_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB230_307
.LBB230_306:                            # %cond.false2049
                                        #   in Loop: Header=BB230_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB230_307:                            # %cond.end2051
                                        #   in Loop: Header=BB230_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB230_309
# %bb.308:                              # %cond.true2065
                                        #   in Loop: Header=BB230_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB230_310
.LBB230_309:                            # %cond.false2067
                                        #   in Loop: Header=BB230_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB230_310:                            # %cond.end2069
                                        #   in Loop: Header=BB230_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB230_312
# %bb.311:                              # %cond.true2075
                                        #   in Loop: Header=BB230_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB230_313
.LBB230_312:                            # %cond.false2077
                                        #   in Loop: Header=BB230_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB230_313:                            # %cond.end2079
                                        #   in Loop: Header=BB230_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB230_315
.LBB230_314:                            # %if.else2089
                                        #   in Loop: Header=BB230_262 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB230_315:                            # %if.end2194
                                        #   in Loop: Header=BB230_262 Depth=2
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB230_326
# %bb.316:                              # %if.then2200
                                        #   in Loop: Header=BB230_262 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 4864(%rax)
	jne	.LBB230_320
# %bb.317:                              # %land.lhs.true2203
                                        #   in Loop: Header=BB230_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB230_320
# %bb.318:                              # %land.lhs.true2213
                                        #   in Loop: Header=BB230_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB230_320
# %bb.319:                              # %land.lhs.true2226
                                        #   in Loop: Header=BB230_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB230_325
.LBB230_320:                            # %lor.rhs2239
                                        #   in Loop: Header=BB230_262 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB230_324
# %bb.321:                              # %land.lhs.true2249
                                        #   in Loop: Header=BB230_262 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB230_324
# %bb.322:                              # %land.lhs.true2259
                                        #   in Loop: Header=BB230_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB230_324
# %bb.323:                              # %land.rhs2272
                                        #   in Loop: Header=BB230_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB230_324:                            # %land.end2285
                                        #   in Loop: Header=BB230_262 Depth=2
.LBB230_325:                            # %lor.end2286
                                        #   in Loop: Header=BB230_262 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	1624(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB230_326:                            # %if.end2295
                                        #   in Loop: Header=BB230_262 Depth=2
	jmp	.LBB230_327
.LBB230_327:                            # %for.inc2296
                                        #   in Loop: Header=BB230_262 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB230_262
.LBB230_328:                            # %for.end2298
                                        #   in Loop: Header=BB230_260 Depth=1
	jmp	.LBB230_329
.LBB230_329:                            # %for.inc2299
                                        #   in Loop: Header=BB230_260 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB230_260
.LBB230_330:                            # %for.end2301
	movq	img, %rax
	cmpl	$0, 71996(%rax)
	jne	.LBB230_397
# %bb.331:                              # %if.then2305
	movl	$0, -12(%rbp)
.LBB230_332:                            # %for.cond2306
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB230_334 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB230_349
# %bb.333:                              # %for.body2311
                                        #   in Loop: Header=BB230_332 Depth=1
	movl	$0, -16(%rbp)
.LBB230_334:                            # %for.cond2312
                                        #   Parent Loop BB230_332 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB230_347
# %bb.335:                              # %for.body2317
                                        #   in Loop: Header=BB230_334 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB230_338
# %bb.336:                              # %land.lhs.true2320
                                        #   in Loop: Header=BB230_334 Depth=2
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB230_338
# %bb.337:                              # %land.lhs.true2323
                                        #   in Loop: Header=BB230_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB230_340
.LBB230_338:                            # %lor.lhs.false2331
                                        #   in Loop: Header=BB230_334 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB230_341
# %bb.339:                              # %land.lhs.true2334
                                        #   in Loop: Header=BB230_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB230_341
.LBB230_340:                            # %if.then2342
                                        #   in Loop: Header=BB230_334 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %ecx
	shll	$1, %ecx
	movw	%cx, 2(%rax)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %ecx
	shll	$1, %ecx
	movw	%cx, 2(%rax)
	jmp	.LBB230_345
.LBB230_341:                            # %if.else2363
                                        #   in Loop: Header=BB230_334 Depth=2
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB230_344
# %bb.342:                              # %land.lhs.true2366
                                        #   in Loop: Header=BB230_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB230_344
# %bb.343:                              # %if.then2373
                                        #   in Loop: Header=BB230_334 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movswl	2(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movswl	2(%rcx), %eax
	cltd
	idivl	%esi
	movw	%ax, 2(%rcx)
.LBB230_344:                            # %if.end2394
                                        #   in Loop: Header=BB230_334 Depth=2
	jmp	.LBB230_345
.LBB230_345:                            # %if.end2395
                                        #   in Loop: Header=BB230_334 Depth=2
	jmp	.LBB230_346
.LBB230_346:                            # %for.inc2396
                                        #   in Loop: Header=BB230_334 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB230_334
.LBB230_347:                            # %for.end2398
                                        #   in Loop: Header=BB230_332 Depth=1
	jmp	.LBB230_348
.LBB230_348:                            # %for.inc2399
                                        #   in Loop: Header=BB230_332 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB230_332
.LBB230_349:                            # %for.end2401
	movl	$0, -12(%rbp)
.LBB230_350:                            # %for.cond2402
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB230_352 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	72400(%rcx), %ecx
	shll	$2, %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB230_396
# %bb.351:                              # %for.body2408
                                        #   in Loop: Header=BB230_350 Depth=1
	movl	$0, -16(%rbp)
.LBB230_352:                            # %for.cond2409
                                        #   Parent Loop BB230_350 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB230_394
# %bb.353:                              # %for.body2414
                                        #   in Loop: Header=BB230_352 Depth=2
	cmpl	$0, -12(%rbp)
	jne	.LBB230_361
# %bb.354:                              # %if.then2417
                                        #   in Loop: Header=BB230_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB230_356
# %bb.355:                              # %cond.true2428
                                        #   in Loop: Header=BB230_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB230_360
.LBB230_356:                            # %cond.false2429
                                        #   in Loop: Header=BB230_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB230_358
# %bb.357:                              # %cond.true2440
                                        #   in Loop: Header=BB230_352 Depth=2
	movl	$127, %eax
	jmp	.LBB230_359
.LBB230_358:                            # %cond.false2441
                                        #   in Loop: Header=BB230_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB230_359:                            # %cond.end2450
                                        #   in Loop: Header=BB230_352 Depth=2
.LBB230_360:                            # %cond.end2452
                                        #   in Loop: Header=BB230_352 Depth=2
	movl	%eax, -60(%rbp)
	jmp	.LBB230_377
.LBB230_361:                            # %if.else2454
                                        #   in Loop: Header=BB230_352 Depth=2
	cmpl	$2, -12(%rbp)
	jne	.LBB230_369
# %bb.362:                              # %if.then2457
                                        #   in Loop: Header=BB230_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB230_364
# %bb.363:                              # %cond.true2467
                                        #   in Loop: Header=BB230_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB230_368
.LBB230_364:                            # %cond.false2468
                                        #   in Loop: Header=BB230_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB230_366
# %bb.365:                              # %cond.true2479
                                        #   in Loop: Header=BB230_352 Depth=2
	movl	$127, %eax
	jmp	.LBB230_367
.LBB230_366:                            # %cond.false2480
                                        #   in Loop: Header=BB230_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB230_367:                            # %cond.end2489
                                        #   in Loop: Header=BB230_352 Depth=2
.LBB230_368:                            # %cond.end2491
                                        #   in Loop: Header=BB230_352 Depth=2
	movl	%eax, -60(%rbp)
	jmp	.LBB230_376
.LBB230_369:                            # %if.else2493
                                        #   in Loop: Header=BB230_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB230_371
# %bb.370:                              # %cond.true2503
                                        #   in Loop: Header=BB230_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB230_375
.LBB230_371:                            # %cond.false2504
                                        #   in Loop: Header=BB230_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB230_373
# %bb.372:                              # %cond.true2515
                                        #   in Loop: Header=BB230_352 Depth=2
	movl	$127, %eax
	jmp	.LBB230_374
.LBB230_373:                            # %cond.false2516
                                        #   in Loop: Header=BB230_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB230_374:                            # %cond.end2525
                                        #   in Loop: Header=BB230_352 Depth=2
.LBB230_375:                            # %cond.end2527
                                        #   in Loop: Header=BB230_352 Depth=2
	movl	%eax, -60(%rbp)
.LBB230_376:                            # %if.end2529
                                        #   in Loop: Header=BB230_352 Depth=2
	jmp	.LBB230_377
.LBB230_377:                            # %if.end2530
                                        #   in Loop: Header=BB230_352 Depth=2
	movq	-40(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB230_379
# %bb.378:                              # %cond.true2545
                                        #   in Loop: Header=BB230_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB230_383
.LBB230_379:                            # %cond.false2546
                                        #   in Loop: Header=BB230_352 Depth=2
	movq	-40(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB230_381
# %bb.380:                              # %cond.true2561
                                        #   in Loop: Header=BB230_352 Depth=2
	movl	$127, %eax
	jmp	.LBB230_382
.LBB230_381:                            # %cond.false2562
                                        #   in Loop: Header=BB230_352 Depth=2
	movq	-40(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB230_382:                            # %cond.end2575
                                        #   in Loop: Header=BB230_352 Depth=2
.LBB230_383:                            # %cond.end2577
                                        #   in Loop: Header=BB230_352 Depth=2
	movl	%eax, -68(%rbp)
	cmpl	$0, -68(%rbp)
	je	.LBB230_391
# %bb.384:                              # %if.then2581
                                        #   in Loop: Header=BB230_352 Depth=2
	movl	-68(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-68(%rbp)
	movl	%eax, -64(%rbp)
	movl	-60(%rbp), %eax
	imull	-64(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB230_386
# %bb.385:                              # %cond.true2591
                                        #   in Loop: Header=BB230_352 Depth=2
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB230_390
.LBB230_386:                            # %cond.false2592
                                        #   in Loop: Header=BB230_352 Depth=2
	movl	-60(%rbp), %eax
	imull	-64(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB230_388
# %bb.387:                              # %cond.true2598
                                        #   in Loop: Header=BB230_352 Depth=2
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB230_389
.LBB230_388:                            # %cond.false2599
                                        #   in Loop: Header=BB230_352 Depth=2
	movl	-60(%rbp), %eax
	imull	-64(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB230_389:                            # %cond.end2603
                                        #   in Loop: Header=BB230_352 Depth=2
.LBB230_390:                            # %cond.end2605
                                        #   in Loop: Header=BB230_352 Depth=2
	movq	img, %rcx
	addq	$72016, %rcx            # imm = 0x11950
	movslq	-12(%rbp), %rdx
	imulq	$60, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB230_392
.LBB230_391:                            # %if.else2611
                                        #   in Loop: Header=BB230_352 Depth=2
	movq	img, %rax
	addq	$72016, %rax            # imm = 0x11950
	movslq	-12(%rbp), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$9999, (%rax,%rcx,4)    # imm = 0x270F
.LBB230_392:                            # %if.end2617
                                        #   in Loop: Header=BB230_352 Depth=2
	jmp	.LBB230_393
.LBB230_393:                            # %for.inc2618
                                        #   in Loop: Header=BB230_352 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB230_352
.LBB230_394:                            # %for.end2620
                                        #   in Loop: Header=BB230_350 Depth=1
	jmp	.LBB230_395
.LBB230_395:                            # %for.inc2621
                                        #   in Loop: Header=BB230_350 Depth=1
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB230_350
.LBB230_396:                            # %for.end2623
	jmp	.LBB230_397
.LBB230_397:                            # %if.end2624
	cmpl	$1472009941, -72(%rbp)  # imm = 0x57BD16D5
	jne	.LBB230_399
.LBB230_398:
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB230_399:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB230_398
.Lfunc_end230:
	.size	compute_colocated.167, .Lfunc_end230-compute_colocated.167
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_assign_long_term_frame_idx.168
	.type	mm_assign_long_term_frame_idx.168,@function
mm_assign_long_term_frame_idx.168:      # @mm_assign_long_term_frame_idx.168
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$823490452, -32(%rbp)   # imm = 0x31157794
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -16(%rbp)
	movq	-24(%rbp), %rdi
	movl	-28(%rbp), %esi
	callq	get_pic_num_x
	movl	%eax, -12(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB231_2
# %bb.1:                                # %if.then
	movl	-16(%rbp), %edi
	callq	unmark_long_term_frame_for_reference_by_frame_idx
	jmp	.LBB231_18
.LBB231_2:                              # %if.else
	movl	$0, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB231_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB231_14
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB231_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB231_8
# %bb.5:                                # %if.then3
                                        #   in Loop: Header=BB231_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB231_7
# %bb.6:                                # %if.then7
	movl	$1, -8(%rbp)
	jmp	.LBB231_15
.LBB231_7:                              # %if.end
                                        #   in Loop: Header=BB231_3 Depth=1
	jmp	.LBB231_8
.LBB231_8:                              # %if.end8
                                        #   in Loop: Header=BB231_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB231_12
# %bb.9:                                # %if.then14
                                        #   in Loop: Header=BB231_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB231_11
# %bb.10:                               # %if.then19
	movl	$2, -8(%rbp)
	jmp	.LBB231_15
.LBB231_11:                             # %if.end20
                                        #   in Loop: Header=BB231_3 Depth=1
	jmp	.LBB231_12
.LBB231_12:                             # %if.end21
                                        #   in Loop: Header=BB231_3 Depth=1
	jmp	.LBB231_13
.LBB231_13:                             # %for.inc
                                        #   in Loop: Header=BB231_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB231_3
.LBB231_14:                             # %for.end.loopexit
	jmp	.LBB231_15
.LBB231_15:                             # %for.end
	cmpl	$0, -8(%rbp)
	jne	.LBB231_17
# %bb.16:                               # %if.then23
	movabsq	$.L.str.24, %rdi
	movl	$200, %esi
	callq	error
.LBB231_17:                             # %if.end24
	movl	-8(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %r8d
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	callq	unmark_long_term_field_for_reference_by_frame_idx
.LBB231_18:                             # %if.end25
	movq	-24(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	callq	mark_pic_long_term
	cmpl	$823490452, -32(%rbp)   # imm = 0x31157794
	jne	.LBB231_20
.LBB231_19:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB231_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB231_19
.Lfunc_end231:
	.size	mm_assign_long_term_frame_idx.168, .Lfunc_end231-mm_assign_long_term_frame_idx.168
	.cfi_endproc
                                        # -- End function
	.globl	compute_colocated.169   # -- Begin function compute_colocated.169
	.p2align	4, 0x90
	.type	compute_colocated.169,@function
compute_colocated.169:                  # @compute_colocated.169
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$2035583895, -72(%rbp)  # imm = 0x79548B97
	movq	%rdi, -24(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -56(%rbp)
	movq	%rax, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB232_2
# %bb.1:                                # %if.then
	movq	-48(%rbp), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-48(%rbp), %rax
	movq	40(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	jmp	.LBB232_11
.LBB232_2:                              # %if.else
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB232_10
# %bb.3:                                # %if.then6
	movq	img, %rax
	movl	28(%rax), %eax
	movq	-32(%rbp), %rcx
	cmpl	(%rcx), %eax
	je	.LBB232_9
# %bb.4:                                # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$0, 6412(%rax)
	je	.LBB232_9
# %bb.5:                                # %if.then11
	movq	img, %rax
	cmpl	$1, 28(%rax)
	jne	.LBB232_7
# %bb.6:                                # %if.then14
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	6528(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -56(%rbp)
	movq	%rax, -40(%rbp)
	jmp	.LBB232_8
.LBB232_7:                              # %if.else17
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	6536(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -56(%rbp)
	movq	%rax, -40(%rbp)
.LBB232_8:                              # %if.end
	jmp	.LBB232_9
.LBB232_9:                              # %if.end20
	jmp	.LBB232_10
.LBB232_10:                             # %if.end21
	jmp	.LBB232_11
.LBB232_11:                             # %if.end22
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB232_13
# %bb.12:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB232_29
.LBB232_13:                             # %if.then25
	movl	$0, -12(%rbp)
.LBB232_14:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB232_16 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB232_28
# %bb.15:                               # %for.body
                                        #   in Loop: Header=BB232_14 Depth=1
	movl	$0, -16(%rbp)
.LBB232_16:                             # %for.cond27
                                        #   Parent Loop BB232_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB232_26
# %bb.17:                               # %for.body30
                                        #   in Loop: Header=BB232_16 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB232_23
# %bb.18:                               # %land.lhs.true33
                                        #   in Loop: Header=BB232_16 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB232_23
# %bb.19:                               # %if.then38
                                        #   in Loop: Header=BB232_16 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-56(%rbp), %rax
	subl	4(%rax), %edi
	callq	abs
	movl	%eax, %ebx
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-40(%rbp), %rax
	subl	4(%rax), %edi
	callq	abs
	cmpl	%eax, %ebx
	jle	.LBB232_21
# %bb.20:                               # %if.then46
                                        #   in Loop: Header=BB232_16 Depth=2
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	jmp	.LBB232_22
.LBB232_21:                             # %if.else160
                                        #   in Loop: Header=BB232_16 Depth=2
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-56(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB232_22:                             # %if.end283
                                        #   in Loop: Header=BB232_16 Depth=2
	jmp	.LBB232_24
.LBB232_23:                             # %if.else284
                                        #   in Loop: Header=BB232_16 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB232_24:                             # %if.end391
                                        #   in Loop: Header=BB232_16 Depth=2
	jmp	.LBB232_25
.LBB232_25:                             # %for.inc
                                        #   in Loop: Header=BB232_16 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB232_16
.LBB232_26:                             # %for.end
                                        #   in Loop: Header=BB232_14 Depth=1
	jmp	.LBB232_27
.LBB232_27:                             # %for.inc392
                                        #   in Loop: Header=BB232_14 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB232_14
.LBB232_28:                             # %for.end394
	jmp	.LBB232_29
.LBB232_29:                             # %if.end395
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB232_31
# %bb.30:                               # %lor.lhs.false398
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB232_241
.LBB232_31:                             # %if.then401
	movl	$0, -16(%rbp)
.LBB232_32:                             # %for.cond402
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB232_34 Depth 2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB232_240
# %bb.33:                               # %for.body407
                                        #   in Loop: Header=BB232_32 Depth=1
	movl	$0, -12(%rbp)
.LBB232_34:                             # %for.cond408
                                        #   Parent Loop BB232_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB232_238
# %bb.35:                               # %for.body413
                                        #   in Loop: Header=BB232_34 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB232_114
# %bb.36:                               # %if.then416
                                        #   in Loop: Header=BB232_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB232_38
# %bb.37:                               # %cond.true
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB232_39
.LBB232_38:                             # %cond.false
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB232_39:                             # %cond.end
                                        #   in Loop: Header=BB232_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB232_41
# %bb.40:                               # %cond.true425
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB232_42
.LBB232_41:                             # %cond.false427
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB232_42:                             # %cond.end429
                                        #   in Loop: Header=BB232_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB232_44
# %bb.43:                               # %cond.true445
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB232_45
.LBB232_44:                             # %cond.false447
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB232_45:                             # %cond.end449
                                        #   in Loop: Header=BB232_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB232_47
# %bb.46:                               # %cond.true455
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB232_48
.LBB232_47:                             # %cond.false457
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB232_48:                             # %cond.end459
                                        #   in Loop: Header=BB232_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB232_50
# %bb.49:                               # %cond.true475
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB232_51
.LBB232_50:                             # %cond.false477
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB232_51:                             # %cond.end479
                                        #   in Loop: Header=BB232_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB232_53
# %bb.52:                               # %cond.true485
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB232_54
.LBB232_53:                             # %cond.false487
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB232_54:                             # %cond.end489
                                        #   in Loop: Header=BB232_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB232_56
# %bb.55:                               # %cond.true505
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB232_57
.LBB232_56:                             # %cond.false507
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB232_57:                             # %cond.end509
                                        #   in Loop: Header=BB232_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB232_59
# %bb.58:                               # %cond.true515
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB232_60
.LBB232_59:                             # %cond.false517
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB232_60:                             # %cond.end519
                                        #   in Loop: Header=BB232_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB232_62
# %bb.61:                               # %cond.true535
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB232_63
.LBB232_62:                             # %cond.false537
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB232_63:                             # %cond.end539
                                        #   in Loop: Header=BB232_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB232_65
# %bb.64:                               # %cond.true545
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB232_66
.LBB232_65:                             # %cond.false547
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB232_66:                             # %cond.end549
                                        #   in Loop: Header=BB232_34 Depth=2
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB232_68
# %bb.67:                               # %if.then556
                                        #   in Loop: Header=BB232_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	$-1, (%rax,%rcx,8)
	jmp	.LBB232_81
.LBB232_68:                             # %if.else569
                                        #   in Loop: Header=BB232_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB232_70
# %bb.69:                               # %cond.true574
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB232_71
.LBB232_70:                             # %cond.false576
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB232_71:                             # %cond.end578
                                        #   in Loop: Header=BB232_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB232_73
# %bb.72:                               # %cond.true584
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB232_74
.LBB232_73:                             # %cond.false586
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB232_74:                             # %cond.end588
                                        #   in Loop: Header=BB232_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB232_76
# %bb.75:                               # %cond.true602
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB232_77
.LBB232_76:                             # %cond.false604
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB232_77:                             # %cond.end606
                                        #   in Loop: Header=BB232_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB232_79
# %bb.78:                               # %cond.true612
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB232_80
.LBB232_79:                             # %cond.false614
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB232_80:                             # %cond.end616
                                        #   in Loop: Header=BB232_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB232_81:                             # %if.end626
                                        #   in Loop: Header=BB232_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB232_83
# %bb.82:                               # %cond.true631
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB232_84
.LBB232_83:                             # %cond.false633
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB232_84:                             # %cond.end635
                                        #   in Loop: Header=BB232_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB232_86
# %bb.85:                               # %cond.true641
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB232_87
.LBB232_86:                             # %cond.false643
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB232_87:                             # %cond.end645
                                        #   in Loop: Header=BB232_34 Depth=2
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB232_89
# %bb.88:                               # %if.then652
                                        #   in Loop: Header=BB232_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	$-1, (%rax,%rcx,8)
	jmp	.LBB232_102
.LBB232_89:                             # %if.else665
                                        #   in Loop: Header=BB232_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB232_91
# %bb.90:                               # %cond.true670
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB232_92
.LBB232_91:                             # %cond.false672
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB232_92:                             # %cond.end674
                                        #   in Loop: Header=BB232_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB232_94
# %bb.93:                               # %cond.true680
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB232_95
.LBB232_94:                             # %cond.false682
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB232_95:                             # %cond.end684
                                        #   in Loop: Header=BB232_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB232_97
# %bb.96:                               # %cond.true698
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB232_98
.LBB232_97:                             # %cond.false700
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB232_98:                             # %cond.end702
                                        #   in Loop: Header=BB232_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB232_100
# %bb.99:                               # %cond.true708
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB232_101
.LBB232_100:                            # %cond.false710
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB232_101:                            # %cond.end712
                                        #   in Loop: Header=BB232_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB232_102:                            # %if.end722
                                        #   in Loop: Header=BB232_34 Depth=2
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB232_113
# %bb.103:                              # %if.then727
                                        #   in Loop: Header=BB232_34 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 4864(%rax)
	jne	.LBB232_107
# %bb.104:                              # %land.lhs.true730
                                        #   in Loop: Header=BB232_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB232_107
# %bb.105:                              # %land.lhs.true740
                                        #   in Loop: Header=BB232_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB232_107
# %bb.106:                              # %land.lhs.true752
                                        #   in Loop: Header=BB232_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB232_112
.LBB232_107:                            # %lor.rhs
                                        #   in Loop: Header=BB232_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB232_111
# %bb.108:                              # %land.lhs.true774
                                        #   in Loop: Header=BB232_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB232_111
# %bb.109:                              # %land.lhs.true784
                                        #   in Loop: Header=BB232_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB232_111
# %bb.110:                              # %land.rhs
                                        #   in Loop: Header=BB232_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB232_111:                            # %land.end
                                        #   in Loop: Header=BB232_34 Depth=2
.LBB232_112:                            # %lor.end
                                        #   in Loop: Header=BB232_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	1624(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB232_113:                            # %if.end814
                                        #   in Loop: Header=BB232_34 Depth=2
	jmp	.LBB232_236
.LBB232_114:                            # %if.else815
                                        #   in Loop: Header=BB232_34 Depth=2
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB232_116
# %bb.115:                              # %cond.true820
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB232_117
.LBB232_116:                            # %cond.false822
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB232_117:                            # %cond.end824
                                        #   in Loop: Header=BB232_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB232_119
# %bb.118:                              # %cond.true830
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB232_120
.LBB232_119:                            # %cond.false832
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB232_120:                            # %cond.end834
                                        #   in Loop: Header=BB232_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB232_122
# %bb.121:                              # %cond.true849
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB232_123
.LBB232_122:                            # %cond.false851
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB232_123:                            # %cond.end853
                                        #   in Loop: Header=BB232_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB232_125
# %bb.124:                              # %cond.true859
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB232_126
.LBB232_125:                            # %cond.false861
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB232_126:                            # %cond.end863
                                        #   in Loop: Header=BB232_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB232_128
# %bb.127:                              # %cond.true879
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB232_129
.LBB232_128:                            # %cond.false881
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB232_129:                            # %cond.end883
                                        #   in Loop: Header=BB232_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB232_131
# %bb.130:                              # %cond.true889
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB232_132
.LBB232_131:                            # %cond.false891
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB232_132:                            # %cond.end893
                                        #   in Loop: Header=BB232_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB232_134
# %bb.133:                              # %cond.true909
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB232_135
.LBB232_134:                            # %cond.false911
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB232_135:                            # %cond.end913
                                        #   in Loop: Header=BB232_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB232_137
# %bb.136:                              # %cond.true919
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB232_138
.LBB232_137:                            # %cond.false921
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB232_138:                            # %cond.end923
                                        #   in Loop: Header=BB232_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB232_140
# %bb.139:                              # %cond.true939
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB232_141
.LBB232_140:                            # %cond.false941
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB232_141:                            # %cond.end943
                                        #   in Loop: Header=BB232_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB232_143
# %bb.142:                              # %cond.true949
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB232_144
.LBB232_143:                            # %cond.false951
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB232_144:                            # %cond.end953
                                        #   in Loop: Header=BB232_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	4832(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB232_146
# %bb.145:                              # %cond.true966
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB232_147
.LBB232_146:                            # %cond.false968
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB232_147:                            # %cond.end970
                                        #   in Loop: Header=BB232_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB232_149
# %bb.148:                              # %cond.true976
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB232_150
.LBB232_149:                            # %cond.false978
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB232_150:                            # %cond.end980
                                        #   in Loop: Header=BB232_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	4832(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-56(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB232_152
# %bb.151:                              # %cond.true994
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB232_153
.LBB232_152:                            # %cond.false996
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB232_153:                            # %cond.end998
                                        #   in Loop: Header=BB232_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB232_155
# %bb.154:                              # %cond.true1004
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB232_156
.LBB232_155:                            # %cond.false1006
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB232_156:                            # %cond.end1008
                                        #   in Loop: Header=BB232_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	4840(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-56(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB232_158
# %bb.157:                              # %cond.true1021
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB232_159
.LBB232_158:                            # %cond.false1023
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB232_159:                            # %cond.end1025
                                        #   in Loop: Header=BB232_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB232_161
# %bb.160:                              # %cond.true1031
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB232_162
.LBB232_161:                            # %cond.false1033
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB232_162:                            # %cond.end1035
                                        #   in Loop: Header=BB232_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	4840(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB232_173
# %bb.163:                              # %if.then1048
                                        #   in Loop: Header=BB232_34 Depth=2
	movq	-56(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB232_167
# %bb.164:                              # %land.lhs.true1051
                                        #   in Loop: Header=BB232_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB232_167
# %bb.165:                              # %land.lhs.true1061
                                        #   in Loop: Header=BB232_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB232_167
# %bb.166:                              # %land.lhs.true1074
                                        #   in Loop: Header=BB232_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB232_172
.LBB232_167:                            # %lor.rhs1087
                                        #   in Loop: Header=BB232_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB232_171
# %bb.168:                              # %land.lhs.true1097
                                        #   in Loop: Header=BB232_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB232_171
# %bb.169:                              # %land.lhs.true1107
                                        #   in Loop: Header=BB232_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB232_171
# %bb.170:                              # %land.rhs1120
                                        #   in Loop: Header=BB232_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB232_171:                            # %land.end1133
                                        #   in Loop: Header=BB232_34 Depth=2
.LBB232_172:                            # %lor.end1134
                                        #   in Loop: Header=BB232_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	4856(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB232_173:                            # %if.end1142
                                        #   in Loop: Header=BB232_34 Depth=2
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB232_175
# %bb.174:                              # %cond.true1147
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB232_176
.LBB232_175:                            # %cond.false1149
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB232_176:                            # %cond.end1151
                                        #   in Loop: Header=BB232_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB232_178
# %bb.177:                              # %cond.true1157
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB232_179
.LBB232_178:                            # %cond.false1159
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB232_179:                            # %cond.end1161
                                        #   in Loop: Header=BB232_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB232_181
# %bb.180:                              # %cond.true1176
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB232_182
.LBB232_181:                            # %cond.false1178
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB232_182:                            # %cond.end1180
                                        #   in Loop: Header=BB232_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB232_184
# %bb.183:                              # %cond.true1186
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB232_185
.LBB232_184:                            # %cond.false1188
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB232_185:                            # %cond.end1190
                                        #   in Loop: Header=BB232_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB232_187
# %bb.186:                              # %cond.true1206
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB232_188
.LBB232_187:                            # %cond.false1208
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB232_188:                            # %cond.end1210
                                        #   in Loop: Header=BB232_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB232_190
# %bb.189:                              # %cond.true1216
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB232_191
.LBB232_190:                            # %cond.false1218
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB232_191:                            # %cond.end1220
                                        #   in Loop: Header=BB232_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB232_193
# %bb.192:                              # %cond.true1236
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB232_194
.LBB232_193:                            # %cond.false1238
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB232_194:                            # %cond.end1240
                                        #   in Loop: Header=BB232_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB232_196
# %bb.195:                              # %cond.true1246
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB232_197
.LBB232_196:                            # %cond.false1248
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB232_197:                            # %cond.end1250
                                        #   in Loop: Header=BB232_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB232_199
# %bb.198:                              # %cond.true1266
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB232_200
.LBB232_199:                            # %cond.false1268
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB232_200:                            # %cond.end1270
                                        #   in Loop: Header=BB232_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB232_202
# %bb.201:                              # %cond.true1276
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB232_203
.LBB232_202:                            # %cond.false1278
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB232_203:                            # %cond.end1280
                                        #   in Loop: Header=BB232_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	3216(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB232_205
# %bb.204:                              # %cond.true1293
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB232_206
.LBB232_205:                            # %cond.false1295
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB232_206:                            # %cond.end1297
                                        #   in Loop: Header=BB232_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB232_208
# %bb.207:                              # %cond.true1303
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB232_209
.LBB232_208:                            # %cond.false1305
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB232_209:                            # %cond.end1307
                                        #   in Loop: Header=BB232_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	3216(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-40(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB232_211
# %bb.210:                              # %cond.true1321
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB232_212
.LBB232_211:                            # %cond.false1323
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB232_212:                            # %cond.end1325
                                        #   in Loop: Header=BB232_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB232_214
# %bb.213:                              # %cond.true1331
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB232_215
.LBB232_214:                            # %cond.false1333
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB232_215:                            # %cond.end1335
                                        #   in Loop: Header=BB232_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	3224(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB232_217
# %bb.216:                              # %cond.true1348
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB232_218
.LBB232_217:                            # %cond.false1350
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB232_218:                            # %cond.end1352
                                        #   in Loop: Header=BB232_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB232_220
# %bb.219:                              # %cond.true1358
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB232_221
.LBB232_220:                            # %cond.false1360
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB232_221:                            # %cond.end1362
                                        #   in Loop: Header=BB232_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	3224(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB232_232
# %bb.222:                              # %if.then1375
                                        #   in Loop: Header=BB232_34 Depth=2
	movq	-40(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB232_226
# %bb.223:                              # %land.lhs.true1378
                                        #   in Loop: Header=BB232_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB232_226
# %bb.224:                              # %land.lhs.true1388
                                        #   in Loop: Header=BB232_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB232_226
# %bb.225:                              # %land.lhs.true1401
                                        #   in Loop: Header=BB232_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB232_231
.LBB232_226:                            # %lor.rhs1414
                                        #   in Loop: Header=BB232_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB232_230
# %bb.227:                              # %land.lhs.true1424
                                        #   in Loop: Header=BB232_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB232_230
# %bb.228:                              # %land.lhs.true1434
                                        #   in Loop: Header=BB232_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB232_230
# %bb.229:                              # %land.rhs1447
                                        #   in Loop: Header=BB232_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB232_230:                            # %land.end1460
                                        #   in Loop: Header=BB232_34 Depth=2
.LBB232_231:                            # %lor.end1461
                                        #   in Loop: Header=BB232_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	3240(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB232_232:                            # %if.end1469
                                        #   in Loop: Header=BB232_34 Depth=2
	movq	img, %rax
	cmpl	$0, 71996(%rax)
	jne	.LBB232_235
# %bb.233:                              # %land.lhs.true1473
                                        #   in Loop: Header=BB232_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB232_235
# %bb.234:                              # %if.then1481
                                        #   in Loop: Header=BB232_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
.LBB232_235:                            # %if.end1522
                                        #   in Loop: Header=BB232_34 Depth=2
	jmp	.LBB232_236
.LBB232_236:                            # %if.end1523
                                        #   in Loop: Header=BB232_34 Depth=2
	jmp	.LBB232_237
.LBB232_237:                            # %for.inc1524
                                        #   in Loop: Header=BB232_34 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB232_34
.LBB232_238:                            # %for.end1526
                                        #   in Loop: Header=BB232_32 Depth=1
	jmp	.LBB232_239
.LBB232_239:                            # %for.inc1527
                                        #   in Loop: Header=BB232_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB232_32
.LBB232_240:                            # %for.end1529
	jmp	.LBB232_241
.LBB232_241:                            # %if.end1530
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB232_243
# %bb.242:                              # %lor.lhs.false1533
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB232_259
.LBB232_243:                            # %if.then1536
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB232_258
# %bb.244:                              # %if.then1539
	movl	$0, -12(%rbp)
.LBB232_245:                            # %for.cond1540
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB232_247 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB232_257
# %bb.246:                              # %for.body1545
                                        #   in Loop: Header=BB232_245 Depth=1
	movl	$0, -16(%rbp)
.LBB232_247:                            # %for.cond1546
                                        #   Parent Loop BB232_245 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB232_255
# %bb.248:                              # %for.body1551
                                        #   in Loop: Header=BB232_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB232_253
# %bb.249:                              # %if.then1558
                                        #   in Loop: Header=BB232_247 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	subl	4(%rax), %edi
	callq	abs
	movl	%eax, %ebx
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	subl	4(%rax), %edi
	callq	abs
	cmpl	%eax, %ebx
	jle	.LBB232_251
# %bb.250:                              # %if.then1571
                                        #   in Loop: Header=BB232_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	jmp	.LBB232_252
.LBB232_251:                            # %if.else1699
                                        #   in Loop: Header=BB232_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB232_252:                            # %if.end1829
                                        #   in Loop: Header=BB232_247 Depth=2
	jmp	.LBB232_253
.LBB232_253:                            # %if.end1830
                                        #   in Loop: Header=BB232_247 Depth=2
	jmp	.LBB232_254
.LBB232_254:                            # %for.inc1831
                                        #   in Loop: Header=BB232_247 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB232_247
.LBB232_255:                            # %for.end1833
                                        #   in Loop: Header=BB232_245 Depth=1
	jmp	.LBB232_256
.LBB232_256:                            # %for.inc1834
                                        #   in Loop: Header=BB232_245 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB232_245
.LBB232_257:                            # %for.end1836
	jmp	.LBB232_258
.LBB232_258:                            # %if.end1837
	jmp	.LBB232_259
.LBB232_259:                            # %if.end1838
	movl	$0, -12(%rbp)
.LBB232_260:                            # %for.cond1839
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB232_262 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB232_330
# %bb.261:                              # %for.body1844
                                        #   in Loop: Header=BB232_260 Depth=1
	movl	$0, -16(%rbp)
.LBB232_262:                            # %for.cond1845
                                        #   Parent Loop BB232_260 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB232_328
# %bb.263:                              # %for.body1850
                                        #   in Loop: Header=BB232_262 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB232_265
# %bb.264:                              # %lor.lhs.false1853
                                        #   in Loop: Header=BB232_262 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB232_314
.LBB232_265:                            # %if.then1856
                                        #   in Loop: Header=BB232_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB232_267
# %bb.266:                              # %cond.true1861
                                        #   in Loop: Header=BB232_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB232_268
.LBB232_267:                            # %cond.false1863
                                        #   in Loop: Header=BB232_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB232_268:                            # %cond.end1865
                                        #   in Loop: Header=BB232_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB232_270
# %bb.269:                              # %cond.true1871
                                        #   in Loop: Header=BB232_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB232_271
.LBB232_270:                            # %cond.false1873
                                        #   in Loop: Header=BB232_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB232_271:                            # %cond.end1875
                                        #   in Loop: Header=BB232_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB232_273
# %bb.272:                              # %cond.true1891
                                        #   in Loop: Header=BB232_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB232_274
.LBB232_273:                            # %cond.false1893
                                        #   in Loop: Header=BB232_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB232_274:                            # %cond.end1895
                                        #   in Loop: Header=BB232_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB232_276
# %bb.275:                              # %cond.true1901
                                        #   in Loop: Header=BB232_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB232_277
.LBB232_276:                            # %cond.false1903
                                        #   in Loop: Header=BB232_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB232_277:                            # %cond.end1905
                                        #   in Loop: Header=BB232_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB232_279
# %bb.278:                              # %cond.true1921
                                        #   in Loop: Header=BB232_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB232_280
.LBB232_279:                            # %cond.false1923
                                        #   in Loop: Header=BB232_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB232_280:                            # %cond.end1925
                                        #   in Loop: Header=BB232_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB232_282
# %bb.281:                              # %cond.true1931
                                        #   in Loop: Header=BB232_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB232_283
.LBB232_282:                            # %cond.false1933
                                        #   in Loop: Header=BB232_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB232_283:                            # %cond.end1935
                                        #   in Loop: Header=BB232_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB232_285
# %bb.284:                              # %cond.true1951
                                        #   in Loop: Header=BB232_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB232_286
.LBB232_285:                            # %cond.false1953
                                        #   in Loop: Header=BB232_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB232_286:                            # %cond.end1955
                                        #   in Loop: Header=BB232_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB232_288
# %bb.287:                              # %cond.true1961
                                        #   in Loop: Header=BB232_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB232_289
.LBB232_288:                            # %cond.false1963
                                        #   in Loop: Header=BB232_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB232_289:                            # %cond.end1965
                                        #   in Loop: Header=BB232_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB232_291
# %bb.290:                              # %cond.true1981
                                        #   in Loop: Header=BB232_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB232_292
.LBB232_291:                            # %cond.false1983
                                        #   in Loop: Header=BB232_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB232_292:                            # %cond.end1985
                                        #   in Loop: Header=BB232_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB232_294
# %bb.293:                              # %cond.true1991
                                        #   in Loop: Header=BB232_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB232_295
.LBB232_294:                            # %cond.false1993
                                        #   in Loop: Header=BB232_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB232_295:                            # %cond.end1995
                                        #   in Loop: Header=BB232_262 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB232_297
# %bb.296:                              # %cond.true2009
                                        #   in Loop: Header=BB232_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB232_298
.LBB232_297:                            # %cond.false2011
                                        #   in Loop: Header=BB232_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB232_298:                            # %cond.end2013
                                        #   in Loop: Header=BB232_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB232_300
# %bb.299:                              # %cond.true2019
                                        #   in Loop: Header=BB232_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB232_301
.LBB232_300:                            # %cond.false2021
                                        #   in Loop: Header=BB232_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB232_301:                            # %cond.end2023
                                        #   in Loop: Header=BB232_262 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB232_303
# %bb.302:                              # %cond.true2037
                                        #   in Loop: Header=BB232_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB232_304
.LBB232_303:                            # %cond.false2039
                                        #   in Loop: Header=BB232_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB232_304:                            # %cond.end2041
                                        #   in Loop: Header=BB232_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB232_306
# %bb.305:                              # %cond.true2047
                                        #   in Loop: Header=BB232_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB232_307
.LBB232_306:                            # %cond.false2049
                                        #   in Loop: Header=BB232_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB232_307:                            # %cond.end2051
                                        #   in Loop: Header=BB232_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB232_309
# %bb.308:                              # %cond.true2065
                                        #   in Loop: Header=BB232_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB232_310
.LBB232_309:                            # %cond.false2067
                                        #   in Loop: Header=BB232_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB232_310:                            # %cond.end2069
                                        #   in Loop: Header=BB232_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB232_312
# %bb.311:                              # %cond.true2075
                                        #   in Loop: Header=BB232_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB232_313
.LBB232_312:                            # %cond.false2077
                                        #   in Loop: Header=BB232_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB232_313:                            # %cond.end2079
                                        #   in Loop: Header=BB232_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB232_315
.LBB232_314:                            # %if.else2089
                                        #   in Loop: Header=BB232_262 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB232_315:                            # %if.end2194
                                        #   in Loop: Header=BB232_262 Depth=2
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB232_326
# %bb.316:                              # %if.then2200
                                        #   in Loop: Header=BB232_262 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 4864(%rax)
	jne	.LBB232_320
# %bb.317:                              # %land.lhs.true2203
                                        #   in Loop: Header=BB232_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB232_320
# %bb.318:                              # %land.lhs.true2213
                                        #   in Loop: Header=BB232_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB232_320
# %bb.319:                              # %land.lhs.true2226
                                        #   in Loop: Header=BB232_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB232_325
.LBB232_320:                            # %lor.rhs2239
                                        #   in Loop: Header=BB232_262 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB232_324
# %bb.321:                              # %land.lhs.true2249
                                        #   in Loop: Header=BB232_262 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB232_324
# %bb.322:                              # %land.lhs.true2259
                                        #   in Loop: Header=BB232_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB232_324
# %bb.323:                              # %land.rhs2272
                                        #   in Loop: Header=BB232_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB232_324:                            # %land.end2285
                                        #   in Loop: Header=BB232_262 Depth=2
.LBB232_325:                            # %lor.end2286
                                        #   in Loop: Header=BB232_262 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	1624(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB232_326:                            # %if.end2295
                                        #   in Loop: Header=BB232_262 Depth=2
	jmp	.LBB232_327
.LBB232_327:                            # %for.inc2296
                                        #   in Loop: Header=BB232_262 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB232_262
.LBB232_328:                            # %for.end2298
                                        #   in Loop: Header=BB232_260 Depth=1
	jmp	.LBB232_329
.LBB232_329:                            # %for.inc2299
                                        #   in Loop: Header=BB232_260 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB232_260
.LBB232_330:                            # %for.end2301
	movq	img, %rax
	cmpl	$0, 71996(%rax)
	jne	.LBB232_397
# %bb.331:                              # %if.then2305
	movl	$0, -12(%rbp)
.LBB232_332:                            # %for.cond2306
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB232_334 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB232_349
# %bb.333:                              # %for.body2311
                                        #   in Loop: Header=BB232_332 Depth=1
	movl	$0, -16(%rbp)
.LBB232_334:                            # %for.cond2312
                                        #   Parent Loop BB232_332 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB232_347
# %bb.335:                              # %for.body2317
                                        #   in Loop: Header=BB232_334 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB232_338
# %bb.336:                              # %land.lhs.true2320
                                        #   in Loop: Header=BB232_334 Depth=2
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB232_338
# %bb.337:                              # %land.lhs.true2323
                                        #   in Loop: Header=BB232_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB232_340
.LBB232_338:                            # %lor.lhs.false2331
                                        #   in Loop: Header=BB232_334 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB232_341
# %bb.339:                              # %land.lhs.true2334
                                        #   in Loop: Header=BB232_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB232_341
.LBB232_340:                            # %if.then2342
                                        #   in Loop: Header=BB232_334 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %ecx
	shll	$1, %ecx
	movw	%cx, 2(%rax)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %ecx
	shll	$1, %ecx
	movw	%cx, 2(%rax)
	jmp	.LBB232_345
.LBB232_341:                            # %if.else2363
                                        #   in Loop: Header=BB232_334 Depth=2
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB232_344
# %bb.342:                              # %land.lhs.true2366
                                        #   in Loop: Header=BB232_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB232_344
# %bb.343:                              # %if.then2373
                                        #   in Loop: Header=BB232_334 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movswl	2(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movswl	2(%rcx), %eax
	cltd
	idivl	%esi
	movw	%ax, 2(%rcx)
.LBB232_344:                            # %if.end2394
                                        #   in Loop: Header=BB232_334 Depth=2
	jmp	.LBB232_345
.LBB232_345:                            # %if.end2395
                                        #   in Loop: Header=BB232_334 Depth=2
	jmp	.LBB232_346
.LBB232_346:                            # %for.inc2396
                                        #   in Loop: Header=BB232_334 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB232_334
.LBB232_347:                            # %for.end2398
                                        #   in Loop: Header=BB232_332 Depth=1
	jmp	.LBB232_348
.LBB232_348:                            # %for.inc2399
                                        #   in Loop: Header=BB232_332 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB232_332
.LBB232_349:                            # %for.end2401
	movl	$0, -12(%rbp)
.LBB232_350:                            # %for.cond2402
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB232_352 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	72400(%rcx), %ecx
	shll	$2, %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB232_396
# %bb.351:                              # %for.body2408
                                        #   in Loop: Header=BB232_350 Depth=1
	movl	$0, -16(%rbp)
.LBB232_352:                            # %for.cond2409
                                        #   Parent Loop BB232_350 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB232_394
# %bb.353:                              # %for.body2414
                                        #   in Loop: Header=BB232_352 Depth=2
	cmpl	$0, -12(%rbp)
	jne	.LBB232_361
# %bb.354:                              # %if.then2417
                                        #   in Loop: Header=BB232_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB232_356
# %bb.355:                              # %cond.true2428
                                        #   in Loop: Header=BB232_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB232_360
.LBB232_356:                            # %cond.false2429
                                        #   in Loop: Header=BB232_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB232_358
# %bb.357:                              # %cond.true2440
                                        #   in Loop: Header=BB232_352 Depth=2
	movl	$127, %eax
	jmp	.LBB232_359
.LBB232_358:                            # %cond.false2441
                                        #   in Loop: Header=BB232_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB232_359:                            # %cond.end2450
                                        #   in Loop: Header=BB232_352 Depth=2
.LBB232_360:                            # %cond.end2452
                                        #   in Loop: Header=BB232_352 Depth=2
	movl	%eax, -60(%rbp)
	jmp	.LBB232_377
.LBB232_361:                            # %if.else2454
                                        #   in Loop: Header=BB232_352 Depth=2
	cmpl	$2, -12(%rbp)
	jne	.LBB232_369
# %bb.362:                              # %if.then2457
                                        #   in Loop: Header=BB232_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB232_364
# %bb.363:                              # %cond.true2467
                                        #   in Loop: Header=BB232_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB232_368
.LBB232_364:                            # %cond.false2468
                                        #   in Loop: Header=BB232_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB232_366
# %bb.365:                              # %cond.true2479
                                        #   in Loop: Header=BB232_352 Depth=2
	movl	$127, %eax
	jmp	.LBB232_367
.LBB232_366:                            # %cond.false2480
                                        #   in Loop: Header=BB232_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB232_367:                            # %cond.end2489
                                        #   in Loop: Header=BB232_352 Depth=2
.LBB232_368:                            # %cond.end2491
                                        #   in Loop: Header=BB232_352 Depth=2
	movl	%eax, -60(%rbp)
	jmp	.LBB232_376
.LBB232_369:                            # %if.else2493
                                        #   in Loop: Header=BB232_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB232_371
# %bb.370:                              # %cond.true2503
                                        #   in Loop: Header=BB232_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB232_375
.LBB232_371:                            # %cond.false2504
                                        #   in Loop: Header=BB232_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB232_373
# %bb.372:                              # %cond.true2515
                                        #   in Loop: Header=BB232_352 Depth=2
	movl	$127, %eax
	jmp	.LBB232_374
.LBB232_373:                            # %cond.false2516
                                        #   in Loop: Header=BB232_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB232_374:                            # %cond.end2525
                                        #   in Loop: Header=BB232_352 Depth=2
.LBB232_375:                            # %cond.end2527
                                        #   in Loop: Header=BB232_352 Depth=2
	movl	%eax, -60(%rbp)
.LBB232_376:                            # %if.end2529
                                        #   in Loop: Header=BB232_352 Depth=2
	jmp	.LBB232_377
.LBB232_377:                            # %if.end2530
                                        #   in Loop: Header=BB232_352 Depth=2
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB232_379
# %bb.378:                              # %cond.true2545
                                        #   in Loop: Header=BB232_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB232_383
.LBB232_379:                            # %cond.false2546
                                        #   in Loop: Header=BB232_352 Depth=2
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB232_381
# %bb.380:                              # %cond.true2561
                                        #   in Loop: Header=BB232_352 Depth=2
	movl	$127, %eax
	jmp	.LBB232_382
.LBB232_381:                            # %cond.false2562
                                        #   in Loop: Header=BB232_352 Depth=2
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB232_382:                            # %cond.end2575
                                        #   in Loop: Header=BB232_352 Depth=2
.LBB232_383:                            # %cond.end2577
                                        #   in Loop: Header=BB232_352 Depth=2
	movl	%eax, -64(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB232_391
# %bb.384:                              # %if.then2581
                                        #   in Loop: Header=BB232_352 Depth=2
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-64(%rbp)
	movl	%eax, -68(%rbp)
	movl	-60(%rbp), %eax
	imull	-68(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB232_386
# %bb.385:                              # %cond.true2591
                                        #   in Loop: Header=BB232_352 Depth=2
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB232_390
.LBB232_386:                            # %cond.false2592
                                        #   in Loop: Header=BB232_352 Depth=2
	movl	-60(%rbp), %eax
	imull	-68(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB232_388
# %bb.387:                              # %cond.true2598
                                        #   in Loop: Header=BB232_352 Depth=2
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB232_389
.LBB232_388:                            # %cond.false2599
                                        #   in Loop: Header=BB232_352 Depth=2
	movl	-60(%rbp), %eax
	imull	-68(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB232_389:                            # %cond.end2603
                                        #   in Loop: Header=BB232_352 Depth=2
.LBB232_390:                            # %cond.end2605
                                        #   in Loop: Header=BB232_352 Depth=2
	movq	img, %rcx
	addq	$72016, %rcx            # imm = 0x11950
	movslq	-12(%rbp), %rdx
	imulq	$60, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB232_392
.LBB232_391:                            # %if.else2611
                                        #   in Loop: Header=BB232_352 Depth=2
	movq	img, %rax
	addq	$72016, %rax            # imm = 0x11950
	movslq	-12(%rbp), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$9999, (%rax,%rcx,4)    # imm = 0x270F
.LBB232_392:                            # %if.end2617
                                        #   in Loop: Header=BB232_352 Depth=2
	jmp	.LBB232_393
.LBB232_393:                            # %for.inc2618
                                        #   in Loop: Header=BB232_352 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB232_352
.LBB232_394:                            # %for.end2620
                                        #   in Loop: Header=BB232_350 Depth=1
	jmp	.LBB232_395
.LBB232_395:                            # %for.inc2621
                                        #   in Loop: Header=BB232_350 Depth=1
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB232_350
.LBB232_396:                            # %for.end2623
	jmp	.LBB232_397
.LBB232_397:                            # %if.end2624
	cmpl	$2035583895, -72(%rbp)  # imm = 0x79548B97
	jne	.LBB232_399
.LBB232_398:
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB232_399:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB232_398
.Lfunc_end232:
	.size	compute_colocated.169, .Lfunc_end232-compute_colocated.169
	.cfi_endproc
                                        # -- End function
	.globl	compute_colocated.170   # -- Begin function compute_colocated.170
	.p2align	4, 0x90
	.type	compute_colocated.170,@function
compute_colocated.170:                  # @compute_colocated.170
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$119295366, -72(%rbp)   # imm = 0x71C4D86
	movq	%rdi, -24(%rbp)
	movq	%rsi, -56(%rbp)
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -40(%rbp)
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB233_2
# %bb.1:                                # %if.then
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-56(%rbp), %rax
	movq	40(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB233_11
.LBB233_2:                              # %if.else
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB233_10
# %bb.3:                                # %if.then6
	movq	img, %rax
	movl	28(%rax), %eax
	movq	-32(%rbp), %rcx
	cmpl	(%rcx), %eax
	je	.LBB233_9
# %bb.4:                                # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$0, 6412(%rax)
	je	.LBB233_9
# %bb.5:                                # %if.then11
	movq	img, %rax
	cmpl	$1, 28(%rax)
	jne	.LBB233_7
# %bb.6:                                # %if.then14
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	6528(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -40(%rbp)
	movq	%rax, -48(%rbp)
	jmp	.LBB233_8
.LBB233_7:                              # %if.else17
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	6536(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -40(%rbp)
	movq	%rax, -48(%rbp)
.LBB233_8:                              # %if.end
	jmp	.LBB233_9
.LBB233_9:                              # %if.end20
	jmp	.LBB233_10
.LBB233_10:                             # %if.end21
	jmp	.LBB233_11
.LBB233_11:                             # %if.end22
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB233_13
# %bb.12:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB233_29
.LBB233_13:                             # %if.then25
	movl	$0, -12(%rbp)
.LBB233_14:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB233_16 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB233_28
# %bb.15:                               # %for.body
                                        #   in Loop: Header=BB233_14 Depth=1
	movl	$0, -16(%rbp)
.LBB233_16:                             # %for.cond27
                                        #   Parent Loop BB233_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB233_26
# %bb.17:                               # %for.body30
                                        #   in Loop: Header=BB233_16 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB233_23
# %bb.18:                               # %land.lhs.true33
                                        #   in Loop: Header=BB233_16 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB233_23
# %bb.19:                               # %if.then38
                                        #   in Loop: Header=BB233_16 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-40(%rbp), %rax
	subl	4(%rax), %edi
	callq	abs
	movl	%eax, %ebx
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-48(%rbp), %rax
	subl	4(%rax), %edi
	callq	abs
	cmpl	%eax, %ebx
	jle	.LBB233_21
# %bb.20:                               # %if.then46
                                        #   in Loop: Header=BB233_16 Depth=2
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-48(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	jmp	.LBB233_22
.LBB233_21:                             # %if.else160
                                        #   in Loop: Header=BB233_16 Depth=2
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB233_22:                             # %if.end283
                                        #   in Loop: Header=BB233_16 Depth=2
	jmp	.LBB233_24
.LBB233_23:                             # %if.else284
                                        #   in Loop: Header=BB233_16 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB233_24:                             # %if.end391
                                        #   in Loop: Header=BB233_16 Depth=2
	jmp	.LBB233_25
.LBB233_25:                             # %for.inc
                                        #   in Loop: Header=BB233_16 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB233_16
.LBB233_26:                             # %for.end
                                        #   in Loop: Header=BB233_14 Depth=1
	jmp	.LBB233_27
.LBB233_27:                             # %for.inc392
                                        #   in Loop: Header=BB233_14 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB233_14
.LBB233_28:                             # %for.end394
	jmp	.LBB233_29
.LBB233_29:                             # %if.end395
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB233_31
# %bb.30:                               # %lor.lhs.false398
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB233_241
.LBB233_31:                             # %if.then401
	movl	$0, -16(%rbp)
.LBB233_32:                             # %for.cond402
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB233_34 Depth 2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB233_240
# %bb.33:                               # %for.body407
                                        #   in Loop: Header=BB233_32 Depth=1
	movl	$0, -12(%rbp)
.LBB233_34:                             # %for.cond408
                                        #   Parent Loop BB233_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB233_238
# %bb.35:                               # %for.body413
                                        #   in Loop: Header=BB233_34 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB233_114
# %bb.36:                               # %if.then416
                                        #   in Loop: Header=BB233_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_38
# %bb.37:                               # %cond.true
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_39
.LBB233_38:                             # %cond.false
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_39:                             # %cond.end
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_41
# %bb.40:                               # %cond.true425
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_42
.LBB233_41:                             # %cond.false427
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_42:                             # %cond.end429
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_44
# %bb.43:                               # %cond.true445
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_45
.LBB233_44:                             # %cond.false447
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_45:                             # %cond.end449
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_47
# %bb.46:                               # %cond.true455
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_48
.LBB233_47:                             # %cond.false457
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_48:                             # %cond.end459
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_50
# %bb.49:                               # %cond.true475
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_51
.LBB233_50:                             # %cond.false477
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_51:                             # %cond.end479
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_53
# %bb.52:                               # %cond.true485
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_54
.LBB233_53:                             # %cond.false487
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_54:                             # %cond.end489
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_56
# %bb.55:                               # %cond.true505
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_57
.LBB233_56:                             # %cond.false507
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_57:                             # %cond.end509
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_59
# %bb.58:                               # %cond.true515
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_60
.LBB233_59:                             # %cond.false517
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_60:                             # %cond.end519
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_62
# %bb.61:                               # %cond.true535
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_63
.LBB233_62:                             # %cond.false537
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_63:                             # %cond.end539
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_65
# %bb.64:                               # %cond.true545
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_66
.LBB233_65:                             # %cond.false547
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_66:                             # %cond.end549
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB233_68
# %bb.67:                               # %if.then556
                                        #   in Loop: Header=BB233_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	$-1, (%rax,%rcx,8)
	jmp	.LBB233_81
.LBB233_68:                             # %if.else569
                                        #   in Loop: Header=BB233_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_70
# %bb.69:                               # %cond.true574
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_71
.LBB233_70:                             # %cond.false576
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_71:                             # %cond.end578
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_73
# %bb.72:                               # %cond.true584
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_74
.LBB233_73:                             # %cond.false586
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_74:                             # %cond.end588
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_76
# %bb.75:                               # %cond.true602
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_77
.LBB233_76:                             # %cond.false604
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_77:                             # %cond.end606
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_79
# %bb.78:                               # %cond.true612
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_80
.LBB233_79:                             # %cond.false614
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_80:                             # %cond.end616
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB233_81:                             # %if.end626
                                        #   in Loop: Header=BB233_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_83
# %bb.82:                               # %cond.true631
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_84
.LBB233_83:                             # %cond.false633
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_84:                             # %cond.end635
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_86
# %bb.85:                               # %cond.true641
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_87
.LBB233_86:                             # %cond.false643
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_87:                             # %cond.end645
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB233_89
# %bb.88:                               # %if.then652
                                        #   in Loop: Header=BB233_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	$-1, (%rax,%rcx,8)
	jmp	.LBB233_102
.LBB233_89:                             # %if.else665
                                        #   in Loop: Header=BB233_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_91
# %bb.90:                               # %cond.true670
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_92
.LBB233_91:                             # %cond.false672
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_92:                             # %cond.end674
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_94
# %bb.93:                               # %cond.true680
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_95
.LBB233_94:                             # %cond.false682
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_95:                             # %cond.end684
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_97
# %bb.96:                               # %cond.true698
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_98
.LBB233_97:                             # %cond.false700
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_98:                             # %cond.end702
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_100
# %bb.99:                               # %cond.true708
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_101
.LBB233_100:                            # %cond.false710
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_101:                            # %cond.end712
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB233_102:                            # %if.end722
                                        #   in Loop: Header=BB233_34 Depth=2
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB233_113
# %bb.103:                              # %if.then727
                                        #   in Loop: Header=BB233_34 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 4864(%rax)
	jne	.LBB233_107
# %bb.104:                              # %land.lhs.true730
                                        #   in Loop: Header=BB233_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB233_107
# %bb.105:                              # %land.lhs.true740
                                        #   in Loop: Header=BB233_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB233_107
# %bb.106:                              # %land.lhs.true752
                                        #   in Loop: Header=BB233_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB233_112
.LBB233_107:                            # %lor.rhs
                                        #   in Loop: Header=BB233_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB233_111
# %bb.108:                              # %land.lhs.true774
                                        #   in Loop: Header=BB233_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB233_111
# %bb.109:                              # %land.lhs.true784
                                        #   in Loop: Header=BB233_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB233_111
# %bb.110:                              # %land.rhs
                                        #   in Loop: Header=BB233_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB233_111:                            # %land.end
                                        #   in Loop: Header=BB233_34 Depth=2
.LBB233_112:                            # %lor.end
                                        #   in Loop: Header=BB233_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	1624(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB233_113:                            # %if.end814
                                        #   in Loop: Header=BB233_34 Depth=2
	jmp	.LBB233_236
.LBB233_114:                            # %if.else815
                                        #   in Loop: Header=BB233_34 Depth=2
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_116
# %bb.115:                              # %cond.true820
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_117
.LBB233_116:                            # %cond.false822
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_117:                            # %cond.end824
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_119
# %bb.118:                              # %cond.true830
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_120
.LBB233_119:                            # %cond.false832
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_120:                            # %cond.end834
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_122
# %bb.121:                              # %cond.true849
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_123
.LBB233_122:                            # %cond.false851
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_123:                            # %cond.end853
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_125
# %bb.124:                              # %cond.true859
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_126
.LBB233_125:                            # %cond.false861
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_126:                            # %cond.end863
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_128
# %bb.127:                              # %cond.true879
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_129
.LBB233_128:                            # %cond.false881
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_129:                            # %cond.end883
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_131
# %bb.130:                              # %cond.true889
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_132
.LBB233_131:                            # %cond.false891
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_132:                            # %cond.end893
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_134
# %bb.133:                              # %cond.true909
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_135
.LBB233_134:                            # %cond.false911
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_135:                            # %cond.end913
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_137
# %bb.136:                              # %cond.true919
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_138
.LBB233_137:                            # %cond.false921
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_138:                            # %cond.end923
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_140
# %bb.139:                              # %cond.true939
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_141
.LBB233_140:                            # %cond.false941
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_141:                            # %cond.end943
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_143
# %bb.142:                              # %cond.true949
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_144
.LBB233_143:                            # %cond.false951
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_144:                            # %cond.end953
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	4832(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_146
# %bb.145:                              # %cond.true966
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_147
.LBB233_146:                            # %cond.false968
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_147:                            # %cond.end970
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_149
# %bb.148:                              # %cond.true976
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_150
.LBB233_149:                            # %cond.false978
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_150:                            # %cond.end980
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	4832(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-40(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_152
# %bb.151:                              # %cond.true994
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_153
.LBB233_152:                            # %cond.false996
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_153:                            # %cond.end998
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_155
# %bb.154:                              # %cond.true1004
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_156
.LBB233_155:                            # %cond.false1006
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_156:                            # %cond.end1008
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	4840(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_158
# %bb.157:                              # %cond.true1021
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_159
.LBB233_158:                            # %cond.false1023
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_159:                            # %cond.end1025
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_161
# %bb.160:                              # %cond.true1031
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_162
.LBB233_161:                            # %cond.false1033
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_162:                            # %cond.end1035
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	4840(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB233_173
# %bb.163:                              # %if.then1048
                                        #   in Loop: Header=BB233_34 Depth=2
	movq	-40(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB233_167
# %bb.164:                              # %land.lhs.true1051
                                        #   in Loop: Header=BB233_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB233_167
# %bb.165:                              # %land.lhs.true1061
                                        #   in Loop: Header=BB233_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB233_167
# %bb.166:                              # %land.lhs.true1074
                                        #   in Loop: Header=BB233_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB233_172
.LBB233_167:                            # %lor.rhs1087
                                        #   in Loop: Header=BB233_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB233_171
# %bb.168:                              # %land.lhs.true1097
                                        #   in Loop: Header=BB233_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB233_171
# %bb.169:                              # %land.lhs.true1107
                                        #   in Loop: Header=BB233_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB233_171
# %bb.170:                              # %land.rhs1120
                                        #   in Loop: Header=BB233_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB233_171:                            # %land.end1133
                                        #   in Loop: Header=BB233_34 Depth=2
.LBB233_172:                            # %lor.end1134
                                        #   in Loop: Header=BB233_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	4856(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB233_173:                            # %if.end1142
                                        #   in Loop: Header=BB233_34 Depth=2
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_175
# %bb.174:                              # %cond.true1147
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_176
.LBB233_175:                            # %cond.false1149
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_176:                            # %cond.end1151
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_178
# %bb.177:                              # %cond.true1157
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_179
.LBB233_178:                            # %cond.false1159
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_179:                            # %cond.end1161
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_181
# %bb.180:                              # %cond.true1176
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_182
.LBB233_181:                            # %cond.false1178
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_182:                            # %cond.end1180
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_184
# %bb.183:                              # %cond.true1186
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_185
.LBB233_184:                            # %cond.false1188
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_185:                            # %cond.end1190
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_187
# %bb.186:                              # %cond.true1206
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_188
.LBB233_187:                            # %cond.false1208
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_188:                            # %cond.end1210
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_190
# %bb.189:                              # %cond.true1216
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_191
.LBB233_190:                            # %cond.false1218
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_191:                            # %cond.end1220
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_193
# %bb.192:                              # %cond.true1236
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_194
.LBB233_193:                            # %cond.false1238
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_194:                            # %cond.end1240
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_196
# %bb.195:                              # %cond.true1246
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_197
.LBB233_196:                            # %cond.false1248
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_197:                            # %cond.end1250
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_199
# %bb.198:                              # %cond.true1266
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_200
.LBB233_199:                            # %cond.false1268
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_200:                            # %cond.end1270
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_202
# %bb.201:                              # %cond.true1276
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_203
.LBB233_202:                            # %cond.false1278
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_203:                            # %cond.end1280
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	3216(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_205
# %bb.204:                              # %cond.true1293
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_206
.LBB233_205:                            # %cond.false1295
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_206:                            # %cond.end1297
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_208
# %bb.207:                              # %cond.true1303
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_209
.LBB233_208:                            # %cond.false1305
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_209:                            # %cond.end1307
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	3216(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-48(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_211
# %bb.210:                              # %cond.true1321
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_212
.LBB233_211:                            # %cond.false1323
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_212:                            # %cond.end1325
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_214
# %bb.213:                              # %cond.true1331
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_215
.LBB233_214:                            # %cond.false1333
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_215:                            # %cond.end1335
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	3224(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-48(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_217
# %bb.216:                              # %cond.true1348
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_218
.LBB233_217:                            # %cond.false1350
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_218:                            # %cond.end1352
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_220
# %bb.219:                              # %cond.true1358
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_221
.LBB233_220:                            # %cond.false1360
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_221:                            # %cond.end1362
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	3224(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB233_232
# %bb.222:                              # %if.then1375
                                        #   in Loop: Header=BB233_34 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB233_226
# %bb.223:                              # %land.lhs.true1378
                                        #   in Loop: Header=BB233_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB233_226
# %bb.224:                              # %land.lhs.true1388
                                        #   in Loop: Header=BB233_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB233_226
# %bb.225:                              # %land.lhs.true1401
                                        #   in Loop: Header=BB233_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB233_231
.LBB233_226:                            # %lor.rhs1414
                                        #   in Loop: Header=BB233_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB233_230
# %bb.227:                              # %land.lhs.true1424
                                        #   in Loop: Header=BB233_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB233_230
# %bb.228:                              # %land.lhs.true1434
                                        #   in Loop: Header=BB233_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB233_230
# %bb.229:                              # %land.rhs1447
                                        #   in Loop: Header=BB233_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB233_230:                            # %land.end1460
                                        #   in Loop: Header=BB233_34 Depth=2
.LBB233_231:                            # %lor.end1461
                                        #   in Loop: Header=BB233_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	3240(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB233_232:                            # %if.end1469
                                        #   in Loop: Header=BB233_34 Depth=2
	movq	img, %rax
	cmpl	$0, 71996(%rax)
	jne	.LBB233_235
# %bb.233:                              # %land.lhs.true1473
                                        #   in Loop: Header=BB233_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB233_235
# %bb.234:                              # %if.then1481
                                        #   in Loop: Header=BB233_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
.LBB233_235:                            # %if.end1522
                                        #   in Loop: Header=BB233_34 Depth=2
	jmp	.LBB233_236
.LBB233_236:                            # %if.end1523
                                        #   in Loop: Header=BB233_34 Depth=2
	jmp	.LBB233_237
.LBB233_237:                            # %for.inc1524
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB233_34
.LBB233_238:                            # %for.end1526
                                        #   in Loop: Header=BB233_32 Depth=1
	jmp	.LBB233_239
.LBB233_239:                            # %for.inc1527
                                        #   in Loop: Header=BB233_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB233_32
.LBB233_240:                            # %for.end1529
	jmp	.LBB233_241
.LBB233_241:                            # %if.end1530
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB233_243
# %bb.242:                              # %lor.lhs.false1533
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB233_259
.LBB233_243:                            # %if.then1536
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB233_258
# %bb.244:                              # %if.then1539
	movl	$0, -12(%rbp)
.LBB233_245:                            # %for.cond1540
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB233_247 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB233_257
# %bb.246:                              # %for.body1545
                                        #   in Loop: Header=BB233_245 Depth=1
	movl	$0, -16(%rbp)
.LBB233_247:                            # %for.cond1546
                                        #   Parent Loop BB233_245 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB233_255
# %bb.248:                              # %for.body1551
                                        #   in Loop: Header=BB233_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB233_253
# %bb.249:                              # %if.then1558
                                        #   in Loop: Header=BB233_247 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	subl	4(%rax), %edi
	callq	abs
	movl	%eax, %ebx
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	subl	4(%rax), %edi
	callq	abs
	cmpl	%eax, %ebx
	jle	.LBB233_251
# %bb.250:                              # %if.then1571
                                        #   in Loop: Header=BB233_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	jmp	.LBB233_252
.LBB233_251:                            # %if.else1699
                                        #   in Loop: Header=BB233_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB233_252:                            # %if.end1829
                                        #   in Loop: Header=BB233_247 Depth=2
	jmp	.LBB233_253
.LBB233_253:                            # %if.end1830
                                        #   in Loop: Header=BB233_247 Depth=2
	jmp	.LBB233_254
.LBB233_254:                            # %for.inc1831
                                        #   in Loop: Header=BB233_247 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB233_247
.LBB233_255:                            # %for.end1833
                                        #   in Loop: Header=BB233_245 Depth=1
	jmp	.LBB233_256
.LBB233_256:                            # %for.inc1834
                                        #   in Loop: Header=BB233_245 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB233_245
.LBB233_257:                            # %for.end1836
	jmp	.LBB233_258
.LBB233_258:                            # %if.end1837
	jmp	.LBB233_259
.LBB233_259:                            # %if.end1838
	movl	$0, -12(%rbp)
.LBB233_260:                            # %for.cond1839
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB233_262 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB233_330
# %bb.261:                              # %for.body1844
                                        #   in Loop: Header=BB233_260 Depth=1
	movl	$0, -16(%rbp)
.LBB233_262:                            # %for.cond1845
                                        #   Parent Loop BB233_260 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB233_328
# %bb.263:                              # %for.body1850
                                        #   in Loop: Header=BB233_262 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB233_265
# %bb.264:                              # %lor.lhs.false1853
                                        #   in Loop: Header=BB233_262 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB233_314
.LBB233_265:                            # %if.then1856
                                        #   in Loop: Header=BB233_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_267
# %bb.266:                              # %cond.true1861
                                        #   in Loop: Header=BB233_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_268
.LBB233_267:                            # %cond.false1863
                                        #   in Loop: Header=BB233_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_268:                            # %cond.end1865
                                        #   in Loop: Header=BB233_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_270
# %bb.269:                              # %cond.true1871
                                        #   in Loop: Header=BB233_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_271
.LBB233_270:                            # %cond.false1873
                                        #   in Loop: Header=BB233_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_271:                            # %cond.end1875
                                        #   in Loop: Header=BB233_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_273
# %bb.272:                              # %cond.true1891
                                        #   in Loop: Header=BB233_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_274
.LBB233_273:                            # %cond.false1893
                                        #   in Loop: Header=BB233_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_274:                            # %cond.end1895
                                        #   in Loop: Header=BB233_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_276
# %bb.275:                              # %cond.true1901
                                        #   in Loop: Header=BB233_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_277
.LBB233_276:                            # %cond.false1903
                                        #   in Loop: Header=BB233_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_277:                            # %cond.end1905
                                        #   in Loop: Header=BB233_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_279
# %bb.278:                              # %cond.true1921
                                        #   in Loop: Header=BB233_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_280
.LBB233_279:                            # %cond.false1923
                                        #   in Loop: Header=BB233_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_280:                            # %cond.end1925
                                        #   in Loop: Header=BB233_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_282
# %bb.281:                              # %cond.true1931
                                        #   in Loop: Header=BB233_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_283
.LBB233_282:                            # %cond.false1933
                                        #   in Loop: Header=BB233_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_283:                            # %cond.end1935
                                        #   in Loop: Header=BB233_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_285
# %bb.284:                              # %cond.true1951
                                        #   in Loop: Header=BB233_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_286
.LBB233_285:                            # %cond.false1953
                                        #   in Loop: Header=BB233_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_286:                            # %cond.end1955
                                        #   in Loop: Header=BB233_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_288
# %bb.287:                              # %cond.true1961
                                        #   in Loop: Header=BB233_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_289
.LBB233_288:                            # %cond.false1963
                                        #   in Loop: Header=BB233_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_289:                            # %cond.end1965
                                        #   in Loop: Header=BB233_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_291
# %bb.290:                              # %cond.true1981
                                        #   in Loop: Header=BB233_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_292
.LBB233_291:                            # %cond.false1983
                                        #   in Loop: Header=BB233_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_292:                            # %cond.end1985
                                        #   in Loop: Header=BB233_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_294
# %bb.293:                              # %cond.true1991
                                        #   in Loop: Header=BB233_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_295
.LBB233_294:                            # %cond.false1993
                                        #   in Loop: Header=BB233_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_295:                            # %cond.end1995
                                        #   in Loop: Header=BB233_262 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_297
# %bb.296:                              # %cond.true2009
                                        #   in Loop: Header=BB233_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_298
.LBB233_297:                            # %cond.false2011
                                        #   in Loop: Header=BB233_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_298:                            # %cond.end2013
                                        #   in Loop: Header=BB233_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_300
# %bb.299:                              # %cond.true2019
                                        #   in Loop: Header=BB233_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_301
.LBB233_300:                            # %cond.false2021
                                        #   in Loop: Header=BB233_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_301:                            # %cond.end2023
                                        #   in Loop: Header=BB233_262 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_303
# %bb.302:                              # %cond.true2037
                                        #   in Loop: Header=BB233_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_304
.LBB233_303:                            # %cond.false2039
                                        #   in Loop: Header=BB233_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_304:                            # %cond.end2041
                                        #   in Loop: Header=BB233_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_306
# %bb.305:                              # %cond.true2047
                                        #   in Loop: Header=BB233_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_307
.LBB233_306:                            # %cond.false2049
                                        #   in Loop: Header=BB233_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_307:                            # %cond.end2051
                                        #   in Loop: Header=BB233_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_309
# %bb.308:                              # %cond.true2065
                                        #   in Loop: Header=BB233_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_310
.LBB233_309:                            # %cond.false2067
                                        #   in Loop: Header=BB233_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_310:                            # %cond.end2069
                                        #   in Loop: Header=BB233_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_312
# %bb.311:                              # %cond.true2075
                                        #   in Loop: Header=BB233_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_313
.LBB233_312:                            # %cond.false2077
                                        #   in Loop: Header=BB233_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_313:                            # %cond.end2079
                                        #   in Loop: Header=BB233_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB233_315
.LBB233_314:                            # %if.else2089
                                        #   in Loop: Header=BB233_262 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB233_315:                            # %if.end2194
                                        #   in Loop: Header=BB233_262 Depth=2
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB233_326
# %bb.316:                              # %if.then2200
                                        #   in Loop: Header=BB233_262 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 4864(%rax)
	jne	.LBB233_320
# %bb.317:                              # %land.lhs.true2203
                                        #   in Loop: Header=BB233_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB233_320
# %bb.318:                              # %land.lhs.true2213
                                        #   in Loop: Header=BB233_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB233_320
# %bb.319:                              # %land.lhs.true2226
                                        #   in Loop: Header=BB233_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB233_325
.LBB233_320:                            # %lor.rhs2239
                                        #   in Loop: Header=BB233_262 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB233_324
# %bb.321:                              # %land.lhs.true2249
                                        #   in Loop: Header=BB233_262 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB233_324
# %bb.322:                              # %land.lhs.true2259
                                        #   in Loop: Header=BB233_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB233_324
# %bb.323:                              # %land.rhs2272
                                        #   in Loop: Header=BB233_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB233_324:                            # %land.end2285
                                        #   in Loop: Header=BB233_262 Depth=2
.LBB233_325:                            # %lor.end2286
                                        #   in Loop: Header=BB233_262 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	1624(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB233_326:                            # %if.end2295
                                        #   in Loop: Header=BB233_262 Depth=2
	jmp	.LBB233_327
.LBB233_327:                            # %for.inc2296
                                        #   in Loop: Header=BB233_262 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB233_262
.LBB233_328:                            # %for.end2298
                                        #   in Loop: Header=BB233_260 Depth=1
	jmp	.LBB233_329
.LBB233_329:                            # %for.inc2299
                                        #   in Loop: Header=BB233_260 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB233_260
.LBB233_330:                            # %for.end2301
	movq	img, %rax
	cmpl	$0, 71996(%rax)
	jne	.LBB233_397
# %bb.331:                              # %if.then2305
	movl	$0, -12(%rbp)
.LBB233_332:                            # %for.cond2306
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB233_334 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB233_349
# %bb.333:                              # %for.body2311
                                        #   in Loop: Header=BB233_332 Depth=1
	movl	$0, -16(%rbp)
.LBB233_334:                            # %for.cond2312
                                        #   Parent Loop BB233_332 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB233_347
# %bb.335:                              # %for.body2317
                                        #   in Loop: Header=BB233_334 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB233_338
# %bb.336:                              # %land.lhs.true2320
                                        #   in Loop: Header=BB233_334 Depth=2
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB233_338
# %bb.337:                              # %land.lhs.true2323
                                        #   in Loop: Header=BB233_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB233_340
.LBB233_338:                            # %lor.lhs.false2331
                                        #   in Loop: Header=BB233_334 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB233_341
# %bb.339:                              # %land.lhs.true2334
                                        #   in Loop: Header=BB233_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB233_341
.LBB233_340:                            # %if.then2342
                                        #   in Loop: Header=BB233_334 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %ecx
	shll	$1, %ecx
	movw	%cx, 2(%rax)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %ecx
	shll	$1, %ecx
	movw	%cx, 2(%rax)
	jmp	.LBB233_345
.LBB233_341:                            # %if.else2363
                                        #   in Loop: Header=BB233_334 Depth=2
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB233_344
# %bb.342:                              # %land.lhs.true2366
                                        #   in Loop: Header=BB233_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB233_344
# %bb.343:                              # %if.then2373
                                        #   in Loop: Header=BB233_334 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movswl	2(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movswl	2(%rcx), %eax
	cltd
	idivl	%esi
	movw	%ax, 2(%rcx)
.LBB233_344:                            # %if.end2394
                                        #   in Loop: Header=BB233_334 Depth=2
	jmp	.LBB233_345
.LBB233_345:                            # %if.end2395
                                        #   in Loop: Header=BB233_334 Depth=2
	jmp	.LBB233_346
.LBB233_346:                            # %for.inc2396
                                        #   in Loop: Header=BB233_334 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB233_334
.LBB233_347:                            # %for.end2398
                                        #   in Loop: Header=BB233_332 Depth=1
	jmp	.LBB233_348
.LBB233_348:                            # %for.inc2399
                                        #   in Loop: Header=BB233_332 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB233_332
.LBB233_349:                            # %for.end2401
	movl	$0, -12(%rbp)
.LBB233_350:                            # %for.cond2402
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB233_352 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	72400(%rcx), %ecx
	shll	$2, %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB233_396
# %bb.351:                              # %for.body2408
                                        #   in Loop: Header=BB233_350 Depth=1
	movl	$0, -16(%rbp)
.LBB233_352:                            # %for.cond2409
                                        #   Parent Loop BB233_350 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB233_394
# %bb.353:                              # %for.body2414
                                        #   in Loop: Header=BB233_352 Depth=2
	cmpl	$0, -12(%rbp)
	jne	.LBB233_361
# %bb.354:                              # %if.then2417
                                        #   in Loop: Header=BB233_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB233_356
# %bb.355:                              # %cond.true2428
                                        #   in Loop: Header=BB233_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB233_360
.LBB233_356:                            # %cond.false2429
                                        #   in Loop: Header=BB233_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB233_358
# %bb.357:                              # %cond.true2440
                                        #   in Loop: Header=BB233_352 Depth=2
	movl	$127, %eax
	jmp	.LBB233_359
.LBB233_358:                            # %cond.false2441
                                        #   in Loop: Header=BB233_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB233_359:                            # %cond.end2450
                                        #   in Loop: Header=BB233_352 Depth=2
.LBB233_360:                            # %cond.end2452
                                        #   in Loop: Header=BB233_352 Depth=2
	movl	%eax, -60(%rbp)
	jmp	.LBB233_377
.LBB233_361:                            # %if.else2454
                                        #   in Loop: Header=BB233_352 Depth=2
	cmpl	$2, -12(%rbp)
	jne	.LBB233_369
# %bb.362:                              # %if.then2457
                                        #   in Loop: Header=BB233_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB233_364
# %bb.363:                              # %cond.true2467
                                        #   in Loop: Header=BB233_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB233_368
.LBB233_364:                            # %cond.false2468
                                        #   in Loop: Header=BB233_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB233_366
# %bb.365:                              # %cond.true2479
                                        #   in Loop: Header=BB233_352 Depth=2
	movl	$127, %eax
	jmp	.LBB233_367
.LBB233_366:                            # %cond.false2480
                                        #   in Loop: Header=BB233_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB233_367:                            # %cond.end2489
                                        #   in Loop: Header=BB233_352 Depth=2
.LBB233_368:                            # %cond.end2491
                                        #   in Loop: Header=BB233_352 Depth=2
	movl	%eax, -60(%rbp)
	jmp	.LBB233_376
.LBB233_369:                            # %if.else2493
                                        #   in Loop: Header=BB233_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB233_371
# %bb.370:                              # %cond.true2503
                                        #   in Loop: Header=BB233_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB233_375
.LBB233_371:                            # %cond.false2504
                                        #   in Loop: Header=BB233_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB233_373
# %bb.372:                              # %cond.true2515
                                        #   in Loop: Header=BB233_352 Depth=2
	movl	$127, %eax
	jmp	.LBB233_374
.LBB233_373:                            # %cond.false2516
                                        #   in Loop: Header=BB233_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB233_374:                            # %cond.end2525
                                        #   in Loop: Header=BB233_352 Depth=2
.LBB233_375:                            # %cond.end2527
                                        #   in Loop: Header=BB233_352 Depth=2
	movl	%eax, -60(%rbp)
.LBB233_376:                            # %if.end2529
                                        #   in Loop: Header=BB233_352 Depth=2
	jmp	.LBB233_377
.LBB233_377:                            # %if.end2530
                                        #   in Loop: Header=BB233_352 Depth=2
	movq	-56(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB233_379
# %bb.378:                              # %cond.true2545
                                        #   in Loop: Header=BB233_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB233_383
.LBB233_379:                            # %cond.false2546
                                        #   in Loop: Header=BB233_352 Depth=2
	movq	-56(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB233_381
# %bb.380:                              # %cond.true2561
                                        #   in Loop: Header=BB233_352 Depth=2
	movl	$127, %eax
	jmp	.LBB233_382
.LBB233_381:                            # %cond.false2562
                                        #   in Loop: Header=BB233_352 Depth=2
	movq	-56(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB233_382:                            # %cond.end2575
                                        #   in Loop: Header=BB233_352 Depth=2
.LBB233_383:                            # %cond.end2577
                                        #   in Loop: Header=BB233_352 Depth=2
	movl	%eax, -68(%rbp)
	cmpl	$0, -68(%rbp)
	je	.LBB233_391
# %bb.384:                              # %if.then2581
                                        #   in Loop: Header=BB233_352 Depth=2
	movl	-68(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-68(%rbp)
	movl	%eax, -64(%rbp)
	movl	-60(%rbp), %eax
	imull	-64(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB233_386
# %bb.385:                              # %cond.true2591
                                        #   in Loop: Header=BB233_352 Depth=2
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB233_390
.LBB233_386:                            # %cond.false2592
                                        #   in Loop: Header=BB233_352 Depth=2
	movl	-60(%rbp), %eax
	imull	-64(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB233_388
# %bb.387:                              # %cond.true2598
                                        #   in Loop: Header=BB233_352 Depth=2
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB233_389
.LBB233_388:                            # %cond.false2599
                                        #   in Loop: Header=BB233_352 Depth=2
	movl	-60(%rbp), %eax
	imull	-64(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB233_389:                            # %cond.end2603
                                        #   in Loop: Header=BB233_352 Depth=2
.LBB233_390:                            # %cond.end2605
                                        #   in Loop: Header=BB233_352 Depth=2
	movq	img, %rcx
	addq	$72016, %rcx            # imm = 0x11950
	movslq	-12(%rbp), %rdx
	imulq	$60, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB233_392
.LBB233_391:                            # %if.else2611
                                        #   in Loop: Header=BB233_352 Depth=2
	movq	img, %rax
	addq	$72016, %rax            # imm = 0x11950
	movslq	-12(%rbp), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$9999, (%rax,%rcx,4)    # imm = 0x270F
.LBB233_392:                            # %if.end2617
                                        #   in Loop: Header=BB233_352 Depth=2
	jmp	.LBB233_393
.LBB233_393:                            # %for.inc2618
                                        #   in Loop: Header=BB233_352 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB233_352
.LBB233_394:                            # %for.end2620
                                        #   in Loop: Header=BB233_350 Depth=1
	jmp	.LBB233_395
.LBB233_395:                            # %for.inc2621
                                        #   in Loop: Header=BB233_350 Depth=1
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB233_350
.LBB233_396:                            # %for.end2623
	jmp	.LBB233_397
.LBB233_397:                            # %if.end2624
	cmpl	$119295366, -72(%rbp)   # imm = 0x71C4D86
	jne	.LBB233_399
.LBB233_398:
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB233_399:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB233_398
.Lfunc_end233:
	.size	compute_colocated.170, .Lfunc_end233-compute_colocated.170
	.cfi_endproc
                                        # -- End function
	.globl	alloc_colocated.171     # -- Begin function alloc_colocated.171
	.p2align	4, 0x90
	.type	alloc_colocated.171,@function
alloc_colocated.171:                    # @alloc_colocated.171
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$566967118, -32(%rbp)   # imm = 0x21CB3B4E
	movl	%edi, -16(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -28(%rbp)
	movl	$1, %edi
	movl	$4880, %esi             # imm = 0x1310
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -24(%rbp)
	cmpq	-24(%rbp), %rcx
	jne	.LBB234_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.21, %rdi
	callq	no_mem_exit
.LBB234_2:                              # %if.end
	movl	-16(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-24(%rbp), %rdi
	addq	$1600, %rdi             # imm = 0x640
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$1608, %rdi             # imm = 0x648
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$1616, %rdi             # imm = 0x650
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$1624, %rdi             # imm = 0x658
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-24(%rbp), %rdi
	addq	$4872, %rdi             # imm = 0x1308
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	cmpl	$0, -28(%rbp)
	je	.LBB234_4
# %bb.3:                                # %if.then17
	movq	-24(%rbp), %rdi
	addq	$3216, %rdi             # imm = 0xC90
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$3224, %rdi             # imm = 0xC98
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$3232, %rdi             # imm = 0xCA0
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$3240, %rdi             # imm = 0xCA8
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-24(%rbp), %rdi
	addq	$4832, %rdi             # imm = 0x12E0
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$4840, %rdi             # imm = 0x12E8
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$4848, %rdi             # imm = 0x12F0
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$4856, %rdi             # imm = 0x12F8
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
.LBB234_4:                              # %if.end50
	movl	-28(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rbx
	cmpl	$566967118, -32(%rbp)   # imm = 0x21CB3B4E
	jne	.LBB234_6
.LBB234_5:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB234_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB234_5
.Lfunc_end234:
	.size	alloc_colocated.171, .Lfunc_end234-alloc_colocated.171
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_unmark_short_term_for_reference.172
	.type	mm_unmark_short_term_for_reference.172,@function
mm_unmark_short_term_for_reference.172: # @mm_unmark_short_term_for_reference.172
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1276234592, -12(%rbp)  # imm = 0x4C11CB60
	movq	%rdi, -24(%rbp)
	movl	%esi, -16(%rbp)
	movq	-24(%rbp), %rdi
	movl	-16(%rbp), %esi
	callq	get_pic_num_x
	movl	%eax, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB235_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB235_26
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB235_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB235_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB235_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB235_8
# %bb.4:                                # %land.lhs.true
                                        #   in Loop: Header=BB235_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB235_8
# %bb.5:                                # %if.then6
                                        #   in Loop: Header=BB235_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB235_7
# %bb.6:                                # %if.then10
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_reference
	jmp	.LBB235_27
.LBB235_7:                              # %if.end
                                        #   in Loop: Header=BB235_1 Depth=1
	jmp	.LBB235_8
.LBB235_8:                              # %if.end13
                                        #   in Loop: Header=BB235_1 Depth=1
	jmp	.LBB235_24
.LBB235_9:                              # %if.else
                                        #   in Loop: Header=BB235_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB235_16
# %bb.10:                               # %land.lhs.true17
                                        #   in Loop: Header=BB235_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB235_16
# %bb.11:                               # %if.then23
                                        #   in Loop: Header=BB235_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB235_15
# %bb.12:                               # %if.then28
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$2, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB235_14
# %bb.13:                               # %if.then39
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
.LBB235_14:                             # %if.end44
	jmp	.LBB235_27
.LBB235_15:                             # %if.end45
                                        #   in Loop: Header=BB235_1 Depth=1
	jmp	.LBB235_16
.LBB235_16:                             # %if.end46
                                        #   in Loop: Header=BB235_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB235_23
# %bb.17:                               # %land.lhs.true52
                                        #   in Loop: Header=BB235_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	jne	.LBB235_23
# %bb.18:                               # %if.then58
                                        #   in Loop: Header=BB235_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB235_22
# %bb.19:                               # %if.then63
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB235_21
# %bb.20:                               # %if.then76
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
.LBB235_21:                             # %if.end81
	jmp	.LBB235_27
.LBB235_22:                             # %if.end82
                                        #   in Loop: Header=BB235_1 Depth=1
	jmp	.LBB235_23
.LBB235_23:                             # %if.end83
                                        #   in Loop: Header=BB235_1 Depth=1
	jmp	.LBB235_24
.LBB235_24:                             # %if.end84
                                        #   in Loop: Header=BB235_1 Depth=1
	jmp	.LBB235_25
.LBB235_25:                             # %for.inc
                                        #   in Loop: Header=BB235_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB235_1
.LBB235_26:                             # %for.end.loopexit
	jmp	.LBB235_27
.LBB235_27:                             # %for.end
	cmpl	$1276234592, -12(%rbp)  # imm = 0x4C11CB60
	jne	.LBB235_29
.LBB235_28:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB235_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB235_28
.Lfunc_end235:
	.size	mm_unmark_short_term_for_reference.172, .Lfunc_end235-mm_unmark_short_term_for_reference.172
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_lt_pic_num_asc.173
	.type	compare_pic_by_lt_pic_num_asc.173,@function
compare_pic_by_lt_pic_num_asc.173:      # @compare_pic_by_lt_pic_num_asc.173
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$919651578, -16(%rbp)   # imm = 0x36D0C4FA
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	6368(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6368(%rcx), %eax
	jge	.LBB236_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB236_5
.LBB236_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	6368(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6368(%rcx), %eax
	jle	.LBB236_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB236_5
.LBB236_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB236_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$919651578, -16(%rbp)   # imm = 0x36D0C4FA
	jne	.LBB236_7
.LBB236_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB236_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB236_6
.Lfunc_end236:
	.size	compare_pic_by_lt_pic_num_asc.173, .Lfunc_end236-compare_pic_by_lt_pic_num_asc.173
	.cfi_endproc
                                        # -- End function
	.globl	alloc_storable_picture.174 # -- Begin function alloc_storable_picture.174
	.p2align	4, 0x90
	.type	alloc_storable_picture.174,@function
alloc_storable_picture.174:             # @alloc_storable_picture.174
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1115249940, -36(%rbp)  # imm = 0x42795D14
	movl	%edi, -40(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -32(%rbp)
	movl	$1, %edi
	movl	$6584, %esi             # imm = 0x19B8
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -16(%rbp)
	cmpq	-16(%rbp), %rcx
	jne	.LBB237_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.7, %rdi
	callq	no_mem_exit
.LBB237_2:                              # %if.end
	movq	-16(%rbp), %rdi
	addq	$6424, %rdi             # imm = 0x1918
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	callq	get_mem2Dpel
	movq	-16(%rbp), %rax
	movq	$0, 6432(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6448(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6464(%rax)
	movq	input, %rax
	cmpl	$0, 1284(%rax)
	jne	.LBB237_5
# %bb.3:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 1288(%rax)
	jne	.LBB237_5
# %bb.4:                                # %lor.lhs.false3
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB237_6
.LBB237_5:                              # %if.then5
	movq	-16(%rbp), %rax
	movq	$0, 6440(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6456(%rax)
.LBB237_6:                              # %if.end6
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB237_8
# %bb.7:                                # %if.then8
	movq	-16(%rbp), %rdi
	addq	$6464, %rdi             # imm = 0x1940
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	$2, %esi
	callq	get_mem3Dpel
.LBB237_8:                              # %if.end11
	movq	img, %rax
	movl	72484(%rax), %edi
	movl	$4, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	-16(%rbp), %rdx
	movq	%rax, 6472(%rdx)
	movq	-16(%rbp), %rax
	cmpq	6472(%rax), %rcx
	jne	.LBB237_10
# %bb.9:                                # %if.then16
	movabsq	$.L.str.8, %rdi
	callq	no_mem_exit
.LBB237_10:                             # %if.end17
	movq	-16(%rbp), %rdi
	addq	$6480, %rdi             # imm = 0x1950
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-16(%rbp), %rdi
	addq	$6488, %rdi             # imm = 0x1958
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	movl	$6, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-16(%rbp), %rdi
	addq	$6496, %rdi             # imm = 0x1960
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	movl	$6, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-16(%rbp), %rdi
	addq	$6504, %rdi             # imm = 0x1968
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-16(%rbp), %rdi
	addq	$6512, %rdi             # imm = 0x1970
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-24(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-16(%rbp), %rdi
	addq	$6520, %rdi             # imm = 0x1978
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-24(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-16(%rbp), %rax
	movl	$0, 6364(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6360(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6372(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6368(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6380(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6376(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6388(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6384(%rax)
	movl	-40(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6392(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6396(%rcx)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6400(%rcx)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6404(%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 6528(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6536(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6544(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6412(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6416(%rax)
	movq	-16(%rbp), %rbx
	cmpl	$1115249940, -36(%rbp)  # imm = 0x42795D14
	jne	.LBB237_12
.LBB237_11:
	movq	%rbx, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB237_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB237_11
.Lfunc_end237:
	.size	alloc_storable_picture.174, .Lfunc_end237-alloc_storable_picture.174
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_poc_asc.175
	.type	compare_fs_by_poc_asc.175,@function
compare_fs_by_poc_asc.175:              # @compare_fs_by_poc_asc.175
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$333077611, -16(%rbp)   # imm = 0x13DA5C6B
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB238_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB238_5
.LBB238_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jle	.LBB238_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB238_5
.LBB238_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB238_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$333077611, -16(%rbp)   # imm = 0x13DA5C6B
	jne	.LBB238_7
.LBB238_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB238_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB238_6
.Lfunc_end238:
	.size	compare_fs_by_poc_asc.175, .Lfunc_end238-compare_fs_by_poc_asc.175
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function unmark_long_term_field_for_reference_by_frame_idx.176
	.type	unmark_long_term_field_for_reference_by_frame_idx.176,@function
unmark_long_term_field_for_reference_by_frame_idx.176: # @unmark_long_term_field_for_reference_by_frame_idx.176
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$188399657, -28(%rbp)   # imm = 0xB3AC029
	movl	%edi, -12(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -8(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -8(%rbp)
	jge	.LBB239_2
# %bb.1:                                # %if.then
	movl	-32(%rbp), %eax
	shll	$1, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB239_2:                              # %if.end
	movl	$0, -4(%rbp)
.LBB239_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB239_46
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB239_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-24(%rbp), %eax
	jne	.LBB239_44
# %bb.5:                                # %if.then5
                                        #   in Loop: Header=BB239_3 Depth=1
	cmpl	$1, -12(%rbp)
	jne	.LBB239_24
# %bb.6:                                # %if.then7
                                        #   in Loop: Header=BB239_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB239_8
# %bb.7:                                # %if.then11
                                        #   in Loop: Header=BB239_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB239_23
.LBB239_8:                              # %if.else
                                        #   in Loop: Header=BB239_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, 8(%rax)
	jne	.LBB239_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB239_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB239_22
.LBB239_10:                             # %if.else21
                                        #   in Loop: Header=BB239_3 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB239_18
# %bb.11:                               # %if.then22
                                        #   in Loop: Header=BB239_3 Depth=1
	cmpq	$0, dpb+56
	je	.LBB239_16
# %bb.12:                               # %if.then24
                                        #   in Loop: Header=BB239_3 Depth=1
	movq	dpb+56, %rax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	cmpq	(%rcx,%rdx,8), %rax
	jne	.LBB239_14
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB239_3 Depth=1
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB239_15
.LBB239_14:                             # %if.then29
                                        #   in Loop: Header=BB239_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB239_15:                             # %if.end32
                                        #   in Loop: Header=BB239_3 Depth=1
	jmp	.LBB239_17
.LBB239_16:                             # %if.else33
                                        #   in Loop: Header=BB239_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB239_17:                             # %if.end36
                                        #   in Loop: Header=BB239_3 Depth=1
	jmp	.LBB239_21
.LBB239_18:                             # %if.else37
                                        #   in Loop: Header=BB239_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %ecx
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	je	.LBB239_20
# %bb.19:                               # %if.then42
                                        #   in Loop: Header=BB239_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB239_20:                             # %if.end45
                                        #   in Loop: Header=BB239_3 Depth=1
	jmp	.LBB239_21
.LBB239_21:                             # %if.end46
                                        #   in Loop: Header=BB239_3 Depth=1
	jmp	.LBB239_22
.LBB239_22:                             # %if.end47
                                        #   in Loop: Header=BB239_3 Depth=1
	jmp	.LBB239_23
.LBB239_23:                             # %if.end48
                                        #   in Loop: Header=BB239_3 Depth=1
	jmp	.LBB239_24
.LBB239_24:                             # %if.end49
                                        #   in Loop: Header=BB239_3 Depth=1
	cmpl	$2, -12(%rbp)
	jne	.LBB239_43
# %bb.25:                               # %if.then51
                                        #   in Loop: Header=BB239_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB239_27
# %bb.26:                               # %if.then56
                                        #   in Loop: Header=BB239_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB239_42
.LBB239_27:                             # %if.else59
                                        #   in Loop: Header=BB239_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$2, 8(%rax)
	jne	.LBB239_29
# %bb.28:                               # %if.then64
                                        #   in Loop: Header=BB239_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB239_41
.LBB239_29:                             # %if.else67
                                        #   in Loop: Header=BB239_3 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB239_37
# %bb.30:                               # %if.then69
                                        #   in Loop: Header=BB239_3 Depth=1
	cmpq	$0, dpb+56
	je	.LBB239_35
# %bb.31:                               # %if.then71
                                        #   in Loop: Header=BB239_3 Depth=1
	movq	dpb+56, %rax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	cmpq	(%rcx,%rdx,8), %rax
	jne	.LBB239_33
# %bb.32:                               # %lor.lhs.false75
                                        #   in Loop: Header=BB239_3 Depth=1
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB239_34
.LBB239_33:                             # %if.then78
                                        #   in Loop: Header=BB239_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB239_34:                             # %if.end81
                                        #   in Loop: Header=BB239_3 Depth=1
	jmp	.LBB239_36
.LBB239_35:                             # %if.else82
                                        #   in Loop: Header=BB239_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB239_36:                             # %if.end85
                                        #   in Loop: Header=BB239_3 Depth=1
	jmp	.LBB239_40
.LBB239_37:                             # %if.else86
                                        #   in Loop: Header=BB239_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %ecx
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	je	.LBB239_39
# %bb.38:                               # %if.then92
                                        #   in Loop: Header=BB239_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB239_39:                             # %if.end95
                                        #   in Loop: Header=BB239_3 Depth=1
	jmp	.LBB239_40
.LBB239_40:                             # %if.end96
                                        #   in Loop: Header=BB239_3 Depth=1
	jmp	.LBB239_41
.LBB239_41:                             # %if.end97
                                        #   in Loop: Header=BB239_3 Depth=1
	jmp	.LBB239_42
.LBB239_42:                             # %if.end98
                                        #   in Loop: Header=BB239_3 Depth=1
	jmp	.LBB239_43
.LBB239_43:                             # %if.end99
                                        #   in Loop: Header=BB239_3 Depth=1
	jmp	.LBB239_44
.LBB239_44:                             # %if.end100
                                        #   in Loop: Header=BB239_3 Depth=1
	jmp	.LBB239_45
.LBB239_45:                             # %for.inc
                                        #   in Loop: Header=BB239_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB239_3
.LBB239_46:                             # %for.end
	cmpl	$188399657, -28(%rbp)   # imm = 0xB3AC029
	jne	.LBB239_48
.LBB239_47:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB239_48:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB239_47
.Lfunc_end239:
	.size	unmark_long_term_field_for_reference_by_frame_idx.176, .Lfunc_end239-unmark_long_term_field_for_reference_by_frame_idx.176
	.cfi_endproc
                                        # -- End function
	.globl	reorder_ref_pic_list.177 # -- Begin function reorder_ref_pic_list.177
	.p2align	4, 0x90
	.type	reorder_ref_pic_list.177,@function
reorder_ref_pic_list.177:               # @reorder_ref_pic_list.177
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$1715466855, -60(%rbp)  # imm = 0x663FF267
	movq	%rdi, -72(%rbp)
	movq	%rsi, -80(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -32(%rbp)
	movq	%r9, -88(%rbp)
	movl	$0, -40(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB240_2
# %bb.1:                                # %if.then
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	72464(%rax), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB240_3
.LBB240_2:                              # %if.else
	movl	-36(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	72464(%rax), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
.LBB240_3:                              # %if.end
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB240_4:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$3, (%rax,%rcx,4)
	je	.LBB240_24
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB240_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$3, (%rax,%rcx,4)
	jle	.LBB240_7
# %bb.6:                                # %if.then8
                                        #   in Loop: Header=BB240_4 Depth=1
	movabsq	$.L.str.12, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB240_7:                              # %if.end9
                                        #   in Loop: Header=BB240_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$2, (%rax,%rcx,4)
	jge	.LBB240_21
# %bb.8:                                # %if.then13
                                        #   in Loop: Header=BB240_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	jne	.LBB240_13
# %bb.9:                                # %if.then17
                                        #   in Loop: Header=BB240_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB240_11
# %bb.10:                               # %if.then22
                                        #   in Loop: Header=BB240_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	addl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB240_12
.LBB240_11:                             # %if.else28
                                        #   in Loop: Header=BB240_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -12(%rbp)
.LBB240_12:                             # %if.end33
                                        #   in Loop: Header=BB240_4 Depth=1
	jmp	.LBB240_17
.LBB240_13:                             # %if.else34
                                        #   in Loop: Header=BB240_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	cmpl	-16(%rbp), %eax
	jl	.LBB240_15
# %bb.14:                               # %if.then40
                                        #   in Loop: Header=BB240_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB240_16
.LBB240_15:                             # %if.else46
                                        #   in Loop: Header=BB240_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
.LBB240_16:                             # %if.end51
                                        #   in Loop: Header=BB240_4 Depth=1
	jmp	.LBB240_17
.LBB240_17:                             # %if.end52
                                        #   in Loop: Header=BB240_4 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jle	.LBB240_19
# %bb.18:                               # %if.then54
                                        #   in Loop: Header=BB240_4 Depth=1
	movl	-12(%rbp), %eax
	subl	-16(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB240_20
.LBB240_19:                             # %if.else56
                                        #   in Loop: Header=BB240_4 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB240_20:                             # %if.end57
                                        #   in Loop: Header=BB240_4 Depth=1
	movq	-72(%rbp), %rdi
	movl	-20(%rbp), %esi
	movl	-44(%rbp), %edx
	leaq	-40(%rbp), %rcx
	callq	reorder_short_term
	jmp	.LBB240_22
.LBB240_21:                             # %if.else58
                                        #   in Loop: Header=BB240_4 Depth=1
	movq	-72(%rbp), %rdi
	movl	-20(%rbp), %esi
	movq	-88(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %edx
	leaq	-40(%rbp), %rcx
	callq	reorder_long_term
.LBB240_22:                             # %if.end61
                                        #   in Loop: Header=BB240_4 Depth=1
	jmp	.LBB240_23
.LBB240_23:                             # %for.inc
                                        #   in Loop: Header=BB240_4 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB240_4
.LBB240_24:                             # %for.end
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movq	-80(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$1715466855, -60(%rbp)  # imm = 0x663FF267
	jne	.LBB240_26
.LBB240_25:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB240_26:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB240_25
.Lfunc_end240:
	.size	reorder_ref_pic_list.177, .Lfunc_end240-reorder_ref_pic_list.177
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_poc_desc.178
	.type	compare_fs_by_poc_desc.178,@function
compare_fs_by_poc_desc.178:             # @compare_fs_by_poc_desc.178
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$835484607, -16(%rbp)   # imm = 0x31CC7BBF
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB241_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB241_5
.LBB241_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jle	.LBB241_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB241_5
.LBB241_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB241_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$835484607, -16(%rbp)   # imm = 0x31CC7BBF
	jne	.LBB241_7
.LBB241_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB241_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB241_6
.Lfunc_end241:
	.size	compare_fs_by_poc_desc.178, .Lfunc_end241-compare_fs_by_poc_desc.178
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_short_term_pic.179
	.type	get_short_term_pic.179,@function
get_short_term_pic.179:                 # @get_short_term_pic.179
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1351344317, -28(%rbp)  # imm = 0x508BE0BD
	movl	%edi, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB242_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB242_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB242_1 Depth=1
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB242_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB242_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB242_8
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB242_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB242_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB242_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB242_7
# %bb.6:                                # %if.then10
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB242_23
.LBB242_7:                              # %if.end
                                        #   in Loop: Header=BB242_1 Depth=1
	jmp	.LBB242_8
.LBB242_8:                              # %if.end14
                                        #   in Loop: Header=BB242_1 Depth=1
	jmp	.LBB242_20
.LBB242_9:                              # %if.else
                                        #   in Loop: Header=BB242_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB242_14
# %bb.10:                               # %if.then19
                                        #   in Loop: Header=BB242_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB242_13
# %bb.11:                               # %land.lhs.true24
                                        #   in Loop: Header=BB242_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB242_13
# %bb.12:                               # %if.then30
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB242_23
.LBB242_13:                             # %if.end34
                                        #   in Loop: Header=BB242_1 Depth=1
	jmp	.LBB242_14
.LBB242_14:                             # %if.end35
                                        #   in Loop: Header=BB242_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB242_19
# %bb.15:                               # %if.then41
                                        #   in Loop: Header=BB242_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB242_18
# %bb.16:                               # %land.lhs.true46
                                        #   in Loop: Header=BB242_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB242_18
# %bb.17:                               # %if.then52
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB242_23
.LBB242_18:                             # %if.end56
                                        #   in Loop: Header=BB242_1 Depth=1
	jmp	.LBB242_19
.LBB242_19:                             # %if.end57
                                        #   in Loop: Header=BB242_1 Depth=1
	jmp	.LBB242_20
.LBB242_20:                             # %if.end58
                                        #   in Loop: Header=BB242_1 Depth=1
	jmp	.LBB242_21
.LBB242_21:                             # %for.inc
                                        #   in Loop: Header=BB242_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB242_1
.LBB242_22:                             # %for.end
	movq	$0, -24(%rbp)
.LBB242_23:                             # %return
	movq	-24(%rbp), %rbx
	cmpl	$1351344317, -28(%rbp)  # imm = 0x508BE0BD
	jne	.LBB242_25
.LBB242_24:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB242_25:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB242_24
.Lfunc_end242:
	.size	get_short_term_pic.179, .Lfunc_end242-get_short_term_pic.179
	.cfi_endproc
                                        # -- End function
	.globl	replace_top_pic_with_frame.180 # -- Begin function replace_top_pic_with_frame.180
	.p2align	4, 0x90
	.type	replace_top_pic_with_frame.180,@function
replace_top_pic_with_frame.180:         # @replace_top_pic_with_frame.180
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1793358525, -32(%rbp)  # imm = 0x6AE47ABD
	movq	%rdi, -24(%rbp)
	movq	$0, -16(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 6380(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB243_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rdi
	callq	UnifiedOneForthPix
.LBB243_2:                              # %if.end
	movl	$0, -28(%rbp)
	movl	$0, -4(%rbp)
.LBB243_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB243_9
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB243_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jne	.LBB243_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB243_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, (%rax)
	jne	.LBB243_7
# %bb.6:                                # %if.then11
	movl	$1, -28(%rbp)
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB243_10
.LBB243_7:                              # %if.end14
                                        #   in Loop: Header=BB243_3 Depth=1
	jmp	.LBB243_8
.LBB243_8:                              # %for.inc
                                        #   in Loop: Header=BB243_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB243_3
.LBB243_9:                              # %for.end.loopexit
	jmp	.LBB243_10
.LBB243_10:                             # %for.end
	cmpl	$0, -28(%rbp)
	jne	.LBB243_12
# %bb.11:                               # %if.then16
	movabsq	$.L.str.14, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB243_12:                             # %if.end17
	movq	-16(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-16(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movq	-16(%rbp), %rax
	movl	$3, (%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB243_16
# %bb.13:                               # %if.then22
	movq	-16(%rbp), %rax
	movl	$3, 4(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB243_15
# %bb.14:                               # %if.then24
	movq	-16(%rbp), %rax
	movl	$3, 8(%rax)
.LBB243_15:                             # %if.end26
	jmp	.LBB243_16
.LBB243_16:                             # %if.end27
	movq	-16(%rbp), %rdi
	callq	dpb_split_field
	callq	update_ref_list
	callq	update_ltref_list
	cmpl	$1793358525, -32(%rbp)  # imm = 0x6AE47ABD
	jne	.LBB243_18
.LBB243_17:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB243_18:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB243_17
.Lfunc_end243:
	.size	replace_top_pic_with_frame.180, .Lfunc_end243-replace_top_pic_with_frame.180
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function gen_pic_list_from_frame_list.181
	.type	gen_pic_list_from_frame_list.181,@function
gen_pic_list_from_frame_list.181:       # @gen_pic_list_from_frame_list.181
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1415944889, -64(%rbp)  # imm = 0x54659AB9
	movl	%edi, -44(%rbp)
	movq	%rsi, -24(%rbp)
	movl	%edx, -12(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -32(%rbp)
	movl	%r9d, -60(%rbp)
	movl	$0, -4(%rbp)
	movl	$0, -8(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB244_2
# %bb.1:                                # %if.then
	movabsq	$is_long_ref, %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB244_3
.LBB244_2:                              # %if.else
	movabsq	$is_short_ref, %rax
	movq	%rax, -40(%rbp)
.LBB244_3:                              # %if.end
	cmpl	$1, -44(%rbp)
	jne	.LBB244_28
# %bb.4:                                # %if.then1
	jmp	.LBB244_5
.LBB244_5:                              # %while.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB244_9 Depth 2
                                        #     Child Loop BB244_18 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	movb	$1, %al
	jl	.LBB244_7
# %bb.6:                                # %lor.rhs
                                        #   in Loop: Header=BB244_5 Depth=1
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	setl	%al
.LBB244_7:                              # %lor.end
                                        #   in Loop: Header=BB244_5 Depth=1
	testb	$1, %al
	jne	.LBB244_8
	jmp	.LBB244_27
.LBB244_8:                              # %while.body
                                        #   in Loop: Header=BB244_5 Depth=1
	jmp	.LBB244_9
.LBB244_9:                              # %for.cond
                                        #   Parent Loop BB244_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB244_16
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB244_9 Depth=2
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB244_14
# %bb.11:                               # %if.then6
                                        #   in Loop: Header=BB244_9 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB244_13
# %bb.12:                               # %if.then10
                                        #   in Loop: Header=BB244_5 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB244_17
.LBB244_13:                             # %if.end17
                                        #   in Loop: Header=BB244_9 Depth=2
	jmp	.LBB244_14
.LBB244_14:                             # %if.end18
                                        #   in Loop: Header=BB244_9 Depth=2
	jmp	.LBB244_15
.LBB244_15:                             # %for.inc
                                        #   in Loop: Header=BB244_9 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB244_9
.LBB244_16:                             # %for.end.loopexit
                                        #   in Loop: Header=BB244_5 Depth=1
	jmp	.LBB244_17
.LBB244_17:                             # %for.end
                                        #   in Loop: Header=BB244_5 Depth=1
	jmp	.LBB244_18
.LBB244_18:                             # %for.cond20
                                        #   Parent Loop BB244_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB244_25
# %bb.19:                               # %for.body22
                                        #   in Loop: Header=BB244_18 Depth=2
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB244_23
# %bb.20:                               # %if.then28
                                        #   in Loop: Header=BB244_18 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB244_22
# %bb.21:                               # %if.then33
                                        #   in Loop: Header=BB244_5 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB244_26
.LBB244_22:                             # %if.end41
                                        #   in Loop: Header=BB244_18 Depth=2
	jmp	.LBB244_23
.LBB244_23:                             # %if.end42
                                        #   in Loop: Header=BB244_18 Depth=2
	jmp	.LBB244_24
.LBB244_24:                             # %for.inc43
                                        #   in Loop: Header=BB244_18 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB244_18
.LBB244_25:                             # %for.end45.loopexit
                                        #   in Loop: Header=BB244_5 Depth=1
	jmp	.LBB244_26
.LBB244_26:                             # %for.end45
                                        #   in Loop: Header=BB244_5 Depth=1
	jmp	.LBB244_5
.LBB244_27:                             # %while.end
	jmp	.LBB244_28
.LBB244_28:                             # %if.end46
	cmpl	$2, -44(%rbp)
	jne	.LBB244_53
# %bb.29:                               # %if.then48
	jmp	.LBB244_30
.LBB244_30:                             # %while.cond49
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB244_34 Depth 2
                                        #     Child Loop BB244_43 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	movb	$1, %al
	jl	.LBB244_32
# %bb.31:                               # %lor.rhs51
                                        #   in Loop: Header=BB244_30 Depth=1
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	setl	%al
.LBB244_32:                             # %lor.end53
                                        #   in Loop: Header=BB244_30 Depth=1
	testb	$1, %al
	jne	.LBB244_33
	jmp	.LBB244_52
.LBB244_33:                             # %while.body54
                                        #   in Loop: Header=BB244_30 Depth=1
	jmp	.LBB244_34
.LBB244_34:                             # %for.cond55
                                        #   Parent Loop BB244_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB244_41
# %bb.35:                               # %for.body57
                                        #   in Loop: Header=BB244_34 Depth=2
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB244_39
# %bb.36:                               # %if.then63
                                        #   in Loop: Header=BB244_34 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB244_38
# %bb.37:                               # %if.then69
                                        #   in Loop: Header=BB244_30 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB244_42
.LBB244_38:                             # %if.end77
                                        #   in Loop: Header=BB244_34 Depth=2
	jmp	.LBB244_39
.LBB244_39:                             # %if.end78
                                        #   in Loop: Header=BB244_34 Depth=2
	jmp	.LBB244_40
.LBB244_40:                             # %for.inc79
                                        #   in Loop: Header=BB244_34 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB244_34
.LBB244_41:                             # %for.end81.loopexit
                                        #   in Loop: Header=BB244_30 Depth=1
	jmp	.LBB244_42
.LBB244_42:                             # %for.end81
                                        #   in Loop: Header=BB244_30 Depth=1
	jmp	.LBB244_43
.LBB244_43:                             # %for.cond82
                                        #   Parent Loop BB244_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB244_50
# %bb.44:                               # %for.body84
                                        #   in Loop: Header=BB244_43 Depth=2
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB244_48
# %bb.45:                               # %if.then90
                                        #   in Loop: Header=BB244_43 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB244_47
# %bb.46:                               # %if.then96
                                        #   in Loop: Header=BB244_30 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB244_51
.LBB244_47:                             # %if.end104
                                        #   in Loop: Header=BB244_43 Depth=2
	jmp	.LBB244_48
.LBB244_48:                             # %if.end105
                                        #   in Loop: Header=BB244_43 Depth=2
	jmp	.LBB244_49
.LBB244_49:                             # %for.inc106
                                        #   in Loop: Header=BB244_43 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB244_43
.LBB244_50:                             # %for.end108.loopexit
                                        #   in Loop: Header=BB244_30 Depth=1
	jmp	.LBB244_51
.LBB244_51:                             # %for.end108
                                        #   in Loop: Header=BB244_30 Depth=1
	jmp	.LBB244_30
.LBB244_52:                             # %while.end109
	jmp	.LBB244_53
.LBB244_53:                             # %if.end110
	cmpl	$1415944889, -64(%rbp)  # imm = 0x54659AB9
	jne	.LBB244_55
.LBB244_54:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB244_55:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB244_54
.Lfunc_end244:
	.size	gen_pic_list_from_frame_list.181, .Lfunc_end244-gen_pic_list_from_frame_list.181
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mark_pic_long_term.182
	.type	mark_pic_long_term.182,@function
mark_pic_long_term.182:                 # @mark_pic_long_term.182
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$736907296, -20(%rbp)   # imm = 0x2BEC5020
	movq	%rdi, -32(%rbp)
	movl	%esi, -8(%rbp)
	movl	%edx, -12(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB245_11
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB245_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB245_10
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB245_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB245_8
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB245_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB245_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB245_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB245_7
# %bb.6:                                # %if.then10
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	$3, 8(%rax)
	jmp	.LBB245_39
.LBB245_7:                              # %if.end
                                        #   in Loop: Header=BB245_2 Depth=1
	jmp	.LBB245_8
.LBB245_8:                              # %if.end50
                                        #   in Loop: Header=BB245_2 Depth=1
	jmp	.LBB245_9
.LBB245_9:                              # %for.inc
                                        #   in Loop: Header=BB245_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB245_2
.LBB245_10:                             # %for.end
	movabsq	$.L.str.25, %rdi
	movb	$0, %al
	callq	printf
	jmp	.LBB245_39
.LBB245_11:                             # %if.else
	movq	-32(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB245_13
# %bb.12:                               # %if.then53
	movl	$1, -16(%rbp)
	movl	$0, -24(%rbp)
	jmp	.LBB245_14
.LBB245_13:                             # %if.else54
	movl	$0, -16(%rbp)
	movl	$1, -24(%rbp)
.LBB245_14:                             # %if.end55
	movl	$0, -4(%rbp)
.LBB245_15:                             # %for.cond56
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB245_38
# %bb.16:                               # %for.body58
                                        #   in Loop: Header=BB245_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB245_26
# %bb.17:                               # %if.then63
                                        #   in Loop: Header=BB245_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB245_25
# %bb.18:                               # %land.lhs.true69
                                        #   in Loop: Header=BB245_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB245_25
# %bb.19:                               # %if.then75
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	je	.LBB245_22
# %bb.20:                               # %land.lhs.true80
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-8(%rbp), %eax
	je	.LBB245_22
# %bb.21:                               # %if.then85
	movabsq	$.L.str.26, %rdi
	movb	$0, %al
	callq	printf
.LBB245_22:                             # %if.end87
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	shll	$1, %eax
	addl	-16(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	orl	$1, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB245_24
# %bb.23:                               # %if.then110
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB245_24:                             # %if.end123
	jmp	.LBB245_39
.LBB245_25:                             # %if.end124
                                        #   in Loop: Header=BB245_15 Depth=1
	jmp	.LBB245_26
.LBB245_26:                             # %if.end125
                                        #   in Loop: Header=BB245_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB245_36
# %bb.27:                               # %if.then131
                                        #   in Loop: Header=BB245_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB245_35
# %bb.28:                               # %land.lhs.true137
                                        #   in Loop: Header=BB245_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB245_35
# %bb.29:                               # %if.then143
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	je	.LBB245_32
# %bb.30:                               # %land.lhs.true148
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-8(%rbp), %eax
	je	.LBB245_32
# %bb.31:                               # %if.then153
	movabsq	$.L.str.26, %rdi
	movb	$0, %al
	callq	printf
.LBB245_32:                             # %if.end155
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	shll	$1, %eax
	addl	-16(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	orl	$2, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB245_34
# %bb.33:                               # %if.then181
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB245_34:                             # %if.end194
	jmp	.LBB245_39
.LBB245_35:                             # %if.end195
                                        #   in Loop: Header=BB245_15 Depth=1
	jmp	.LBB245_36
.LBB245_36:                             # %if.end196
                                        #   in Loop: Header=BB245_15 Depth=1
	jmp	.LBB245_37
.LBB245_37:                             # %for.inc197
                                        #   in Loop: Header=BB245_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB245_15
.LBB245_38:                             # %for.end199
	movabsq	$.L.str.27, %rdi
	movb	$0, %al
	callq	printf
.LBB245_39:                             # %if.end201
	cmpl	$736907296, -20(%rbp)   # imm = 0x2BEC5020
	jne	.LBB245_41
.LBB245_40:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB245_41:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB245_40
.Lfunc_end245:
	.size	mark_pic_long_term.182, .Lfunc_end245-mark_pic_long_term.182
	.cfi_endproc
                                        # -- End function
	.globl	gen_field_ref_ids.183   # -- Begin function gen_field_ref_ids.183
	.p2align	4, 0x90
	.type	gen_field_ref_ids.183,@function
gen_field_ref_ids.183:                  # @gen_field_ref_ids.183
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1539638874, -28(%rbp)  # imm = 0x5BC5065A
	movq	%rdi, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB246_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB246_3 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB246_14
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB246_1 Depth=1
	movl	$0, -8(%rbp)
.LBB246_3:                              # %for.cond1
                                        #   Parent Loop BB246_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB246_12
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB246_3 Depth=2
	movq	-16(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB246_6
# %bb.5:                                # %cond.true
                                        #   in Loop: Header=BB246_3 Depth=2
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB246_7
.LBB246_6:                              # %cond.false
                                        #   in Loop: Header=BB246_3 Depth=2
	xorl	%eax, %eax
	jmp	.LBB246_7
.LBB246_7:                              # %cond.end
                                        #   in Loop: Header=BB246_3 Depth=2
	movq	-16(%rbp), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB246_9
# %bb.8:                                # %cond.true27
                                        #   in Loop: Header=BB246_3 Depth=2
	movq	-16(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB246_10
.LBB246_9:                              # %cond.false32
                                        #   in Loop: Header=BB246_3 Depth=2
	xorl	%eax, %eax
	jmp	.LBB246_10
.LBB246_10:                             # %cond.end33
                                        #   in Loop: Header=BB246_3 Depth=2
	movq	-16(%rbp), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB246_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB246_3
.LBB246_12:                             # %for.end
                                        #   in Loop: Header=BB246_1 Depth=1
	jmp	.LBB246_13
.LBB246_13:                             # %for.inc45
                                        #   in Loop: Header=BB246_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB246_1
.LBB246_14:                             # %for.end47
	cmpl	$1539638874, -28(%rbp)  # imm = 0x5BC5065A
	jne	.LBB246_16
.LBB246_15:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB246_16:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB246_15
.Lfunc_end246:
	.size	gen_field_ref_ids.183, .Lfunc_end246-gen_field_ref_ids.183
	.cfi_endproc
                                        # -- End function
	.globl	replace_top_pic_with_frame.184 # -- Begin function replace_top_pic_with_frame.184
	.p2align	4, 0x90
	.type	replace_top_pic_with_frame.184,@function
replace_top_pic_with_frame.184:         # @replace_top_pic_with_frame.184
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1891798665, -32(%rbp)  # imm = 0x70C28E89
	movq	%rdi, -24(%rbp)
	movq	$0, -16(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 6380(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB247_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rdi
	callq	UnifiedOneForthPix
.LBB247_2:                              # %if.end
	movl	$0, -28(%rbp)
	movl	$0, -4(%rbp)
.LBB247_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB247_9
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB247_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jne	.LBB247_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB247_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, (%rax)
	jne	.LBB247_7
# %bb.6:                                # %if.then11
	movl	$1, -28(%rbp)
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB247_10
.LBB247_7:                              # %if.end14
                                        #   in Loop: Header=BB247_3 Depth=1
	jmp	.LBB247_8
.LBB247_8:                              # %for.inc
                                        #   in Loop: Header=BB247_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB247_3
.LBB247_9:                              # %for.end.loopexit
	jmp	.LBB247_10
.LBB247_10:                             # %for.end
	cmpl	$0, -28(%rbp)
	jne	.LBB247_12
# %bb.11:                               # %if.then16
	movabsq	$.L.str.14, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB247_12:                             # %if.end17
	movq	-16(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-16(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movq	-16(%rbp), %rax
	movl	$3, (%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB247_16
# %bb.13:                               # %if.then22
	movq	-16(%rbp), %rax
	movl	$3, 4(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB247_15
# %bb.14:                               # %if.then24
	movq	-16(%rbp), %rax
	movl	$3, 8(%rax)
.LBB247_15:                             # %if.end26
	jmp	.LBB247_16
.LBB247_16:                             # %if.end27
	movq	-16(%rbp), %rdi
	callq	dpb_split_field
	callq	update_ref_list
	callq	update_ltref_list
	cmpl	$1891798665, -32(%rbp)  # imm = 0x70C28E89
	jne	.LBB247_18
.LBB247_17:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB247_18:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB247_17
.Lfunc_end247:
	.size	replace_top_pic_with_frame.184, .Lfunc_end247-replace_top_pic_with_frame.184
	.cfi_endproc
                                        # -- End function
	.globl	fill_frame_num_gap.185  # -- Begin function fill_frame_num_gap.185
	.p2align	4, 0x90
	.type	fill_frame_num_gap.185,@function
fill_frame_num_gap.185:                 # @fill_frame_num_gap.185
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1999809775, -36(%rbp)  # imm = 0x7732ACEF
	movq	%rdi, -8(%rbp)
	movq	$0, -24(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -28(%rbp)
	movq	-8(%rbp), %rax
	movl	72496(%rax), %eax
	movl	%eax, -40(%rbp)
	movq	-8(%rbp), %rax
	movl	$1, 72496(%rax)
	movq	-8(%rbp), %rax
	movl	72648(%rax), %eax
	addl	$1, %eax
	cltd
	idivl	-28(%rbp)
	movl	%edx, -12(%rbp)
	movq	-8(%rbp), %rax
	movl	72464(%rax), %eax
	movl	%eax, -32(%rbp)
.LBB248_1:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-32(%rbp), %eax
	cmpl	-12(%rbp), %eax
	je	.LBB248_3
# %bb.2:                                # %while.body
                                        #   in Loop: Header=BB248_1 Depth=1
	movq	-8(%rbp), %rax
	movl	52(%rax), %esi
	movq	-8(%rbp), %rax
	movl	60(%rax), %edx
	movq	-8(%rbp), %rax
	movl	56(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	64(%rax), %r8d
	xorl	%edi, %edi
	callq	alloc_storable_picture
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	$1, 6412(%rax)
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 6364(%rcx)
	movq	-24(%rbp), %rax
	movl	$1, 6388(%rax)
	movq	-24(%rbp), %rax
	movl	$1, 6384(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 72500(%rax)
	movq	-24(%rbp), %rdi
	callq	store_picture_in_dpb
	movq	$0, -24(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	-28(%rbp)
	movl	%edx, -12(%rbp)
	jmp	.LBB248_1
.LBB248_3:                              # %while.end
	movl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 72496(%rcx)
	cmpl	$1999809775, -36(%rbp)  # imm = 0x7732ACEF
	jne	.LBB248_5
.LBB248_4:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB248_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB248_4
.Lfunc_end248:
	.size	fill_frame_num_gap.185, .Lfunc_end248-fill_frame_num_gap.185
	.cfi_endproc
                                        # -- End function
	.globl	alloc_colocated.186     # -- Begin function alloc_colocated.186
	.p2align	4, 0x90
	.type	alloc_colocated.186,@function
alloc_colocated.186:                    # @alloc_colocated.186
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1064452013, -32(%rbp)  # imm = 0x3F723FAD
	movl	%edi, -12(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -28(%rbp)
	movl	$1, %edi
	movl	$4880, %esi             # imm = 0x1310
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -24(%rbp)
	cmpq	-24(%rbp), %rcx
	jne	.LBB249_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.21, %rdi
	callq	no_mem_exit
.LBB249_2:                              # %if.end
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-16(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-24(%rbp), %rdi
	addq	$1600, %rdi             # imm = 0x640
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$1608, %rdi             # imm = 0x648
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$1616, %rdi             # imm = 0x650
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$1624, %rdi             # imm = 0x658
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-24(%rbp), %rdi
	addq	$4872, %rdi             # imm = 0x1308
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	cmpl	$0, -28(%rbp)
	je	.LBB249_4
# %bb.3:                                # %if.then17
	movq	-24(%rbp), %rdi
	addq	$3216, %rdi             # imm = 0xC90
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$3224, %rdi             # imm = 0xC98
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$3232, %rdi             # imm = 0xCA0
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$3240, %rdi             # imm = 0xCA8
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-24(%rbp), %rdi
	addq	$4832, %rdi             # imm = 0x12E0
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$4840, %rdi             # imm = 0x12E8
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$4848, %rdi             # imm = 0x12F0
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$4856, %rdi             # imm = 0x12F8
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
.LBB249_4:                              # %if.end50
	movl	-28(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rbx
	cmpl	$1064452013, -32(%rbp)  # imm = 0x3F723FAD
	jne	.LBB249_6
.LBB249_5:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB249_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB249_5
.Lfunc_end249:
	.size	alloc_colocated.186, .Lfunc_end249-alloc_colocated.186
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function gen_pic_list_from_frame_list.187
	.type	gen_pic_list_from_frame_list.187,@function
gen_pic_list_from_frame_list.187:       # @gen_pic_list_from_frame_list.187
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$2142609726, -60(%rbp)  # imm = 0x7FB5A13E
	movl	%edi, -44(%rbp)
	movq	%rsi, -24(%rbp)
	movl	%edx, -12(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -32(%rbp)
	movl	%r9d, -64(%rbp)
	movl	$0, -4(%rbp)
	movl	$0, -8(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB250_2
# %bb.1:                                # %if.then
	movabsq	$is_long_ref, %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB250_3
.LBB250_2:                              # %if.else
	movabsq	$is_short_ref, %rax
	movq	%rax, -40(%rbp)
.LBB250_3:                              # %if.end
	cmpl	$1, -44(%rbp)
	jne	.LBB250_28
# %bb.4:                                # %if.then1
	jmp	.LBB250_5
.LBB250_5:                              # %while.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB250_9 Depth 2
                                        #     Child Loop BB250_18 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	movb	$1, %al
	jl	.LBB250_7
# %bb.6:                                # %lor.rhs
                                        #   in Loop: Header=BB250_5 Depth=1
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	setl	%al
.LBB250_7:                              # %lor.end
                                        #   in Loop: Header=BB250_5 Depth=1
	testb	$1, %al
	jne	.LBB250_8
	jmp	.LBB250_27
.LBB250_8:                              # %while.body
                                        #   in Loop: Header=BB250_5 Depth=1
	jmp	.LBB250_9
.LBB250_9:                              # %for.cond
                                        #   Parent Loop BB250_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB250_16
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB250_9 Depth=2
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB250_14
# %bb.11:                               # %if.then6
                                        #   in Loop: Header=BB250_9 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB250_13
# %bb.12:                               # %if.then10
                                        #   in Loop: Header=BB250_5 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB250_17
.LBB250_13:                             # %if.end17
                                        #   in Loop: Header=BB250_9 Depth=2
	jmp	.LBB250_14
.LBB250_14:                             # %if.end18
                                        #   in Loop: Header=BB250_9 Depth=2
	jmp	.LBB250_15
.LBB250_15:                             # %for.inc
                                        #   in Loop: Header=BB250_9 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB250_9
.LBB250_16:                             # %for.end.loopexit
                                        #   in Loop: Header=BB250_5 Depth=1
	jmp	.LBB250_17
.LBB250_17:                             # %for.end
                                        #   in Loop: Header=BB250_5 Depth=1
	jmp	.LBB250_18
.LBB250_18:                             # %for.cond20
                                        #   Parent Loop BB250_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB250_25
# %bb.19:                               # %for.body22
                                        #   in Loop: Header=BB250_18 Depth=2
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB250_23
# %bb.20:                               # %if.then28
                                        #   in Loop: Header=BB250_18 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB250_22
# %bb.21:                               # %if.then33
                                        #   in Loop: Header=BB250_5 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB250_26
.LBB250_22:                             # %if.end41
                                        #   in Loop: Header=BB250_18 Depth=2
	jmp	.LBB250_23
.LBB250_23:                             # %if.end42
                                        #   in Loop: Header=BB250_18 Depth=2
	jmp	.LBB250_24
.LBB250_24:                             # %for.inc43
                                        #   in Loop: Header=BB250_18 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB250_18
.LBB250_25:                             # %for.end45.loopexit
                                        #   in Loop: Header=BB250_5 Depth=1
	jmp	.LBB250_26
.LBB250_26:                             # %for.end45
                                        #   in Loop: Header=BB250_5 Depth=1
	jmp	.LBB250_5
.LBB250_27:                             # %while.end
	jmp	.LBB250_28
.LBB250_28:                             # %if.end46
	cmpl	$2, -44(%rbp)
	jne	.LBB250_53
# %bb.29:                               # %if.then48
	jmp	.LBB250_30
.LBB250_30:                             # %while.cond49
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB250_34 Depth 2
                                        #     Child Loop BB250_43 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	movb	$1, %al
	jl	.LBB250_32
# %bb.31:                               # %lor.rhs51
                                        #   in Loop: Header=BB250_30 Depth=1
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	setl	%al
.LBB250_32:                             # %lor.end53
                                        #   in Loop: Header=BB250_30 Depth=1
	testb	$1, %al
	jne	.LBB250_33
	jmp	.LBB250_52
.LBB250_33:                             # %while.body54
                                        #   in Loop: Header=BB250_30 Depth=1
	jmp	.LBB250_34
.LBB250_34:                             # %for.cond55
                                        #   Parent Loop BB250_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB250_41
# %bb.35:                               # %for.body57
                                        #   in Loop: Header=BB250_34 Depth=2
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB250_39
# %bb.36:                               # %if.then63
                                        #   in Loop: Header=BB250_34 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB250_38
# %bb.37:                               # %if.then69
                                        #   in Loop: Header=BB250_30 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB250_42
.LBB250_38:                             # %if.end77
                                        #   in Loop: Header=BB250_34 Depth=2
	jmp	.LBB250_39
.LBB250_39:                             # %if.end78
                                        #   in Loop: Header=BB250_34 Depth=2
	jmp	.LBB250_40
.LBB250_40:                             # %for.inc79
                                        #   in Loop: Header=BB250_34 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB250_34
.LBB250_41:                             # %for.end81.loopexit
                                        #   in Loop: Header=BB250_30 Depth=1
	jmp	.LBB250_42
.LBB250_42:                             # %for.end81
                                        #   in Loop: Header=BB250_30 Depth=1
	jmp	.LBB250_43
.LBB250_43:                             # %for.cond82
                                        #   Parent Loop BB250_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB250_50
# %bb.44:                               # %for.body84
                                        #   in Loop: Header=BB250_43 Depth=2
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB250_48
# %bb.45:                               # %if.then90
                                        #   in Loop: Header=BB250_43 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB250_47
# %bb.46:                               # %if.then96
                                        #   in Loop: Header=BB250_30 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB250_51
.LBB250_47:                             # %if.end104
                                        #   in Loop: Header=BB250_43 Depth=2
	jmp	.LBB250_48
.LBB250_48:                             # %if.end105
                                        #   in Loop: Header=BB250_43 Depth=2
	jmp	.LBB250_49
.LBB250_49:                             # %for.inc106
                                        #   in Loop: Header=BB250_43 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB250_43
.LBB250_50:                             # %for.end108.loopexit
                                        #   in Loop: Header=BB250_30 Depth=1
	jmp	.LBB250_51
.LBB250_51:                             # %for.end108
                                        #   in Loop: Header=BB250_30 Depth=1
	jmp	.LBB250_30
.LBB250_52:                             # %while.end109
	jmp	.LBB250_53
.LBB250_53:                             # %if.end110
	cmpl	$2142609726, -60(%rbp)  # imm = 0x7FB5A13E
	jne	.LBB250_55
.LBB250_54:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB250_55:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB250_54
.Lfunc_end250:
	.size	gen_pic_list_from_frame_list.187, .Lfunc_end250-gen_pic_list_from_frame_list.187
	.cfi_endproc
                                        # -- End function
	.globl	alloc_storable_picture.188 # -- Begin function alloc_storable_picture.188
	.p2align	4, 0x90
	.type	alloc_storable_picture.188,@function
alloc_storable_picture.188:             # @alloc_storable_picture.188
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$579660423, -36(%rbp)   # imm = 0x228CEA87
	movl	%edi, -40(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -32(%rbp)
	movl	$1, %edi
	movl	$6584, %esi             # imm = 0x19B8
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -16(%rbp)
	cmpq	-16(%rbp), %rcx
	jne	.LBB251_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.7, %rdi
	callq	no_mem_exit
.LBB251_2:                              # %if.end
	movq	-16(%rbp), %rdi
	addq	$6424, %rdi             # imm = 0x1918
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	callq	get_mem2Dpel
	movq	-16(%rbp), %rax
	movq	$0, 6432(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6448(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6464(%rax)
	movq	input, %rax
	cmpl	$0, 1284(%rax)
	jne	.LBB251_5
# %bb.3:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 1288(%rax)
	jne	.LBB251_5
# %bb.4:                                # %lor.lhs.false3
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB251_6
.LBB251_5:                              # %if.then5
	movq	-16(%rbp), %rax
	movq	$0, 6440(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6456(%rax)
.LBB251_6:                              # %if.end6
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB251_8
# %bb.7:                                # %if.then8
	movq	-16(%rbp), %rdi
	addq	$6464, %rdi             # imm = 0x1940
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	$2, %esi
	callq	get_mem3Dpel
.LBB251_8:                              # %if.end11
	movq	img, %rax
	movl	72484(%rax), %edi
	movl	$4, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	-16(%rbp), %rdx
	movq	%rax, 6472(%rdx)
	movq	-16(%rbp), %rax
	cmpq	6472(%rax), %rcx
	jne	.LBB251_10
# %bb.9:                                # %if.then16
	movabsq	$.L.str.8, %rdi
	callq	no_mem_exit
.LBB251_10:                             # %if.end17
	movq	-16(%rbp), %rdi
	addq	$6480, %rdi             # imm = 0x1950
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-16(%rbp), %rdi
	addq	$6488, %rdi             # imm = 0x1958
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	movl	$6, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-16(%rbp), %rdi
	addq	$6496, %rdi             # imm = 0x1960
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	movl	$6, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-16(%rbp), %rdi
	addq	$6504, %rdi             # imm = 0x1968
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-16(%rbp), %rdi
	addq	$6512, %rdi             # imm = 0x1970
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-24(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-16(%rbp), %rdi
	addq	$6520, %rdi             # imm = 0x1978
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-24(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-16(%rbp), %rax
	movl	$0, 6364(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6360(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6372(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6368(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6380(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6376(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6388(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6384(%rax)
	movl	-40(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6392(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6396(%rcx)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6400(%rcx)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6404(%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 6528(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6536(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6544(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6412(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6416(%rax)
	movq	-16(%rbp), %rbx
	cmpl	$579660423, -36(%rbp)   # imm = 0x228CEA87
	jne	.LBB251_12
.LBB251_11:
	movq	%rbx, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB251_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB251_11
.Lfunc_end251:
	.size	alloc_storable_picture.188, .Lfunc_end251-alloc_storable_picture.188
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mark_pic_long_term.189
	.type	mark_pic_long_term.189,@function
mark_pic_long_term.189:                 # @mark_pic_long_term.189
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1219146950, -24(%rbp)  # imm = 0x48AAB4C6
	movq	%rdi, -32(%rbp)
	movl	%esi, -8(%rbp)
	movl	%edx, -16(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB252_11
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB252_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB252_10
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB252_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB252_8
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB252_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB252_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB252_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB252_7
# %bb.6:                                # %if.then10
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	$3, 8(%rax)
	jmp	.LBB252_39
.LBB252_7:                              # %if.end
                                        #   in Loop: Header=BB252_2 Depth=1
	jmp	.LBB252_8
.LBB252_8:                              # %if.end50
                                        #   in Loop: Header=BB252_2 Depth=1
	jmp	.LBB252_9
.LBB252_9:                              # %for.inc
                                        #   in Loop: Header=BB252_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB252_2
.LBB252_10:                             # %for.end
	movabsq	$.L.str.25, %rdi
	movb	$0, %al
	callq	printf
	jmp	.LBB252_39
.LBB252_11:                             # %if.else
	movq	-32(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB252_13
# %bb.12:                               # %if.then53
	movl	$1, -12(%rbp)
	movl	$0, -20(%rbp)
	jmp	.LBB252_14
.LBB252_13:                             # %if.else54
	movl	$0, -12(%rbp)
	movl	$1, -20(%rbp)
.LBB252_14:                             # %if.end55
	movl	$0, -4(%rbp)
.LBB252_15:                             # %for.cond56
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB252_38
# %bb.16:                               # %for.body58
                                        #   in Loop: Header=BB252_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB252_26
# %bb.17:                               # %if.then63
                                        #   in Loop: Header=BB252_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB252_25
# %bb.18:                               # %land.lhs.true69
                                        #   in Loop: Header=BB252_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB252_25
# %bb.19:                               # %if.then75
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	je	.LBB252_22
# %bb.20:                               # %land.lhs.true80
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-8(%rbp), %eax
	je	.LBB252_22
# %bb.21:                               # %if.then85
	movabsq	$.L.str.26, %rdi
	movb	$0, %al
	callq	printf
.LBB252_22:                             # %if.end87
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	shll	$1, %eax
	addl	-12(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	orl	$1, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB252_24
# %bb.23:                               # %if.then110
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB252_24:                             # %if.end123
	jmp	.LBB252_39
.LBB252_25:                             # %if.end124
                                        #   in Loop: Header=BB252_15 Depth=1
	jmp	.LBB252_26
.LBB252_26:                             # %if.end125
                                        #   in Loop: Header=BB252_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB252_36
# %bb.27:                               # %if.then131
                                        #   in Loop: Header=BB252_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB252_35
# %bb.28:                               # %land.lhs.true137
                                        #   in Loop: Header=BB252_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB252_35
# %bb.29:                               # %if.then143
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	je	.LBB252_32
# %bb.30:                               # %land.lhs.true148
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-8(%rbp), %eax
	je	.LBB252_32
# %bb.31:                               # %if.then153
	movabsq	$.L.str.26, %rdi
	movb	$0, %al
	callq	printf
.LBB252_32:                             # %if.end155
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	shll	$1, %eax
	addl	-12(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	orl	$2, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB252_34
# %bb.33:                               # %if.then181
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB252_34:                             # %if.end194
	jmp	.LBB252_39
.LBB252_35:                             # %if.end195
                                        #   in Loop: Header=BB252_15 Depth=1
	jmp	.LBB252_36
.LBB252_36:                             # %if.end196
                                        #   in Loop: Header=BB252_15 Depth=1
	jmp	.LBB252_37
.LBB252_37:                             # %for.inc197
                                        #   in Loop: Header=BB252_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB252_15
.LBB252_38:                             # %for.end199
	movabsq	$.L.str.27, %rdi
	movb	$0, %al
	callq	printf
.LBB252_39:                             # %if.end201
	cmpl	$1219146950, -24(%rbp)  # imm = 0x48AAB4C6
	jne	.LBB252_41
.LBB252_40:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB252_41:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB252_40
.Lfunc_end252:
	.size	mark_pic_long_term.189, .Lfunc_end252-mark_pic_long_term.189
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_poc_desc.190
	.type	compare_pic_by_poc_desc.190,@function
compare_pic_by_poc_desc.190:            # @compare_pic_by_poc_desc.190
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1946410595, -16(%rbp)  # imm = 0x7403DE63
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB253_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB253_5
.LBB253_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB253_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB253_5
.LBB253_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB253_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1946410595, -16(%rbp)  # imm = 0x7403DE63
	jne	.LBB253_7
.LBB253_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB253_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB253_6
.Lfunc_end253:
	.size	compare_pic_by_poc_desc.190, .Lfunc_end253-compare_pic_by_poc_desc.190
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function reorder_long_term.191
	.type	reorder_long_term.191,@function
reorder_long_term.191:                  # @reorder_long_term.191
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$264814823, -44(%rbp)   # imm = 0xFC8C0E7
	movq	%rdi, -16(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -40(%rbp)
	movl	-24(%rbp), %edi
	callq	get_long_term_pic
	movq	%rax, -56(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB254_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-40(%rbp), %rcx
	cmpl	(%rcx), %eax
	jle	.LBB254_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB254_1 Depth=1
	movq	-16(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB254_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB254_1
.LBB254_4:                              # %for.end
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movl	(%rdx), %esi
	movl	%esi, %edi
	addl	$1, %edi
	movl	%edi, (%rdx)
	movslq	%esi, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB254_5:                              # %for.cond5
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jg	.LBB254_11
# %bb.6:                                # %for.body8
                                        #   in Loop: Header=BB254_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB254_8
# %bb.7:                                # %lor.lhs.false
                                        #   in Loop: Header=BB254_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6368(%rax), %eax
	cmpl	-24(%rbp), %eax
	je	.LBB254_9
.LBB254_8:                              # %if.then
                                        #   in Loop: Header=BB254_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movl	-28(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -28(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB254_9:                              # %if.end
                                        #   in Loop: Header=BB254_5 Depth=1
	jmp	.LBB254_10
.LBB254_10:                             # %for.inc19
                                        #   in Loop: Header=BB254_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB254_5
.LBB254_11:                             # %for.end21
	cmpl	$264814823, -44(%rbp)   # imm = 0xFC8C0E7
	jne	.LBB254_13
.LBB254_12:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB254_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB254_12
.Lfunc_end254:
	.size	reorder_long_term.191, .Lfunc_end254-reorder_long_term.191
	.cfi_endproc
                                        # -- End function
	.globl	replace_top_pic_with_frame.192 # -- Begin function replace_top_pic_with_frame.192
	.p2align	4, 0x90
	.type	replace_top_pic_with_frame.192,@function
replace_top_pic_with_frame.192:         # @replace_top_pic_with_frame.192
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$836850879, -32(%rbp)   # imm = 0x31E154BF
	movq	%rdi, -24(%rbp)
	movq	$0, -16(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 6380(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB255_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rdi
	callq	UnifiedOneForthPix
.LBB255_2:                              # %if.end
	movl	$0, -28(%rbp)
	movl	$0, -4(%rbp)
.LBB255_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB255_9
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB255_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jne	.LBB255_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB255_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, (%rax)
	jne	.LBB255_7
# %bb.6:                                # %if.then11
	movl	$1, -28(%rbp)
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB255_10
.LBB255_7:                              # %if.end14
                                        #   in Loop: Header=BB255_3 Depth=1
	jmp	.LBB255_8
.LBB255_8:                              # %for.inc
                                        #   in Loop: Header=BB255_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB255_3
.LBB255_9:                              # %for.end.loopexit
	jmp	.LBB255_10
.LBB255_10:                             # %for.end
	cmpl	$0, -28(%rbp)
	jne	.LBB255_12
# %bb.11:                               # %if.then16
	movabsq	$.L.str.14, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB255_12:                             # %if.end17
	movq	-16(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-16(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movq	-16(%rbp), %rax
	movl	$3, (%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB255_16
# %bb.13:                               # %if.then22
	movq	-16(%rbp), %rax
	movl	$3, 4(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB255_15
# %bb.14:                               # %if.then24
	movq	-16(%rbp), %rax
	movl	$3, 8(%rax)
.LBB255_15:                             # %if.end26
	jmp	.LBB255_16
.LBB255_16:                             # %if.end27
	movq	-16(%rbp), %rdi
	callq	dpb_split_field
	callq	update_ref_list
	callq	update_ltref_list
	cmpl	$836850879, -32(%rbp)   # imm = 0x31E154BF
	jne	.LBB255_18
.LBB255_17:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB255_18:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB255_17
.Lfunc_end255:
	.size	replace_top_pic_with_frame.192, .Lfunc_end255-replace_top_pic_with_frame.192
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_lt_pic_idx_asc.193
	.type	compare_fs_by_lt_pic_idx_asc.193,@function
compare_fs_by_lt_pic_idx_asc.193:       # @compare_fs_by_lt_pic_idx_asc.193
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$923592456, -16(%rbp)   # imm = 0x370CE708
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	28(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	28(%rcx), %eax
	jge	.LBB256_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB256_5
.LBB256_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	28(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	28(%rcx), %eax
	jle	.LBB256_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB256_5
.LBB256_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB256_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$923592456, -16(%rbp)   # imm = 0x370CE708
	jne	.LBB256_7
.LBB256_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB256_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB256_6
.Lfunc_end256:
	.size	compare_fs_by_lt_pic_idx_asc.193, .Lfunc_end256-compare_fs_by_lt_pic_idx_asc.193
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_poc_desc.194
	.type	compare_fs_by_poc_desc.194,@function
compare_fs_by_poc_desc.194:             # @compare_fs_by_poc_desc.194
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1433566925, -16(%rbp)  # imm = 0x55727ECD
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB257_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB257_5
.LBB257_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jle	.LBB257_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB257_5
.LBB257_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB257_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1433566925, -16(%rbp)  # imm = 0x55727ECD
	jne	.LBB257_7
.LBB257_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB257_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB257_6
.Lfunc_end257:
	.size	compare_fs_by_poc_desc.194, .Lfunc_end257-compare_fs_by_poc_desc.194
	.cfi_endproc
                                        # -- End function
	.globl	store_picture_in_dpb.195 # -- Begin function store_picture_in_dpb.195
	.p2align	4, 0x90
	.type	store_picture_in_dpb.195,@function
store_picture_in_dpb.195:               # @store_picture_in_dpb.195
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1629034628, -20(%rbp)  # imm = 0x61191884
	movq	%rdi, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 6380(%rcx)
	movq	img, %rax
	movl	$0, 72644(%rax)
	movq	img, %rax
	cmpl	$2, 28(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 72640(%rcx)
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	je	.LBB258_2
# %bb.1:                                # %if.then
	movq	-8(%rbp), %rdi
	callq	idr_memory_management
	jmp	.LBB258_6
.LBB258_2:                              # %if.else
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB258_5
# %bb.3:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72500(%rax)
	je	.LBB258_5
# %bb.4:                                # %if.then6
	movq	-8(%rbp), %rdi
	callq	adaptive_memory_management
.LBB258_5:                              # %if.end
	jmp	.LBB258_6
.LBB258_6:                              # %if.end7
	movq	-8(%rbp), %rax
	cmpl	$1, (%rax)
	je	.LBB258_8
# %bb.7:                                # %lor.lhs.false
	movq	-8(%rbp), %rax
	cmpl	$2, (%rax)
	jne	.LBB258_23
.LBB258_8:                              # %if.then14
	cmpq	$0, dpb+56
	je	.LBB258_22
# %bb.9:                                # %if.then16
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	cmpl	6364(%rcx), %eax
	jne	.LBB258_21
# %bb.10:                               # %if.then19
	movq	-8(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB258_12
# %bb.11:                               # %land.lhs.true23
	movq	dpb+56, %rax
	cmpl	$2, (%rax)
	je	.LBB258_14
.LBB258_12:                             # %lor.lhs.false26
	movq	-8(%rbp), %rax
	cmpl	$2, (%rax)
	jne	.LBB258_20
# %bb.13:                               # %land.lhs.true30
	movq	dpb+56, %rax
	cmpl	$1, (%rax)
	jne	.LBB258_20
.LBB258_14:                             # %if.then34
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB258_16
# %bb.15:                               # %land.lhs.true37
	movq	dpb+56, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB258_18
.LBB258_16:                             # %lor.lhs.false40
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	jne	.LBB258_19
# %bb.17:                               # %land.lhs.true43
	movq	dpb+56, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB258_19
.LBB258_18:                             # %if.then47
	movq	dpb+56, %rdi
	movq	-8(%rbp), %rsi
	callq	insert_picture_in_dpb
	callq	update_ref_list
	callq	update_ltref_list
	callq	dump_dpb
	movq	$0, dpb+56
	jmp	.LBB258_50
.LBB258_19:                             # %if.end48
	jmp	.LBB258_20
.LBB258_20:                             # %if.end49
	jmp	.LBB258_21
.LBB258_21:                             # %if.end50
	jmp	.LBB258_22
.LBB258_22:                             # %if.end51
	jmp	.LBB258_23
.LBB258_23:                             # %if.end52
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	jne	.LBB258_27
# %bb.24:                               # %land.lhs.true56
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB258_27
# %bb.25:                               # %land.lhs.true59
	movq	img, %rax
	cmpl	$0, 72500(%rax)
	jne	.LBB258_27
# %bb.26:                               # %if.then62
	movq	-8(%rbp), %rdi
	callq	sliding_window_memory_management
.LBB258_27:                             # %if.end63
	movl	dpb+28, %eax
	cmpl	dpb+24, %eax
	jne	.LBB258_29
# %bb.28:                               # %if.then66
	callq	remove_unused_frame_from_dpb
.LBB258_29:                             # %if.end67
	jmp	.LBB258_30
.LBB258_30:                             # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	dpb+28, %eax
	cmpl	dpb+24, %eax
	jne	.LBB258_37
# %bb.31:                               # %while.body
                                        #   in Loop: Header=BB258_30 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	jne	.LBB258_36
# %bb.32:                               # %if.then72
                                        #   in Loop: Header=BB258_30 Depth=1
	leaq	-16(%rbp), %rdi
	leaq	-24(%rbp), %rsi
	callq	get_smallest_poc
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	cmpl	-24(%rbp), %eax
	je	.LBB258_34
# %bb.33:                               # %lor.lhs.false75
                                        #   in Loop: Header=BB258_30 Depth=1
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB258_35
.LBB258_34:                             # %if.then79
	movq	-8(%rbp), %rdi
	movl	p_dec, %esi
	callq	direct_output
	jmp	.LBB258_50
.LBB258_35:                             # %if.end80
                                        #   in Loop: Header=BB258_30 Depth=1
	jmp	.LBB258_36
.LBB258_36:                             # %if.end81
                                        #   in Loop: Header=BB258_30 Depth=1
	callq	output_one_frame_from_dpb
	jmp	.LBB258_30
.LBB258_37:                             # %while.end
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB258_46
# %bb.38:                               # %land.lhs.true84
	movq	-8(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB258_46
# %bb.39:                               # %if.then86
	movl	$0, -12(%rbp)
.LBB258_40:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB258_45
# %bb.41:                               # %for.body
                                        #   in Loop: Header=BB258_40 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	cmpl	6360(%rcx), %eax
	jne	.LBB258_43
# %bb.42:                               # %if.then93
                                        #   in Loop: Header=BB258_40 Depth=1
	movabsq	$.L.str.13, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB258_43:                             # %if.end94
                                        #   in Loop: Header=BB258_40 Depth=1
	jmp	.LBB258_44
.LBB258_44:                             # %for.inc
                                        #   in Loop: Header=BB258_40 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB258_40
.LBB258_45:                             # %for.end
	jmp	.LBB258_46
.LBB258_46:                             # %if.end95
	movq	dpb, %rax
	movl	dpb+28, %ecx
	movq	(%rax,%rcx,8), %rdi
	movq	-8(%rbp), %rsi
	callq	insert_picture_in_dpb
	movq	-8(%rbp), %rax
	cmpl	$0, (%rax)
	je	.LBB258_48
# %bb.47:                               # %if.then101
	movq	dpb, %rax
	movl	dpb+28, %ecx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, dpb+56
	jmp	.LBB258_49
.LBB258_48:                             # %if.else104
	movq	$0, dpb+56
.LBB258_49:                             # %if.end105
	movl	dpb+28, %eax
	addl	$1, %eax
	movl	%eax, dpb+28
	callq	update_ref_list
	callq	update_ltref_list
	callq	dump_dpb
.LBB258_50:                             # %return
	cmpl	$1629034628, -20(%rbp)  # imm = 0x61191884
	jne	.LBB258_52
.LBB258_51:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB258_52:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB258_51
.Lfunc_end258:
	.size	store_picture_in_dpb.195, .Lfunc_end258-store_picture_in_dpb.195
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_smallest_poc.196
	.type	get_smallest_poc.196,@function
get_smallest_poc.196:                   # @get_smallest_poc.196
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$848462127, -20(%rbp)   # imm = 0x3292812F
	movq	%rdi, -16(%rbp)
	movq	%rsi, -32(%rbp)
	cmpl	$1, dpb+28
	jae	.LBB259_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.28, %rdi
	movl	$150, %esi
	callq	error
.LBB259_2:                              # %if.end
	movq	-32(%rbp), %rax
	movl	$-1, (%rax)
	movq	-16(%rbp), %rax
	movl	$2147483647, (%rax)     # imm = 0x7FFFFFFF
	movl	$0, -4(%rbp)
.LBB259_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB259_9
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB259_3 Depth=1
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	dpb, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jle	.LBB259_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB259_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 32(%rax)
	jne	.LBB259_7
# %bb.6:                                # %if.then6
                                        #   in Loop: Header=BB259_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	36(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB259_7:                              # %if.end10
                                        #   in Loop: Header=BB259_3 Depth=1
	jmp	.LBB259_8
.LBB259_8:                              # %for.inc
                                        #   in Loop: Header=BB259_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB259_3
.LBB259_9:                              # %for.end
	cmpl	$848462127, -20(%rbp)   # imm = 0x3292812F
	jne	.LBB259_11
.LBB259_10:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB259_11:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB259_10
.Lfunc_end259:
	.size	get_smallest_poc.196, .Lfunc_end259-get_smallest_poc.196
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_lt_pic_idx_asc.197
	.type	compare_fs_by_lt_pic_idx_asc.197,@function
compare_fs_by_lt_pic_idx_asc.197:       # @compare_fs_by_lt_pic_idx_asc.197
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1429996000, -16(%rbp)  # imm = 0x553C01E0
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	28(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	28(%rcx), %eax
	jge	.LBB260_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB260_5
.LBB260_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	28(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	28(%rcx), %eax
	jle	.LBB260_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB260_5
.LBB260_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB260_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1429996000, -16(%rbp)  # imm = 0x553C01E0
	jne	.LBB260_7
.LBB260_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB260_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB260_6
.Lfunc_end260:
	.size	compare_fs_by_lt_pic_idx_asc.197, .Lfunc_end260-compare_fs_by_lt_pic_idx_asc.197
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_lt_pic_num_asc.198
	.type	compare_pic_by_lt_pic_num_asc.198,@function
compare_pic_by_lt_pic_num_asc.198:      # @compare_pic_by_lt_pic_num_asc.198
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$718431170, -16(%rbp)   # imm = 0x2AD263C2
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	6368(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6368(%rcx), %eax
	jge	.LBB261_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB261_5
.LBB261_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	6368(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6368(%rcx), %eax
	jle	.LBB261_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB261_5
.LBB261_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB261_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$718431170, -16(%rbp)   # imm = 0x2AD263C2
	jne	.LBB261_7
.LBB261_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB261_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB261_6
.Lfunc_end261:
	.size	compare_pic_by_lt_pic_num_asc.198, .Lfunc_end261-compare_pic_by_lt_pic_num_asc.198
	.cfi_endproc
                                        # -- End function
	.globl	fill_frame_num_gap.199  # -- Begin function fill_frame_num_gap.199
	.p2align	4, 0x90
	.type	fill_frame_num_gap.199,@function
fill_frame_num_gap.199:                 # @fill_frame_num_gap.199
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$380852536, -40(%rbp)   # imm = 0x16B35938
	movq	%rdi, -8(%rbp)
	movq	$0, -24(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -28(%rbp)
	movq	-8(%rbp), %rax
	movl	72496(%rax), %eax
	movl	%eax, -32(%rbp)
	movq	-8(%rbp), %rax
	movl	$1, 72496(%rax)
	movq	-8(%rbp), %rax
	movl	72648(%rax), %eax
	addl	$1, %eax
	cltd
	idivl	-28(%rbp)
	movl	%edx, -12(%rbp)
	movq	-8(%rbp), %rax
	movl	72464(%rax), %eax
	movl	%eax, -36(%rbp)
.LBB262_1:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-36(%rbp), %eax
	cmpl	-12(%rbp), %eax
	je	.LBB262_3
# %bb.2:                                # %while.body
                                        #   in Loop: Header=BB262_1 Depth=1
	movq	-8(%rbp), %rax
	movl	52(%rax), %esi
	movq	-8(%rbp), %rax
	movl	60(%rax), %edx
	movq	-8(%rbp), %rax
	movl	56(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	64(%rax), %r8d
	xorl	%edi, %edi
	callq	alloc_storable_picture
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	$1, 6412(%rax)
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 6364(%rcx)
	movq	-24(%rbp), %rax
	movl	$1, 6388(%rax)
	movq	-24(%rbp), %rax
	movl	$1, 6384(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 72500(%rax)
	movq	-24(%rbp), %rdi
	callq	store_picture_in_dpb
	movq	$0, -24(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	-28(%rbp)
	movl	%edx, -12(%rbp)
	jmp	.LBB262_1
.LBB262_3:                              # %while.end
	movl	-32(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 72496(%rcx)
	cmpl	$380852536, -40(%rbp)   # imm = 0x16B35938
	jne	.LBB262_5
.LBB262_4:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB262_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB262_4
.Lfunc_end262:
	.size	fill_frame_num_gap.199, .Lfunc_end262-fill_frame_num_gap.199
	.cfi_endproc
                                        # -- End function
	.globl	init_lists.200          # -- Begin function init_lists.200
	.p2align	4, 0x90
	.type	init_lists.200,@function
init_lists.200:                         # @init_lists.200
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$333626289, -76(%rbp)   # imm = 0x13E2BBB1
	movl	%edi, -52(%rbp)
	movl	%esi, -20(%rbp)
	movl	$0, -44(%rbp)
	movl	$0, -48(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -8(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jne	.LBB263_14
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB263_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB263_13
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB263_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB263_11
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB263_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB263_10
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB263_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB263_10
# %bb.6:                                # %if.then10
                                        #   in Loop: Header=BB263_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jbe	.LBB263_8
# %bb.7:                                # %if.then15
                                        #   in Loop: Header=BB263_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	subl	-68(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
	jmp	.LBB263_9
.LBB263_8:                              # %if.else
                                        #   in Loop: Header=BB263_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
.LBB263_9:                              # %if.end
                                        #   in Loop: Header=BB263_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6364(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
.LBB263_10:                             # %if.end36
                                        #   in Loop: Header=BB263_2 Depth=1
	jmp	.LBB263_11
.LBB263_11:                             # %if.end37
                                        #   in Loop: Header=BB263_2 Depth=1
	jmp	.LBB263_12
.LBB263_12:                             # %for.inc
                                        #   in Loop: Header=BB263_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB263_2
.LBB263_13:                             # %for.end
	jmp	.LBB263_31
.LBB263_14:                             # %if.else38
	cmpl	$1, -20(%rbp)
	jne	.LBB263_16
# %bb.15:                               # %if.then40
	movl	$1, -44(%rbp)
	movl	$0, -48(%rbp)
	jmp	.LBB263_17
.LBB263_16:                             # %if.else41
	movl	$0, -44(%rbp)
	movl	$1, -48(%rbp)
.LBB263_17:                             # %if.end42
	movl	$0, -4(%rbp)
.LBB263_18:                             # %for.cond43
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB263_30
# %bb.19:                               # %for.body45
                                        #   in Loop: Header=BB263_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 4(%rax)
	je	.LBB263_28
# %bb.20:                               # %if.then49
                                        #   in Loop: Header=BB263_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jbe	.LBB263_22
# %bb.21:                               # %if.then55
                                        #   in Loop: Header=BB263_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	subl	-68(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
	jmp	.LBB263_23
.LBB263_22:                             # %if.else63
                                        #   in Loop: Header=BB263_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
.LBB263_23:                             # %if.end70
                                        #   in Loop: Header=BB263_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB263_25
# %bb.24:                               # %if.then75
                                        #   in Loop: Header=BB263_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6364(%rcx)
.LBB263_25:                             # %if.end83
                                        #   in Loop: Header=BB263_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB263_27
# %bb.26:                               # %if.then89
                                        #   in Loop: Header=BB263_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6364(%rcx)
.LBB263_27:                             # %if.end98
                                        #   in Loop: Header=BB263_18 Depth=1
	jmp	.LBB263_28
.LBB263_28:                             # %if.end99
                                        #   in Loop: Header=BB263_18 Depth=1
	jmp	.LBB263_29
.LBB263_29:                             # %for.inc100
                                        #   in Loop: Header=BB263_18 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB263_18
.LBB263_30:                             # %for.end102
	jmp	.LBB263_31
.LBB263_31:                             # %if.end103
	cmpl	$2, -52(%rbp)
	je	.LBB263_33
# %bb.32:                               # %lor.lhs.false
	cmpl	$4, -52(%rbp)
	jne	.LBB263_34
.LBB263_33:                             # %if.then106
	movl	$0, listXsize
	movl	$0, listXsize+4
	jmp	.LBB263_181
.LBB263_34:                             # %if.end107
	cmpl	$0, -52(%rbp)
	je	.LBB263_36
# %bb.35:                               # %lor.lhs.false109
	cmpl	$3, -52(%rbp)
	jne	.LBB263_75
.LBB263_36:                             # %if.then111
	cmpl	$0, -20(%rbp)
	jne	.LBB263_55
# %bb.37:                               # %if.then113
	movl	$0, -4(%rbp)
.LBB263_38:                             # %for.cond114
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB263_46
# %bb.39:                               # %for.body116
                                        #   in Loop: Header=BB263_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB263_44
# %bb.40:                               # %if.then121
                                        #   in Loop: Header=BB263_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB263_43
# %bb.41:                               # %land.lhs.true127
                                        #   in Loop: Header=BB263_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB263_43
# %bb.42:                               # %if.then133
                                        #   in Loop: Header=BB263_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB263_43:                             # %if.end140
                                        #   in Loop: Header=BB263_38 Depth=1
	jmp	.LBB263_44
.LBB263_44:                             # %if.end141
                                        #   in Loop: Header=BB263_38 Depth=1
	jmp	.LBB263_45
.LBB263_45:                             # %for.inc142
                                        #   in Loop: Header=BB263_38 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB263_38
.LBB263_46:                             # %for.end144
	movq	listX, %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_pic_num_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize
	movl	$0, -4(%rbp)
.LBB263_47:                             # %for.cond145
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB263_54
# %bb.48:                               # %for.body148
                                        #   in Loop: Header=BB263_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB263_52
# %bb.49:                               # %if.then154
                                        #   in Loop: Header=BB263_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB263_51
# %bb.50:                               # %if.then160
                                        #   in Loop: Header=BB263_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB263_51:                             # %if.end177
                                        #   in Loop: Header=BB263_47 Depth=1
	jmp	.LBB263_52
.LBB263_52:                             # %if.end178
                                        #   in Loop: Header=BB263_47 Depth=1
	jmp	.LBB263_53
.LBB263_53:                             # %for.inc179
                                        #   in Loop: Header=BB263_47 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB263_47
.LBB263_54:                             # %for.end181
	movq	listX, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize
	jmp	.LBB263_74
.LBB263_55:                             # %if.else186
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -32(%rbp)
	cmpq	-32(%rbp), %rcx
	jne	.LBB263_57
# %bb.56:                               # %if.then190
	movabsq	$.L.str.9, %rdi
	callq	no_mem_exit
.LBB263_57:                             # %if.end191
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -40(%rbp)
	cmpq	-40(%rbp), %rcx
	jne	.LBB263_59
# %bb.58:                               # %if.then196
	movabsq	$.L.str.10, %rdi
	callq	no_mem_exit
.LBB263_59:                             # %if.end197
	movl	$0, -4(%rbp)
.LBB263_60:                             # %for.cond198
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB263_65
# %bb.61:                               # %for.body201
                                        #   in Loop: Header=BB263_60 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 4(%rax)
	je	.LBB263_63
# %bb.62:                               # %if.then206
                                        #   in Loop: Header=BB263_60 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB263_63:                             # %if.end212
                                        #   in Loop: Header=BB263_60 Depth=1
	jmp	.LBB263_64
.LBB263_64:                             # %for.inc213
                                        #   in Loop: Header=BB263_60 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB263_60
.LBB263_65:                             # %for.end215
	movq	-32(%rbp), %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_frame_num_desc, %rcx
	callq	qsort
	movl	$0, listXsize
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movl	$0, -4(%rbp)
.LBB263_66:                             # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB263_73
# %bb.67:                               # %for.body220
                                        #   in Loop: Header=BB263_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-40(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB263_69
# %bb.68:                               # %if.then231
                                        #   in Loop: Header=BB263_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB263_69:                             # %if.end242
                                        #   in Loop: Header=BB263_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB263_71
# %bb.70:                               # %if.then248
                                        #   in Loop: Header=BB263_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB263_71:                             # %if.end259
                                        #   in Loop: Header=BB263_66 Depth=1
	jmp	.LBB263_72
.LBB263_72:                             # %for.inc260
                                        #   in Loop: Header=BB263_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB263_66
.LBB263_73:                             # %for.end262
	movq	-40(%rbp), %rdi
	movslq	-24(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_lt_pic_idx_asc, %rcx
	callq	qsort
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movq	-32(%rbp), %rdi
	callq	free
	movq	-40(%rbp), %rdi
	callq	free
.LBB263_74:                             # %if.end264
	movl	$0, listXsize+4
	jmp	.LBB263_155
.LBB263_75:                             # %if.else265
	cmpl	$0, -20(%rbp)
	jne	.LBB263_115
# %bb.76:                               # %if.then268
	movl	$0, -4(%rbp)
.LBB263_77:                             # %for.cond269
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB263_87
# %bb.78:                               # %for.body272
                                        #   in Loop: Header=BB263_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB263_85
# %bb.79:                               # %if.then278
                                        #   in Loop: Header=BB263_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB263_84
# %bb.80:                               # %land.lhs.true284
                                        #   in Loop: Header=BB263_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB263_84
# %bb.81:                               # %if.then290
                                        #   in Loop: Header=BB263_77 Depth=1
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB263_83
# %bb.82:                               # %if.then296
                                        #   in Loop: Header=BB263_77 Depth=1
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB263_83:                             # %if.end307
                                        #   in Loop: Header=BB263_77 Depth=1
	jmp	.LBB263_84
.LBB263_84:                             # %if.end308
                                        #   in Loop: Header=BB263_77 Depth=1
	jmp	.LBB263_85
.LBB263_85:                             # %if.end309
                                        #   in Loop: Header=BB263_77 Depth=1
	jmp	.LBB263_86
.LBB263_86:                             # %for.inc310
                                        #   in Loop: Header=BB263_77 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB263_77
.LBB263_87:                             # %for.end312
	movq	listX, %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_poc_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB263_88:                             # %for.cond314
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB263_98
# %bb.89:                               # %for.body317
                                        #   in Loop: Header=BB263_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB263_96
# %bb.90:                               # %if.then323
                                        #   in Loop: Header=BB263_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB263_95
# %bb.91:                               # %land.lhs.true329
                                        #   in Loop: Header=BB263_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB263_95
# %bb.92:                               # %if.then335
                                        #   in Loop: Header=BB263_88 Depth=1
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB263_94
# %bb.93:                               # %if.then343
                                        #   in Loop: Header=BB263_88 Depth=1
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB263_94:                             # %if.end354
                                        #   in Loop: Header=BB263_88 Depth=1
	jmp	.LBB263_95
.LBB263_95:                             # %if.end355
                                        #   in Loop: Header=BB263_88 Depth=1
	jmp	.LBB263_96
.LBB263_96:                             # %if.end356
                                        #   in Loop: Header=BB263_88 Depth=1
	jmp	.LBB263_97
.LBB263_97:                             # %for.inc357
                                        #   in Loop: Header=BB263_88 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB263_88
.LBB263_98:                             # %for.end359
	movq	listX, %rdi
	movslq	-16(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_poc_asc, %rcx
	callq	qsort
	movl	$0, -12(%rbp)
.LBB263_99:                             # %for.cond364
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB263_102
# %bb.100:                              # %for.body367
                                        #   in Loop: Header=BB263_99 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movl	-8(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.101:                              # %for.inc374
                                        #   in Loop: Header=BB263_99 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB263_99
.LBB263_102:                            # %for.end376
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB263_103:                            # %for.cond377
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB263_106
# %bb.104:                              # %for.body380
                                        #   in Loop: Header=BB263_103 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.105:                              # %for.inc386
                                        #   in Loop: Header=BB263_103 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB263_103
.LBB263_106:                            # %for.end388
	movl	-8(%rbp), %eax
	movl	%eax, listXsize+4
	movl	%eax, listXsize
	movl	$0, -4(%rbp)
.LBB263_107:                            # %for.cond389
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB263_114
# %bb.108:                              # %for.body392
                                        #   in Loop: Header=BB263_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB263_112
# %bb.109:                              # %if.then398
                                        #   in Loop: Header=BB263_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB263_111
# %bb.110:                              # %if.then404
                                        #   in Loop: Header=BB263_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX+8, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB263_111:                            # %if.end428
                                        #   in Loop: Header=BB263_107 Depth=1
	jmp	.LBB263_112
.LBB263_112:                            # %if.end429
                                        #   in Loop: Header=BB263_107 Depth=1
	jmp	.LBB263_113
.LBB263_113:                            # %for.inc430
                                        #   in Loop: Header=BB263_107 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB263_107
.LBB263_114:                            # %for.end432
	movq	listX, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movq	listX+8, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize+4
	movl	%eax, listXsize
	jmp	.LBB263_154
.LBB263_115:                            # %if.else441
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -32(%rbp)
	cmpq	-32(%rbp), %rcx
	jne	.LBB263_117
# %bb.116:                              # %if.then446
	movabsq	$.L.str.9, %rdi
	callq	no_mem_exit
.LBB263_117:                            # %if.end447
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -64(%rbp)
	cmpq	-64(%rbp), %rcx
	jne	.LBB263_119
# %bb.118:                              # %if.then452
	movabsq	$.L.str.11, %rdi
	callq	no_mem_exit
.LBB263_119:                            # %if.end453
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -40(%rbp)
	cmpq	-40(%rbp), %rcx
	jne	.LBB263_121
# %bb.120:                              # %if.then458
	movabsq	$.L.str.10, %rdi
	callq	no_mem_exit
.LBB263_121:                            # %if.end459
	movl	$0, listXsize
	movl	$1, listXsize+4
	movl	$0, -4(%rbp)
.LBB263_122:                            # %for.cond460
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB263_129
# %bb.123:                              # %for.body463
                                        #   in Loop: Header=BB263_122 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, (%rax)
	je	.LBB263_127
# %bb.124:                              # %if.then468
                                        #   in Loop: Header=BB263_122 Depth=1
	movq	img, %rax
	movl	72460(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jl	.LBB263_126
# %bb.125:                              # %if.then474
                                        #   in Loop: Header=BB263_122 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB263_126:                            # %if.end480
                                        #   in Loop: Header=BB263_122 Depth=1
	jmp	.LBB263_127
.LBB263_127:                            # %if.end481
                                        #   in Loop: Header=BB263_122 Depth=1
	jmp	.LBB263_128
.LBB263_128:                            # %for.inc482
                                        #   in Loop: Header=BB263_122 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB263_122
.LBB263_129:                            # %for.end484
	movq	-32(%rbp), %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_poc_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB263_130:                            # %for.cond486
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB263_137
# %bb.131:                              # %for.body489
                                        #   in Loop: Header=BB263_130 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, (%rax)
	je	.LBB263_135
# %bb.132:                              # %if.then494
                                        #   in Loop: Header=BB263_130 Depth=1
	movq	img, %rax
	movl	72460(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB263_134
# %bb.133:                              # %if.then501
                                        #   in Loop: Header=BB263_130 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB263_134:                            # %if.end507
                                        #   in Loop: Header=BB263_130 Depth=1
	jmp	.LBB263_135
.LBB263_135:                            # %if.end508
                                        #   in Loop: Header=BB263_130 Depth=1
	jmp	.LBB263_136
.LBB263_136:                            # %for.inc509
                                        #   in Loop: Header=BB263_130 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB263_130
.LBB263_137:                            # %for.end511
	movq	-32(%rbp), %rdi
	movslq	-16(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_poc_asc, %rcx
	callq	qsort
	movl	$0, -12(%rbp)
.LBB263_138:                            # %for.cond516
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB263_141
# %bb.139:                              # %for.body519
                                        #   in Loop: Header=BB263_138 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	-8(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.140:                              # %for.inc526
                                        #   in Loop: Header=BB263_138 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB263_138
.LBB263_141:                            # %for.end528
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB263_142:                            # %for.cond529
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB263_145
# %bb.143:                              # %for.body532
                                        #   in Loop: Header=BB263_142 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.144:                              # %for.inc538
                                        #   in Loop: Header=BB263_142 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB263_142
.LBB263_145:                            # %for.end540
	movl	$0, listXsize
	movl	$0, listXsize+4
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movabsq	$listXsize, %r8
	addq	$4, %r8
	movl	-20(%rbp), %edi
	movq	-64(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX+8, %rcx
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movl	$0, -4(%rbp)
.LBB263_146:                            # %for.cond541
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB263_153
# %bb.147:                              # %for.body544
                                        #   in Loop: Header=BB263_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-40(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB263_149
# %bb.148:                              # %if.then555
                                        #   in Loop: Header=BB263_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB263_149:                            # %if.end566
                                        #   in Loop: Header=BB263_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB263_151
# %bb.150:                              # %if.then572
                                        #   in Loop: Header=BB263_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB263_151:                            # %if.end583
                                        #   in Loop: Header=BB263_146 Depth=1
	jmp	.LBB263_152
.LBB263_152:                            # %for.inc584
                                        #   in Loop: Header=BB263_146 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB263_146
.LBB263_153:                            # %for.end586
	movq	-40(%rbp), %rdi
	movslq	-24(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_lt_pic_idx_asc, %rcx
	callq	qsort
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movabsq	$listXsize, %r8
	addq	$4, %r8
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX+8, %rcx
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movq	-32(%rbp), %rdi
	callq	free
	movq	-64(%rbp), %rdi
	callq	free
	movq	-40(%rbp), %rdi
	callq	free
.LBB263_154:                            # %if.end588
	jmp	.LBB263_155
.LBB263_155:                            # %if.end589
	movl	listXsize, %eax
	cmpl	listXsize+4, %eax
	jne	.LBB263_166
# %bb.156:                              # %land.lhs.true592
	cmpl	$1, listXsize
	jle	.LBB263_166
# %bb.157:                              # %if.then595
	movl	$0, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB263_158:                            # %for.cond596
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB263_163
# %bb.159:                              # %for.body599
                                        #   in Loop: Header=BB263_158 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movslq	-12(%rbp), %rdx
	cmpq	(%rcx,%rdx,8), %rax
	je	.LBB263_161
# %bb.160:                              # %if.then606
                                        #   in Loop: Header=BB263_158 Depth=1
	movl	$1, -72(%rbp)
.LBB263_161:                            # %if.end607
                                        #   in Loop: Header=BB263_158 Depth=1
	jmp	.LBB263_162
.LBB263_162:                            # %for.inc608
                                        #   in Loop: Header=BB263_158 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB263_158
.LBB263_163:                            # %for.end610
	cmpl	$0, -72(%rbp)
	jne	.LBB263_165
# %bb.164:                              # %if.then612
	movq	listX+8, %rax
	movq	(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	listX+8, %rax
	movq	8(%rax), %rax
	movq	listX+8, %rcx
	movq	%rax, (%rcx)
	movq	-88(%rbp), %rax
	movq	listX+8, %rcx
	movq	%rax, 8(%rcx)
.LBB263_165:                            # %if.end617
	jmp	.LBB263_166
.LBB263_166:                            # %if.end618
	movl	listXsize, %eax
	movq	img, %rcx
	cmpl	72000(%rcx), %eax
	jge	.LBB263_168
# %bb.167:                              # %cond.true
	movl	listXsize, %eax
	jmp	.LBB263_169
.LBB263_168:                            # %cond.false
	movq	img, %rax
	movl	72000(%rax), %eax
.LBB263_169:                            # %cond.end
	movl	%eax, listXsize
	movl	listXsize+4, %eax
	movq	img, %rcx
	cmpl	72004(%rcx), %eax
	jge	.LBB263_171
# %bb.170:                              # %cond.true624
	movl	listXsize+4, %eax
	jmp	.LBB263_172
.LBB263_171:                            # %cond.false625
	movq	img, %rax
	movl	72004(%rax), %eax
.LBB263_172:                            # %cond.end627
	movl	%eax, listXsize+4
	movl	listXsize, %eax
	movl	%eax, -4(%rbp)
.LBB263_173:                            # %for.cond629
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$33, -4(%rbp)
	jae	.LBB263_176
# %bb.174:                              # %for.body632
                                        #   in Loop: Header=BB263_173 Depth=1
	movq	listX, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.175:                              # %for.inc635
                                        #   in Loop: Header=BB263_173 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB263_173
.LBB263_176:                            # %for.end637
	movl	listXsize+4, %eax
	movl	%eax, -4(%rbp)
.LBB263_177:                            # %for.cond638
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$33, -4(%rbp)
	jae	.LBB263_180
# %bb.178:                              # %for.body641
                                        #   in Loop: Header=BB263_177 Depth=1
	movq	listX+8, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.179:                              # %for.inc644
                                        #   in Loop: Header=BB263_177 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB263_177
.LBB263_180:                            # %for.end646.loopexit
	jmp	.LBB263_181
.LBB263_181:                            # %for.end646
	cmpl	$333626289, -76(%rbp)   # imm = 0x13E2BBB1
	jne	.LBB263_183
.LBB263_182:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB263_183:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB263_182
.Lfunc_end263:
	.size	init_lists.200, .Lfunc_end263-init_lists.200
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_short_term_pic.201
	.type	get_short_term_pic.201,@function
get_short_term_pic.201:                 # @get_short_term_pic.201
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$131969009, -28(%rbp)   # imm = 0x7DDAFF1
	movl	%edi, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB264_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB264_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB264_1 Depth=1
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB264_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB264_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB264_8
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB264_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB264_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB264_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB264_7
# %bb.6:                                # %if.then10
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB264_23
.LBB264_7:                              # %if.end
                                        #   in Loop: Header=BB264_1 Depth=1
	jmp	.LBB264_8
.LBB264_8:                              # %if.end14
                                        #   in Loop: Header=BB264_1 Depth=1
	jmp	.LBB264_20
.LBB264_9:                              # %if.else
                                        #   in Loop: Header=BB264_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB264_14
# %bb.10:                               # %if.then19
                                        #   in Loop: Header=BB264_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB264_13
# %bb.11:                               # %land.lhs.true24
                                        #   in Loop: Header=BB264_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB264_13
# %bb.12:                               # %if.then30
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB264_23
.LBB264_13:                             # %if.end34
                                        #   in Loop: Header=BB264_1 Depth=1
	jmp	.LBB264_14
.LBB264_14:                             # %if.end35
                                        #   in Loop: Header=BB264_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB264_19
# %bb.15:                               # %if.then41
                                        #   in Loop: Header=BB264_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB264_18
# %bb.16:                               # %land.lhs.true46
                                        #   in Loop: Header=BB264_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB264_18
# %bb.17:                               # %if.then52
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB264_23
.LBB264_18:                             # %if.end56
                                        #   in Loop: Header=BB264_1 Depth=1
	jmp	.LBB264_19
.LBB264_19:                             # %if.end57
                                        #   in Loop: Header=BB264_1 Depth=1
	jmp	.LBB264_20
.LBB264_20:                             # %if.end58
                                        #   in Loop: Header=BB264_1 Depth=1
	jmp	.LBB264_21
.LBB264_21:                             # %for.inc
                                        #   in Loop: Header=BB264_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB264_1
.LBB264_22:                             # %for.end
	movq	$0, -24(%rbp)
.LBB264_23:                             # %return
	movq	-24(%rbp), %rbx
	cmpl	$131969009, -28(%rbp)   # imm = 0x7DDAFF1
	jne	.LBB264_25
.LBB264_24:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB264_25:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB264_24
.Lfunc_end264:
	.size	get_short_term_pic.201, .Lfunc_end264-get_short_term_pic.201
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function reorder_long_term.202
	.type	reorder_long_term.202,@function
reorder_long_term.202:                  # @reorder_long_term.202
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1239692581, -44(%rbp)  # imm = 0x49E43525
	movq	%rdi, -16(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -40(%rbp)
	movl	-24(%rbp), %edi
	callq	get_long_term_pic
	movq	%rax, -56(%rbp)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB265_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-40(%rbp), %rcx
	cmpl	(%rcx), %eax
	jle	.LBB265_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB265_1 Depth=1
	movq	-16(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB265_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB265_1
.LBB265_4:                              # %for.end
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movl	(%rdx), %esi
	movl	%esi, %edi
	addl	$1, %edi
	movl	%edi, (%rdx)
	movslq	%esi, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB265_5:                              # %for.cond5
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jg	.LBB265_11
# %bb.6:                                # %for.body8
                                        #   in Loop: Header=BB265_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB265_8
# %bb.7:                                # %lor.lhs.false
                                        #   in Loop: Header=BB265_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6368(%rax), %eax
	cmpl	-24(%rbp), %eax
	je	.LBB265_9
.LBB265_8:                              # %if.then
                                        #   in Loop: Header=BB265_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movl	-20(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -20(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB265_9:                              # %if.end
                                        #   in Loop: Header=BB265_5 Depth=1
	jmp	.LBB265_10
.LBB265_10:                             # %for.inc19
                                        #   in Loop: Header=BB265_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB265_5
.LBB265_11:                             # %for.end21
	cmpl	$1239692581, -44(%rbp)  # imm = 0x49E43525
	jne	.LBB265_13
.LBB265_12:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB265_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB265_12
.Lfunc_end265:
	.size	reorder_long_term.202, .Lfunc_end265-reorder_long_term.202
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function reorder_short_term.203
	.type	reorder_short_term.203,@function
reorder_short_term.203:                 # @reorder_short_term.203
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$3748565, -44(%rbp)     # imm = 0x3932D5
	movq	%rdi, -16(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -40(%rbp)
	movl	-24(%rbp), %edi
	callq	get_short_term_pic
	movq	%rax, -56(%rbp)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB266_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-40(%rbp), %rcx
	cmpl	(%rcx), %eax
	jle	.LBB266_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB266_1 Depth=1
	movq	-16(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB266_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB266_1
.LBB266_4:                              # %for.end
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movl	(%rdx), %esi
	movl	%esi, %edi
	addl	$1, %edi
	movl	%edi, (%rdx)
	movslq	%esi, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB266_5:                              # %for.cond5
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jg	.LBB266_13
# %bb.6:                                # %for.body8
                                        #   in Loop: Header=BB266_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	je	.LBB266_11
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB266_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB266_9
# %bb.8:                                # %lor.lhs.false
                                        #   in Loop: Header=BB266_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6364(%rax), %eax
	cmpl	-24(%rbp), %eax
	je	.LBB266_10
.LBB266_9:                              # %if.then17
                                        #   in Loop: Header=BB266_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movl	-20(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -20(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB266_10:                             # %if.end
                                        #   in Loop: Header=BB266_5 Depth=1
	jmp	.LBB266_11
.LBB266_11:                             # %if.end23
                                        #   in Loop: Header=BB266_5 Depth=1
	jmp	.LBB266_12
.LBB266_12:                             # %for.inc24
                                        #   in Loop: Header=BB266_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB266_5
.LBB266_13:                             # %for.end26
	cmpl	$3748565, -44(%rbp)     # imm = 0x3932D5
	jne	.LBB266_15
.LBB266_14:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB266_15:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB266_14
.Lfunc_end266:
	.size	reorder_short_term.203, .Lfunc_end266-reorder_short_term.203
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_assign_long_term_frame_idx.204
	.type	mm_assign_long_term_frame_idx.204,@function
mm_assign_long_term_frame_idx.204:      # @mm_assign_long_term_frame_idx.204
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1328194424, -32(%rbp)  # imm = 0x4F2AA378
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -16(%rbp)
	movq	-24(%rbp), %rdi
	movl	-28(%rbp), %esi
	callq	get_pic_num_x
	movl	%eax, -12(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB267_2
# %bb.1:                                # %if.then
	movl	-16(%rbp), %edi
	callq	unmark_long_term_frame_for_reference_by_frame_idx
	jmp	.LBB267_18
.LBB267_2:                              # %if.else
	movl	$0, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB267_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB267_14
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB267_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB267_8
# %bb.5:                                # %if.then3
                                        #   in Loop: Header=BB267_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB267_7
# %bb.6:                                # %if.then7
	movl	$1, -8(%rbp)
	jmp	.LBB267_15
.LBB267_7:                              # %if.end
                                        #   in Loop: Header=BB267_3 Depth=1
	jmp	.LBB267_8
.LBB267_8:                              # %if.end8
                                        #   in Loop: Header=BB267_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB267_12
# %bb.9:                                # %if.then14
                                        #   in Loop: Header=BB267_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB267_11
# %bb.10:                               # %if.then19
	movl	$2, -8(%rbp)
	jmp	.LBB267_15
.LBB267_11:                             # %if.end20
                                        #   in Loop: Header=BB267_3 Depth=1
	jmp	.LBB267_12
.LBB267_12:                             # %if.end21
                                        #   in Loop: Header=BB267_3 Depth=1
	jmp	.LBB267_13
.LBB267_13:                             # %for.inc
                                        #   in Loop: Header=BB267_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB267_3
.LBB267_14:                             # %for.end.loopexit
	jmp	.LBB267_15
.LBB267_15:                             # %for.end
	cmpl	$0, -8(%rbp)
	jne	.LBB267_17
# %bb.16:                               # %if.then23
	movabsq	$.L.str.24, %rdi
	movl	$200, %esi
	callq	error
.LBB267_17:                             # %if.end24
	movl	-8(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %r8d
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	callq	unmark_long_term_field_for_reference_by_frame_idx
.LBB267_18:                             # %if.end25
	movq	-24(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	callq	mark_pic_long_term
	cmpl	$1328194424, -32(%rbp)  # imm = 0x4F2AA378
	jne	.LBB267_20
.LBB267_19:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB267_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB267_19
.Lfunc_end267:
	.size	mm_assign_long_term_frame_idx.204, .Lfunc_end267-mm_assign_long_term_frame_idx.204
	.cfi_endproc
                                        # -- End function
	.globl	compute_colocated.205   # -- Begin function compute_colocated.205
	.p2align	4, 0x90
	.type	compute_colocated.205,@function
compute_colocated.205:                  # @compute_colocated.205
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$2025605879, -72(%rbp)  # imm = 0x78BC4AF7
	movq	%rdi, -24(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -56(%rbp)
	movq	%rax, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB268_2
# %bb.1:                                # %if.then
	movq	-48(%rbp), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-48(%rbp), %rax
	movq	40(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	jmp	.LBB268_11
.LBB268_2:                              # %if.else
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB268_10
# %bb.3:                                # %if.then6
	movq	img, %rax
	movl	28(%rax), %eax
	movq	-32(%rbp), %rcx
	cmpl	(%rcx), %eax
	je	.LBB268_9
# %bb.4:                                # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$0, 6412(%rax)
	je	.LBB268_9
# %bb.5:                                # %if.then11
	movq	img, %rax
	cmpl	$1, 28(%rax)
	jne	.LBB268_7
# %bb.6:                                # %if.then14
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	6528(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -56(%rbp)
	movq	%rax, -40(%rbp)
	jmp	.LBB268_8
.LBB268_7:                              # %if.else17
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	6536(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -56(%rbp)
	movq	%rax, -40(%rbp)
.LBB268_8:                              # %if.end
	jmp	.LBB268_9
.LBB268_9:                              # %if.end20
	jmp	.LBB268_10
.LBB268_10:                             # %if.end21
	jmp	.LBB268_11
.LBB268_11:                             # %if.end22
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB268_13
# %bb.12:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB268_29
.LBB268_13:                             # %if.then25
	movl	$0, -12(%rbp)
.LBB268_14:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB268_16 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB268_28
# %bb.15:                               # %for.body
                                        #   in Loop: Header=BB268_14 Depth=1
	movl	$0, -16(%rbp)
.LBB268_16:                             # %for.cond27
                                        #   Parent Loop BB268_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB268_26
# %bb.17:                               # %for.body30
                                        #   in Loop: Header=BB268_16 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB268_23
# %bb.18:                               # %land.lhs.true33
                                        #   in Loop: Header=BB268_16 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB268_23
# %bb.19:                               # %if.then38
                                        #   in Loop: Header=BB268_16 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-56(%rbp), %rax
	subl	4(%rax), %edi
	callq	abs
	movl	%eax, %ebx
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-40(%rbp), %rax
	subl	4(%rax), %edi
	callq	abs
	cmpl	%eax, %ebx
	jle	.LBB268_21
# %bb.20:                               # %if.then46
                                        #   in Loop: Header=BB268_16 Depth=2
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	jmp	.LBB268_22
.LBB268_21:                             # %if.else160
                                        #   in Loop: Header=BB268_16 Depth=2
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-56(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB268_22:                             # %if.end283
                                        #   in Loop: Header=BB268_16 Depth=2
	jmp	.LBB268_24
.LBB268_23:                             # %if.else284
                                        #   in Loop: Header=BB268_16 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB268_24:                             # %if.end391
                                        #   in Loop: Header=BB268_16 Depth=2
	jmp	.LBB268_25
.LBB268_25:                             # %for.inc
                                        #   in Loop: Header=BB268_16 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB268_16
.LBB268_26:                             # %for.end
                                        #   in Loop: Header=BB268_14 Depth=1
	jmp	.LBB268_27
.LBB268_27:                             # %for.inc392
                                        #   in Loop: Header=BB268_14 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB268_14
.LBB268_28:                             # %for.end394
	jmp	.LBB268_29
.LBB268_29:                             # %if.end395
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB268_31
# %bb.30:                               # %lor.lhs.false398
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB268_241
.LBB268_31:                             # %if.then401
	movl	$0, -16(%rbp)
.LBB268_32:                             # %for.cond402
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB268_34 Depth 2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB268_240
# %bb.33:                               # %for.body407
                                        #   in Loop: Header=BB268_32 Depth=1
	movl	$0, -12(%rbp)
.LBB268_34:                             # %for.cond408
                                        #   Parent Loop BB268_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB268_238
# %bb.35:                               # %for.body413
                                        #   in Loop: Header=BB268_34 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB268_114
# %bb.36:                               # %if.then416
                                        #   in Loop: Header=BB268_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_38
# %bb.37:                               # %cond.true
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_39
.LBB268_38:                             # %cond.false
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_39:                             # %cond.end
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_41
# %bb.40:                               # %cond.true425
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_42
.LBB268_41:                             # %cond.false427
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_42:                             # %cond.end429
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_44
# %bb.43:                               # %cond.true445
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_45
.LBB268_44:                             # %cond.false447
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_45:                             # %cond.end449
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_47
# %bb.46:                               # %cond.true455
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_48
.LBB268_47:                             # %cond.false457
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_48:                             # %cond.end459
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_50
# %bb.49:                               # %cond.true475
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_51
.LBB268_50:                             # %cond.false477
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_51:                             # %cond.end479
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_53
# %bb.52:                               # %cond.true485
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_54
.LBB268_53:                             # %cond.false487
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_54:                             # %cond.end489
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_56
# %bb.55:                               # %cond.true505
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_57
.LBB268_56:                             # %cond.false507
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_57:                             # %cond.end509
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_59
# %bb.58:                               # %cond.true515
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_60
.LBB268_59:                             # %cond.false517
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_60:                             # %cond.end519
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_62
# %bb.61:                               # %cond.true535
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_63
.LBB268_62:                             # %cond.false537
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_63:                             # %cond.end539
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_65
# %bb.64:                               # %cond.true545
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_66
.LBB268_65:                             # %cond.false547
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_66:                             # %cond.end549
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB268_68
# %bb.67:                               # %if.then556
                                        #   in Loop: Header=BB268_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	$-1, (%rax,%rcx,8)
	jmp	.LBB268_81
.LBB268_68:                             # %if.else569
                                        #   in Loop: Header=BB268_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_70
# %bb.69:                               # %cond.true574
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_71
.LBB268_70:                             # %cond.false576
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_71:                             # %cond.end578
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_73
# %bb.72:                               # %cond.true584
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_74
.LBB268_73:                             # %cond.false586
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_74:                             # %cond.end588
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_76
# %bb.75:                               # %cond.true602
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_77
.LBB268_76:                             # %cond.false604
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_77:                             # %cond.end606
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_79
# %bb.78:                               # %cond.true612
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_80
.LBB268_79:                             # %cond.false614
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_80:                             # %cond.end616
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB268_81:                             # %if.end626
                                        #   in Loop: Header=BB268_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_83
# %bb.82:                               # %cond.true631
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_84
.LBB268_83:                             # %cond.false633
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_84:                             # %cond.end635
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_86
# %bb.85:                               # %cond.true641
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_87
.LBB268_86:                             # %cond.false643
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_87:                             # %cond.end645
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB268_89
# %bb.88:                               # %if.then652
                                        #   in Loop: Header=BB268_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	$-1, (%rax,%rcx,8)
	jmp	.LBB268_102
.LBB268_89:                             # %if.else665
                                        #   in Loop: Header=BB268_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_91
# %bb.90:                               # %cond.true670
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_92
.LBB268_91:                             # %cond.false672
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_92:                             # %cond.end674
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_94
# %bb.93:                               # %cond.true680
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_95
.LBB268_94:                             # %cond.false682
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_95:                             # %cond.end684
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_97
# %bb.96:                               # %cond.true698
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_98
.LBB268_97:                             # %cond.false700
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_98:                             # %cond.end702
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_100
# %bb.99:                               # %cond.true708
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_101
.LBB268_100:                            # %cond.false710
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_101:                            # %cond.end712
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB268_102:                            # %if.end722
                                        #   in Loop: Header=BB268_34 Depth=2
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB268_113
# %bb.103:                              # %if.then727
                                        #   in Loop: Header=BB268_34 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 4864(%rax)
	jne	.LBB268_107
# %bb.104:                              # %land.lhs.true730
                                        #   in Loop: Header=BB268_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB268_107
# %bb.105:                              # %land.lhs.true740
                                        #   in Loop: Header=BB268_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB268_107
# %bb.106:                              # %land.lhs.true752
                                        #   in Loop: Header=BB268_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB268_112
.LBB268_107:                            # %lor.rhs
                                        #   in Loop: Header=BB268_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB268_111
# %bb.108:                              # %land.lhs.true774
                                        #   in Loop: Header=BB268_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB268_111
# %bb.109:                              # %land.lhs.true784
                                        #   in Loop: Header=BB268_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB268_111
# %bb.110:                              # %land.rhs
                                        #   in Loop: Header=BB268_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB268_111:                            # %land.end
                                        #   in Loop: Header=BB268_34 Depth=2
.LBB268_112:                            # %lor.end
                                        #   in Loop: Header=BB268_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	1624(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB268_113:                            # %if.end814
                                        #   in Loop: Header=BB268_34 Depth=2
	jmp	.LBB268_236
.LBB268_114:                            # %if.else815
                                        #   in Loop: Header=BB268_34 Depth=2
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_116
# %bb.115:                              # %cond.true820
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_117
.LBB268_116:                            # %cond.false822
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_117:                            # %cond.end824
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_119
# %bb.118:                              # %cond.true830
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_120
.LBB268_119:                            # %cond.false832
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_120:                            # %cond.end834
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_122
# %bb.121:                              # %cond.true849
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_123
.LBB268_122:                            # %cond.false851
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_123:                            # %cond.end853
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_125
# %bb.124:                              # %cond.true859
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_126
.LBB268_125:                            # %cond.false861
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_126:                            # %cond.end863
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_128
# %bb.127:                              # %cond.true879
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_129
.LBB268_128:                            # %cond.false881
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_129:                            # %cond.end883
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_131
# %bb.130:                              # %cond.true889
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_132
.LBB268_131:                            # %cond.false891
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_132:                            # %cond.end893
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_134
# %bb.133:                              # %cond.true909
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_135
.LBB268_134:                            # %cond.false911
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_135:                            # %cond.end913
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_137
# %bb.136:                              # %cond.true919
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_138
.LBB268_137:                            # %cond.false921
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_138:                            # %cond.end923
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_140
# %bb.139:                              # %cond.true939
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_141
.LBB268_140:                            # %cond.false941
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_141:                            # %cond.end943
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_143
# %bb.142:                              # %cond.true949
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_144
.LBB268_143:                            # %cond.false951
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_144:                            # %cond.end953
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	4832(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_146
# %bb.145:                              # %cond.true966
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_147
.LBB268_146:                            # %cond.false968
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_147:                            # %cond.end970
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_149
# %bb.148:                              # %cond.true976
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_150
.LBB268_149:                            # %cond.false978
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_150:                            # %cond.end980
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	4832(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-56(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_152
# %bb.151:                              # %cond.true994
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_153
.LBB268_152:                            # %cond.false996
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_153:                            # %cond.end998
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_155
# %bb.154:                              # %cond.true1004
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_156
.LBB268_155:                            # %cond.false1006
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_156:                            # %cond.end1008
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	4840(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-56(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_158
# %bb.157:                              # %cond.true1021
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_159
.LBB268_158:                            # %cond.false1023
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_159:                            # %cond.end1025
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_161
# %bb.160:                              # %cond.true1031
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_162
.LBB268_161:                            # %cond.false1033
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_162:                            # %cond.end1035
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	4840(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB268_173
# %bb.163:                              # %if.then1048
                                        #   in Loop: Header=BB268_34 Depth=2
	movq	-56(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB268_167
# %bb.164:                              # %land.lhs.true1051
                                        #   in Loop: Header=BB268_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB268_167
# %bb.165:                              # %land.lhs.true1061
                                        #   in Loop: Header=BB268_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB268_167
# %bb.166:                              # %land.lhs.true1074
                                        #   in Loop: Header=BB268_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB268_172
.LBB268_167:                            # %lor.rhs1087
                                        #   in Loop: Header=BB268_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB268_171
# %bb.168:                              # %land.lhs.true1097
                                        #   in Loop: Header=BB268_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB268_171
# %bb.169:                              # %land.lhs.true1107
                                        #   in Loop: Header=BB268_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB268_171
# %bb.170:                              # %land.rhs1120
                                        #   in Loop: Header=BB268_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB268_171:                            # %land.end1133
                                        #   in Loop: Header=BB268_34 Depth=2
.LBB268_172:                            # %lor.end1134
                                        #   in Loop: Header=BB268_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	4856(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB268_173:                            # %if.end1142
                                        #   in Loop: Header=BB268_34 Depth=2
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_175
# %bb.174:                              # %cond.true1147
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_176
.LBB268_175:                            # %cond.false1149
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_176:                            # %cond.end1151
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_178
# %bb.177:                              # %cond.true1157
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_179
.LBB268_178:                            # %cond.false1159
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_179:                            # %cond.end1161
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_181
# %bb.180:                              # %cond.true1176
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_182
.LBB268_181:                            # %cond.false1178
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_182:                            # %cond.end1180
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_184
# %bb.183:                              # %cond.true1186
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_185
.LBB268_184:                            # %cond.false1188
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_185:                            # %cond.end1190
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_187
# %bb.186:                              # %cond.true1206
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_188
.LBB268_187:                            # %cond.false1208
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_188:                            # %cond.end1210
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_190
# %bb.189:                              # %cond.true1216
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_191
.LBB268_190:                            # %cond.false1218
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_191:                            # %cond.end1220
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_193
# %bb.192:                              # %cond.true1236
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_194
.LBB268_193:                            # %cond.false1238
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_194:                            # %cond.end1240
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_196
# %bb.195:                              # %cond.true1246
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_197
.LBB268_196:                            # %cond.false1248
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_197:                            # %cond.end1250
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_199
# %bb.198:                              # %cond.true1266
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_200
.LBB268_199:                            # %cond.false1268
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_200:                            # %cond.end1270
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_202
# %bb.201:                              # %cond.true1276
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_203
.LBB268_202:                            # %cond.false1278
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_203:                            # %cond.end1280
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	3216(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_205
# %bb.204:                              # %cond.true1293
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_206
.LBB268_205:                            # %cond.false1295
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_206:                            # %cond.end1297
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_208
# %bb.207:                              # %cond.true1303
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_209
.LBB268_208:                            # %cond.false1305
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_209:                            # %cond.end1307
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	3216(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-40(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_211
# %bb.210:                              # %cond.true1321
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_212
.LBB268_211:                            # %cond.false1323
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_212:                            # %cond.end1325
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_214
# %bb.213:                              # %cond.true1331
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_215
.LBB268_214:                            # %cond.false1333
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_215:                            # %cond.end1335
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	3224(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_217
# %bb.216:                              # %cond.true1348
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_218
.LBB268_217:                            # %cond.false1350
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_218:                            # %cond.end1352
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_220
# %bb.219:                              # %cond.true1358
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_221
.LBB268_220:                            # %cond.false1360
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_221:                            # %cond.end1362
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	3224(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB268_232
# %bb.222:                              # %if.then1375
                                        #   in Loop: Header=BB268_34 Depth=2
	movq	-40(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB268_226
# %bb.223:                              # %land.lhs.true1378
                                        #   in Loop: Header=BB268_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB268_226
# %bb.224:                              # %land.lhs.true1388
                                        #   in Loop: Header=BB268_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB268_226
# %bb.225:                              # %land.lhs.true1401
                                        #   in Loop: Header=BB268_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB268_231
.LBB268_226:                            # %lor.rhs1414
                                        #   in Loop: Header=BB268_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB268_230
# %bb.227:                              # %land.lhs.true1424
                                        #   in Loop: Header=BB268_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB268_230
# %bb.228:                              # %land.lhs.true1434
                                        #   in Loop: Header=BB268_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB268_230
# %bb.229:                              # %land.rhs1447
                                        #   in Loop: Header=BB268_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB268_230:                            # %land.end1460
                                        #   in Loop: Header=BB268_34 Depth=2
.LBB268_231:                            # %lor.end1461
                                        #   in Loop: Header=BB268_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	3240(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB268_232:                            # %if.end1469
                                        #   in Loop: Header=BB268_34 Depth=2
	movq	img, %rax
	cmpl	$0, 71996(%rax)
	jne	.LBB268_235
# %bb.233:                              # %land.lhs.true1473
                                        #   in Loop: Header=BB268_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB268_235
# %bb.234:                              # %if.then1481
                                        #   in Loop: Header=BB268_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
.LBB268_235:                            # %if.end1522
                                        #   in Loop: Header=BB268_34 Depth=2
	jmp	.LBB268_236
.LBB268_236:                            # %if.end1523
                                        #   in Loop: Header=BB268_34 Depth=2
	jmp	.LBB268_237
.LBB268_237:                            # %for.inc1524
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB268_34
.LBB268_238:                            # %for.end1526
                                        #   in Loop: Header=BB268_32 Depth=1
	jmp	.LBB268_239
.LBB268_239:                            # %for.inc1527
                                        #   in Loop: Header=BB268_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB268_32
.LBB268_240:                            # %for.end1529
	jmp	.LBB268_241
.LBB268_241:                            # %if.end1530
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB268_243
# %bb.242:                              # %lor.lhs.false1533
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB268_259
.LBB268_243:                            # %if.then1536
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB268_258
# %bb.244:                              # %if.then1539
	movl	$0, -12(%rbp)
.LBB268_245:                            # %for.cond1540
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB268_247 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB268_257
# %bb.246:                              # %for.body1545
                                        #   in Loop: Header=BB268_245 Depth=1
	movl	$0, -16(%rbp)
.LBB268_247:                            # %for.cond1546
                                        #   Parent Loop BB268_245 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB268_255
# %bb.248:                              # %for.body1551
                                        #   in Loop: Header=BB268_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB268_253
# %bb.249:                              # %if.then1558
                                        #   in Loop: Header=BB268_247 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	subl	4(%rax), %edi
	callq	abs
	movl	%eax, %ebx
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	subl	4(%rax), %edi
	callq	abs
	cmpl	%eax, %ebx
	jle	.LBB268_251
# %bb.250:                              # %if.then1571
                                        #   in Loop: Header=BB268_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	jmp	.LBB268_252
.LBB268_251:                            # %if.else1699
                                        #   in Loop: Header=BB268_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB268_252:                            # %if.end1829
                                        #   in Loop: Header=BB268_247 Depth=2
	jmp	.LBB268_253
.LBB268_253:                            # %if.end1830
                                        #   in Loop: Header=BB268_247 Depth=2
	jmp	.LBB268_254
.LBB268_254:                            # %for.inc1831
                                        #   in Loop: Header=BB268_247 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB268_247
.LBB268_255:                            # %for.end1833
                                        #   in Loop: Header=BB268_245 Depth=1
	jmp	.LBB268_256
.LBB268_256:                            # %for.inc1834
                                        #   in Loop: Header=BB268_245 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB268_245
.LBB268_257:                            # %for.end1836
	jmp	.LBB268_258
.LBB268_258:                            # %if.end1837
	jmp	.LBB268_259
.LBB268_259:                            # %if.end1838
	movl	$0, -12(%rbp)
.LBB268_260:                            # %for.cond1839
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB268_262 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB268_330
# %bb.261:                              # %for.body1844
                                        #   in Loop: Header=BB268_260 Depth=1
	movl	$0, -16(%rbp)
.LBB268_262:                            # %for.cond1845
                                        #   Parent Loop BB268_260 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB268_328
# %bb.263:                              # %for.body1850
                                        #   in Loop: Header=BB268_262 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB268_265
# %bb.264:                              # %lor.lhs.false1853
                                        #   in Loop: Header=BB268_262 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB268_314
.LBB268_265:                            # %if.then1856
                                        #   in Loop: Header=BB268_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_267
# %bb.266:                              # %cond.true1861
                                        #   in Loop: Header=BB268_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_268
.LBB268_267:                            # %cond.false1863
                                        #   in Loop: Header=BB268_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_268:                            # %cond.end1865
                                        #   in Loop: Header=BB268_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_270
# %bb.269:                              # %cond.true1871
                                        #   in Loop: Header=BB268_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_271
.LBB268_270:                            # %cond.false1873
                                        #   in Loop: Header=BB268_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_271:                            # %cond.end1875
                                        #   in Loop: Header=BB268_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_273
# %bb.272:                              # %cond.true1891
                                        #   in Loop: Header=BB268_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_274
.LBB268_273:                            # %cond.false1893
                                        #   in Loop: Header=BB268_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_274:                            # %cond.end1895
                                        #   in Loop: Header=BB268_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_276
# %bb.275:                              # %cond.true1901
                                        #   in Loop: Header=BB268_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_277
.LBB268_276:                            # %cond.false1903
                                        #   in Loop: Header=BB268_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_277:                            # %cond.end1905
                                        #   in Loop: Header=BB268_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_279
# %bb.278:                              # %cond.true1921
                                        #   in Loop: Header=BB268_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_280
.LBB268_279:                            # %cond.false1923
                                        #   in Loop: Header=BB268_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_280:                            # %cond.end1925
                                        #   in Loop: Header=BB268_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_282
# %bb.281:                              # %cond.true1931
                                        #   in Loop: Header=BB268_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_283
.LBB268_282:                            # %cond.false1933
                                        #   in Loop: Header=BB268_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_283:                            # %cond.end1935
                                        #   in Loop: Header=BB268_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_285
# %bb.284:                              # %cond.true1951
                                        #   in Loop: Header=BB268_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_286
.LBB268_285:                            # %cond.false1953
                                        #   in Loop: Header=BB268_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_286:                            # %cond.end1955
                                        #   in Loop: Header=BB268_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_288
# %bb.287:                              # %cond.true1961
                                        #   in Loop: Header=BB268_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_289
.LBB268_288:                            # %cond.false1963
                                        #   in Loop: Header=BB268_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_289:                            # %cond.end1965
                                        #   in Loop: Header=BB268_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_291
# %bb.290:                              # %cond.true1981
                                        #   in Loop: Header=BB268_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_292
.LBB268_291:                            # %cond.false1983
                                        #   in Loop: Header=BB268_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_292:                            # %cond.end1985
                                        #   in Loop: Header=BB268_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_294
# %bb.293:                              # %cond.true1991
                                        #   in Loop: Header=BB268_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_295
.LBB268_294:                            # %cond.false1993
                                        #   in Loop: Header=BB268_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_295:                            # %cond.end1995
                                        #   in Loop: Header=BB268_262 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_297
# %bb.296:                              # %cond.true2009
                                        #   in Loop: Header=BB268_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_298
.LBB268_297:                            # %cond.false2011
                                        #   in Loop: Header=BB268_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_298:                            # %cond.end2013
                                        #   in Loop: Header=BB268_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_300
# %bb.299:                              # %cond.true2019
                                        #   in Loop: Header=BB268_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_301
.LBB268_300:                            # %cond.false2021
                                        #   in Loop: Header=BB268_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_301:                            # %cond.end2023
                                        #   in Loop: Header=BB268_262 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_303
# %bb.302:                              # %cond.true2037
                                        #   in Loop: Header=BB268_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_304
.LBB268_303:                            # %cond.false2039
                                        #   in Loop: Header=BB268_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_304:                            # %cond.end2041
                                        #   in Loop: Header=BB268_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_306
# %bb.305:                              # %cond.true2047
                                        #   in Loop: Header=BB268_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_307
.LBB268_306:                            # %cond.false2049
                                        #   in Loop: Header=BB268_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_307:                            # %cond.end2051
                                        #   in Loop: Header=BB268_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_309
# %bb.308:                              # %cond.true2065
                                        #   in Loop: Header=BB268_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_310
.LBB268_309:                            # %cond.false2067
                                        #   in Loop: Header=BB268_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_310:                            # %cond.end2069
                                        #   in Loop: Header=BB268_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_312
# %bb.311:                              # %cond.true2075
                                        #   in Loop: Header=BB268_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_313
.LBB268_312:                            # %cond.false2077
                                        #   in Loop: Header=BB268_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_313:                            # %cond.end2079
                                        #   in Loop: Header=BB268_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB268_315
.LBB268_314:                            # %if.else2089
                                        #   in Loop: Header=BB268_262 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB268_315:                            # %if.end2194
                                        #   in Loop: Header=BB268_262 Depth=2
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB268_326
# %bb.316:                              # %if.then2200
                                        #   in Loop: Header=BB268_262 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 4864(%rax)
	jne	.LBB268_320
# %bb.317:                              # %land.lhs.true2203
                                        #   in Loop: Header=BB268_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB268_320
# %bb.318:                              # %land.lhs.true2213
                                        #   in Loop: Header=BB268_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB268_320
# %bb.319:                              # %land.lhs.true2226
                                        #   in Loop: Header=BB268_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB268_325
.LBB268_320:                            # %lor.rhs2239
                                        #   in Loop: Header=BB268_262 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB268_324
# %bb.321:                              # %land.lhs.true2249
                                        #   in Loop: Header=BB268_262 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB268_324
# %bb.322:                              # %land.lhs.true2259
                                        #   in Loop: Header=BB268_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB268_324
# %bb.323:                              # %land.rhs2272
                                        #   in Loop: Header=BB268_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB268_324:                            # %land.end2285
                                        #   in Loop: Header=BB268_262 Depth=2
.LBB268_325:                            # %lor.end2286
                                        #   in Loop: Header=BB268_262 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	1624(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB268_326:                            # %if.end2295
                                        #   in Loop: Header=BB268_262 Depth=2
	jmp	.LBB268_327
.LBB268_327:                            # %for.inc2296
                                        #   in Loop: Header=BB268_262 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB268_262
.LBB268_328:                            # %for.end2298
                                        #   in Loop: Header=BB268_260 Depth=1
	jmp	.LBB268_329
.LBB268_329:                            # %for.inc2299
                                        #   in Loop: Header=BB268_260 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB268_260
.LBB268_330:                            # %for.end2301
	movq	img, %rax
	cmpl	$0, 71996(%rax)
	jne	.LBB268_397
# %bb.331:                              # %if.then2305
	movl	$0, -12(%rbp)
.LBB268_332:                            # %for.cond2306
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB268_334 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB268_349
# %bb.333:                              # %for.body2311
                                        #   in Loop: Header=BB268_332 Depth=1
	movl	$0, -16(%rbp)
.LBB268_334:                            # %for.cond2312
                                        #   Parent Loop BB268_332 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB268_347
# %bb.335:                              # %for.body2317
                                        #   in Loop: Header=BB268_334 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB268_338
# %bb.336:                              # %land.lhs.true2320
                                        #   in Loop: Header=BB268_334 Depth=2
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB268_338
# %bb.337:                              # %land.lhs.true2323
                                        #   in Loop: Header=BB268_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB268_340
.LBB268_338:                            # %lor.lhs.false2331
                                        #   in Loop: Header=BB268_334 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB268_341
# %bb.339:                              # %land.lhs.true2334
                                        #   in Loop: Header=BB268_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB268_341
.LBB268_340:                            # %if.then2342
                                        #   in Loop: Header=BB268_334 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %ecx
	shll	$1, %ecx
	movw	%cx, 2(%rax)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %ecx
	shll	$1, %ecx
	movw	%cx, 2(%rax)
	jmp	.LBB268_345
.LBB268_341:                            # %if.else2363
                                        #   in Loop: Header=BB268_334 Depth=2
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB268_344
# %bb.342:                              # %land.lhs.true2366
                                        #   in Loop: Header=BB268_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB268_344
# %bb.343:                              # %if.then2373
                                        #   in Loop: Header=BB268_334 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movswl	2(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movswl	2(%rcx), %eax
	cltd
	idivl	%esi
	movw	%ax, 2(%rcx)
.LBB268_344:                            # %if.end2394
                                        #   in Loop: Header=BB268_334 Depth=2
	jmp	.LBB268_345
.LBB268_345:                            # %if.end2395
                                        #   in Loop: Header=BB268_334 Depth=2
	jmp	.LBB268_346
.LBB268_346:                            # %for.inc2396
                                        #   in Loop: Header=BB268_334 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB268_334
.LBB268_347:                            # %for.end2398
                                        #   in Loop: Header=BB268_332 Depth=1
	jmp	.LBB268_348
.LBB268_348:                            # %for.inc2399
                                        #   in Loop: Header=BB268_332 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB268_332
.LBB268_349:                            # %for.end2401
	movl	$0, -12(%rbp)
.LBB268_350:                            # %for.cond2402
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB268_352 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	72400(%rcx), %ecx
	shll	$2, %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB268_396
# %bb.351:                              # %for.body2408
                                        #   in Loop: Header=BB268_350 Depth=1
	movl	$0, -16(%rbp)
.LBB268_352:                            # %for.cond2409
                                        #   Parent Loop BB268_350 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB268_394
# %bb.353:                              # %for.body2414
                                        #   in Loop: Header=BB268_352 Depth=2
	cmpl	$0, -12(%rbp)
	jne	.LBB268_361
# %bb.354:                              # %if.then2417
                                        #   in Loop: Header=BB268_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB268_356
# %bb.355:                              # %cond.true2428
                                        #   in Loop: Header=BB268_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB268_360
.LBB268_356:                            # %cond.false2429
                                        #   in Loop: Header=BB268_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB268_358
# %bb.357:                              # %cond.true2440
                                        #   in Loop: Header=BB268_352 Depth=2
	movl	$127, %eax
	jmp	.LBB268_359
.LBB268_358:                            # %cond.false2441
                                        #   in Loop: Header=BB268_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB268_359:                            # %cond.end2450
                                        #   in Loop: Header=BB268_352 Depth=2
.LBB268_360:                            # %cond.end2452
                                        #   in Loop: Header=BB268_352 Depth=2
	movl	%eax, -60(%rbp)
	jmp	.LBB268_377
.LBB268_361:                            # %if.else2454
                                        #   in Loop: Header=BB268_352 Depth=2
	cmpl	$2, -12(%rbp)
	jne	.LBB268_369
# %bb.362:                              # %if.then2457
                                        #   in Loop: Header=BB268_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB268_364
# %bb.363:                              # %cond.true2467
                                        #   in Loop: Header=BB268_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB268_368
.LBB268_364:                            # %cond.false2468
                                        #   in Loop: Header=BB268_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB268_366
# %bb.365:                              # %cond.true2479
                                        #   in Loop: Header=BB268_352 Depth=2
	movl	$127, %eax
	jmp	.LBB268_367
.LBB268_366:                            # %cond.false2480
                                        #   in Loop: Header=BB268_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB268_367:                            # %cond.end2489
                                        #   in Loop: Header=BB268_352 Depth=2
.LBB268_368:                            # %cond.end2491
                                        #   in Loop: Header=BB268_352 Depth=2
	movl	%eax, -60(%rbp)
	jmp	.LBB268_376
.LBB268_369:                            # %if.else2493
                                        #   in Loop: Header=BB268_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB268_371
# %bb.370:                              # %cond.true2503
                                        #   in Loop: Header=BB268_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB268_375
.LBB268_371:                            # %cond.false2504
                                        #   in Loop: Header=BB268_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB268_373
# %bb.372:                              # %cond.true2515
                                        #   in Loop: Header=BB268_352 Depth=2
	movl	$127, %eax
	jmp	.LBB268_374
.LBB268_373:                            # %cond.false2516
                                        #   in Loop: Header=BB268_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB268_374:                            # %cond.end2525
                                        #   in Loop: Header=BB268_352 Depth=2
.LBB268_375:                            # %cond.end2527
                                        #   in Loop: Header=BB268_352 Depth=2
	movl	%eax, -60(%rbp)
.LBB268_376:                            # %if.end2529
                                        #   in Loop: Header=BB268_352 Depth=2
	jmp	.LBB268_377
.LBB268_377:                            # %if.end2530
                                        #   in Loop: Header=BB268_352 Depth=2
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB268_379
# %bb.378:                              # %cond.true2545
                                        #   in Loop: Header=BB268_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB268_383
.LBB268_379:                            # %cond.false2546
                                        #   in Loop: Header=BB268_352 Depth=2
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB268_381
# %bb.380:                              # %cond.true2561
                                        #   in Loop: Header=BB268_352 Depth=2
	movl	$127, %eax
	jmp	.LBB268_382
.LBB268_381:                            # %cond.false2562
                                        #   in Loop: Header=BB268_352 Depth=2
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB268_382:                            # %cond.end2575
                                        #   in Loop: Header=BB268_352 Depth=2
.LBB268_383:                            # %cond.end2577
                                        #   in Loop: Header=BB268_352 Depth=2
	movl	%eax, -64(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB268_391
# %bb.384:                              # %if.then2581
                                        #   in Loop: Header=BB268_352 Depth=2
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-64(%rbp)
	movl	%eax, -68(%rbp)
	movl	-60(%rbp), %eax
	imull	-68(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB268_386
# %bb.385:                              # %cond.true2591
                                        #   in Loop: Header=BB268_352 Depth=2
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB268_390
.LBB268_386:                            # %cond.false2592
                                        #   in Loop: Header=BB268_352 Depth=2
	movl	-60(%rbp), %eax
	imull	-68(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB268_388
# %bb.387:                              # %cond.true2598
                                        #   in Loop: Header=BB268_352 Depth=2
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB268_389
.LBB268_388:                            # %cond.false2599
                                        #   in Loop: Header=BB268_352 Depth=2
	movl	-60(%rbp), %eax
	imull	-68(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB268_389:                            # %cond.end2603
                                        #   in Loop: Header=BB268_352 Depth=2
.LBB268_390:                            # %cond.end2605
                                        #   in Loop: Header=BB268_352 Depth=2
	movq	img, %rcx
	addq	$72016, %rcx            # imm = 0x11950
	movslq	-12(%rbp), %rdx
	imulq	$60, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB268_392
.LBB268_391:                            # %if.else2611
                                        #   in Loop: Header=BB268_352 Depth=2
	movq	img, %rax
	addq	$72016, %rax            # imm = 0x11950
	movslq	-12(%rbp), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$9999, (%rax,%rcx,4)    # imm = 0x270F
.LBB268_392:                            # %if.end2617
                                        #   in Loop: Header=BB268_352 Depth=2
	jmp	.LBB268_393
.LBB268_393:                            # %for.inc2618
                                        #   in Loop: Header=BB268_352 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB268_352
.LBB268_394:                            # %for.end2620
                                        #   in Loop: Header=BB268_350 Depth=1
	jmp	.LBB268_395
.LBB268_395:                            # %for.inc2621
                                        #   in Loop: Header=BB268_350 Depth=1
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB268_350
.LBB268_396:                            # %for.end2623
	jmp	.LBB268_397
.LBB268_397:                            # %if.end2624
	cmpl	$2025605879, -72(%rbp)  # imm = 0x78BC4AF7
	jne	.LBB268_399
.LBB268_398:
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB268_399:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB268_398
.Lfunc_end268:
	.size	compute_colocated.205, .Lfunc_end268-compute_colocated.205
	.cfi_endproc
                                        # -- End function
	.globl	dpb_split_field.206     # -- Begin function dpb_split_field.206
	.p2align	4, 0x90
	.type	dpb_split_field.206,@function
dpb_split_field.206:                    # @dpb_split_field.206
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1965045352, -76(%rbp)  # imm = 0x75203668
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 36(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB269_28
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %r8d
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	idivl	%edi
	movl	$1, %edi
	movl	%r8d, %edx
	movl	%eax, %r8d
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %r8d
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	idivl	%edi
	movl	$2, %edi
	movl	%r8d, %edx
	movl	%eax, %r8d
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 56(%rcx)
	movl	$0, -4(%rbp)
.LBB269_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB269_5
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB269_2 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.4:                                # %for.inc
                                        #   in Loop: Header=BB269_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB269_2
.LBB269_5:                              # %for.end
	movl	$0, -4(%rbp)
.LBB269_6:                              # %for.cond30
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB269_9
# %bb.7:                                # %for.body36
                                        #   in Loop: Header=BB269_6 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.8:                                # %for.inc66
                                        #   in Loop: Header=BB269_6 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB269_6
.LBB269_9:                              # %for.end68
	movl	$0, -4(%rbp)
.LBB269_10:                             # %for.cond69
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB269_13
# %bb.11:                               # %for.body75
                                        #   in Loop: Header=BB269_10 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.12:                               # %for.inc89
                                        #   in Loop: Header=BB269_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB269_10
.LBB269_13:                             # %for.end91
	movl	$0, -4(%rbp)
.LBB269_14:                             # %for.cond92
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB269_17
# %bb.15:                               # %for.body98
                                        #   in Loop: Header=BB269_14 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.16:                               # %for.inc131
                                        #   in Loop: Header=BB269_14 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB269_14
.LBB269_17:                             # %for.end133
	movq	-16(%rbp), %rax
	movq	48(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	56(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6380(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6380(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6380(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6376(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	-16(%rbp), %rcx
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	$1, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	$1, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6416(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6416(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6416(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6552(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB269_27
# %bb.18:                               # %if.then211
	movl	$0, -4(%rbp)
.LBB269_19:                             # %for.cond212
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB269_22
# %bb.20:                               # %for.body215
                                        #   in Loop: Header=BB269_19 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	816(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	816(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	1344(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	1344(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
# %bb.21:                               # %for.inc267
                                        #   in Loop: Header=BB269_19 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB269_19
.LBB269_22:                             # %for.end269
	movl	$0, -4(%rbp)
.LBB269_23:                             # %for.cond270
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB269_26
# %bb.24:                               # %for.body273
                                        #   in Loop: Header=BB269_23 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	552(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	552(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	1080(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	1080(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
# %bb.25:                               # %for.inc326
                                        #   in Loop: Header=BB269_23 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB269_23
.LBB269_26:                             # %for.end328
	jmp	.LBB269_27
.LBB269_27:                             # %if.end
	jmp	.LBB269_29
.LBB269_28:                             # %if.else
	movq	-16(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 56(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	$0, 6528(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	$0, 6536(%rax)
.LBB269_29:                             # %if.end335
	movl	$0, -8(%rbp)
.LBB269_30:                             # %for.cond336
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB269_32 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB269_59
# %bb.31:                               # %for.body342
                                        #   in Loop: Header=BB269_30 Depth=1
	movl	$0, -4(%rbp)
.LBB269_32:                             # %for.cond343
                                        #   Parent Loop BB269_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB269_57
# %bb.33:                               # %for.body349
                                        #   in Loop: Header=BB269_32 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -52(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-44(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	imull	%eax, %ecx
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-44(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB269_48
# %bb.34:                               # %land.lhs.true
                                        #   in Loop: Header=BB269_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-48(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB269_48
# %bb.35:                               # %if.then369
                                        #   in Loop: Header=BB269_32 Depth=2
	movl	-48(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	movl	%ecx, -28(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB269_37
# %bb.36:                               # %cond.true
                                        #   in Loop: Header=BB269_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB269_38
.LBB269_37:                             # %cond.false
                                        #   in Loop: Header=BB269_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB269_38
.LBB269_38:                             # %cond.end
                                        #   in Loop: Header=BB269_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB269_40
# %bb.39:                               # %cond.true407
                                        #   in Loop: Header=BB269_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB269_41
.LBB269_40:                             # %cond.false415
                                        #   in Loop: Header=BB269_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB269_41
.LBB269_41:                             # %cond.end416
                                        #   in Loop: Header=BB269_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB269_43
# %bb.42:                               # %cond.true429
                                        #   in Loop: Header=BB269_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$1608, %rax             # imm = 0x648
	movl	-28(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB269_44
.LBB269_43:                             # %cond.false436
                                        #   in Loop: Header=BB269_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB269_44
.LBB269_44:                             # %cond.end437
                                        #   in Loop: Header=BB269_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB269_46
# %bb.45:                               # %cond.true448
                                        #   in Loop: Header=BB269_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$1608, %rax             # imm = 0x648
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB269_47
.LBB269_46:                             # %cond.false456
                                        #   in Loop: Header=BB269_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB269_47
.LBB269_47:                             # %cond.end457
                                        #   in Loop: Header=BB269_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB269_55
.LBB269_48:                             # %if.else466
                                        #   in Loop: Header=BB269_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB269_50
# %bb.49:                               # %cond.true485
                                        #   in Loop: Header=BB269_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB269_51
.LBB269_50:                             # %cond.false491
                                        #   in Loop: Header=BB269_32 Depth=2
	movq	$-1, %rax
	jmp	.LBB269_51
.LBB269_51:                             # %cond.end492
                                        #   in Loop: Header=BB269_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB269_53
# %bb.52:                               # %cond.true503
                                        #   in Loop: Header=BB269_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB269_54
.LBB269_53:                             # %cond.false509
                                        #   in Loop: Header=BB269_32 Depth=2
	movq	$-1, %rax
	jmp	.LBB269_54
.LBB269_54:                             # %cond.end510
                                        #   in Loop: Header=BB269_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB269_55:                             # %if.end519
                                        #   in Loop: Header=BB269_32 Depth=2
	jmp	.LBB269_56
.LBB269_56:                             # %for.inc520
                                        #   in Loop: Header=BB269_32 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB269_32
.LBB269_57:                             # %for.end522
                                        #   in Loop: Header=BB269_30 Depth=1
	jmp	.LBB269_58
.LBB269_58:                             # %for.inc523
                                        #   in Loop: Header=BB269_30 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB269_30
.LBB269_59:                             # %for.end525
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	je	.LBB269_61
# %bb.60:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB269_73
.LBB269_61:                             # %if.then530
	movl	$0, -4(%rbp)
.LBB269_62:                             # %for.cond531
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB269_64 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB269_72
# %bb.63:                               # %for.body537
                                        #   in Loop: Header=BB269_62 Depth=1
	movl	$0, -8(%rbp)
.LBB269_64:                             # %for.cond538
                                        #   Parent Loop BB269_62 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB269_70
# %bb.65:                               # %for.body544
                                        #   in Loop: Header=BB269_64 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -80(%rbp)
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	imull	%eax, %ecx
	movl	-80(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB269_68
# %bb.66:                               # %land.lhs.true563
                                        #   in Loop: Header=BB269_64 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-56(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB269_68
# %bb.67:                               # %if.then570
                                        #   in Loop: Header=BB269_64 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	32(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	40(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB269_68:                             # %if.end908
                                        #   in Loop: Header=BB269_64 Depth=2
	jmp	.LBB269_69
.LBB269_69:                             # %for.inc909
                                        #   in Loop: Header=BB269_64 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB269_64
.LBB269_70:                             # %for.end911
                                        #   in Loop: Header=BB269_62 Depth=1
	jmp	.LBB269_71
.LBB269_71:                             # %for.inc912
                                        #   in Loop: Header=BB269_62 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB269_62
.LBB269_72:                             # %for.end914
	jmp	.LBB269_73
.LBB269_73:                             # %if.end915
	movl	$0, -4(%rbp)
.LBB269_74:                             # %for.cond916
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB269_76 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB269_152
# %bb.75:                               # %for.body922
                                        #   in Loop: Header=BB269_74 Depth=1
	movl	$0, -8(%rbp)
.LBB269_76:                             # %for.cond923
                                        #   Parent Loop BB269_74 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB269_150
# %bb.77:                               # %for.body929
                                        #   in Loop: Header=BB269_76 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -68(%rbp)
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-40(%rbp), %eax
	cltd
	idivl	%esi
	imull	%eax, %ecx
	movl	-68(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-40(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -72(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB269_79
# %bb.78:                               # %lor.lhs.false948
                                        #   in Loop: Header=BB269_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-72(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB269_148
.LBB269_79:                             # %if.then954
                                        #   in Loop: Header=BB269_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB269_147
# %bb.80:                               # %if.then973
                                        #   in Loop: Header=BB269_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB269_82
# %bb.81:                               # %cond.true990
                                        #   in Loop: Header=BB269_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB269_83
.LBB269_82:                             # %cond.false991
                                        #   in Loop: Header=BB269_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB269_83:                             # %cond.end993
                                        #   in Loop: Header=BB269_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB269_85
# %bb.84:                               # %cond.true999
                                        #   in Loop: Header=BB269_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB269_86
.LBB269_85:                             # %cond.false1001
                                        #   in Loop: Header=BB269_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB269_86:                             # %cond.end1003
                                        #   in Loop: Header=BB269_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB269_88
# %bb.87:                               # %cond.true1030
                                        #   in Loop: Header=BB269_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB269_89
.LBB269_88:                             # %cond.false1032
                                        #   in Loop: Header=BB269_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB269_89:                             # %cond.end1034
                                        #   in Loop: Header=BB269_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB269_91
# %bb.90:                               # %cond.true1040
                                        #   in Loop: Header=BB269_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB269_92
.LBB269_91:                             # %cond.false1042
                                        #   in Loop: Header=BB269_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB269_92:                             # %cond.end1044
                                        #   in Loop: Header=BB269_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB269_94
# %bb.93:                               # %cond.true1071
                                        #   in Loop: Header=BB269_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB269_95
.LBB269_94:                             # %cond.false1073
                                        #   in Loop: Header=BB269_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB269_95:                             # %cond.end1075
                                        #   in Loop: Header=BB269_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB269_97
# %bb.96:                               # %cond.true1081
                                        #   in Loop: Header=BB269_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB269_98
.LBB269_97:                             # %cond.false1083
                                        #   in Loop: Header=BB269_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB269_98:                             # %cond.end1085
                                        #   in Loop: Header=BB269_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB269_100
# %bb.99:                               # %cond.true1112
                                        #   in Loop: Header=BB269_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB269_101
.LBB269_100:                            # %cond.false1114
                                        #   in Loop: Header=BB269_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB269_101:                            # %cond.end1116
                                        #   in Loop: Header=BB269_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB269_103
# %bb.102:                              # %cond.true1122
                                        #   in Loop: Header=BB269_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB269_104
.LBB269_103:                            # %cond.false1124
                                        #   in Loop: Header=BB269_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB269_104:                            # %cond.end1126
                                        #   in Loop: Header=BB269_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB269_106
# %bb.105:                              # %cond.true1153
                                        #   in Loop: Header=BB269_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB269_107
.LBB269_106:                            # %cond.false1155
                                        #   in Loop: Header=BB269_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB269_107:                            # %cond.end1157
                                        #   in Loop: Header=BB269_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB269_109
# %bb.108:                              # %cond.true1163
                                        #   in Loop: Header=BB269_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB269_110
.LBB269_109:                            # %cond.false1165
                                        #   in Loop: Header=BB269_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB269_110:                            # %cond.end1167
                                        #   in Loop: Header=BB269_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB269_112
# %bb.111:                              # %if.then1175
                                        #   in Loop: Header=BB269_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	jmp	.LBB269_125
.LBB269_112:                            # %if.else1190
                                        #   in Loop: Header=BB269_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB269_114
# %bb.113:                              # %cond.true1196
                                        #   in Loop: Header=BB269_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB269_115
.LBB269_114:                            # %cond.false1198
                                        #   in Loop: Header=BB269_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB269_115:                            # %cond.end1200
                                        #   in Loop: Header=BB269_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB269_117
# %bb.116:                              # %cond.true1206
                                        #   in Loop: Header=BB269_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB269_118
.LBB269_117:                            # %cond.false1208
                                        #   in Loop: Header=BB269_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB269_118:                            # %cond.end1210
                                        #   in Loop: Header=BB269_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cwtl
	movl	%eax, -24(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB269_120
# %bb.119:                              # %cond.true1232
                                        #   in Loop: Header=BB269_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	3192(%rax,%rcx,8), %rax
	jmp	.LBB269_121
.LBB269_120:                            # %cond.false1237
                                        #   in Loop: Header=BB269_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB269_121
.LBB269_121:                            # %cond.end1238
                                        #   in Loop: Header=BB269_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB269_123
# %bb.122:                              # %cond.true1249
                                        #   in Loop: Header=BB269_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	4776(%rax,%rcx,8), %rax
	jmp	.LBB269_124
.LBB269_123:                            # %cond.false1254
                                        #   in Loop: Header=BB269_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB269_124
.LBB269_124:                            # %cond.end1255
                                        #   in Loop: Header=BB269_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB269_125:                            # %if.end1264
                                        #   in Loop: Header=BB269_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB269_127
# %bb.126:                              # %cond.true1270
                                        #   in Loop: Header=BB269_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB269_128
.LBB269_127:                            # %cond.false1272
                                        #   in Loop: Header=BB269_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB269_128:                            # %cond.end1274
                                        #   in Loop: Header=BB269_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB269_130
# %bb.129:                              # %cond.true1280
                                        #   in Loop: Header=BB269_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB269_131
.LBB269_130:                            # %cond.false1282
                                        #   in Loop: Header=BB269_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB269_131:                            # %cond.end1284
                                        #   in Loop: Header=BB269_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB269_133
# %bb.132:                              # %if.then1292
                                        #   in Loop: Header=BB269_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	jmp	.LBB269_146
.LBB269_133:                            # %if.else1307
                                        #   in Loop: Header=BB269_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB269_135
# %bb.134:                              # %cond.true1313
                                        #   in Loop: Header=BB269_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB269_136
.LBB269_135:                            # %cond.false1315
                                        #   in Loop: Header=BB269_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB269_136:                            # %cond.end1317
                                        #   in Loop: Header=BB269_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB269_138
# %bb.137:                              # %cond.true1323
                                        #   in Loop: Header=BB269_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB269_139
.LBB269_138:                            # %cond.false1325
                                        #   in Loop: Header=BB269_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB269_139:                            # %cond.end1327
                                        #   in Loop: Header=BB269_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cwtl
	movl	%eax, -20(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB269_141
# %bb.140:                              # %cond.true1349
                                        #   in Loop: Header=BB269_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	3456(%rax,%rcx,8), %rax
	jmp	.LBB269_142
.LBB269_141:                            # %cond.false1355
                                        #   in Loop: Header=BB269_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB269_142
.LBB269_142:                            # %cond.end1356
                                        #   in Loop: Header=BB269_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB269_144
# %bb.143:                              # %cond.true1367
                                        #   in Loop: Header=BB269_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	5040(%rax,%rcx,8), %rax
	jmp	.LBB269_145
.LBB269_144:                            # %cond.false1373
                                        #   in Loop: Header=BB269_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB269_145
.LBB269_145:                            # %cond.end1374
                                        #   in Loop: Header=BB269_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB269_146:                            # %if.end1383
                                        #   in Loop: Header=BB269_76 Depth=2
	jmp	.LBB269_147
.LBB269_147:                            # %if.end1384
                                        #   in Loop: Header=BB269_76 Depth=2
	jmp	.LBB269_148
.LBB269_148:                            # %if.end1385
                                        #   in Loop: Header=BB269_76 Depth=2
	jmp	.LBB269_149
.LBB269_149:                            # %for.inc1386
                                        #   in Loop: Header=BB269_76 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB269_76
.LBB269_150:                            # %for.end1388
                                        #   in Loop: Header=BB269_74 Depth=1
	jmp	.LBB269_151
.LBB269_151:                            # %for.inc1389
                                        #   in Loop: Header=BB269_74 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB269_74
.LBB269_152:                            # %for.end1391
	movl	$0, -8(%rbp)
.LBB269_153:                            # %for.cond1392
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB269_155 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB269_160
# %bb.154:                              # %for.body1398
                                        #   in Loop: Header=BB269_153 Depth=1
	movl	$0, -4(%rbp)
.LBB269_155:                            # %for.cond1399
                                        #   Parent Loop BB269_153 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB269_158
# %bb.156:                              # %for.body1405
                                        #   in Loop: Header=BB269_155 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
# %bb.157:                              # %for.inc1412
                                        #   in Loop: Header=BB269_155 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB269_155
.LBB269_158:                            # %for.end1414
                                        #   in Loop: Header=BB269_153 Depth=1
	jmp	.LBB269_159
.LBB269_159:                            # %for.inc1415
                                        #   in Loop: Header=BB269_153 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB269_153
.LBB269_160:                            # %for.end1417
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB269_162
# %bb.161:                              # %lor.lhs.false1420
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB269_174
.LBB269_162:                            # %if.then1423
	movl	$0, -8(%rbp)
.LBB269_163:                            # %for.cond1424
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB269_165 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB269_173
# %bb.164:                              # %for.body1430
                                        #   in Loop: Header=BB269_163 Depth=1
	movl	$0, -4(%rbp)
.LBB269_165:                            # %for.cond1431
                                        #   Parent Loop BB269_163 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB269_171
# %bb.166:                              # %for.body1437
                                        #   in Loop: Header=BB269_165 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -64(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	imull	%eax, %ecx
	movl	-64(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-36(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -60(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB269_168
# %bb.167:                              # %cond.true1456
                                        #   in Loop: Header=BB269_165 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-60(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	jmp	.LBB269_169
.LBB269_168:                            # %cond.false1462
                                        #   in Loop: Header=BB269_165 Depth=2
	xorl	%eax, %eax
	jmp	.LBB269_169
.LBB269_169:                            # %cond.end1463
                                        #   in Loop: Header=BB269_165 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6520(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.170:                              # %for.inc1472
                                        #   in Loop: Header=BB269_165 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB269_165
.LBB269_171:                            # %for.end1474
                                        #   in Loop: Header=BB269_163 Depth=1
	jmp	.LBB269_172
.LBB269_172:                            # %for.inc1475
                                        #   in Loop: Header=BB269_163 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB269_163
.LBB269_173:                            # %for.end1477
	jmp	.LBB269_174
.LBB269_174:                            # %if.end1478
	cmpl	$1965045352, -76(%rbp)  # imm = 0x75203668
	jne	.LBB269_176
.LBB269_175:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB269_176:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB269_175
.Lfunc_end269:
	.size	dpb_split_field.206, .Lfunc_end269-dpb_split_field.206
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_assign_long_term_frame_idx.207
	.type	mm_assign_long_term_frame_idx.207,@function
mm_assign_long_term_frame_idx.207:      # @mm_assign_long_term_frame_idx.207
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1087668026, -32(%rbp)  # imm = 0x40D47F3A
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -16(%rbp)
	movq	-24(%rbp), %rdi
	movl	-28(%rbp), %esi
	callq	get_pic_num_x
	movl	%eax, -12(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB270_2
# %bb.1:                                # %if.then
	movl	-16(%rbp), %edi
	callq	unmark_long_term_frame_for_reference_by_frame_idx
	jmp	.LBB270_18
.LBB270_2:                              # %if.else
	movl	$0, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB270_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB270_14
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB270_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB270_8
# %bb.5:                                # %if.then3
                                        #   in Loop: Header=BB270_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB270_7
# %bb.6:                                # %if.then7
	movl	$1, -8(%rbp)
	jmp	.LBB270_15
.LBB270_7:                              # %if.end
                                        #   in Loop: Header=BB270_3 Depth=1
	jmp	.LBB270_8
.LBB270_8:                              # %if.end8
                                        #   in Loop: Header=BB270_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB270_12
# %bb.9:                                # %if.then14
                                        #   in Loop: Header=BB270_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB270_11
# %bb.10:                               # %if.then19
	movl	$2, -8(%rbp)
	jmp	.LBB270_15
.LBB270_11:                             # %if.end20
                                        #   in Loop: Header=BB270_3 Depth=1
	jmp	.LBB270_12
.LBB270_12:                             # %if.end21
                                        #   in Loop: Header=BB270_3 Depth=1
	jmp	.LBB270_13
.LBB270_13:                             # %for.inc
                                        #   in Loop: Header=BB270_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB270_3
.LBB270_14:                             # %for.end.loopexit
	jmp	.LBB270_15
.LBB270_15:                             # %for.end
	cmpl	$0, -8(%rbp)
	jne	.LBB270_17
# %bb.16:                               # %if.then23
	movabsq	$.L.str.24, %rdi
	movl	$200, %esi
	callq	error
.LBB270_17:                             # %if.end24
	movl	-8(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %r8d
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	callq	unmark_long_term_field_for_reference_by_frame_idx
.LBB270_18:                             # %if.end25
	movq	-24(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	callq	mark_pic_long_term
	cmpl	$1087668026, -32(%rbp)  # imm = 0x40D47F3A
	jne	.LBB270_20
.LBB270_19:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB270_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB270_19
.Lfunc_end270:
	.size	mm_assign_long_term_frame_idx.207, .Lfunc_end270-mm_assign_long_term_frame_idx.207
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_poc_asc.208
	.type	compare_fs_by_poc_asc.208,@function
compare_fs_by_poc_asc.208:              # @compare_fs_by_poc_asc.208
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1251102035, -16(%rbp)  # imm = 0x4A924D53
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB271_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB271_5
.LBB271_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jle	.LBB271_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB271_5
.LBB271_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB271_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1251102035, -16(%rbp)  # imm = 0x4A924D53
	jne	.LBB271_7
.LBB271_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB271_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB271_6
.Lfunc_end271:
	.size	compare_fs_by_poc_asc.208, .Lfunc_end271-compare_fs_by_poc_asc.208
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mark_pic_long_term.209
	.type	mark_pic_long_term.209,@function
mark_pic_long_term.209:                 # @mark_pic_long_term.209
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1829382336, -24(%rbp)  # imm = 0x6D0A28C0
	movq	%rdi, -32(%rbp)
	movl	%esi, -8(%rbp)
	movl	%edx, -16(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB272_11
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB272_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB272_10
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB272_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB272_8
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB272_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB272_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB272_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB272_7
# %bb.6:                                # %if.then10
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	$3, 8(%rax)
	jmp	.LBB272_39
.LBB272_7:                              # %if.end
                                        #   in Loop: Header=BB272_2 Depth=1
	jmp	.LBB272_8
.LBB272_8:                              # %if.end50
                                        #   in Loop: Header=BB272_2 Depth=1
	jmp	.LBB272_9
.LBB272_9:                              # %for.inc
                                        #   in Loop: Header=BB272_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB272_2
.LBB272_10:                             # %for.end
	movabsq	$.L.str.25, %rdi
	movb	$0, %al
	callq	printf
	jmp	.LBB272_39
.LBB272_11:                             # %if.else
	movq	-32(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB272_13
# %bb.12:                               # %if.then53
	movl	$1, -12(%rbp)
	movl	$0, -20(%rbp)
	jmp	.LBB272_14
.LBB272_13:                             # %if.else54
	movl	$0, -12(%rbp)
	movl	$1, -20(%rbp)
.LBB272_14:                             # %if.end55
	movl	$0, -4(%rbp)
.LBB272_15:                             # %for.cond56
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB272_38
# %bb.16:                               # %for.body58
                                        #   in Loop: Header=BB272_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB272_26
# %bb.17:                               # %if.then63
                                        #   in Loop: Header=BB272_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB272_25
# %bb.18:                               # %land.lhs.true69
                                        #   in Loop: Header=BB272_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB272_25
# %bb.19:                               # %if.then75
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	je	.LBB272_22
# %bb.20:                               # %land.lhs.true80
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-8(%rbp), %eax
	je	.LBB272_22
# %bb.21:                               # %if.then85
	movabsq	$.L.str.26, %rdi
	movb	$0, %al
	callq	printf
.LBB272_22:                             # %if.end87
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	shll	$1, %eax
	addl	-12(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	orl	$1, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB272_24
# %bb.23:                               # %if.then110
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB272_24:                             # %if.end123
	jmp	.LBB272_39
.LBB272_25:                             # %if.end124
                                        #   in Loop: Header=BB272_15 Depth=1
	jmp	.LBB272_26
.LBB272_26:                             # %if.end125
                                        #   in Loop: Header=BB272_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB272_36
# %bb.27:                               # %if.then131
                                        #   in Loop: Header=BB272_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB272_35
# %bb.28:                               # %land.lhs.true137
                                        #   in Loop: Header=BB272_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB272_35
# %bb.29:                               # %if.then143
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	je	.LBB272_32
# %bb.30:                               # %land.lhs.true148
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-8(%rbp), %eax
	je	.LBB272_32
# %bb.31:                               # %if.then153
	movabsq	$.L.str.26, %rdi
	movb	$0, %al
	callq	printf
.LBB272_32:                             # %if.end155
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	shll	$1, %eax
	addl	-12(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	orl	$2, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB272_34
# %bb.33:                               # %if.then181
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB272_34:                             # %if.end194
	jmp	.LBB272_39
.LBB272_35:                             # %if.end195
                                        #   in Loop: Header=BB272_15 Depth=1
	jmp	.LBB272_36
.LBB272_36:                             # %if.end196
                                        #   in Loop: Header=BB272_15 Depth=1
	jmp	.LBB272_37
.LBB272_37:                             # %for.inc197
                                        #   in Loop: Header=BB272_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB272_15
.LBB272_38:                             # %for.end199
	movabsq	$.L.str.27, %rdi
	movb	$0, %al
	callq	printf
.LBB272_39:                             # %if.end201
	cmpl	$1829382336, -24(%rbp)  # imm = 0x6D0A28C0
	jne	.LBB272_41
.LBB272_40:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB272_41:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB272_40
.Lfunc_end272:
	.size	mark_pic_long_term.209, .Lfunc_end272-mark_pic_long_term.209
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_pic_num_x.210
	.type	get_pic_num_x.210,@function
get_pic_num_x.210:                      # @get_pic_num_x.210
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$792106644, -28(%rbp)   # imm = 0x2F369694
	movq	%rdi, -24(%rbp)
	movl	%esi, -32(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB273_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	movl	6360(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB273_3
.LBB273_2:                              # %if.else
	movq	-24(%rbp), %rax
	movl	6360(%rax), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
.LBB273_3:                              # %if.end
	movl	-12(%rbp), %ebx
	movl	-32(%rbp), %eax
	addl	$1, %eax
	subl	%eax, %ebx
	cmpl	$792106644, -28(%rbp)   # imm = 0x2F369694
	jne	.LBB273_5
.LBB273_4:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB273_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB273_4
.Lfunc_end273:
	.size	get_pic_num_x.210, .Lfunc_end273-get_pic_num_x.210
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_lt_pic_num_asc.211
	.type	compare_pic_by_lt_pic_num_asc.211,@function
compare_pic_by_lt_pic_num_asc.211:      # @compare_pic_by_lt_pic_num_asc.211
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1880487363, -16(%rbp)  # imm = 0x7015F5C3
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	6368(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6368(%rcx), %eax
	jge	.LBB274_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB274_5
.LBB274_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	6368(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6368(%rcx), %eax
	jle	.LBB274_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB274_5
.LBB274_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB274_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1880487363, -16(%rbp)  # imm = 0x7015F5C3
	jne	.LBB274_7
.LBB274_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB274_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB274_6
.Lfunc_end274:
	.size	compare_pic_by_lt_pic_num_asc.211, .Lfunc_end274-compare_pic_by_lt_pic_num_asc.211
	.cfi_endproc
                                        # -- End function
	.globl	init_lists.212          # -- Begin function init_lists.212
	.p2align	4, 0x90
	.type	init_lists.212,@function
init_lists.212:                         # @init_lists.212
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$1921253595, -76(%rbp)  # imm = 0x728400DB
	movl	%edi, -52(%rbp)
	movl	%esi, -20(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -44(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -72(%rbp)
	movl	$0, -8(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jne	.LBB275_14
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB275_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB275_13
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB275_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB275_11
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB275_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB275_10
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB275_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB275_10
# %bb.6:                                # %if.then10
                                        #   in Loop: Header=BB275_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jbe	.LBB275_8
# %bb.7:                                # %if.then15
                                        #   in Loop: Header=BB275_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	subl	-72(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
	jmp	.LBB275_9
.LBB275_8:                              # %if.else
                                        #   in Loop: Header=BB275_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
.LBB275_9:                              # %if.end
                                        #   in Loop: Header=BB275_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6364(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
.LBB275_10:                             # %if.end36
                                        #   in Loop: Header=BB275_2 Depth=1
	jmp	.LBB275_11
.LBB275_11:                             # %if.end37
                                        #   in Loop: Header=BB275_2 Depth=1
	jmp	.LBB275_12
.LBB275_12:                             # %for.inc
                                        #   in Loop: Header=BB275_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB275_2
.LBB275_13:                             # %for.end
	jmp	.LBB275_31
.LBB275_14:                             # %if.else38
	cmpl	$1, -20(%rbp)
	jne	.LBB275_16
# %bb.15:                               # %if.then40
	movl	$1, -48(%rbp)
	movl	$0, -44(%rbp)
	jmp	.LBB275_17
.LBB275_16:                             # %if.else41
	movl	$0, -48(%rbp)
	movl	$1, -44(%rbp)
.LBB275_17:                             # %if.end42
	movl	$0, -4(%rbp)
.LBB275_18:                             # %for.cond43
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB275_30
# %bb.19:                               # %for.body45
                                        #   in Loop: Header=BB275_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 4(%rax)
	je	.LBB275_28
# %bb.20:                               # %if.then49
                                        #   in Loop: Header=BB275_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jbe	.LBB275_22
# %bb.21:                               # %if.then55
                                        #   in Loop: Header=BB275_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	subl	-72(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
	jmp	.LBB275_23
.LBB275_22:                             # %if.else63
                                        #   in Loop: Header=BB275_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
.LBB275_23:                             # %if.end70
                                        #   in Loop: Header=BB275_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB275_25
# %bb.24:                               # %if.then75
                                        #   in Loop: Header=BB275_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6364(%rcx)
.LBB275_25:                             # %if.end83
                                        #   in Loop: Header=BB275_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB275_27
# %bb.26:                               # %if.then89
                                        #   in Loop: Header=BB275_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6364(%rcx)
.LBB275_27:                             # %if.end98
                                        #   in Loop: Header=BB275_18 Depth=1
	jmp	.LBB275_28
.LBB275_28:                             # %if.end99
                                        #   in Loop: Header=BB275_18 Depth=1
	jmp	.LBB275_29
.LBB275_29:                             # %for.inc100
                                        #   in Loop: Header=BB275_18 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB275_18
.LBB275_30:                             # %for.end102
	jmp	.LBB275_31
.LBB275_31:                             # %if.end103
	cmpl	$2, -52(%rbp)
	je	.LBB275_33
# %bb.32:                               # %lor.lhs.false
	cmpl	$4, -52(%rbp)
	jne	.LBB275_34
.LBB275_33:                             # %if.then106
	movl	$0, listXsize
	movl	$0, listXsize+4
	jmp	.LBB275_181
.LBB275_34:                             # %if.end107
	cmpl	$0, -52(%rbp)
	je	.LBB275_36
# %bb.35:                               # %lor.lhs.false109
	cmpl	$3, -52(%rbp)
	jne	.LBB275_75
.LBB275_36:                             # %if.then111
	cmpl	$0, -20(%rbp)
	jne	.LBB275_55
# %bb.37:                               # %if.then113
	movl	$0, -4(%rbp)
.LBB275_38:                             # %for.cond114
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB275_46
# %bb.39:                               # %for.body116
                                        #   in Loop: Header=BB275_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB275_44
# %bb.40:                               # %if.then121
                                        #   in Loop: Header=BB275_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB275_43
# %bb.41:                               # %land.lhs.true127
                                        #   in Loop: Header=BB275_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB275_43
# %bb.42:                               # %if.then133
                                        #   in Loop: Header=BB275_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB275_43:                             # %if.end140
                                        #   in Loop: Header=BB275_38 Depth=1
	jmp	.LBB275_44
.LBB275_44:                             # %if.end141
                                        #   in Loop: Header=BB275_38 Depth=1
	jmp	.LBB275_45
.LBB275_45:                             # %for.inc142
                                        #   in Loop: Header=BB275_38 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB275_38
.LBB275_46:                             # %for.end144
	movq	listX, %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_pic_num_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize
	movl	$0, -4(%rbp)
.LBB275_47:                             # %for.cond145
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB275_54
# %bb.48:                               # %for.body148
                                        #   in Loop: Header=BB275_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB275_52
# %bb.49:                               # %if.then154
                                        #   in Loop: Header=BB275_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB275_51
# %bb.50:                               # %if.then160
                                        #   in Loop: Header=BB275_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB275_51:                             # %if.end177
                                        #   in Loop: Header=BB275_47 Depth=1
	jmp	.LBB275_52
.LBB275_52:                             # %if.end178
                                        #   in Loop: Header=BB275_47 Depth=1
	jmp	.LBB275_53
.LBB275_53:                             # %for.inc179
                                        #   in Loop: Header=BB275_47 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB275_47
.LBB275_54:                             # %for.end181
	movq	listX, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize
	jmp	.LBB275_74
.LBB275_55:                             # %if.else186
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -32(%rbp)
	cmpq	-32(%rbp), %rcx
	jne	.LBB275_57
# %bb.56:                               # %if.then190
	movabsq	$.L.str.9, %rdi
	callq	no_mem_exit
.LBB275_57:                             # %if.end191
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -40(%rbp)
	cmpq	-40(%rbp), %rcx
	jne	.LBB275_59
# %bb.58:                               # %if.then196
	movabsq	$.L.str.10, %rdi
	callq	no_mem_exit
.LBB275_59:                             # %if.end197
	movl	$0, -4(%rbp)
.LBB275_60:                             # %for.cond198
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB275_65
# %bb.61:                               # %for.body201
                                        #   in Loop: Header=BB275_60 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 4(%rax)
	je	.LBB275_63
# %bb.62:                               # %if.then206
                                        #   in Loop: Header=BB275_60 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB275_63:                             # %if.end212
                                        #   in Loop: Header=BB275_60 Depth=1
	jmp	.LBB275_64
.LBB275_64:                             # %for.inc213
                                        #   in Loop: Header=BB275_60 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB275_60
.LBB275_65:                             # %for.end215
	movq	-32(%rbp), %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_frame_num_desc, %rcx
	callq	qsort
	movl	$0, listXsize
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movl	$0, -4(%rbp)
.LBB275_66:                             # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB275_73
# %bb.67:                               # %for.body220
                                        #   in Loop: Header=BB275_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-40(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB275_69
# %bb.68:                               # %if.then231
                                        #   in Loop: Header=BB275_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB275_69:                             # %if.end242
                                        #   in Loop: Header=BB275_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB275_71
# %bb.70:                               # %if.then248
                                        #   in Loop: Header=BB275_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB275_71:                             # %if.end259
                                        #   in Loop: Header=BB275_66 Depth=1
	jmp	.LBB275_72
.LBB275_72:                             # %for.inc260
                                        #   in Loop: Header=BB275_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB275_66
.LBB275_73:                             # %for.end262
	movq	-40(%rbp), %rdi
	movslq	-24(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_lt_pic_idx_asc, %rcx
	callq	qsort
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movq	-32(%rbp), %rdi
	callq	free
	movq	-40(%rbp), %rdi
	callq	free
.LBB275_74:                             # %if.end264
	movl	$0, listXsize+4
	jmp	.LBB275_155
.LBB275_75:                             # %if.else265
	cmpl	$0, -20(%rbp)
	jne	.LBB275_115
# %bb.76:                               # %if.then268
	movl	$0, -4(%rbp)
.LBB275_77:                             # %for.cond269
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB275_87
# %bb.78:                               # %for.body272
                                        #   in Loop: Header=BB275_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB275_85
# %bb.79:                               # %if.then278
                                        #   in Loop: Header=BB275_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB275_84
# %bb.80:                               # %land.lhs.true284
                                        #   in Loop: Header=BB275_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB275_84
# %bb.81:                               # %if.then290
                                        #   in Loop: Header=BB275_77 Depth=1
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB275_83
# %bb.82:                               # %if.then296
                                        #   in Loop: Header=BB275_77 Depth=1
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB275_83:                             # %if.end307
                                        #   in Loop: Header=BB275_77 Depth=1
	jmp	.LBB275_84
.LBB275_84:                             # %if.end308
                                        #   in Loop: Header=BB275_77 Depth=1
	jmp	.LBB275_85
.LBB275_85:                             # %if.end309
                                        #   in Loop: Header=BB275_77 Depth=1
	jmp	.LBB275_86
.LBB275_86:                             # %for.inc310
                                        #   in Loop: Header=BB275_77 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB275_77
.LBB275_87:                             # %for.end312
	movq	listX, %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_poc_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB275_88:                             # %for.cond314
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB275_98
# %bb.89:                               # %for.body317
                                        #   in Loop: Header=BB275_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB275_96
# %bb.90:                               # %if.then323
                                        #   in Loop: Header=BB275_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB275_95
# %bb.91:                               # %land.lhs.true329
                                        #   in Loop: Header=BB275_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB275_95
# %bb.92:                               # %if.then335
                                        #   in Loop: Header=BB275_88 Depth=1
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB275_94
# %bb.93:                               # %if.then343
                                        #   in Loop: Header=BB275_88 Depth=1
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB275_94:                             # %if.end354
                                        #   in Loop: Header=BB275_88 Depth=1
	jmp	.LBB275_95
.LBB275_95:                             # %if.end355
                                        #   in Loop: Header=BB275_88 Depth=1
	jmp	.LBB275_96
.LBB275_96:                             # %if.end356
                                        #   in Loop: Header=BB275_88 Depth=1
	jmp	.LBB275_97
.LBB275_97:                             # %for.inc357
                                        #   in Loop: Header=BB275_88 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB275_88
.LBB275_98:                             # %for.end359
	movq	listX, %rdi
	movslq	-16(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_poc_asc, %rcx
	callq	qsort
	movl	$0, -12(%rbp)
.LBB275_99:                             # %for.cond364
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB275_102
# %bb.100:                              # %for.body367
                                        #   in Loop: Header=BB275_99 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movl	-8(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.101:                              # %for.inc374
                                        #   in Loop: Header=BB275_99 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB275_99
.LBB275_102:                            # %for.end376
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB275_103:                            # %for.cond377
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB275_106
# %bb.104:                              # %for.body380
                                        #   in Loop: Header=BB275_103 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.105:                              # %for.inc386
                                        #   in Loop: Header=BB275_103 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB275_103
.LBB275_106:                            # %for.end388
	movl	-8(%rbp), %eax
	movl	%eax, listXsize+4
	movl	%eax, listXsize
	movl	$0, -4(%rbp)
.LBB275_107:                            # %for.cond389
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB275_114
# %bb.108:                              # %for.body392
                                        #   in Loop: Header=BB275_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB275_112
# %bb.109:                              # %if.then398
                                        #   in Loop: Header=BB275_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB275_111
# %bb.110:                              # %if.then404
                                        #   in Loop: Header=BB275_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX+8, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB275_111:                            # %if.end428
                                        #   in Loop: Header=BB275_107 Depth=1
	jmp	.LBB275_112
.LBB275_112:                            # %if.end429
                                        #   in Loop: Header=BB275_107 Depth=1
	jmp	.LBB275_113
.LBB275_113:                            # %for.inc430
                                        #   in Loop: Header=BB275_107 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB275_107
.LBB275_114:                            # %for.end432
	movq	listX, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movq	listX+8, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize+4
	movl	%eax, listXsize
	jmp	.LBB275_154
.LBB275_115:                            # %if.else441
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -32(%rbp)
	cmpq	-32(%rbp), %rcx
	jne	.LBB275_117
# %bb.116:                              # %if.then446
	movabsq	$.L.str.9, %rdi
	callq	no_mem_exit
.LBB275_117:                            # %if.end447
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -64(%rbp)
	cmpq	-64(%rbp), %rcx
	jne	.LBB275_119
# %bb.118:                              # %if.then452
	movabsq	$.L.str.11, %rdi
	callq	no_mem_exit
.LBB275_119:                            # %if.end453
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -40(%rbp)
	cmpq	-40(%rbp), %rcx
	jne	.LBB275_121
# %bb.120:                              # %if.then458
	movabsq	$.L.str.10, %rdi
	callq	no_mem_exit
.LBB275_121:                            # %if.end459
	movl	$0, listXsize
	movl	$1, listXsize+4
	movl	$0, -4(%rbp)
.LBB275_122:                            # %for.cond460
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB275_129
# %bb.123:                              # %for.body463
                                        #   in Loop: Header=BB275_122 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, (%rax)
	je	.LBB275_127
# %bb.124:                              # %if.then468
                                        #   in Loop: Header=BB275_122 Depth=1
	movq	img, %rax
	movl	72460(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jl	.LBB275_126
# %bb.125:                              # %if.then474
                                        #   in Loop: Header=BB275_122 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB275_126:                            # %if.end480
                                        #   in Loop: Header=BB275_122 Depth=1
	jmp	.LBB275_127
.LBB275_127:                            # %if.end481
                                        #   in Loop: Header=BB275_122 Depth=1
	jmp	.LBB275_128
.LBB275_128:                            # %for.inc482
                                        #   in Loop: Header=BB275_122 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB275_122
.LBB275_129:                            # %for.end484
	movq	-32(%rbp), %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_poc_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB275_130:                            # %for.cond486
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB275_137
# %bb.131:                              # %for.body489
                                        #   in Loop: Header=BB275_130 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, (%rax)
	je	.LBB275_135
# %bb.132:                              # %if.then494
                                        #   in Loop: Header=BB275_130 Depth=1
	movq	img, %rax
	movl	72460(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB275_134
# %bb.133:                              # %if.then501
                                        #   in Loop: Header=BB275_130 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB275_134:                            # %if.end507
                                        #   in Loop: Header=BB275_130 Depth=1
	jmp	.LBB275_135
.LBB275_135:                            # %if.end508
                                        #   in Loop: Header=BB275_130 Depth=1
	jmp	.LBB275_136
.LBB275_136:                            # %for.inc509
                                        #   in Loop: Header=BB275_130 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB275_130
.LBB275_137:                            # %for.end511
	movq	-32(%rbp), %rdi
	movslq	-16(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_poc_asc, %rcx
	callq	qsort
	movl	$0, -12(%rbp)
.LBB275_138:                            # %for.cond516
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB275_141
# %bb.139:                              # %for.body519
                                        #   in Loop: Header=BB275_138 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	-8(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.140:                              # %for.inc526
                                        #   in Loop: Header=BB275_138 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB275_138
.LBB275_141:                            # %for.end528
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB275_142:                            # %for.cond529
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB275_145
# %bb.143:                              # %for.body532
                                        #   in Loop: Header=BB275_142 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.144:                              # %for.inc538
                                        #   in Loop: Header=BB275_142 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB275_142
.LBB275_145:                            # %for.end540
	movl	$0, listXsize
	movl	$0, listXsize+4
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movabsq	$listXsize, %r8
	addq	$4, %r8
	movl	-20(%rbp), %edi
	movq	-64(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX+8, %rcx
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movl	$0, -4(%rbp)
.LBB275_146:                            # %for.cond541
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB275_153
# %bb.147:                              # %for.body544
                                        #   in Loop: Header=BB275_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-40(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB275_149
# %bb.148:                              # %if.then555
                                        #   in Loop: Header=BB275_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB275_149:                            # %if.end566
                                        #   in Loop: Header=BB275_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB275_151
# %bb.150:                              # %if.then572
                                        #   in Loop: Header=BB275_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB275_151:                            # %if.end583
                                        #   in Loop: Header=BB275_146 Depth=1
	jmp	.LBB275_152
.LBB275_152:                            # %for.inc584
                                        #   in Loop: Header=BB275_146 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB275_146
.LBB275_153:                            # %for.end586
	movq	-40(%rbp), %rdi
	movslq	-24(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_lt_pic_idx_asc, %rcx
	callq	qsort
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movabsq	$listXsize, %r8
	addq	$4, %r8
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX+8, %rcx
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movq	-32(%rbp), %rdi
	callq	free
	movq	-64(%rbp), %rdi
	callq	free
	movq	-40(%rbp), %rdi
	callq	free
.LBB275_154:                            # %if.end588
	jmp	.LBB275_155
.LBB275_155:                            # %if.end589
	movl	listXsize, %eax
	cmpl	listXsize+4, %eax
	jne	.LBB275_166
# %bb.156:                              # %land.lhs.true592
	cmpl	$1, listXsize
	jle	.LBB275_166
# %bb.157:                              # %if.then595
	movl	$0, -68(%rbp)
	movl	$0, -12(%rbp)
.LBB275_158:                            # %for.cond596
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB275_163
# %bb.159:                              # %for.body599
                                        #   in Loop: Header=BB275_158 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movslq	-12(%rbp), %rdx
	cmpq	(%rcx,%rdx,8), %rax
	je	.LBB275_161
# %bb.160:                              # %if.then606
                                        #   in Loop: Header=BB275_158 Depth=1
	movl	$1, -68(%rbp)
.LBB275_161:                            # %if.end607
                                        #   in Loop: Header=BB275_158 Depth=1
	jmp	.LBB275_162
.LBB275_162:                            # %for.inc608
                                        #   in Loop: Header=BB275_158 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB275_158
.LBB275_163:                            # %for.end610
	cmpl	$0, -68(%rbp)
	jne	.LBB275_165
# %bb.164:                              # %if.then612
	movq	listX+8, %rax
	movq	(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	listX+8, %rax
	movq	8(%rax), %rax
	movq	listX+8, %rcx
	movq	%rax, (%rcx)
	movq	-88(%rbp), %rax
	movq	listX+8, %rcx
	movq	%rax, 8(%rcx)
.LBB275_165:                            # %if.end617
	jmp	.LBB275_166
.LBB275_166:                            # %if.end618
	movl	listXsize, %eax
	movq	img, %rcx
	cmpl	72000(%rcx), %eax
	jge	.LBB275_168
# %bb.167:                              # %cond.true
	movl	listXsize, %eax
	jmp	.LBB275_169
.LBB275_168:                            # %cond.false
	movq	img, %rax
	movl	72000(%rax), %eax
.LBB275_169:                            # %cond.end
	movl	%eax, listXsize
	movl	listXsize+4, %eax
	movq	img, %rcx
	cmpl	72004(%rcx), %eax
	jge	.LBB275_171
# %bb.170:                              # %cond.true624
	movl	listXsize+4, %eax
	jmp	.LBB275_172
.LBB275_171:                            # %cond.false625
	movq	img, %rax
	movl	72004(%rax), %eax
.LBB275_172:                            # %cond.end627
	movl	%eax, listXsize+4
	movl	listXsize, %eax
	movl	%eax, -4(%rbp)
.LBB275_173:                            # %for.cond629
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$33, -4(%rbp)
	jae	.LBB275_176
# %bb.174:                              # %for.body632
                                        #   in Loop: Header=BB275_173 Depth=1
	movq	listX, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.175:                              # %for.inc635
                                        #   in Loop: Header=BB275_173 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB275_173
.LBB275_176:                            # %for.end637
	movl	listXsize+4, %eax
	movl	%eax, -4(%rbp)
.LBB275_177:                            # %for.cond638
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$33, -4(%rbp)
	jae	.LBB275_180
# %bb.178:                              # %for.body641
                                        #   in Loop: Header=BB275_177 Depth=1
	movq	listX+8, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.179:                              # %for.inc644
                                        #   in Loop: Header=BB275_177 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB275_177
.LBB275_180:                            # %for.end646.loopexit
	jmp	.LBB275_181
.LBB275_181:                            # %for.end646
	cmpl	$1921253595, -76(%rbp)  # imm = 0x728400DB
	jne	.LBB275_183
.LBB275_182:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB275_183:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB275_182
.Lfunc_end275:
	.size	init_lists.212, .Lfunc_end275-init_lists.212
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_smallest_poc.213
	.type	get_smallest_poc.213,@function
get_smallest_poc.213:                   # @get_smallest_poc.213
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$119320846, -20(%rbp)   # imm = 0x71CB10E
	movq	%rdi, -16(%rbp)
	movq	%rsi, -32(%rbp)
	cmpl	$1, dpb+28
	jae	.LBB276_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.28, %rdi
	movl	$150, %esi
	callq	error
.LBB276_2:                              # %if.end
	movq	-32(%rbp), %rax
	movl	$-1, (%rax)
	movq	-16(%rbp), %rax
	movl	$2147483647, (%rax)     # imm = 0x7FFFFFFF
	movl	$0, -4(%rbp)
.LBB276_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB276_9
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB276_3 Depth=1
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	dpb, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jle	.LBB276_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB276_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 32(%rax)
	jne	.LBB276_7
# %bb.6:                                # %if.then6
                                        #   in Loop: Header=BB276_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	36(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB276_7:                              # %if.end10
                                        #   in Loop: Header=BB276_3 Depth=1
	jmp	.LBB276_8
.LBB276_8:                              # %for.inc
                                        #   in Loop: Header=BB276_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB276_3
.LBB276_9:                              # %for.end
	cmpl	$119320846, -20(%rbp)   # imm = 0x71CB10E
	jne	.LBB276_11
.LBB276_10:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB276_11:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB276_10
.Lfunc_end276:
	.size	get_smallest_poc.213, .Lfunc_end276-get_smallest_poc.213
	.cfi_endproc
                                        # -- End function
	.globl	gen_field_ref_ids.214   # -- Begin function gen_field_ref_ids.214
	.p2align	4, 0x90
	.type	gen_field_ref_ids.214,@function
gen_field_ref_ids.214:                  # @gen_field_ref_ids.214
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$649612305, -28(%rbp)   # imm = 0x26B84C11
	movq	%rdi, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB277_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB277_3 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB277_14
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB277_1 Depth=1
	movl	$0, -4(%rbp)
.LBB277_3:                              # %for.cond1
                                        #   Parent Loop BB277_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB277_12
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB277_3 Depth=2
	movq	-16(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB277_6
# %bb.5:                                # %cond.true
                                        #   in Loop: Header=BB277_3 Depth=2
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB277_7
.LBB277_6:                              # %cond.false
                                        #   in Loop: Header=BB277_3 Depth=2
	xorl	%eax, %eax
	jmp	.LBB277_7
.LBB277_7:                              # %cond.end
                                        #   in Loop: Header=BB277_3 Depth=2
	movq	-16(%rbp), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB277_9
# %bb.8:                                # %cond.true27
                                        #   in Loop: Header=BB277_3 Depth=2
	movq	-16(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB277_10
.LBB277_9:                              # %cond.false32
                                        #   in Loop: Header=BB277_3 Depth=2
	xorl	%eax, %eax
	jmp	.LBB277_10
.LBB277_10:                             # %cond.end33
                                        #   in Loop: Header=BB277_3 Depth=2
	movq	-16(%rbp), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB277_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB277_3
.LBB277_12:                             # %for.end
                                        #   in Loop: Header=BB277_1 Depth=1
	jmp	.LBB277_13
.LBB277_13:                             # %for.inc45
                                        #   in Loop: Header=BB277_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB277_1
.LBB277_14:                             # %for.end47
	cmpl	$649612305, -28(%rbp)   # imm = 0x26B84C11
	jne	.LBB277_16
.LBB277_15:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB277_16:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB277_15
.Lfunc_end277:
	.size	gen_field_ref_ids.214, .Lfunc_end277-gen_field_ref_ids.214
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_unmark_short_term_for_reference.215
	.type	mm_unmark_short_term_for_reference.215,@function
mm_unmark_short_term_for_reference.215: # @mm_unmark_short_term_for_reference.215
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1957382690, -16(%rbp)  # imm = 0x74AB4A22
	movq	%rdi, -24(%rbp)
	movl	%esi, -12(%rbp)
	movq	-24(%rbp), %rdi
	movl	-12(%rbp), %esi
	callq	get_pic_num_x
	movl	%eax, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB278_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB278_26
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB278_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB278_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB278_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB278_8
# %bb.4:                                # %land.lhs.true
                                        #   in Loop: Header=BB278_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB278_8
# %bb.5:                                # %if.then6
                                        #   in Loop: Header=BB278_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB278_7
# %bb.6:                                # %if.then10
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_reference
	jmp	.LBB278_27
.LBB278_7:                              # %if.end
                                        #   in Loop: Header=BB278_1 Depth=1
	jmp	.LBB278_8
.LBB278_8:                              # %if.end13
                                        #   in Loop: Header=BB278_1 Depth=1
	jmp	.LBB278_24
.LBB278_9:                              # %if.else
                                        #   in Loop: Header=BB278_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB278_16
# %bb.10:                               # %land.lhs.true17
                                        #   in Loop: Header=BB278_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB278_16
# %bb.11:                               # %if.then23
                                        #   in Loop: Header=BB278_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB278_15
# %bb.12:                               # %if.then28
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$2, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB278_14
# %bb.13:                               # %if.then39
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
.LBB278_14:                             # %if.end44
	jmp	.LBB278_27
.LBB278_15:                             # %if.end45
                                        #   in Loop: Header=BB278_1 Depth=1
	jmp	.LBB278_16
.LBB278_16:                             # %if.end46
                                        #   in Loop: Header=BB278_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB278_23
# %bb.17:                               # %land.lhs.true52
                                        #   in Loop: Header=BB278_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	jne	.LBB278_23
# %bb.18:                               # %if.then58
                                        #   in Loop: Header=BB278_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB278_22
# %bb.19:                               # %if.then63
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB278_21
# %bb.20:                               # %if.then76
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
.LBB278_21:                             # %if.end81
	jmp	.LBB278_27
.LBB278_22:                             # %if.end82
                                        #   in Loop: Header=BB278_1 Depth=1
	jmp	.LBB278_23
.LBB278_23:                             # %if.end83
                                        #   in Loop: Header=BB278_1 Depth=1
	jmp	.LBB278_24
.LBB278_24:                             # %if.end84
                                        #   in Loop: Header=BB278_1 Depth=1
	jmp	.LBB278_25
.LBB278_25:                             # %for.inc
                                        #   in Loop: Header=BB278_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB278_1
.LBB278_26:                             # %for.end.loopexit
	jmp	.LBB278_27
.LBB278_27:                             # %for.end
	cmpl	$1957382690, -16(%rbp)  # imm = 0x74AB4A22
	jne	.LBB278_29
.LBB278_28:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB278_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB278_28
.Lfunc_end278:
	.size	mm_unmark_short_term_for_reference.215, .Lfunc_end278-mm_unmark_short_term_for_reference.215
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_unmark_short_term_for_reference.216
	.type	mm_unmark_short_term_for_reference.216,@function
mm_unmark_short_term_for_reference.216: # @mm_unmark_short_term_for_reference.216
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1638705346, -16(%rbp)  # imm = 0x61ACA8C2
	movq	%rdi, -24(%rbp)
	movl	%esi, -12(%rbp)
	movq	-24(%rbp), %rdi
	movl	-12(%rbp), %esi
	callq	get_pic_num_x
	movl	%eax, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB279_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB279_26
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB279_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB279_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB279_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB279_8
# %bb.4:                                # %land.lhs.true
                                        #   in Loop: Header=BB279_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB279_8
# %bb.5:                                # %if.then6
                                        #   in Loop: Header=BB279_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB279_7
# %bb.6:                                # %if.then10
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_reference
	jmp	.LBB279_27
.LBB279_7:                              # %if.end
                                        #   in Loop: Header=BB279_1 Depth=1
	jmp	.LBB279_8
.LBB279_8:                              # %if.end13
                                        #   in Loop: Header=BB279_1 Depth=1
	jmp	.LBB279_24
.LBB279_9:                              # %if.else
                                        #   in Loop: Header=BB279_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB279_16
# %bb.10:                               # %land.lhs.true17
                                        #   in Loop: Header=BB279_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB279_16
# %bb.11:                               # %if.then23
                                        #   in Loop: Header=BB279_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB279_15
# %bb.12:                               # %if.then28
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$2, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB279_14
# %bb.13:                               # %if.then39
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
.LBB279_14:                             # %if.end44
	jmp	.LBB279_27
.LBB279_15:                             # %if.end45
                                        #   in Loop: Header=BB279_1 Depth=1
	jmp	.LBB279_16
.LBB279_16:                             # %if.end46
                                        #   in Loop: Header=BB279_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB279_23
# %bb.17:                               # %land.lhs.true52
                                        #   in Loop: Header=BB279_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	jne	.LBB279_23
# %bb.18:                               # %if.then58
                                        #   in Loop: Header=BB279_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB279_22
# %bb.19:                               # %if.then63
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB279_21
# %bb.20:                               # %if.then76
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
.LBB279_21:                             # %if.end81
	jmp	.LBB279_27
.LBB279_22:                             # %if.end82
                                        #   in Loop: Header=BB279_1 Depth=1
	jmp	.LBB279_23
.LBB279_23:                             # %if.end83
                                        #   in Loop: Header=BB279_1 Depth=1
	jmp	.LBB279_24
.LBB279_24:                             # %if.end84
                                        #   in Loop: Header=BB279_1 Depth=1
	jmp	.LBB279_25
.LBB279_25:                             # %for.inc
                                        #   in Loop: Header=BB279_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB279_1
.LBB279_26:                             # %for.end.loopexit
	jmp	.LBB279_27
.LBB279_27:                             # %for.end
	cmpl	$1638705346, -16(%rbp)  # imm = 0x61ACA8C2
	jne	.LBB279_29
.LBB279_28:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB279_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB279_28
.Lfunc_end279:
	.size	mm_unmark_short_term_for_reference.216, .Lfunc_end279-mm_unmark_short_term_for_reference.216
	.cfi_endproc
                                        # -- End function
	.globl	reorder_ref_pic_list.217 # -- Begin function reorder_ref_pic_list.217
	.p2align	4, 0x90
	.type	reorder_ref_pic_list.217,@function
reorder_ref_pic_list.217:               # @reorder_ref_pic_list.217
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$218948135, -60(%rbp)   # imm = 0xD0CE227
	movq	%rdi, -72(%rbp)
	movq	%rsi, -88(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -32(%rbp)
	movq	%r9, -80(%rbp)
	movl	$0, -36(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB280_2
# %bb.1:                                # %if.then
	movl	-44(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	72464(%rax), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB280_3
.LBB280_2:                              # %if.else
	movl	-44(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	72464(%rax), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
.LBB280_3:                              # %if.end
	movl	-24(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB280_4:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$3, (%rax,%rcx,4)
	je	.LBB280_24
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB280_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$3, (%rax,%rcx,4)
	jle	.LBB280_7
# %bb.6:                                # %if.then8
                                        #   in Loop: Header=BB280_4 Depth=1
	movabsq	$.L.str.12, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB280_7:                              # %if.end9
                                        #   in Loop: Header=BB280_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$2, (%rax,%rcx,4)
	jge	.LBB280_21
# %bb.8:                                # %if.then13
                                        #   in Loop: Header=BB280_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	jne	.LBB280_13
# %bb.9:                                # %if.then17
                                        #   in Loop: Header=BB280_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB280_11
# %bb.10:                               # %if.then22
                                        #   in Loop: Header=BB280_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	addl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB280_12
.LBB280_11:                             # %if.else28
                                        #   in Loop: Header=BB280_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -8(%rbp)
.LBB280_12:                             # %if.end33
                                        #   in Loop: Header=BB280_4 Depth=1
	jmp	.LBB280_17
.LBB280_13:                             # %if.else34
                                        #   in Loop: Header=BB280_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	cmpl	-16(%rbp), %eax
	jl	.LBB280_15
# %bb.14:                               # %if.then40
                                        #   in Loop: Header=BB280_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB280_16
.LBB280_15:                             # %if.else46
                                        #   in Loop: Header=BB280_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -8(%rbp)
.LBB280_16:                             # %if.end51
                                        #   in Loop: Header=BB280_4 Depth=1
	jmp	.LBB280_17
.LBB280_17:                             # %if.end52
                                        #   in Loop: Header=BB280_4 Depth=1
	movl	-8(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jle	.LBB280_19
# %bb.18:                               # %if.then54
                                        #   in Loop: Header=BB280_4 Depth=1
	movl	-8(%rbp), %eax
	subl	-16(%rbp), %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB280_20
.LBB280_19:                             # %if.else56
                                        #   in Loop: Header=BB280_4 Depth=1
	movl	-8(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB280_20:                             # %if.end57
                                        #   in Loop: Header=BB280_4 Depth=1
	movq	-72(%rbp), %rdi
	movl	-20(%rbp), %esi
	movl	-40(%rbp), %edx
	leaq	-36(%rbp), %rcx
	callq	reorder_short_term
	jmp	.LBB280_22
.LBB280_21:                             # %if.else58
                                        #   in Loop: Header=BB280_4 Depth=1
	movq	-72(%rbp), %rdi
	movl	-20(%rbp), %esi
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %edx
	leaq	-36(%rbp), %rcx
	callq	reorder_long_term
.LBB280_22:                             # %if.end61
                                        #   in Loop: Header=BB280_4 Depth=1
	jmp	.LBB280_23
.LBB280_23:                             # %for.inc
                                        #   in Loop: Header=BB280_4 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB280_4
.LBB280_24:                             # %for.end
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$218948135, -60(%rbp)   # imm = 0xD0CE227
	jne	.LBB280_26
.LBB280_25:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB280_26:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB280_25
.Lfunc_end280:
	.size	reorder_ref_pic_list.217, .Lfunc_end280-reorder_ref_pic_list.217
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function remove_frame_from_dpb.218
	.type	remove_frame_from_dpb.218,@function
remove_frame_from_dpb.218:              # @remove_frame_from_dpb.218
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$545519509, -20(%rbp)   # imm = 0x2083F795
	movl	%edi, -16(%rbp)
	movq	dpb(%rip), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB281_6
# %bb.1:                                # %entry
	movq	.LJTI281_0(,%rax,8), %rax
	jmpq	*%rax
.LBB281_2:                              # %sw.bb
	movq	-8(%rbp), %rax
	movq	40(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	56(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 40(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 56(%rax)
	jmp	.LBB281_7
.LBB281_3:                              # %sw.bb4
	movq	-8(%rbp), %rax
	movq	56(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 56(%rax)
	jmp	.LBB281_7
.LBB281_4:                              # %sw.bb7
	movq	-8(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 48(%rax)
	jmp	.LBB281_7
.LBB281_5:                              # %sw.bb10
	jmp	.LBB281_7
.LBB281_6:                              # %sw.default
	movabsq	$.L.str.29, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB281_7:                              # %sw.epilog
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 4(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 12(%rax)
	movq	dpb, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -32(%rbp)
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB281_8:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movl	dpb+28, %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jae	.LBB281_11
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB281_8 Depth=1
	movq	dpb, %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movl	%ecx, %ecx
	movq	(%rax,%rcx,8), %rax
	movq	dpb, %rcx
	movl	-12(%rbp), %edx
	movq	%rax, (%rcx,%rdx,8)
# %bb.10:                               # %for.inc
                                        #   in Loop: Header=BB281_8 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB281_8
.LBB281_11:                             # %for.end
	movq	-32(%rbp), %rax
	movq	dpb, %rcx
	movl	dpb+28, %edx
	subl	$1, %edx
	movl	%edx, %edx
	movq	%rax, (%rcx,%rdx,8)
	movl	dpb+28, %eax
	addl	$-1, %eax
	movl	%eax, dpb+28
	cmpl	$545519509, -20(%rbp)   # imm = 0x2083F795
	jne	.LBB281_13
.LBB281_12:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB281_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB281_12
.Lfunc_end281:
	.size	remove_frame_from_dpb.218, .Lfunc_end281-remove_frame_from_dpb.218
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI281_0:
	.quad	.LBB281_5
	.quad	.LBB281_4
	.quad	.LBB281_3
	.quad	.LBB281_2
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function mm_unmark_long_term_for_reference.219
	.type	mm_unmark_long_term_for_reference.219,@function
mm_unmark_long_term_for_reference.219:  # @mm_unmark_long_term_for_reference.219
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$294503527, -12(%rbp)   # imm = 0x118DC467
	movq	%rdi, -24(%rbp)
	movl	%esi, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB282_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB282_26
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB282_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB282_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB282_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB282_8
# %bb.4:                                # %land.lhs.true
                                        #   in Loop: Header=BB282_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB282_8
# %bb.5:                                # %if.then6
                                        #   in Loop: Header=BB282_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB282_7
# %bb.6:                                # %if.then11
                                        #   in Loop: Header=BB282_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB282_7:                              # %if.end
                                        #   in Loop: Header=BB282_1 Depth=1
	jmp	.LBB282_8
.LBB282_8:                              # %if.end14
                                        #   in Loop: Header=BB282_1 Depth=1
	jmp	.LBB282_24
.LBB282_9:                              # %if.else
                                        #   in Loop: Header=BB282_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB282_16
# %bb.10:                               # %land.lhs.true18
                                        #   in Loop: Header=BB282_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB282_16
# %bb.11:                               # %if.then24
                                        #   in Loop: Header=BB282_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB282_15
# %bb.12:                               # %if.then29
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$0, 6376(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$2, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	andl	$2, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB282_14
# %bb.13:                               # %if.then48
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6376(%rax)
.LBB282_14:                             # %if.end57
	jmp	.LBB282_27
.LBB282_15:                             # %if.end58
                                        #   in Loop: Header=BB282_1 Depth=1
	jmp	.LBB282_16
.LBB282_16:                             # %if.end59
                                        #   in Loop: Header=BB282_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB282_23
# %bb.17:                               # %land.lhs.true65
                                        #   in Loop: Header=BB282_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB282_23
# %bb.18:                               # %if.then71
                                        #   in Loop: Header=BB282_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB282_22
# %bb.19:                               # %if.then76
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$0, 6376(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB282_21
# %bb.20:                               # %if.then97
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6376(%rax)
.LBB282_21:                             # %if.end106
	jmp	.LBB282_27
.LBB282_22:                             # %if.end107
                                        #   in Loop: Header=BB282_1 Depth=1
	jmp	.LBB282_23
.LBB282_23:                             # %if.end108
                                        #   in Loop: Header=BB282_1 Depth=1
	jmp	.LBB282_24
.LBB282_24:                             # %if.end109
                                        #   in Loop: Header=BB282_1 Depth=1
	jmp	.LBB282_25
.LBB282_25:                             # %for.inc
                                        #   in Loop: Header=BB282_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB282_1
.LBB282_26:                             # %for.end.loopexit
	jmp	.LBB282_27
.LBB282_27:                             # %for.end
	cmpl	$294503527, -12(%rbp)   # imm = 0x118DC467
	jne	.LBB282_29
.LBB282_28:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB282_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB282_28
.Lfunc_end282:
	.size	mm_unmark_long_term_for_reference.219, .Lfunc_end282-mm_unmark_long_term_for_reference.219
	.cfi_endproc
                                        # -- End function
	.globl	store_picture_in_dpb.220 # -- Begin function store_picture_in_dpb.220
	.p2align	4, 0x90
	.type	store_picture_in_dpb.220,@function
store_picture_in_dpb.220:               # @store_picture_in_dpb.220
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1568482592, -24(%rbp)  # imm = 0x5D7D2520
	movq	%rdi, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 6380(%rcx)
	movq	img, %rax
	movl	$0, 72644(%rax)
	movq	img, %rax
	cmpl	$2, 28(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 72640(%rcx)
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	je	.LBB283_2
# %bb.1:                                # %if.then
	movq	-8(%rbp), %rdi
	callq	idr_memory_management
	jmp	.LBB283_6
.LBB283_2:                              # %if.else
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB283_5
# %bb.3:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72500(%rax)
	je	.LBB283_5
# %bb.4:                                # %if.then6
	movq	-8(%rbp), %rdi
	callq	adaptive_memory_management
.LBB283_5:                              # %if.end
	jmp	.LBB283_6
.LBB283_6:                              # %if.end7
	movq	-8(%rbp), %rax
	cmpl	$1, (%rax)
	je	.LBB283_8
# %bb.7:                                # %lor.lhs.false
	movq	-8(%rbp), %rax
	cmpl	$2, (%rax)
	jne	.LBB283_23
.LBB283_8:                              # %if.then14
	cmpq	$0, dpb+56
	je	.LBB283_22
# %bb.9:                                # %if.then16
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	cmpl	6364(%rcx), %eax
	jne	.LBB283_21
# %bb.10:                               # %if.then19
	movq	-8(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB283_12
# %bb.11:                               # %land.lhs.true23
	movq	dpb+56, %rax
	cmpl	$2, (%rax)
	je	.LBB283_14
.LBB283_12:                             # %lor.lhs.false26
	movq	-8(%rbp), %rax
	cmpl	$2, (%rax)
	jne	.LBB283_20
# %bb.13:                               # %land.lhs.true30
	movq	dpb+56, %rax
	cmpl	$1, (%rax)
	jne	.LBB283_20
.LBB283_14:                             # %if.then34
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB283_16
# %bb.15:                               # %land.lhs.true37
	movq	dpb+56, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB283_18
.LBB283_16:                             # %lor.lhs.false40
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	jne	.LBB283_19
# %bb.17:                               # %land.lhs.true43
	movq	dpb+56, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB283_19
.LBB283_18:                             # %if.then47
	movq	dpb+56, %rdi
	movq	-8(%rbp), %rsi
	callq	insert_picture_in_dpb
	callq	update_ref_list
	callq	update_ltref_list
	callq	dump_dpb
	movq	$0, dpb+56
	jmp	.LBB283_50
.LBB283_19:                             # %if.end48
	jmp	.LBB283_20
.LBB283_20:                             # %if.end49
	jmp	.LBB283_21
.LBB283_21:                             # %if.end50
	jmp	.LBB283_22
.LBB283_22:                             # %if.end51
	jmp	.LBB283_23
.LBB283_23:                             # %if.end52
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	jne	.LBB283_27
# %bb.24:                               # %land.lhs.true56
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB283_27
# %bb.25:                               # %land.lhs.true59
	movq	img, %rax
	cmpl	$0, 72500(%rax)
	jne	.LBB283_27
# %bb.26:                               # %if.then62
	movq	-8(%rbp), %rdi
	callq	sliding_window_memory_management
.LBB283_27:                             # %if.end63
	movl	dpb+28, %eax
	cmpl	dpb+24, %eax
	jne	.LBB283_29
# %bb.28:                               # %if.then66
	callq	remove_unused_frame_from_dpb
.LBB283_29:                             # %if.end67
	jmp	.LBB283_30
.LBB283_30:                             # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	dpb+28, %eax
	cmpl	dpb+24, %eax
	jne	.LBB283_37
# %bb.31:                               # %while.body
                                        #   in Loop: Header=BB283_30 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	jne	.LBB283_36
# %bb.32:                               # %if.then72
                                        #   in Loop: Header=BB283_30 Depth=1
	leaq	-20(%rbp), %rdi
	leaq	-16(%rbp), %rsi
	callq	get_smallest_poc
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	cmpl	-16(%rbp), %eax
	je	.LBB283_34
# %bb.33:                               # %lor.lhs.false75
                                        #   in Loop: Header=BB283_30 Depth=1
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB283_35
.LBB283_34:                             # %if.then79
	movq	-8(%rbp), %rdi
	movl	p_dec, %esi
	callq	direct_output
	jmp	.LBB283_50
.LBB283_35:                             # %if.end80
                                        #   in Loop: Header=BB283_30 Depth=1
	jmp	.LBB283_36
.LBB283_36:                             # %if.end81
                                        #   in Loop: Header=BB283_30 Depth=1
	callq	output_one_frame_from_dpb
	jmp	.LBB283_30
.LBB283_37:                             # %while.end
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB283_46
# %bb.38:                               # %land.lhs.true84
	movq	-8(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB283_46
# %bb.39:                               # %if.then86
	movl	$0, -12(%rbp)
.LBB283_40:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB283_45
# %bb.41:                               # %for.body
                                        #   in Loop: Header=BB283_40 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	cmpl	6360(%rcx), %eax
	jne	.LBB283_43
# %bb.42:                               # %if.then93
                                        #   in Loop: Header=BB283_40 Depth=1
	movabsq	$.L.str.13, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB283_43:                             # %if.end94
                                        #   in Loop: Header=BB283_40 Depth=1
	jmp	.LBB283_44
.LBB283_44:                             # %for.inc
                                        #   in Loop: Header=BB283_40 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB283_40
.LBB283_45:                             # %for.end
	jmp	.LBB283_46
.LBB283_46:                             # %if.end95
	movq	dpb, %rax
	movl	dpb+28, %ecx
	movq	(%rax,%rcx,8), %rdi
	movq	-8(%rbp), %rsi
	callq	insert_picture_in_dpb
	movq	-8(%rbp), %rax
	cmpl	$0, (%rax)
	je	.LBB283_48
# %bb.47:                               # %if.then101
	movq	dpb, %rax
	movl	dpb+28, %ecx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, dpb+56
	jmp	.LBB283_49
.LBB283_48:                             # %if.else104
	movq	$0, dpb+56
.LBB283_49:                             # %if.end105
	movl	dpb+28, %eax
	addl	$1, %eax
	movl	%eax, dpb+28
	callq	update_ref_list
	callq	update_ltref_list
	callq	dump_dpb
.LBB283_50:                             # %return
	cmpl	$1568482592, -24(%rbp)  # imm = 0x5D7D2520
	jne	.LBB283_52
.LBB283_51:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB283_52:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB283_51
.Lfunc_end283:
	.size	store_picture_in_dpb.220, .Lfunc_end283-store_picture_in_dpb.220
	.cfi_endproc
                                        # -- End function
	.globl	replace_top_pic_with_frame.221 # -- Begin function replace_top_pic_with_frame.221
	.p2align	4, 0x90
	.type	replace_top_pic_with_frame.221,@function
replace_top_pic_with_frame.221:         # @replace_top_pic_with_frame.221
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$733022547, -32(%rbp)   # imm = 0x2BB10953
	movq	%rdi, -24(%rbp)
	movq	$0, -16(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 6380(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB284_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rdi
	callq	UnifiedOneForthPix
.LBB284_2:                              # %if.end
	movl	$0, -28(%rbp)
	movl	$0, -4(%rbp)
.LBB284_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB284_9
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB284_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jne	.LBB284_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB284_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, (%rax)
	jne	.LBB284_7
# %bb.6:                                # %if.then11
	movl	$1, -28(%rbp)
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB284_10
.LBB284_7:                              # %if.end14
                                        #   in Loop: Header=BB284_3 Depth=1
	jmp	.LBB284_8
.LBB284_8:                              # %for.inc
                                        #   in Loop: Header=BB284_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB284_3
.LBB284_9:                              # %for.end.loopexit
	jmp	.LBB284_10
.LBB284_10:                             # %for.end
	cmpl	$0, -28(%rbp)
	jne	.LBB284_12
# %bb.11:                               # %if.then16
	movabsq	$.L.str.14, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB284_12:                             # %if.end17
	movq	-16(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-16(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movq	-16(%rbp), %rax
	movl	$3, (%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB284_16
# %bb.13:                               # %if.then22
	movq	-16(%rbp), %rax
	movl	$3, 4(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB284_15
# %bb.14:                               # %if.then24
	movq	-16(%rbp), %rax
	movl	$3, 8(%rax)
.LBB284_15:                             # %if.end26
	jmp	.LBB284_16
.LBB284_16:                             # %if.end27
	movq	-16(%rbp), %rdi
	callq	dpb_split_field
	callq	update_ref_list
	callq	update_ltref_list
	cmpl	$733022547, -32(%rbp)   # imm = 0x2BB10953
	jne	.LBB284_18
.LBB284_17:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB284_18:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB284_17
.Lfunc_end284:
	.size	replace_top_pic_with_frame.221, .Lfunc_end284-replace_top_pic_with_frame.221
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function reorder_short_term.222
	.type	reorder_short_term.222,@function
reorder_short_term.222:                 # @reorder_short_term.222
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$50378497, -44(%rbp)    # imm = 0x300B701
	movq	%rdi, -16(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -40(%rbp)
	movl	-20(%rbp), %edi
	callq	get_short_term_pic
	movq	%rax, -56(%rbp)
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB285_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-40(%rbp), %rcx
	cmpl	(%rcx), %eax
	jle	.LBB285_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB285_1 Depth=1
	movq	-16(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB285_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB285_1
.LBB285_4:                              # %for.end
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movl	(%rdx), %esi
	movl	%esi, %edi
	addl	$1, %edi
	movl	%edi, (%rdx)
	movslq	%esi, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB285_5:                              # %for.cond5
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jg	.LBB285_13
# %bb.6:                                # %for.body8
                                        #   in Loop: Header=BB285_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	je	.LBB285_11
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB285_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB285_9
# %bb.8:                                # %lor.lhs.false
                                        #   in Loop: Header=BB285_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6364(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB285_10
.LBB285_9:                              # %if.then17
                                        #   in Loop: Header=BB285_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movl	-28(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -28(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB285_10:                             # %if.end
                                        #   in Loop: Header=BB285_5 Depth=1
	jmp	.LBB285_11
.LBB285_11:                             # %if.end23
                                        #   in Loop: Header=BB285_5 Depth=1
	jmp	.LBB285_12
.LBB285_12:                             # %for.inc24
                                        #   in Loop: Header=BB285_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB285_5
.LBB285_13:                             # %for.end26
	cmpl	$50378497, -44(%rbp)    # imm = 0x300B701
	jne	.LBB285_15
.LBB285_14:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB285_15:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB285_14
.Lfunc_end285:
	.size	reorder_short_term.222, .Lfunc_end285-reorder_short_term.222
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_poc_asc.223
	.type	compare_fs_by_poc_asc.223,@function
compare_fs_by_poc_asc.223:              # @compare_fs_by_poc_asc.223
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$375573409, -16(%rbp)   # imm = 0x1662CBA1
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB286_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB286_5
.LBB286_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jle	.LBB286_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB286_5
.LBB286_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB286_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$375573409, -16(%rbp)   # imm = 0x1662CBA1
	jne	.LBB286_7
.LBB286_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB286_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB286_6
.Lfunc_end286:
	.size	compare_fs_by_poc_asc.223, .Lfunc_end286-compare_fs_by_poc_asc.223
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_assign_long_term_frame_idx.224
	.type	mm_assign_long_term_frame_idx.224,@function
mm_assign_long_term_frame_idx.224:      # @mm_assign_long_term_frame_idx.224
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$470395008, -32(%rbp)   # imm = 0x1C09A880
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -16(%rbp)
	movq	-24(%rbp), %rdi
	movl	-28(%rbp), %esi
	callq	get_pic_num_x
	movl	%eax, -8(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB287_2
# %bb.1:                                # %if.then
	movl	-16(%rbp), %edi
	callq	unmark_long_term_frame_for_reference_by_frame_idx
	jmp	.LBB287_18
.LBB287_2:                              # %if.else
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB287_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB287_14
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB287_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB287_8
# %bb.5:                                # %if.then3
                                        #   in Loop: Header=BB287_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB287_7
# %bb.6:                                # %if.then7
	movl	$1, -12(%rbp)
	jmp	.LBB287_15
.LBB287_7:                              # %if.end
                                        #   in Loop: Header=BB287_3 Depth=1
	jmp	.LBB287_8
.LBB287_8:                              # %if.end8
                                        #   in Loop: Header=BB287_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB287_12
# %bb.9:                                # %if.then14
                                        #   in Loop: Header=BB287_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB287_11
# %bb.10:                               # %if.then19
	movl	$2, -12(%rbp)
	jmp	.LBB287_15
.LBB287_11:                             # %if.end20
                                        #   in Loop: Header=BB287_3 Depth=1
	jmp	.LBB287_12
.LBB287_12:                             # %if.end21
                                        #   in Loop: Header=BB287_3 Depth=1
	jmp	.LBB287_13
.LBB287_13:                             # %for.inc
                                        #   in Loop: Header=BB287_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB287_3
.LBB287_14:                             # %for.end.loopexit
	jmp	.LBB287_15
.LBB287_15:                             # %for.end
	cmpl	$0, -12(%rbp)
	jne	.LBB287_17
# %bb.16:                               # %if.then23
	movabsq	$.L.str.24, %rdi
	movl	$200, %esi
	callq	error
.LBB287_17:                             # %if.end24
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-8(%rbp), %r8d
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	callq	unmark_long_term_field_for_reference_by_frame_idx
.LBB287_18:                             # %if.end25
	movq	-24(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-8(%rbp), %edx
	callq	mark_pic_long_term
	cmpl	$470395008, -32(%rbp)   # imm = 0x1C09A880
	jne	.LBB287_20
.LBB287_19:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB287_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB287_19
.Lfunc_end287:
	.size	mm_assign_long_term_frame_idx.224, .Lfunc_end287-mm_assign_long_term_frame_idx.224
	.cfi_endproc
                                        # -- End function
	.globl	getDpbSize.225          # -- Begin function getDpbSize.225
	.p2align	4, 0x90
	.type	getDpbSize.225,@function
getDpbSize.225:                         # @getDpbSize.225
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$106257714, -16(%rbp)   # imm = 0x6555D32
	movq	active_sps(%rip), %rax
	movl	1140(%rax), %ecx
	movl	1144(%rax), %edx
	addl	$1, %ecx
	addl	$1, %edx
	imull	%edx, %ecx
	movl	1148(%rax), %eax
	cmpl	$1, %eax
	movl	$2, %eax
	adcl	$-1, %eax
	imull	%eax, %ecx
	shll	$7, %ecx
	leal	(%rcx,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movl	$0, -12(%rbp)
	movq	active_sps(%rip), %rax
	movl	24(%rax), %eax
	addl	$-10, %eax
	movl	%eax, %ecx
	subl	$41, %ecx
	ja	.LBB288_17
# %bb.1:                                # %entry
	movq	.LJTI288_0(,%rax,8), %rax
	jmpq	*%rax
.LBB288_2:                              # %sw.bb
	movl	$152064, -12(%rbp)      # imm = 0x25200
	jmp	.LBB288_18
.LBB288_3:                              # %sw.bb4
	movl	$345600, -12(%rbp)      # imm = 0x54600
	jmp	.LBB288_18
.LBB288_4:                              # %sw.bb5
	movl	$912384, -12(%rbp)      # imm = 0xDEC00
	jmp	.LBB288_18
.LBB288_5:                              # %sw.bb6
	movl	$912384, -12(%rbp)      # imm = 0xDEC00
	jmp	.LBB288_18
.LBB288_6:                              # %sw.bb7
	movl	$912384, -12(%rbp)      # imm = 0xDEC00
	jmp	.LBB288_18
.LBB288_7:                              # %sw.bb8
	movl	$1824768, -12(%rbp)     # imm = 0x1BD800
	jmp	.LBB288_18
.LBB288_8:                              # %sw.bb9
	movl	$3110400, -12(%rbp)     # imm = 0x2F7600
	jmp	.LBB288_18
.LBB288_9:                              # %sw.bb10
	movl	$3110400, -12(%rbp)     # imm = 0x2F7600
	jmp	.LBB288_18
.LBB288_10:                             # %sw.bb11
	movl	$6912000, -12(%rbp)     # imm = 0x697800
	jmp	.LBB288_18
.LBB288_11:                             # %sw.bb12
	movl	$7864320, -12(%rbp)     # imm = 0x780000
	jmp	.LBB288_18
.LBB288_12:                             # %sw.bb13
	movl	$12582912, -12(%rbp)    # imm = 0xC00000
	jmp	.LBB288_18
.LBB288_13:                             # %sw.bb14
	movl	$12582912, -12(%rbp)    # imm = 0xC00000
	jmp	.LBB288_18
.LBB288_14:                             # %sw.bb15
	movl	$12582912, -12(%rbp)    # imm = 0xC00000
	jmp	.LBB288_18
.LBB288_15:                             # %sw.bb16
	movl	$42393600, -12(%rbp)    # imm = 0x286E000
	jmp	.LBB288_18
.LBB288_16:                             # %sw.bb17
	movl	$70778880, -12(%rbp)    # imm = 0x4380000
	jmp	.LBB288_18
.LBB288_17:                             # %sw.default
	movabsq	$.L.str, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB288_18:                             # %sw.epilog
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
	cmpl	$16, -12(%rbp)
	jge	.LBB288_20
# %bb.19:                               # %cond.true
	movl	-12(%rbp), %ebx
	jmp	.LBB288_21
.LBB288_20:                             # %cond.false
	movl	$16, %ebx
	jmp	.LBB288_21
.LBB288_21:                             # %cond.end
	cmpl	$106257714, -16(%rbp)   # imm = 0x6555D32
	jne	.LBB288_23
.LBB288_22:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB288_23:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB288_22
.Lfunc_end288:
	.size	getDpbSize.225, .Lfunc_end288-getDpbSize.225
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI288_0:
	.quad	.LBB288_2
	.quad	.LBB288_3
	.quad	.LBB288_4
	.quad	.LBB288_5
	.quad	.LBB288_17
	.quad	.LBB288_17
	.quad	.LBB288_17
	.quad	.LBB288_17
	.quad	.LBB288_17
	.quad	.LBB288_17
	.quad	.LBB288_6
	.quad	.LBB288_7
	.quad	.LBB288_8
	.quad	.LBB288_17
	.quad	.LBB288_17
	.quad	.LBB288_17
	.quad	.LBB288_17
	.quad	.LBB288_17
	.quad	.LBB288_17
	.quad	.LBB288_17
	.quad	.LBB288_9
	.quad	.LBB288_10
	.quad	.LBB288_11
	.quad	.LBB288_17
	.quad	.LBB288_17
	.quad	.LBB288_17
	.quad	.LBB288_17
	.quad	.LBB288_17
	.quad	.LBB288_17
	.quad	.LBB288_17
	.quad	.LBB288_12
	.quad	.LBB288_13
	.quad	.LBB288_14
	.quad	.LBB288_17
	.quad	.LBB288_17
	.quad	.LBB288_17
	.quad	.LBB288_17
	.quad	.LBB288_17
	.quad	.LBB288_17
	.quad	.LBB288_17
	.quad	.LBB288_15
	.quad	.LBB288_16
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function gen_pic_list_from_frame_list.226
	.type	gen_pic_list_from_frame_list.226,@function
gen_pic_list_from_frame_list.226:       # @gen_pic_list_from_frame_list.226
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1275426277, -64(%rbp)  # imm = 0x4C0575E5
	movl	%edi, -44(%rbp)
	movq	%rsi, -24(%rbp)
	movl	%edx, -12(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -32(%rbp)
	movl	%r9d, -60(%rbp)
	movl	$0, -4(%rbp)
	movl	$0, -8(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB289_2
# %bb.1:                                # %if.then
	movabsq	$is_long_ref, %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB289_3
.LBB289_2:                              # %if.else
	movabsq	$is_short_ref, %rax
	movq	%rax, -40(%rbp)
.LBB289_3:                              # %if.end
	cmpl	$1, -44(%rbp)
	jne	.LBB289_28
# %bb.4:                                # %if.then1
	jmp	.LBB289_5
.LBB289_5:                              # %while.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB289_9 Depth 2
                                        #     Child Loop BB289_18 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	movb	$1, %al
	jl	.LBB289_7
# %bb.6:                                # %lor.rhs
                                        #   in Loop: Header=BB289_5 Depth=1
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	setl	%al
.LBB289_7:                              # %lor.end
                                        #   in Loop: Header=BB289_5 Depth=1
	testb	$1, %al
	jne	.LBB289_8
	jmp	.LBB289_27
.LBB289_8:                              # %while.body
                                        #   in Loop: Header=BB289_5 Depth=1
	jmp	.LBB289_9
.LBB289_9:                              # %for.cond
                                        #   Parent Loop BB289_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB289_16
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB289_9 Depth=2
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB289_14
# %bb.11:                               # %if.then6
                                        #   in Loop: Header=BB289_9 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB289_13
# %bb.12:                               # %if.then10
                                        #   in Loop: Header=BB289_5 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB289_17
.LBB289_13:                             # %if.end17
                                        #   in Loop: Header=BB289_9 Depth=2
	jmp	.LBB289_14
.LBB289_14:                             # %if.end18
                                        #   in Loop: Header=BB289_9 Depth=2
	jmp	.LBB289_15
.LBB289_15:                             # %for.inc
                                        #   in Loop: Header=BB289_9 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB289_9
.LBB289_16:                             # %for.end.loopexit
                                        #   in Loop: Header=BB289_5 Depth=1
	jmp	.LBB289_17
.LBB289_17:                             # %for.end
                                        #   in Loop: Header=BB289_5 Depth=1
	jmp	.LBB289_18
.LBB289_18:                             # %for.cond20
                                        #   Parent Loop BB289_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB289_25
# %bb.19:                               # %for.body22
                                        #   in Loop: Header=BB289_18 Depth=2
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB289_23
# %bb.20:                               # %if.then28
                                        #   in Loop: Header=BB289_18 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB289_22
# %bb.21:                               # %if.then33
                                        #   in Loop: Header=BB289_5 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB289_26
.LBB289_22:                             # %if.end41
                                        #   in Loop: Header=BB289_18 Depth=2
	jmp	.LBB289_23
.LBB289_23:                             # %if.end42
                                        #   in Loop: Header=BB289_18 Depth=2
	jmp	.LBB289_24
.LBB289_24:                             # %for.inc43
                                        #   in Loop: Header=BB289_18 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB289_18
.LBB289_25:                             # %for.end45.loopexit
                                        #   in Loop: Header=BB289_5 Depth=1
	jmp	.LBB289_26
.LBB289_26:                             # %for.end45
                                        #   in Loop: Header=BB289_5 Depth=1
	jmp	.LBB289_5
.LBB289_27:                             # %while.end
	jmp	.LBB289_28
.LBB289_28:                             # %if.end46
	cmpl	$2, -44(%rbp)
	jne	.LBB289_53
# %bb.29:                               # %if.then48
	jmp	.LBB289_30
.LBB289_30:                             # %while.cond49
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB289_34 Depth 2
                                        #     Child Loop BB289_43 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	movb	$1, %al
	jl	.LBB289_32
# %bb.31:                               # %lor.rhs51
                                        #   in Loop: Header=BB289_30 Depth=1
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	setl	%al
.LBB289_32:                             # %lor.end53
                                        #   in Loop: Header=BB289_30 Depth=1
	testb	$1, %al
	jne	.LBB289_33
	jmp	.LBB289_52
.LBB289_33:                             # %while.body54
                                        #   in Loop: Header=BB289_30 Depth=1
	jmp	.LBB289_34
.LBB289_34:                             # %for.cond55
                                        #   Parent Loop BB289_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB289_41
# %bb.35:                               # %for.body57
                                        #   in Loop: Header=BB289_34 Depth=2
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB289_39
# %bb.36:                               # %if.then63
                                        #   in Loop: Header=BB289_34 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB289_38
# %bb.37:                               # %if.then69
                                        #   in Loop: Header=BB289_30 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB289_42
.LBB289_38:                             # %if.end77
                                        #   in Loop: Header=BB289_34 Depth=2
	jmp	.LBB289_39
.LBB289_39:                             # %if.end78
                                        #   in Loop: Header=BB289_34 Depth=2
	jmp	.LBB289_40
.LBB289_40:                             # %for.inc79
                                        #   in Loop: Header=BB289_34 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB289_34
.LBB289_41:                             # %for.end81.loopexit
                                        #   in Loop: Header=BB289_30 Depth=1
	jmp	.LBB289_42
.LBB289_42:                             # %for.end81
                                        #   in Loop: Header=BB289_30 Depth=1
	jmp	.LBB289_43
.LBB289_43:                             # %for.cond82
                                        #   Parent Loop BB289_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB289_50
# %bb.44:                               # %for.body84
                                        #   in Loop: Header=BB289_43 Depth=2
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB289_48
# %bb.45:                               # %if.then90
                                        #   in Loop: Header=BB289_43 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB289_47
# %bb.46:                               # %if.then96
                                        #   in Loop: Header=BB289_30 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB289_51
.LBB289_47:                             # %if.end104
                                        #   in Loop: Header=BB289_43 Depth=2
	jmp	.LBB289_48
.LBB289_48:                             # %if.end105
                                        #   in Loop: Header=BB289_43 Depth=2
	jmp	.LBB289_49
.LBB289_49:                             # %for.inc106
                                        #   in Loop: Header=BB289_43 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB289_43
.LBB289_50:                             # %for.end108.loopexit
                                        #   in Loop: Header=BB289_30 Depth=1
	jmp	.LBB289_51
.LBB289_51:                             # %for.end108
                                        #   in Loop: Header=BB289_30 Depth=1
	jmp	.LBB289_30
.LBB289_52:                             # %while.end109
	jmp	.LBB289_53
.LBB289_53:                             # %if.end110
	cmpl	$1275426277, -64(%rbp)  # imm = 0x4C0575E5
	jne	.LBB289_55
.LBB289_54:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB289_55:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB289_54
.Lfunc_end289:
	.size	gen_pic_list_from_frame_list.226, .Lfunc_end289-gen_pic_list_from_frame_list.226
	.cfi_endproc
                                        # -- End function
	.globl	compute_colocated.227   # -- Begin function compute_colocated.227
	.p2align	4, 0x90
	.type	compute_colocated.227,@function
compute_colocated.227:                  # @compute_colocated.227
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$1315713126, -72(%rbp)  # imm = 0x4E6C3066
	movq	%rdi, -24(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -56(%rbp)
	movq	%rax, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB290_2
# %bb.1:                                # %if.then
	movq	-48(%rbp), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-48(%rbp), %rax
	movq	40(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	jmp	.LBB290_11
.LBB290_2:                              # %if.else
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB290_10
# %bb.3:                                # %if.then6
	movq	img, %rax
	movl	28(%rax), %eax
	movq	-32(%rbp), %rcx
	cmpl	(%rcx), %eax
	je	.LBB290_9
# %bb.4:                                # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$0, 6412(%rax)
	je	.LBB290_9
# %bb.5:                                # %if.then11
	movq	img, %rax
	cmpl	$1, 28(%rax)
	jne	.LBB290_7
# %bb.6:                                # %if.then14
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	6528(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -56(%rbp)
	movq	%rax, -40(%rbp)
	jmp	.LBB290_8
.LBB290_7:                              # %if.else17
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	6536(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -56(%rbp)
	movq	%rax, -40(%rbp)
.LBB290_8:                              # %if.end
	jmp	.LBB290_9
.LBB290_9:                              # %if.end20
	jmp	.LBB290_10
.LBB290_10:                             # %if.end21
	jmp	.LBB290_11
.LBB290_11:                             # %if.end22
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB290_13
# %bb.12:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB290_29
.LBB290_13:                             # %if.then25
	movl	$0, -12(%rbp)
.LBB290_14:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB290_16 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB290_28
# %bb.15:                               # %for.body
                                        #   in Loop: Header=BB290_14 Depth=1
	movl	$0, -16(%rbp)
.LBB290_16:                             # %for.cond27
                                        #   Parent Loop BB290_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB290_26
# %bb.17:                               # %for.body30
                                        #   in Loop: Header=BB290_16 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB290_23
# %bb.18:                               # %land.lhs.true33
                                        #   in Loop: Header=BB290_16 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB290_23
# %bb.19:                               # %if.then38
                                        #   in Loop: Header=BB290_16 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-56(%rbp), %rax
	subl	4(%rax), %edi
	callq	abs
	movl	%eax, %ebx
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-40(%rbp), %rax
	subl	4(%rax), %edi
	callq	abs
	cmpl	%eax, %ebx
	jle	.LBB290_21
# %bb.20:                               # %if.then46
                                        #   in Loop: Header=BB290_16 Depth=2
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	jmp	.LBB290_22
.LBB290_21:                             # %if.else160
                                        #   in Loop: Header=BB290_16 Depth=2
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-56(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB290_22:                             # %if.end283
                                        #   in Loop: Header=BB290_16 Depth=2
	jmp	.LBB290_24
.LBB290_23:                             # %if.else284
                                        #   in Loop: Header=BB290_16 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB290_24:                             # %if.end391
                                        #   in Loop: Header=BB290_16 Depth=2
	jmp	.LBB290_25
.LBB290_25:                             # %for.inc
                                        #   in Loop: Header=BB290_16 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB290_16
.LBB290_26:                             # %for.end
                                        #   in Loop: Header=BB290_14 Depth=1
	jmp	.LBB290_27
.LBB290_27:                             # %for.inc392
                                        #   in Loop: Header=BB290_14 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB290_14
.LBB290_28:                             # %for.end394
	jmp	.LBB290_29
.LBB290_29:                             # %if.end395
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB290_31
# %bb.30:                               # %lor.lhs.false398
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB290_241
.LBB290_31:                             # %if.then401
	movl	$0, -16(%rbp)
.LBB290_32:                             # %for.cond402
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB290_34 Depth 2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB290_240
# %bb.33:                               # %for.body407
                                        #   in Loop: Header=BB290_32 Depth=1
	movl	$0, -12(%rbp)
.LBB290_34:                             # %for.cond408
                                        #   Parent Loop BB290_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB290_238
# %bb.35:                               # %for.body413
                                        #   in Loop: Header=BB290_34 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB290_114
# %bb.36:                               # %if.then416
                                        #   in Loop: Header=BB290_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB290_38
# %bb.37:                               # %cond.true
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB290_39
.LBB290_38:                             # %cond.false
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB290_39:                             # %cond.end
                                        #   in Loop: Header=BB290_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB290_41
# %bb.40:                               # %cond.true425
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB290_42
.LBB290_41:                             # %cond.false427
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB290_42:                             # %cond.end429
                                        #   in Loop: Header=BB290_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB290_44
# %bb.43:                               # %cond.true445
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB290_45
.LBB290_44:                             # %cond.false447
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB290_45:                             # %cond.end449
                                        #   in Loop: Header=BB290_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB290_47
# %bb.46:                               # %cond.true455
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB290_48
.LBB290_47:                             # %cond.false457
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB290_48:                             # %cond.end459
                                        #   in Loop: Header=BB290_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB290_50
# %bb.49:                               # %cond.true475
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB290_51
.LBB290_50:                             # %cond.false477
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB290_51:                             # %cond.end479
                                        #   in Loop: Header=BB290_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB290_53
# %bb.52:                               # %cond.true485
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB290_54
.LBB290_53:                             # %cond.false487
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB290_54:                             # %cond.end489
                                        #   in Loop: Header=BB290_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB290_56
# %bb.55:                               # %cond.true505
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB290_57
.LBB290_56:                             # %cond.false507
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB290_57:                             # %cond.end509
                                        #   in Loop: Header=BB290_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB290_59
# %bb.58:                               # %cond.true515
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB290_60
.LBB290_59:                             # %cond.false517
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB290_60:                             # %cond.end519
                                        #   in Loop: Header=BB290_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB290_62
# %bb.61:                               # %cond.true535
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB290_63
.LBB290_62:                             # %cond.false537
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB290_63:                             # %cond.end539
                                        #   in Loop: Header=BB290_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB290_65
# %bb.64:                               # %cond.true545
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB290_66
.LBB290_65:                             # %cond.false547
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB290_66:                             # %cond.end549
                                        #   in Loop: Header=BB290_34 Depth=2
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB290_68
# %bb.67:                               # %if.then556
                                        #   in Loop: Header=BB290_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	$-1, (%rax,%rcx,8)
	jmp	.LBB290_81
.LBB290_68:                             # %if.else569
                                        #   in Loop: Header=BB290_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB290_70
# %bb.69:                               # %cond.true574
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB290_71
.LBB290_70:                             # %cond.false576
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB290_71:                             # %cond.end578
                                        #   in Loop: Header=BB290_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB290_73
# %bb.72:                               # %cond.true584
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB290_74
.LBB290_73:                             # %cond.false586
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB290_74:                             # %cond.end588
                                        #   in Loop: Header=BB290_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB290_76
# %bb.75:                               # %cond.true602
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB290_77
.LBB290_76:                             # %cond.false604
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB290_77:                             # %cond.end606
                                        #   in Loop: Header=BB290_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB290_79
# %bb.78:                               # %cond.true612
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB290_80
.LBB290_79:                             # %cond.false614
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB290_80:                             # %cond.end616
                                        #   in Loop: Header=BB290_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB290_81:                             # %if.end626
                                        #   in Loop: Header=BB290_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB290_83
# %bb.82:                               # %cond.true631
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB290_84
.LBB290_83:                             # %cond.false633
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB290_84:                             # %cond.end635
                                        #   in Loop: Header=BB290_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB290_86
# %bb.85:                               # %cond.true641
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB290_87
.LBB290_86:                             # %cond.false643
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB290_87:                             # %cond.end645
                                        #   in Loop: Header=BB290_34 Depth=2
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB290_89
# %bb.88:                               # %if.then652
                                        #   in Loop: Header=BB290_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	$-1, (%rax,%rcx,8)
	jmp	.LBB290_102
.LBB290_89:                             # %if.else665
                                        #   in Loop: Header=BB290_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB290_91
# %bb.90:                               # %cond.true670
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB290_92
.LBB290_91:                             # %cond.false672
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB290_92:                             # %cond.end674
                                        #   in Loop: Header=BB290_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB290_94
# %bb.93:                               # %cond.true680
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB290_95
.LBB290_94:                             # %cond.false682
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB290_95:                             # %cond.end684
                                        #   in Loop: Header=BB290_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB290_97
# %bb.96:                               # %cond.true698
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB290_98
.LBB290_97:                             # %cond.false700
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB290_98:                             # %cond.end702
                                        #   in Loop: Header=BB290_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB290_100
# %bb.99:                               # %cond.true708
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB290_101
.LBB290_100:                            # %cond.false710
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB290_101:                            # %cond.end712
                                        #   in Loop: Header=BB290_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB290_102:                            # %if.end722
                                        #   in Loop: Header=BB290_34 Depth=2
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB290_113
# %bb.103:                              # %if.then727
                                        #   in Loop: Header=BB290_34 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 4864(%rax)
	jne	.LBB290_107
# %bb.104:                              # %land.lhs.true730
                                        #   in Loop: Header=BB290_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB290_107
# %bb.105:                              # %land.lhs.true740
                                        #   in Loop: Header=BB290_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB290_107
# %bb.106:                              # %land.lhs.true752
                                        #   in Loop: Header=BB290_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB290_112
.LBB290_107:                            # %lor.rhs
                                        #   in Loop: Header=BB290_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB290_111
# %bb.108:                              # %land.lhs.true774
                                        #   in Loop: Header=BB290_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB290_111
# %bb.109:                              # %land.lhs.true784
                                        #   in Loop: Header=BB290_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB290_111
# %bb.110:                              # %land.rhs
                                        #   in Loop: Header=BB290_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB290_111:                            # %land.end
                                        #   in Loop: Header=BB290_34 Depth=2
.LBB290_112:                            # %lor.end
                                        #   in Loop: Header=BB290_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	1624(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB290_113:                            # %if.end814
                                        #   in Loop: Header=BB290_34 Depth=2
	jmp	.LBB290_236
.LBB290_114:                            # %if.else815
                                        #   in Loop: Header=BB290_34 Depth=2
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB290_116
# %bb.115:                              # %cond.true820
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB290_117
.LBB290_116:                            # %cond.false822
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB290_117:                            # %cond.end824
                                        #   in Loop: Header=BB290_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB290_119
# %bb.118:                              # %cond.true830
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB290_120
.LBB290_119:                            # %cond.false832
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB290_120:                            # %cond.end834
                                        #   in Loop: Header=BB290_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB290_122
# %bb.121:                              # %cond.true849
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB290_123
.LBB290_122:                            # %cond.false851
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB290_123:                            # %cond.end853
                                        #   in Loop: Header=BB290_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB290_125
# %bb.124:                              # %cond.true859
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB290_126
.LBB290_125:                            # %cond.false861
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB290_126:                            # %cond.end863
                                        #   in Loop: Header=BB290_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB290_128
# %bb.127:                              # %cond.true879
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB290_129
.LBB290_128:                            # %cond.false881
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB290_129:                            # %cond.end883
                                        #   in Loop: Header=BB290_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB290_131
# %bb.130:                              # %cond.true889
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB290_132
.LBB290_131:                            # %cond.false891
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB290_132:                            # %cond.end893
                                        #   in Loop: Header=BB290_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB290_134
# %bb.133:                              # %cond.true909
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB290_135
.LBB290_134:                            # %cond.false911
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB290_135:                            # %cond.end913
                                        #   in Loop: Header=BB290_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB290_137
# %bb.136:                              # %cond.true919
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB290_138
.LBB290_137:                            # %cond.false921
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB290_138:                            # %cond.end923
                                        #   in Loop: Header=BB290_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB290_140
# %bb.139:                              # %cond.true939
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB290_141
.LBB290_140:                            # %cond.false941
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB290_141:                            # %cond.end943
                                        #   in Loop: Header=BB290_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB290_143
# %bb.142:                              # %cond.true949
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB290_144
.LBB290_143:                            # %cond.false951
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB290_144:                            # %cond.end953
                                        #   in Loop: Header=BB290_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	4832(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB290_146
# %bb.145:                              # %cond.true966
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB290_147
.LBB290_146:                            # %cond.false968
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB290_147:                            # %cond.end970
                                        #   in Loop: Header=BB290_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB290_149
# %bb.148:                              # %cond.true976
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB290_150
.LBB290_149:                            # %cond.false978
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB290_150:                            # %cond.end980
                                        #   in Loop: Header=BB290_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	4832(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-56(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB290_152
# %bb.151:                              # %cond.true994
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB290_153
.LBB290_152:                            # %cond.false996
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB290_153:                            # %cond.end998
                                        #   in Loop: Header=BB290_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB290_155
# %bb.154:                              # %cond.true1004
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB290_156
.LBB290_155:                            # %cond.false1006
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB290_156:                            # %cond.end1008
                                        #   in Loop: Header=BB290_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	4840(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-56(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB290_158
# %bb.157:                              # %cond.true1021
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB290_159
.LBB290_158:                            # %cond.false1023
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB290_159:                            # %cond.end1025
                                        #   in Loop: Header=BB290_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB290_161
# %bb.160:                              # %cond.true1031
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB290_162
.LBB290_161:                            # %cond.false1033
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB290_162:                            # %cond.end1035
                                        #   in Loop: Header=BB290_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	4840(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB290_173
# %bb.163:                              # %if.then1048
                                        #   in Loop: Header=BB290_34 Depth=2
	movq	-56(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB290_167
# %bb.164:                              # %land.lhs.true1051
                                        #   in Loop: Header=BB290_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB290_167
# %bb.165:                              # %land.lhs.true1061
                                        #   in Loop: Header=BB290_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB290_167
# %bb.166:                              # %land.lhs.true1074
                                        #   in Loop: Header=BB290_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB290_172
.LBB290_167:                            # %lor.rhs1087
                                        #   in Loop: Header=BB290_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB290_171
# %bb.168:                              # %land.lhs.true1097
                                        #   in Loop: Header=BB290_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB290_171
# %bb.169:                              # %land.lhs.true1107
                                        #   in Loop: Header=BB290_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB290_171
# %bb.170:                              # %land.rhs1120
                                        #   in Loop: Header=BB290_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB290_171:                            # %land.end1133
                                        #   in Loop: Header=BB290_34 Depth=2
.LBB290_172:                            # %lor.end1134
                                        #   in Loop: Header=BB290_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	4856(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB290_173:                            # %if.end1142
                                        #   in Loop: Header=BB290_34 Depth=2
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB290_175
# %bb.174:                              # %cond.true1147
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB290_176
.LBB290_175:                            # %cond.false1149
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB290_176:                            # %cond.end1151
                                        #   in Loop: Header=BB290_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB290_178
# %bb.177:                              # %cond.true1157
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB290_179
.LBB290_178:                            # %cond.false1159
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB290_179:                            # %cond.end1161
                                        #   in Loop: Header=BB290_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB290_181
# %bb.180:                              # %cond.true1176
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB290_182
.LBB290_181:                            # %cond.false1178
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB290_182:                            # %cond.end1180
                                        #   in Loop: Header=BB290_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB290_184
# %bb.183:                              # %cond.true1186
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB290_185
.LBB290_184:                            # %cond.false1188
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB290_185:                            # %cond.end1190
                                        #   in Loop: Header=BB290_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB290_187
# %bb.186:                              # %cond.true1206
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB290_188
.LBB290_187:                            # %cond.false1208
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB290_188:                            # %cond.end1210
                                        #   in Loop: Header=BB290_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB290_190
# %bb.189:                              # %cond.true1216
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB290_191
.LBB290_190:                            # %cond.false1218
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB290_191:                            # %cond.end1220
                                        #   in Loop: Header=BB290_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB290_193
# %bb.192:                              # %cond.true1236
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB290_194
.LBB290_193:                            # %cond.false1238
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB290_194:                            # %cond.end1240
                                        #   in Loop: Header=BB290_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB290_196
# %bb.195:                              # %cond.true1246
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB290_197
.LBB290_196:                            # %cond.false1248
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB290_197:                            # %cond.end1250
                                        #   in Loop: Header=BB290_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB290_199
# %bb.198:                              # %cond.true1266
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB290_200
.LBB290_199:                            # %cond.false1268
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB290_200:                            # %cond.end1270
                                        #   in Loop: Header=BB290_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB290_202
# %bb.201:                              # %cond.true1276
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB290_203
.LBB290_202:                            # %cond.false1278
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB290_203:                            # %cond.end1280
                                        #   in Loop: Header=BB290_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	3216(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB290_205
# %bb.204:                              # %cond.true1293
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB290_206
.LBB290_205:                            # %cond.false1295
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB290_206:                            # %cond.end1297
                                        #   in Loop: Header=BB290_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB290_208
# %bb.207:                              # %cond.true1303
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB290_209
.LBB290_208:                            # %cond.false1305
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB290_209:                            # %cond.end1307
                                        #   in Loop: Header=BB290_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	3216(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-40(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB290_211
# %bb.210:                              # %cond.true1321
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB290_212
.LBB290_211:                            # %cond.false1323
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB290_212:                            # %cond.end1325
                                        #   in Loop: Header=BB290_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB290_214
# %bb.213:                              # %cond.true1331
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB290_215
.LBB290_214:                            # %cond.false1333
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB290_215:                            # %cond.end1335
                                        #   in Loop: Header=BB290_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	3224(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB290_217
# %bb.216:                              # %cond.true1348
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB290_218
.LBB290_217:                            # %cond.false1350
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB290_218:                            # %cond.end1352
                                        #   in Loop: Header=BB290_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB290_220
# %bb.219:                              # %cond.true1358
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB290_221
.LBB290_220:                            # %cond.false1360
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB290_221:                            # %cond.end1362
                                        #   in Loop: Header=BB290_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	3224(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB290_232
# %bb.222:                              # %if.then1375
                                        #   in Loop: Header=BB290_34 Depth=2
	movq	-40(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB290_226
# %bb.223:                              # %land.lhs.true1378
                                        #   in Loop: Header=BB290_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB290_226
# %bb.224:                              # %land.lhs.true1388
                                        #   in Loop: Header=BB290_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB290_226
# %bb.225:                              # %land.lhs.true1401
                                        #   in Loop: Header=BB290_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB290_231
.LBB290_226:                            # %lor.rhs1414
                                        #   in Loop: Header=BB290_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB290_230
# %bb.227:                              # %land.lhs.true1424
                                        #   in Loop: Header=BB290_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB290_230
# %bb.228:                              # %land.lhs.true1434
                                        #   in Loop: Header=BB290_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB290_230
# %bb.229:                              # %land.rhs1447
                                        #   in Loop: Header=BB290_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB290_230:                            # %land.end1460
                                        #   in Loop: Header=BB290_34 Depth=2
.LBB290_231:                            # %lor.end1461
                                        #   in Loop: Header=BB290_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	3240(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB290_232:                            # %if.end1469
                                        #   in Loop: Header=BB290_34 Depth=2
	movq	img, %rax
	cmpl	$0, 71996(%rax)
	jne	.LBB290_235
# %bb.233:                              # %land.lhs.true1473
                                        #   in Loop: Header=BB290_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB290_235
# %bb.234:                              # %if.then1481
                                        #   in Loop: Header=BB290_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
.LBB290_235:                            # %if.end1522
                                        #   in Loop: Header=BB290_34 Depth=2
	jmp	.LBB290_236
.LBB290_236:                            # %if.end1523
                                        #   in Loop: Header=BB290_34 Depth=2
	jmp	.LBB290_237
.LBB290_237:                            # %for.inc1524
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB290_34
.LBB290_238:                            # %for.end1526
                                        #   in Loop: Header=BB290_32 Depth=1
	jmp	.LBB290_239
.LBB290_239:                            # %for.inc1527
                                        #   in Loop: Header=BB290_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB290_32
.LBB290_240:                            # %for.end1529
	jmp	.LBB290_241
.LBB290_241:                            # %if.end1530
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB290_243
# %bb.242:                              # %lor.lhs.false1533
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB290_259
.LBB290_243:                            # %if.then1536
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB290_258
# %bb.244:                              # %if.then1539
	movl	$0, -12(%rbp)
.LBB290_245:                            # %for.cond1540
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB290_247 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB290_257
# %bb.246:                              # %for.body1545
                                        #   in Loop: Header=BB290_245 Depth=1
	movl	$0, -16(%rbp)
.LBB290_247:                            # %for.cond1546
                                        #   Parent Loop BB290_245 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB290_255
# %bb.248:                              # %for.body1551
                                        #   in Loop: Header=BB290_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB290_253
# %bb.249:                              # %if.then1558
                                        #   in Loop: Header=BB290_247 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	subl	4(%rax), %edi
	callq	abs
	movl	%eax, %ebx
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	subl	4(%rax), %edi
	callq	abs
	cmpl	%eax, %ebx
	jle	.LBB290_251
# %bb.250:                              # %if.then1571
                                        #   in Loop: Header=BB290_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	jmp	.LBB290_252
.LBB290_251:                            # %if.else1699
                                        #   in Loop: Header=BB290_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB290_252:                            # %if.end1829
                                        #   in Loop: Header=BB290_247 Depth=2
	jmp	.LBB290_253
.LBB290_253:                            # %if.end1830
                                        #   in Loop: Header=BB290_247 Depth=2
	jmp	.LBB290_254
.LBB290_254:                            # %for.inc1831
                                        #   in Loop: Header=BB290_247 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB290_247
.LBB290_255:                            # %for.end1833
                                        #   in Loop: Header=BB290_245 Depth=1
	jmp	.LBB290_256
.LBB290_256:                            # %for.inc1834
                                        #   in Loop: Header=BB290_245 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB290_245
.LBB290_257:                            # %for.end1836
	jmp	.LBB290_258
.LBB290_258:                            # %if.end1837
	jmp	.LBB290_259
.LBB290_259:                            # %if.end1838
	movl	$0, -12(%rbp)
.LBB290_260:                            # %for.cond1839
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB290_262 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB290_330
# %bb.261:                              # %for.body1844
                                        #   in Loop: Header=BB290_260 Depth=1
	movl	$0, -16(%rbp)
.LBB290_262:                            # %for.cond1845
                                        #   Parent Loop BB290_260 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB290_328
# %bb.263:                              # %for.body1850
                                        #   in Loop: Header=BB290_262 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB290_265
# %bb.264:                              # %lor.lhs.false1853
                                        #   in Loop: Header=BB290_262 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB290_314
.LBB290_265:                            # %if.then1856
                                        #   in Loop: Header=BB290_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB290_267
# %bb.266:                              # %cond.true1861
                                        #   in Loop: Header=BB290_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB290_268
.LBB290_267:                            # %cond.false1863
                                        #   in Loop: Header=BB290_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB290_268:                            # %cond.end1865
                                        #   in Loop: Header=BB290_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB290_270
# %bb.269:                              # %cond.true1871
                                        #   in Loop: Header=BB290_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB290_271
.LBB290_270:                            # %cond.false1873
                                        #   in Loop: Header=BB290_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB290_271:                            # %cond.end1875
                                        #   in Loop: Header=BB290_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB290_273
# %bb.272:                              # %cond.true1891
                                        #   in Loop: Header=BB290_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB290_274
.LBB290_273:                            # %cond.false1893
                                        #   in Loop: Header=BB290_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB290_274:                            # %cond.end1895
                                        #   in Loop: Header=BB290_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB290_276
# %bb.275:                              # %cond.true1901
                                        #   in Loop: Header=BB290_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB290_277
.LBB290_276:                            # %cond.false1903
                                        #   in Loop: Header=BB290_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB290_277:                            # %cond.end1905
                                        #   in Loop: Header=BB290_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB290_279
# %bb.278:                              # %cond.true1921
                                        #   in Loop: Header=BB290_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB290_280
.LBB290_279:                            # %cond.false1923
                                        #   in Loop: Header=BB290_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB290_280:                            # %cond.end1925
                                        #   in Loop: Header=BB290_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB290_282
# %bb.281:                              # %cond.true1931
                                        #   in Loop: Header=BB290_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB290_283
.LBB290_282:                            # %cond.false1933
                                        #   in Loop: Header=BB290_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB290_283:                            # %cond.end1935
                                        #   in Loop: Header=BB290_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB290_285
# %bb.284:                              # %cond.true1951
                                        #   in Loop: Header=BB290_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB290_286
.LBB290_285:                            # %cond.false1953
                                        #   in Loop: Header=BB290_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB290_286:                            # %cond.end1955
                                        #   in Loop: Header=BB290_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB290_288
# %bb.287:                              # %cond.true1961
                                        #   in Loop: Header=BB290_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB290_289
.LBB290_288:                            # %cond.false1963
                                        #   in Loop: Header=BB290_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB290_289:                            # %cond.end1965
                                        #   in Loop: Header=BB290_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB290_291
# %bb.290:                              # %cond.true1981
                                        #   in Loop: Header=BB290_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB290_292
.LBB290_291:                            # %cond.false1983
                                        #   in Loop: Header=BB290_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB290_292:                            # %cond.end1985
                                        #   in Loop: Header=BB290_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB290_294
# %bb.293:                              # %cond.true1991
                                        #   in Loop: Header=BB290_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB290_295
.LBB290_294:                            # %cond.false1993
                                        #   in Loop: Header=BB290_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB290_295:                            # %cond.end1995
                                        #   in Loop: Header=BB290_262 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB290_297
# %bb.296:                              # %cond.true2009
                                        #   in Loop: Header=BB290_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB290_298
.LBB290_297:                            # %cond.false2011
                                        #   in Loop: Header=BB290_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB290_298:                            # %cond.end2013
                                        #   in Loop: Header=BB290_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB290_300
# %bb.299:                              # %cond.true2019
                                        #   in Loop: Header=BB290_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB290_301
.LBB290_300:                            # %cond.false2021
                                        #   in Loop: Header=BB290_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB290_301:                            # %cond.end2023
                                        #   in Loop: Header=BB290_262 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB290_303
# %bb.302:                              # %cond.true2037
                                        #   in Loop: Header=BB290_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB290_304
.LBB290_303:                            # %cond.false2039
                                        #   in Loop: Header=BB290_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB290_304:                            # %cond.end2041
                                        #   in Loop: Header=BB290_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB290_306
# %bb.305:                              # %cond.true2047
                                        #   in Loop: Header=BB290_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB290_307
.LBB290_306:                            # %cond.false2049
                                        #   in Loop: Header=BB290_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB290_307:                            # %cond.end2051
                                        #   in Loop: Header=BB290_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB290_309
# %bb.308:                              # %cond.true2065
                                        #   in Loop: Header=BB290_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB290_310
.LBB290_309:                            # %cond.false2067
                                        #   in Loop: Header=BB290_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB290_310:                            # %cond.end2069
                                        #   in Loop: Header=BB290_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB290_312
# %bb.311:                              # %cond.true2075
                                        #   in Loop: Header=BB290_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB290_313
.LBB290_312:                            # %cond.false2077
                                        #   in Loop: Header=BB290_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB290_313:                            # %cond.end2079
                                        #   in Loop: Header=BB290_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB290_315
.LBB290_314:                            # %if.else2089
                                        #   in Loop: Header=BB290_262 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB290_315:                            # %if.end2194
                                        #   in Loop: Header=BB290_262 Depth=2
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB290_326
# %bb.316:                              # %if.then2200
                                        #   in Loop: Header=BB290_262 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 4864(%rax)
	jne	.LBB290_320
# %bb.317:                              # %land.lhs.true2203
                                        #   in Loop: Header=BB290_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB290_320
# %bb.318:                              # %land.lhs.true2213
                                        #   in Loop: Header=BB290_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB290_320
# %bb.319:                              # %land.lhs.true2226
                                        #   in Loop: Header=BB290_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB290_325
.LBB290_320:                            # %lor.rhs2239
                                        #   in Loop: Header=BB290_262 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB290_324
# %bb.321:                              # %land.lhs.true2249
                                        #   in Loop: Header=BB290_262 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB290_324
# %bb.322:                              # %land.lhs.true2259
                                        #   in Loop: Header=BB290_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB290_324
# %bb.323:                              # %land.rhs2272
                                        #   in Loop: Header=BB290_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB290_324:                            # %land.end2285
                                        #   in Loop: Header=BB290_262 Depth=2
.LBB290_325:                            # %lor.end2286
                                        #   in Loop: Header=BB290_262 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	1624(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB290_326:                            # %if.end2295
                                        #   in Loop: Header=BB290_262 Depth=2
	jmp	.LBB290_327
.LBB290_327:                            # %for.inc2296
                                        #   in Loop: Header=BB290_262 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB290_262
.LBB290_328:                            # %for.end2298
                                        #   in Loop: Header=BB290_260 Depth=1
	jmp	.LBB290_329
.LBB290_329:                            # %for.inc2299
                                        #   in Loop: Header=BB290_260 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB290_260
.LBB290_330:                            # %for.end2301
	movq	img, %rax
	cmpl	$0, 71996(%rax)
	jne	.LBB290_397
# %bb.331:                              # %if.then2305
	movl	$0, -12(%rbp)
.LBB290_332:                            # %for.cond2306
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB290_334 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB290_349
# %bb.333:                              # %for.body2311
                                        #   in Loop: Header=BB290_332 Depth=1
	movl	$0, -16(%rbp)
.LBB290_334:                            # %for.cond2312
                                        #   Parent Loop BB290_332 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB290_347
# %bb.335:                              # %for.body2317
                                        #   in Loop: Header=BB290_334 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB290_338
# %bb.336:                              # %land.lhs.true2320
                                        #   in Loop: Header=BB290_334 Depth=2
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB290_338
# %bb.337:                              # %land.lhs.true2323
                                        #   in Loop: Header=BB290_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB290_340
.LBB290_338:                            # %lor.lhs.false2331
                                        #   in Loop: Header=BB290_334 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB290_341
# %bb.339:                              # %land.lhs.true2334
                                        #   in Loop: Header=BB290_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB290_341
.LBB290_340:                            # %if.then2342
                                        #   in Loop: Header=BB290_334 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %ecx
	shll	$1, %ecx
	movw	%cx, 2(%rax)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %ecx
	shll	$1, %ecx
	movw	%cx, 2(%rax)
	jmp	.LBB290_345
.LBB290_341:                            # %if.else2363
                                        #   in Loop: Header=BB290_334 Depth=2
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB290_344
# %bb.342:                              # %land.lhs.true2366
                                        #   in Loop: Header=BB290_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB290_344
# %bb.343:                              # %if.then2373
                                        #   in Loop: Header=BB290_334 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movswl	2(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movswl	2(%rcx), %eax
	cltd
	idivl	%esi
	movw	%ax, 2(%rcx)
.LBB290_344:                            # %if.end2394
                                        #   in Loop: Header=BB290_334 Depth=2
	jmp	.LBB290_345
.LBB290_345:                            # %if.end2395
                                        #   in Loop: Header=BB290_334 Depth=2
	jmp	.LBB290_346
.LBB290_346:                            # %for.inc2396
                                        #   in Loop: Header=BB290_334 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB290_334
.LBB290_347:                            # %for.end2398
                                        #   in Loop: Header=BB290_332 Depth=1
	jmp	.LBB290_348
.LBB290_348:                            # %for.inc2399
                                        #   in Loop: Header=BB290_332 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB290_332
.LBB290_349:                            # %for.end2401
	movl	$0, -12(%rbp)
.LBB290_350:                            # %for.cond2402
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB290_352 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	72400(%rcx), %ecx
	shll	$2, %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB290_396
# %bb.351:                              # %for.body2408
                                        #   in Loop: Header=BB290_350 Depth=1
	movl	$0, -16(%rbp)
.LBB290_352:                            # %for.cond2409
                                        #   Parent Loop BB290_350 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB290_394
# %bb.353:                              # %for.body2414
                                        #   in Loop: Header=BB290_352 Depth=2
	cmpl	$0, -12(%rbp)
	jne	.LBB290_361
# %bb.354:                              # %if.then2417
                                        #   in Loop: Header=BB290_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB290_356
# %bb.355:                              # %cond.true2428
                                        #   in Loop: Header=BB290_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB290_360
.LBB290_356:                            # %cond.false2429
                                        #   in Loop: Header=BB290_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB290_358
# %bb.357:                              # %cond.true2440
                                        #   in Loop: Header=BB290_352 Depth=2
	movl	$127, %eax
	jmp	.LBB290_359
.LBB290_358:                            # %cond.false2441
                                        #   in Loop: Header=BB290_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB290_359:                            # %cond.end2450
                                        #   in Loop: Header=BB290_352 Depth=2
.LBB290_360:                            # %cond.end2452
                                        #   in Loop: Header=BB290_352 Depth=2
	movl	%eax, -60(%rbp)
	jmp	.LBB290_377
.LBB290_361:                            # %if.else2454
                                        #   in Loop: Header=BB290_352 Depth=2
	cmpl	$2, -12(%rbp)
	jne	.LBB290_369
# %bb.362:                              # %if.then2457
                                        #   in Loop: Header=BB290_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB290_364
# %bb.363:                              # %cond.true2467
                                        #   in Loop: Header=BB290_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB290_368
.LBB290_364:                            # %cond.false2468
                                        #   in Loop: Header=BB290_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB290_366
# %bb.365:                              # %cond.true2479
                                        #   in Loop: Header=BB290_352 Depth=2
	movl	$127, %eax
	jmp	.LBB290_367
.LBB290_366:                            # %cond.false2480
                                        #   in Loop: Header=BB290_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB290_367:                            # %cond.end2489
                                        #   in Loop: Header=BB290_352 Depth=2
.LBB290_368:                            # %cond.end2491
                                        #   in Loop: Header=BB290_352 Depth=2
	movl	%eax, -60(%rbp)
	jmp	.LBB290_376
.LBB290_369:                            # %if.else2493
                                        #   in Loop: Header=BB290_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB290_371
# %bb.370:                              # %cond.true2503
                                        #   in Loop: Header=BB290_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB290_375
.LBB290_371:                            # %cond.false2504
                                        #   in Loop: Header=BB290_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB290_373
# %bb.372:                              # %cond.true2515
                                        #   in Loop: Header=BB290_352 Depth=2
	movl	$127, %eax
	jmp	.LBB290_374
.LBB290_373:                            # %cond.false2516
                                        #   in Loop: Header=BB290_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB290_374:                            # %cond.end2525
                                        #   in Loop: Header=BB290_352 Depth=2
.LBB290_375:                            # %cond.end2527
                                        #   in Loop: Header=BB290_352 Depth=2
	movl	%eax, -60(%rbp)
.LBB290_376:                            # %if.end2529
                                        #   in Loop: Header=BB290_352 Depth=2
	jmp	.LBB290_377
.LBB290_377:                            # %if.end2530
                                        #   in Loop: Header=BB290_352 Depth=2
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB290_379
# %bb.378:                              # %cond.true2545
                                        #   in Loop: Header=BB290_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB290_383
.LBB290_379:                            # %cond.false2546
                                        #   in Loop: Header=BB290_352 Depth=2
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB290_381
# %bb.380:                              # %cond.true2561
                                        #   in Loop: Header=BB290_352 Depth=2
	movl	$127, %eax
	jmp	.LBB290_382
.LBB290_381:                            # %cond.false2562
                                        #   in Loop: Header=BB290_352 Depth=2
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB290_382:                            # %cond.end2575
                                        #   in Loop: Header=BB290_352 Depth=2
.LBB290_383:                            # %cond.end2577
                                        #   in Loop: Header=BB290_352 Depth=2
	movl	%eax, -68(%rbp)
	cmpl	$0, -68(%rbp)
	je	.LBB290_391
# %bb.384:                              # %if.then2581
                                        #   in Loop: Header=BB290_352 Depth=2
	movl	-68(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-68(%rbp)
	movl	%eax, -64(%rbp)
	movl	-60(%rbp), %eax
	imull	-64(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB290_386
# %bb.385:                              # %cond.true2591
                                        #   in Loop: Header=BB290_352 Depth=2
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB290_390
.LBB290_386:                            # %cond.false2592
                                        #   in Loop: Header=BB290_352 Depth=2
	movl	-60(%rbp), %eax
	imull	-64(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB290_388
# %bb.387:                              # %cond.true2598
                                        #   in Loop: Header=BB290_352 Depth=2
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB290_389
.LBB290_388:                            # %cond.false2599
                                        #   in Loop: Header=BB290_352 Depth=2
	movl	-60(%rbp), %eax
	imull	-64(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB290_389:                            # %cond.end2603
                                        #   in Loop: Header=BB290_352 Depth=2
.LBB290_390:                            # %cond.end2605
                                        #   in Loop: Header=BB290_352 Depth=2
	movq	img, %rcx
	addq	$72016, %rcx            # imm = 0x11950
	movslq	-12(%rbp), %rdx
	imulq	$60, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB290_392
.LBB290_391:                            # %if.else2611
                                        #   in Loop: Header=BB290_352 Depth=2
	movq	img, %rax
	addq	$72016, %rax            # imm = 0x11950
	movslq	-12(%rbp), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$9999, (%rax,%rcx,4)    # imm = 0x270F
.LBB290_392:                            # %if.end2617
                                        #   in Loop: Header=BB290_352 Depth=2
	jmp	.LBB290_393
.LBB290_393:                            # %for.inc2618
                                        #   in Loop: Header=BB290_352 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB290_352
.LBB290_394:                            # %for.end2620
                                        #   in Loop: Header=BB290_350 Depth=1
	jmp	.LBB290_395
.LBB290_395:                            # %for.inc2621
                                        #   in Loop: Header=BB290_350 Depth=1
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB290_350
.LBB290_396:                            # %for.end2623
	jmp	.LBB290_397
.LBB290_397:                            # %if.end2624
	cmpl	$1315713126, -72(%rbp)  # imm = 0x4E6C3066
	jne	.LBB290_399
.LBB290_398:
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB290_399:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB290_398
.Lfunc_end290:
	.size	compute_colocated.227, .Lfunc_end290-compute_colocated.227
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_unmark_short_term_for_reference.228
	.type	mm_unmark_short_term_for_reference.228,@function
mm_unmark_short_term_for_reference.228: # @mm_unmark_short_term_for_reference.228
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1592921268, -12(%rbp)  # imm = 0x5EF20CB4
	movq	%rdi, -24(%rbp)
	movl	%esi, -16(%rbp)
	movq	-24(%rbp), %rdi
	movl	-16(%rbp), %esi
	callq	get_pic_num_x
	movl	%eax, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB291_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB291_26
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB291_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB291_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB291_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB291_8
# %bb.4:                                # %land.lhs.true
                                        #   in Loop: Header=BB291_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB291_8
# %bb.5:                                # %if.then6
                                        #   in Loop: Header=BB291_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB291_7
# %bb.6:                                # %if.then10
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_reference
	jmp	.LBB291_27
.LBB291_7:                              # %if.end
                                        #   in Loop: Header=BB291_1 Depth=1
	jmp	.LBB291_8
.LBB291_8:                              # %if.end13
                                        #   in Loop: Header=BB291_1 Depth=1
	jmp	.LBB291_24
.LBB291_9:                              # %if.else
                                        #   in Loop: Header=BB291_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB291_16
# %bb.10:                               # %land.lhs.true17
                                        #   in Loop: Header=BB291_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB291_16
# %bb.11:                               # %if.then23
                                        #   in Loop: Header=BB291_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB291_15
# %bb.12:                               # %if.then28
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$2, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB291_14
# %bb.13:                               # %if.then39
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
.LBB291_14:                             # %if.end44
	jmp	.LBB291_27
.LBB291_15:                             # %if.end45
                                        #   in Loop: Header=BB291_1 Depth=1
	jmp	.LBB291_16
.LBB291_16:                             # %if.end46
                                        #   in Loop: Header=BB291_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB291_23
# %bb.17:                               # %land.lhs.true52
                                        #   in Loop: Header=BB291_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	jne	.LBB291_23
# %bb.18:                               # %if.then58
                                        #   in Loop: Header=BB291_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB291_22
# %bb.19:                               # %if.then63
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB291_21
# %bb.20:                               # %if.then76
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
.LBB291_21:                             # %if.end81
	jmp	.LBB291_27
.LBB291_22:                             # %if.end82
                                        #   in Loop: Header=BB291_1 Depth=1
	jmp	.LBB291_23
.LBB291_23:                             # %if.end83
                                        #   in Loop: Header=BB291_1 Depth=1
	jmp	.LBB291_24
.LBB291_24:                             # %if.end84
                                        #   in Loop: Header=BB291_1 Depth=1
	jmp	.LBB291_25
.LBB291_25:                             # %for.inc
                                        #   in Loop: Header=BB291_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB291_1
.LBB291_26:                             # %for.end.loopexit
	jmp	.LBB291_27
.LBB291_27:                             # %for.end
	cmpl	$1592921268, -12(%rbp)  # imm = 0x5EF20CB4
	jne	.LBB291_29
.LBB291_28:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB291_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB291_28
.Lfunc_end291:
	.size	mm_unmark_short_term_for_reference.228, .Lfunc_end291-mm_unmark_short_term_for_reference.228
	.cfi_endproc
                                        # -- End function
	.globl	replace_top_pic_with_frame.229 # -- Begin function replace_top_pic_with_frame.229
	.p2align	4, 0x90
	.type	replace_top_pic_with_frame.229,@function
replace_top_pic_with_frame.229:         # @replace_top_pic_with_frame.229
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1415314118, -32(%rbp)  # imm = 0x545BFAC6
	movq	%rdi, -24(%rbp)
	movq	$0, -16(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 6380(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB292_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rdi
	callq	UnifiedOneForthPix
.LBB292_2:                              # %if.end
	movl	$0, -28(%rbp)
	movl	$0, -4(%rbp)
.LBB292_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB292_9
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB292_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jne	.LBB292_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB292_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, (%rax)
	jne	.LBB292_7
# %bb.6:                                # %if.then11
	movl	$1, -28(%rbp)
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB292_10
.LBB292_7:                              # %if.end14
                                        #   in Loop: Header=BB292_3 Depth=1
	jmp	.LBB292_8
.LBB292_8:                              # %for.inc
                                        #   in Loop: Header=BB292_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB292_3
.LBB292_9:                              # %for.end.loopexit
	jmp	.LBB292_10
.LBB292_10:                             # %for.end
	cmpl	$0, -28(%rbp)
	jne	.LBB292_12
# %bb.11:                               # %if.then16
	movabsq	$.L.str.14, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB292_12:                             # %if.end17
	movq	-16(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-16(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movq	-16(%rbp), %rax
	movl	$3, (%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB292_16
# %bb.13:                               # %if.then22
	movq	-16(%rbp), %rax
	movl	$3, 4(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB292_15
# %bb.14:                               # %if.then24
	movq	-16(%rbp), %rax
	movl	$3, 8(%rax)
.LBB292_15:                             # %if.end26
	jmp	.LBB292_16
.LBB292_16:                             # %if.end27
	movq	-16(%rbp), %rdi
	callq	dpb_split_field
	callq	update_ref_list
	callq	update_ltref_list
	cmpl	$1415314118, -32(%rbp)  # imm = 0x545BFAC6
	jne	.LBB292_18
.LBB292_17:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB292_18:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB292_17
.Lfunc_end292:
	.size	replace_top_pic_with_frame.229, .Lfunc_end292-replace_top_pic_with_frame.229
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_pic_num_x.230
	.type	get_pic_num_x.230,@function
get_pic_num_x.230:                      # @get_pic_num_x.230
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1437947247, -32(%rbp)  # imm = 0x55B5556F
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB293_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	movl	6360(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB293_3
.LBB293_2:                              # %if.else
	movq	-24(%rbp), %rax
	movl	6360(%rax), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
.LBB293_3:                              # %if.end
	movl	-12(%rbp), %ebx
	movl	-28(%rbp), %eax
	addl	$1, %eax
	subl	%eax, %ebx
	cmpl	$1437947247, -32(%rbp)  # imm = 0x55B5556F
	jne	.LBB293_5
.LBB293_4:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB293_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB293_4
.Lfunc_end293:
	.size	get_pic_num_x.230, .Lfunc_end293-get_pic_num_x.230
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_poc_desc.231
	.type	compare_pic_by_poc_desc.231,@function
compare_pic_by_poc_desc.231:            # @compare_pic_by_poc_desc.231
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1911948340, -16(%rbp)  # imm = 0x71F60434
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB294_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB294_5
.LBB294_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB294_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB294_5
.LBB294_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB294_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1911948340, -16(%rbp)  # imm = 0x71F60434
	jne	.LBB294_7
.LBB294_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB294_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB294_6
.Lfunc_end294:
	.size	compare_pic_by_poc_desc.231, .Lfunc_end294-compare_pic_by_poc_desc.231
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function gen_pic_list_from_frame_list.232
	.type	gen_pic_list_from_frame_list.232,@function
gen_pic_list_from_frame_list.232:       # @gen_pic_list_from_frame_list.232
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1107453712, -64(%rbp)  # imm = 0x42026710
	movl	%edi, -44(%rbp)
	movq	%rsi, -24(%rbp)
	movl	%edx, -12(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -32(%rbp)
	movl	%r9d, -60(%rbp)
	movl	$0, -8(%rbp)
	movl	$0, -4(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB295_2
# %bb.1:                                # %if.then
	movabsq	$is_long_ref, %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB295_3
.LBB295_2:                              # %if.else
	movabsq	$is_short_ref, %rax
	movq	%rax, -40(%rbp)
.LBB295_3:                              # %if.end
	cmpl	$1, -44(%rbp)
	jne	.LBB295_28
# %bb.4:                                # %if.then1
	jmp	.LBB295_5
.LBB295_5:                              # %while.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB295_9 Depth 2
                                        #     Child Loop BB295_18 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	movb	$1, %al
	jl	.LBB295_7
# %bb.6:                                # %lor.rhs
                                        #   in Loop: Header=BB295_5 Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	setl	%al
.LBB295_7:                              # %lor.end
                                        #   in Loop: Header=BB295_5 Depth=1
	testb	$1, %al
	jne	.LBB295_8
	jmp	.LBB295_27
.LBB295_8:                              # %while.body
                                        #   in Loop: Header=BB295_5 Depth=1
	jmp	.LBB295_9
.LBB295_9:                              # %for.cond
                                        #   Parent Loop BB295_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB295_16
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB295_9 Depth=2
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB295_14
# %bb.11:                               # %if.then6
                                        #   in Loop: Header=BB295_9 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB295_13
# %bb.12:                               # %if.then10
                                        #   in Loop: Header=BB295_5 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB295_17
.LBB295_13:                             # %if.end17
                                        #   in Loop: Header=BB295_9 Depth=2
	jmp	.LBB295_14
.LBB295_14:                             # %if.end18
                                        #   in Loop: Header=BB295_9 Depth=2
	jmp	.LBB295_15
.LBB295_15:                             # %for.inc
                                        #   in Loop: Header=BB295_9 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB295_9
.LBB295_16:                             # %for.end.loopexit
                                        #   in Loop: Header=BB295_5 Depth=1
	jmp	.LBB295_17
.LBB295_17:                             # %for.end
                                        #   in Loop: Header=BB295_5 Depth=1
	jmp	.LBB295_18
.LBB295_18:                             # %for.cond20
                                        #   Parent Loop BB295_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB295_25
# %bb.19:                               # %for.body22
                                        #   in Loop: Header=BB295_18 Depth=2
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB295_23
# %bb.20:                               # %if.then28
                                        #   in Loop: Header=BB295_18 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB295_22
# %bb.21:                               # %if.then33
                                        #   in Loop: Header=BB295_5 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB295_26
.LBB295_22:                             # %if.end41
                                        #   in Loop: Header=BB295_18 Depth=2
	jmp	.LBB295_23
.LBB295_23:                             # %if.end42
                                        #   in Loop: Header=BB295_18 Depth=2
	jmp	.LBB295_24
.LBB295_24:                             # %for.inc43
                                        #   in Loop: Header=BB295_18 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB295_18
.LBB295_25:                             # %for.end45.loopexit
                                        #   in Loop: Header=BB295_5 Depth=1
	jmp	.LBB295_26
.LBB295_26:                             # %for.end45
                                        #   in Loop: Header=BB295_5 Depth=1
	jmp	.LBB295_5
.LBB295_27:                             # %while.end
	jmp	.LBB295_28
.LBB295_28:                             # %if.end46
	cmpl	$2, -44(%rbp)
	jne	.LBB295_53
# %bb.29:                               # %if.then48
	jmp	.LBB295_30
.LBB295_30:                             # %while.cond49
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB295_34 Depth 2
                                        #     Child Loop BB295_43 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	movb	$1, %al
	jl	.LBB295_32
# %bb.31:                               # %lor.rhs51
                                        #   in Loop: Header=BB295_30 Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	setl	%al
.LBB295_32:                             # %lor.end53
                                        #   in Loop: Header=BB295_30 Depth=1
	testb	$1, %al
	jne	.LBB295_33
	jmp	.LBB295_52
.LBB295_33:                             # %while.body54
                                        #   in Loop: Header=BB295_30 Depth=1
	jmp	.LBB295_34
.LBB295_34:                             # %for.cond55
                                        #   Parent Loop BB295_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB295_41
# %bb.35:                               # %for.body57
                                        #   in Loop: Header=BB295_34 Depth=2
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB295_39
# %bb.36:                               # %if.then63
                                        #   in Loop: Header=BB295_34 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB295_38
# %bb.37:                               # %if.then69
                                        #   in Loop: Header=BB295_30 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB295_42
.LBB295_38:                             # %if.end77
                                        #   in Loop: Header=BB295_34 Depth=2
	jmp	.LBB295_39
.LBB295_39:                             # %if.end78
                                        #   in Loop: Header=BB295_34 Depth=2
	jmp	.LBB295_40
.LBB295_40:                             # %for.inc79
                                        #   in Loop: Header=BB295_34 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB295_34
.LBB295_41:                             # %for.end81.loopexit
                                        #   in Loop: Header=BB295_30 Depth=1
	jmp	.LBB295_42
.LBB295_42:                             # %for.end81
                                        #   in Loop: Header=BB295_30 Depth=1
	jmp	.LBB295_43
.LBB295_43:                             # %for.cond82
                                        #   Parent Loop BB295_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB295_50
# %bb.44:                               # %for.body84
                                        #   in Loop: Header=BB295_43 Depth=2
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB295_48
# %bb.45:                               # %if.then90
                                        #   in Loop: Header=BB295_43 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB295_47
# %bb.46:                               # %if.then96
                                        #   in Loop: Header=BB295_30 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB295_51
.LBB295_47:                             # %if.end104
                                        #   in Loop: Header=BB295_43 Depth=2
	jmp	.LBB295_48
.LBB295_48:                             # %if.end105
                                        #   in Loop: Header=BB295_43 Depth=2
	jmp	.LBB295_49
.LBB295_49:                             # %for.inc106
                                        #   in Loop: Header=BB295_43 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB295_43
.LBB295_50:                             # %for.end108.loopexit
                                        #   in Loop: Header=BB295_30 Depth=1
	jmp	.LBB295_51
.LBB295_51:                             # %for.end108
                                        #   in Loop: Header=BB295_30 Depth=1
	jmp	.LBB295_30
.LBB295_52:                             # %while.end109
	jmp	.LBB295_53
.LBB295_53:                             # %if.end110
	cmpl	$1107453712, -64(%rbp)  # imm = 0x42026710
	jne	.LBB295_55
.LBB295_54:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB295_55:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB295_54
.Lfunc_end295:
	.size	gen_pic_list_from_frame_list.232, .Lfunc_end295-gen_pic_list_from_frame_list.232
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function unmark_long_term_field_for_reference_by_frame_idx.233
	.type	unmark_long_term_field_for_reference_by_frame_idx.233,@function
unmark_long_term_field_for_reference_by_frame_idx.233: # @unmark_long_term_field_for_reference_by_frame_idx.233
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1242351460, -32(%rbp)  # imm = 0x4A0CC764
	movl	%edi, -20(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -12(%rbp)
	movl	%r8d, -8(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -28(%rbp)
	cmpl	$0, -8(%rbp)
	jge	.LBB296_2
# %bb.1:                                # %if.then
	movl	-28(%rbp), %eax
	shll	$1, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB296_2:                              # %if.end
	movl	$0, -4(%rbp)
.LBB296_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB296_46
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB296_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-24(%rbp), %eax
	jne	.LBB296_44
# %bb.5:                                # %if.then5
                                        #   in Loop: Header=BB296_3 Depth=1
	cmpl	$1, -20(%rbp)
	jne	.LBB296_24
# %bb.6:                                # %if.then7
                                        #   in Loop: Header=BB296_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB296_8
# %bb.7:                                # %if.then11
                                        #   in Loop: Header=BB296_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB296_23
.LBB296_8:                              # %if.else
                                        #   in Loop: Header=BB296_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, 8(%rax)
	jne	.LBB296_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB296_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB296_22
.LBB296_10:                             # %if.else21
                                        #   in Loop: Header=BB296_3 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB296_18
# %bb.11:                               # %if.then22
                                        #   in Loop: Header=BB296_3 Depth=1
	cmpq	$0, dpb+56
	je	.LBB296_16
# %bb.12:                               # %if.then24
                                        #   in Loop: Header=BB296_3 Depth=1
	movq	dpb+56, %rax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	cmpq	(%rcx,%rdx,8), %rax
	jne	.LBB296_14
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB296_3 Depth=1
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	cmpl	-12(%rbp), %eax
	je	.LBB296_15
.LBB296_14:                             # %if.then29
                                        #   in Loop: Header=BB296_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB296_15:                             # %if.end32
                                        #   in Loop: Header=BB296_3 Depth=1
	jmp	.LBB296_17
.LBB296_16:                             # %if.else33
                                        #   in Loop: Header=BB296_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB296_17:                             # %if.end36
                                        #   in Loop: Header=BB296_3 Depth=1
	jmp	.LBB296_21
.LBB296_18:                             # %if.else37
                                        #   in Loop: Header=BB296_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %ecx
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	je	.LBB296_20
# %bb.19:                               # %if.then42
                                        #   in Loop: Header=BB296_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB296_20:                             # %if.end45
                                        #   in Loop: Header=BB296_3 Depth=1
	jmp	.LBB296_21
.LBB296_21:                             # %if.end46
                                        #   in Loop: Header=BB296_3 Depth=1
	jmp	.LBB296_22
.LBB296_22:                             # %if.end47
                                        #   in Loop: Header=BB296_3 Depth=1
	jmp	.LBB296_23
.LBB296_23:                             # %if.end48
                                        #   in Loop: Header=BB296_3 Depth=1
	jmp	.LBB296_24
.LBB296_24:                             # %if.end49
                                        #   in Loop: Header=BB296_3 Depth=1
	cmpl	$2, -20(%rbp)
	jne	.LBB296_43
# %bb.25:                               # %if.then51
                                        #   in Loop: Header=BB296_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB296_27
# %bb.26:                               # %if.then56
                                        #   in Loop: Header=BB296_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB296_42
.LBB296_27:                             # %if.else59
                                        #   in Loop: Header=BB296_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$2, 8(%rax)
	jne	.LBB296_29
# %bb.28:                               # %if.then64
                                        #   in Loop: Header=BB296_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB296_41
.LBB296_29:                             # %if.else67
                                        #   in Loop: Header=BB296_3 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB296_37
# %bb.30:                               # %if.then69
                                        #   in Loop: Header=BB296_3 Depth=1
	cmpq	$0, dpb+56
	je	.LBB296_35
# %bb.31:                               # %if.then71
                                        #   in Loop: Header=BB296_3 Depth=1
	movq	dpb+56, %rax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	cmpq	(%rcx,%rdx,8), %rax
	jne	.LBB296_33
# %bb.32:                               # %lor.lhs.false75
                                        #   in Loop: Header=BB296_3 Depth=1
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	cmpl	-12(%rbp), %eax
	je	.LBB296_34
.LBB296_33:                             # %if.then78
                                        #   in Loop: Header=BB296_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB296_34:                             # %if.end81
                                        #   in Loop: Header=BB296_3 Depth=1
	jmp	.LBB296_36
.LBB296_35:                             # %if.else82
                                        #   in Loop: Header=BB296_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB296_36:                             # %if.end85
                                        #   in Loop: Header=BB296_3 Depth=1
	jmp	.LBB296_40
.LBB296_37:                             # %if.else86
                                        #   in Loop: Header=BB296_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %ecx
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	je	.LBB296_39
# %bb.38:                               # %if.then92
                                        #   in Loop: Header=BB296_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB296_39:                             # %if.end95
                                        #   in Loop: Header=BB296_3 Depth=1
	jmp	.LBB296_40
.LBB296_40:                             # %if.end96
                                        #   in Loop: Header=BB296_3 Depth=1
	jmp	.LBB296_41
.LBB296_41:                             # %if.end97
                                        #   in Loop: Header=BB296_3 Depth=1
	jmp	.LBB296_42
.LBB296_42:                             # %if.end98
                                        #   in Loop: Header=BB296_3 Depth=1
	jmp	.LBB296_43
.LBB296_43:                             # %if.end99
                                        #   in Loop: Header=BB296_3 Depth=1
	jmp	.LBB296_44
.LBB296_44:                             # %if.end100
                                        #   in Loop: Header=BB296_3 Depth=1
	jmp	.LBB296_45
.LBB296_45:                             # %for.inc
                                        #   in Loop: Header=BB296_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB296_3
.LBB296_46:                             # %for.end
	cmpl	$1242351460, -32(%rbp)  # imm = 0x4A0CC764
	jne	.LBB296_48
.LBB296_47:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB296_48:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB296_47
.Lfunc_end296:
	.size	unmark_long_term_field_for_reference_by_frame_idx.233, .Lfunc_end296-unmark_long_term_field_for_reference_by_frame_idx.233
	.cfi_endproc
                                        # -- End function
	.globl	dpb_split_field.234     # -- Begin function dpb_split_field.234
	.p2align	4, 0x90
	.type	dpb_split_field.234,@function
dpb_split_field.234:                    # @dpb_split_field.234
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$511879852, -64(%rbp)   # imm = 0x1E82AAAC
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 36(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB297_28
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %r8d
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	idivl	%edi
	movl	$1, %edi
	movl	%r8d, %edx
	movl	%eax, %r8d
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %r8d
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	idivl	%edi
	movl	$2, %edi
	movl	%r8d, %edx
	movl	%eax, %r8d
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 56(%rcx)
	movl	$0, -4(%rbp)
.LBB297_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB297_5
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB297_2 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.4:                                # %for.inc
                                        #   in Loop: Header=BB297_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB297_2
.LBB297_5:                              # %for.end
	movl	$0, -4(%rbp)
.LBB297_6:                              # %for.cond30
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB297_9
# %bb.7:                                # %for.body36
                                        #   in Loop: Header=BB297_6 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.8:                                # %for.inc66
                                        #   in Loop: Header=BB297_6 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB297_6
.LBB297_9:                              # %for.end68
	movl	$0, -4(%rbp)
.LBB297_10:                             # %for.cond69
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB297_13
# %bb.11:                               # %for.body75
                                        #   in Loop: Header=BB297_10 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.12:                               # %for.inc89
                                        #   in Loop: Header=BB297_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB297_10
.LBB297_13:                             # %for.end91
	movl	$0, -4(%rbp)
.LBB297_14:                             # %for.cond92
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB297_17
# %bb.15:                               # %for.body98
                                        #   in Loop: Header=BB297_14 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.16:                               # %for.inc131
                                        #   in Loop: Header=BB297_14 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB297_14
.LBB297_17:                             # %for.end133
	movq	-16(%rbp), %rax
	movq	48(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	56(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6380(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6380(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6380(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6376(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	-16(%rbp), %rcx
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	$1, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	$1, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6416(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6416(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6416(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6552(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB297_27
# %bb.18:                               # %if.then211
	movl	$0, -4(%rbp)
.LBB297_19:                             # %for.cond212
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB297_22
# %bb.20:                               # %for.body215
                                        #   in Loop: Header=BB297_19 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	816(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	816(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	1344(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	1344(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
# %bb.21:                               # %for.inc267
                                        #   in Loop: Header=BB297_19 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB297_19
.LBB297_22:                             # %for.end269
	movl	$0, -4(%rbp)
.LBB297_23:                             # %for.cond270
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB297_26
# %bb.24:                               # %for.body273
                                        #   in Loop: Header=BB297_23 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	552(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	552(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	1080(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	1080(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
# %bb.25:                               # %for.inc326
                                        #   in Loop: Header=BB297_23 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB297_23
.LBB297_26:                             # %for.end328
	jmp	.LBB297_27
.LBB297_27:                             # %if.end
	jmp	.LBB297_29
.LBB297_28:                             # %if.else
	movq	-16(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 56(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	$0, 6528(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	$0, 6536(%rax)
.LBB297_29:                             # %if.end335
	movl	$0, -8(%rbp)
.LBB297_30:                             # %for.cond336
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB297_32 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB297_59
# %bb.31:                               # %for.body342
                                        #   in Loop: Header=BB297_30 Depth=1
	movl	$0, -4(%rbp)
.LBB297_32:                             # %for.cond343
                                        #   Parent Loop BB297_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB297_57
# %bb.33:                               # %for.body349
                                        #   in Loop: Header=BB297_32 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -60(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-40(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	imull	%eax, %ecx
	movl	-60(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-40(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -44(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB297_48
# %bb.34:                               # %land.lhs.true
                                        #   in Loop: Header=BB297_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB297_48
# %bb.35:                               # %if.then369
                                        #   in Loop: Header=BB297_32 Depth=2
	movl	-44(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	movl	%ecx, -28(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB297_37
# %bb.36:                               # %cond.true
                                        #   in Loop: Header=BB297_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB297_38
.LBB297_37:                             # %cond.false
                                        #   in Loop: Header=BB297_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB297_38
.LBB297_38:                             # %cond.end
                                        #   in Loop: Header=BB297_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB297_40
# %bb.39:                               # %cond.true407
                                        #   in Loop: Header=BB297_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB297_41
.LBB297_40:                             # %cond.false415
                                        #   in Loop: Header=BB297_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB297_41
.LBB297_41:                             # %cond.end416
                                        #   in Loop: Header=BB297_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB297_43
# %bb.42:                               # %cond.true429
                                        #   in Loop: Header=BB297_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$1608, %rax             # imm = 0x648
	movl	-28(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB297_44
.LBB297_43:                             # %cond.false436
                                        #   in Loop: Header=BB297_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB297_44
.LBB297_44:                             # %cond.end437
                                        #   in Loop: Header=BB297_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB297_46
# %bb.45:                               # %cond.true448
                                        #   in Loop: Header=BB297_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$1608, %rax             # imm = 0x648
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB297_47
.LBB297_46:                             # %cond.false456
                                        #   in Loop: Header=BB297_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB297_47
.LBB297_47:                             # %cond.end457
                                        #   in Loop: Header=BB297_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB297_55
.LBB297_48:                             # %if.else466
                                        #   in Loop: Header=BB297_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB297_50
# %bb.49:                               # %cond.true485
                                        #   in Loop: Header=BB297_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB297_51
.LBB297_50:                             # %cond.false491
                                        #   in Loop: Header=BB297_32 Depth=2
	movq	$-1, %rax
	jmp	.LBB297_51
.LBB297_51:                             # %cond.end492
                                        #   in Loop: Header=BB297_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB297_53
# %bb.52:                               # %cond.true503
                                        #   in Loop: Header=BB297_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB297_54
.LBB297_53:                             # %cond.false509
                                        #   in Loop: Header=BB297_32 Depth=2
	movq	$-1, %rax
	jmp	.LBB297_54
.LBB297_54:                             # %cond.end510
                                        #   in Loop: Header=BB297_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB297_55:                             # %if.end519
                                        #   in Loop: Header=BB297_32 Depth=2
	jmp	.LBB297_56
.LBB297_56:                             # %for.inc520
                                        #   in Loop: Header=BB297_32 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB297_32
.LBB297_57:                             # %for.end522
                                        #   in Loop: Header=BB297_30 Depth=1
	jmp	.LBB297_58
.LBB297_58:                             # %for.inc523
                                        #   in Loop: Header=BB297_30 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB297_30
.LBB297_59:                             # %for.end525
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	je	.LBB297_61
# %bb.60:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB297_73
.LBB297_61:                             # %if.then530
	movl	$0, -4(%rbp)
.LBB297_62:                             # %for.cond531
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB297_64 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB297_72
# %bb.63:                               # %for.body537
                                        #   in Loop: Header=BB297_62 Depth=1
	movl	$0, -8(%rbp)
.LBB297_64:                             # %for.cond538
                                        #   Parent Loop BB297_62 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB297_70
# %bb.65:                               # %for.body544
                                        #   in Loop: Header=BB297_64 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -76(%rbp)
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-48(%rbp), %eax
	cltd
	idivl	%esi
	imull	%eax, %ecx
	movl	-76(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-48(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -68(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB297_68
# %bb.66:                               # %land.lhs.true563
                                        #   in Loop: Header=BB297_64 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-68(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB297_68
# %bb.67:                               # %if.then570
                                        #   in Loop: Header=BB297_64 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	32(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	40(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB297_68:                             # %if.end908
                                        #   in Loop: Header=BB297_64 Depth=2
	jmp	.LBB297_69
.LBB297_69:                             # %for.inc909
                                        #   in Loop: Header=BB297_64 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB297_64
.LBB297_70:                             # %for.end911
                                        #   in Loop: Header=BB297_62 Depth=1
	jmp	.LBB297_71
.LBB297_71:                             # %for.inc912
                                        #   in Loop: Header=BB297_62 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB297_62
.LBB297_72:                             # %for.end914
	jmp	.LBB297_73
.LBB297_73:                             # %if.end915
	movl	$0, -4(%rbp)
.LBB297_74:                             # %for.cond916
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB297_76 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB297_152
# %bb.75:                               # %for.body922
                                        #   in Loop: Header=BB297_74 Depth=1
	movl	$0, -8(%rbp)
.LBB297_76:                             # %for.cond923
                                        #   Parent Loop BB297_74 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB297_150
# %bb.77:                               # %for.body929
                                        #   in Loop: Header=BB297_76 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -56(%rbp)
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	imull	%eax, %ecx
	movl	-56(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -80(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB297_79
# %bb.78:                               # %lor.lhs.false948
                                        #   in Loop: Header=BB297_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-80(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB297_148
.LBB297_79:                             # %if.then954
                                        #   in Loop: Header=BB297_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB297_147
# %bb.80:                               # %if.then973
                                        #   in Loop: Header=BB297_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB297_82
# %bb.81:                               # %cond.true990
                                        #   in Loop: Header=BB297_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB297_83
.LBB297_82:                             # %cond.false991
                                        #   in Loop: Header=BB297_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB297_83:                             # %cond.end993
                                        #   in Loop: Header=BB297_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB297_85
# %bb.84:                               # %cond.true999
                                        #   in Loop: Header=BB297_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB297_86
.LBB297_85:                             # %cond.false1001
                                        #   in Loop: Header=BB297_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB297_86:                             # %cond.end1003
                                        #   in Loop: Header=BB297_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB297_88
# %bb.87:                               # %cond.true1030
                                        #   in Loop: Header=BB297_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB297_89
.LBB297_88:                             # %cond.false1032
                                        #   in Loop: Header=BB297_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB297_89:                             # %cond.end1034
                                        #   in Loop: Header=BB297_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB297_91
# %bb.90:                               # %cond.true1040
                                        #   in Loop: Header=BB297_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB297_92
.LBB297_91:                             # %cond.false1042
                                        #   in Loop: Header=BB297_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB297_92:                             # %cond.end1044
                                        #   in Loop: Header=BB297_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB297_94
# %bb.93:                               # %cond.true1071
                                        #   in Loop: Header=BB297_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB297_95
.LBB297_94:                             # %cond.false1073
                                        #   in Loop: Header=BB297_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB297_95:                             # %cond.end1075
                                        #   in Loop: Header=BB297_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB297_97
# %bb.96:                               # %cond.true1081
                                        #   in Loop: Header=BB297_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB297_98
.LBB297_97:                             # %cond.false1083
                                        #   in Loop: Header=BB297_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB297_98:                             # %cond.end1085
                                        #   in Loop: Header=BB297_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB297_100
# %bb.99:                               # %cond.true1112
                                        #   in Loop: Header=BB297_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB297_101
.LBB297_100:                            # %cond.false1114
                                        #   in Loop: Header=BB297_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB297_101:                            # %cond.end1116
                                        #   in Loop: Header=BB297_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB297_103
# %bb.102:                              # %cond.true1122
                                        #   in Loop: Header=BB297_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB297_104
.LBB297_103:                            # %cond.false1124
                                        #   in Loop: Header=BB297_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB297_104:                            # %cond.end1126
                                        #   in Loop: Header=BB297_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB297_106
# %bb.105:                              # %cond.true1153
                                        #   in Loop: Header=BB297_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB297_107
.LBB297_106:                            # %cond.false1155
                                        #   in Loop: Header=BB297_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB297_107:                            # %cond.end1157
                                        #   in Loop: Header=BB297_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB297_109
# %bb.108:                              # %cond.true1163
                                        #   in Loop: Header=BB297_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB297_110
.LBB297_109:                            # %cond.false1165
                                        #   in Loop: Header=BB297_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB297_110:                            # %cond.end1167
                                        #   in Loop: Header=BB297_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB297_112
# %bb.111:                              # %if.then1175
                                        #   in Loop: Header=BB297_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	jmp	.LBB297_125
.LBB297_112:                            # %if.else1190
                                        #   in Loop: Header=BB297_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB297_114
# %bb.113:                              # %cond.true1196
                                        #   in Loop: Header=BB297_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB297_115
.LBB297_114:                            # %cond.false1198
                                        #   in Loop: Header=BB297_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB297_115:                            # %cond.end1200
                                        #   in Loop: Header=BB297_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB297_117
# %bb.116:                              # %cond.true1206
                                        #   in Loop: Header=BB297_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB297_118
.LBB297_117:                            # %cond.false1208
                                        #   in Loop: Header=BB297_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB297_118:                            # %cond.end1210
                                        #   in Loop: Header=BB297_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cwtl
	movl	%eax, -20(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB297_120
# %bb.119:                              # %cond.true1232
                                        #   in Loop: Header=BB297_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	3192(%rax,%rcx,8), %rax
	jmp	.LBB297_121
.LBB297_120:                            # %cond.false1237
                                        #   in Loop: Header=BB297_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB297_121
.LBB297_121:                            # %cond.end1238
                                        #   in Loop: Header=BB297_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB297_123
# %bb.122:                              # %cond.true1249
                                        #   in Loop: Header=BB297_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	4776(%rax,%rcx,8), %rax
	jmp	.LBB297_124
.LBB297_123:                            # %cond.false1254
                                        #   in Loop: Header=BB297_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB297_124
.LBB297_124:                            # %cond.end1255
                                        #   in Loop: Header=BB297_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB297_125:                            # %if.end1264
                                        #   in Loop: Header=BB297_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB297_127
# %bb.126:                              # %cond.true1270
                                        #   in Loop: Header=BB297_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB297_128
.LBB297_127:                            # %cond.false1272
                                        #   in Loop: Header=BB297_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB297_128:                            # %cond.end1274
                                        #   in Loop: Header=BB297_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB297_130
# %bb.129:                              # %cond.true1280
                                        #   in Loop: Header=BB297_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB297_131
.LBB297_130:                            # %cond.false1282
                                        #   in Loop: Header=BB297_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB297_131:                            # %cond.end1284
                                        #   in Loop: Header=BB297_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB297_133
# %bb.132:                              # %if.then1292
                                        #   in Loop: Header=BB297_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	jmp	.LBB297_146
.LBB297_133:                            # %if.else1307
                                        #   in Loop: Header=BB297_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB297_135
# %bb.134:                              # %cond.true1313
                                        #   in Loop: Header=BB297_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB297_136
.LBB297_135:                            # %cond.false1315
                                        #   in Loop: Header=BB297_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB297_136:                            # %cond.end1317
                                        #   in Loop: Header=BB297_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB297_138
# %bb.137:                              # %cond.true1323
                                        #   in Loop: Header=BB297_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB297_139
.LBB297_138:                            # %cond.false1325
                                        #   in Loop: Header=BB297_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB297_139:                            # %cond.end1327
                                        #   in Loop: Header=BB297_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cwtl
	movl	%eax, -24(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB297_141
# %bb.140:                              # %cond.true1349
                                        #   in Loop: Header=BB297_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	3456(%rax,%rcx,8), %rax
	jmp	.LBB297_142
.LBB297_141:                            # %cond.false1355
                                        #   in Loop: Header=BB297_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB297_142
.LBB297_142:                            # %cond.end1356
                                        #   in Loop: Header=BB297_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB297_144
# %bb.143:                              # %cond.true1367
                                        #   in Loop: Header=BB297_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	5040(%rax,%rcx,8), %rax
	jmp	.LBB297_145
.LBB297_144:                            # %cond.false1373
                                        #   in Loop: Header=BB297_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB297_145
.LBB297_145:                            # %cond.end1374
                                        #   in Loop: Header=BB297_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB297_146:                            # %if.end1383
                                        #   in Loop: Header=BB297_76 Depth=2
	jmp	.LBB297_147
.LBB297_147:                            # %if.end1384
                                        #   in Loop: Header=BB297_76 Depth=2
	jmp	.LBB297_148
.LBB297_148:                            # %if.end1385
                                        #   in Loop: Header=BB297_76 Depth=2
	jmp	.LBB297_149
.LBB297_149:                            # %for.inc1386
                                        #   in Loop: Header=BB297_76 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB297_76
.LBB297_150:                            # %for.end1388
                                        #   in Loop: Header=BB297_74 Depth=1
	jmp	.LBB297_151
.LBB297_151:                            # %for.inc1389
                                        #   in Loop: Header=BB297_74 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB297_74
.LBB297_152:                            # %for.end1391
	movl	$0, -8(%rbp)
.LBB297_153:                            # %for.cond1392
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB297_155 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB297_160
# %bb.154:                              # %for.body1398
                                        #   in Loop: Header=BB297_153 Depth=1
	movl	$0, -4(%rbp)
.LBB297_155:                            # %for.cond1399
                                        #   Parent Loop BB297_153 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB297_158
# %bb.156:                              # %for.body1405
                                        #   in Loop: Header=BB297_155 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
# %bb.157:                              # %for.inc1412
                                        #   in Loop: Header=BB297_155 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB297_155
.LBB297_158:                            # %for.end1414
                                        #   in Loop: Header=BB297_153 Depth=1
	jmp	.LBB297_159
.LBB297_159:                            # %for.inc1415
                                        #   in Loop: Header=BB297_153 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB297_153
.LBB297_160:                            # %for.end1417
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB297_162
# %bb.161:                              # %lor.lhs.false1420
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB297_174
.LBB297_162:                            # %if.then1423
	movl	$0, -8(%rbp)
.LBB297_163:                            # %for.cond1424
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB297_165 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB297_173
# %bb.164:                              # %for.body1430
                                        #   in Loop: Header=BB297_163 Depth=1
	movl	$0, -4(%rbp)
.LBB297_165:                            # %for.cond1431
                                        #   Parent Loop BB297_163 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB297_171
# %bb.166:                              # %for.body1437
                                        #   in Loop: Header=BB297_165 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -52(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	imull	%eax, %ecx
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-36(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -72(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB297_168
# %bb.167:                              # %cond.true1456
                                        #   in Loop: Header=BB297_165 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-72(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	jmp	.LBB297_169
.LBB297_168:                            # %cond.false1462
                                        #   in Loop: Header=BB297_165 Depth=2
	xorl	%eax, %eax
	jmp	.LBB297_169
.LBB297_169:                            # %cond.end1463
                                        #   in Loop: Header=BB297_165 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6520(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.170:                              # %for.inc1472
                                        #   in Loop: Header=BB297_165 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB297_165
.LBB297_171:                            # %for.end1474
                                        #   in Loop: Header=BB297_163 Depth=1
	jmp	.LBB297_172
.LBB297_172:                            # %for.inc1475
                                        #   in Loop: Header=BB297_163 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB297_163
.LBB297_173:                            # %for.end1477
	jmp	.LBB297_174
.LBB297_174:                            # %if.end1478
	cmpl	$511879852, -64(%rbp)   # imm = 0x1E82AAAC
	jne	.LBB297_176
.LBB297_175:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB297_176:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB297_175
.Lfunc_end297:
	.size	dpb_split_field.234, .Lfunc_end297-dpb_split_field.234
	.cfi_endproc
                                        # -- End function
	.globl	replace_top_pic_with_frame.235 # -- Begin function replace_top_pic_with_frame.235
	.p2align	4, 0x90
	.type	replace_top_pic_with_frame.235,@function
replace_top_pic_with_frame.235:         # @replace_top_pic_with_frame.235
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1940181979, -32(%rbp)  # imm = 0x73A4D3DB
	movq	%rdi, -24(%rbp)
	movq	$0, -16(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 6380(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB298_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rdi
	callq	UnifiedOneForthPix
.LBB298_2:                              # %if.end
	movl	$0, -28(%rbp)
	movl	$0, -4(%rbp)
.LBB298_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB298_9
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB298_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jne	.LBB298_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB298_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, (%rax)
	jne	.LBB298_7
# %bb.6:                                # %if.then11
	movl	$1, -28(%rbp)
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB298_10
.LBB298_7:                              # %if.end14
                                        #   in Loop: Header=BB298_3 Depth=1
	jmp	.LBB298_8
.LBB298_8:                              # %for.inc
                                        #   in Loop: Header=BB298_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB298_3
.LBB298_9:                              # %for.end.loopexit
	jmp	.LBB298_10
.LBB298_10:                             # %for.end
	cmpl	$0, -28(%rbp)
	jne	.LBB298_12
# %bb.11:                               # %if.then16
	movabsq	$.L.str.14, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB298_12:                             # %if.end17
	movq	-16(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-16(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movq	-16(%rbp), %rax
	movl	$3, (%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB298_16
# %bb.13:                               # %if.then22
	movq	-16(%rbp), %rax
	movl	$3, 4(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB298_15
# %bb.14:                               # %if.then24
	movq	-16(%rbp), %rax
	movl	$3, 8(%rax)
.LBB298_15:                             # %if.end26
	jmp	.LBB298_16
.LBB298_16:                             # %if.end27
	movq	-16(%rbp), %rdi
	callq	dpb_split_field
	callq	update_ref_list
	callq	update_ltref_list
	cmpl	$1940181979, -32(%rbp)  # imm = 0x73A4D3DB
	jne	.LBB298_18
.LBB298_17:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB298_18:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB298_17
.Lfunc_end298:
	.size	replace_top_pic_with_frame.235, .Lfunc_end298-replace_top_pic_with_frame.235
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function reorder_short_term.236
	.type	reorder_short_term.236,@function
reorder_short_term.236:                 # @reorder_short_term.236
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1919846816, -44(%rbp)  # imm = 0x726E89A0
	movq	%rdi, -16(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movq	%rcx, -40(%rbp)
	movl	-28(%rbp), %edi
	callq	get_short_term_pic
	movq	%rax, -56(%rbp)
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB299_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-40(%rbp), %rcx
	cmpl	(%rcx), %eax
	jle	.LBB299_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB299_1 Depth=1
	movq	-16(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB299_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB299_1
.LBB299_4:                              # %for.end
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movl	(%rdx), %esi
	movl	%esi, %edi
	addl	$1, %edi
	movl	%edi, (%rdx)
	movslq	%esi, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB299_5:                              # %for.cond5
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jg	.LBB299_13
# %bb.6:                                # %for.body8
                                        #   in Loop: Header=BB299_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	je	.LBB299_11
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB299_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB299_9
# %bb.8:                                # %lor.lhs.false
                                        #   in Loop: Header=BB299_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6364(%rax), %eax
	cmpl	-28(%rbp), %eax
	je	.LBB299_10
.LBB299_9:                              # %if.then17
                                        #   in Loop: Header=BB299_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movl	-20(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -20(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB299_10:                             # %if.end
                                        #   in Loop: Header=BB299_5 Depth=1
	jmp	.LBB299_11
.LBB299_11:                             # %if.end23
                                        #   in Loop: Header=BB299_5 Depth=1
	jmp	.LBB299_12
.LBB299_12:                             # %for.inc24
                                        #   in Loop: Header=BB299_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB299_5
.LBB299_13:                             # %for.end26
	cmpl	$1919846816, -44(%rbp)  # imm = 0x726E89A0
	jne	.LBB299_15
.LBB299_14:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB299_15:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB299_14
.Lfunc_end299:
	.size	reorder_short_term.236, .Lfunc_end299-reorder_short_term.236
	.cfi_endproc
                                        # -- End function
	.globl	alloc_storable_picture.237 # -- Begin function alloc_storable_picture.237
	.p2align	4, 0x90
	.type	alloc_storable_picture.237,@function
alloc_storable_picture.237:             # @alloc_storable_picture.237
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$2122760035, -36(%rbp)  # imm = 0x7E86BF63
	movl	%edi, -40(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -32(%rbp)
	movl	%r8d, -28(%rbp)
	movl	$1, %edi
	movl	$6584, %esi             # imm = 0x19B8
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -16(%rbp)
	cmpq	-16(%rbp), %rcx
	jne	.LBB300_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.7, %rdi
	callq	no_mem_exit
.LBB300_2:                              # %if.end
	movq	-16(%rbp), %rdi
	addq	$6424, %rdi             # imm = 0x1918
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	callq	get_mem2Dpel
	movq	-16(%rbp), %rax
	movq	$0, 6432(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6448(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6464(%rax)
	movq	input, %rax
	cmpl	$0, 1284(%rax)
	jne	.LBB300_5
# %bb.3:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 1288(%rax)
	jne	.LBB300_5
# %bb.4:                                # %lor.lhs.false3
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB300_6
.LBB300_5:                              # %if.then5
	movq	-16(%rbp), %rax
	movq	$0, 6440(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6456(%rax)
.LBB300_6:                              # %if.end6
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB300_8
# %bb.7:                                # %if.then8
	movq	-16(%rbp), %rdi
	addq	$6464, %rdi             # imm = 0x1940
	movl	-28(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	$2, %esi
	callq	get_mem3Dpel
.LBB300_8:                              # %if.end11
	movq	img, %rax
	movl	72484(%rax), %edi
	movl	$4, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	-16(%rbp), %rdx
	movq	%rax, 6472(%rdx)
	movq	-16(%rbp), %rax
	cmpq	6472(%rax), %rcx
	jne	.LBB300_10
# %bb.9:                                # %if.then16
	movabsq	$.L.str.8, %rdi
	callq	no_mem_exit
.LBB300_10:                             # %if.end17
	movq	-16(%rbp), %rdi
	addq	$6480, %rdi             # imm = 0x1950
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-16(%rbp), %rdi
	addq	$6488, %rdi             # imm = 0x1958
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	$6, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-16(%rbp), %rdi
	addq	$6496, %rdi             # imm = 0x1960
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	$6, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-16(%rbp), %rdi
	addq	$6504, %rdi             # imm = 0x1968
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-16(%rbp), %rdi
	addq	$6512, %rdi             # imm = 0x1970
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-20(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-16(%rbp), %rdi
	addq	$6520, %rdi             # imm = 0x1978
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-20(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-16(%rbp), %rax
	movl	$0, 6364(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6360(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6372(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6368(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6380(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6376(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6388(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6384(%rax)
	movl	-40(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6392(%rcx)
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6396(%rcx)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6400(%rcx)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6404(%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 6528(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6536(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6544(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6412(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6416(%rax)
	movq	-16(%rbp), %rbx
	cmpl	$2122760035, -36(%rbp)  # imm = 0x7E86BF63
	jne	.LBB300_12
.LBB300_11:
	movq	%rbx, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB300_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB300_11
.Lfunc_end300:
	.size	alloc_storable_picture.237, .Lfunc_end300-alloc_storable_picture.237
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function gen_pic_list_from_frame_list.238
	.type	gen_pic_list_from_frame_list.238,@function
gen_pic_list_from_frame_list.238:       # @gen_pic_list_from_frame_list.238
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1979824462, -64(%rbp)  # imm = 0x7601B94E
	movl	%edi, -44(%rbp)
	movq	%rsi, -24(%rbp)
	movl	%edx, -12(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -32(%rbp)
	movl	%r9d, -60(%rbp)
	movl	$0, -8(%rbp)
	movl	$0, -4(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB301_2
# %bb.1:                                # %if.then
	movabsq	$is_long_ref, %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB301_3
.LBB301_2:                              # %if.else
	movabsq	$is_short_ref, %rax
	movq	%rax, -40(%rbp)
.LBB301_3:                              # %if.end
	cmpl	$1, -44(%rbp)
	jne	.LBB301_28
# %bb.4:                                # %if.then1
	jmp	.LBB301_5
.LBB301_5:                              # %while.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB301_9 Depth 2
                                        #     Child Loop BB301_18 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	movb	$1, %al
	jl	.LBB301_7
# %bb.6:                                # %lor.rhs
                                        #   in Loop: Header=BB301_5 Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	setl	%al
.LBB301_7:                              # %lor.end
                                        #   in Loop: Header=BB301_5 Depth=1
	testb	$1, %al
	jne	.LBB301_8
	jmp	.LBB301_27
.LBB301_8:                              # %while.body
                                        #   in Loop: Header=BB301_5 Depth=1
	jmp	.LBB301_9
.LBB301_9:                              # %for.cond
                                        #   Parent Loop BB301_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB301_16
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB301_9 Depth=2
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB301_14
# %bb.11:                               # %if.then6
                                        #   in Loop: Header=BB301_9 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB301_13
# %bb.12:                               # %if.then10
                                        #   in Loop: Header=BB301_5 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB301_17
.LBB301_13:                             # %if.end17
                                        #   in Loop: Header=BB301_9 Depth=2
	jmp	.LBB301_14
.LBB301_14:                             # %if.end18
                                        #   in Loop: Header=BB301_9 Depth=2
	jmp	.LBB301_15
.LBB301_15:                             # %for.inc
                                        #   in Loop: Header=BB301_9 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB301_9
.LBB301_16:                             # %for.end.loopexit
                                        #   in Loop: Header=BB301_5 Depth=1
	jmp	.LBB301_17
.LBB301_17:                             # %for.end
                                        #   in Loop: Header=BB301_5 Depth=1
	jmp	.LBB301_18
.LBB301_18:                             # %for.cond20
                                        #   Parent Loop BB301_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB301_25
# %bb.19:                               # %for.body22
                                        #   in Loop: Header=BB301_18 Depth=2
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB301_23
# %bb.20:                               # %if.then28
                                        #   in Loop: Header=BB301_18 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB301_22
# %bb.21:                               # %if.then33
                                        #   in Loop: Header=BB301_5 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB301_26
.LBB301_22:                             # %if.end41
                                        #   in Loop: Header=BB301_18 Depth=2
	jmp	.LBB301_23
.LBB301_23:                             # %if.end42
                                        #   in Loop: Header=BB301_18 Depth=2
	jmp	.LBB301_24
.LBB301_24:                             # %for.inc43
                                        #   in Loop: Header=BB301_18 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB301_18
.LBB301_25:                             # %for.end45.loopexit
                                        #   in Loop: Header=BB301_5 Depth=1
	jmp	.LBB301_26
.LBB301_26:                             # %for.end45
                                        #   in Loop: Header=BB301_5 Depth=1
	jmp	.LBB301_5
.LBB301_27:                             # %while.end
	jmp	.LBB301_28
.LBB301_28:                             # %if.end46
	cmpl	$2, -44(%rbp)
	jne	.LBB301_53
# %bb.29:                               # %if.then48
	jmp	.LBB301_30
.LBB301_30:                             # %while.cond49
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB301_34 Depth 2
                                        #     Child Loop BB301_43 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	movb	$1, %al
	jl	.LBB301_32
# %bb.31:                               # %lor.rhs51
                                        #   in Loop: Header=BB301_30 Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	setl	%al
.LBB301_32:                             # %lor.end53
                                        #   in Loop: Header=BB301_30 Depth=1
	testb	$1, %al
	jne	.LBB301_33
	jmp	.LBB301_52
.LBB301_33:                             # %while.body54
                                        #   in Loop: Header=BB301_30 Depth=1
	jmp	.LBB301_34
.LBB301_34:                             # %for.cond55
                                        #   Parent Loop BB301_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB301_41
# %bb.35:                               # %for.body57
                                        #   in Loop: Header=BB301_34 Depth=2
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB301_39
# %bb.36:                               # %if.then63
                                        #   in Loop: Header=BB301_34 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB301_38
# %bb.37:                               # %if.then69
                                        #   in Loop: Header=BB301_30 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB301_42
.LBB301_38:                             # %if.end77
                                        #   in Loop: Header=BB301_34 Depth=2
	jmp	.LBB301_39
.LBB301_39:                             # %if.end78
                                        #   in Loop: Header=BB301_34 Depth=2
	jmp	.LBB301_40
.LBB301_40:                             # %for.inc79
                                        #   in Loop: Header=BB301_34 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB301_34
.LBB301_41:                             # %for.end81.loopexit
                                        #   in Loop: Header=BB301_30 Depth=1
	jmp	.LBB301_42
.LBB301_42:                             # %for.end81
                                        #   in Loop: Header=BB301_30 Depth=1
	jmp	.LBB301_43
.LBB301_43:                             # %for.cond82
                                        #   Parent Loop BB301_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB301_50
# %bb.44:                               # %for.body84
                                        #   in Loop: Header=BB301_43 Depth=2
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB301_48
# %bb.45:                               # %if.then90
                                        #   in Loop: Header=BB301_43 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB301_47
# %bb.46:                               # %if.then96
                                        #   in Loop: Header=BB301_30 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB301_51
.LBB301_47:                             # %if.end104
                                        #   in Loop: Header=BB301_43 Depth=2
	jmp	.LBB301_48
.LBB301_48:                             # %if.end105
                                        #   in Loop: Header=BB301_43 Depth=2
	jmp	.LBB301_49
.LBB301_49:                             # %for.inc106
                                        #   in Loop: Header=BB301_43 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB301_43
.LBB301_50:                             # %for.end108.loopexit
                                        #   in Loop: Header=BB301_30 Depth=1
	jmp	.LBB301_51
.LBB301_51:                             # %for.end108
                                        #   in Loop: Header=BB301_30 Depth=1
	jmp	.LBB301_30
.LBB301_52:                             # %while.end109
	jmp	.LBB301_53
.LBB301_53:                             # %if.end110
	cmpl	$1979824462, -64(%rbp)  # imm = 0x7601B94E
	jne	.LBB301_55
.LBB301_54:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB301_55:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB301_54
.Lfunc_end301:
	.size	gen_pic_list_from_frame_list.238, .Lfunc_end301-gen_pic_list_from_frame_list.238
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_lt_pic_num_asc.239
	.type	compare_pic_by_lt_pic_num_asc.239,@function
compare_pic_by_lt_pic_num_asc.239:      # @compare_pic_by_lt_pic_num_asc.239
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1193365944, -16(%rbp)  # imm = 0x472151B8
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	6368(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6368(%rcx), %eax
	jge	.LBB302_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB302_5
.LBB302_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	6368(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6368(%rcx), %eax
	jle	.LBB302_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB302_5
.LBB302_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB302_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1193365944, -16(%rbp)  # imm = 0x472151B8
	jne	.LBB302_7
.LBB302_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB302_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB302_6
.Lfunc_end302:
	.size	compare_pic_by_lt_pic_num_asc.239, .Lfunc_end302-compare_pic_by_lt_pic_num_asc.239
	.cfi_endproc
                                        # -- End function
	.globl	alloc_storable_picture.240 # -- Begin function alloc_storable_picture.240
	.p2align	4, 0x90
	.type	alloc_storable_picture.240,@function
alloc_storable_picture.240:             # @alloc_storable_picture.240
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$363894152, -40(%rbp)   # imm = 0x15B09588
	movl	%edi, -36(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -32(%rbp)
	movl	%r8d, -28(%rbp)
	movl	$1, %edi
	movl	$6584, %esi             # imm = 0x19B8
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -16(%rbp)
	cmpq	-16(%rbp), %rcx
	jne	.LBB303_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.7, %rdi
	callq	no_mem_exit
.LBB303_2:                              # %if.end
	movq	-16(%rbp), %rdi
	addq	$6424, %rdi             # imm = 0x1918
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	callq	get_mem2Dpel
	movq	-16(%rbp), %rax
	movq	$0, 6432(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6448(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6464(%rax)
	movq	input, %rax
	cmpl	$0, 1284(%rax)
	jne	.LBB303_5
# %bb.3:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 1288(%rax)
	jne	.LBB303_5
# %bb.4:                                # %lor.lhs.false3
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB303_6
.LBB303_5:                              # %if.then5
	movq	-16(%rbp), %rax
	movq	$0, 6440(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6456(%rax)
.LBB303_6:                              # %if.end6
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB303_8
# %bb.7:                                # %if.then8
	movq	-16(%rbp), %rdi
	addq	$6464, %rdi             # imm = 0x1940
	movl	-28(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	$2, %esi
	callq	get_mem3Dpel
.LBB303_8:                              # %if.end11
	movq	img, %rax
	movl	72484(%rax), %edi
	movl	$4, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	-16(%rbp), %rdx
	movq	%rax, 6472(%rdx)
	movq	-16(%rbp), %rax
	cmpq	6472(%rax), %rcx
	jne	.LBB303_10
# %bb.9:                                # %if.then16
	movabsq	$.L.str.8, %rdi
	callq	no_mem_exit
.LBB303_10:                             # %if.end17
	movq	-16(%rbp), %rdi
	addq	$6480, %rdi             # imm = 0x1950
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-16(%rbp), %rdi
	addq	$6488, %rdi             # imm = 0x1958
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	movl	$6, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-16(%rbp), %rdi
	addq	$6496, %rdi             # imm = 0x1960
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	movl	$6, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-16(%rbp), %rdi
	addq	$6504, %rdi             # imm = 0x1968
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-16(%rbp), %rdi
	addq	$6512, %rdi             # imm = 0x1970
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-24(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-16(%rbp), %rdi
	addq	$6520, %rdi             # imm = 0x1978
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-24(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-16(%rbp), %rax
	movl	$0, 6364(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6360(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6372(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6368(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6380(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6376(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6388(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6384(%rax)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6392(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6396(%rcx)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6400(%rcx)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6404(%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 6528(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6536(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6544(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6412(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6416(%rax)
	movq	-16(%rbp), %rbx
	cmpl	$363894152, -40(%rbp)   # imm = 0x15B09588
	jne	.LBB303_12
.LBB303_11:
	movq	%rbx, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB303_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB303_11
.Lfunc_end303:
	.size	alloc_storable_picture.240, .Lfunc_end303-alloc_storable_picture.240
	.cfi_endproc
                                        # -- End function
	.globl	gen_field_ref_ids.241   # -- Begin function gen_field_ref_ids.241
	.p2align	4, 0x90
	.type	gen_field_ref_ids.241,@function
gen_field_ref_ids.241:                  # @gen_field_ref_ids.241
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1770430445, -28(%rbp)  # imm = 0x69869FED
	movq	%rdi, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB304_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB304_3 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB304_14
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB304_1 Depth=1
	movl	$0, -4(%rbp)
.LBB304_3:                              # %for.cond1
                                        #   Parent Loop BB304_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB304_12
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB304_3 Depth=2
	movq	-16(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB304_6
# %bb.5:                                # %cond.true
                                        #   in Loop: Header=BB304_3 Depth=2
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB304_7
.LBB304_6:                              # %cond.false
                                        #   in Loop: Header=BB304_3 Depth=2
	xorl	%eax, %eax
	jmp	.LBB304_7
.LBB304_7:                              # %cond.end
                                        #   in Loop: Header=BB304_3 Depth=2
	movq	-16(%rbp), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB304_9
# %bb.8:                                # %cond.true27
                                        #   in Loop: Header=BB304_3 Depth=2
	movq	-16(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB304_10
.LBB304_9:                              # %cond.false32
                                        #   in Loop: Header=BB304_3 Depth=2
	xorl	%eax, %eax
	jmp	.LBB304_10
.LBB304_10:                             # %cond.end33
                                        #   in Loop: Header=BB304_3 Depth=2
	movq	-16(%rbp), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB304_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB304_3
.LBB304_12:                             # %for.end
                                        #   in Loop: Header=BB304_1 Depth=1
	jmp	.LBB304_13
.LBB304_13:                             # %for.inc45
                                        #   in Loop: Header=BB304_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB304_1
.LBB304_14:                             # %for.end47
	cmpl	$1770430445, -28(%rbp)  # imm = 0x69869FED
	jne	.LBB304_16
.LBB304_15:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB304_16:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB304_15
.Lfunc_end304:
	.size	gen_field_ref_ids.241, .Lfunc_end304-gen_field_ref_ids.241
	.cfi_endproc
                                        # -- End function
	.globl	alloc_colocated.242     # -- Begin function alloc_colocated.242
	.p2align	4, 0x90
	.type	alloc_colocated.242,@function
alloc_colocated.242:                    # @alloc_colocated.242
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1745303294, -32(%rbp)  # imm = 0x680736FE
	movl	%edi, -16(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -28(%rbp)
	movl	$1, %edi
	movl	$4880, %esi             # imm = 0x1310
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -24(%rbp)
	cmpq	-24(%rbp), %rcx
	jne	.LBB305_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.21, %rdi
	callq	no_mem_exit
.LBB305_2:                              # %if.end
	movl	-16(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-24(%rbp), %rdi
	addq	$1600, %rdi             # imm = 0x640
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$1608, %rdi             # imm = 0x648
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$1616, %rdi             # imm = 0x650
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$1624, %rdi             # imm = 0x658
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-24(%rbp), %rdi
	addq	$4872, %rdi             # imm = 0x1308
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	cmpl	$0, -28(%rbp)
	je	.LBB305_4
# %bb.3:                                # %if.then17
	movq	-24(%rbp), %rdi
	addq	$3216, %rdi             # imm = 0xC90
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$3224, %rdi             # imm = 0xC98
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$3232, %rdi             # imm = 0xCA0
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$3240, %rdi             # imm = 0xCA8
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-24(%rbp), %rdi
	addq	$4832, %rdi             # imm = 0x12E0
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$4840, %rdi             # imm = 0x12E8
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$4848, %rdi             # imm = 0x12F0
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$4856, %rdi             # imm = 0x12F8
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
.LBB305_4:                              # %if.end50
	movl	-28(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rbx
	cmpl	$1745303294, -32(%rbp)  # imm = 0x680736FE
	jne	.LBB305_6
.LBB305_5:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB305_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB305_5
.Lfunc_end305:
	.size	alloc_colocated.242, .Lfunc_end305-alloc_colocated.242
	.cfi_endproc
                                        # -- End function
	.globl	store_picture_in_dpb.243 # -- Begin function store_picture_in_dpb.243
	.p2align	4, 0x90
	.type	store_picture_in_dpb.243,@function
store_picture_in_dpb.243:               # @store_picture_in_dpb.243
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$998301181, -16(%rbp)   # imm = 0x3B80DDFD
	movq	%rdi, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 6380(%rcx)
	movq	img, %rax
	movl	$0, 72644(%rax)
	movq	img, %rax
	cmpl	$2, 28(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 72640(%rcx)
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	je	.LBB306_2
# %bb.1:                                # %if.then
	movq	-8(%rbp), %rdi
	callq	idr_memory_management
	jmp	.LBB306_6
.LBB306_2:                              # %if.else
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB306_5
# %bb.3:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72500(%rax)
	je	.LBB306_5
# %bb.4:                                # %if.then6
	movq	-8(%rbp), %rdi
	callq	adaptive_memory_management
.LBB306_5:                              # %if.end
	jmp	.LBB306_6
.LBB306_6:                              # %if.end7
	movq	-8(%rbp), %rax
	cmpl	$1, (%rax)
	je	.LBB306_8
# %bb.7:                                # %lor.lhs.false
	movq	-8(%rbp), %rax
	cmpl	$2, (%rax)
	jne	.LBB306_23
.LBB306_8:                              # %if.then14
	cmpq	$0, dpb+56
	je	.LBB306_22
# %bb.9:                                # %if.then16
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	cmpl	6364(%rcx), %eax
	jne	.LBB306_21
# %bb.10:                               # %if.then19
	movq	-8(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB306_12
# %bb.11:                               # %land.lhs.true23
	movq	dpb+56, %rax
	cmpl	$2, (%rax)
	je	.LBB306_14
.LBB306_12:                             # %lor.lhs.false26
	movq	-8(%rbp), %rax
	cmpl	$2, (%rax)
	jne	.LBB306_20
# %bb.13:                               # %land.lhs.true30
	movq	dpb+56, %rax
	cmpl	$1, (%rax)
	jne	.LBB306_20
.LBB306_14:                             # %if.then34
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB306_16
# %bb.15:                               # %land.lhs.true37
	movq	dpb+56, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB306_18
.LBB306_16:                             # %lor.lhs.false40
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	jne	.LBB306_19
# %bb.17:                               # %land.lhs.true43
	movq	dpb+56, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB306_19
.LBB306_18:                             # %if.then47
	movq	dpb+56, %rdi
	movq	-8(%rbp), %rsi
	callq	insert_picture_in_dpb
	callq	update_ref_list
	callq	update_ltref_list
	callq	dump_dpb
	movq	$0, dpb+56
	jmp	.LBB306_50
.LBB306_19:                             # %if.end48
	jmp	.LBB306_20
.LBB306_20:                             # %if.end49
	jmp	.LBB306_21
.LBB306_21:                             # %if.end50
	jmp	.LBB306_22
.LBB306_22:                             # %if.end51
	jmp	.LBB306_23
.LBB306_23:                             # %if.end52
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	jne	.LBB306_27
# %bb.24:                               # %land.lhs.true56
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB306_27
# %bb.25:                               # %land.lhs.true59
	movq	img, %rax
	cmpl	$0, 72500(%rax)
	jne	.LBB306_27
# %bb.26:                               # %if.then62
	movq	-8(%rbp), %rdi
	callq	sliding_window_memory_management
.LBB306_27:                             # %if.end63
	movl	dpb+28, %eax
	cmpl	dpb+24, %eax
	jne	.LBB306_29
# %bb.28:                               # %if.then66
	callq	remove_unused_frame_from_dpb
.LBB306_29:                             # %if.end67
	jmp	.LBB306_30
.LBB306_30:                             # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	dpb+28, %eax
	cmpl	dpb+24, %eax
	jne	.LBB306_37
# %bb.31:                               # %while.body
                                        #   in Loop: Header=BB306_30 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	jne	.LBB306_36
# %bb.32:                               # %if.then72
                                        #   in Loop: Header=BB306_30 Depth=1
	leaq	-20(%rbp), %rdi
	leaq	-24(%rbp), %rsi
	callq	get_smallest_poc
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	cmpl	-24(%rbp), %eax
	je	.LBB306_34
# %bb.33:                               # %lor.lhs.false75
                                        #   in Loop: Header=BB306_30 Depth=1
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB306_35
.LBB306_34:                             # %if.then79
	movq	-8(%rbp), %rdi
	movl	p_dec, %esi
	callq	direct_output
	jmp	.LBB306_50
.LBB306_35:                             # %if.end80
                                        #   in Loop: Header=BB306_30 Depth=1
	jmp	.LBB306_36
.LBB306_36:                             # %if.end81
                                        #   in Loop: Header=BB306_30 Depth=1
	callq	output_one_frame_from_dpb
	jmp	.LBB306_30
.LBB306_37:                             # %while.end
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB306_46
# %bb.38:                               # %land.lhs.true84
	movq	-8(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB306_46
# %bb.39:                               # %if.then86
	movl	$0, -12(%rbp)
.LBB306_40:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB306_45
# %bb.41:                               # %for.body
                                        #   in Loop: Header=BB306_40 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	cmpl	6360(%rcx), %eax
	jne	.LBB306_43
# %bb.42:                               # %if.then93
                                        #   in Loop: Header=BB306_40 Depth=1
	movabsq	$.L.str.13, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB306_43:                             # %if.end94
                                        #   in Loop: Header=BB306_40 Depth=1
	jmp	.LBB306_44
.LBB306_44:                             # %for.inc
                                        #   in Loop: Header=BB306_40 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB306_40
.LBB306_45:                             # %for.end
	jmp	.LBB306_46
.LBB306_46:                             # %if.end95
	movq	dpb, %rax
	movl	dpb+28, %ecx
	movq	(%rax,%rcx,8), %rdi
	movq	-8(%rbp), %rsi
	callq	insert_picture_in_dpb
	movq	-8(%rbp), %rax
	cmpl	$0, (%rax)
	je	.LBB306_48
# %bb.47:                               # %if.then101
	movq	dpb, %rax
	movl	dpb+28, %ecx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, dpb+56
	jmp	.LBB306_49
.LBB306_48:                             # %if.else104
	movq	$0, dpb+56
.LBB306_49:                             # %if.end105
	movl	dpb+28, %eax
	addl	$1, %eax
	movl	%eax, dpb+28
	callq	update_ref_list
	callq	update_ltref_list
	callq	dump_dpb
.LBB306_50:                             # %return
	cmpl	$998301181, -16(%rbp)   # imm = 0x3B80DDFD
	jne	.LBB306_52
.LBB306_51:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB306_52:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB306_51
.Lfunc_end306:
	.size	store_picture_in_dpb.243, .Lfunc_end306-store_picture_in_dpb.243
	.cfi_endproc
                                        # -- End function
	.globl	dpb_split_field.244     # -- Begin function dpb_split_field.244
	.p2align	4, 0x90
	.type	dpb_split_field.244,@function
dpb_split_field.244:                    # @dpb_split_field.244
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$634873878, -60(%rbp)   # imm = 0x25D76816
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 36(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB307_28
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %r8d
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	idivl	%edi
	movl	$1, %edi
	movl	%r8d, %edx
	movl	%eax, %r8d
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %r8d
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	idivl	%edi
	movl	$2, %edi
	movl	%r8d, %edx
	movl	%eax, %r8d
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 56(%rcx)
	movl	$0, -4(%rbp)
.LBB307_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB307_5
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB307_2 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.4:                                # %for.inc
                                        #   in Loop: Header=BB307_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB307_2
.LBB307_5:                              # %for.end
	movl	$0, -4(%rbp)
.LBB307_6:                              # %for.cond30
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB307_9
# %bb.7:                                # %for.body36
                                        #   in Loop: Header=BB307_6 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.8:                                # %for.inc66
                                        #   in Loop: Header=BB307_6 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB307_6
.LBB307_9:                              # %for.end68
	movl	$0, -4(%rbp)
.LBB307_10:                             # %for.cond69
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB307_13
# %bb.11:                               # %for.body75
                                        #   in Loop: Header=BB307_10 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.12:                               # %for.inc89
                                        #   in Loop: Header=BB307_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB307_10
.LBB307_13:                             # %for.end91
	movl	$0, -4(%rbp)
.LBB307_14:                             # %for.cond92
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB307_17
# %bb.15:                               # %for.body98
                                        #   in Loop: Header=BB307_14 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.16:                               # %for.inc131
                                        #   in Loop: Header=BB307_14 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB307_14
.LBB307_17:                             # %for.end133
	movq	-16(%rbp), %rax
	movq	48(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	56(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6380(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6380(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6380(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6376(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	-16(%rbp), %rcx
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	$1, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	$1, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6416(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6416(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6416(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6552(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB307_27
# %bb.18:                               # %if.then211
	movl	$0, -4(%rbp)
.LBB307_19:                             # %for.cond212
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB307_22
# %bb.20:                               # %for.body215
                                        #   in Loop: Header=BB307_19 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	816(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	816(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	1344(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	1344(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
# %bb.21:                               # %for.inc267
                                        #   in Loop: Header=BB307_19 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB307_19
.LBB307_22:                             # %for.end269
	movl	$0, -4(%rbp)
.LBB307_23:                             # %for.cond270
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB307_26
# %bb.24:                               # %for.body273
                                        #   in Loop: Header=BB307_23 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	552(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	552(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	1080(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	1080(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
# %bb.25:                               # %for.inc326
                                        #   in Loop: Header=BB307_23 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB307_23
.LBB307_26:                             # %for.end328
	jmp	.LBB307_27
.LBB307_27:                             # %if.end
	jmp	.LBB307_29
.LBB307_28:                             # %if.else
	movq	-16(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 56(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	$0, 6528(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	$0, 6536(%rax)
.LBB307_29:                             # %if.end335
	movl	$0, -8(%rbp)
.LBB307_30:                             # %for.cond336
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB307_32 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB307_59
# %bb.31:                               # %for.body342
                                        #   in Loop: Header=BB307_30 Depth=1
	movl	$0, -4(%rbp)
.LBB307_32:                             # %for.cond343
                                        #   Parent Loop BB307_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB307_57
# %bb.33:                               # %for.body349
                                        #   in Loop: Header=BB307_32 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -80(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-48(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	imull	%eax, %ecx
	movl	-80(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-48(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -32(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB307_48
# %bb.34:                               # %land.lhs.true
                                        #   in Loop: Header=BB307_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-32(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB307_48
# %bb.35:                               # %if.then369
                                        #   in Loop: Header=BB307_32 Depth=2
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	movl	%ecx, -28(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB307_37
# %bb.36:                               # %cond.true
                                        #   in Loop: Header=BB307_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB307_38
.LBB307_37:                             # %cond.false
                                        #   in Loop: Header=BB307_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB307_38
.LBB307_38:                             # %cond.end
                                        #   in Loop: Header=BB307_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB307_40
# %bb.39:                               # %cond.true407
                                        #   in Loop: Header=BB307_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB307_41
.LBB307_40:                             # %cond.false415
                                        #   in Loop: Header=BB307_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB307_41
.LBB307_41:                             # %cond.end416
                                        #   in Loop: Header=BB307_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB307_43
# %bb.42:                               # %cond.true429
                                        #   in Loop: Header=BB307_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$1608, %rax             # imm = 0x648
	movl	-28(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB307_44
.LBB307_43:                             # %cond.false436
                                        #   in Loop: Header=BB307_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB307_44
.LBB307_44:                             # %cond.end437
                                        #   in Loop: Header=BB307_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB307_46
# %bb.45:                               # %cond.true448
                                        #   in Loop: Header=BB307_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$1608, %rax             # imm = 0x648
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB307_47
.LBB307_46:                             # %cond.false456
                                        #   in Loop: Header=BB307_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB307_47
.LBB307_47:                             # %cond.end457
                                        #   in Loop: Header=BB307_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB307_55
.LBB307_48:                             # %if.else466
                                        #   in Loop: Header=BB307_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB307_50
# %bb.49:                               # %cond.true485
                                        #   in Loop: Header=BB307_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB307_51
.LBB307_50:                             # %cond.false491
                                        #   in Loop: Header=BB307_32 Depth=2
	movq	$-1, %rax
	jmp	.LBB307_51
.LBB307_51:                             # %cond.end492
                                        #   in Loop: Header=BB307_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB307_53
# %bb.52:                               # %cond.true503
                                        #   in Loop: Header=BB307_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB307_54
.LBB307_53:                             # %cond.false509
                                        #   in Loop: Header=BB307_32 Depth=2
	movq	$-1, %rax
	jmp	.LBB307_54
.LBB307_54:                             # %cond.end510
                                        #   in Loop: Header=BB307_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB307_55:                             # %if.end519
                                        #   in Loop: Header=BB307_32 Depth=2
	jmp	.LBB307_56
.LBB307_56:                             # %for.inc520
                                        #   in Loop: Header=BB307_32 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB307_32
.LBB307_57:                             # %for.end522
                                        #   in Loop: Header=BB307_30 Depth=1
	jmp	.LBB307_58
.LBB307_58:                             # %for.inc523
                                        #   in Loop: Header=BB307_30 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB307_30
.LBB307_59:                             # %for.end525
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	je	.LBB307_61
# %bb.60:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB307_73
.LBB307_61:                             # %if.then530
	movl	$0, -4(%rbp)
.LBB307_62:                             # %for.cond531
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB307_64 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB307_72
# %bb.63:                               # %for.body537
                                        #   in Loop: Header=BB307_62 Depth=1
	movl	$0, -8(%rbp)
.LBB307_64:                             # %for.cond538
                                        #   Parent Loop BB307_62 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB307_70
# %bb.65:                               # %for.body544
                                        #   in Loop: Header=BB307_64 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -76(%rbp)
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-40(%rbp), %eax
	cltd
	idivl	%esi
	imull	%eax, %ecx
	movl	-76(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-40(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB307_68
# %bb.66:                               # %land.lhs.true563
                                        #   in Loop: Header=BB307_64 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-64(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB307_68
# %bb.67:                               # %if.then570
                                        #   in Loop: Header=BB307_64 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	32(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	40(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB307_68:                             # %if.end908
                                        #   in Loop: Header=BB307_64 Depth=2
	jmp	.LBB307_69
.LBB307_69:                             # %for.inc909
                                        #   in Loop: Header=BB307_64 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB307_64
.LBB307_70:                             # %for.end911
                                        #   in Loop: Header=BB307_62 Depth=1
	jmp	.LBB307_71
.LBB307_71:                             # %for.inc912
                                        #   in Loop: Header=BB307_62 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB307_62
.LBB307_72:                             # %for.end914
	jmp	.LBB307_73
.LBB307_73:                             # %if.end915
	movl	$0, -4(%rbp)
.LBB307_74:                             # %for.cond916
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB307_76 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB307_152
# %bb.75:                               # %for.body922
                                        #   in Loop: Header=BB307_74 Depth=1
	movl	$0, -8(%rbp)
.LBB307_76:                             # %for.cond923
                                        #   Parent Loop BB307_74 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB307_150
# %bb.77:                               # %for.body929
                                        #   in Loop: Header=BB307_76 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -68(%rbp)
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-44(%rbp), %eax
	cltd
	idivl	%esi
	imull	%eax, %ecx
	movl	-68(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-44(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -52(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB307_79
# %bb.78:                               # %lor.lhs.false948
                                        #   in Loop: Header=BB307_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-52(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB307_148
.LBB307_79:                             # %if.then954
                                        #   in Loop: Header=BB307_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB307_147
# %bb.80:                               # %if.then973
                                        #   in Loop: Header=BB307_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB307_82
# %bb.81:                               # %cond.true990
                                        #   in Loop: Header=BB307_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB307_83
.LBB307_82:                             # %cond.false991
                                        #   in Loop: Header=BB307_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB307_83:                             # %cond.end993
                                        #   in Loop: Header=BB307_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB307_85
# %bb.84:                               # %cond.true999
                                        #   in Loop: Header=BB307_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB307_86
.LBB307_85:                             # %cond.false1001
                                        #   in Loop: Header=BB307_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB307_86:                             # %cond.end1003
                                        #   in Loop: Header=BB307_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB307_88
# %bb.87:                               # %cond.true1030
                                        #   in Loop: Header=BB307_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB307_89
.LBB307_88:                             # %cond.false1032
                                        #   in Loop: Header=BB307_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB307_89:                             # %cond.end1034
                                        #   in Loop: Header=BB307_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB307_91
# %bb.90:                               # %cond.true1040
                                        #   in Loop: Header=BB307_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB307_92
.LBB307_91:                             # %cond.false1042
                                        #   in Loop: Header=BB307_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB307_92:                             # %cond.end1044
                                        #   in Loop: Header=BB307_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB307_94
# %bb.93:                               # %cond.true1071
                                        #   in Loop: Header=BB307_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB307_95
.LBB307_94:                             # %cond.false1073
                                        #   in Loop: Header=BB307_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB307_95:                             # %cond.end1075
                                        #   in Loop: Header=BB307_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB307_97
# %bb.96:                               # %cond.true1081
                                        #   in Loop: Header=BB307_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB307_98
.LBB307_97:                             # %cond.false1083
                                        #   in Loop: Header=BB307_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB307_98:                             # %cond.end1085
                                        #   in Loop: Header=BB307_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB307_100
# %bb.99:                               # %cond.true1112
                                        #   in Loop: Header=BB307_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB307_101
.LBB307_100:                            # %cond.false1114
                                        #   in Loop: Header=BB307_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB307_101:                            # %cond.end1116
                                        #   in Loop: Header=BB307_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB307_103
# %bb.102:                              # %cond.true1122
                                        #   in Loop: Header=BB307_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB307_104
.LBB307_103:                            # %cond.false1124
                                        #   in Loop: Header=BB307_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB307_104:                            # %cond.end1126
                                        #   in Loop: Header=BB307_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB307_106
# %bb.105:                              # %cond.true1153
                                        #   in Loop: Header=BB307_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB307_107
.LBB307_106:                            # %cond.false1155
                                        #   in Loop: Header=BB307_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB307_107:                            # %cond.end1157
                                        #   in Loop: Header=BB307_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB307_109
# %bb.108:                              # %cond.true1163
                                        #   in Loop: Header=BB307_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB307_110
.LBB307_109:                            # %cond.false1165
                                        #   in Loop: Header=BB307_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB307_110:                            # %cond.end1167
                                        #   in Loop: Header=BB307_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB307_112
# %bb.111:                              # %if.then1175
                                        #   in Loop: Header=BB307_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	jmp	.LBB307_125
.LBB307_112:                            # %if.else1190
                                        #   in Loop: Header=BB307_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB307_114
# %bb.113:                              # %cond.true1196
                                        #   in Loop: Header=BB307_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB307_115
.LBB307_114:                            # %cond.false1198
                                        #   in Loop: Header=BB307_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB307_115:                            # %cond.end1200
                                        #   in Loop: Header=BB307_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB307_117
# %bb.116:                              # %cond.true1206
                                        #   in Loop: Header=BB307_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB307_118
.LBB307_117:                            # %cond.false1208
                                        #   in Loop: Header=BB307_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB307_118:                            # %cond.end1210
                                        #   in Loop: Header=BB307_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cwtl
	movl	%eax, -20(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB307_120
# %bb.119:                              # %cond.true1232
                                        #   in Loop: Header=BB307_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	3192(%rax,%rcx,8), %rax
	jmp	.LBB307_121
.LBB307_120:                            # %cond.false1237
                                        #   in Loop: Header=BB307_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB307_121
.LBB307_121:                            # %cond.end1238
                                        #   in Loop: Header=BB307_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB307_123
# %bb.122:                              # %cond.true1249
                                        #   in Loop: Header=BB307_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	4776(%rax,%rcx,8), %rax
	jmp	.LBB307_124
.LBB307_123:                            # %cond.false1254
                                        #   in Loop: Header=BB307_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB307_124
.LBB307_124:                            # %cond.end1255
                                        #   in Loop: Header=BB307_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB307_125:                            # %if.end1264
                                        #   in Loop: Header=BB307_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB307_127
# %bb.126:                              # %cond.true1270
                                        #   in Loop: Header=BB307_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB307_128
.LBB307_127:                            # %cond.false1272
                                        #   in Loop: Header=BB307_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB307_128:                            # %cond.end1274
                                        #   in Loop: Header=BB307_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB307_130
# %bb.129:                              # %cond.true1280
                                        #   in Loop: Header=BB307_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB307_131
.LBB307_130:                            # %cond.false1282
                                        #   in Loop: Header=BB307_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB307_131:                            # %cond.end1284
                                        #   in Loop: Header=BB307_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB307_133
# %bb.132:                              # %if.then1292
                                        #   in Loop: Header=BB307_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	jmp	.LBB307_146
.LBB307_133:                            # %if.else1307
                                        #   in Loop: Header=BB307_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB307_135
# %bb.134:                              # %cond.true1313
                                        #   in Loop: Header=BB307_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB307_136
.LBB307_135:                            # %cond.false1315
                                        #   in Loop: Header=BB307_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB307_136:                            # %cond.end1317
                                        #   in Loop: Header=BB307_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB307_138
# %bb.137:                              # %cond.true1323
                                        #   in Loop: Header=BB307_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB307_139
.LBB307_138:                            # %cond.false1325
                                        #   in Loop: Header=BB307_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB307_139:                            # %cond.end1327
                                        #   in Loop: Header=BB307_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cwtl
	movl	%eax, -24(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB307_141
# %bb.140:                              # %cond.true1349
                                        #   in Loop: Header=BB307_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	3456(%rax,%rcx,8), %rax
	jmp	.LBB307_142
.LBB307_141:                            # %cond.false1355
                                        #   in Loop: Header=BB307_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB307_142
.LBB307_142:                            # %cond.end1356
                                        #   in Loop: Header=BB307_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB307_144
# %bb.143:                              # %cond.true1367
                                        #   in Loop: Header=BB307_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	5040(%rax,%rcx,8), %rax
	jmp	.LBB307_145
.LBB307_144:                            # %cond.false1373
                                        #   in Loop: Header=BB307_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB307_145
.LBB307_145:                            # %cond.end1374
                                        #   in Loop: Header=BB307_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB307_146:                            # %if.end1383
                                        #   in Loop: Header=BB307_76 Depth=2
	jmp	.LBB307_147
.LBB307_147:                            # %if.end1384
                                        #   in Loop: Header=BB307_76 Depth=2
	jmp	.LBB307_148
.LBB307_148:                            # %if.end1385
                                        #   in Loop: Header=BB307_76 Depth=2
	jmp	.LBB307_149
.LBB307_149:                            # %for.inc1386
                                        #   in Loop: Header=BB307_76 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB307_76
.LBB307_150:                            # %for.end1388
                                        #   in Loop: Header=BB307_74 Depth=1
	jmp	.LBB307_151
.LBB307_151:                            # %for.inc1389
                                        #   in Loop: Header=BB307_74 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB307_74
.LBB307_152:                            # %for.end1391
	movl	$0, -8(%rbp)
.LBB307_153:                            # %for.cond1392
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB307_155 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB307_160
# %bb.154:                              # %for.body1398
                                        #   in Loop: Header=BB307_153 Depth=1
	movl	$0, -4(%rbp)
.LBB307_155:                            # %for.cond1399
                                        #   Parent Loop BB307_153 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB307_158
# %bb.156:                              # %for.body1405
                                        #   in Loop: Header=BB307_155 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
# %bb.157:                              # %for.inc1412
                                        #   in Loop: Header=BB307_155 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB307_155
.LBB307_158:                            # %for.end1414
                                        #   in Loop: Header=BB307_153 Depth=1
	jmp	.LBB307_159
.LBB307_159:                            # %for.inc1415
                                        #   in Loop: Header=BB307_153 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB307_153
.LBB307_160:                            # %for.end1417
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB307_162
# %bb.161:                              # %lor.lhs.false1420
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB307_174
.LBB307_162:                            # %if.then1423
	movl	$0, -8(%rbp)
.LBB307_163:                            # %for.cond1424
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB307_165 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB307_173
# %bb.164:                              # %for.body1430
                                        #   in Loop: Header=BB307_163 Depth=1
	movl	$0, -4(%rbp)
.LBB307_165:                            # %for.cond1431
                                        #   Parent Loop BB307_163 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB307_171
# %bb.166:                              # %for.body1437
                                        #   in Loop: Header=BB307_165 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -56(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	imull	%eax, %ecx
	movl	-56(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-36(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -72(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB307_168
# %bb.167:                              # %cond.true1456
                                        #   in Loop: Header=BB307_165 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-72(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	jmp	.LBB307_169
.LBB307_168:                            # %cond.false1462
                                        #   in Loop: Header=BB307_165 Depth=2
	xorl	%eax, %eax
	jmp	.LBB307_169
.LBB307_169:                            # %cond.end1463
                                        #   in Loop: Header=BB307_165 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6520(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.170:                              # %for.inc1472
                                        #   in Loop: Header=BB307_165 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB307_165
.LBB307_171:                            # %for.end1474
                                        #   in Loop: Header=BB307_163 Depth=1
	jmp	.LBB307_172
.LBB307_172:                            # %for.inc1475
                                        #   in Loop: Header=BB307_163 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB307_163
.LBB307_173:                            # %for.end1477
	jmp	.LBB307_174
.LBB307_174:                            # %if.end1478
	cmpl	$634873878, -60(%rbp)   # imm = 0x25D76816
	jne	.LBB307_176
.LBB307_175:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB307_176:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB307_175
.Lfunc_end307:
	.size	dpb_split_field.244, .Lfunc_end307-dpb_split_field.244
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_assign_long_term_frame_idx.245
	.type	mm_assign_long_term_frame_idx.245,@function
mm_assign_long_term_frame_idx.245:      # @mm_assign_long_term_frame_idx.245
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1101768242, -32(%rbp)  # imm = 0x41ABA632
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -16(%rbp)
	movq	-24(%rbp), %rdi
	movl	-28(%rbp), %esi
	callq	get_pic_num_x
	movl	%eax, -8(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB308_2
# %bb.1:                                # %if.then
	movl	-16(%rbp), %edi
	callq	unmark_long_term_frame_for_reference_by_frame_idx
	jmp	.LBB308_18
.LBB308_2:                              # %if.else
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB308_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB308_14
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB308_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB308_8
# %bb.5:                                # %if.then3
                                        #   in Loop: Header=BB308_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB308_7
# %bb.6:                                # %if.then7
	movl	$1, -12(%rbp)
	jmp	.LBB308_15
.LBB308_7:                              # %if.end
                                        #   in Loop: Header=BB308_3 Depth=1
	jmp	.LBB308_8
.LBB308_8:                              # %if.end8
                                        #   in Loop: Header=BB308_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB308_12
# %bb.9:                                # %if.then14
                                        #   in Loop: Header=BB308_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB308_11
# %bb.10:                               # %if.then19
	movl	$2, -12(%rbp)
	jmp	.LBB308_15
.LBB308_11:                             # %if.end20
                                        #   in Loop: Header=BB308_3 Depth=1
	jmp	.LBB308_12
.LBB308_12:                             # %if.end21
                                        #   in Loop: Header=BB308_3 Depth=1
	jmp	.LBB308_13
.LBB308_13:                             # %for.inc
                                        #   in Loop: Header=BB308_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB308_3
.LBB308_14:                             # %for.end.loopexit
	jmp	.LBB308_15
.LBB308_15:                             # %for.end
	cmpl	$0, -12(%rbp)
	jne	.LBB308_17
# %bb.16:                               # %if.then23
	movabsq	$.L.str.24, %rdi
	movl	$200, %esi
	callq	error
.LBB308_17:                             # %if.end24
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-8(%rbp), %r8d
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	callq	unmark_long_term_field_for_reference_by_frame_idx
.LBB308_18:                             # %if.end25
	movq	-24(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-8(%rbp), %edx
	callq	mark_pic_long_term
	cmpl	$1101768242, -32(%rbp)  # imm = 0x41ABA632
	jne	.LBB308_20
.LBB308_19:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB308_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB308_19
.Lfunc_end308:
	.size	mm_assign_long_term_frame_idx.245, .Lfunc_end308-mm_assign_long_term_frame_idx.245
	.cfi_endproc
                                        # -- End function
	.globl	alloc_colocated.246     # -- Begin function alloc_colocated.246
	.p2align	4, 0x90
	.type	alloc_colocated.246,@function
alloc_colocated.246:                    # @alloc_colocated.246
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$525350890, -32(%rbp)   # imm = 0x1F5037EA
	movl	%edi, -12(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -28(%rbp)
	movl	$1, %edi
	movl	$4880, %esi             # imm = 0x1310
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -24(%rbp)
	cmpq	-24(%rbp), %rcx
	jne	.LBB309_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.21, %rdi
	callq	no_mem_exit
.LBB309_2:                              # %if.end
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-16(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-24(%rbp), %rdi
	addq	$1600, %rdi             # imm = 0x640
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$1608, %rdi             # imm = 0x648
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$1616, %rdi             # imm = 0x650
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$1624, %rdi             # imm = 0x658
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-24(%rbp), %rdi
	addq	$4872, %rdi             # imm = 0x1308
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	cmpl	$0, -28(%rbp)
	je	.LBB309_4
# %bb.3:                                # %if.then17
	movq	-24(%rbp), %rdi
	addq	$3216, %rdi             # imm = 0xC90
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$3224, %rdi             # imm = 0xC98
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$3232, %rdi             # imm = 0xCA0
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$3240, %rdi             # imm = 0xCA8
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-24(%rbp), %rdi
	addq	$4832, %rdi             # imm = 0x12E0
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$4840, %rdi             # imm = 0x12E8
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$4848, %rdi             # imm = 0x12F0
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$4856, %rdi             # imm = 0x12F8
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
.LBB309_4:                              # %if.end50
	movl	-28(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rbx
	cmpl	$525350890, -32(%rbp)   # imm = 0x1F5037EA
	jne	.LBB309_6
.LBB309_5:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB309_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB309_5
.Lfunc_end309:
	.size	alloc_colocated.246, .Lfunc_end309-alloc_colocated.246
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_lt_pic_idx_asc.247
	.type	compare_fs_by_lt_pic_idx_asc.247,@function
compare_fs_by_lt_pic_idx_asc.247:       # @compare_fs_by_lt_pic_idx_asc.247
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$360650405, -16(%rbp)   # imm = 0x157F16A5
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	28(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	28(%rcx), %eax
	jge	.LBB310_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB310_5
.LBB310_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	28(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	28(%rcx), %eax
	jle	.LBB310_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB310_5
.LBB310_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB310_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$360650405, -16(%rbp)   # imm = 0x157F16A5
	jne	.LBB310_7
.LBB310_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB310_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB310_6
.Lfunc_end310:
	.size	compare_fs_by_lt_pic_idx_asc.247, .Lfunc_end310-compare_fs_by_lt_pic_idx_asc.247
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_poc_desc.248
	.type	compare_pic_by_poc_desc.248,@function
compare_pic_by_poc_desc.248:            # @compare_pic_by_poc_desc.248
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$142322572, -16(%rbp)   # imm = 0x87BAB8C
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB311_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB311_5
.LBB311_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB311_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB311_5
.LBB311_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB311_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$142322572, -16(%rbp)   # imm = 0x87BAB8C
	jne	.LBB311_7
.LBB311_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB311_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB311_6
.Lfunc_end311:
	.size	compare_pic_by_poc_desc.248, .Lfunc_end311-compare_pic_by_poc_desc.248
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_assign_long_term_frame_idx.249
	.type	mm_assign_long_term_frame_idx.249,@function
mm_assign_long_term_frame_idx.249:      # @mm_assign_long_term_frame_idx.249
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$961780311, -32(%rbp)   # imm = 0x39539A57
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -16(%rbp)
	movq	-24(%rbp), %rdi
	movl	-28(%rbp), %esi
	callq	get_pic_num_x
	movl	%eax, -8(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB312_2
# %bb.1:                                # %if.then
	movl	-16(%rbp), %edi
	callq	unmark_long_term_frame_for_reference_by_frame_idx
	jmp	.LBB312_18
.LBB312_2:                              # %if.else
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB312_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB312_14
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB312_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB312_8
# %bb.5:                                # %if.then3
                                        #   in Loop: Header=BB312_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB312_7
# %bb.6:                                # %if.then7
	movl	$1, -12(%rbp)
	jmp	.LBB312_15
.LBB312_7:                              # %if.end
                                        #   in Loop: Header=BB312_3 Depth=1
	jmp	.LBB312_8
.LBB312_8:                              # %if.end8
                                        #   in Loop: Header=BB312_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB312_12
# %bb.9:                                # %if.then14
                                        #   in Loop: Header=BB312_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB312_11
# %bb.10:                               # %if.then19
	movl	$2, -12(%rbp)
	jmp	.LBB312_15
.LBB312_11:                             # %if.end20
                                        #   in Loop: Header=BB312_3 Depth=1
	jmp	.LBB312_12
.LBB312_12:                             # %if.end21
                                        #   in Loop: Header=BB312_3 Depth=1
	jmp	.LBB312_13
.LBB312_13:                             # %for.inc
                                        #   in Loop: Header=BB312_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB312_3
.LBB312_14:                             # %for.end.loopexit
	jmp	.LBB312_15
.LBB312_15:                             # %for.end
	cmpl	$0, -12(%rbp)
	jne	.LBB312_17
# %bb.16:                               # %if.then23
	movabsq	$.L.str.24, %rdi
	movl	$200, %esi
	callq	error
.LBB312_17:                             # %if.end24
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-8(%rbp), %r8d
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	callq	unmark_long_term_field_for_reference_by_frame_idx
.LBB312_18:                             # %if.end25
	movq	-24(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-8(%rbp), %edx
	callq	mark_pic_long_term
	cmpl	$961780311, -32(%rbp)   # imm = 0x39539A57
	jne	.LBB312_20
.LBB312_19:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB312_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB312_19
.Lfunc_end312:
	.size	mm_assign_long_term_frame_idx.249, .Lfunc_end312-mm_assign_long_term_frame_idx.249
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_lt_pic_idx_asc.250
	.type	compare_fs_by_lt_pic_idx_asc.250,@function
compare_fs_by_lt_pic_idx_asc.250:       # @compare_fs_by_lt_pic_idx_asc.250
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1486905668, -16(%rbp)  # imm = 0x58A06144
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	28(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	28(%rcx), %eax
	jge	.LBB313_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB313_5
.LBB313_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	28(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	28(%rcx), %eax
	jle	.LBB313_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB313_5
.LBB313_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB313_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1486905668, -16(%rbp)  # imm = 0x58A06144
	jne	.LBB313_7
.LBB313_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB313_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB313_6
.Lfunc_end313:
	.size	compare_fs_by_lt_pic_idx_asc.250, .Lfunc_end313-compare_fs_by_lt_pic_idx_asc.250
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function remove_frame_from_dpb.251
	.type	remove_frame_from_dpb.251,@function
remove_frame_from_dpb.251:              # @remove_frame_from_dpb.251
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$576567389, -20(%rbp)   # imm = 0x225DB85D
	movl	%edi, -16(%rbp)
	movq	dpb(%rip), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB314_6
# %bb.1:                                # %entry
	movq	.LJTI314_0(,%rax,8), %rax
	jmpq	*%rax
.LBB314_2:                              # %sw.bb
	movq	-8(%rbp), %rax
	movq	40(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	56(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 40(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 56(%rax)
	jmp	.LBB314_7
.LBB314_3:                              # %sw.bb4
	movq	-8(%rbp), %rax
	movq	56(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 56(%rax)
	jmp	.LBB314_7
.LBB314_4:                              # %sw.bb7
	movq	-8(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 48(%rax)
	jmp	.LBB314_7
.LBB314_5:                              # %sw.bb10
	jmp	.LBB314_7
.LBB314_6:                              # %sw.default
	movabsq	$.L.str.29, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB314_7:                              # %sw.epilog
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 4(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 12(%rax)
	movq	dpb, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -32(%rbp)
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB314_8:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movl	dpb+28, %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jae	.LBB314_11
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB314_8 Depth=1
	movq	dpb, %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movl	%ecx, %ecx
	movq	(%rax,%rcx,8), %rax
	movq	dpb, %rcx
	movl	-12(%rbp), %edx
	movq	%rax, (%rcx,%rdx,8)
# %bb.10:                               # %for.inc
                                        #   in Loop: Header=BB314_8 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB314_8
.LBB314_11:                             # %for.end
	movq	-32(%rbp), %rax
	movq	dpb, %rcx
	movl	dpb+28, %edx
	subl	$1, %edx
	movl	%edx, %edx
	movq	%rax, (%rcx,%rdx,8)
	movl	dpb+28, %eax
	addl	$-1, %eax
	movl	%eax, dpb+28
	cmpl	$576567389, -20(%rbp)   # imm = 0x225DB85D
	jne	.LBB314_13
.LBB314_12:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB314_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB314_12
.Lfunc_end314:
	.size	remove_frame_from_dpb.251, .Lfunc_end314-remove_frame_from_dpb.251
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI314_0:
	.quad	.LBB314_5
	.quad	.LBB314_4
	.quad	.LBB314_3
	.quad	.LBB314_2
                                        # -- End function
	.text
	.globl	compute_colocated.252   # -- Begin function compute_colocated.252
	.p2align	4, 0x90
	.type	compute_colocated.252,@function
compute_colocated.252:                  # @compute_colocated.252
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$1252346387, -72(%rbp)  # imm = 0x4AA54A13
	movq	%rdi, -24(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -56(%rbp)
	movq	%rax, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB315_2
# %bb.1:                                # %if.then
	movq	-48(%rbp), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-48(%rbp), %rax
	movq	40(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	jmp	.LBB315_11
.LBB315_2:                              # %if.else
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB315_10
# %bb.3:                                # %if.then6
	movq	img, %rax
	movl	28(%rax), %eax
	movq	-32(%rbp), %rcx
	cmpl	(%rcx), %eax
	je	.LBB315_9
# %bb.4:                                # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$0, 6412(%rax)
	je	.LBB315_9
# %bb.5:                                # %if.then11
	movq	img, %rax
	cmpl	$1, 28(%rax)
	jne	.LBB315_7
# %bb.6:                                # %if.then14
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	6528(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -56(%rbp)
	movq	%rax, -40(%rbp)
	jmp	.LBB315_8
.LBB315_7:                              # %if.else17
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	6536(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -56(%rbp)
	movq	%rax, -40(%rbp)
.LBB315_8:                              # %if.end
	jmp	.LBB315_9
.LBB315_9:                              # %if.end20
	jmp	.LBB315_10
.LBB315_10:                             # %if.end21
	jmp	.LBB315_11
.LBB315_11:                             # %if.end22
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB315_13
# %bb.12:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB315_29
.LBB315_13:                             # %if.then25
	movl	$0, -12(%rbp)
.LBB315_14:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB315_16 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB315_28
# %bb.15:                               # %for.body
                                        #   in Loop: Header=BB315_14 Depth=1
	movl	$0, -16(%rbp)
.LBB315_16:                             # %for.cond27
                                        #   Parent Loop BB315_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB315_26
# %bb.17:                               # %for.body30
                                        #   in Loop: Header=BB315_16 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB315_23
# %bb.18:                               # %land.lhs.true33
                                        #   in Loop: Header=BB315_16 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB315_23
# %bb.19:                               # %if.then38
                                        #   in Loop: Header=BB315_16 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-56(%rbp), %rax
	subl	4(%rax), %edi
	callq	abs
	movl	%eax, %ebx
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-40(%rbp), %rax
	subl	4(%rax), %edi
	callq	abs
	cmpl	%eax, %ebx
	jle	.LBB315_21
# %bb.20:                               # %if.then46
                                        #   in Loop: Header=BB315_16 Depth=2
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	jmp	.LBB315_22
.LBB315_21:                             # %if.else160
                                        #   in Loop: Header=BB315_16 Depth=2
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-56(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB315_22:                             # %if.end283
                                        #   in Loop: Header=BB315_16 Depth=2
	jmp	.LBB315_24
.LBB315_23:                             # %if.else284
                                        #   in Loop: Header=BB315_16 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB315_24:                             # %if.end391
                                        #   in Loop: Header=BB315_16 Depth=2
	jmp	.LBB315_25
.LBB315_25:                             # %for.inc
                                        #   in Loop: Header=BB315_16 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB315_16
.LBB315_26:                             # %for.end
                                        #   in Loop: Header=BB315_14 Depth=1
	jmp	.LBB315_27
.LBB315_27:                             # %for.inc392
                                        #   in Loop: Header=BB315_14 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB315_14
.LBB315_28:                             # %for.end394
	jmp	.LBB315_29
.LBB315_29:                             # %if.end395
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB315_31
# %bb.30:                               # %lor.lhs.false398
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB315_241
.LBB315_31:                             # %if.then401
	movl	$0, -16(%rbp)
.LBB315_32:                             # %for.cond402
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB315_34 Depth 2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB315_240
# %bb.33:                               # %for.body407
                                        #   in Loop: Header=BB315_32 Depth=1
	movl	$0, -12(%rbp)
.LBB315_34:                             # %for.cond408
                                        #   Parent Loop BB315_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB315_238
# %bb.35:                               # %for.body413
                                        #   in Loop: Header=BB315_34 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB315_114
# %bb.36:                               # %if.then416
                                        #   in Loop: Header=BB315_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB315_38
# %bb.37:                               # %cond.true
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB315_39
.LBB315_38:                             # %cond.false
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB315_39:                             # %cond.end
                                        #   in Loop: Header=BB315_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB315_41
# %bb.40:                               # %cond.true425
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB315_42
.LBB315_41:                             # %cond.false427
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB315_42:                             # %cond.end429
                                        #   in Loop: Header=BB315_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB315_44
# %bb.43:                               # %cond.true445
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB315_45
.LBB315_44:                             # %cond.false447
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB315_45:                             # %cond.end449
                                        #   in Loop: Header=BB315_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB315_47
# %bb.46:                               # %cond.true455
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB315_48
.LBB315_47:                             # %cond.false457
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB315_48:                             # %cond.end459
                                        #   in Loop: Header=BB315_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB315_50
# %bb.49:                               # %cond.true475
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB315_51
.LBB315_50:                             # %cond.false477
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB315_51:                             # %cond.end479
                                        #   in Loop: Header=BB315_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB315_53
# %bb.52:                               # %cond.true485
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB315_54
.LBB315_53:                             # %cond.false487
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB315_54:                             # %cond.end489
                                        #   in Loop: Header=BB315_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB315_56
# %bb.55:                               # %cond.true505
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB315_57
.LBB315_56:                             # %cond.false507
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB315_57:                             # %cond.end509
                                        #   in Loop: Header=BB315_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB315_59
# %bb.58:                               # %cond.true515
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB315_60
.LBB315_59:                             # %cond.false517
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB315_60:                             # %cond.end519
                                        #   in Loop: Header=BB315_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB315_62
# %bb.61:                               # %cond.true535
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB315_63
.LBB315_62:                             # %cond.false537
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB315_63:                             # %cond.end539
                                        #   in Loop: Header=BB315_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB315_65
# %bb.64:                               # %cond.true545
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB315_66
.LBB315_65:                             # %cond.false547
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB315_66:                             # %cond.end549
                                        #   in Loop: Header=BB315_34 Depth=2
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB315_68
# %bb.67:                               # %if.then556
                                        #   in Loop: Header=BB315_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	$-1, (%rax,%rcx,8)
	jmp	.LBB315_81
.LBB315_68:                             # %if.else569
                                        #   in Loop: Header=BB315_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB315_70
# %bb.69:                               # %cond.true574
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB315_71
.LBB315_70:                             # %cond.false576
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB315_71:                             # %cond.end578
                                        #   in Loop: Header=BB315_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB315_73
# %bb.72:                               # %cond.true584
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB315_74
.LBB315_73:                             # %cond.false586
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB315_74:                             # %cond.end588
                                        #   in Loop: Header=BB315_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB315_76
# %bb.75:                               # %cond.true602
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB315_77
.LBB315_76:                             # %cond.false604
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB315_77:                             # %cond.end606
                                        #   in Loop: Header=BB315_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB315_79
# %bb.78:                               # %cond.true612
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB315_80
.LBB315_79:                             # %cond.false614
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB315_80:                             # %cond.end616
                                        #   in Loop: Header=BB315_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB315_81:                             # %if.end626
                                        #   in Loop: Header=BB315_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB315_83
# %bb.82:                               # %cond.true631
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB315_84
.LBB315_83:                             # %cond.false633
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB315_84:                             # %cond.end635
                                        #   in Loop: Header=BB315_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB315_86
# %bb.85:                               # %cond.true641
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB315_87
.LBB315_86:                             # %cond.false643
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB315_87:                             # %cond.end645
                                        #   in Loop: Header=BB315_34 Depth=2
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB315_89
# %bb.88:                               # %if.then652
                                        #   in Loop: Header=BB315_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	$-1, (%rax,%rcx,8)
	jmp	.LBB315_102
.LBB315_89:                             # %if.else665
                                        #   in Loop: Header=BB315_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB315_91
# %bb.90:                               # %cond.true670
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB315_92
.LBB315_91:                             # %cond.false672
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB315_92:                             # %cond.end674
                                        #   in Loop: Header=BB315_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB315_94
# %bb.93:                               # %cond.true680
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB315_95
.LBB315_94:                             # %cond.false682
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB315_95:                             # %cond.end684
                                        #   in Loop: Header=BB315_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB315_97
# %bb.96:                               # %cond.true698
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB315_98
.LBB315_97:                             # %cond.false700
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB315_98:                             # %cond.end702
                                        #   in Loop: Header=BB315_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB315_100
# %bb.99:                               # %cond.true708
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB315_101
.LBB315_100:                            # %cond.false710
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB315_101:                            # %cond.end712
                                        #   in Loop: Header=BB315_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB315_102:                            # %if.end722
                                        #   in Loop: Header=BB315_34 Depth=2
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB315_113
# %bb.103:                              # %if.then727
                                        #   in Loop: Header=BB315_34 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 4864(%rax)
	jne	.LBB315_107
# %bb.104:                              # %land.lhs.true730
                                        #   in Loop: Header=BB315_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB315_107
# %bb.105:                              # %land.lhs.true740
                                        #   in Loop: Header=BB315_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB315_107
# %bb.106:                              # %land.lhs.true752
                                        #   in Loop: Header=BB315_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB315_112
.LBB315_107:                            # %lor.rhs
                                        #   in Loop: Header=BB315_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB315_111
# %bb.108:                              # %land.lhs.true774
                                        #   in Loop: Header=BB315_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB315_111
# %bb.109:                              # %land.lhs.true784
                                        #   in Loop: Header=BB315_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB315_111
# %bb.110:                              # %land.rhs
                                        #   in Loop: Header=BB315_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB315_111:                            # %land.end
                                        #   in Loop: Header=BB315_34 Depth=2
.LBB315_112:                            # %lor.end
                                        #   in Loop: Header=BB315_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	1624(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB315_113:                            # %if.end814
                                        #   in Loop: Header=BB315_34 Depth=2
	jmp	.LBB315_236
.LBB315_114:                            # %if.else815
                                        #   in Loop: Header=BB315_34 Depth=2
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB315_116
# %bb.115:                              # %cond.true820
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB315_117
.LBB315_116:                            # %cond.false822
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB315_117:                            # %cond.end824
                                        #   in Loop: Header=BB315_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB315_119
# %bb.118:                              # %cond.true830
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB315_120
.LBB315_119:                            # %cond.false832
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB315_120:                            # %cond.end834
                                        #   in Loop: Header=BB315_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB315_122
# %bb.121:                              # %cond.true849
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB315_123
.LBB315_122:                            # %cond.false851
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB315_123:                            # %cond.end853
                                        #   in Loop: Header=BB315_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB315_125
# %bb.124:                              # %cond.true859
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB315_126
.LBB315_125:                            # %cond.false861
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB315_126:                            # %cond.end863
                                        #   in Loop: Header=BB315_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB315_128
# %bb.127:                              # %cond.true879
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB315_129
.LBB315_128:                            # %cond.false881
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB315_129:                            # %cond.end883
                                        #   in Loop: Header=BB315_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB315_131
# %bb.130:                              # %cond.true889
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB315_132
.LBB315_131:                            # %cond.false891
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB315_132:                            # %cond.end893
                                        #   in Loop: Header=BB315_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB315_134
# %bb.133:                              # %cond.true909
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB315_135
.LBB315_134:                            # %cond.false911
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB315_135:                            # %cond.end913
                                        #   in Loop: Header=BB315_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB315_137
# %bb.136:                              # %cond.true919
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB315_138
.LBB315_137:                            # %cond.false921
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB315_138:                            # %cond.end923
                                        #   in Loop: Header=BB315_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB315_140
# %bb.139:                              # %cond.true939
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB315_141
.LBB315_140:                            # %cond.false941
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB315_141:                            # %cond.end943
                                        #   in Loop: Header=BB315_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB315_143
# %bb.142:                              # %cond.true949
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB315_144
.LBB315_143:                            # %cond.false951
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB315_144:                            # %cond.end953
                                        #   in Loop: Header=BB315_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	4832(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB315_146
# %bb.145:                              # %cond.true966
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB315_147
.LBB315_146:                            # %cond.false968
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB315_147:                            # %cond.end970
                                        #   in Loop: Header=BB315_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB315_149
# %bb.148:                              # %cond.true976
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB315_150
.LBB315_149:                            # %cond.false978
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB315_150:                            # %cond.end980
                                        #   in Loop: Header=BB315_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	4832(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-56(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB315_152
# %bb.151:                              # %cond.true994
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB315_153
.LBB315_152:                            # %cond.false996
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB315_153:                            # %cond.end998
                                        #   in Loop: Header=BB315_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB315_155
# %bb.154:                              # %cond.true1004
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB315_156
.LBB315_155:                            # %cond.false1006
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB315_156:                            # %cond.end1008
                                        #   in Loop: Header=BB315_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	4840(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-56(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB315_158
# %bb.157:                              # %cond.true1021
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB315_159
.LBB315_158:                            # %cond.false1023
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB315_159:                            # %cond.end1025
                                        #   in Loop: Header=BB315_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB315_161
# %bb.160:                              # %cond.true1031
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB315_162
.LBB315_161:                            # %cond.false1033
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB315_162:                            # %cond.end1035
                                        #   in Loop: Header=BB315_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	4840(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB315_173
# %bb.163:                              # %if.then1048
                                        #   in Loop: Header=BB315_34 Depth=2
	movq	-56(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB315_167
# %bb.164:                              # %land.lhs.true1051
                                        #   in Loop: Header=BB315_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB315_167
# %bb.165:                              # %land.lhs.true1061
                                        #   in Loop: Header=BB315_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB315_167
# %bb.166:                              # %land.lhs.true1074
                                        #   in Loop: Header=BB315_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB315_172
.LBB315_167:                            # %lor.rhs1087
                                        #   in Loop: Header=BB315_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB315_171
# %bb.168:                              # %land.lhs.true1097
                                        #   in Loop: Header=BB315_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB315_171
# %bb.169:                              # %land.lhs.true1107
                                        #   in Loop: Header=BB315_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB315_171
# %bb.170:                              # %land.rhs1120
                                        #   in Loop: Header=BB315_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB315_171:                            # %land.end1133
                                        #   in Loop: Header=BB315_34 Depth=2
.LBB315_172:                            # %lor.end1134
                                        #   in Loop: Header=BB315_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	4856(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB315_173:                            # %if.end1142
                                        #   in Loop: Header=BB315_34 Depth=2
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB315_175
# %bb.174:                              # %cond.true1147
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB315_176
.LBB315_175:                            # %cond.false1149
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB315_176:                            # %cond.end1151
                                        #   in Loop: Header=BB315_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB315_178
# %bb.177:                              # %cond.true1157
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB315_179
.LBB315_178:                            # %cond.false1159
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB315_179:                            # %cond.end1161
                                        #   in Loop: Header=BB315_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB315_181
# %bb.180:                              # %cond.true1176
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB315_182
.LBB315_181:                            # %cond.false1178
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB315_182:                            # %cond.end1180
                                        #   in Loop: Header=BB315_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB315_184
# %bb.183:                              # %cond.true1186
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB315_185
.LBB315_184:                            # %cond.false1188
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB315_185:                            # %cond.end1190
                                        #   in Loop: Header=BB315_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB315_187
# %bb.186:                              # %cond.true1206
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB315_188
.LBB315_187:                            # %cond.false1208
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB315_188:                            # %cond.end1210
                                        #   in Loop: Header=BB315_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB315_190
# %bb.189:                              # %cond.true1216
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB315_191
.LBB315_190:                            # %cond.false1218
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB315_191:                            # %cond.end1220
                                        #   in Loop: Header=BB315_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB315_193
# %bb.192:                              # %cond.true1236
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB315_194
.LBB315_193:                            # %cond.false1238
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB315_194:                            # %cond.end1240
                                        #   in Loop: Header=BB315_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB315_196
# %bb.195:                              # %cond.true1246
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB315_197
.LBB315_196:                            # %cond.false1248
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB315_197:                            # %cond.end1250
                                        #   in Loop: Header=BB315_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB315_199
# %bb.198:                              # %cond.true1266
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB315_200
.LBB315_199:                            # %cond.false1268
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB315_200:                            # %cond.end1270
                                        #   in Loop: Header=BB315_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB315_202
# %bb.201:                              # %cond.true1276
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB315_203
.LBB315_202:                            # %cond.false1278
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB315_203:                            # %cond.end1280
                                        #   in Loop: Header=BB315_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	3216(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB315_205
# %bb.204:                              # %cond.true1293
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB315_206
.LBB315_205:                            # %cond.false1295
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB315_206:                            # %cond.end1297
                                        #   in Loop: Header=BB315_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB315_208
# %bb.207:                              # %cond.true1303
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB315_209
.LBB315_208:                            # %cond.false1305
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB315_209:                            # %cond.end1307
                                        #   in Loop: Header=BB315_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	3216(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-40(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB315_211
# %bb.210:                              # %cond.true1321
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB315_212
.LBB315_211:                            # %cond.false1323
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB315_212:                            # %cond.end1325
                                        #   in Loop: Header=BB315_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB315_214
# %bb.213:                              # %cond.true1331
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB315_215
.LBB315_214:                            # %cond.false1333
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB315_215:                            # %cond.end1335
                                        #   in Loop: Header=BB315_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	3224(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB315_217
# %bb.216:                              # %cond.true1348
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB315_218
.LBB315_217:                            # %cond.false1350
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB315_218:                            # %cond.end1352
                                        #   in Loop: Header=BB315_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB315_220
# %bb.219:                              # %cond.true1358
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB315_221
.LBB315_220:                            # %cond.false1360
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB315_221:                            # %cond.end1362
                                        #   in Loop: Header=BB315_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	3224(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB315_232
# %bb.222:                              # %if.then1375
                                        #   in Loop: Header=BB315_34 Depth=2
	movq	-40(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB315_226
# %bb.223:                              # %land.lhs.true1378
                                        #   in Loop: Header=BB315_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB315_226
# %bb.224:                              # %land.lhs.true1388
                                        #   in Loop: Header=BB315_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB315_226
# %bb.225:                              # %land.lhs.true1401
                                        #   in Loop: Header=BB315_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB315_231
.LBB315_226:                            # %lor.rhs1414
                                        #   in Loop: Header=BB315_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB315_230
# %bb.227:                              # %land.lhs.true1424
                                        #   in Loop: Header=BB315_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB315_230
# %bb.228:                              # %land.lhs.true1434
                                        #   in Loop: Header=BB315_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB315_230
# %bb.229:                              # %land.rhs1447
                                        #   in Loop: Header=BB315_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB315_230:                            # %land.end1460
                                        #   in Loop: Header=BB315_34 Depth=2
.LBB315_231:                            # %lor.end1461
                                        #   in Loop: Header=BB315_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	3240(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB315_232:                            # %if.end1469
                                        #   in Loop: Header=BB315_34 Depth=2
	movq	img, %rax
	cmpl	$0, 71996(%rax)
	jne	.LBB315_235
# %bb.233:                              # %land.lhs.true1473
                                        #   in Loop: Header=BB315_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB315_235
# %bb.234:                              # %if.then1481
                                        #   in Loop: Header=BB315_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
.LBB315_235:                            # %if.end1522
                                        #   in Loop: Header=BB315_34 Depth=2
	jmp	.LBB315_236
.LBB315_236:                            # %if.end1523
                                        #   in Loop: Header=BB315_34 Depth=2
	jmp	.LBB315_237
.LBB315_237:                            # %for.inc1524
                                        #   in Loop: Header=BB315_34 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB315_34
.LBB315_238:                            # %for.end1526
                                        #   in Loop: Header=BB315_32 Depth=1
	jmp	.LBB315_239
.LBB315_239:                            # %for.inc1527
                                        #   in Loop: Header=BB315_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB315_32
.LBB315_240:                            # %for.end1529
	jmp	.LBB315_241
.LBB315_241:                            # %if.end1530
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB315_243
# %bb.242:                              # %lor.lhs.false1533
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB315_259
.LBB315_243:                            # %if.then1536
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB315_258
# %bb.244:                              # %if.then1539
	movl	$0, -12(%rbp)
.LBB315_245:                            # %for.cond1540
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB315_247 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB315_257
# %bb.246:                              # %for.body1545
                                        #   in Loop: Header=BB315_245 Depth=1
	movl	$0, -16(%rbp)
.LBB315_247:                            # %for.cond1546
                                        #   Parent Loop BB315_245 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB315_255
# %bb.248:                              # %for.body1551
                                        #   in Loop: Header=BB315_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB315_253
# %bb.249:                              # %if.then1558
                                        #   in Loop: Header=BB315_247 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	subl	4(%rax), %edi
	callq	abs
	movl	%eax, %ebx
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	subl	4(%rax), %edi
	callq	abs
	cmpl	%eax, %ebx
	jle	.LBB315_251
# %bb.250:                              # %if.then1571
                                        #   in Loop: Header=BB315_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	jmp	.LBB315_252
.LBB315_251:                            # %if.else1699
                                        #   in Loop: Header=BB315_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB315_252:                            # %if.end1829
                                        #   in Loop: Header=BB315_247 Depth=2
	jmp	.LBB315_253
.LBB315_253:                            # %if.end1830
                                        #   in Loop: Header=BB315_247 Depth=2
	jmp	.LBB315_254
.LBB315_254:                            # %for.inc1831
                                        #   in Loop: Header=BB315_247 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB315_247
.LBB315_255:                            # %for.end1833
                                        #   in Loop: Header=BB315_245 Depth=1
	jmp	.LBB315_256
.LBB315_256:                            # %for.inc1834
                                        #   in Loop: Header=BB315_245 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB315_245
.LBB315_257:                            # %for.end1836
	jmp	.LBB315_258
.LBB315_258:                            # %if.end1837
	jmp	.LBB315_259
.LBB315_259:                            # %if.end1838
	movl	$0, -12(%rbp)
.LBB315_260:                            # %for.cond1839
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB315_262 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB315_330
# %bb.261:                              # %for.body1844
                                        #   in Loop: Header=BB315_260 Depth=1
	movl	$0, -16(%rbp)
.LBB315_262:                            # %for.cond1845
                                        #   Parent Loop BB315_260 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB315_328
# %bb.263:                              # %for.body1850
                                        #   in Loop: Header=BB315_262 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB315_265
# %bb.264:                              # %lor.lhs.false1853
                                        #   in Loop: Header=BB315_262 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB315_314
.LBB315_265:                            # %if.then1856
                                        #   in Loop: Header=BB315_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB315_267
# %bb.266:                              # %cond.true1861
                                        #   in Loop: Header=BB315_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB315_268
.LBB315_267:                            # %cond.false1863
                                        #   in Loop: Header=BB315_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB315_268:                            # %cond.end1865
                                        #   in Loop: Header=BB315_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB315_270
# %bb.269:                              # %cond.true1871
                                        #   in Loop: Header=BB315_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB315_271
.LBB315_270:                            # %cond.false1873
                                        #   in Loop: Header=BB315_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB315_271:                            # %cond.end1875
                                        #   in Loop: Header=BB315_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB315_273
# %bb.272:                              # %cond.true1891
                                        #   in Loop: Header=BB315_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB315_274
.LBB315_273:                            # %cond.false1893
                                        #   in Loop: Header=BB315_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB315_274:                            # %cond.end1895
                                        #   in Loop: Header=BB315_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB315_276
# %bb.275:                              # %cond.true1901
                                        #   in Loop: Header=BB315_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB315_277
.LBB315_276:                            # %cond.false1903
                                        #   in Loop: Header=BB315_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB315_277:                            # %cond.end1905
                                        #   in Loop: Header=BB315_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB315_279
# %bb.278:                              # %cond.true1921
                                        #   in Loop: Header=BB315_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB315_280
.LBB315_279:                            # %cond.false1923
                                        #   in Loop: Header=BB315_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB315_280:                            # %cond.end1925
                                        #   in Loop: Header=BB315_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB315_282
# %bb.281:                              # %cond.true1931
                                        #   in Loop: Header=BB315_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB315_283
.LBB315_282:                            # %cond.false1933
                                        #   in Loop: Header=BB315_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB315_283:                            # %cond.end1935
                                        #   in Loop: Header=BB315_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB315_285
# %bb.284:                              # %cond.true1951
                                        #   in Loop: Header=BB315_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB315_286
.LBB315_285:                            # %cond.false1953
                                        #   in Loop: Header=BB315_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB315_286:                            # %cond.end1955
                                        #   in Loop: Header=BB315_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB315_288
# %bb.287:                              # %cond.true1961
                                        #   in Loop: Header=BB315_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB315_289
.LBB315_288:                            # %cond.false1963
                                        #   in Loop: Header=BB315_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB315_289:                            # %cond.end1965
                                        #   in Loop: Header=BB315_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB315_291
# %bb.290:                              # %cond.true1981
                                        #   in Loop: Header=BB315_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB315_292
.LBB315_291:                            # %cond.false1983
                                        #   in Loop: Header=BB315_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB315_292:                            # %cond.end1985
                                        #   in Loop: Header=BB315_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB315_294
# %bb.293:                              # %cond.true1991
                                        #   in Loop: Header=BB315_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB315_295
.LBB315_294:                            # %cond.false1993
                                        #   in Loop: Header=BB315_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB315_295:                            # %cond.end1995
                                        #   in Loop: Header=BB315_262 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB315_297
# %bb.296:                              # %cond.true2009
                                        #   in Loop: Header=BB315_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB315_298
.LBB315_297:                            # %cond.false2011
                                        #   in Loop: Header=BB315_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB315_298:                            # %cond.end2013
                                        #   in Loop: Header=BB315_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB315_300
# %bb.299:                              # %cond.true2019
                                        #   in Loop: Header=BB315_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB315_301
.LBB315_300:                            # %cond.false2021
                                        #   in Loop: Header=BB315_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB315_301:                            # %cond.end2023
                                        #   in Loop: Header=BB315_262 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB315_303
# %bb.302:                              # %cond.true2037
                                        #   in Loop: Header=BB315_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB315_304
.LBB315_303:                            # %cond.false2039
                                        #   in Loop: Header=BB315_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB315_304:                            # %cond.end2041
                                        #   in Loop: Header=BB315_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB315_306
# %bb.305:                              # %cond.true2047
                                        #   in Loop: Header=BB315_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB315_307
.LBB315_306:                            # %cond.false2049
                                        #   in Loop: Header=BB315_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB315_307:                            # %cond.end2051
                                        #   in Loop: Header=BB315_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB315_309
# %bb.308:                              # %cond.true2065
                                        #   in Loop: Header=BB315_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB315_310
.LBB315_309:                            # %cond.false2067
                                        #   in Loop: Header=BB315_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB315_310:                            # %cond.end2069
                                        #   in Loop: Header=BB315_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB315_312
# %bb.311:                              # %cond.true2075
                                        #   in Loop: Header=BB315_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB315_313
.LBB315_312:                            # %cond.false2077
                                        #   in Loop: Header=BB315_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB315_313:                            # %cond.end2079
                                        #   in Loop: Header=BB315_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB315_315
.LBB315_314:                            # %if.else2089
                                        #   in Loop: Header=BB315_262 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB315_315:                            # %if.end2194
                                        #   in Loop: Header=BB315_262 Depth=2
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB315_326
# %bb.316:                              # %if.then2200
                                        #   in Loop: Header=BB315_262 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 4864(%rax)
	jne	.LBB315_320
# %bb.317:                              # %land.lhs.true2203
                                        #   in Loop: Header=BB315_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB315_320
# %bb.318:                              # %land.lhs.true2213
                                        #   in Loop: Header=BB315_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB315_320
# %bb.319:                              # %land.lhs.true2226
                                        #   in Loop: Header=BB315_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB315_325
.LBB315_320:                            # %lor.rhs2239
                                        #   in Loop: Header=BB315_262 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB315_324
# %bb.321:                              # %land.lhs.true2249
                                        #   in Loop: Header=BB315_262 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB315_324
# %bb.322:                              # %land.lhs.true2259
                                        #   in Loop: Header=BB315_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB315_324
# %bb.323:                              # %land.rhs2272
                                        #   in Loop: Header=BB315_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB315_324:                            # %land.end2285
                                        #   in Loop: Header=BB315_262 Depth=2
.LBB315_325:                            # %lor.end2286
                                        #   in Loop: Header=BB315_262 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	1624(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB315_326:                            # %if.end2295
                                        #   in Loop: Header=BB315_262 Depth=2
	jmp	.LBB315_327
.LBB315_327:                            # %for.inc2296
                                        #   in Loop: Header=BB315_262 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB315_262
.LBB315_328:                            # %for.end2298
                                        #   in Loop: Header=BB315_260 Depth=1
	jmp	.LBB315_329
.LBB315_329:                            # %for.inc2299
                                        #   in Loop: Header=BB315_260 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB315_260
.LBB315_330:                            # %for.end2301
	movq	img, %rax
	cmpl	$0, 71996(%rax)
	jne	.LBB315_397
# %bb.331:                              # %if.then2305
	movl	$0, -12(%rbp)
.LBB315_332:                            # %for.cond2306
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB315_334 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB315_349
# %bb.333:                              # %for.body2311
                                        #   in Loop: Header=BB315_332 Depth=1
	movl	$0, -16(%rbp)
.LBB315_334:                            # %for.cond2312
                                        #   Parent Loop BB315_332 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB315_347
# %bb.335:                              # %for.body2317
                                        #   in Loop: Header=BB315_334 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB315_338
# %bb.336:                              # %land.lhs.true2320
                                        #   in Loop: Header=BB315_334 Depth=2
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB315_338
# %bb.337:                              # %land.lhs.true2323
                                        #   in Loop: Header=BB315_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB315_340
.LBB315_338:                            # %lor.lhs.false2331
                                        #   in Loop: Header=BB315_334 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB315_341
# %bb.339:                              # %land.lhs.true2334
                                        #   in Loop: Header=BB315_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB315_341
.LBB315_340:                            # %if.then2342
                                        #   in Loop: Header=BB315_334 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %ecx
	shll	$1, %ecx
	movw	%cx, 2(%rax)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %ecx
	shll	$1, %ecx
	movw	%cx, 2(%rax)
	jmp	.LBB315_345
.LBB315_341:                            # %if.else2363
                                        #   in Loop: Header=BB315_334 Depth=2
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB315_344
# %bb.342:                              # %land.lhs.true2366
                                        #   in Loop: Header=BB315_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB315_344
# %bb.343:                              # %if.then2373
                                        #   in Loop: Header=BB315_334 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movswl	2(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movswl	2(%rcx), %eax
	cltd
	idivl	%esi
	movw	%ax, 2(%rcx)
.LBB315_344:                            # %if.end2394
                                        #   in Loop: Header=BB315_334 Depth=2
	jmp	.LBB315_345
.LBB315_345:                            # %if.end2395
                                        #   in Loop: Header=BB315_334 Depth=2
	jmp	.LBB315_346
.LBB315_346:                            # %for.inc2396
                                        #   in Loop: Header=BB315_334 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB315_334
.LBB315_347:                            # %for.end2398
                                        #   in Loop: Header=BB315_332 Depth=1
	jmp	.LBB315_348
.LBB315_348:                            # %for.inc2399
                                        #   in Loop: Header=BB315_332 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB315_332
.LBB315_349:                            # %for.end2401
	movl	$0, -12(%rbp)
.LBB315_350:                            # %for.cond2402
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB315_352 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	72400(%rcx), %ecx
	shll	$2, %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB315_396
# %bb.351:                              # %for.body2408
                                        #   in Loop: Header=BB315_350 Depth=1
	movl	$0, -16(%rbp)
.LBB315_352:                            # %for.cond2409
                                        #   Parent Loop BB315_350 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB315_394
# %bb.353:                              # %for.body2414
                                        #   in Loop: Header=BB315_352 Depth=2
	cmpl	$0, -12(%rbp)
	jne	.LBB315_361
# %bb.354:                              # %if.then2417
                                        #   in Loop: Header=BB315_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB315_356
# %bb.355:                              # %cond.true2428
                                        #   in Loop: Header=BB315_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB315_360
.LBB315_356:                            # %cond.false2429
                                        #   in Loop: Header=BB315_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB315_358
# %bb.357:                              # %cond.true2440
                                        #   in Loop: Header=BB315_352 Depth=2
	movl	$127, %eax
	jmp	.LBB315_359
.LBB315_358:                            # %cond.false2441
                                        #   in Loop: Header=BB315_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB315_359:                            # %cond.end2450
                                        #   in Loop: Header=BB315_352 Depth=2
.LBB315_360:                            # %cond.end2452
                                        #   in Loop: Header=BB315_352 Depth=2
	movl	%eax, -60(%rbp)
	jmp	.LBB315_377
.LBB315_361:                            # %if.else2454
                                        #   in Loop: Header=BB315_352 Depth=2
	cmpl	$2, -12(%rbp)
	jne	.LBB315_369
# %bb.362:                              # %if.then2457
                                        #   in Loop: Header=BB315_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB315_364
# %bb.363:                              # %cond.true2467
                                        #   in Loop: Header=BB315_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB315_368
.LBB315_364:                            # %cond.false2468
                                        #   in Loop: Header=BB315_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB315_366
# %bb.365:                              # %cond.true2479
                                        #   in Loop: Header=BB315_352 Depth=2
	movl	$127, %eax
	jmp	.LBB315_367
.LBB315_366:                            # %cond.false2480
                                        #   in Loop: Header=BB315_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB315_367:                            # %cond.end2489
                                        #   in Loop: Header=BB315_352 Depth=2
.LBB315_368:                            # %cond.end2491
                                        #   in Loop: Header=BB315_352 Depth=2
	movl	%eax, -60(%rbp)
	jmp	.LBB315_376
.LBB315_369:                            # %if.else2493
                                        #   in Loop: Header=BB315_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB315_371
# %bb.370:                              # %cond.true2503
                                        #   in Loop: Header=BB315_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB315_375
.LBB315_371:                            # %cond.false2504
                                        #   in Loop: Header=BB315_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB315_373
# %bb.372:                              # %cond.true2515
                                        #   in Loop: Header=BB315_352 Depth=2
	movl	$127, %eax
	jmp	.LBB315_374
.LBB315_373:                            # %cond.false2516
                                        #   in Loop: Header=BB315_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB315_374:                            # %cond.end2525
                                        #   in Loop: Header=BB315_352 Depth=2
.LBB315_375:                            # %cond.end2527
                                        #   in Loop: Header=BB315_352 Depth=2
	movl	%eax, -60(%rbp)
.LBB315_376:                            # %if.end2529
                                        #   in Loop: Header=BB315_352 Depth=2
	jmp	.LBB315_377
.LBB315_377:                            # %if.end2530
                                        #   in Loop: Header=BB315_352 Depth=2
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB315_379
# %bb.378:                              # %cond.true2545
                                        #   in Loop: Header=BB315_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB315_383
.LBB315_379:                            # %cond.false2546
                                        #   in Loop: Header=BB315_352 Depth=2
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB315_381
# %bb.380:                              # %cond.true2561
                                        #   in Loop: Header=BB315_352 Depth=2
	movl	$127, %eax
	jmp	.LBB315_382
.LBB315_381:                            # %cond.false2562
                                        #   in Loop: Header=BB315_352 Depth=2
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB315_382:                            # %cond.end2575
                                        #   in Loop: Header=BB315_352 Depth=2
.LBB315_383:                            # %cond.end2577
                                        #   in Loop: Header=BB315_352 Depth=2
	movl	%eax, -64(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB315_391
# %bb.384:                              # %if.then2581
                                        #   in Loop: Header=BB315_352 Depth=2
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-64(%rbp)
	movl	%eax, -68(%rbp)
	movl	-60(%rbp), %eax
	imull	-68(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB315_386
# %bb.385:                              # %cond.true2591
                                        #   in Loop: Header=BB315_352 Depth=2
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB315_390
.LBB315_386:                            # %cond.false2592
                                        #   in Loop: Header=BB315_352 Depth=2
	movl	-60(%rbp), %eax
	imull	-68(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB315_388
# %bb.387:                              # %cond.true2598
                                        #   in Loop: Header=BB315_352 Depth=2
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB315_389
.LBB315_388:                            # %cond.false2599
                                        #   in Loop: Header=BB315_352 Depth=2
	movl	-60(%rbp), %eax
	imull	-68(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB315_389:                            # %cond.end2603
                                        #   in Loop: Header=BB315_352 Depth=2
.LBB315_390:                            # %cond.end2605
                                        #   in Loop: Header=BB315_352 Depth=2
	movq	img, %rcx
	addq	$72016, %rcx            # imm = 0x11950
	movslq	-12(%rbp), %rdx
	imulq	$60, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB315_392
.LBB315_391:                            # %if.else2611
                                        #   in Loop: Header=BB315_352 Depth=2
	movq	img, %rax
	addq	$72016, %rax            # imm = 0x11950
	movslq	-12(%rbp), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$9999, (%rax,%rcx,4)    # imm = 0x270F
.LBB315_392:                            # %if.end2617
                                        #   in Loop: Header=BB315_352 Depth=2
	jmp	.LBB315_393
.LBB315_393:                            # %for.inc2618
                                        #   in Loop: Header=BB315_352 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB315_352
.LBB315_394:                            # %for.end2620
                                        #   in Loop: Header=BB315_350 Depth=1
	jmp	.LBB315_395
.LBB315_395:                            # %for.inc2621
                                        #   in Loop: Header=BB315_350 Depth=1
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB315_350
.LBB315_396:                            # %for.end2623
	jmp	.LBB315_397
.LBB315_397:                            # %if.end2624
	cmpl	$1252346387, -72(%rbp)  # imm = 0x4AA54A13
	jne	.LBB315_399
.LBB315_398:
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB315_399:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB315_398
.Lfunc_end315:
	.size	compute_colocated.252, .Lfunc_end315-compute_colocated.252
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_lt_pic_idx_asc.253
	.type	compare_fs_by_lt_pic_idx_asc.253,@function
compare_fs_by_lt_pic_idx_asc.253:       # @compare_fs_by_lt_pic_idx_asc.253
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$825186950, -16(%rbp)   # imm = 0x312F5A86
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	28(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	28(%rcx), %eax
	jge	.LBB316_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB316_5
.LBB316_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	28(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	28(%rcx), %eax
	jle	.LBB316_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB316_5
.LBB316_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB316_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$825186950, -16(%rbp)   # imm = 0x312F5A86
	jne	.LBB316_7
.LBB316_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB316_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB316_6
.Lfunc_end316:
	.size	compare_fs_by_lt_pic_idx_asc.253, .Lfunc_end316-compare_fs_by_lt_pic_idx_asc.253
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function unmark_long_term_field_for_reference_by_frame_idx.254
	.type	unmark_long_term_field_for_reference_by_frame_idx.254,@function
unmark_long_term_field_for_reference_by_frame_idx.254: # @unmark_long_term_field_for_reference_by_frame_idx.254
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$4411521, -32(%rbp)     # imm = 0x435081
	movl	%edi, -20(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -12(%rbp)
	movl	%r8d, -8(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -28(%rbp)
	cmpl	$0, -8(%rbp)
	jge	.LBB317_2
# %bb.1:                                # %if.then
	movl	-28(%rbp), %eax
	shll	$1, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB317_2:                              # %if.end
	movl	$0, -4(%rbp)
.LBB317_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB317_46
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB317_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-24(%rbp), %eax
	jne	.LBB317_44
# %bb.5:                                # %if.then5
                                        #   in Loop: Header=BB317_3 Depth=1
	cmpl	$1, -20(%rbp)
	jne	.LBB317_24
# %bb.6:                                # %if.then7
                                        #   in Loop: Header=BB317_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB317_8
# %bb.7:                                # %if.then11
                                        #   in Loop: Header=BB317_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB317_23
.LBB317_8:                              # %if.else
                                        #   in Loop: Header=BB317_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, 8(%rax)
	jne	.LBB317_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB317_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB317_22
.LBB317_10:                             # %if.else21
                                        #   in Loop: Header=BB317_3 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB317_18
# %bb.11:                               # %if.then22
                                        #   in Loop: Header=BB317_3 Depth=1
	cmpq	$0, dpb+56
	je	.LBB317_16
# %bb.12:                               # %if.then24
                                        #   in Loop: Header=BB317_3 Depth=1
	movq	dpb+56, %rax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	cmpq	(%rcx,%rdx,8), %rax
	jne	.LBB317_14
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB317_3 Depth=1
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	cmpl	-12(%rbp), %eax
	je	.LBB317_15
.LBB317_14:                             # %if.then29
                                        #   in Loop: Header=BB317_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB317_15:                             # %if.end32
                                        #   in Loop: Header=BB317_3 Depth=1
	jmp	.LBB317_17
.LBB317_16:                             # %if.else33
                                        #   in Loop: Header=BB317_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB317_17:                             # %if.end36
                                        #   in Loop: Header=BB317_3 Depth=1
	jmp	.LBB317_21
.LBB317_18:                             # %if.else37
                                        #   in Loop: Header=BB317_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %ecx
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	je	.LBB317_20
# %bb.19:                               # %if.then42
                                        #   in Loop: Header=BB317_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB317_20:                             # %if.end45
                                        #   in Loop: Header=BB317_3 Depth=1
	jmp	.LBB317_21
.LBB317_21:                             # %if.end46
                                        #   in Loop: Header=BB317_3 Depth=1
	jmp	.LBB317_22
.LBB317_22:                             # %if.end47
                                        #   in Loop: Header=BB317_3 Depth=1
	jmp	.LBB317_23
.LBB317_23:                             # %if.end48
                                        #   in Loop: Header=BB317_3 Depth=1
	jmp	.LBB317_24
.LBB317_24:                             # %if.end49
                                        #   in Loop: Header=BB317_3 Depth=1
	cmpl	$2, -20(%rbp)
	jne	.LBB317_43
# %bb.25:                               # %if.then51
                                        #   in Loop: Header=BB317_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB317_27
# %bb.26:                               # %if.then56
                                        #   in Loop: Header=BB317_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB317_42
.LBB317_27:                             # %if.else59
                                        #   in Loop: Header=BB317_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$2, 8(%rax)
	jne	.LBB317_29
# %bb.28:                               # %if.then64
                                        #   in Loop: Header=BB317_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB317_41
.LBB317_29:                             # %if.else67
                                        #   in Loop: Header=BB317_3 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB317_37
# %bb.30:                               # %if.then69
                                        #   in Loop: Header=BB317_3 Depth=1
	cmpq	$0, dpb+56
	je	.LBB317_35
# %bb.31:                               # %if.then71
                                        #   in Loop: Header=BB317_3 Depth=1
	movq	dpb+56, %rax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	cmpq	(%rcx,%rdx,8), %rax
	jne	.LBB317_33
# %bb.32:                               # %lor.lhs.false75
                                        #   in Loop: Header=BB317_3 Depth=1
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	cmpl	-12(%rbp), %eax
	je	.LBB317_34
.LBB317_33:                             # %if.then78
                                        #   in Loop: Header=BB317_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB317_34:                             # %if.end81
                                        #   in Loop: Header=BB317_3 Depth=1
	jmp	.LBB317_36
.LBB317_35:                             # %if.else82
                                        #   in Loop: Header=BB317_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB317_36:                             # %if.end85
                                        #   in Loop: Header=BB317_3 Depth=1
	jmp	.LBB317_40
.LBB317_37:                             # %if.else86
                                        #   in Loop: Header=BB317_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %ecx
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	je	.LBB317_39
# %bb.38:                               # %if.then92
                                        #   in Loop: Header=BB317_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB317_39:                             # %if.end95
                                        #   in Loop: Header=BB317_3 Depth=1
	jmp	.LBB317_40
.LBB317_40:                             # %if.end96
                                        #   in Loop: Header=BB317_3 Depth=1
	jmp	.LBB317_41
.LBB317_41:                             # %if.end97
                                        #   in Loop: Header=BB317_3 Depth=1
	jmp	.LBB317_42
.LBB317_42:                             # %if.end98
                                        #   in Loop: Header=BB317_3 Depth=1
	jmp	.LBB317_43
.LBB317_43:                             # %if.end99
                                        #   in Loop: Header=BB317_3 Depth=1
	jmp	.LBB317_44
.LBB317_44:                             # %if.end100
                                        #   in Loop: Header=BB317_3 Depth=1
	jmp	.LBB317_45
.LBB317_45:                             # %for.inc
                                        #   in Loop: Header=BB317_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB317_3
.LBB317_46:                             # %for.end
	cmpl	$4411521, -32(%rbp)     # imm = 0x435081
	jne	.LBB317_48
.LBB317_47:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB317_48:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB317_47
.Lfunc_end317:
	.size	unmark_long_term_field_for_reference_by_frame_idx.254, .Lfunc_end317-unmark_long_term_field_for_reference_by_frame_idx.254
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function remove_frame_from_dpb.255
	.type	remove_frame_from_dpb.255,@function
remove_frame_from_dpb.255:              # @remove_frame_from_dpb.255
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$139535996, -20(%rbp)   # imm = 0x851267C
	movl	%edi, -16(%rbp)
	movq	dpb(%rip), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB318_6
# %bb.1:                                # %entry
	movq	.LJTI318_0(,%rax,8), %rax
	jmpq	*%rax
.LBB318_2:                              # %sw.bb
	movq	-8(%rbp), %rax
	movq	40(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	56(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 40(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 56(%rax)
	jmp	.LBB318_7
.LBB318_3:                              # %sw.bb4
	movq	-8(%rbp), %rax
	movq	56(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 56(%rax)
	jmp	.LBB318_7
.LBB318_4:                              # %sw.bb7
	movq	-8(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 48(%rax)
	jmp	.LBB318_7
.LBB318_5:                              # %sw.bb10
	jmp	.LBB318_7
.LBB318_6:                              # %sw.default
	movabsq	$.L.str.29, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB318_7:                              # %sw.epilog
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 4(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 12(%rax)
	movq	dpb, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -32(%rbp)
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB318_8:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movl	dpb+28, %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jae	.LBB318_11
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB318_8 Depth=1
	movq	dpb, %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movl	%ecx, %ecx
	movq	(%rax,%rcx,8), %rax
	movq	dpb, %rcx
	movl	-12(%rbp), %edx
	movq	%rax, (%rcx,%rdx,8)
# %bb.10:                               # %for.inc
                                        #   in Loop: Header=BB318_8 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB318_8
.LBB318_11:                             # %for.end
	movq	-32(%rbp), %rax
	movq	dpb, %rcx
	movl	dpb+28, %edx
	subl	$1, %edx
	movl	%edx, %edx
	movq	%rax, (%rcx,%rdx,8)
	movl	dpb+28, %eax
	addl	$-1, %eax
	movl	%eax, dpb+28
	cmpl	$139535996, -20(%rbp)   # imm = 0x851267C
	jne	.LBB318_13
.LBB318_12:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB318_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB318_12
.Lfunc_end318:
	.size	remove_frame_from_dpb.255, .Lfunc_end318-remove_frame_from_dpb.255
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI318_0:
	.quad	.LBB318_5
	.quad	.LBB318_4
	.quad	.LBB318_3
	.quad	.LBB318_2
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function remove_frame_from_dpb.256
	.type	remove_frame_from_dpb.256,@function
remove_frame_from_dpb.256:              # @remove_frame_from_dpb.256
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$104445473, -20(%rbp)   # imm = 0x639B621
	movl	%edi, -16(%rbp)
	movq	dpb(%rip), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB319_6
# %bb.1:                                # %entry
	movq	.LJTI319_0(,%rax,8), %rax
	jmpq	*%rax
.LBB319_2:                              # %sw.bb
	movq	-8(%rbp), %rax
	movq	40(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	56(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 40(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 56(%rax)
	jmp	.LBB319_7
.LBB319_3:                              # %sw.bb4
	movq	-8(%rbp), %rax
	movq	56(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 56(%rax)
	jmp	.LBB319_7
.LBB319_4:                              # %sw.bb7
	movq	-8(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 48(%rax)
	jmp	.LBB319_7
.LBB319_5:                              # %sw.bb10
	jmp	.LBB319_7
.LBB319_6:                              # %sw.default
	movabsq	$.L.str.29, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB319_7:                              # %sw.epilog
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 4(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 12(%rax)
	movq	dpb, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -32(%rbp)
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB319_8:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movl	dpb+28, %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jae	.LBB319_11
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB319_8 Depth=1
	movq	dpb, %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movl	%ecx, %ecx
	movq	(%rax,%rcx,8), %rax
	movq	dpb, %rcx
	movl	-12(%rbp), %edx
	movq	%rax, (%rcx,%rdx,8)
# %bb.10:                               # %for.inc
                                        #   in Loop: Header=BB319_8 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB319_8
.LBB319_11:                             # %for.end
	movq	-32(%rbp), %rax
	movq	dpb, %rcx
	movl	dpb+28, %edx
	subl	$1, %edx
	movl	%edx, %edx
	movq	%rax, (%rcx,%rdx,8)
	movl	dpb+28, %eax
	addl	$-1, %eax
	movl	%eax, dpb+28
	cmpl	$104445473, -20(%rbp)   # imm = 0x639B621
	jne	.LBB319_13
.LBB319_12:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB319_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB319_12
.Lfunc_end319:
	.size	remove_frame_from_dpb.256, .Lfunc_end319-remove_frame_from_dpb.256
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI319_0:
	.quad	.LBB319_5
	.quad	.LBB319_4
	.quad	.LBB319_3
	.quad	.LBB319_2
                                        # -- End function
	.text
	.globl	init_lists.257          # -- Begin function init_lists.257
	.p2align	4, 0x90
	.type	init_lists.257,@function
init_lists.257:                         # @init_lists.257
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$1825821336, -76(%rbp)  # imm = 0x6CD3D298
	movl	%edi, -52(%rbp)
	movl	%esi, -20(%rbp)
	movl	$0, -44(%rbp)
	movl	$0, -48(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -72(%rbp)
	movl	$0, -8(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jne	.LBB320_14
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB320_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB320_13
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB320_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB320_11
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB320_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB320_10
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB320_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB320_10
# %bb.6:                                # %if.then10
                                        #   in Loop: Header=BB320_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jbe	.LBB320_8
# %bb.7:                                # %if.then15
                                        #   in Loop: Header=BB320_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	subl	-72(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
	jmp	.LBB320_9
.LBB320_8:                              # %if.else
                                        #   in Loop: Header=BB320_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
.LBB320_9:                              # %if.end
                                        #   in Loop: Header=BB320_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6364(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
.LBB320_10:                             # %if.end36
                                        #   in Loop: Header=BB320_2 Depth=1
	jmp	.LBB320_11
.LBB320_11:                             # %if.end37
                                        #   in Loop: Header=BB320_2 Depth=1
	jmp	.LBB320_12
.LBB320_12:                             # %for.inc
                                        #   in Loop: Header=BB320_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB320_2
.LBB320_13:                             # %for.end
	jmp	.LBB320_31
.LBB320_14:                             # %if.else38
	cmpl	$1, -20(%rbp)
	jne	.LBB320_16
# %bb.15:                               # %if.then40
	movl	$1, -44(%rbp)
	movl	$0, -48(%rbp)
	jmp	.LBB320_17
.LBB320_16:                             # %if.else41
	movl	$0, -44(%rbp)
	movl	$1, -48(%rbp)
.LBB320_17:                             # %if.end42
	movl	$0, -4(%rbp)
.LBB320_18:                             # %for.cond43
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB320_30
# %bb.19:                               # %for.body45
                                        #   in Loop: Header=BB320_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 4(%rax)
	je	.LBB320_28
# %bb.20:                               # %if.then49
                                        #   in Loop: Header=BB320_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jbe	.LBB320_22
# %bb.21:                               # %if.then55
                                        #   in Loop: Header=BB320_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	subl	-72(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
	jmp	.LBB320_23
.LBB320_22:                             # %if.else63
                                        #   in Loop: Header=BB320_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
.LBB320_23:                             # %if.end70
                                        #   in Loop: Header=BB320_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB320_25
# %bb.24:                               # %if.then75
                                        #   in Loop: Header=BB320_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6364(%rcx)
.LBB320_25:                             # %if.end83
                                        #   in Loop: Header=BB320_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB320_27
# %bb.26:                               # %if.then89
                                        #   in Loop: Header=BB320_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6364(%rcx)
.LBB320_27:                             # %if.end98
                                        #   in Loop: Header=BB320_18 Depth=1
	jmp	.LBB320_28
.LBB320_28:                             # %if.end99
                                        #   in Loop: Header=BB320_18 Depth=1
	jmp	.LBB320_29
.LBB320_29:                             # %for.inc100
                                        #   in Loop: Header=BB320_18 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB320_18
.LBB320_30:                             # %for.end102
	jmp	.LBB320_31
.LBB320_31:                             # %if.end103
	cmpl	$2, -52(%rbp)
	je	.LBB320_33
# %bb.32:                               # %lor.lhs.false
	cmpl	$4, -52(%rbp)
	jne	.LBB320_34
.LBB320_33:                             # %if.then106
	movl	$0, listXsize
	movl	$0, listXsize+4
	jmp	.LBB320_181
.LBB320_34:                             # %if.end107
	cmpl	$0, -52(%rbp)
	je	.LBB320_36
# %bb.35:                               # %lor.lhs.false109
	cmpl	$3, -52(%rbp)
	jne	.LBB320_75
.LBB320_36:                             # %if.then111
	cmpl	$0, -20(%rbp)
	jne	.LBB320_55
# %bb.37:                               # %if.then113
	movl	$0, -4(%rbp)
.LBB320_38:                             # %for.cond114
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB320_46
# %bb.39:                               # %for.body116
                                        #   in Loop: Header=BB320_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB320_44
# %bb.40:                               # %if.then121
                                        #   in Loop: Header=BB320_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB320_43
# %bb.41:                               # %land.lhs.true127
                                        #   in Loop: Header=BB320_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB320_43
# %bb.42:                               # %if.then133
                                        #   in Loop: Header=BB320_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB320_43:                             # %if.end140
                                        #   in Loop: Header=BB320_38 Depth=1
	jmp	.LBB320_44
.LBB320_44:                             # %if.end141
                                        #   in Loop: Header=BB320_38 Depth=1
	jmp	.LBB320_45
.LBB320_45:                             # %for.inc142
                                        #   in Loop: Header=BB320_38 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB320_38
.LBB320_46:                             # %for.end144
	movq	listX, %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_pic_num_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize
	movl	$0, -4(%rbp)
.LBB320_47:                             # %for.cond145
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB320_54
# %bb.48:                               # %for.body148
                                        #   in Loop: Header=BB320_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB320_52
# %bb.49:                               # %if.then154
                                        #   in Loop: Header=BB320_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB320_51
# %bb.50:                               # %if.then160
                                        #   in Loop: Header=BB320_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB320_51:                             # %if.end177
                                        #   in Loop: Header=BB320_47 Depth=1
	jmp	.LBB320_52
.LBB320_52:                             # %if.end178
                                        #   in Loop: Header=BB320_47 Depth=1
	jmp	.LBB320_53
.LBB320_53:                             # %for.inc179
                                        #   in Loop: Header=BB320_47 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB320_47
.LBB320_54:                             # %for.end181
	movq	listX, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize
	jmp	.LBB320_74
.LBB320_55:                             # %if.else186
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -32(%rbp)
	cmpq	-32(%rbp), %rcx
	jne	.LBB320_57
# %bb.56:                               # %if.then190
	movabsq	$.L.str.9, %rdi
	callq	no_mem_exit
.LBB320_57:                             # %if.end191
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -40(%rbp)
	cmpq	-40(%rbp), %rcx
	jne	.LBB320_59
# %bb.58:                               # %if.then196
	movabsq	$.L.str.10, %rdi
	callq	no_mem_exit
.LBB320_59:                             # %if.end197
	movl	$0, -4(%rbp)
.LBB320_60:                             # %for.cond198
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB320_65
# %bb.61:                               # %for.body201
                                        #   in Loop: Header=BB320_60 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 4(%rax)
	je	.LBB320_63
# %bb.62:                               # %if.then206
                                        #   in Loop: Header=BB320_60 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB320_63:                             # %if.end212
                                        #   in Loop: Header=BB320_60 Depth=1
	jmp	.LBB320_64
.LBB320_64:                             # %for.inc213
                                        #   in Loop: Header=BB320_60 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB320_60
.LBB320_65:                             # %for.end215
	movq	-32(%rbp), %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_frame_num_desc, %rcx
	callq	qsort
	movl	$0, listXsize
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movl	$0, -4(%rbp)
.LBB320_66:                             # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB320_73
# %bb.67:                               # %for.body220
                                        #   in Loop: Header=BB320_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-40(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB320_69
# %bb.68:                               # %if.then231
                                        #   in Loop: Header=BB320_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB320_69:                             # %if.end242
                                        #   in Loop: Header=BB320_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB320_71
# %bb.70:                               # %if.then248
                                        #   in Loop: Header=BB320_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB320_71:                             # %if.end259
                                        #   in Loop: Header=BB320_66 Depth=1
	jmp	.LBB320_72
.LBB320_72:                             # %for.inc260
                                        #   in Loop: Header=BB320_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB320_66
.LBB320_73:                             # %for.end262
	movq	-40(%rbp), %rdi
	movslq	-24(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_lt_pic_idx_asc, %rcx
	callq	qsort
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movq	-32(%rbp), %rdi
	callq	free
	movq	-40(%rbp), %rdi
	callq	free
.LBB320_74:                             # %if.end264
	movl	$0, listXsize+4
	jmp	.LBB320_155
.LBB320_75:                             # %if.else265
	cmpl	$0, -20(%rbp)
	jne	.LBB320_115
# %bb.76:                               # %if.then268
	movl	$0, -4(%rbp)
.LBB320_77:                             # %for.cond269
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB320_87
# %bb.78:                               # %for.body272
                                        #   in Loop: Header=BB320_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB320_85
# %bb.79:                               # %if.then278
                                        #   in Loop: Header=BB320_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB320_84
# %bb.80:                               # %land.lhs.true284
                                        #   in Loop: Header=BB320_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB320_84
# %bb.81:                               # %if.then290
                                        #   in Loop: Header=BB320_77 Depth=1
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB320_83
# %bb.82:                               # %if.then296
                                        #   in Loop: Header=BB320_77 Depth=1
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB320_83:                             # %if.end307
                                        #   in Loop: Header=BB320_77 Depth=1
	jmp	.LBB320_84
.LBB320_84:                             # %if.end308
                                        #   in Loop: Header=BB320_77 Depth=1
	jmp	.LBB320_85
.LBB320_85:                             # %if.end309
                                        #   in Loop: Header=BB320_77 Depth=1
	jmp	.LBB320_86
.LBB320_86:                             # %for.inc310
                                        #   in Loop: Header=BB320_77 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB320_77
.LBB320_87:                             # %for.end312
	movq	listX, %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_poc_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB320_88:                             # %for.cond314
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB320_98
# %bb.89:                               # %for.body317
                                        #   in Loop: Header=BB320_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB320_96
# %bb.90:                               # %if.then323
                                        #   in Loop: Header=BB320_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB320_95
# %bb.91:                               # %land.lhs.true329
                                        #   in Loop: Header=BB320_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB320_95
# %bb.92:                               # %if.then335
                                        #   in Loop: Header=BB320_88 Depth=1
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB320_94
# %bb.93:                               # %if.then343
                                        #   in Loop: Header=BB320_88 Depth=1
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB320_94:                             # %if.end354
                                        #   in Loop: Header=BB320_88 Depth=1
	jmp	.LBB320_95
.LBB320_95:                             # %if.end355
                                        #   in Loop: Header=BB320_88 Depth=1
	jmp	.LBB320_96
.LBB320_96:                             # %if.end356
                                        #   in Loop: Header=BB320_88 Depth=1
	jmp	.LBB320_97
.LBB320_97:                             # %for.inc357
                                        #   in Loop: Header=BB320_88 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB320_88
.LBB320_98:                             # %for.end359
	movq	listX, %rdi
	movslq	-16(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_poc_asc, %rcx
	callq	qsort
	movl	$0, -12(%rbp)
.LBB320_99:                             # %for.cond364
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB320_102
# %bb.100:                              # %for.body367
                                        #   in Loop: Header=BB320_99 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movl	-8(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.101:                              # %for.inc374
                                        #   in Loop: Header=BB320_99 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB320_99
.LBB320_102:                            # %for.end376
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB320_103:                            # %for.cond377
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB320_106
# %bb.104:                              # %for.body380
                                        #   in Loop: Header=BB320_103 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.105:                              # %for.inc386
                                        #   in Loop: Header=BB320_103 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB320_103
.LBB320_106:                            # %for.end388
	movl	-8(%rbp), %eax
	movl	%eax, listXsize+4
	movl	%eax, listXsize
	movl	$0, -4(%rbp)
.LBB320_107:                            # %for.cond389
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB320_114
# %bb.108:                              # %for.body392
                                        #   in Loop: Header=BB320_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB320_112
# %bb.109:                              # %if.then398
                                        #   in Loop: Header=BB320_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB320_111
# %bb.110:                              # %if.then404
                                        #   in Loop: Header=BB320_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX+8, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB320_111:                            # %if.end428
                                        #   in Loop: Header=BB320_107 Depth=1
	jmp	.LBB320_112
.LBB320_112:                            # %if.end429
                                        #   in Loop: Header=BB320_107 Depth=1
	jmp	.LBB320_113
.LBB320_113:                            # %for.inc430
                                        #   in Loop: Header=BB320_107 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB320_107
.LBB320_114:                            # %for.end432
	movq	listX, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movq	listX+8, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize+4
	movl	%eax, listXsize
	jmp	.LBB320_154
.LBB320_115:                            # %if.else441
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -32(%rbp)
	cmpq	-32(%rbp), %rcx
	jne	.LBB320_117
# %bb.116:                              # %if.then446
	movabsq	$.L.str.9, %rdi
	callq	no_mem_exit
.LBB320_117:                            # %if.end447
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -64(%rbp)
	cmpq	-64(%rbp), %rcx
	jne	.LBB320_119
# %bb.118:                              # %if.then452
	movabsq	$.L.str.11, %rdi
	callq	no_mem_exit
.LBB320_119:                            # %if.end453
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -40(%rbp)
	cmpq	-40(%rbp), %rcx
	jne	.LBB320_121
# %bb.120:                              # %if.then458
	movabsq	$.L.str.10, %rdi
	callq	no_mem_exit
.LBB320_121:                            # %if.end459
	movl	$0, listXsize
	movl	$1, listXsize+4
	movl	$0, -4(%rbp)
.LBB320_122:                            # %for.cond460
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB320_129
# %bb.123:                              # %for.body463
                                        #   in Loop: Header=BB320_122 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, (%rax)
	je	.LBB320_127
# %bb.124:                              # %if.then468
                                        #   in Loop: Header=BB320_122 Depth=1
	movq	img, %rax
	movl	72460(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jl	.LBB320_126
# %bb.125:                              # %if.then474
                                        #   in Loop: Header=BB320_122 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB320_126:                            # %if.end480
                                        #   in Loop: Header=BB320_122 Depth=1
	jmp	.LBB320_127
.LBB320_127:                            # %if.end481
                                        #   in Loop: Header=BB320_122 Depth=1
	jmp	.LBB320_128
.LBB320_128:                            # %for.inc482
                                        #   in Loop: Header=BB320_122 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB320_122
.LBB320_129:                            # %for.end484
	movq	-32(%rbp), %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_poc_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB320_130:                            # %for.cond486
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB320_137
# %bb.131:                              # %for.body489
                                        #   in Loop: Header=BB320_130 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, (%rax)
	je	.LBB320_135
# %bb.132:                              # %if.then494
                                        #   in Loop: Header=BB320_130 Depth=1
	movq	img, %rax
	movl	72460(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB320_134
# %bb.133:                              # %if.then501
                                        #   in Loop: Header=BB320_130 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB320_134:                            # %if.end507
                                        #   in Loop: Header=BB320_130 Depth=1
	jmp	.LBB320_135
.LBB320_135:                            # %if.end508
                                        #   in Loop: Header=BB320_130 Depth=1
	jmp	.LBB320_136
.LBB320_136:                            # %for.inc509
                                        #   in Loop: Header=BB320_130 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB320_130
.LBB320_137:                            # %for.end511
	movq	-32(%rbp), %rdi
	movslq	-16(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_poc_asc, %rcx
	callq	qsort
	movl	$0, -12(%rbp)
.LBB320_138:                            # %for.cond516
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB320_141
# %bb.139:                              # %for.body519
                                        #   in Loop: Header=BB320_138 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	-8(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.140:                              # %for.inc526
                                        #   in Loop: Header=BB320_138 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB320_138
.LBB320_141:                            # %for.end528
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB320_142:                            # %for.cond529
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB320_145
# %bb.143:                              # %for.body532
                                        #   in Loop: Header=BB320_142 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.144:                              # %for.inc538
                                        #   in Loop: Header=BB320_142 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB320_142
.LBB320_145:                            # %for.end540
	movl	$0, listXsize
	movl	$0, listXsize+4
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movabsq	$listXsize, %r8
	addq	$4, %r8
	movl	-20(%rbp), %edi
	movq	-64(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX+8, %rcx
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movl	$0, -4(%rbp)
.LBB320_146:                            # %for.cond541
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB320_153
# %bb.147:                              # %for.body544
                                        #   in Loop: Header=BB320_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-40(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB320_149
# %bb.148:                              # %if.then555
                                        #   in Loop: Header=BB320_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB320_149:                            # %if.end566
                                        #   in Loop: Header=BB320_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB320_151
# %bb.150:                              # %if.then572
                                        #   in Loop: Header=BB320_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB320_151:                            # %if.end583
                                        #   in Loop: Header=BB320_146 Depth=1
	jmp	.LBB320_152
.LBB320_152:                            # %for.inc584
                                        #   in Loop: Header=BB320_146 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB320_146
.LBB320_153:                            # %for.end586
	movq	-40(%rbp), %rdi
	movslq	-24(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_lt_pic_idx_asc, %rcx
	callq	qsort
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movabsq	$listXsize, %r8
	addq	$4, %r8
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX+8, %rcx
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movq	-32(%rbp), %rdi
	callq	free
	movq	-64(%rbp), %rdi
	callq	free
	movq	-40(%rbp), %rdi
	callq	free
.LBB320_154:                            # %if.end588
	jmp	.LBB320_155
.LBB320_155:                            # %if.end589
	movl	listXsize, %eax
	cmpl	listXsize+4, %eax
	jne	.LBB320_166
# %bb.156:                              # %land.lhs.true592
	cmpl	$1, listXsize
	jle	.LBB320_166
# %bb.157:                              # %if.then595
	movl	$0, -68(%rbp)
	movl	$0, -12(%rbp)
.LBB320_158:                            # %for.cond596
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB320_163
# %bb.159:                              # %for.body599
                                        #   in Loop: Header=BB320_158 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movslq	-12(%rbp), %rdx
	cmpq	(%rcx,%rdx,8), %rax
	je	.LBB320_161
# %bb.160:                              # %if.then606
                                        #   in Loop: Header=BB320_158 Depth=1
	movl	$1, -68(%rbp)
.LBB320_161:                            # %if.end607
                                        #   in Loop: Header=BB320_158 Depth=1
	jmp	.LBB320_162
.LBB320_162:                            # %for.inc608
                                        #   in Loop: Header=BB320_158 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB320_158
.LBB320_163:                            # %for.end610
	cmpl	$0, -68(%rbp)
	jne	.LBB320_165
# %bb.164:                              # %if.then612
	movq	listX+8, %rax
	movq	(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	listX+8, %rax
	movq	8(%rax), %rax
	movq	listX+8, %rcx
	movq	%rax, (%rcx)
	movq	-88(%rbp), %rax
	movq	listX+8, %rcx
	movq	%rax, 8(%rcx)
.LBB320_165:                            # %if.end617
	jmp	.LBB320_166
.LBB320_166:                            # %if.end618
	movl	listXsize, %eax
	movq	img, %rcx
	cmpl	72000(%rcx), %eax
	jge	.LBB320_168
# %bb.167:                              # %cond.true
	movl	listXsize, %eax
	jmp	.LBB320_169
.LBB320_168:                            # %cond.false
	movq	img, %rax
	movl	72000(%rax), %eax
.LBB320_169:                            # %cond.end
	movl	%eax, listXsize
	movl	listXsize+4, %eax
	movq	img, %rcx
	cmpl	72004(%rcx), %eax
	jge	.LBB320_171
# %bb.170:                              # %cond.true624
	movl	listXsize+4, %eax
	jmp	.LBB320_172
.LBB320_171:                            # %cond.false625
	movq	img, %rax
	movl	72004(%rax), %eax
.LBB320_172:                            # %cond.end627
	movl	%eax, listXsize+4
	movl	listXsize, %eax
	movl	%eax, -4(%rbp)
.LBB320_173:                            # %for.cond629
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$33, -4(%rbp)
	jae	.LBB320_176
# %bb.174:                              # %for.body632
                                        #   in Loop: Header=BB320_173 Depth=1
	movq	listX, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.175:                              # %for.inc635
                                        #   in Loop: Header=BB320_173 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB320_173
.LBB320_176:                            # %for.end637
	movl	listXsize+4, %eax
	movl	%eax, -4(%rbp)
.LBB320_177:                            # %for.cond638
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$33, -4(%rbp)
	jae	.LBB320_180
# %bb.178:                              # %for.body641
                                        #   in Loop: Header=BB320_177 Depth=1
	movq	listX+8, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.179:                              # %for.inc644
                                        #   in Loop: Header=BB320_177 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB320_177
.LBB320_180:                            # %for.end646.loopexit
	jmp	.LBB320_181
.LBB320_181:                            # %for.end646
	cmpl	$1825821336, -76(%rbp)  # imm = 0x6CD3D298
	jne	.LBB320_183
.LBB320_182:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB320_183:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB320_182
.Lfunc_end320:
	.size	init_lists.257, .Lfunc_end320-init_lists.257
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function reorder_short_term.258
	.type	reorder_short_term.258,@function
reorder_short_term.258:                 # @reorder_short_term.258
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$114234791, -44(%rbp)   # imm = 0x6CF15A7
	movq	%rdi, -16(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movq	%rcx, -40(%rbp)
	movl	-28(%rbp), %edi
	callq	get_short_term_pic
	movq	%rax, -56(%rbp)
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB321_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-40(%rbp), %rcx
	cmpl	(%rcx), %eax
	jle	.LBB321_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB321_1 Depth=1
	movq	-16(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB321_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB321_1
.LBB321_4:                              # %for.end
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movl	(%rdx), %esi
	movl	%esi, %edi
	addl	$1, %edi
	movl	%edi, (%rdx)
	movslq	%esi, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB321_5:                              # %for.cond5
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jg	.LBB321_13
# %bb.6:                                # %for.body8
                                        #   in Loop: Header=BB321_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	je	.LBB321_11
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB321_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB321_9
# %bb.8:                                # %lor.lhs.false
                                        #   in Loop: Header=BB321_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6364(%rax), %eax
	cmpl	-28(%rbp), %eax
	je	.LBB321_10
.LBB321_9:                              # %if.then17
                                        #   in Loop: Header=BB321_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movl	-20(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -20(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB321_10:                             # %if.end
                                        #   in Loop: Header=BB321_5 Depth=1
	jmp	.LBB321_11
.LBB321_11:                             # %if.end23
                                        #   in Loop: Header=BB321_5 Depth=1
	jmp	.LBB321_12
.LBB321_12:                             # %for.inc24
                                        #   in Loop: Header=BB321_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB321_5
.LBB321_13:                             # %for.end26
	cmpl	$114234791, -44(%rbp)   # imm = 0x6CF15A7
	jne	.LBB321_15
.LBB321_14:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB321_15:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB321_14
.Lfunc_end321:
	.size	reorder_short_term.258, .Lfunc_end321-reorder_short_term.258
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_short_term_pic.259
	.type	get_short_term_pic.259,@function
get_short_term_pic.259:                 # @get_short_term_pic.259
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$324567719, -28(%rbp)   # imm = 0x135882A7
	movl	%edi, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB322_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB322_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB322_1 Depth=1
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB322_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB322_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB322_8
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB322_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB322_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB322_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB322_7
# %bb.6:                                # %if.then10
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB322_23
.LBB322_7:                              # %if.end
                                        #   in Loop: Header=BB322_1 Depth=1
	jmp	.LBB322_8
.LBB322_8:                              # %if.end14
                                        #   in Loop: Header=BB322_1 Depth=1
	jmp	.LBB322_20
.LBB322_9:                              # %if.else
                                        #   in Loop: Header=BB322_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB322_14
# %bb.10:                               # %if.then19
                                        #   in Loop: Header=BB322_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB322_13
# %bb.11:                               # %land.lhs.true24
                                        #   in Loop: Header=BB322_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB322_13
# %bb.12:                               # %if.then30
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB322_23
.LBB322_13:                             # %if.end34
                                        #   in Loop: Header=BB322_1 Depth=1
	jmp	.LBB322_14
.LBB322_14:                             # %if.end35
                                        #   in Loop: Header=BB322_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB322_19
# %bb.15:                               # %if.then41
                                        #   in Loop: Header=BB322_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB322_18
# %bb.16:                               # %land.lhs.true46
                                        #   in Loop: Header=BB322_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB322_18
# %bb.17:                               # %if.then52
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB322_23
.LBB322_18:                             # %if.end56
                                        #   in Loop: Header=BB322_1 Depth=1
	jmp	.LBB322_19
.LBB322_19:                             # %if.end57
                                        #   in Loop: Header=BB322_1 Depth=1
	jmp	.LBB322_20
.LBB322_20:                             # %if.end58
                                        #   in Loop: Header=BB322_1 Depth=1
	jmp	.LBB322_21
.LBB322_21:                             # %for.inc
                                        #   in Loop: Header=BB322_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB322_1
.LBB322_22:                             # %for.end
	movq	$0, -24(%rbp)
.LBB322_23:                             # %return
	movq	-24(%rbp), %rbx
	cmpl	$324567719, -28(%rbp)   # imm = 0x135882A7
	jne	.LBB322_25
.LBB322_24:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB322_25:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB322_24
.Lfunc_end322:
	.size	get_short_term_pic.259, .Lfunc_end322-get_short_term_pic.259
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function unmark_long_term_field_for_reference_by_frame_idx.260
	.type	unmark_long_term_field_for_reference_by_frame_idx.260,@function
unmark_long_term_field_for_reference_by_frame_idx.260: # @unmark_long_term_field_for_reference_by_frame_idx.260
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1301522235, -24(%rbp)  # imm = 0x4D93A73B
	movl	%edi, -20(%rbp)
	movl	%esi, -32(%rbp)
	movl	%edx, -12(%rbp)
	movl	%ecx, -16(%rbp)
	movl	%r8d, -8(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -28(%rbp)
	cmpl	$0, -8(%rbp)
	jge	.LBB323_2
# %bb.1:                                # %if.then
	movl	-28(%rbp), %eax
	shll	$1, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB323_2:                              # %if.end
	movl	$0, -4(%rbp)
.LBB323_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB323_46
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB323_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-32(%rbp), %eax
	jne	.LBB323_44
# %bb.5:                                # %if.then5
                                        #   in Loop: Header=BB323_3 Depth=1
	cmpl	$1, -20(%rbp)
	jne	.LBB323_24
# %bb.6:                                # %if.then7
                                        #   in Loop: Header=BB323_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB323_8
# %bb.7:                                # %if.then11
                                        #   in Loop: Header=BB323_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB323_23
.LBB323_8:                              # %if.else
                                        #   in Loop: Header=BB323_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, 8(%rax)
	jne	.LBB323_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB323_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB323_22
.LBB323_10:                             # %if.else21
                                        #   in Loop: Header=BB323_3 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB323_18
# %bb.11:                               # %if.then22
                                        #   in Loop: Header=BB323_3 Depth=1
	cmpq	$0, dpb+56
	je	.LBB323_16
# %bb.12:                               # %if.then24
                                        #   in Loop: Header=BB323_3 Depth=1
	movq	dpb+56, %rax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	cmpq	(%rcx,%rdx,8), %rax
	jne	.LBB323_14
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB323_3 Depth=1
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB323_15
.LBB323_14:                             # %if.then29
                                        #   in Loop: Header=BB323_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB323_15:                             # %if.end32
                                        #   in Loop: Header=BB323_3 Depth=1
	jmp	.LBB323_17
.LBB323_16:                             # %if.else33
                                        #   in Loop: Header=BB323_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB323_17:                             # %if.end36
                                        #   in Loop: Header=BB323_3 Depth=1
	jmp	.LBB323_21
.LBB323_18:                             # %if.else37
                                        #   in Loop: Header=BB323_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %ecx
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	je	.LBB323_20
# %bb.19:                               # %if.then42
                                        #   in Loop: Header=BB323_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB323_20:                             # %if.end45
                                        #   in Loop: Header=BB323_3 Depth=1
	jmp	.LBB323_21
.LBB323_21:                             # %if.end46
                                        #   in Loop: Header=BB323_3 Depth=1
	jmp	.LBB323_22
.LBB323_22:                             # %if.end47
                                        #   in Loop: Header=BB323_3 Depth=1
	jmp	.LBB323_23
.LBB323_23:                             # %if.end48
                                        #   in Loop: Header=BB323_3 Depth=1
	jmp	.LBB323_24
.LBB323_24:                             # %if.end49
                                        #   in Loop: Header=BB323_3 Depth=1
	cmpl	$2, -20(%rbp)
	jne	.LBB323_43
# %bb.25:                               # %if.then51
                                        #   in Loop: Header=BB323_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB323_27
# %bb.26:                               # %if.then56
                                        #   in Loop: Header=BB323_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB323_42
.LBB323_27:                             # %if.else59
                                        #   in Loop: Header=BB323_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$2, 8(%rax)
	jne	.LBB323_29
# %bb.28:                               # %if.then64
                                        #   in Loop: Header=BB323_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB323_41
.LBB323_29:                             # %if.else67
                                        #   in Loop: Header=BB323_3 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB323_37
# %bb.30:                               # %if.then69
                                        #   in Loop: Header=BB323_3 Depth=1
	cmpq	$0, dpb+56
	je	.LBB323_35
# %bb.31:                               # %if.then71
                                        #   in Loop: Header=BB323_3 Depth=1
	movq	dpb+56, %rax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	cmpq	(%rcx,%rdx,8), %rax
	jne	.LBB323_33
# %bb.32:                               # %lor.lhs.false75
                                        #   in Loop: Header=BB323_3 Depth=1
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB323_34
.LBB323_33:                             # %if.then78
                                        #   in Loop: Header=BB323_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB323_34:                             # %if.end81
                                        #   in Loop: Header=BB323_3 Depth=1
	jmp	.LBB323_36
.LBB323_35:                             # %if.else82
                                        #   in Loop: Header=BB323_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB323_36:                             # %if.end85
                                        #   in Loop: Header=BB323_3 Depth=1
	jmp	.LBB323_40
.LBB323_37:                             # %if.else86
                                        #   in Loop: Header=BB323_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %ecx
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	je	.LBB323_39
# %bb.38:                               # %if.then92
                                        #   in Loop: Header=BB323_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB323_39:                             # %if.end95
                                        #   in Loop: Header=BB323_3 Depth=1
	jmp	.LBB323_40
.LBB323_40:                             # %if.end96
                                        #   in Loop: Header=BB323_3 Depth=1
	jmp	.LBB323_41
.LBB323_41:                             # %if.end97
                                        #   in Loop: Header=BB323_3 Depth=1
	jmp	.LBB323_42
.LBB323_42:                             # %if.end98
                                        #   in Loop: Header=BB323_3 Depth=1
	jmp	.LBB323_43
.LBB323_43:                             # %if.end99
                                        #   in Loop: Header=BB323_3 Depth=1
	jmp	.LBB323_44
.LBB323_44:                             # %if.end100
                                        #   in Loop: Header=BB323_3 Depth=1
	jmp	.LBB323_45
.LBB323_45:                             # %for.inc
                                        #   in Loop: Header=BB323_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB323_3
.LBB323_46:                             # %for.end
	cmpl	$1301522235, -24(%rbp)  # imm = 0x4D93A73B
	jne	.LBB323_48
.LBB323_47:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB323_48:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB323_47
.Lfunc_end323:
	.size	unmark_long_term_field_for_reference_by_frame_idx.260, .Lfunc_end323-unmark_long_term_field_for_reference_by_frame_idx.260
	.cfi_endproc
                                        # -- End function
	.globl	dpb_split_field.261     # -- Begin function dpb_split_field.261
	.p2align	4, 0x90
	.type	dpb_split_field.261,@function
dpb_split_field.261:                    # @dpb_split_field.261
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$416272975, -76(%rbp)   # imm = 0x18CFD24F
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 36(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB324_28
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %r8d
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	idivl	%edi
	movl	$1, %edi
	movl	%r8d, %edx
	movl	%eax, %r8d
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %r8d
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	idivl	%edi
	movl	$2, %edi
	movl	%r8d, %edx
	movl	%eax, %r8d
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 56(%rcx)
	movl	$0, -4(%rbp)
.LBB324_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB324_5
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB324_2 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.4:                                # %for.inc
                                        #   in Loop: Header=BB324_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB324_2
.LBB324_5:                              # %for.end
	movl	$0, -4(%rbp)
.LBB324_6:                              # %for.cond30
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB324_9
# %bb.7:                                # %for.body36
                                        #   in Loop: Header=BB324_6 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.8:                                # %for.inc66
                                        #   in Loop: Header=BB324_6 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB324_6
.LBB324_9:                              # %for.end68
	movl	$0, -4(%rbp)
.LBB324_10:                             # %for.cond69
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB324_13
# %bb.11:                               # %for.body75
                                        #   in Loop: Header=BB324_10 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.12:                               # %for.inc89
                                        #   in Loop: Header=BB324_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB324_10
.LBB324_13:                             # %for.end91
	movl	$0, -4(%rbp)
.LBB324_14:                             # %for.cond92
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB324_17
# %bb.15:                               # %for.body98
                                        #   in Loop: Header=BB324_14 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.16:                               # %for.inc131
                                        #   in Loop: Header=BB324_14 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB324_14
.LBB324_17:                             # %for.end133
	movq	-16(%rbp), %rax
	movq	48(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	56(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6380(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6380(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6380(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6376(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	-16(%rbp), %rcx
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	$1, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	$1, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6416(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6416(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6416(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6552(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB324_27
# %bb.18:                               # %if.then211
	movl	$0, -4(%rbp)
.LBB324_19:                             # %for.cond212
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB324_22
# %bb.20:                               # %for.body215
                                        #   in Loop: Header=BB324_19 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	816(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	816(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	1344(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	1344(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
# %bb.21:                               # %for.inc267
                                        #   in Loop: Header=BB324_19 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB324_19
.LBB324_22:                             # %for.end269
	movl	$0, -4(%rbp)
.LBB324_23:                             # %for.cond270
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB324_26
# %bb.24:                               # %for.body273
                                        #   in Loop: Header=BB324_23 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	552(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	552(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	1080(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	1080(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
# %bb.25:                               # %for.inc326
                                        #   in Loop: Header=BB324_23 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB324_23
.LBB324_26:                             # %for.end328
	jmp	.LBB324_27
.LBB324_27:                             # %if.end
	jmp	.LBB324_29
.LBB324_28:                             # %if.else
	movq	-16(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 56(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	$0, 6528(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	$0, 6536(%rax)
.LBB324_29:                             # %if.end335
	movl	$0, -8(%rbp)
.LBB324_30:                             # %for.cond336
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB324_32 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB324_59
# %bb.31:                               # %for.body342
                                        #   in Loop: Header=BB324_30 Depth=1
	movl	$0, -4(%rbp)
.LBB324_32:                             # %for.cond343
                                        #   Parent Loop BB324_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB324_57
# %bb.33:                               # %for.body349
                                        #   in Loop: Header=BB324_32 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -64(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	imull	%eax, %ecx
	movl	-64(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-36(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -44(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB324_48
# %bb.34:                               # %land.lhs.true
                                        #   in Loop: Header=BB324_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB324_48
# %bb.35:                               # %if.then369
                                        #   in Loop: Header=BB324_32 Depth=2
	movl	-44(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	movl	%ecx, -28(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB324_37
# %bb.36:                               # %cond.true
                                        #   in Loop: Header=BB324_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB324_38
.LBB324_37:                             # %cond.false
                                        #   in Loop: Header=BB324_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB324_38
.LBB324_38:                             # %cond.end
                                        #   in Loop: Header=BB324_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB324_40
# %bb.39:                               # %cond.true407
                                        #   in Loop: Header=BB324_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB324_41
.LBB324_40:                             # %cond.false415
                                        #   in Loop: Header=BB324_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB324_41
.LBB324_41:                             # %cond.end416
                                        #   in Loop: Header=BB324_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB324_43
# %bb.42:                               # %cond.true429
                                        #   in Loop: Header=BB324_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$1608, %rax             # imm = 0x648
	movl	-28(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB324_44
.LBB324_43:                             # %cond.false436
                                        #   in Loop: Header=BB324_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB324_44
.LBB324_44:                             # %cond.end437
                                        #   in Loop: Header=BB324_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB324_46
# %bb.45:                               # %cond.true448
                                        #   in Loop: Header=BB324_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$1608, %rax             # imm = 0x648
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB324_47
.LBB324_46:                             # %cond.false456
                                        #   in Loop: Header=BB324_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB324_47
.LBB324_47:                             # %cond.end457
                                        #   in Loop: Header=BB324_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB324_55
.LBB324_48:                             # %if.else466
                                        #   in Loop: Header=BB324_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB324_50
# %bb.49:                               # %cond.true485
                                        #   in Loop: Header=BB324_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB324_51
.LBB324_50:                             # %cond.false491
                                        #   in Loop: Header=BB324_32 Depth=2
	movq	$-1, %rax
	jmp	.LBB324_51
.LBB324_51:                             # %cond.end492
                                        #   in Loop: Header=BB324_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB324_53
# %bb.52:                               # %cond.true503
                                        #   in Loop: Header=BB324_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB324_54
.LBB324_53:                             # %cond.false509
                                        #   in Loop: Header=BB324_32 Depth=2
	movq	$-1, %rax
	jmp	.LBB324_54
.LBB324_54:                             # %cond.end510
                                        #   in Loop: Header=BB324_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB324_55:                             # %if.end519
                                        #   in Loop: Header=BB324_32 Depth=2
	jmp	.LBB324_56
.LBB324_56:                             # %for.inc520
                                        #   in Loop: Header=BB324_32 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB324_32
.LBB324_57:                             # %for.end522
                                        #   in Loop: Header=BB324_30 Depth=1
	jmp	.LBB324_58
.LBB324_58:                             # %for.inc523
                                        #   in Loop: Header=BB324_30 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB324_30
.LBB324_59:                             # %for.end525
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	je	.LBB324_61
# %bb.60:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB324_73
.LBB324_61:                             # %if.then530
	movl	$0, -4(%rbp)
.LBB324_62:                             # %for.cond531
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB324_64 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB324_72
# %bb.63:                               # %for.body537
                                        #   in Loop: Header=BB324_62 Depth=1
	movl	$0, -8(%rbp)
.LBB324_64:                             # %for.cond538
                                        #   Parent Loop BB324_62 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB324_70
# %bb.65:                               # %for.body544
                                        #   in Loop: Header=BB324_64 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -60(%rbp)
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-40(%rbp), %eax
	cltd
	idivl	%esi
	imull	%eax, %ecx
	movl	-60(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-40(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -68(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB324_68
# %bb.66:                               # %land.lhs.true563
                                        #   in Loop: Header=BB324_64 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-68(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB324_68
# %bb.67:                               # %if.then570
                                        #   in Loop: Header=BB324_64 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	32(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	40(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB324_68:                             # %if.end908
                                        #   in Loop: Header=BB324_64 Depth=2
	jmp	.LBB324_69
.LBB324_69:                             # %for.inc909
                                        #   in Loop: Header=BB324_64 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB324_64
.LBB324_70:                             # %for.end911
                                        #   in Loop: Header=BB324_62 Depth=1
	jmp	.LBB324_71
.LBB324_71:                             # %for.inc912
                                        #   in Loop: Header=BB324_62 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB324_62
.LBB324_72:                             # %for.end914
	jmp	.LBB324_73
.LBB324_73:                             # %if.end915
	movl	$0, -4(%rbp)
.LBB324_74:                             # %for.cond916
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB324_76 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB324_152
# %bb.75:                               # %for.body922
                                        #   in Loop: Header=BB324_74 Depth=1
	movl	$0, -8(%rbp)
.LBB324_76:                             # %for.cond923
                                        #   Parent Loop BB324_74 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB324_150
# %bb.77:                               # %for.body929
                                        #   in Loop: Header=BB324_76 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -80(%rbp)
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-48(%rbp), %eax
	cltd
	idivl	%esi
	imull	%eax, %ecx
	movl	-80(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-48(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -72(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB324_79
# %bb.78:                               # %lor.lhs.false948
                                        #   in Loop: Header=BB324_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-72(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB324_148
.LBB324_79:                             # %if.then954
                                        #   in Loop: Header=BB324_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB324_147
# %bb.80:                               # %if.then973
                                        #   in Loop: Header=BB324_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB324_82
# %bb.81:                               # %cond.true990
                                        #   in Loop: Header=BB324_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB324_83
.LBB324_82:                             # %cond.false991
                                        #   in Loop: Header=BB324_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB324_83:                             # %cond.end993
                                        #   in Loop: Header=BB324_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB324_85
# %bb.84:                               # %cond.true999
                                        #   in Loop: Header=BB324_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB324_86
.LBB324_85:                             # %cond.false1001
                                        #   in Loop: Header=BB324_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB324_86:                             # %cond.end1003
                                        #   in Loop: Header=BB324_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB324_88
# %bb.87:                               # %cond.true1030
                                        #   in Loop: Header=BB324_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB324_89
.LBB324_88:                             # %cond.false1032
                                        #   in Loop: Header=BB324_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB324_89:                             # %cond.end1034
                                        #   in Loop: Header=BB324_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB324_91
# %bb.90:                               # %cond.true1040
                                        #   in Loop: Header=BB324_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB324_92
.LBB324_91:                             # %cond.false1042
                                        #   in Loop: Header=BB324_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB324_92:                             # %cond.end1044
                                        #   in Loop: Header=BB324_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB324_94
# %bb.93:                               # %cond.true1071
                                        #   in Loop: Header=BB324_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB324_95
.LBB324_94:                             # %cond.false1073
                                        #   in Loop: Header=BB324_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB324_95:                             # %cond.end1075
                                        #   in Loop: Header=BB324_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB324_97
# %bb.96:                               # %cond.true1081
                                        #   in Loop: Header=BB324_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB324_98
.LBB324_97:                             # %cond.false1083
                                        #   in Loop: Header=BB324_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB324_98:                             # %cond.end1085
                                        #   in Loop: Header=BB324_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB324_100
# %bb.99:                               # %cond.true1112
                                        #   in Loop: Header=BB324_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB324_101
.LBB324_100:                            # %cond.false1114
                                        #   in Loop: Header=BB324_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB324_101:                            # %cond.end1116
                                        #   in Loop: Header=BB324_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB324_103
# %bb.102:                              # %cond.true1122
                                        #   in Loop: Header=BB324_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB324_104
.LBB324_103:                            # %cond.false1124
                                        #   in Loop: Header=BB324_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB324_104:                            # %cond.end1126
                                        #   in Loop: Header=BB324_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB324_106
# %bb.105:                              # %cond.true1153
                                        #   in Loop: Header=BB324_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB324_107
.LBB324_106:                            # %cond.false1155
                                        #   in Loop: Header=BB324_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB324_107:                            # %cond.end1157
                                        #   in Loop: Header=BB324_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB324_109
# %bb.108:                              # %cond.true1163
                                        #   in Loop: Header=BB324_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB324_110
.LBB324_109:                            # %cond.false1165
                                        #   in Loop: Header=BB324_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB324_110:                            # %cond.end1167
                                        #   in Loop: Header=BB324_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB324_112
# %bb.111:                              # %if.then1175
                                        #   in Loop: Header=BB324_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	jmp	.LBB324_125
.LBB324_112:                            # %if.else1190
                                        #   in Loop: Header=BB324_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB324_114
# %bb.113:                              # %cond.true1196
                                        #   in Loop: Header=BB324_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB324_115
.LBB324_114:                            # %cond.false1198
                                        #   in Loop: Header=BB324_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB324_115:                            # %cond.end1200
                                        #   in Loop: Header=BB324_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB324_117
# %bb.116:                              # %cond.true1206
                                        #   in Loop: Header=BB324_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB324_118
.LBB324_117:                            # %cond.false1208
                                        #   in Loop: Header=BB324_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB324_118:                            # %cond.end1210
                                        #   in Loop: Header=BB324_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cwtl
	movl	%eax, -20(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB324_120
# %bb.119:                              # %cond.true1232
                                        #   in Loop: Header=BB324_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	3192(%rax,%rcx,8), %rax
	jmp	.LBB324_121
.LBB324_120:                            # %cond.false1237
                                        #   in Loop: Header=BB324_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB324_121
.LBB324_121:                            # %cond.end1238
                                        #   in Loop: Header=BB324_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB324_123
# %bb.122:                              # %cond.true1249
                                        #   in Loop: Header=BB324_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	4776(%rax,%rcx,8), %rax
	jmp	.LBB324_124
.LBB324_123:                            # %cond.false1254
                                        #   in Loop: Header=BB324_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB324_124
.LBB324_124:                            # %cond.end1255
                                        #   in Loop: Header=BB324_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB324_125:                            # %if.end1264
                                        #   in Loop: Header=BB324_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB324_127
# %bb.126:                              # %cond.true1270
                                        #   in Loop: Header=BB324_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB324_128
.LBB324_127:                            # %cond.false1272
                                        #   in Loop: Header=BB324_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB324_128:                            # %cond.end1274
                                        #   in Loop: Header=BB324_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB324_130
# %bb.129:                              # %cond.true1280
                                        #   in Loop: Header=BB324_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB324_131
.LBB324_130:                            # %cond.false1282
                                        #   in Loop: Header=BB324_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB324_131:                            # %cond.end1284
                                        #   in Loop: Header=BB324_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB324_133
# %bb.132:                              # %if.then1292
                                        #   in Loop: Header=BB324_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	jmp	.LBB324_146
.LBB324_133:                            # %if.else1307
                                        #   in Loop: Header=BB324_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB324_135
# %bb.134:                              # %cond.true1313
                                        #   in Loop: Header=BB324_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB324_136
.LBB324_135:                            # %cond.false1315
                                        #   in Loop: Header=BB324_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB324_136:                            # %cond.end1317
                                        #   in Loop: Header=BB324_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB324_138
# %bb.137:                              # %cond.true1323
                                        #   in Loop: Header=BB324_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB324_139
.LBB324_138:                            # %cond.false1325
                                        #   in Loop: Header=BB324_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB324_139:                            # %cond.end1327
                                        #   in Loop: Header=BB324_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cwtl
	movl	%eax, -24(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB324_141
# %bb.140:                              # %cond.true1349
                                        #   in Loop: Header=BB324_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	3456(%rax,%rcx,8), %rax
	jmp	.LBB324_142
.LBB324_141:                            # %cond.false1355
                                        #   in Loop: Header=BB324_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB324_142
.LBB324_142:                            # %cond.end1356
                                        #   in Loop: Header=BB324_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB324_144
# %bb.143:                              # %cond.true1367
                                        #   in Loop: Header=BB324_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	5040(%rax,%rcx,8), %rax
	jmp	.LBB324_145
.LBB324_144:                            # %cond.false1373
                                        #   in Loop: Header=BB324_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB324_145
.LBB324_145:                            # %cond.end1374
                                        #   in Loop: Header=BB324_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB324_146:                            # %if.end1383
                                        #   in Loop: Header=BB324_76 Depth=2
	jmp	.LBB324_147
.LBB324_147:                            # %if.end1384
                                        #   in Loop: Header=BB324_76 Depth=2
	jmp	.LBB324_148
.LBB324_148:                            # %if.end1385
                                        #   in Loop: Header=BB324_76 Depth=2
	jmp	.LBB324_149
.LBB324_149:                            # %for.inc1386
                                        #   in Loop: Header=BB324_76 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB324_76
.LBB324_150:                            # %for.end1388
                                        #   in Loop: Header=BB324_74 Depth=1
	jmp	.LBB324_151
.LBB324_151:                            # %for.inc1389
                                        #   in Loop: Header=BB324_74 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB324_74
.LBB324_152:                            # %for.end1391
	movl	$0, -8(%rbp)
.LBB324_153:                            # %for.cond1392
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB324_155 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB324_160
# %bb.154:                              # %for.body1398
                                        #   in Loop: Header=BB324_153 Depth=1
	movl	$0, -4(%rbp)
.LBB324_155:                            # %for.cond1399
                                        #   Parent Loop BB324_153 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB324_158
# %bb.156:                              # %for.body1405
                                        #   in Loop: Header=BB324_155 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
# %bb.157:                              # %for.inc1412
                                        #   in Loop: Header=BB324_155 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB324_155
.LBB324_158:                            # %for.end1414
                                        #   in Loop: Header=BB324_153 Depth=1
	jmp	.LBB324_159
.LBB324_159:                            # %for.inc1415
                                        #   in Loop: Header=BB324_153 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB324_153
.LBB324_160:                            # %for.end1417
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB324_162
# %bb.161:                              # %lor.lhs.false1420
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB324_174
.LBB324_162:                            # %if.then1423
	movl	$0, -8(%rbp)
.LBB324_163:                            # %for.cond1424
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB324_165 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB324_173
# %bb.164:                              # %for.body1430
                                        #   in Loop: Header=BB324_163 Depth=1
	movl	$0, -4(%rbp)
.LBB324_165:                            # %for.cond1431
                                        #   Parent Loop BB324_163 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB324_171
# %bb.166:                              # %for.body1437
                                        #   in Loop: Header=BB324_165 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -56(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	imull	%eax, %ecx
	movl	-56(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -52(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB324_168
# %bb.167:                              # %cond.true1456
                                        #   in Loop: Header=BB324_165 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-52(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	jmp	.LBB324_169
.LBB324_168:                            # %cond.false1462
                                        #   in Loop: Header=BB324_165 Depth=2
	xorl	%eax, %eax
	jmp	.LBB324_169
.LBB324_169:                            # %cond.end1463
                                        #   in Loop: Header=BB324_165 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6520(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.170:                              # %for.inc1472
                                        #   in Loop: Header=BB324_165 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB324_165
.LBB324_171:                            # %for.end1474
                                        #   in Loop: Header=BB324_163 Depth=1
	jmp	.LBB324_172
.LBB324_172:                            # %for.inc1475
                                        #   in Loop: Header=BB324_163 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB324_163
.LBB324_173:                            # %for.end1477
	jmp	.LBB324_174
.LBB324_174:                            # %if.end1478
	cmpl	$416272975, -76(%rbp)   # imm = 0x18CFD24F
	jne	.LBB324_176
.LBB324_175:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB324_176:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB324_175
.Lfunc_end324:
	.size	dpb_split_field.261, .Lfunc_end324-dpb_split_field.261
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_unmark_long_term_for_reference.262
	.type	mm_unmark_long_term_for_reference.262,@function
mm_unmark_long_term_for_reference.262:  # @mm_unmark_long_term_for_reference.262
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$620050659, -12(%rbp)   # imm = 0x24F538E3
	movq	%rdi, -24(%rbp)
	movl	%esi, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB325_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB325_26
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB325_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB325_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB325_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB325_8
# %bb.4:                                # %land.lhs.true
                                        #   in Loop: Header=BB325_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB325_8
# %bb.5:                                # %if.then6
                                        #   in Loop: Header=BB325_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB325_7
# %bb.6:                                # %if.then11
                                        #   in Loop: Header=BB325_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB325_7:                              # %if.end
                                        #   in Loop: Header=BB325_1 Depth=1
	jmp	.LBB325_8
.LBB325_8:                              # %if.end14
                                        #   in Loop: Header=BB325_1 Depth=1
	jmp	.LBB325_24
.LBB325_9:                              # %if.else
                                        #   in Loop: Header=BB325_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB325_16
# %bb.10:                               # %land.lhs.true18
                                        #   in Loop: Header=BB325_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB325_16
# %bb.11:                               # %if.then24
                                        #   in Loop: Header=BB325_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB325_15
# %bb.12:                               # %if.then29
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$0, 6376(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$2, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	andl	$2, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB325_14
# %bb.13:                               # %if.then48
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6376(%rax)
.LBB325_14:                             # %if.end57
	jmp	.LBB325_27
.LBB325_15:                             # %if.end58
                                        #   in Loop: Header=BB325_1 Depth=1
	jmp	.LBB325_16
.LBB325_16:                             # %if.end59
                                        #   in Loop: Header=BB325_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB325_23
# %bb.17:                               # %land.lhs.true65
                                        #   in Loop: Header=BB325_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB325_23
# %bb.18:                               # %if.then71
                                        #   in Loop: Header=BB325_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB325_22
# %bb.19:                               # %if.then76
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$0, 6376(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB325_21
# %bb.20:                               # %if.then97
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6376(%rax)
.LBB325_21:                             # %if.end106
	jmp	.LBB325_27
.LBB325_22:                             # %if.end107
                                        #   in Loop: Header=BB325_1 Depth=1
	jmp	.LBB325_23
.LBB325_23:                             # %if.end108
                                        #   in Loop: Header=BB325_1 Depth=1
	jmp	.LBB325_24
.LBB325_24:                             # %if.end109
                                        #   in Loop: Header=BB325_1 Depth=1
	jmp	.LBB325_25
.LBB325_25:                             # %for.inc
                                        #   in Loop: Header=BB325_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB325_1
.LBB325_26:                             # %for.end.loopexit
	jmp	.LBB325_27
.LBB325_27:                             # %for.end
	cmpl	$620050659, -12(%rbp)   # imm = 0x24F538E3
	jne	.LBB325_29
.LBB325_28:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB325_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB325_28
.Lfunc_end325:
	.size	mm_unmark_long_term_for_reference.262, .Lfunc_end325-mm_unmark_long_term_for_reference.262
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function remove_frame_from_dpb.263
	.type	remove_frame_from_dpb.263,@function
remove_frame_from_dpb.263:              # @remove_frame_from_dpb.263
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1959664306, -20(%rbp)  # imm = 0x74CE1AB2
	movl	%edi, -16(%rbp)
	movq	dpb(%rip), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB326_6
# %bb.1:                                # %entry
	movq	.LJTI326_0(,%rax,8), %rax
	jmpq	*%rax
.LBB326_2:                              # %sw.bb
	movq	-8(%rbp), %rax
	movq	40(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	56(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 40(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 56(%rax)
	jmp	.LBB326_7
.LBB326_3:                              # %sw.bb4
	movq	-8(%rbp), %rax
	movq	56(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 56(%rax)
	jmp	.LBB326_7
.LBB326_4:                              # %sw.bb7
	movq	-8(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 48(%rax)
	jmp	.LBB326_7
.LBB326_5:                              # %sw.bb10
	jmp	.LBB326_7
.LBB326_6:                              # %sw.default
	movabsq	$.L.str.29, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB326_7:                              # %sw.epilog
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 4(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 12(%rax)
	movq	dpb, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -32(%rbp)
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB326_8:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movl	dpb+28, %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jae	.LBB326_11
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB326_8 Depth=1
	movq	dpb, %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movl	%ecx, %ecx
	movq	(%rax,%rcx,8), %rax
	movq	dpb, %rcx
	movl	-12(%rbp), %edx
	movq	%rax, (%rcx,%rdx,8)
# %bb.10:                               # %for.inc
                                        #   in Loop: Header=BB326_8 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB326_8
.LBB326_11:                             # %for.end
	movq	-32(%rbp), %rax
	movq	dpb, %rcx
	movl	dpb+28, %edx
	subl	$1, %edx
	movl	%edx, %edx
	movq	%rax, (%rcx,%rdx,8)
	movl	dpb+28, %eax
	addl	$-1, %eax
	movl	%eax, dpb+28
	cmpl	$1959664306, -20(%rbp)  # imm = 0x74CE1AB2
	jne	.LBB326_13
.LBB326_12:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB326_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB326_12
.Lfunc_end326:
	.size	remove_frame_from_dpb.263, .Lfunc_end326-remove_frame_from_dpb.263
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI326_0:
	.quad	.LBB326_5
	.quad	.LBB326_4
	.quad	.LBB326_3
	.quad	.LBB326_2
                                        # -- End function
	.text
	.globl	dpb_split_field.264     # -- Begin function dpb_split_field.264
	.p2align	4, 0x90
	.type	dpb_split_field.264,@function
dpb_split_field.264:                    # @dpb_split_field.264
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$997792342, -76(%rbp)   # imm = 0x3B791A56
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 36(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB327_28
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %r8d
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	idivl	%edi
	movl	$1, %edi
	movl	%r8d, %edx
	movl	%eax, %r8d
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %r8d
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	idivl	%edi
	movl	$2, %edi
	movl	%r8d, %edx
	movl	%eax, %r8d
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 56(%rcx)
	movl	$0, -4(%rbp)
.LBB327_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB327_5
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB327_2 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.4:                                # %for.inc
                                        #   in Loop: Header=BB327_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB327_2
.LBB327_5:                              # %for.end
	movl	$0, -4(%rbp)
.LBB327_6:                              # %for.cond30
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB327_9
# %bb.7:                                # %for.body36
                                        #   in Loop: Header=BB327_6 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.8:                                # %for.inc66
                                        #   in Loop: Header=BB327_6 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB327_6
.LBB327_9:                              # %for.end68
	movl	$0, -4(%rbp)
.LBB327_10:                             # %for.cond69
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB327_13
# %bb.11:                               # %for.body75
                                        #   in Loop: Header=BB327_10 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.12:                               # %for.inc89
                                        #   in Loop: Header=BB327_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB327_10
.LBB327_13:                             # %for.end91
	movl	$0, -4(%rbp)
.LBB327_14:                             # %for.cond92
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB327_17
# %bb.15:                               # %for.body98
                                        #   in Loop: Header=BB327_14 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.16:                               # %for.inc131
                                        #   in Loop: Header=BB327_14 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB327_14
.LBB327_17:                             # %for.end133
	movq	-16(%rbp), %rax
	movq	48(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	56(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6380(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6380(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6380(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6376(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	-16(%rbp), %rcx
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	$1, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	$1, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6416(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6416(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6416(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6552(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB327_27
# %bb.18:                               # %if.then211
	movl	$0, -4(%rbp)
.LBB327_19:                             # %for.cond212
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB327_22
# %bb.20:                               # %for.body215
                                        #   in Loop: Header=BB327_19 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	816(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	816(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	1344(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	1344(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
# %bb.21:                               # %for.inc267
                                        #   in Loop: Header=BB327_19 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB327_19
.LBB327_22:                             # %for.end269
	movl	$0, -4(%rbp)
.LBB327_23:                             # %for.cond270
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB327_26
# %bb.24:                               # %for.body273
                                        #   in Loop: Header=BB327_23 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	552(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	552(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	1080(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	1080(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
# %bb.25:                               # %for.inc326
                                        #   in Loop: Header=BB327_23 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB327_23
.LBB327_26:                             # %for.end328
	jmp	.LBB327_27
.LBB327_27:                             # %if.end
	jmp	.LBB327_29
.LBB327_28:                             # %if.else
	movq	-16(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 56(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	$0, 6528(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	$0, 6536(%rax)
.LBB327_29:                             # %if.end335
	movl	$0, -8(%rbp)
.LBB327_30:                             # %for.cond336
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB327_32 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB327_59
# %bb.31:                               # %for.body342
                                        #   in Loop: Header=BB327_30 Depth=1
	movl	$0, -4(%rbp)
.LBB327_32:                             # %for.cond343
                                        #   Parent Loop BB327_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB327_57
# %bb.33:                               # %for.body349
                                        #   in Loop: Header=BB327_32 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -64(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	imull	%eax, %ecx
	movl	-64(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-36(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -44(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB327_48
# %bb.34:                               # %land.lhs.true
                                        #   in Loop: Header=BB327_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB327_48
# %bb.35:                               # %if.then369
                                        #   in Loop: Header=BB327_32 Depth=2
	movl	-44(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	movl	%ecx, -28(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB327_37
# %bb.36:                               # %cond.true
                                        #   in Loop: Header=BB327_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB327_38
.LBB327_37:                             # %cond.false
                                        #   in Loop: Header=BB327_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB327_38
.LBB327_38:                             # %cond.end
                                        #   in Loop: Header=BB327_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB327_40
# %bb.39:                               # %cond.true407
                                        #   in Loop: Header=BB327_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB327_41
.LBB327_40:                             # %cond.false415
                                        #   in Loop: Header=BB327_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB327_41
.LBB327_41:                             # %cond.end416
                                        #   in Loop: Header=BB327_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB327_43
# %bb.42:                               # %cond.true429
                                        #   in Loop: Header=BB327_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$1608, %rax             # imm = 0x648
	movl	-28(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB327_44
.LBB327_43:                             # %cond.false436
                                        #   in Loop: Header=BB327_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB327_44
.LBB327_44:                             # %cond.end437
                                        #   in Loop: Header=BB327_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB327_46
# %bb.45:                               # %cond.true448
                                        #   in Loop: Header=BB327_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$1608, %rax             # imm = 0x648
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB327_47
.LBB327_46:                             # %cond.false456
                                        #   in Loop: Header=BB327_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB327_47
.LBB327_47:                             # %cond.end457
                                        #   in Loop: Header=BB327_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB327_55
.LBB327_48:                             # %if.else466
                                        #   in Loop: Header=BB327_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB327_50
# %bb.49:                               # %cond.true485
                                        #   in Loop: Header=BB327_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB327_51
.LBB327_50:                             # %cond.false491
                                        #   in Loop: Header=BB327_32 Depth=2
	movq	$-1, %rax
	jmp	.LBB327_51
.LBB327_51:                             # %cond.end492
                                        #   in Loop: Header=BB327_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB327_53
# %bb.52:                               # %cond.true503
                                        #   in Loop: Header=BB327_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB327_54
.LBB327_53:                             # %cond.false509
                                        #   in Loop: Header=BB327_32 Depth=2
	movq	$-1, %rax
	jmp	.LBB327_54
.LBB327_54:                             # %cond.end510
                                        #   in Loop: Header=BB327_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB327_55:                             # %if.end519
                                        #   in Loop: Header=BB327_32 Depth=2
	jmp	.LBB327_56
.LBB327_56:                             # %for.inc520
                                        #   in Loop: Header=BB327_32 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB327_32
.LBB327_57:                             # %for.end522
                                        #   in Loop: Header=BB327_30 Depth=1
	jmp	.LBB327_58
.LBB327_58:                             # %for.inc523
                                        #   in Loop: Header=BB327_30 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB327_30
.LBB327_59:                             # %for.end525
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	je	.LBB327_61
# %bb.60:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB327_73
.LBB327_61:                             # %if.then530
	movl	$0, -4(%rbp)
.LBB327_62:                             # %for.cond531
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB327_64 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB327_72
# %bb.63:                               # %for.body537
                                        #   in Loop: Header=BB327_62 Depth=1
	movl	$0, -8(%rbp)
.LBB327_64:                             # %for.cond538
                                        #   Parent Loop BB327_62 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB327_70
# %bb.65:                               # %for.body544
                                        #   in Loop: Header=BB327_64 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -72(%rbp)
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	imull	%eax, %ecx
	movl	-72(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB327_68
# %bb.66:                               # %land.lhs.true563
                                        #   in Loop: Header=BB327_64 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-56(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB327_68
# %bb.67:                               # %if.then570
                                        #   in Loop: Header=BB327_64 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	32(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	40(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB327_68:                             # %if.end908
                                        #   in Loop: Header=BB327_64 Depth=2
	jmp	.LBB327_69
.LBB327_69:                             # %for.inc909
                                        #   in Loop: Header=BB327_64 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB327_64
.LBB327_70:                             # %for.end911
                                        #   in Loop: Header=BB327_62 Depth=1
	jmp	.LBB327_71
.LBB327_71:                             # %for.inc912
                                        #   in Loop: Header=BB327_62 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB327_62
.LBB327_72:                             # %for.end914
	jmp	.LBB327_73
.LBB327_73:                             # %if.end915
	movl	$0, -4(%rbp)
.LBB327_74:                             # %for.cond916
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB327_76 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB327_152
# %bb.75:                               # %for.body922
                                        #   in Loop: Header=BB327_74 Depth=1
	movl	$0, -8(%rbp)
.LBB327_76:                             # %for.cond923
                                        #   Parent Loop BB327_74 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB327_150
# %bb.77:                               # %for.body929
                                        #   in Loop: Header=BB327_76 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -60(%rbp)
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-40(%rbp), %eax
	cltd
	idivl	%esi
	imull	%eax, %ecx
	movl	-60(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-40(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -68(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB327_79
# %bb.78:                               # %lor.lhs.false948
                                        #   in Loop: Header=BB327_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-68(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB327_148
.LBB327_79:                             # %if.then954
                                        #   in Loop: Header=BB327_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB327_147
# %bb.80:                               # %if.then973
                                        #   in Loop: Header=BB327_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB327_82
# %bb.81:                               # %cond.true990
                                        #   in Loop: Header=BB327_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB327_83
.LBB327_82:                             # %cond.false991
                                        #   in Loop: Header=BB327_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB327_83:                             # %cond.end993
                                        #   in Loop: Header=BB327_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB327_85
# %bb.84:                               # %cond.true999
                                        #   in Loop: Header=BB327_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB327_86
.LBB327_85:                             # %cond.false1001
                                        #   in Loop: Header=BB327_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB327_86:                             # %cond.end1003
                                        #   in Loop: Header=BB327_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB327_88
# %bb.87:                               # %cond.true1030
                                        #   in Loop: Header=BB327_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB327_89
.LBB327_88:                             # %cond.false1032
                                        #   in Loop: Header=BB327_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB327_89:                             # %cond.end1034
                                        #   in Loop: Header=BB327_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB327_91
# %bb.90:                               # %cond.true1040
                                        #   in Loop: Header=BB327_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB327_92
.LBB327_91:                             # %cond.false1042
                                        #   in Loop: Header=BB327_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB327_92:                             # %cond.end1044
                                        #   in Loop: Header=BB327_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB327_94
# %bb.93:                               # %cond.true1071
                                        #   in Loop: Header=BB327_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB327_95
.LBB327_94:                             # %cond.false1073
                                        #   in Loop: Header=BB327_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB327_95:                             # %cond.end1075
                                        #   in Loop: Header=BB327_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB327_97
# %bb.96:                               # %cond.true1081
                                        #   in Loop: Header=BB327_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB327_98
.LBB327_97:                             # %cond.false1083
                                        #   in Loop: Header=BB327_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB327_98:                             # %cond.end1085
                                        #   in Loop: Header=BB327_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB327_100
# %bb.99:                               # %cond.true1112
                                        #   in Loop: Header=BB327_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB327_101
.LBB327_100:                            # %cond.false1114
                                        #   in Loop: Header=BB327_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB327_101:                            # %cond.end1116
                                        #   in Loop: Header=BB327_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB327_103
# %bb.102:                              # %cond.true1122
                                        #   in Loop: Header=BB327_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB327_104
.LBB327_103:                            # %cond.false1124
                                        #   in Loop: Header=BB327_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB327_104:                            # %cond.end1126
                                        #   in Loop: Header=BB327_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB327_106
# %bb.105:                              # %cond.true1153
                                        #   in Loop: Header=BB327_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB327_107
.LBB327_106:                            # %cond.false1155
                                        #   in Loop: Header=BB327_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB327_107:                            # %cond.end1157
                                        #   in Loop: Header=BB327_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB327_109
# %bb.108:                              # %cond.true1163
                                        #   in Loop: Header=BB327_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB327_110
.LBB327_109:                            # %cond.false1165
                                        #   in Loop: Header=BB327_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB327_110:                            # %cond.end1167
                                        #   in Loop: Header=BB327_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB327_112
# %bb.111:                              # %if.then1175
                                        #   in Loop: Header=BB327_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	jmp	.LBB327_125
.LBB327_112:                            # %if.else1190
                                        #   in Loop: Header=BB327_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB327_114
# %bb.113:                              # %cond.true1196
                                        #   in Loop: Header=BB327_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB327_115
.LBB327_114:                            # %cond.false1198
                                        #   in Loop: Header=BB327_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB327_115:                            # %cond.end1200
                                        #   in Loop: Header=BB327_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB327_117
# %bb.116:                              # %cond.true1206
                                        #   in Loop: Header=BB327_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB327_118
.LBB327_117:                            # %cond.false1208
                                        #   in Loop: Header=BB327_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB327_118:                            # %cond.end1210
                                        #   in Loop: Header=BB327_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cwtl
	movl	%eax, -20(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB327_120
# %bb.119:                              # %cond.true1232
                                        #   in Loop: Header=BB327_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	3192(%rax,%rcx,8), %rax
	jmp	.LBB327_121
.LBB327_120:                            # %cond.false1237
                                        #   in Loop: Header=BB327_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB327_121
.LBB327_121:                            # %cond.end1238
                                        #   in Loop: Header=BB327_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB327_123
# %bb.122:                              # %cond.true1249
                                        #   in Loop: Header=BB327_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	4776(%rax,%rcx,8), %rax
	jmp	.LBB327_124
.LBB327_123:                            # %cond.false1254
                                        #   in Loop: Header=BB327_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB327_124
.LBB327_124:                            # %cond.end1255
                                        #   in Loop: Header=BB327_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB327_125:                            # %if.end1264
                                        #   in Loop: Header=BB327_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB327_127
# %bb.126:                              # %cond.true1270
                                        #   in Loop: Header=BB327_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB327_128
.LBB327_127:                            # %cond.false1272
                                        #   in Loop: Header=BB327_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB327_128:                            # %cond.end1274
                                        #   in Loop: Header=BB327_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB327_130
# %bb.129:                              # %cond.true1280
                                        #   in Loop: Header=BB327_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB327_131
.LBB327_130:                            # %cond.false1282
                                        #   in Loop: Header=BB327_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB327_131:                            # %cond.end1284
                                        #   in Loop: Header=BB327_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB327_133
# %bb.132:                              # %if.then1292
                                        #   in Loop: Header=BB327_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	jmp	.LBB327_146
.LBB327_133:                            # %if.else1307
                                        #   in Loop: Header=BB327_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB327_135
# %bb.134:                              # %cond.true1313
                                        #   in Loop: Header=BB327_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB327_136
.LBB327_135:                            # %cond.false1315
                                        #   in Loop: Header=BB327_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB327_136:                            # %cond.end1317
                                        #   in Loop: Header=BB327_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB327_138
# %bb.137:                              # %cond.true1323
                                        #   in Loop: Header=BB327_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB327_139
.LBB327_138:                            # %cond.false1325
                                        #   in Loop: Header=BB327_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB327_139:                            # %cond.end1327
                                        #   in Loop: Header=BB327_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cwtl
	movl	%eax, -24(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB327_141
# %bb.140:                              # %cond.true1349
                                        #   in Loop: Header=BB327_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	3456(%rax,%rcx,8), %rax
	jmp	.LBB327_142
.LBB327_141:                            # %cond.false1355
                                        #   in Loop: Header=BB327_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB327_142
.LBB327_142:                            # %cond.end1356
                                        #   in Loop: Header=BB327_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB327_144
# %bb.143:                              # %cond.true1367
                                        #   in Loop: Header=BB327_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	5040(%rax,%rcx,8), %rax
	jmp	.LBB327_145
.LBB327_144:                            # %cond.false1373
                                        #   in Loop: Header=BB327_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB327_145
.LBB327_145:                            # %cond.end1374
                                        #   in Loop: Header=BB327_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB327_146:                            # %if.end1383
                                        #   in Loop: Header=BB327_76 Depth=2
	jmp	.LBB327_147
.LBB327_147:                            # %if.end1384
                                        #   in Loop: Header=BB327_76 Depth=2
	jmp	.LBB327_148
.LBB327_148:                            # %if.end1385
                                        #   in Loop: Header=BB327_76 Depth=2
	jmp	.LBB327_149
.LBB327_149:                            # %for.inc1386
                                        #   in Loop: Header=BB327_76 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB327_76
.LBB327_150:                            # %for.end1388
                                        #   in Loop: Header=BB327_74 Depth=1
	jmp	.LBB327_151
.LBB327_151:                            # %for.inc1389
                                        #   in Loop: Header=BB327_74 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB327_74
.LBB327_152:                            # %for.end1391
	movl	$0, -8(%rbp)
.LBB327_153:                            # %for.cond1392
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB327_155 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB327_160
# %bb.154:                              # %for.body1398
                                        #   in Loop: Header=BB327_153 Depth=1
	movl	$0, -4(%rbp)
.LBB327_155:                            # %for.cond1399
                                        #   Parent Loop BB327_153 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB327_158
# %bb.156:                              # %for.body1405
                                        #   in Loop: Header=BB327_155 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
# %bb.157:                              # %for.inc1412
                                        #   in Loop: Header=BB327_155 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB327_155
.LBB327_158:                            # %for.end1414
                                        #   in Loop: Header=BB327_153 Depth=1
	jmp	.LBB327_159
.LBB327_159:                            # %for.inc1415
                                        #   in Loop: Header=BB327_153 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB327_153
.LBB327_160:                            # %for.end1417
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB327_162
# %bb.161:                              # %lor.lhs.false1420
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB327_174
.LBB327_162:                            # %if.then1423
	movl	$0, -8(%rbp)
.LBB327_163:                            # %for.cond1424
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB327_165 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB327_173
# %bb.164:                              # %for.body1430
                                        #   in Loop: Header=BB327_163 Depth=1
	movl	$0, -4(%rbp)
.LBB327_165:                            # %for.cond1431
                                        #   Parent Loop BB327_163 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB327_171
# %bb.166:                              # %for.body1437
                                        #   in Loop: Header=BB327_165 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -80(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-48(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	imull	%eax, %ecx
	movl	-80(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-48(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -52(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB327_168
# %bb.167:                              # %cond.true1456
                                        #   in Loop: Header=BB327_165 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-52(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	jmp	.LBB327_169
.LBB327_168:                            # %cond.false1462
                                        #   in Loop: Header=BB327_165 Depth=2
	xorl	%eax, %eax
	jmp	.LBB327_169
.LBB327_169:                            # %cond.end1463
                                        #   in Loop: Header=BB327_165 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6520(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.170:                              # %for.inc1472
                                        #   in Loop: Header=BB327_165 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB327_165
.LBB327_171:                            # %for.end1474
                                        #   in Loop: Header=BB327_163 Depth=1
	jmp	.LBB327_172
.LBB327_172:                            # %for.inc1475
                                        #   in Loop: Header=BB327_163 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB327_163
.LBB327_173:                            # %for.end1477
	jmp	.LBB327_174
.LBB327_174:                            # %if.end1478
	cmpl	$997792342, -76(%rbp)   # imm = 0x3B791A56
	jne	.LBB327_176
.LBB327_175:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB327_176:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB327_175
.Lfunc_end327:
	.size	dpb_split_field.264, .Lfunc_end327-dpb_split_field.264
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function reorder_short_term.265
	.type	reorder_short_term.265,@function
reorder_short_term.265:                 # @reorder_short_term.265
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1656913509, -44(%rbp)  # imm = 0x62C27E65
	movq	%rdi, -16(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movq	%rcx, -40(%rbp)
	movl	-28(%rbp), %edi
	callq	get_short_term_pic
	movq	%rax, -56(%rbp)
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB328_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-40(%rbp), %rcx
	cmpl	(%rcx), %eax
	jle	.LBB328_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB328_1 Depth=1
	movq	-16(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB328_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB328_1
.LBB328_4:                              # %for.end
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movl	(%rdx), %esi
	movl	%esi, %edi
	addl	$1, %edi
	movl	%edi, (%rdx)
	movslq	%esi, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB328_5:                              # %for.cond5
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jg	.LBB328_13
# %bb.6:                                # %for.body8
                                        #   in Loop: Header=BB328_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	je	.LBB328_11
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB328_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB328_9
# %bb.8:                                # %lor.lhs.false
                                        #   in Loop: Header=BB328_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6364(%rax), %eax
	cmpl	-28(%rbp), %eax
	je	.LBB328_10
.LBB328_9:                              # %if.then17
                                        #   in Loop: Header=BB328_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movl	-20(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -20(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB328_10:                             # %if.end
                                        #   in Loop: Header=BB328_5 Depth=1
	jmp	.LBB328_11
.LBB328_11:                             # %if.end23
                                        #   in Loop: Header=BB328_5 Depth=1
	jmp	.LBB328_12
.LBB328_12:                             # %for.inc24
                                        #   in Loop: Header=BB328_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB328_5
.LBB328_13:                             # %for.end26
	cmpl	$1656913509, -44(%rbp)  # imm = 0x62C27E65
	jne	.LBB328_15
.LBB328_14:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB328_15:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB328_14
.Lfunc_end328:
	.size	reorder_short_term.265, .Lfunc_end328-reorder_short_term.265
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function reorder_short_term.266
	.type	reorder_short_term.266,@function
reorder_short_term.266:                 # @reorder_short_term.266
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1086495293, -44(%rbp)  # imm = 0x40C29A3D
	movq	%rdi, -16(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movq	%rcx, -40(%rbp)
	movl	-28(%rbp), %edi
	callq	get_short_term_pic
	movq	%rax, -56(%rbp)
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB329_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-40(%rbp), %rcx
	cmpl	(%rcx), %eax
	jle	.LBB329_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB329_1 Depth=1
	movq	-16(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB329_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB329_1
.LBB329_4:                              # %for.end
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movl	(%rdx), %esi
	movl	%esi, %edi
	addl	$1, %edi
	movl	%edi, (%rdx)
	movslq	%esi, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB329_5:                              # %for.cond5
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jg	.LBB329_13
# %bb.6:                                # %for.body8
                                        #   in Loop: Header=BB329_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	je	.LBB329_11
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB329_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB329_9
# %bb.8:                                # %lor.lhs.false
                                        #   in Loop: Header=BB329_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6364(%rax), %eax
	cmpl	-28(%rbp), %eax
	je	.LBB329_10
.LBB329_9:                              # %if.then17
                                        #   in Loop: Header=BB329_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movl	-20(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -20(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB329_10:                             # %if.end
                                        #   in Loop: Header=BB329_5 Depth=1
	jmp	.LBB329_11
.LBB329_11:                             # %if.end23
                                        #   in Loop: Header=BB329_5 Depth=1
	jmp	.LBB329_12
.LBB329_12:                             # %for.inc24
                                        #   in Loop: Header=BB329_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB329_5
.LBB329_13:                             # %for.end26
	cmpl	$1086495293, -44(%rbp)  # imm = 0x40C29A3D
	jne	.LBB329_15
.LBB329_14:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB329_15:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB329_14
.Lfunc_end329:
	.size	reorder_short_term.266, .Lfunc_end329-reorder_short_term.266
	.cfi_endproc
                                        # -- End function
	.type	active_sps,@object      # @active_sps
	.comm	active_sps,8,8
	.type	.L.str,@object          # @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.asciz	"undefined level"
	.size	.L.str, 16

	.type	dpb,@object             # @dpb
	.comm	dpb,64,8
	.type	.L.str.1,@object        # @.str.1
.L.str.1:
	.asciz	"DPB size at specified level is smaller than the specified number of reference frames. This is not allowed.\n"
	.size	.L.str.1, 108

	.type	.L.str.2,@object        # @.str.2
.L.str.2:
	.asciz	"init_dpb: dpb->fs"
	.size	.L.str.2, 18

	.type	.L.str.3,@object        # @.str.3
.L.str.3:
	.asciz	"init_dpb: dpb->fs_ref"
	.size	.L.str.3, 22

	.type	.L.str.4,@object        # @.str.4
.L.str.4:
	.asciz	"init_dpb: dpb->fs_ltref"
	.size	.L.str.4, 24

	.type	listX,@object           # @listX
	.comm	listX,48,16
	.type	.L.str.5,@object        # @.str.5
.L.str.5:
	.asciz	"init_dpb: listX[i]"
	.size	.L.str.5, 19

	.type	listXsize,@object       # @listXsize
	.comm	listXsize,24,16
	.type	.L.str.6,@object        # @.str.6
.L.str.6:
	.asciz	"alloc_frame_store: f"
	.size	.L.str.6, 21

	.type	.L.str.7,@object        # @.str.7
.L.str.7:
	.asciz	"alloc_storable_picture: s"
	.size	.L.str.7, 26

	.type	.L.str.8,@object        # @.str.8
.L.str.8:
	.asciz	"alloc_storable_picture: s->mb_field"
	.size	.L.str.8, 36

	.type	log2_max_frame_num_minus4,@object # @log2_max_frame_num_minus4
	.comm	log2_max_frame_num_minus4,4,4
	.type	.L.str.9,@object        # @.str.9
.L.str.9:
	.asciz	"init_lists: fs_list0"
	.size	.L.str.9, 21

	.type	.L.str.10,@object       # @.str.10
.L.str.10:
	.asciz	"init_lists: fs_listlt"
	.size	.L.str.10, 22

	.type	.L.str.11,@object       # @.str.11
.L.str.11:
	.asciz	"init_lists: fs_list1"
	.size	.L.str.11, 21

	.type	.L.str.12,@object       # @.str.12
.L.str.12:
	.asciz	"Invalid remapping_of_pic_nums_idc command"
	.size	.L.str.12, 42

	.type	p_dec,@object           # @p_dec
	.comm	p_dec,4,4
	.type	.L.str.13,@object       # @.str.13
.L.str.13:
	.asciz	"duplicate frame_num im short-term reference picture buffer"
	.size	.L.str.13, 59

	.type	.L.str.14,@object       # @.str.14
.L.str.14:
	.asciz	"replace_top_pic_with_frame: error storing reference frame (top field not found)"
	.size	.L.str.14, 80

	.type	.L.str.15,@object       # @.str.15
.L.str.15:
	.asciz	"alloc_ref_pic_list_reordering_buffer: remapping_of_pic_nums_idc_l0"
	.size	.L.str.15, 67

	.type	.L.str.16,@object       # @.str.16
.L.str.16:
	.asciz	"alloc_ref_pic_list_reordering_buffer: abs_diff_pic_num_minus1_l0"
	.size	.L.str.16, 65

	.type	.L.str.17,@object       # @.str.17
.L.str.17:
	.asciz	"alloc_ref_pic_list_reordering_buffer: long_term_pic_idx_l0"
	.size	.L.str.17, 59

	.type	.L.str.18,@object       # @.str.18
.L.str.18:
	.asciz	"alloc_ref_pic_list_reordering_buffer: remapping_of_pic_nums_idc_l1"
	.size	.L.str.18, 67

	.type	.L.str.19,@object       # @.str.19
.L.str.19:
	.asciz	"alloc_ref_pic_list_reordering_buffer: abs_diff_pic_num_minus1_l1"
	.size	.L.str.19, 65

	.type	.L.str.20,@object       # @.str.20
.L.str.20:
	.asciz	"alloc_ref_pic_list_reordering_buffer: long_term_pic_idx_l1"
	.size	.L.str.20, 59

	.type	.L.str.21,@object       # @.str.21
.L.str.21:
	.asciz	"alloc_colocated: s"
	.size	.L.str.21, 19

	.type	top_pic,@object         # @top_pic
	.comm	top_pic,8,8
	.type	bottom_pic,@object      # @bottom_pic
	.comm	bottom_pic,8,8
	.type	frame_pic,@object       # @frame_pic
	.comm	frame_pic,8,8
	.type	frame_pic2,@object      # @frame_pic2
	.comm	frame_pic2,8,8
	.type	frame_pic3,@object      # @frame_pic3
	.comm	frame_pic3,8,8
	.type	imgY_org,@object        # @imgY_org
	.comm	imgY_org,8,8
	.type	imgUV_org,@object       # @imgUV_org
	.comm	imgUV_org,8,8
	.type	img4Y_tmp,@object       # @img4Y_tmp
	.comm	img4Y_tmp,8,8
	.type	log2_max_pic_order_cnt_lsb_minus4,@object # @log2_max_pic_order_cnt_lsb_minus4
	.comm	log2_max_pic_order_cnt_lsb_minus4,4,4
	.type	me_tot_time,@object     # @me_tot_time
	.comm	me_tot_time,4,4
	.type	me_time,@object         # @me_time
	.comm	me_time,4,4
	.type	active_pps,@object      # @active_pps
	.comm	active_pps,8,8
	.type	mb_adaptive,@object     # @mb_adaptive
	.comm	mb_adaptive,4,4
	.type	MBPairIsField,@object   # @MBPairIsField
	.comm	MBPairIsField,4,4
	.type	wp_weight,@object       # @wp_weight
	.comm	wp_weight,8,8
	.type	wp_offset,@object       # @wp_offset
	.comm	wp_offset,8,8
	.type	wbp_weight,@object      # @wbp_weight
	.comm	wbp_weight,8,8
	.type	luma_log_weight_denom,@object # @luma_log_weight_denom
	.comm	luma_log_weight_denom,4,4
	.type	chroma_log_weight_denom,@object # @chroma_log_weight_denom
	.comm	chroma_log_weight_denom,4,4
	.type	wp_luma_round,@object   # @wp_luma_round
	.comm	wp_luma_round,4,4
	.type	wp_chroma_round,@object # @wp_chroma_round
	.comm	wp_chroma_round,4,4
	.type	imgY_org_top,@object    # @imgY_org_top
	.comm	imgY_org_top,8,8
	.type	imgY_org_bot,@object    # @imgY_org_bot
	.comm	imgY_org_bot,8,8
	.type	imgUV_org_top,@object   # @imgUV_org_top
	.comm	imgUV_org_top,8,8
	.type	imgUV_org_bot,@object   # @imgUV_org_bot
	.comm	imgUV_org_bot,8,8
	.type	imgY_org_frm,@object    # @imgY_org_frm
	.comm	imgY_org_frm,8,8
	.type	imgUV_org_frm,@object   # @imgUV_org_frm
	.comm	imgUV_org_frm,8,8
	.type	imgY_com,@object        # @imgY_com
	.comm	imgY_com,8,8
	.type	imgUV_com,@object       # @imgUV_com
	.comm	imgUV_com,8,8
	.type	direct_ref_idx,@object  # @direct_ref_idx
	.comm	direct_ref_idx,8,8
	.type	direct_pdir,@object     # @direct_pdir
	.comm	direct_pdir,8,8
	.type	pixel_map,@object       # @pixel_map
	.comm	pixel_map,8,8
	.type	refresh_map,@object     # @refresh_map
	.comm	refresh_map,8,8
	.type	intras,@object          # @intras
	.comm	intras,4,4
	.type	Iframe_ctr,@object      # @Iframe_ctr
	.comm	Iframe_ctr,4,4
	.type	Pframe_ctr,@object      # @Pframe_ctr
	.comm	Pframe_ctr,4,4
	.type	Bframe_ctr,@object      # @Bframe_ctr
	.comm	Bframe_ctr,4,4
	.type	frame_no,@object        # @frame_no
	.comm	frame_no,4,4
	.type	nextP_tr_fld,@object    # @nextP_tr_fld
	.comm	nextP_tr_fld,4,4
	.type	nextP_tr_frm,@object    # @nextP_tr_frm
	.comm	nextP_tr_frm,4,4
	.type	tot_time,@object        # @tot_time
	.comm	tot_time,4,4
	.type	errortext,@object       # @errortext
	.comm	errortext,300,16
	.type	resTrans_R,@object      # @resTrans_R
	.comm	resTrans_R,1024,16
	.type	resTrans_G,@object      # @resTrans_G
	.comm	resTrans_G,1024,16
	.type	resTrans_B,@object      # @resTrans_B
	.comm	resTrans_B,1024,16
	.type	rec_resR,@object        # @rec_resR
	.comm	rec_resR,1024,16
	.type	rec_resG,@object        # @rec_resG
	.comm	rec_resG,1024,16
	.type	rec_resB,@object        # @rec_resB
	.comm	rec_resB,1024,16
	.type	mprRGB,@object          # @mprRGB
	.comm	mprRGB,3072,16
	.type	dc_level,@object        # @dc_level
	.comm	dc_level,128,16
	.type	dc_level_temp,@object   # @dc_level_temp
	.comm	dc_level_temp,128,16
	.type	cbp_chroma_block,@object # @cbp_chroma_block
	.comm	cbp_chroma_block,128,16
	.type	cbp_chroma_block_temp,@object # @cbp_chroma_block_temp
	.comm	cbp_chroma_block_temp,128,16
	.type	b8_ipredmode8x8,@object # @b8_ipredmode8x8
	.comm	b8_ipredmode8x8,64,16
	.type	b8_intra_pred_modes8x8,@object # @b8_intra_pred_modes8x8
	.comm	b8_intra_pred_modes8x8,64,16
	.type	gop_structure,@object   # @gop_structure
	.comm	gop_structure,8,8
	.type	rdopt,@object           # @rdopt
	.comm	rdopt,8,8
	.type	rddata_top_frame_mb,@object # @rddata_top_frame_mb
	.comm	rddata_top_frame_mb,3360,8
	.type	rddata_bot_frame_mb,@object # @rddata_bot_frame_mb
	.comm	rddata_bot_frame_mb,3360,8
	.type	rddata_top_field_mb,@object # @rddata_top_field_mb
	.comm	rddata_top_field_mb,3360,8
	.type	rddata_bot_field_mb,@object # @rddata_bot_field_mb
	.comm	rddata_bot_field_mb,3360,8
	.type	p_stat,@object          # @p_stat
	.comm	p_stat,8,8
	.type	p_log,@object           # @p_log
	.comm	p_log,8,8
	.type	p_trace,@object         # @p_trace
	.comm	p_trace,8,8
	.type	p_in,@object            # @p_in
	.comm	p_in,4,4
	.type	glob_remapping_of_pic_nums_idc_l0,@object # @glob_remapping_of_pic_nums_idc_l0
	.comm	glob_remapping_of_pic_nums_idc_l0,80,16
	.type	glob_abs_diff_pic_num_minus1_l0,@object # @glob_abs_diff_pic_num_minus1_l0
	.comm	glob_abs_diff_pic_num_minus1_l0,80,16
	.type	glob_long_term_pic_idx_l0,@object # @glob_long_term_pic_idx_l0
	.comm	glob_long_term_pic_idx_l0,80,16
	.type	glob_remapping_of_pic_nums_idc_l1,@object # @glob_remapping_of_pic_nums_idc_l1
	.comm	glob_remapping_of_pic_nums_idc_l1,80,16
	.type	glob_abs_diff_pic_num_minus1_l1,@object # @glob_abs_diff_pic_num_minus1_l1
	.comm	glob_abs_diff_pic_num_minus1_l1,80,16
	.type	glob_long_term_pic_idx_l1,@object # @glob_long_term_pic_idx_l1
	.comm	glob_long_term_pic_idx_l1,80,16
	.type	Bytes_After_Header,@object # @Bytes_After_Header
	.comm	Bytes_After_Header,4,4
	.type	rpc_bytes_to_go,@object # @rpc_bytes_to_go
	.comm	rpc_bytes_to_go,4,4
	.type	rpc_bits_to_go,@object  # @rpc_bits_to_go
	.comm	rpc_bits_to_go,4,4
	.type	Co_located,@object      # @Co_located
	.bss
	.globl	Co_located
	.p2align	3
Co_located:
	.quad	0
	.size	Co_located, 8

	.type	.L.str.22,@object       # @.str.22
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.22:
	.asciz	"memory_management_control_operation = 0 not last operation in buffer"
	.size	.L.str.22, 69

	.type	.L.str.23,@object       # @.str.23
.L.str.23:
	.asciz	"invalid memory_management_control_operation in buffer"
	.size	.L.str.23, 54

	.type	.L.str.24,@object       # @.str.24
.L.str.24:
	.asciz	"field for long term marking not found"
	.size	.L.str.24, 38

	.type	.L.str.25,@object       # @.str.25
.L.str.25:
	.asciz	"Warning: reference frame for long term marking not found\n"
	.size	.L.str.25, 58

	.type	.L.str.26,@object       # @.str.26
.L.str.26:
	.asciz	"Warning: assigning long_term_frame_idx different from other field\n"
	.size	.L.str.26, 67

	.type	.L.str.27,@object       # @.str.27
.L.str.27:
	.asciz	"Warning: reference field for long term marking not found\n"
	.size	.L.str.27, 58

	.type	.L.str.28,@object       # @.str.28
.L.str.28:
	.asciz	"Cannot determine smallest POC, DPB empty."
	.size	.L.str.28, 42

	.type	.L.str.29,@object       # @.str.29
.L.str.29:
	.asciz	"invalid frame store type"
	.size	.L.str.29, 25

	.type	.L.str.30,@object       # @.str.30
.L.str.30:
	.asciz	"Cannot output frame, DPB empty."
	.size	.L.str.30, 32

	.type	.L.str.31,@object       # @.str.31
.L.str.31:
	.asciz	"no frames for output available"
	.size	.L.str.31, 31

	.type	.L.str.32,@object       # @.str.32
.L.str.32:
	.asciz	"output POC must be in ascending order"
	.size	.L.str.32, 38


	.ident	"clang version 9.0.1 (git@github.com:llvm/llvm-project.git 9b2d207cf4b43cfc1a2b6940b3c06e50a1bd127f)"
	.section	".note.GNU-stack","",@progbits
