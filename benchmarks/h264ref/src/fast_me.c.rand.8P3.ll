; ModuleID = 'fast_me.c.rand.8P3.bc'
source_filename = "fast_me.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.InputParameters = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [8 x [2 x i32]], [8 x [2 x i32]], i32, i32, i32, i32, [200 x i8], [200 x i8], [200 x i8], [200 x i8], [200 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [1024 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [200 x i8], [200 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [200 x i8], i32, i32, i32*, i32*, i8*, i32*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [8 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [6 x double], [200 x i8], i32 }
%struct.ImageParameters = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32**, i32**, i32, i32***, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [9 x [16 x [16 x i16]]], [5 x [16 x [16 x i16]]], [9 x [8 x [8 x i16]]], [2 x [4 x [16 x [16 x i16]]]], [16 x [16 x i16]], [16 x [16 x i32]], i32****, i32***, %struct.Picture*, %struct.Slice*, %struct.macroblock*, [1200 x %struct.syntaxelement], i32*, i32*, i32, i32, i32, i32, [4 x [4 x i32]], i32, i32, i32, i32, i32, double, i32, i32, i32, i32, i16******, i16******, i16******, i16******, [15 x i16], i32, i32, i32, i32, i32, i32, i32, i32, [6 x [15 x i32]], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [1 x i32], i32, i32, [2 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.DecRefPicMarking_s*, i32, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, double*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [2 x i32], i32, i32, i32 }
%struct.Picture = type { i32, i32, [100 x %struct.Slice*], i32, float, float, float }
%struct.Slice = type { i32, i32, i32, i32, i32, i32, %struct.datapartition*, %struct.MotionInfoContexts*, %struct.TextureInfoContexts*, %struct.RMPNIbuffer_s*, i32, i32*, i32*, i32*, i32, i32*, i32*, i32*, i32 (i32)*, [3 x [2 x i32]] }
%struct.datapartition = type { %struct.Bitstream*, %struct.EncodingEnvironment, i32 (%struct.syntaxelement*, %struct.datapartition*)* }
%struct.Bitstream = type { i32, i32, i8, i32, i32, i8, i8, i32, i32, i8*, i32 }
%struct.EncodingEnvironment = type { i32, i32, i32, i32, i32, i8*, i32*, i32, i32, i32, i32, i32, i8*, i32*, i32, i32, i32, i32, i32, i32 }
%struct.syntaxelement = type { i32, i32, i32, i32, i32, i32, i32, i32, void (i32, i32, i32*, i32*)*, void (%struct.syntaxelement*, %struct.EncodingEnvironment*)* }
%struct.MotionInfoContexts = type { [3 x [11 x %struct.BiContextType]], [2 x [9 x %struct.BiContextType]], [2 x [10 x %struct.BiContextType]], [2 x [6 x %struct.BiContextType]], [4 x %struct.BiContextType], [4 x %struct.BiContextType], [3 x %struct.BiContextType] }
%struct.BiContextType = type { i16, i8, i64 }
%struct.TextureInfoContexts = type { [2 x %struct.BiContextType], [4 x %struct.BiContextType], [3 x [4 x %struct.BiContextType]], [10 x [4 x %struct.BiContextType]], [10 x [15 x %struct.BiContextType]], [10 x [15 x %struct.BiContextType]], [10 x [5 x %struct.BiContextType]], [10 x [5 x %struct.BiContextType]], [10 x [15 x %struct.BiContextType]], [10 x [15 x %struct.BiContextType]] }
%struct.RMPNIbuffer_s = type { i32, i32, %struct.RMPNIbuffer_s* }
%struct.macroblock = type { i32, i32, i32, i32, i32, [8 x i32], %struct.macroblock*, %struct.macroblock*, i32, [2 x [4 x [4 x [2 x i32]]]], [16 x i32], [16 x i32], i32, i64, [4 x i32], [4 x i32], i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.DecRefPicMarking_s = type { i32, i32, i32, i32, i32, %struct.DecRefPicMarking_s* }
%struct.storable_picture = type { i32, i32, i32, i32, i32, i32, [6 x [33 x i64]], [6 x [33 x i64]], [6 x [33 x i64]], [6 x [33 x i64]], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16**, i16*, i16*, i16**, i16**, i16***, i8*, i16***, i64***, i64***, i16****, i8**, i8**, %struct.storable_picture*, %struct.storable_picture*, %struct.storable_picture*, i32, i32, i32, i32, i32, i32, i32 }
%struct.pic_parameter_set_rbsp_t = type { i32, i32, i32, i32, i32, i32, [8 x i32], i32, i32, i32, [8 x i32], [8 x i32], [8 x i32], i32, i32, i32, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.seq_parameter_set_rbsp_t = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [8 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, [256 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.vui_seq_parameters_t }
%struct.vui_seq_parameters_t = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.hrd_parameters_t, i32, %struct.hrd_parameters_t, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.hrd_parameters_t = type { i32, i32, i32, [32 x i32], [32 x i32], [32 x i32], i32, i32, i32, i32 }
%struct.GOP_DATA = type { i32, i32, i32, i32, i32, i32 }
%struct.RD_DATA = type { double, [16 x [16 x i32]], [16 x [16 x i32]], [16 x [16 x i32]], i32****, i32***, i32, i32, [4 x i32], [4 x i32], i32**, [16 x i32], i32, i64, i32, i16******, i16******, i16******, i16******, [2 x [4 x [4 x i16]]], i32, i32, i32, i32, i32, i32, i32 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }

@AlphaSec = common dso_local global [8 x float] zeroinitializer, align 16
@AlphaThird = common dso_local global [8 x float] zeroinitializer, align 16
@input = external dso_local global %struct.InputParameters*, align 8
@img = external dso_local global %struct.ImageParameters*, align 8
@quant_coef = internal constant [6 x [4 x [4 x i32]]] [[4 x [4 x i32]] [[4 x i32] [i32 13107, i32 8066, i32 13107, i32 8066], [4 x i32] [i32 8066, i32 5243, i32 8066, i32 5243], [4 x i32] [i32 13107, i32 8066, i32 13107, i32 8066], [4 x i32] [i32 8066, i32 5243, i32 8066, i32 5243]], [4 x [4 x i32]] [[4 x i32] [i32 11916, i32 7490, i32 11916, i32 7490], [4 x i32] [i32 7490, i32 4660, i32 7490, i32 4660], [4 x i32] [i32 11916, i32 7490, i32 11916, i32 7490], [4 x i32] [i32 7490, i32 4660, i32 7490, i32 4660]], [4 x [4 x i32]] [[4 x i32] [i32 10082, i32 6554, i32 10082, i32 6554], [4 x i32] [i32 6554, i32 4194, i32 6554, i32 4194], [4 x i32] [i32 10082, i32 6554, i32 10082, i32 6554], [4 x i32] [i32 6554, i32 4194, i32 6554, i32 4194]], [4 x [4 x i32]] [[4 x i32] [i32 9362, i32 5825, i32 9362, i32 5825], [4 x i32] [i32 5825, i32 3647, i32 5825, i32 3647], [4 x i32] [i32 9362, i32 5825, i32 9362, i32 5825], [4 x i32] [i32 5825, i32 3647, i32 5825, i32 3647]], [4 x [4 x i32]] [[4 x i32] [i32 8192, i32 5243, i32 8192, i32 5243], [4 x i32] [i32 5243, i32 3355, i32 5243, i32 3355], [4 x i32] [i32 8192, i32 5243, i32 8192, i32 5243], [4 x i32] [i32 5243, i32 3355, i32 5243, i32 3355]], [4 x [4 x i32]] [[4 x i32] [i32 7282, i32 4559, i32 7282, i32 4559], [4 x i32] [i32 4559, i32 2893, i32 4559, i32 2893], [4 x i32] [i32 7282, i32 4559, i32 7282, i32 4559], [4 x i32] [i32 4559, i32 2893, i32 4559, i32 2893]]], align 16
@Quantize_step = common dso_local global float 0.000000e+00, align 4
@Bsize = common dso_local global [8 x float] zeroinitializer, align 16
@.str = private unnamed_addr constant [15 x i8] c"get_mem_mv: mv\00", align 1
@flag_intra = common dso_local global i32* null, align 8
@.str.1 = private unnamed_addr constant [24 x i8] c"get_mem_FME: flag_intra\00", align 1
@McostState = common dso_local global i32** null, align 8
@all_mincost = common dso_local global i32***** null, align 8
@all_bwmincost = common dso_local global i32***** null, align 8
@SearchState = common dso_local global i8** null, align 8
@byte_abs = external dso_local global i32*, align 8
@FastIntegerPelBlockMotionSearch.Diamond_x = internal global [4 x i32] [i32 -1, i32 0, i32 1, i32 0], align 16
@FastIntegerPelBlockMotionSearch.Diamond_y = internal global [4 x i32] [i32 0, i32 1, i32 0, i32 -1], align 16
@FastIntegerPelBlockMotionSearch.Hexagon_x = internal global [6 x i32] [i32 2, i32 1, i32 -1, i32 -2, i32 -1, i32 1], align 16
@FastIntegerPelBlockMotionSearch.Hexagon_y = internal global [6 x i32] [i32 0, i32 -2, i32 -2, i32 0, i32 2, i32 2], align 16
@FastIntegerPelBlockMotionSearch.Big_Hexagon_x = internal global [16 x i32] [i32 0, i32 -2, i32 -4, i32 -4, i32 -4, i32 -4, i32 -4, i32 -2, i32 0, i32 2, i32 4, i32 4, i32 4, i32 4, i32 4, i32 2], align 16
@FastIntegerPelBlockMotionSearch.Big_Hexagon_y = internal global [16 x i32] [i32 4, i32 3, i32 2, i32 1, i32 0, i32 -1, i32 -2, i32 -3, i32 -4, i32 -3, i32 -2, i32 -1, i32 0, i32 1, i32 2, i32 3], align 16
@listX = external dso_local global [6 x %struct.storable_picture**], align 16
@pred_SAD_ref = common dso_local global i32 0, align 4
@pred_SAD_space = common dso_local global i32 0, align 4
@pred_SAD_uplayer = common dso_local global i32 0, align 4
@mvbits = external dso_local global i32*, align 8
@pred_MV_uplayer = common dso_local global [2 x i32] zeroinitializer, align 4
@Bframe_ctr = common dso_local global i32 0, align 4
@pred_MV_time = common dso_local global [2 x i32] zeroinitializer, align 4
@pred_MV_ref = common dso_local global [2 x i32] zeroinitializer, align 4
@spiral_search_x = external dso_local global i32*, align 8
@spiral_search_y = external dso_local global i32*, align 8
@PelY_14 = internal global i16 (i16**, i32, i32, i32, i32)* null, align 8
@FastSubPelBlockMotionSearch.Diamond_x = internal global [4 x i32] [i32 -1, i32 0, i32 1, i32 0], align 16
@FastSubPelBlockMotionSearch.Diamond_y = internal global [4 x i32] [i32 0, i32 1, i32 0, i32 -1], align 16
@flag_intra_SAD = common dso_local global i32 0, align 4
@top_pic = common dso_local global %struct.Picture* null, align 8
@bottom_pic = common dso_local global %struct.Picture* null, align 8
@frame_pic = common dso_local global %struct.Picture* null, align 8
@frame_pic2 = common dso_local global %struct.Picture* null, align 8
@frame_pic3 = common dso_local global %struct.Picture* null, align 8
@imgY_org = common dso_local global i16** null, align 8
@imgUV_org = common dso_local global i16*** null, align 8
@img4Y_tmp = common dso_local global i32** null, align 8
@log2_max_frame_num_minus4 = common dso_local global i32 0, align 4
@log2_max_pic_order_cnt_lsb_minus4 = common dso_local global i32 0, align 4
@me_tot_time = common dso_local global i32 0, align 4
@me_time = common dso_local global i32 0, align 4
@active_pps = common dso_local global %struct.pic_parameter_set_rbsp_t* null, align 8
@active_sps = common dso_local global %struct.seq_parameter_set_rbsp_t* null, align 8
@mb_adaptive = common dso_local global i32 0, align 4
@MBPairIsField = common dso_local global i32 0, align 4
@wp_weight = common dso_local global i32*** null, align 8
@wp_offset = common dso_local global i32*** null, align 8
@wbp_weight = common dso_local global i32**** null, align 8
@luma_log_weight_denom = common dso_local global i32 0, align 4
@chroma_log_weight_denom = common dso_local global i32 0, align 4
@wp_luma_round = common dso_local global i32 0, align 4
@wp_chroma_round = common dso_local global i32 0, align 4
@imgY_org_top = common dso_local global i16** null, align 8
@imgY_org_bot = common dso_local global i16** null, align 8
@imgUV_org_top = common dso_local global i16*** null, align 8
@imgUV_org_bot = common dso_local global i16*** null, align 8
@imgY_org_frm = common dso_local global i16** null, align 8
@imgUV_org_frm = common dso_local global i16*** null, align 8
@imgY_com = common dso_local global i16** null, align 8
@imgUV_com = common dso_local global i16*** null, align 8
@direct_ref_idx = common dso_local global i16*** null, align 8
@direct_pdir = common dso_local global i16** null, align 8
@pixel_map = common dso_local global i8** null, align 8
@refresh_map = common dso_local global i8** null, align 8
@intras = common dso_local global i32 0, align 4
@Iframe_ctr = common dso_local global i32 0, align 4
@Pframe_ctr = common dso_local global i32 0, align 4
@frame_no = common dso_local global i32 0, align 4
@nextP_tr_fld = common dso_local global i32 0, align 4
@nextP_tr_frm = common dso_local global i32 0, align 4
@tot_time = common dso_local global i32 0, align 4
@errortext = common dso_local global [300 x i8] zeroinitializer, align 16
@resTrans_R = common dso_local global [16 x [16 x i32]] zeroinitializer, align 16
@resTrans_G = common dso_local global [16 x [16 x i32]] zeroinitializer, align 16
@resTrans_B = common dso_local global [16 x [16 x i32]] zeroinitializer, align 16
@rec_resR = common dso_local global [16 x [16 x i32]] zeroinitializer, align 16
@rec_resG = common dso_local global [16 x [16 x i32]] zeroinitializer, align 16
@rec_resB = common dso_local global [16 x [16 x i32]] zeroinitializer, align 16
@mprRGB = common dso_local global [3 x [16 x [16 x i32]]] zeroinitializer, align 16
@dc_level = common dso_local global [2 x [4 x [4 x i32]]] zeroinitializer, align 16
@dc_level_temp = common dso_local global [2 x [4 x [4 x i32]]] zeroinitializer, align 16
@cbp_chroma_block = common dso_local global [2 x [4 x [4 x i32]]] zeroinitializer, align 16
@cbp_chroma_block_temp = common dso_local global [2 x [4 x [4 x i32]]] zeroinitializer, align 16
@b8_ipredmode8x8 = common dso_local global [4 x [4 x i32]] zeroinitializer, align 16
@b8_intra_pred_modes8x8 = common dso_local global [16 x i32] zeroinitializer, align 16
@gop_structure = common dso_local global %struct.GOP_DATA* null, align 8
@rdopt = common dso_local global %struct.RD_DATA* null, align 8
@rddata_top_frame_mb = common dso_local global %struct.RD_DATA zeroinitializer, align 8
@rddata_bot_frame_mb = common dso_local global %struct.RD_DATA zeroinitializer, align 8
@rddata_top_field_mb = common dso_local global %struct.RD_DATA zeroinitializer, align 8
@rddata_bot_field_mb = common dso_local global %struct.RD_DATA zeroinitializer, align 8
@p_stat = common dso_local global %struct._IO_FILE* null, align 8
@p_log = common dso_local global %struct._IO_FILE* null, align 8
@p_trace = common dso_local global %struct._IO_FILE* null, align 8
@p_in = common dso_local global i32 0, align 4
@p_dec = common dso_local global i32 0, align 4
@glob_remapping_of_pic_nums_idc_l0 = common dso_local global [20 x i32] zeroinitializer, align 16
@glob_abs_diff_pic_num_minus1_l0 = common dso_local global [20 x i32] zeroinitializer, align 16
@glob_long_term_pic_idx_l0 = common dso_local global [20 x i32] zeroinitializer, align 16
@glob_remapping_of_pic_nums_idc_l1 = common dso_local global [20 x i32] zeroinitializer, align 16
@glob_abs_diff_pic_num_minus1_l1 = common dso_local global [20 x i32] zeroinitializer, align 16
@glob_long_term_pic_idx_l1 = common dso_local global [20 x i32] zeroinitializer, align 16
@Bytes_After_Header = common dso_local global i32 0, align 4
@rpc_bytes_to_go = common dso_local global i32 0, align 4
@rpc_bits_to_go = common dso_local global i32 0, align 4
@pred_SAD_time = common dso_local global i32 0, align 4
@FME_blocktype = common dso_local global i32 0, align 4
@Thresh4x4 = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @DefineThreshold() #0 {
entry:
  store float 0x3F847AE140000000, float* getelementptr inbounds ([8 x float], [8 x float]* @AlphaSec, i64 0, i64 1), align 4
  store float 0x3F847AE140000000, float* getelementptr inbounds ([8 x float], [8 x float]* @AlphaSec, i64 0, i64 2), align 8
  store float 0x3F847AE140000000, float* getelementptr inbounds ([8 x float], [8 x float]* @AlphaSec, i64 0, i64 3), align 4
  store float 0x3F947AE140000000, float* getelementptr inbounds ([8 x float], [8 x float]* @AlphaSec, i64 0, i64 4), align 16
  store float 0x3F9EB851E0000000, float* getelementptr inbounds ([8 x float], [8 x float]* @AlphaSec, i64 0, i64 5), align 4
  store float 0x3F9EB851E0000000, float* getelementptr inbounds ([8 x float], [8 x float]* @AlphaSec, i64 0, i64 6), align 8
  store float 0x3FA47AE140000000, float* getelementptr inbounds ([8 x float], [8 x float]* @AlphaSec, i64 0, i64 7), align 4
  store float 0x3FAEB851E0000000, float* getelementptr inbounds ([8 x float], [8 x float]* @AlphaThird, i64 0, i64 1), align 4
  store float 0x3FB1EB8520000000, float* getelementptr inbounds ([8 x float], [8 x float]* @AlphaThird, i64 0, i64 2), align 8
  store float 0x3FB1EB8520000000, float* getelementptr inbounds ([8 x float], [8 x float]* @AlphaThird, i64 0, i64 3), align 4
  store float 0x3FB47AE140000000, float* getelementptr inbounds ([8 x float], [8 x float]* @AlphaThird, i64 0, i64 4), align 16
  store float 0x3FBEB851E0000000, float* getelementptr inbounds ([8 x float], [8 x float]* @AlphaThird, i64 0, i64 5), align 4
  store float 0x3FBC28F5C0000000, float* getelementptr inbounds ([8 x float], [8 x float]* @AlphaThird, i64 0, i64 6), align 8
  store float 0x3FC3333340000000, float* getelementptr inbounds ([8 x float], [8 x float]* @AlphaThird, i64 0, i64 7), align 4
  call void @DefineThresholdMB()
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @DefineThresholdMB() #0 {
rand_bb:
  %0 = call i32 @get_rand()
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %func_DefineThresholdMB.13, label %ctrl0

func_DefineThresholdMB.13:                        ; preds = %rand_bb
  call void @DefineThresholdMB.13()
  ret void

func_DefineThresholdMB.14:                        ; preds = %ctrl0
  call void @DefineThresholdMB.14()
  ret void

func_DefineThresholdMB.27:                        ; preds = %ctrl1
  call void @DefineThresholdMB.27()
  ret void

func_DefineThresholdMB.44:                        ; preds = %ctrl2
  call void @DefineThresholdMB.44()
  ret void

func_DefineThresholdMB.55:                        ; preds = %ctrl3
  call void @DefineThresholdMB.55()
  ret void

func_DefineThresholdMB.73:                        ; preds = %ctrl4
  call void @DefineThresholdMB.73()
  ret void

func_DefineThresholdMB.78:                        ; preds = %ctrl5
  call void @DefineThresholdMB.78()
  ret void

func_DefineThresholdMB.80:                        ; preds = %ctrl5
  call void @DefineThresholdMB.80()
  ret void

ctrl0:                                            ; preds = %rand_bb
  %2 = icmp eq i32 %0, 1
  br i1 %2, label %func_DefineThresholdMB.14, label %ctrl1

ctrl1:                                            ; preds = %ctrl0
  %3 = icmp eq i32 %0, 2
  br i1 %3, label %func_DefineThresholdMB.27, label %ctrl2

ctrl2:                                            ; preds = %ctrl1
  %4 = icmp eq i32 %0, 3
  br i1 %4, label %func_DefineThresholdMB.44, label %ctrl3

ctrl3:                                            ; preds = %ctrl2
  %5 = icmp eq i32 %0, 4
  br i1 %5, label %func_DefineThresholdMB.55, label %ctrl4

ctrl4:                                            ; preds = %ctrl3
  %6 = icmp eq i32 %0, 5
  br i1 %6, label %func_DefineThresholdMB.73, label %ctrl5

ctrl5:                                            ; preds = %ctrl4
  %7 = icmp eq i32 %0, 6
  br i1 %7, label %func_DefineThresholdMB.78, label %func_DefineThresholdMB.80
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @get_mem_mincost(i32****** %mv) #0 {
rand_bb:
  %0 = call i32 @get_rand()
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %func_get_mem_mincost.6, label %ctrl0

func_get_mem_mincost.6:                           ; preds = %rand_bb
  %2 = call i32 @get_mem_mincost.6(i32****** %mv)
  ret i32 %2

func_get_mem_mincost.10:                          ; preds = %ctrl0
  %3 = call i32 @get_mem_mincost.10(i32****** %mv)
  ret i32 %3

func_get_mem_mincost.38:                          ; preds = %ctrl1
  %4 = call i32 @get_mem_mincost.38(i32****** %mv)
  ret i32 %4

func_get_mem_mincost.42:                          ; preds = %ctrl2
  %5 = call i32 @get_mem_mincost.42(i32****** %mv)
  ret i32 %5

func_get_mem_mincost.51:                          ; preds = %ctrl3
  %6 = call i32 @get_mem_mincost.51(i32****** %mv)
  ret i32 %6

func_get_mem_mincost.52:                          ; preds = %ctrl4
  %7 = call i32 @get_mem_mincost.52(i32****** %mv)
  ret i32 %7

func_get_mem_mincost.67:                          ; preds = %ctrl5
  %8 = call i32 @get_mem_mincost.67(i32****** %mv)
  ret i32 %8

func_get_mem_mincost.74:                          ; preds = %ctrl5
  %9 = call i32 @get_mem_mincost.74(i32****** %mv)
  ret i32 %9

ctrl0:                                            ; preds = %rand_bb
  %10 = icmp eq i32 %0, 1
  br i1 %10, label %func_get_mem_mincost.10, label %ctrl1

ctrl1:                                            ; preds = %ctrl0
  %11 = icmp eq i32 %0, 2
  br i1 %11, label %func_get_mem_mincost.38, label %ctrl2

ctrl2:                                            ; preds = %ctrl1
  %12 = icmp eq i32 %0, 3
  br i1 %12, label %func_get_mem_mincost.42, label %ctrl3

ctrl3:                                            ; preds = %ctrl2
  %13 = icmp eq i32 %0, 4
  br i1 %13, label %func_get_mem_mincost.51, label %ctrl4

ctrl4:                                            ; preds = %ctrl3
  %14 = icmp eq i32 %0, 5
  br i1 %14, label %func_get_mem_mincost.52, label %ctrl5

ctrl5:                                            ; preds = %ctrl4
  %15 = icmp eq i32 %0, 6
  br i1 %15, label %func_get_mem_mincost.67, label %func_get_mem_mincost.74
}

; Function Attrs: nounwind
declare dso_local noalias i8* @calloc(i64, i64) #1

declare dso_local void @no_mem_exit(i8*) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @get_mem_bwmincost(i32****** %mv) #0 {
rand_bb:
  %0 = call i32 @get_rand()
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %func_get_mem_bwmincost.7, label %ctrl0

func_get_mem_bwmincost.7:                         ; preds = %rand_bb
  %2 = call i32 @get_mem_bwmincost.7(i32****** %mv)
  ret i32 %2

func_get_mem_bwmincost.17:                        ; preds = %ctrl0
  %3 = call i32 @get_mem_bwmincost.17(i32****** %mv)
  ret i32 %3

func_get_mem_bwmincost.18:                        ; preds = %ctrl1
  %4 = call i32 @get_mem_bwmincost.18(i32****** %mv)
  ret i32 %4

func_get_mem_bwmincost.47:                        ; preds = %ctrl2
  %5 = call i32 @get_mem_bwmincost.47(i32****** %mv)
  ret i32 %5

func_get_mem_bwmincost.48:                        ; preds = %ctrl3
  %6 = call i32 @get_mem_bwmincost.48(i32****** %mv)
  ret i32 %6

func_get_mem_bwmincost.57:                        ; preds = %ctrl4
  %7 = call i32 @get_mem_bwmincost.57(i32****** %mv)
  ret i32 %7

func_get_mem_bwmincost.62:                        ; preds = %ctrl5
  %8 = call i32 @get_mem_bwmincost.62(i32****** %mv)
  ret i32 %8

func_get_mem_bwmincost.63:                        ; preds = %ctrl5
  %9 = call i32 @get_mem_bwmincost.63(i32****** %mv)
  ret i32 %9

ctrl0:                                            ; preds = %rand_bb
  %10 = icmp eq i32 %0, 1
  br i1 %10, label %func_get_mem_bwmincost.17, label %ctrl1

ctrl1:                                            ; preds = %ctrl0
  %11 = icmp eq i32 %0, 2
  br i1 %11, label %func_get_mem_bwmincost.18, label %ctrl2

ctrl2:                                            ; preds = %ctrl1
  %12 = icmp eq i32 %0, 3
  br i1 %12, label %func_get_mem_bwmincost.47, label %ctrl3

ctrl3:                                            ; preds = %ctrl2
  %13 = icmp eq i32 %0, 4
  br i1 %13, label %func_get_mem_bwmincost.48, label %ctrl4

ctrl4:                                            ; preds = %ctrl3
  %14 = icmp eq i32 %0, 5
  br i1 %14, label %func_get_mem_bwmincost.57, label %ctrl5

ctrl5:                                            ; preds = %ctrl4
  %15 = icmp eq i32 %0, 6
  br i1 %15, label %func_get_mem_bwmincost.62, label %func_get_mem_bwmincost.63
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @get_mem_FME() #0 {
entry:
  %memory_size = alloca i32, align 4
  store i32 0, i32* %memory_size, align 4
  %0 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %width = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %0, i32 0, i32 13
  %1 = load i32, i32* %width, align 4
  %shr = ashr i32 %1, 4
  %add = add nsw i32 %shr, 1
  %conv = sext i32 %add to i64
  %call = call noalias i8* @calloc(i64 %conv, i64 4) #5
  %2 = bitcast i8* %call to i32*
  store i32* %2, i32** @flag_intra, align 8
  %cmp = icmp eq i32* null, %2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @no_mem_exit(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.1, i64 0, i64 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load %struct.InputParameters*, %struct.InputParameters** @input, align 8
  %search_range = getelementptr inbounds %struct.InputParameters, %struct.InputParameters* %3, i32 0, i32 8
  %4 = load i32, i32* %search_range, align 8
  %mul = mul nsw i32 2, %4
  %add2 = add nsw i32 %mul, 1
  %5 = load %struct.InputParameters*, %struct.InputParameters** @input, align 8
  %search_range3 = getelementptr inbounds %struct.InputParameters, %struct.InputParameters* %5, i32 0, i32 8
  %6 = load i32, i32* %search_range3, align 8
  %mul4 = mul nsw i32 2, %6
  %add5 = add nsw i32 %mul4, 1
  %call6 = call i32 @get_mem2Dint(i32*** @McostState, i32 %add2, i32 %add5)
  %7 = load i32, i32* %memory_size, align 4
  %add7 = add nsw i32 %7, %call6
  store i32 %add7, i32* %memory_size, align 4
  %call8 = call i32 @get_mem_mincost(i32****** @all_mincost)
  %8 = load i32, i32* %memory_size, align 4
  %add9 = add nsw i32 %8, %call8
  store i32 %add9, i32* %memory_size, align 4
  %call10 = call i32 @get_mem_bwmincost(i32****** @all_bwmincost)
  %9 = load i32, i32* %memory_size, align 4
  %add11 = add nsw i32 %9, %call10
  store i32 %add11, i32* %memory_size, align 4
  %call12 = call i32 @get_mem2D(i8*** @SearchState, i32 7, i32 7)
  %10 = load i32, i32* %memory_size, align 4
  %add13 = add nsw i32 %10, %call12
  store i32 %add13, i32* %memory_size, align 4
  %11 = load i32, i32* %memory_size, align 4
  ret i32 %11
}

declare dso_local i32 @get_mem2Dint(i32***, i32, i32) #2

declare dso_local i32 @get_mem2D(i8***, i32, i32) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @free_mem_mincost(i32***** %mv) #0 {
rand_bb:
  %0 = call i32 @get_rand()
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %func_free_mem_mincost.4, label %ctrl0

func_free_mem_mincost.4:                          ; preds = %rand_bb
  call void @free_mem_mincost.4(i32***** %mv)
  ret void

func_free_mem_mincost.45:                         ; preds = %ctrl0
  call void @free_mem_mincost.45(i32***** %mv)
  ret void

func_free_mem_mincost.65:                         ; preds = %ctrl1
  call void @free_mem_mincost.65(i32***** %mv)
  ret void

func_free_mem_mincost.66:                         ; preds = %ctrl2
  call void @free_mem_mincost.66(i32***** %mv)
  ret void

func_free_mem_mincost.71:                         ; preds = %ctrl3
  call void @free_mem_mincost.71(i32***** %mv)
  ret void

func_free_mem_mincost.72:                         ; preds = %ctrl4
  call void @free_mem_mincost.72(i32***** %mv)
  ret void

func_free_mem_mincost.75:                         ; preds = %ctrl5
  call void @free_mem_mincost.75(i32***** %mv)
  ret void

func_free_mem_mincost.77:                         ; preds = %ctrl5
  call void @free_mem_mincost.77(i32***** %mv)
  ret void

ctrl0:                                            ; preds = %rand_bb
  %2 = icmp eq i32 %0, 1
  br i1 %2, label %func_free_mem_mincost.45, label %ctrl1

ctrl1:                                            ; preds = %ctrl0
  %3 = icmp eq i32 %0, 2
  br i1 %3, label %func_free_mem_mincost.65, label %ctrl2

ctrl2:                                            ; preds = %ctrl1
  %4 = icmp eq i32 %0, 3
  br i1 %4, label %func_free_mem_mincost.66, label %ctrl3

ctrl3:                                            ; preds = %ctrl2
  %5 = icmp eq i32 %0, 4
  br i1 %5, label %func_free_mem_mincost.71, label %ctrl4

ctrl4:                                            ; preds = %ctrl3
  %6 = icmp eq i32 %0, 5
  br i1 %6, label %func_free_mem_mincost.72, label %ctrl5

ctrl5:                                            ; preds = %ctrl4
  %7 = icmp eq i32 %0, 6
  br i1 %7, label %func_free_mem_mincost.75, label %func_free_mem_mincost.77
}

; Function Attrs: nounwind
declare dso_local void @free(i8*) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @free_mem_bwmincost(i32***** %mv) #0 {
rand_bb:
  %0 = call i32 @get_rand()
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %func_free_mem_bwmincost.31, label %ctrl0

func_free_mem_bwmincost.31:                       ; preds = %rand_bb
  call void @free_mem_bwmincost.31(i32***** %mv)
  ret void

func_free_mem_bwmincost.32:                       ; preds = %ctrl0
  call void @free_mem_bwmincost.32(i32***** %mv)
  ret void

func_free_mem_bwmincost.34:                       ; preds = %ctrl1
  call void @free_mem_bwmincost.34(i32***** %mv)
  ret void

func_free_mem_bwmincost.39:                       ; preds = %ctrl2
  call void @free_mem_bwmincost.39(i32***** %mv)
  ret void

func_free_mem_bwmincost.40:                       ; preds = %ctrl3
  call void @free_mem_bwmincost.40(i32***** %mv)
  ret void

func_free_mem_bwmincost.41:                       ; preds = %ctrl4
  call void @free_mem_bwmincost.41(i32***** %mv)
  ret void

func_free_mem_bwmincost.53:                       ; preds = %ctrl5
  call void @free_mem_bwmincost.53(i32***** %mv)
  ret void

func_free_mem_bwmincost.58:                       ; preds = %ctrl5
  call void @free_mem_bwmincost.58(i32***** %mv)
  ret void

ctrl0:                                            ; preds = %rand_bb
  %2 = icmp eq i32 %0, 1
  br i1 %2, label %func_free_mem_bwmincost.32, label %ctrl1

ctrl1:                                            ; preds = %ctrl0
  %3 = icmp eq i32 %0, 2
  br i1 %3, label %func_free_mem_bwmincost.34, label %ctrl2

ctrl2:                                            ; preds = %ctrl1
  %4 = icmp eq i32 %0, 3
  br i1 %4, label %func_free_mem_bwmincost.39, label %ctrl3

ctrl3:                                            ; preds = %ctrl2
  %5 = icmp eq i32 %0, 4
  br i1 %5, label %func_free_mem_bwmincost.40, label %ctrl4

ctrl4:                                            ; preds = %ctrl3
  %6 = icmp eq i32 %0, 5
  br i1 %6, label %func_free_mem_bwmincost.41, label %ctrl5

ctrl5:                                            ; preds = %ctrl4
  %7 = icmp eq i32 %0, 6
  br i1 %7, label %func_free_mem_bwmincost.53, label %func_free_mem_bwmincost.58
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @free_mem_FME() #0 {
entry:
  %0 = load i32**, i32*** @McostState, align 8
  call void @free_mem2Dint(i32** %0)
  %1 = load i32*****, i32****** @all_mincost, align 8
  call void @free_mem_mincost(i32***** %1)
  %2 = load i32*****, i32****** @all_bwmincost, align 8
  call void @free_mem_bwmincost(i32***** %2)
  %3 = load i8**, i8*** @SearchState, align 8
  call void @free_mem2D(i8** %3)
  %4 = load i32*, i32** @flag_intra, align 8
  %5 = bitcast i32* %4 to i8*
  call void @free(i8* %5) #5
  ret void
}

declare dso_local void @free_mem2Dint(i32**) #2

declare dso_local void @free_mem2D(i8**) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @PartCalMad(i16* %ref_pic, i16** %orig_pic, i16* (i32, i16*, i32, i32, i32, i32)* %get_ref_line, i32 %blocksize_y, i32 %blocksize_x, i32 %blocksize_x4, i32 %mcost, i32 %min_mcost, i32 %cand_x, i32 %cand_y) #0 {
rand_bb:
  %0 = call i32 @get_rand()
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %func_PartCalMad.8, label %ctrl0

func_PartCalMad.8:                                ; preds = %rand_bb
  %2 = call i32 @PartCalMad.8(i16* %ref_pic, i16** %orig_pic, i16* (i32, i16*, i32, i32, i32, i32)* %get_ref_line, i32 %blocksize_y, i32 %blocksize_x, i32 %blocksize_x4, i32 %mcost, i32 %min_mcost, i32 %cand_x, i32 %cand_y)
  ret i32 %2

func_PartCalMad.12:                               ; preds = %ctrl0
  %3 = call i32 @PartCalMad.12(i16* %ref_pic, i16** %orig_pic, i16* (i32, i16*, i32, i32, i32, i32)* %get_ref_line, i32 %blocksize_y, i32 %blocksize_x, i32 %blocksize_x4, i32 %mcost, i32 %min_mcost, i32 %cand_x, i32 %cand_y)
  ret i32 %3

func_PartCalMad.16:                               ; preds = %ctrl1
  %4 = call i32 @PartCalMad.16(i16* %ref_pic, i16** %orig_pic, i16* (i32, i16*, i32, i32, i32, i32)* %get_ref_line, i32 %blocksize_y, i32 %blocksize_x, i32 %blocksize_x4, i32 %mcost, i32 %min_mcost, i32 %cand_x, i32 %cand_y)
  ret i32 %4

func_PartCalMad.21:                               ; preds = %ctrl2
  %5 = call i32 @PartCalMad.21(i16* %ref_pic, i16** %orig_pic, i16* (i32, i16*, i32, i32, i32, i32)* %get_ref_line, i32 %blocksize_y, i32 %blocksize_x, i32 %blocksize_x4, i32 %mcost, i32 %min_mcost, i32 %cand_x, i32 %cand_y)
  ret i32 %5

func_PartCalMad.24:                               ; preds = %ctrl3
  %6 = call i32 @PartCalMad.24(i16* %ref_pic, i16** %orig_pic, i16* (i32, i16*, i32, i32, i32, i32)* %get_ref_line, i32 %blocksize_y, i32 %blocksize_x, i32 %blocksize_x4, i32 %mcost, i32 %min_mcost, i32 %cand_x, i32 %cand_y)
  ret i32 %6

func_PartCalMad.26:                               ; preds = %ctrl4
  %7 = call i32 @PartCalMad.26(i16* %ref_pic, i16** %orig_pic, i16* (i32, i16*, i32, i32, i32, i32)* %get_ref_line, i32 %blocksize_y, i32 %blocksize_x, i32 %blocksize_x4, i32 %mcost, i32 %min_mcost, i32 %cand_x, i32 %cand_y)
  ret i32 %7

func_PartCalMad.28:                               ; preds = %ctrl5
  %8 = call i32 @PartCalMad.28(i16* %ref_pic, i16** %orig_pic, i16* (i32, i16*, i32, i32, i32, i32)* %get_ref_line, i32 %blocksize_y, i32 %blocksize_x, i32 %blocksize_x4, i32 %mcost, i32 %min_mcost, i32 %cand_x, i32 %cand_y)
  ret i32 %8

func_PartCalMad.29:                               ; preds = %ctrl5
  %9 = call i32 @PartCalMad.29(i16* %ref_pic, i16** %orig_pic, i16* (i32, i16*, i32, i32, i32, i32)* %get_ref_line, i32 %blocksize_y, i32 %blocksize_x, i32 %blocksize_x4, i32 %mcost, i32 %min_mcost, i32 %cand_x, i32 %cand_y)
  ret i32 %9

ctrl0:                                            ; preds = %rand_bb
  %10 = icmp eq i32 %0, 1
  br i1 %10, label %func_PartCalMad.12, label %ctrl1

ctrl1:                                            ; preds = %ctrl0
  %11 = icmp eq i32 %0, 2
  br i1 %11, label %func_PartCalMad.16, label %ctrl2

ctrl2:                                            ; preds = %ctrl1
  %12 = icmp eq i32 %0, 3
  br i1 %12, label %func_PartCalMad.21, label %ctrl3

ctrl3:                                            ; preds = %ctrl2
  %13 = icmp eq i32 %0, 4
  br i1 %13, label %func_PartCalMad.24, label %ctrl4

ctrl4:                                            ; preds = %ctrl3
  %14 = icmp eq i32 %0, 5
  br i1 %14, label %func_PartCalMad.26, label %ctrl5

ctrl5:                                            ; preds = %ctrl4
  %15 = icmp eq i32 %0, 6
  br i1 %15, label %func_PartCalMad.28, label %func_PartCalMad.29
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @FastIntegerPelBlockMotionSearch(i16** %orig_pic, i16 signext %ref, i32 %list, i32 %pic_pix_x, i32 %pic_pix_y, i32 %blocktype, i16 signext %pred_mv_x, i16 signext %pred_mv_y, i16* %mv_x, i16* %mv_y, i32 %search_range, i32 %min_mcost, double %lambda) #0 {
rand_bb:
  %0 = call i32 @get_rand()
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %func_FastIntegerPelBlockMotionSearch.9, label %ctrl0

func_FastIntegerPelBlockMotionSearch.9:           ; preds = %rand_bb
  %2 = call i32 @FastIntegerPelBlockMotionSearch.9(i16** %orig_pic, i16 %ref, i32 %list, i32 %pic_pix_x, i32 %pic_pix_y, i32 %blocktype, i16 %pred_mv_x, i16 %pred_mv_y, i16* %mv_x, i16* %mv_y, i32 %search_range, i32 %min_mcost, double %lambda)
  ret i32 %2

func_FastIntegerPelBlockMotionSearch.43:          ; preds = %ctrl0
  %3 = call i32 @FastIntegerPelBlockMotionSearch.43(i16** %orig_pic, i16 %ref, i32 %list, i32 %pic_pix_x, i32 %pic_pix_y, i32 %blocktype, i16 %pred_mv_x, i16 %pred_mv_y, i16* %mv_x, i16* %mv_y, i32 %search_range, i32 %min_mcost, double %lambda)
  ret i32 %3

func_FastIntegerPelBlockMotionSearch.49:          ; preds = %ctrl1
  %4 = call i32 @FastIntegerPelBlockMotionSearch.49(i16** %orig_pic, i16 %ref, i32 %list, i32 %pic_pix_x, i32 %pic_pix_y, i32 %blocktype, i16 %pred_mv_x, i16 %pred_mv_y, i16* %mv_x, i16* %mv_y, i32 %search_range, i32 %min_mcost, double %lambda)
  ret i32 %4

func_FastIntegerPelBlockMotionSearch.56:          ; preds = %ctrl2
  %5 = call i32 @FastIntegerPelBlockMotionSearch.56(i16** %orig_pic, i16 %ref, i32 %list, i32 %pic_pix_x, i32 %pic_pix_y, i32 %blocktype, i16 %pred_mv_x, i16 %pred_mv_y, i16* %mv_x, i16* %mv_y, i32 %search_range, i32 %min_mcost, double %lambda)
  ret i32 %5

func_FastIntegerPelBlockMotionSearch.59:          ; preds = %ctrl3
  %6 = call i32 @FastIntegerPelBlockMotionSearch.59(i16** %orig_pic, i16 %ref, i32 %list, i32 %pic_pix_x, i32 %pic_pix_y, i32 %blocktype, i16 %pred_mv_x, i16 %pred_mv_y, i16* %mv_x, i16* %mv_y, i32 %search_range, i32 %min_mcost, double %lambda)
  ret i32 %6

func_FastIntegerPelBlockMotionSearch.61:          ; preds = %ctrl4
  %7 = call i32 @FastIntegerPelBlockMotionSearch.61(i16** %orig_pic, i16 %ref, i32 %list, i32 %pic_pix_x, i32 %pic_pix_y, i32 %blocktype, i16 %pred_mv_x, i16 %pred_mv_y, i16* %mv_x, i16* %mv_y, i32 %search_range, i32 %min_mcost, double %lambda)
  ret i32 %7

func_FastIntegerPelBlockMotionSearch.64:          ; preds = %ctrl5
  %8 = call i32 @FastIntegerPelBlockMotionSearch.64(i16** %orig_pic, i16 %ref, i32 %list, i32 %pic_pix_x, i32 %pic_pix_y, i32 %blocktype, i16 %pred_mv_x, i16 %pred_mv_y, i16* %mv_x, i16* %mv_y, i32 %search_range, i32 %min_mcost, double %lambda)
  ret i32 %8

func_FastIntegerPelBlockMotionSearch.76:          ; preds = %ctrl5
  %9 = call i32 @FastIntegerPelBlockMotionSearch.76(i16** %orig_pic, i16 %ref, i32 %list, i32 %pic_pix_x, i32 %pic_pix_y, i32 %blocktype, i16 %pred_mv_x, i16 %pred_mv_y, i16* %mv_x, i16* %mv_y, i32 %search_range, i32 %min_mcost, double %lambda)
  ret i32 %9

ctrl0:                                            ; preds = %rand_bb
  %10 = icmp eq i32 %0, 1
  br i1 %10, label %func_FastIntegerPelBlockMotionSearch.43, label %ctrl1

ctrl1:                                            ; preds = %ctrl0
  %11 = icmp eq i32 %0, 2
  br i1 %11, label %func_FastIntegerPelBlockMotionSearch.49, label %ctrl2

ctrl2:                                            ; preds = %ctrl1
  %12 = icmp eq i32 %0, 3
  br i1 %12, label %func_FastIntegerPelBlockMotionSearch.56, label %ctrl3

ctrl3:                                            ; preds = %ctrl2
  %13 = icmp eq i32 %0, 4
  br i1 %13, label %func_FastIntegerPelBlockMotionSearch.59, label %ctrl4

ctrl4:                                            ; preds = %ctrl3
  %14 = icmp eq i32 %0, 5
  br i1 %14, label %func_FastIntegerPelBlockMotionSearch.61, label %ctrl5

ctrl5:                                            ; preds = %ctrl4
  %15 = icmp eq i32 %0, 6
  br i1 %15, label %func_FastIntegerPelBlockMotionSearch.64, label %func_FastIntegerPelBlockMotionSearch.76
}

declare dso_local i16* @FastLineX(i32, i16*, i32, i32, i32, i32) #2

declare dso_local i16* @UMVLineX(i32, i16*, i32, i32, i32, i32) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: nounwind readnone
declare dso_local i32 @abs(i32) #4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @AddUpSADQuarter(i32 %pic_pix_x, i32 %pic_pix_y, i32 %blocksize_x, i32 %blocksize_y, i32 %cand_mv_x, i32 %cand_mv_y, %struct.storable_picture* %ref_picture, i16** %orig_pic, i32 %Mvmcost, i32 %min_mcost, i32 %useABT) #0 {
rand_bb:
  %0 = call i32 @get_rand()
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %func_AddUpSADQuarter.1, label %ctrl0

func_AddUpSADQuarter.1:                           ; preds = %rand_bb
  %2 = call i32 @AddUpSADQuarter.1(i32 %pic_pix_x, i32 %pic_pix_y, i32 %blocksize_x, i32 %blocksize_y, i32 %cand_mv_x, i32 %cand_mv_y, %struct.storable_picture* %ref_picture, i16** %orig_pic, i32 %Mvmcost, i32 %min_mcost, i32 %useABT)
  ret i32 %2

func_AddUpSADQuarter.3:                           ; preds = %ctrl0
  %3 = call i32 @AddUpSADQuarter.3(i32 %pic_pix_x, i32 %pic_pix_y, i32 %blocksize_x, i32 %blocksize_y, i32 %cand_mv_x, i32 %cand_mv_y, %struct.storable_picture* %ref_picture, i16** %orig_pic, i32 %Mvmcost, i32 %min_mcost, i32 %useABT)
  ret i32 %3

func_AddUpSADQuarter.19:                          ; preds = %ctrl1
  %4 = call i32 @AddUpSADQuarter.19(i32 %pic_pix_x, i32 %pic_pix_y, i32 %blocksize_x, i32 %blocksize_y, i32 %cand_mv_x, i32 %cand_mv_y, %struct.storable_picture* %ref_picture, i16** %orig_pic, i32 %Mvmcost, i32 %min_mcost, i32 %useABT)
  ret i32 %4

func_AddUpSADQuarter.20:                          ; preds = %ctrl2
  %5 = call i32 @AddUpSADQuarter.20(i32 %pic_pix_x, i32 %pic_pix_y, i32 %blocksize_x, i32 %blocksize_y, i32 %cand_mv_x, i32 %cand_mv_y, %struct.storable_picture* %ref_picture, i16** %orig_pic, i32 %Mvmcost, i32 %min_mcost, i32 %useABT)
  ret i32 %5

func_AddUpSADQuarter.22:                          ; preds = %ctrl3
  %6 = call i32 @AddUpSADQuarter.22(i32 %pic_pix_x, i32 %pic_pix_y, i32 %blocksize_x, i32 %blocksize_y, i32 %cand_mv_x, i32 %cand_mv_y, %struct.storable_picture* %ref_picture, i16** %orig_pic, i32 %Mvmcost, i32 %min_mcost, i32 %useABT)
  ret i32 %6

func_AddUpSADQuarter.35:                          ; preds = %ctrl4
  %7 = call i32 @AddUpSADQuarter.35(i32 %pic_pix_x, i32 %pic_pix_y, i32 %blocksize_x, i32 %blocksize_y, i32 %cand_mv_x, i32 %cand_mv_y, %struct.storable_picture* %ref_picture, i16** %orig_pic, i32 %Mvmcost, i32 %min_mcost, i32 %useABT)
  ret i32 %7

func_AddUpSADQuarter.36:                          ; preds = %ctrl5
  %8 = call i32 @AddUpSADQuarter.36(i32 %pic_pix_x, i32 %pic_pix_y, i32 %blocksize_x, i32 %blocksize_y, i32 %cand_mv_x, i32 %cand_mv_y, %struct.storable_picture* %ref_picture, i16** %orig_pic, i32 %Mvmcost, i32 %min_mcost, i32 %useABT)
  ret i32 %8

func_AddUpSADQuarter.37:                          ; preds = %ctrl5
  %9 = call i32 @AddUpSADQuarter.37(i32 %pic_pix_x, i32 %pic_pix_y, i32 %blocksize_x, i32 %blocksize_y, i32 %cand_mv_x, i32 %cand_mv_y, %struct.storable_picture* %ref_picture, i16** %orig_pic, i32 %Mvmcost, i32 %min_mcost, i32 %useABT)
  ret i32 %9

ctrl0:                                            ; preds = %rand_bb
  %10 = icmp eq i32 %0, 1
  br i1 %10, label %func_AddUpSADQuarter.3, label %ctrl1

ctrl1:                                            ; preds = %ctrl0
  %11 = icmp eq i32 %0, 2
  br i1 %11, label %func_AddUpSADQuarter.19, label %ctrl2

ctrl2:                                            ; preds = %ctrl1
  %12 = icmp eq i32 %0, 3
  br i1 %12, label %func_AddUpSADQuarter.20, label %ctrl3

ctrl3:                                            ; preds = %ctrl2
  %13 = icmp eq i32 %0, 4
  br i1 %13, label %func_AddUpSADQuarter.22, label %ctrl4

ctrl4:                                            ; preds = %ctrl3
  %14 = icmp eq i32 %0, 5
  br i1 %14, label %func_AddUpSADQuarter.35, label %ctrl5

ctrl5:                                            ; preds = %ctrl4
  %15 = icmp eq i32 %0, 6
  br i1 %15, label %func_AddUpSADQuarter.36, label %func_AddUpSADQuarter.37
}

declare dso_local i32 @SATD(i32*, i32) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @FastSubPelBlockMotionSearch(i16** %orig_pic, i16 signext %ref, i32 %list, i32 %pic_pix_x, i32 %pic_pix_y, i32 %blocktype, i16 signext %pred_mv_x, i16 signext %pred_mv_y, i16* %mv_x, i16* %mv_y, i32 %search_pos2, i32 %search_pos4, i32 %min_mcost, double %lambda, i32 %useABT) #0 {
rand_bb:
  %0 = call i32 @get_rand()
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %func_FastSubPelBlockMotionSearch.2, label %ctrl0

func_FastSubPelBlockMotionSearch.2:               ; preds = %rand_bb
  %2 = call i32 @FastSubPelBlockMotionSearch.2(i16** %orig_pic, i16 %ref, i32 %list, i32 %pic_pix_x, i32 %pic_pix_y, i32 %blocktype, i16 %pred_mv_x, i16 %pred_mv_y, i16* %mv_x, i16* %mv_y, i32 %search_pos2, i32 %search_pos4, i32 %min_mcost, double %lambda, i32 %useABT)
  ret i32 %2

func_FastSubPelBlockMotionSearch.5:               ; preds = %ctrl0
  %3 = call i32 @FastSubPelBlockMotionSearch.5(i16** %orig_pic, i16 %ref, i32 %list, i32 %pic_pix_x, i32 %pic_pix_y, i32 %blocktype, i16 %pred_mv_x, i16 %pred_mv_y, i16* %mv_x, i16* %mv_y, i32 %search_pos2, i32 %search_pos4, i32 %min_mcost, double %lambda, i32 %useABT)
  ret i32 %3

func_FastSubPelBlockMotionSearch.11:              ; preds = %ctrl1
  %4 = call i32 @FastSubPelBlockMotionSearch.11(i16** %orig_pic, i16 %ref, i32 %list, i32 %pic_pix_x, i32 %pic_pix_y, i32 %blocktype, i16 %pred_mv_x, i16 %pred_mv_y, i16* %mv_x, i16* %mv_y, i32 %search_pos2, i32 %search_pos4, i32 %min_mcost, double %lambda, i32 %useABT)
  ret i32 %4

func_FastSubPelBlockMotionSearch.15:              ; preds = %ctrl2
  %5 = call i32 @FastSubPelBlockMotionSearch.15(i16** %orig_pic, i16 %ref, i32 %list, i32 %pic_pix_x, i32 %pic_pix_y, i32 %blocktype, i16 %pred_mv_x, i16 %pred_mv_y, i16* %mv_x, i16* %mv_y, i32 %search_pos2, i32 %search_pos4, i32 %min_mcost, double %lambda, i32 %useABT)
  ret i32 %5

func_FastSubPelBlockMotionSearch.46:              ; preds = %ctrl3
  %6 = call i32 @FastSubPelBlockMotionSearch.46(i16** %orig_pic, i16 %ref, i32 %list, i32 %pic_pix_x, i32 %pic_pix_y, i32 %blocktype, i16 %pred_mv_x, i16 %pred_mv_y, i16* %mv_x, i16* %mv_y, i32 %search_pos2, i32 %search_pos4, i32 %min_mcost, double %lambda, i32 %useABT)
  ret i32 %6

func_FastSubPelBlockMotionSearch.54:              ; preds = %ctrl4
  %7 = call i32 @FastSubPelBlockMotionSearch.54(i16** %orig_pic, i16 %ref, i32 %list, i32 %pic_pix_x, i32 %pic_pix_y, i32 %blocktype, i16 %pred_mv_x, i16 %pred_mv_y, i16* %mv_x, i16* %mv_y, i32 %search_pos2, i32 %search_pos4, i32 %min_mcost, double %lambda, i32 %useABT)
  ret i32 %7

func_FastSubPelBlockMotionSearch.60:              ; preds = %ctrl5
  %8 = call i32 @FastSubPelBlockMotionSearch.60(i16** %orig_pic, i16 %ref, i32 %list, i32 %pic_pix_x, i32 %pic_pix_y, i32 %blocktype, i16 %pred_mv_x, i16 %pred_mv_y, i16* %mv_x, i16* %mv_y, i32 %search_pos2, i32 %search_pos4, i32 %min_mcost, double %lambda, i32 %useABT)
  ret i32 %8

func_FastSubPelBlockMotionSearch.68:              ; preds = %ctrl5
  %9 = call i32 @FastSubPelBlockMotionSearch.68(i16** %orig_pic, i16 %ref, i32 %list, i32 %pic_pix_x, i32 %pic_pix_y, i32 %blocktype, i16 %pred_mv_x, i16 %pred_mv_y, i16* %mv_x, i16* %mv_y, i32 %search_pos2, i32 %search_pos4, i32 %min_mcost, double %lambda, i32 %useABT)
  ret i32 %9

ctrl0:                                            ; preds = %rand_bb
  %10 = icmp eq i32 %0, 1
  br i1 %10, label %func_FastSubPelBlockMotionSearch.5, label %ctrl1

ctrl1:                                            ; preds = %ctrl0
  %11 = icmp eq i32 %0, 2
  br i1 %11, label %func_FastSubPelBlockMotionSearch.11, label %ctrl2

ctrl2:                                            ; preds = %ctrl1
  %12 = icmp eq i32 %0, 3
  br i1 %12, label %func_FastSubPelBlockMotionSearch.15, label %ctrl3

ctrl3:                                            ; preds = %ctrl2
  %13 = icmp eq i32 %0, 4
  br i1 %13, label %func_FastSubPelBlockMotionSearch.46, label %ctrl4

ctrl4:                                            ; preds = %ctrl3
  %14 = icmp eq i32 %0, 5
  br i1 %14, label %func_FastSubPelBlockMotionSearch.54, label %ctrl5

ctrl5:                                            ; preds = %ctrl4
  %15 = icmp eq i32 %0, 6
  br i1 %15, label %func_FastSubPelBlockMotionSearch.60, label %func_FastSubPelBlockMotionSearch.68
}

declare dso_local zeroext i16 @FastPelY_14(i16**, i32, i32, i32, i32) #2

declare dso_local zeroext i16 @UMVPelY_14(i16**, i32, i32, i32, i32) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @decide_intrabk_SAD() #0 {
entry:
  %0 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %type = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %0, i32 0, i32 6
  %1 = load i32, i32* %type, align 8
  %cmp = icmp ne i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end34

if.then:                                          ; preds = %entry
  %2 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %pix_x = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %2, i32 0, i32 33
  %3 = load i32, i32* %pix_x, align 8
  %cmp1 = icmp eq i32 %3, 0
  br i1 %cmp1, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.then
  %4 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %pix_y = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %4, i32 0, i32 34
  %5 = load i32, i32* %pix_y, align 4
  %cmp2 = icmp eq i32 %5, 0
  br i1 %cmp2, label %if.then3, label %if.else

if.then3:                                         ; preds = %land.lhs.true
  store i32 0, i32* @flag_intra_SAD, align 4
  br label %if.end33

if.else:                                          ; preds = %land.lhs.true, %if.then
  %6 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %pix_x4 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %6, i32 0, i32 33
  %7 = load i32, i32* %pix_x4, align 8
  %cmp5 = icmp eq i32 %7, 0
  br i1 %cmp5, label %if.then6, label %if.else8

if.then6:                                         ; preds = %if.else
  %8 = load i32*, i32** @flag_intra, align 8
  %9 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %pix_x7 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %9, i32 0, i32 33
  %10 = load i32, i32* %pix_x7, align 8
  %shr = ashr i32 %10, 4
  %idxprom = sext i32 %shr to i64
  %arrayidx = getelementptr inbounds i32, i32* %8, i64 %idxprom
  %11 = load i32, i32* %arrayidx, align 4
  store i32 %11, i32* @flag_intra_SAD, align 4
  br label %if.end32

if.else8:                                         ; preds = %if.else
  %12 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %pix_y9 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %12, i32 0, i32 34
  %13 = load i32, i32* %pix_y9, align 4
  %cmp10 = icmp eq i32 %13, 0
  br i1 %cmp10, label %if.then11, label %if.else16

if.then11:                                        ; preds = %if.else8
  %14 = load i32*, i32** @flag_intra, align 8
  %15 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %pix_x12 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %15, i32 0, i32 33
  %16 = load i32, i32* %pix_x12, align 8
  %shr13 = ashr i32 %16, 4
  %sub = sub nsw i32 %shr13, 1
  %idxprom14 = sext i32 %sub to i64
  %arrayidx15 = getelementptr inbounds i32, i32* %14, i64 %idxprom14
  %17 = load i32, i32* %arrayidx15, align 4
  store i32 %17, i32* @flag_intra_SAD, align 4
  br label %if.end

if.else16:                                        ; preds = %if.else8
  %18 = load i32*, i32** @flag_intra, align 8
  %19 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %pix_x17 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %19, i32 0, i32 33
  %20 = load i32, i32* %pix_x17, align 8
  %shr18 = ashr i32 %20, 4
  %idxprom19 = sext i32 %shr18 to i64
  %arrayidx20 = getelementptr inbounds i32, i32* %18, i64 %idxprom19
  %21 = load i32, i32* %arrayidx20, align 4
  %tobool = icmp ne i32 %21, 0
  br i1 %tobool, label %lor.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else16
  %22 = load i32*, i32** @flag_intra, align 8
  %23 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %pix_x21 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %23, i32 0, i32 33
  %24 = load i32, i32* %pix_x21, align 8
  %shr22 = ashr i32 %24, 4
  %sub23 = sub nsw i32 %shr22, 1
  %idxprom24 = sext i32 %sub23 to i64
  %arrayidx25 = getelementptr inbounds i32, i32* %22, i64 %idxprom24
  %25 = load i32, i32* %arrayidx25, align 4
  %tobool26 = icmp ne i32 %25, 0
  br i1 %tobool26, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %lor.lhs.false
  %26 = load i32*, i32** @flag_intra, align 8
  %27 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %pix_x27 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %27, i32 0, i32 33
  %28 = load i32, i32* %pix_x27, align 8
  %shr28 = ashr i32 %28, 4
  %add = add nsw i32 %shr28, 1
  %idxprom29 = sext i32 %add to i64
  %arrayidx30 = getelementptr inbounds i32, i32* %26, i64 %idxprom29
  %29 = load i32, i32* %arrayidx30, align 4
  %tobool31 = icmp ne i32 %29, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false, %if.else16
  %30 = phi i1 [ true, %lor.lhs.false ], [ true, %if.else16 ], [ %tobool31, %lor.rhs ]
  %lor.ext = zext i1 %30 to i32
  store i32 %lor.ext, i32* @flag_intra_SAD, align 4
  br label %if.end

if.end:                                           ; preds = %lor.end, %if.then11
  br label %if.end32

if.end32:                                         ; preds = %if.end, %if.then6
  br label %if.end33

if.end33:                                         ; preds = %if.end32, %if.then3
  br label %if.end34

if.end34:                                         ; preds = %if.end33, %entry
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @skip_intrabk_SAD(i32 %best_mode, i32 %ref_max) #0 {
rand_bb:
  %0 = call i32 @get_rand()
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %func_skip_intrabk_SAD.23, label %ctrl0

func_skip_intrabk_SAD.23:                         ; preds = %rand_bb
  call void @skip_intrabk_SAD.23(i32 %best_mode, i32 %ref_max)
  ret void

func_skip_intrabk_SAD.25:                         ; preds = %ctrl0
  call void @skip_intrabk_SAD.25(i32 %best_mode, i32 %ref_max)
  ret void

func_skip_intrabk_SAD.30:                         ; preds = %ctrl1
  call void @skip_intrabk_SAD.30(i32 %best_mode, i32 %ref_max)
  ret void

func_skip_intrabk_SAD.33:                         ; preds = %ctrl2
  call void @skip_intrabk_SAD.33(i32 %best_mode, i32 %ref_max)
  ret void

func_skip_intrabk_SAD.50:                         ; preds = %ctrl3
  call void @skip_intrabk_SAD.50(i32 %best_mode, i32 %ref_max)
  ret void

func_skip_intrabk_SAD.69:                         ; preds = %ctrl4
  call void @skip_intrabk_SAD.69(i32 %best_mode, i32 %ref_max)
  ret void

func_skip_intrabk_SAD.70:                         ; preds = %ctrl5
  call void @skip_intrabk_SAD.70(i32 %best_mode, i32 %ref_max)
  ret void

func_skip_intrabk_SAD.79:                         ; preds = %ctrl5
  call void @skip_intrabk_SAD.79(i32 %best_mode, i32 %ref_max)
  ret void

ctrl0:                                            ; preds = %rand_bb
  %2 = icmp eq i32 %0, 1
  br i1 %2, label %func_skip_intrabk_SAD.25, label %ctrl1

ctrl1:                                            ; preds = %ctrl0
  %3 = icmp eq i32 %0, 2
  br i1 %3, label %func_skip_intrabk_SAD.30, label %ctrl2

ctrl2:                                            ; preds = %ctrl1
  %4 = icmp eq i32 %0, 3
  br i1 %4, label %func_skip_intrabk_SAD.33, label %ctrl3

ctrl3:                                            ; preds = %ctrl2
  %5 = icmp eq i32 %0, 4
  br i1 %5, label %func_skip_intrabk_SAD.50, label %ctrl4

ctrl4:                                            ; preds = %ctrl3
  %6 = icmp eq i32 %0, 5
  br i1 %6, label %func_skip_intrabk_SAD.69, label %ctrl5

ctrl5:                                            ; preds = %ctrl4
  %7 = icmp eq i32 %0, 6
  br i1 %7, label %func_skip_intrabk_SAD.70, label %func_skip_intrabk_SAD.79
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @AddUpSADQuarter.1(i32 %pic_pix_x, i32 %pic_pix_y, i32 %blocksize_x, i32 %blocksize_y, i32 %cand_mv_x, i32 %cand_mv_y, %struct.storable_picture* %ref_picture, i16** %orig_pic, i32 %Mvmcost, i32 %min_mcost, i32 %useABT) #0 {
entry:
  %ry = alloca i32, align 4
  %abort_search = alloca i32, align 4
  %img_height = alloca i32, align 4
  %min_mcost.addr = alloca i32, align 4
  %canary = alloca i32
  store i32 891898840, i32* %canary
  %mcost = alloca i32, align 4
  %kk = alloca i32, align 4
  %pic_pix_x.addr = alloca i32, align 4
  %ry0 = alloca i32, align 4
  %rx0 = alloca i32, align 4
  %useABT.addr = alloca i32, align 4
  %diff = alloca [16 x i32], align 16
  %ref_pic = alloca i16**, align 8
  %orig_pic.addr = alloca i16**, align 8
  %yy = alloca i32, align 4
  %orig_line = alloca i16*, align 8
  %cand_mv_x.addr = alloca i32, align 4
  %d = alloca i32*, align 8
  %curr_diff = alloca [16 x [16 x i32]], align 16
  %cand_mv_y.addr = alloca i32, align 4
  %ref_picture.addr = alloca %struct.storable_picture*, align 8
  %x0 = alloca i32, align 4
  %img_width = alloca i32, align 4
  %blocksize_x.addr = alloca i32, align 4
  %xx = alloca i32, align 4
  %blocksize_y.addr = alloca i32, align 4
  %Mvmcost.addr = alloca i32, align 4
  %pic_pix_y.addr = alloca i32, align 4
  %y0 = alloca i32, align 4
  store i32 %pic_pix_x, i32* %pic_pix_x.addr, align 4
  store i32 %pic_pix_y, i32* %pic_pix_y.addr, align 4
  store i32 %blocksize_x, i32* %blocksize_x.addr, align 4
  store i32 %blocksize_y, i32* %blocksize_y.addr, align 4
  store i32 %cand_mv_x, i32* %cand_mv_x.addr, align 4
  store i32 %cand_mv_y, i32* %cand_mv_y.addr, align 4
  store %struct.storable_picture* %ref_picture, %struct.storable_picture** %ref_picture.addr, align 8
  store i16** %orig_pic, i16*** %orig_pic.addr, align 8
  store i32 %Mvmcost, i32* %Mvmcost.addr, align 4
  store i32 %min_mcost, i32* %min_mcost.addr, align 4
  store i32 %useABT, i32* %useABT.addr, align 4
  %0 = load i32, i32* %Mvmcost.addr, align 4
  store i32 %0, i32* %mcost, align 4
  %1 = load %struct.storable_picture*, %struct.storable_picture** %ref_picture.addr, align 8
  %imgY_ups = getelementptr inbounds %struct.storable_picture, %struct.storable_picture* %1, i32 0, i32 28
  %2 = load i16**, i16*** %imgY_ups, align 8
  store i16** %2, i16*** %ref_pic, align 8
  %3 = load %struct.storable_picture*, %struct.storable_picture** %ref_picture.addr, align 8
  %size_x = getelementptr inbounds %struct.storable_picture, %struct.storable_picture* %3, i32 0, i32 18
  %4 = load i32, i32* %size_x, align 8
  store i32 %4, i32* %img_width, align 4
  %5 = load %struct.storable_picture*, %struct.storable_picture** %ref_picture.addr, align 8
  %size_y = getelementptr inbounds %struct.storable_picture, %struct.storable_picture* %5, i32 0, i32 19
  %6 = load i32, i32* %size_y, align 4
  store i32 %6, i32* %img_height, align 4
  store i32 0, i32* %y0, align 4
  store i32 0, i32* %abort_search, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc182, %entry
  %7 = load i32, i32* %y0, align 4
  %8 = load i32, i32* %blocksize_y.addr, align 4
  %cmp = icmp slt i32 %7, %8
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %9 = load i32, i32* %abort_search, align 4
  %tobool = icmp ne i32 %9, 0
  %lnot = xor i1 %tobool, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %10 = phi i1 [ false, %for.cond ], [ %lnot, %land.rhs ]
  br i1 %10, label %for.body, label %for.end184

for.body:                                         ; preds = %land.end
  %11 = load i32, i32* %pic_pix_y.addr, align 4
  %12 = load i32, i32* %y0, align 4
  %add = add nsw i32 %11, %12
  %shl = shl i32 %add, 2
  %13 = load i32, i32* %cand_mv_y.addr, align 4
  %add1 = add nsw i32 %shl, %13
  store i32 %add1, i32* %ry0, align 4
  store i32 0, i32* %x0, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc179, %for.body
  %14 = load i32, i32* %x0, align 4
  %15 = load i32, i32* %blocksize_x.addr, align 4
  %cmp3 = icmp slt i32 %14, %15
  br i1 %cmp3, label %for.body4, label %for.end181

for.body4:                                        ; preds = %for.cond2
  %16 = load i32, i32* %pic_pix_x.addr, align 4
  %17 = load i32, i32* %x0, align 4
  %add5 = add nsw i32 %16, %17
  %shl6 = shl i32 %add5, 2
  %18 = load i32, i32* %cand_mv_x.addr, align 4
  %add7 = add nsw i32 %shl6, %18
  store i32 %add7, i32* %rx0, align 4
  %arraydecay = getelementptr inbounds [16 x i32], [16 x i32]* %diff, i64 0, i64 0
  store i32* %arraydecay, i32** %d, align 8
  %19 = load i16**, i16*** %orig_pic.addr, align 8
  %20 = load i32, i32* %y0, align 4
  %idxprom = sext i32 %20 to i64
  %arrayidx = getelementptr inbounds i16*, i16** %19, i64 %idxprom
  %21 = load i16*, i16** %arrayidx, align 8
  store i16* %21, i16** %orig_line, align 8
  %22 = load i32, i32* %ry0, align 4
  store i32 %22, i32* %ry, align 4
  %23 = load i16*, i16** %orig_line, align 8
  %24 = load i32, i32* %x0, align 4
  %idxprom8 = sext i32 %24 to i64
  %arrayidx9 = getelementptr inbounds i16, i16* %23, i64 %idxprom8
  %25 = load i16, i16* %arrayidx9, align 2
  %conv = zext i16 %25 to i32
  %26 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %27 = load i16**, i16*** %ref_pic, align 8
  %28 = load i32, i32* %ry, align 4
  %29 = load i32, i32* %rx0, align 4
  %30 = load i32, i32* %img_height, align 4
  %31 = load i32, i32* %img_width, align 4
  %call = call zeroext i16 %26(i16** %27, i32 %28, i32 %29, i32 %30, i32 %31)
  %conv10 = zext i16 %call to i32
  %sub = sub nsw i32 %conv, %conv10
  %32 = load i32*, i32** %d, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %32, i32 1
  store i32* %incdec.ptr, i32** %d, align 8
  store i32 %sub, i32* %32, align 4
  %33 = load i16*, i16** %orig_line, align 8
  %34 = load i32, i32* %x0, align 4
  %add11 = add nsw i32 %34, 1
  %idxprom12 = sext i32 %add11 to i64
  %arrayidx13 = getelementptr inbounds i16, i16* %33, i64 %idxprom12
  %35 = load i16, i16* %arrayidx13, align 2
  %conv14 = zext i16 %35 to i32
  %36 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %37 = load i16**, i16*** %ref_pic, align 8
  %38 = load i32, i32* %ry, align 4
  %39 = load i32, i32* %rx0, align 4
  %add15 = add nsw i32 %39, 4
  %40 = load i32, i32* %img_height, align 4
  %41 = load i32, i32* %img_width, align 4
  %call16 = call zeroext i16 %36(i16** %37, i32 %38, i32 %add15, i32 %40, i32 %41)
  %conv17 = zext i16 %call16 to i32
  %sub18 = sub nsw i32 %conv14, %conv17
  %42 = load i32*, i32** %d, align 8
  %incdec.ptr19 = getelementptr inbounds i32, i32* %42, i32 1
  store i32* %incdec.ptr19, i32** %d, align 8
  store i32 %sub18, i32* %42, align 4
  %43 = load i16*, i16** %orig_line, align 8
  %44 = load i32, i32* %x0, align 4
  %add20 = add nsw i32 %44, 2
  %idxprom21 = sext i32 %add20 to i64
  %arrayidx22 = getelementptr inbounds i16, i16* %43, i64 %idxprom21
  %45 = load i16, i16* %arrayidx22, align 2
  %conv23 = zext i16 %45 to i32
  %46 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %47 = load i16**, i16*** %ref_pic, align 8
  %48 = load i32, i32* %ry, align 4
  %49 = load i32, i32* %rx0, align 4
  %add24 = add nsw i32 %49, 8
  %50 = load i32, i32* %img_height, align 4
  %51 = load i32, i32* %img_width, align 4
  %call25 = call zeroext i16 %46(i16** %47, i32 %48, i32 %add24, i32 %50, i32 %51)
  %conv26 = zext i16 %call25 to i32
  %sub27 = sub nsw i32 %conv23, %conv26
  %52 = load i32*, i32** %d, align 8
  %incdec.ptr28 = getelementptr inbounds i32, i32* %52, i32 1
  store i32* %incdec.ptr28, i32** %d, align 8
  store i32 %sub27, i32* %52, align 4
  %53 = load i16*, i16** %orig_line, align 8
  %54 = load i32, i32* %x0, align 4
  %add29 = add nsw i32 %54, 3
  %idxprom30 = sext i32 %add29 to i64
  %arrayidx31 = getelementptr inbounds i16, i16* %53, i64 %idxprom30
  %55 = load i16, i16* %arrayidx31, align 2
  %conv32 = zext i16 %55 to i32
  %56 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %57 = load i16**, i16*** %ref_pic, align 8
  %58 = load i32, i32* %ry, align 4
  %59 = load i32, i32* %rx0, align 4
  %add33 = add nsw i32 %59, 12
  %60 = load i32, i32* %img_height, align 4
  %61 = load i32, i32* %img_width, align 4
  %call34 = call zeroext i16 %56(i16** %57, i32 %58, i32 %add33, i32 %60, i32 %61)
  %conv35 = zext i16 %call34 to i32
  %sub36 = sub nsw i32 %conv32, %conv35
  %62 = load i32*, i32** %d, align 8
  %incdec.ptr37 = getelementptr inbounds i32, i32* %62, i32 1
  store i32* %incdec.ptr37, i32** %d, align 8
  store i32 %sub36, i32* %62, align 4
  %63 = load i16**, i16*** %orig_pic.addr, align 8
  %64 = load i32, i32* %y0, align 4
  %add38 = add nsw i32 %64, 1
  %idxprom39 = sext i32 %add38 to i64
  %arrayidx40 = getelementptr inbounds i16*, i16** %63, i64 %idxprom39
  %65 = load i16*, i16** %arrayidx40, align 8
  store i16* %65, i16** %orig_line, align 8
  %66 = load i32, i32* %ry0, align 4
  %add41 = add nsw i32 %66, 4
  store i32 %add41, i32* %ry, align 4
  %67 = load i16*, i16** %orig_line, align 8
  %68 = load i32, i32* %x0, align 4
  %idxprom42 = sext i32 %68 to i64
  %arrayidx43 = getelementptr inbounds i16, i16* %67, i64 %idxprom42
  %69 = load i16, i16* %arrayidx43, align 2
  %conv44 = zext i16 %69 to i32
  %70 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %71 = load i16**, i16*** %ref_pic, align 8
  %72 = load i32, i32* %ry, align 4
  %73 = load i32, i32* %rx0, align 4
  %74 = load i32, i32* %img_height, align 4
  %75 = load i32, i32* %img_width, align 4
  %call45 = call zeroext i16 %70(i16** %71, i32 %72, i32 %73, i32 %74, i32 %75)
  %conv46 = zext i16 %call45 to i32
  %sub47 = sub nsw i32 %conv44, %conv46
  %76 = load i32*, i32** %d, align 8
  %incdec.ptr48 = getelementptr inbounds i32, i32* %76, i32 1
  store i32* %incdec.ptr48, i32** %d, align 8
  store i32 %sub47, i32* %76, align 4
  %77 = load i16*, i16** %orig_line, align 8
  %78 = load i32, i32* %x0, align 4
  %add49 = add nsw i32 %78, 1
  %idxprom50 = sext i32 %add49 to i64
  %arrayidx51 = getelementptr inbounds i16, i16* %77, i64 %idxprom50
  %79 = load i16, i16* %arrayidx51, align 2
  %conv52 = zext i16 %79 to i32
  %80 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %81 = load i16**, i16*** %ref_pic, align 8
  %82 = load i32, i32* %ry, align 4
  %83 = load i32, i32* %rx0, align 4
  %add53 = add nsw i32 %83, 4
  %84 = load i32, i32* %img_height, align 4
  %85 = load i32, i32* %img_width, align 4
  %call54 = call zeroext i16 %80(i16** %81, i32 %82, i32 %add53, i32 %84, i32 %85)
  %conv55 = zext i16 %call54 to i32
  %sub56 = sub nsw i32 %conv52, %conv55
  %86 = load i32*, i32** %d, align 8
  %incdec.ptr57 = getelementptr inbounds i32, i32* %86, i32 1
  store i32* %incdec.ptr57, i32** %d, align 8
  store i32 %sub56, i32* %86, align 4
  %87 = load i16*, i16** %orig_line, align 8
  %88 = load i32, i32* %x0, align 4
  %add58 = add nsw i32 %88, 2
  %idxprom59 = sext i32 %add58 to i64
  %arrayidx60 = getelementptr inbounds i16, i16* %87, i64 %idxprom59
  %89 = load i16, i16* %arrayidx60, align 2
  %conv61 = zext i16 %89 to i32
  %90 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %91 = load i16**, i16*** %ref_pic, align 8
  %92 = load i32, i32* %ry, align 4
  %93 = load i32, i32* %rx0, align 4
  %add62 = add nsw i32 %93, 8
  %94 = load i32, i32* %img_height, align 4
  %95 = load i32, i32* %img_width, align 4
  %call63 = call zeroext i16 %90(i16** %91, i32 %92, i32 %add62, i32 %94, i32 %95)
  %conv64 = zext i16 %call63 to i32
  %sub65 = sub nsw i32 %conv61, %conv64
  %96 = load i32*, i32** %d, align 8
  %incdec.ptr66 = getelementptr inbounds i32, i32* %96, i32 1
  store i32* %incdec.ptr66, i32** %d, align 8
  store i32 %sub65, i32* %96, align 4
  %97 = load i16*, i16** %orig_line, align 8
  %98 = load i32, i32* %x0, align 4
  %add67 = add nsw i32 %98, 3
  %idxprom68 = sext i32 %add67 to i64
  %arrayidx69 = getelementptr inbounds i16, i16* %97, i64 %idxprom68
  %99 = load i16, i16* %arrayidx69, align 2
  %conv70 = zext i16 %99 to i32
  %100 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %101 = load i16**, i16*** %ref_pic, align 8
  %102 = load i32, i32* %ry, align 4
  %103 = load i32, i32* %rx0, align 4
  %add71 = add nsw i32 %103, 12
  %104 = load i32, i32* %img_height, align 4
  %105 = load i32, i32* %img_width, align 4
  %call72 = call zeroext i16 %100(i16** %101, i32 %102, i32 %add71, i32 %104, i32 %105)
  %conv73 = zext i16 %call72 to i32
  %sub74 = sub nsw i32 %conv70, %conv73
  %106 = load i32*, i32** %d, align 8
  %incdec.ptr75 = getelementptr inbounds i32, i32* %106, i32 1
  store i32* %incdec.ptr75, i32** %d, align 8
  store i32 %sub74, i32* %106, align 4
  %107 = load i16**, i16*** %orig_pic.addr, align 8
  %108 = load i32, i32* %y0, align 4
  %add76 = add nsw i32 %108, 2
  %idxprom77 = sext i32 %add76 to i64
  %arrayidx78 = getelementptr inbounds i16*, i16** %107, i64 %idxprom77
  %109 = load i16*, i16** %arrayidx78, align 8
  store i16* %109, i16** %orig_line, align 8
  %110 = load i32, i32* %ry0, align 4
  %add79 = add nsw i32 %110, 8
  store i32 %add79, i32* %ry, align 4
  %111 = load i16*, i16** %orig_line, align 8
  %112 = load i32, i32* %x0, align 4
  %idxprom80 = sext i32 %112 to i64
  %arrayidx81 = getelementptr inbounds i16, i16* %111, i64 %idxprom80
  %113 = load i16, i16* %arrayidx81, align 2
  %conv82 = zext i16 %113 to i32
  %114 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %115 = load i16**, i16*** %ref_pic, align 8
  %116 = load i32, i32* %ry, align 4
  %117 = load i32, i32* %rx0, align 4
  %118 = load i32, i32* %img_height, align 4
  %119 = load i32, i32* %img_width, align 4
  %call83 = call zeroext i16 %114(i16** %115, i32 %116, i32 %117, i32 %118, i32 %119)
  %conv84 = zext i16 %call83 to i32
  %sub85 = sub nsw i32 %conv82, %conv84
  %120 = load i32*, i32** %d, align 8
  %incdec.ptr86 = getelementptr inbounds i32, i32* %120, i32 1
  store i32* %incdec.ptr86, i32** %d, align 8
  store i32 %sub85, i32* %120, align 4
  %121 = load i16*, i16** %orig_line, align 8
  %122 = load i32, i32* %x0, align 4
  %add87 = add nsw i32 %122, 1
  %idxprom88 = sext i32 %add87 to i64
  %arrayidx89 = getelementptr inbounds i16, i16* %121, i64 %idxprom88
  %123 = load i16, i16* %arrayidx89, align 2
  %conv90 = zext i16 %123 to i32
  %124 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %125 = load i16**, i16*** %ref_pic, align 8
  %126 = load i32, i32* %ry, align 4
  %127 = load i32, i32* %rx0, align 4
  %add91 = add nsw i32 %127, 4
  %128 = load i32, i32* %img_height, align 4
  %129 = load i32, i32* %img_width, align 4
  %call92 = call zeroext i16 %124(i16** %125, i32 %126, i32 %add91, i32 %128, i32 %129)
  %conv93 = zext i16 %call92 to i32
  %sub94 = sub nsw i32 %conv90, %conv93
  %130 = load i32*, i32** %d, align 8
  %incdec.ptr95 = getelementptr inbounds i32, i32* %130, i32 1
  store i32* %incdec.ptr95, i32** %d, align 8
  store i32 %sub94, i32* %130, align 4
  %131 = load i16*, i16** %orig_line, align 8
  %132 = load i32, i32* %x0, align 4
  %add96 = add nsw i32 %132, 2
  %idxprom97 = sext i32 %add96 to i64
  %arrayidx98 = getelementptr inbounds i16, i16* %131, i64 %idxprom97
  %133 = load i16, i16* %arrayidx98, align 2
  %conv99 = zext i16 %133 to i32
  %134 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %135 = load i16**, i16*** %ref_pic, align 8
  %136 = load i32, i32* %ry, align 4
  %137 = load i32, i32* %rx0, align 4
  %add100 = add nsw i32 %137, 8
  %138 = load i32, i32* %img_height, align 4
  %139 = load i32, i32* %img_width, align 4
  %call101 = call zeroext i16 %134(i16** %135, i32 %136, i32 %add100, i32 %138, i32 %139)
  %conv102 = zext i16 %call101 to i32
  %sub103 = sub nsw i32 %conv99, %conv102
  %140 = load i32*, i32** %d, align 8
  %incdec.ptr104 = getelementptr inbounds i32, i32* %140, i32 1
  store i32* %incdec.ptr104, i32** %d, align 8
  store i32 %sub103, i32* %140, align 4
  %141 = load i16*, i16** %orig_line, align 8
  %142 = load i32, i32* %x0, align 4
  %add105 = add nsw i32 %142, 3
  %idxprom106 = sext i32 %add105 to i64
  %arrayidx107 = getelementptr inbounds i16, i16* %141, i64 %idxprom106
  %143 = load i16, i16* %arrayidx107, align 2
  %conv108 = zext i16 %143 to i32
  %144 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %145 = load i16**, i16*** %ref_pic, align 8
  %146 = load i32, i32* %ry, align 4
  %147 = load i32, i32* %rx0, align 4
  %add109 = add nsw i32 %147, 12
  %148 = load i32, i32* %img_height, align 4
  %149 = load i32, i32* %img_width, align 4
  %call110 = call zeroext i16 %144(i16** %145, i32 %146, i32 %add109, i32 %148, i32 %149)
  %conv111 = zext i16 %call110 to i32
  %sub112 = sub nsw i32 %conv108, %conv111
  %150 = load i32*, i32** %d, align 8
  %incdec.ptr113 = getelementptr inbounds i32, i32* %150, i32 1
  store i32* %incdec.ptr113, i32** %d, align 8
  store i32 %sub112, i32* %150, align 4
  %151 = load i16**, i16*** %orig_pic.addr, align 8
  %152 = load i32, i32* %y0, align 4
  %add114 = add nsw i32 %152, 3
  %idxprom115 = sext i32 %add114 to i64
  %arrayidx116 = getelementptr inbounds i16*, i16** %151, i64 %idxprom115
  %153 = load i16*, i16** %arrayidx116, align 8
  store i16* %153, i16** %orig_line, align 8
  %154 = load i32, i32* %ry0, align 4
  %add117 = add nsw i32 %154, 12
  store i32 %add117, i32* %ry, align 4
  %155 = load i16*, i16** %orig_line, align 8
  %156 = load i32, i32* %x0, align 4
  %idxprom118 = sext i32 %156 to i64
  %arrayidx119 = getelementptr inbounds i16, i16* %155, i64 %idxprom118
  %157 = load i16, i16* %arrayidx119, align 2
  %conv120 = zext i16 %157 to i32
  %158 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %159 = load i16**, i16*** %ref_pic, align 8
  %160 = load i32, i32* %ry, align 4
  %161 = load i32, i32* %rx0, align 4
  %162 = load i32, i32* %img_height, align 4
  %163 = load i32, i32* %img_width, align 4
  %call121 = call zeroext i16 %158(i16** %159, i32 %160, i32 %161, i32 %162, i32 %163)
  %conv122 = zext i16 %call121 to i32
  %sub123 = sub nsw i32 %conv120, %conv122
  %164 = load i32*, i32** %d, align 8
  %incdec.ptr124 = getelementptr inbounds i32, i32* %164, i32 1
  store i32* %incdec.ptr124, i32** %d, align 8
  store i32 %sub123, i32* %164, align 4
  %165 = load i16*, i16** %orig_line, align 8
  %166 = load i32, i32* %x0, align 4
  %add125 = add nsw i32 %166, 1
  %idxprom126 = sext i32 %add125 to i64
  %arrayidx127 = getelementptr inbounds i16, i16* %165, i64 %idxprom126
  %167 = load i16, i16* %arrayidx127, align 2
  %conv128 = zext i16 %167 to i32
  %168 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %169 = load i16**, i16*** %ref_pic, align 8
  %170 = load i32, i32* %ry, align 4
  %171 = load i32, i32* %rx0, align 4
  %add129 = add nsw i32 %171, 4
  %172 = load i32, i32* %img_height, align 4
  %173 = load i32, i32* %img_width, align 4
  %call130 = call zeroext i16 %168(i16** %169, i32 %170, i32 %add129, i32 %172, i32 %173)
  %conv131 = zext i16 %call130 to i32
  %sub132 = sub nsw i32 %conv128, %conv131
  %174 = load i32*, i32** %d, align 8
  %incdec.ptr133 = getelementptr inbounds i32, i32* %174, i32 1
  store i32* %incdec.ptr133, i32** %d, align 8
  store i32 %sub132, i32* %174, align 4
  %175 = load i16*, i16** %orig_line, align 8
  %176 = load i32, i32* %x0, align 4
  %add134 = add nsw i32 %176, 2
  %idxprom135 = sext i32 %add134 to i64
  %arrayidx136 = getelementptr inbounds i16, i16* %175, i64 %idxprom135
  %177 = load i16, i16* %arrayidx136, align 2
  %conv137 = zext i16 %177 to i32
  %178 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %179 = load i16**, i16*** %ref_pic, align 8
  %180 = load i32, i32* %ry, align 4
  %181 = load i32, i32* %rx0, align 4
  %add138 = add nsw i32 %181, 8
  %182 = load i32, i32* %img_height, align 4
  %183 = load i32, i32* %img_width, align 4
  %call139 = call zeroext i16 %178(i16** %179, i32 %180, i32 %add138, i32 %182, i32 %183)
  %conv140 = zext i16 %call139 to i32
  %sub141 = sub nsw i32 %conv137, %conv140
  %184 = load i32*, i32** %d, align 8
  %incdec.ptr142 = getelementptr inbounds i32, i32* %184, i32 1
  store i32* %incdec.ptr142, i32** %d, align 8
  store i32 %sub141, i32* %184, align 4
  %185 = load i16*, i16** %orig_line, align 8
  %186 = load i32, i32* %x0, align 4
  %add143 = add nsw i32 %186, 3
  %idxprom144 = sext i32 %add143 to i64
  %arrayidx145 = getelementptr inbounds i16, i16* %185, i64 %idxprom144
  %187 = load i16, i16* %arrayidx145, align 2
  %conv146 = zext i16 %187 to i32
  %188 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %189 = load i16**, i16*** %ref_pic, align 8
  %190 = load i32, i32* %ry, align 4
  %191 = load i32, i32* %rx0, align 4
  %add147 = add nsw i32 %191, 12
  %192 = load i32, i32* %img_height, align 4
  %193 = load i32, i32* %img_width, align 4
  %call148 = call zeroext i16 %188(i16** %189, i32 %190, i32 %add147, i32 %192, i32 %193)
  %conv149 = zext i16 %call148 to i32
  %sub150 = sub nsw i32 %conv146, %conv149
  %194 = load i32*, i32** %d, align 8
  store i32 %sub150, i32* %194, align 4
  %195 = load i32, i32* %useABT.addr, align 4
  %tobool151 = icmp ne i32 %195, 0
  br i1 %tobool151, label %if.else, label %if.then

if.then:                                          ; preds = %for.body4
  %arraydecay152 = getelementptr inbounds [16 x i32], [16 x i32]* %diff, i64 0, i64 0
  %196 = load %struct.InputParameters*, %struct.InputParameters** @input, align 8
  %hadamard = getelementptr inbounds %struct.InputParameters, %struct.InputParameters* %196, i32 0, i32 6
  %197 = load i32, i32* %hadamard, align 8
  %call153 = call i32 @SATD(i32* %arraydecay152, i32 %197)
  %198 = load i32, i32* %mcost, align 4
  %add154 = add nsw i32 %198, %call153
  store i32 %add154, i32* %mcost, align 4
  %199 = load i32, i32* %min_mcost.addr, align 4
  %cmp155 = icmp sgt i32 %add154, %199
  br i1 %cmp155, label %if.then157, label %if.end

if.then157:                                       ; preds = %if.then
  store i32 1, i32* %abort_search, align 4
  br label %for.end181

if.end:                                           ; preds = %if.then
  br label %if.end178

if.else:                                          ; preds = %for.body4
  %200 = load i32, i32* %y0, align 4
  store i32 %200, i32* %yy, align 4
  store i32 0, i32* %kk, align 4
  br label %for.cond158

for.cond158:                                      ; preds = %for.inc175, %if.else
  %201 = load i32, i32* %yy, align 4
  %202 = load i32, i32* %y0, align 4
  %add159 = add nsw i32 %202, 4
  %cmp160 = icmp slt i32 %201, %add159
  br i1 %cmp160, label %for.body162, label %for.end177

for.body162:                                      ; preds = %for.cond158
  %203 = load i32, i32* %x0, align 4
  store i32 %203, i32* %xx, align 4
  br label %for.cond163

for.cond163:                                      ; preds = %for.inc, %for.body162
  %204 = load i32, i32* %xx, align 4
  %205 = load i32, i32* %x0, align 4
  %add164 = add nsw i32 %205, 4
  %cmp165 = icmp slt i32 %204, %add164
  br i1 %cmp165, label %for.body167, label %for.end

for.body167:                                      ; preds = %for.cond163
  %206 = load i32, i32* %kk, align 4
  %idxprom168 = sext i32 %206 to i64
  %arrayidx169 = getelementptr inbounds [16 x i32], [16 x i32]* %diff, i64 0, i64 %idxprom168
  %207 = load i32, i32* %arrayidx169, align 4
  %208 = load i32, i32* %yy, align 4
  %idxprom170 = sext i32 %208 to i64
  %arrayidx171 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %curr_diff, i64 0, i64 %idxprom170
  %209 = load i32, i32* %xx, align 4
  %idxprom172 = sext i32 %209 to i64
  %arrayidx173 = getelementptr inbounds [16 x i32], [16 x i32]* %arrayidx171, i64 0, i64 %idxprom172
  store i32 %207, i32* %arrayidx173, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body167
  %210 = load i32, i32* %xx, align 4
  %inc = add nsw i32 %210, 1
  store i32 %inc, i32* %xx, align 4
  %211 = load i32, i32* %kk, align 4
  %inc174 = add nsw i32 %211, 1
  store i32 %inc174, i32* %kk, align 4
  br label %for.cond163

for.end:                                          ; preds = %for.cond163
  br label %for.inc175

for.inc175:                                       ; preds = %for.end
  %212 = load i32, i32* %yy, align 4
  %inc176 = add nsw i32 %212, 1
  store i32 %inc176, i32* %yy, align 4
  br label %for.cond158

for.end177:                                       ; preds = %for.cond158
  br label %if.end178

if.end178:                                        ; preds = %for.end177, %if.end
  br label %for.inc179

for.inc179:                                       ; preds = %if.end178
  %213 = load i32, i32* %x0, align 4
  %add180 = add nsw i32 %213, 4
  store i32 %add180, i32* %x0, align 4
  br label %for.cond2

for.end181:                                       ; preds = %if.then157, %for.cond2
  br label %for.inc182

for.inc182:                                       ; preds = %for.end181
  %214 = load i32, i32* %y0, align 4
  %add183 = add nsw i32 %214, 4
  store i32 %add183, i32* %y0, align 4
  br label %for.cond

for.end184:                                       ; preds = %land.end
  %215 = load i32, i32* %mcost, align 4
  %216 = load i32, i32* %canary
  %217 = icmp eq i32 %216, 891898840
  br i1 %217, label %218, label %func_exit

218:                                              ; preds = %for.end184, %func_exit
  ret i32 %215

func_exit:                                        ; preds = %for.end184
  call void @detect_breach()
  br label %218
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @FastSubPelBlockMotionSearch.2(i16** %orig_pic, i16 signext %ref, i32 %list, i32 %pic_pix_x, i32 %pic_pix_y, i32 %blocktype, i16 signext %pred_mv_x, i16 signext %pred_mv_y, i16* %mv_x, i16* %mv_y, i32 %search_pos2, i32 %search_pos4, i32 %min_mcost, double %lambda, i32 %useABT) #0 {
entry:
  %lambda_factor = alloca i32, align 4
  %canary = alloca i32
  store i32 559200627, i32* %canary
  %pic_pix_x.addr = alloca i32, align 4
  %pic_pix_y.addr = alloca i32, align 4
  %abort_search = alloca i32, align 4
  %mcost = alloca i32, align 4
  %i = alloca i32, align 4
  %blocktype.addr = alloca i32, align 4
  %pred_frac_mv_x = alloca i32, align 4
  %cand_mv_y = alloca i32, align 4
  %search_range_dynamic = alloca i32, align 4
  %search_pos2.addr = alloca i32, align 4
  %pred_frac_mv_y = alloca i32, align 4
  %orig_pic.addr = alloca i16**, align 8
  %search_pos4.addr = alloca i32, align 4
  %mv_y.addr = alloca i16*, align 8
  %min_mcost.addr = alloca i32, align 4
  %blocksize_x = alloca i32, align 4
  %list_offset = alloca i32, align 4
  %currmv_x = alloca i32, align 4
  %mv_shift = alloca i32, align 4
  %list.addr = alloca i32, align 4
  %lambda.addr = alloca double, align 8
  %currmv_y = alloca i32, align 4
  %iSADLayer = alloca i32, align 4
  %pred_frac_up_mv_y = alloca i32, align 4
  %pic4_pix_y = alloca i32, align 4
  %mv_x.addr = alloca i16*, align 8
  %pred_mv_y.addr = alloca i16, align 2
  %iCurrSearchRange = alloca i32, align 4
  %useABT.addr = alloca i32, align 4
  %blocksize_y = alloca i32, align 4
  %max_pos_x4 = alloca i32, align 4
  %iXMinNow = alloca i32, align 4
  %pic4_pix_x = alloca i32, align 4
  %cand_mv_x = alloca i32, align 4
  %mv_cost = alloca i32, align 4
  %max_pos_y4 = alloca i32, align 4
  %ref.addr = alloca i16, align 2
  %pred_mv_x.addr = alloca i16, align 2
  %iYMinNow = alloca i32, align 4
  %m = alloca i32, align 4
  %ref_picture = alloca %struct.storable_picture*, align 8
  %pred_frac_up_mv_x = alloca i32, align 4
  store i16** %orig_pic, i16*** %orig_pic.addr, align 8
  store i16 %ref, i16* %ref.addr, align 2
  store i32 %list, i32* %list.addr, align 4
  store i32 %pic_pix_x, i32* %pic_pix_x.addr, align 4
  store i32 %pic_pix_y, i32* %pic_pix_y.addr, align 4
  store i32 %blocktype, i32* %blocktype.addr, align 4
  store i16 %pred_mv_x, i16* %pred_mv_x.addr, align 2
  store i16 %pred_mv_y, i16* %pred_mv_y.addr, align 2
  store i16* %mv_x, i16** %mv_x.addr, align 8
  store i16* %mv_y, i16** %mv_y.addr, align 8
  store i32 %search_pos2, i32* %search_pos2.addr, align 4
  store i32 %search_pos4, i32* %search_pos4.addr, align 4
  store i32 %min_mcost, i32* %min_mcost.addr, align 4
  store double %lambda, double* %lambda.addr, align 8
  store i32 %useABT, i32* %useABT.addr, align 4
  %0 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %MbaffFrameFlag = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %0, i32 0, i32 90
  %1 = load i32, i32* %MbaffFrameFlag, align 8
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %mb_data = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %2, i32 0, i32 51
  %3 = load %struct.macroblock*, %struct.macroblock** %mb_data, align 8
  %4 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %current_mb_nr = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %4, i32 0, i32 3
  %5 = load i32, i32* %current_mb_nr, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 %idxprom
  %mb_field = getelementptr inbounds %struct.macroblock, %struct.macroblock* %arrayidx, i32 0, i32 22
  %6 = load i32, i32* %mb_field, align 4
  %tobool1 = icmp ne i32 %6, 0
  br i1 %tobool1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %7 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %current_mb_nr2 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %7, i32 0, i32 3
  %8 = load i32, i32* %current_mb_nr2, align 4
  %rem = srem i32 %8, 2
  %tobool3 = icmp ne i32 %rem, 0
  %9 = zext i1 %tobool3 to i64
  %cond = select i1 %tobool3, i32 4, i32 2
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond4 = phi i32 [ %cond, %cond.true ], [ 0, %cond.false ]
  store i32 %cond4, i32* %list_offset, align 4
  %10 = load i32, i32* %list.addr, align 4
  %11 = load i32, i32* %list_offset, align 4
  %add = add nsw i32 %10, %11
  %idxprom5 = sext i32 %add to i64
  %arrayidx6 = getelementptr inbounds [6 x %struct.storable_picture**], [6 x %struct.storable_picture**]* @listX, i64 0, i64 %idxprom5
  %12 = load %struct.storable_picture**, %struct.storable_picture*** %arrayidx6, align 8
  %13 = load i16, i16* %ref.addr, align 2
  %idxprom7 = sext i16 %13 to i64
  %arrayidx8 = getelementptr inbounds %struct.storable_picture*, %struct.storable_picture** %12, i64 %idxprom7
  %14 = load %struct.storable_picture*, %struct.storable_picture** %arrayidx8, align 8
  store %struct.storable_picture* %14, %struct.storable_picture** %ref_picture, align 8
  %15 = load double, double* %lambda.addr, align 8
  %mul = fmul double 6.553600e+04, %15
  %add9 = fadd double %mul, 5.000000e-01
  %conv = fptosi double %add9 to i32
  store i32 %conv, i32* %lambda_factor, align 4
  store i32 0, i32* %mv_shift, align 4
  %16 = load %struct.InputParameters*, %struct.InputParameters** @input, align 8
  %blc_size = getelementptr inbounds %struct.InputParameters, %struct.InputParameters* %16, i32 0, i32 20
  %17 = load i32, i32* %blocktype.addr, align 4
  %idxprom10 = sext i32 %17 to i64
  %arrayidx11 = getelementptr inbounds [8 x [2 x i32]], [8 x [2 x i32]]* %blc_size, i64 0, i64 %idxprom10
  %arrayidx12 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx11, i64 0, i64 0
  %18 = load i32, i32* %arrayidx12, align 8
  store i32 %18, i32* %blocksize_x, align 4
  %19 = load %struct.InputParameters*, %struct.InputParameters** @input, align 8
  %blc_size13 = getelementptr inbounds %struct.InputParameters, %struct.InputParameters* %19, i32 0, i32 20
  %20 = load i32, i32* %blocktype.addr, align 4
  %idxprom14 = sext i32 %20 to i64
  %arrayidx15 = getelementptr inbounds [8 x [2 x i32]], [8 x [2 x i32]]* %blc_size13, i64 0, i64 %idxprom14
  %arrayidx16 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx15, i64 0, i64 1
  %21 = load i32, i32* %arrayidx16, align 4
  store i32 %21, i32* %blocksize_y, align 4
  %22 = load i32, i32* %pic_pix_x.addr, align 4
  %shl = shl i32 %22, 2
  store i32 %shl, i32* %pic4_pix_x, align 4
  %23 = load i32, i32* %pic_pix_y.addr, align 4
  %shl17 = shl i32 %23, 2
  store i32 %shl17, i32* %pic4_pix_y, align 4
  %24 = load %struct.storable_picture*, %struct.storable_picture** %ref_picture, align 8
  %size_x = getelementptr inbounds %struct.storable_picture, %struct.storable_picture* %24, i32 0, i32 18
  %25 = load i32, i32* %size_x, align 8
  %26 = load i32, i32* %blocksize_x, align 4
  %sub = sub nsw i32 %25, %26
  %add18 = add nsw i32 %sub, 1
  %shl19 = shl i32 %add18, 2
  store i32 %shl19, i32* %max_pos_x4, align 4
  %27 = load %struct.storable_picture*, %struct.storable_picture** %ref_picture, align 8
  %size_y = getelementptr inbounds %struct.storable_picture, %struct.storable_picture* %27, i32 0, i32 19
  %28 = load i32, i32* %size_y, align 4
  %29 = load i32, i32* %blocksize_y, align 4
  %sub20 = sub nsw i32 %28, %29
  %add21 = add nsw i32 %sub20, 1
  %shl22 = shl i32 %add21, 2
  store i32 %shl22, i32* %max_pos_y4, align 4
  store i32 0, i32* %currmv_x, align 4
  store i32 0, i32* %currmv_y, align 4
  %30 = load i16*, i16** %mv_x.addr, align 8
  %31 = load i16, i16* %30, align 2
  %conv23 = sext i16 %31 to i32
  %shl24 = shl i32 %conv23, 2
  %conv25 = trunc i32 %shl24 to i16
  store i16 %conv25, i16* %30, align 2
  %32 = load i16*, i16** %mv_y.addr, align 8
  %33 = load i16, i16* %32, align 2
  %conv26 = sext i16 %33 to i32
  %shl27 = shl i32 %conv26, 2
  %conv28 = trunc i32 %shl27 to i16
  store i16 %conv28, i16* %32, align 2
  %34 = load i32, i32* %pic4_pix_x, align 4
  %35 = load i16*, i16** %mv_x.addr, align 8
  %36 = load i16, i16* %35, align 2
  %conv29 = sext i16 %36 to i32
  %add30 = add nsw i32 %34, %conv29
  %cmp = icmp sgt i32 %add30, 1
  br i1 %cmp, label %land.lhs.true32, label %if.else

land.lhs.true32:                                  ; preds = %cond.end
  %37 = load i32, i32* %pic4_pix_x, align 4
  %38 = load i16*, i16** %mv_x.addr, align 8
  %39 = load i16, i16* %38, align 2
  %conv33 = sext i16 %39 to i32
  %add34 = add nsw i32 %37, %conv33
  %40 = load i32, i32* %max_pos_x4, align 4
  %sub35 = sub nsw i32 %40, 2
  %cmp36 = icmp slt i32 %add34, %sub35
  br i1 %cmp36, label %land.lhs.true38, label %if.else

land.lhs.true38:                                  ; preds = %land.lhs.true32
  %41 = load i32, i32* %pic4_pix_y, align 4
  %42 = load i16*, i16** %mv_y.addr, align 8
  %43 = load i16, i16* %42, align 2
  %conv39 = sext i16 %43 to i32
  %add40 = add nsw i32 %41, %conv39
  %cmp41 = icmp sgt i32 %add40, 1
  br i1 %cmp41, label %land.lhs.true43, label %if.else

land.lhs.true43:                                  ; preds = %land.lhs.true38
  %44 = load i32, i32* %pic4_pix_y, align 4
  %45 = load i16*, i16** %mv_y.addr, align 8
  %46 = load i16, i16* %45, align 2
  %conv44 = sext i16 %46 to i32
  %add45 = add nsw i32 %44, %conv44
  %47 = load i32, i32* %max_pos_y4, align 4
  %sub46 = sub nsw i32 %47, 2
  %cmp47 = icmp slt i32 %add45, %sub46
  br i1 %cmp47, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true43
  store i16 (i16**, i32, i32, i32, i32)* @FastPelY_14, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  br label %if.end

if.else:                                          ; preds = %land.lhs.true43, %land.lhs.true38, %land.lhs.true32, %cond.end
  store i16 (i16**, i32, i32, i32, i32)* @UMVPelY_14, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  store i32 3, i32* %search_range_dynamic, align 4
  %48 = load i16, i16* %pred_mv_x.addr, align 2
  %conv49 = sext i16 %48 to i32
  %49 = load i16*, i16** %mv_x.addr, align 8
  %50 = load i16, i16* %49, align 2
  %conv50 = sext i16 %50 to i32
  %sub51 = sub nsw i32 %conv49, %conv50
  %rem52 = srem i32 %sub51, 4
  store i32 %rem52, i32* %pred_frac_mv_x, align 4
  %51 = load i16, i16* %pred_mv_y.addr, align 2
  %conv53 = sext i16 %51 to i32
  %52 = load i16*, i16** %mv_y.addr, align 8
  %53 = load i16, i16* %52, align 2
  %conv54 = sext i16 %53 to i32
  %sub55 = sub nsw i32 %conv53, %conv54
  %rem56 = srem i32 %sub55, 4
  store i32 %rem56, i32* %pred_frac_mv_y, align 4
  %54 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @pred_MV_uplayer, i64 0, i64 0), align 4
  %55 = load i16*, i16** %mv_x.addr, align 8
  %56 = load i16, i16* %55, align 2
  %conv57 = sext i16 %56 to i32
  %sub58 = sub nsw i32 %54, %conv57
  %rem59 = srem i32 %sub58, 4
  store i32 %rem59, i32* %pred_frac_up_mv_x, align 4
  %57 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @pred_MV_uplayer, i64 0, i64 1), align 4
  %58 = load i16*, i16** %mv_y.addr, align 8
  %59 = load i16, i16* %58, align 2
  %conv60 = sext i16 %59 to i32
  %sub61 = sub nsw i32 %57, %conv60
  %rem62 = srem i32 %sub61, 4
  store i32 %rem62, i32* %pred_frac_up_mv_y, align 4
  %60 = load i8**, i8*** @SearchState, align 8
  %arrayidx63 = getelementptr inbounds i8*, i8** %60, i64 0
  %61 = load i8*, i8** %arrayidx63, align 8
  %62 = load i32, i32* %search_range_dynamic, align 4
  %mul64 = mul nsw i32 2, %62
  %add65 = add nsw i32 %mul64, 1
  %63 = load i32, i32* %search_range_dynamic, align 4
  %mul66 = mul nsw i32 2, %63
  %add67 = add nsw i32 %mul66, 1
  %mul68 = mul nsw i32 %add65, %add67
  %conv69 = sext i32 %mul68 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %61, i8 0, i64 %conv69, i1 false)
  %64 = load %struct.InputParameters*, %struct.InputParameters** @input, align 8
  %hadamard = getelementptr inbounds %struct.InputParameters, %struct.InputParameters* %64, i32 0, i32 6
  %65 = load i32, i32* %hadamard, align 8
  %tobool70 = icmp ne i32 %65, 0
  br i1 %tobool70, label %if.then71, label %if.else94

if.then71:                                        ; preds = %if.end
  %66 = load i16*, i16** %mv_x.addr, align 8
  %67 = load i16, i16* %66, align 2
  %conv72 = sext i16 %67 to i32
  store i32 %conv72, i32* %cand_mv_x, align 4
  %68 = load i16*, i16** %mv_y.addr, align 8
  %69 = load i16, i16* %68, align 2
  %conv73 = sext i16 %69 to i32
  store i32 %conv73, i32* %cand_mv_y, align 4
  %70 = load i32, i32* %lambda_factor, align 4
  %71 = load i32*, i32** @mvbits, align 8
  %72 = load i32, i32* %cand_mv_x, align 4
  %73 = load i32, i32* %mv_shift, align 4
  %shl74 = shl i32 %72, %73
  %74 = load i16, i16* %pred_mv_x.addr, align 2
  %conv75 = sext i16 %74 to i32
  %sub76 = sub nsw i32 %shl74, %conv75
  %idxprom77 = sext i32 %sub76 to i64
  %arrayidx78 = getelementptr inbounds i32, i32* %71, i64 %idxprom77
  %75 = load i32, i32* %arrayidx78, align 4
  %76 = load i32*, i32** @mvbits, align 8
  %77 = load i32, i32* %cand_mv_y, align 4
  %78 = load i32, i32* %mv_shift, align 4
  %shl79 = shl i32 %77, %78
  %79 = load i16, i16* %pred_mv_y.addr, align 2
  %conv80 = sext i16 %79 to i32
  %sub81 = sub nsw i32 %shl79, %conv80
  %idxprom82 = sext i32 %sub81 to i64
  %arrayidx83 = getelementptr inbounds i32, i32* %76, i64 %idxprom82
  %80 = load i32, i32* %arrayidx83, align 4
  %add84 = add nsw i32 %75, %80
  %mul85 = mul nsw i32 %70, %add84
  %shr = ashr i32 %mul85, 16
  store i32 %shr, i32* %mv_cost, align 4
  %81 = load i32, i32* %pic_pix_x.addr, align 4
  %82 = load i32, i32* %pic_pix_y.addr, align 4
  %83 = load i32, i32* %blocksize_x, align 4
  %84 = load i32, i32* %blocksize_y, align 4
  %85 = load i32, i32* %cand_mv_x, align 4
  %86 = load i32, i32* %cand_mv_y, align 4
  %87 = load %struct.storable_picture*, %struct.storable_picture** %ref_picture, align 8
  %88 = load i16**, i16*** %orig_pic.addr, align 8
  %89 = load i32, i32* %mv_cost, align 4
  %90 = load i32, i32* %min_mcost.addr, align 4
  %91 = load i32, i32* %useABT.addr, align 4
  %call = call i32 @AddUpSADQuarter(i32 %81, i32 %82, i32 %83, i32 %84, i32 %85, i32 %86, %struct.storable_picture* %87, i16** %88, i32 %89, i32 %90, i32 %91)
  store i32 %call, i32* %mcost, align 4
  %92 = load i8**, i8*** @SearchState, align 8
  %93 = load i32, i32* %search_range_dynamic, align 4
  %idxprom86 = sext i32 %93 to i64
  %arrayidx87 = getelementptr inbounds i8*, i8** %92, i64 %idxprom86
  %94 = load i8*, i8** %arrayidx87, align 8
  %95 = load i32, i32* %search_range_dynamic, align 4
  %idxprom88 = sext i32 %95 to i64
  %arrayidx89 = getelementptr inbounds i8, i8* %94, i64 %idxprom88
  store i8 1, i8* %arrayidx89, align 1
  %96 = load i32, i32* %mcost, align 4
  %97 = load i32, i32* %min_mcost.addr, align 4
  %cmp90 = icmp slt i32 %96, %97
  br i1 %cmp90, label %if.then92, label %if.end93

if.then92:                                        ; preds = %if.then71
  %98 = load i32, i32* %mcost, align 4
  store i32 %98, i32* %min_mcost.addr, align 4
  %99 = load i32, i32* %cand_mv_x, align 4
  store i32 %99, i32* %currmv_x, align 4
  %100 = load i32, i32* %cand_mv_y, align 4
  store i32 %100, i32* %currmv_y, align 4
  br label %if.end93

if.end93:                                         ; preds = %if.then92, %if.then71
  br label %if.end101

if.else94:                                        ; preds = %if.end
  %101 = load i8**, i8*** @SearchState, align 8
  %102 = load i32, i32* %search_range_dynamic, align 4
  %idxprom95 = sext i32 %102 to i64
  %arrayidx96 = getelementptr inbounds i8*, i8** %101, i64 %idxprom95
  %103 = load i8*, i8** %arrayidx96, align 8
  %104 = load i32, i32* %search_range_dynamic, align 4
  %idxprom97 = sext i32 %104 to i64
  %arrayidx98 = getelementptr inbounds i8, i8* %103, i64 %idxprom97
  store i8 1, i8* %arrayidx98, align 1
  %105 = load i16*, i16** %mv_x.addr, align 8
  %106 = load i16, i16* %105, align 2
  %conv99 = sext i16 %106 to i32
  store i32 %conv99, i32* %currmv_x, align 4
  %107 = load i16*, i16** %mv_y.addr, align 8
  %108 = load i16, i16* %107, align 2
  %conv100 = sext i16 %108 to i32
  store i32 %conv100, i32* %currmv_y, align 4
  br label %if.end101

if.end101:                                        ; preds = %if.else94, %if.end93
  %109 = load i32, i32* %pred_frac_mv_x, align 4
  %cmp102 = icmp ne i32 %109, 0
  br i1 %cmp102, label %if.then106, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end101
  %110 = load i32, i32* %pred_frac_mv_y, align 4
  %cmp104 = icmp ne i32 %110, 0
  br i1 %cmp104, label %if.then106, label %if.end139

if.then106:                                       ; preds = %lor.lhs.false, %if.end101
  %111 = load i16*, i16** %mv_x.addr, align 8
  %112 = load i16, i16* %111, align 2
  %conv107 = sext i16 %112 to i32
  %113 = load i32, i32* %pred_frac_mv_x, align 4
  %add108 = add nsw i32 %conv107, %113
  store i32 %add108, i32* %cand_mv_x, align 4
  %114 = load i16*, i16** %mv_y.addr, align 8
  %115 = load i16, i16* %114, align 2
  %conv109 = sext i16 %115 to i32
  %116 = load i32, i32* %pred_frac_mv_y, align 4
  %add110 = add nsw i32 %conv109, %116
  store i32 %add110, i32* %cand_mv_y, align 4
  %117 = load i32, i32* %lambda_factor, align 4
  %118 = load i32*, i32** @mvbits, align 8
  %119 = load i32, i32* %cand_mv_x, align 4
  %120 = load i32, i32* %mv_shift, align 4
  %shl111 = shl i32 %119, %120
  %121 = load i16, i16* %pred_mv_x.addr, align 2
  %conv112 = sext i16 %121 to i32
  %sub113 = sub nsw i32 %shl111, %conv112
  %idxprom114 = sext i32 %sub113 to i64
  %arrayidx115 = getelementptr inbounds i32, i32* %118, i64 %idxprom114
  %122 = load i32, i32* %arrayidx115, align 4
  %123 = load i32*, i32** @mvbits, align 8
  %124 = load i32, i32* %cand_mv_y, align 4
  %125 = load i32, i32* %mv_shift, align 4
  %shl116 = shl i32 %124, %125
  %126 = load i16, i16* %pred_mv_y.addr, align 2
  %conv117 = sext i16 %126 to i32
  %sub118 = sub nsw i32 %shl116, %conv117
  %idxprom119 = sext i32 %sub118 to i64
  %arrayidx120 = getelementptr inbounds i32, i32* %123, i64 %idxprom119
  %127 = load i32, i32* %arrayidx120, align 4
  %add121 = add nsw i32 %122, %127
  %mul122 = mul nsw i32 %117, %add121
  %shr123 = ashr i32 %mul122, 16
  store i32 %shr123, i32* %mv_cost, align 4
  %128 = load i32, i32* %pic_pix_x.addr, align 4
  %129 = load i32, i32* %pic_pix_y.addr, align 4
  %130 = load i32, i32* %blocksize_x, align 4
  %131 = load i32, i32* %blocksize_y, align 4
  %132 = load i32, i32* %cand_mv_x, align 4
  %133 = load i32, i32* %cand_mv_y, align 4
  %134 = load %struct.storable_picture*, %struct.storable_picture** %ref_picture, align 8
  %135 = load i16**, i16*** %orig_pic.addr, align 8
  %136 = load i32, i32* %mv_cost, align 4
  %137 = load i32, i32* %min_mcost.addr, align 4
  %138 = load i32, i32* %useABT.addr, align 4
  %call124 = call i32 @AddUpSADQuarter(i32 %128, i32 %129, i32 %130, i32 %131, i32 %132, i32 %133, %struct.storable_picture* %134, i16** %135, i32 %136, i32 %137, i32 %138)
  store i32 %call124, i32* %mcost, align 4
  %139 = load i8**, i8*** @SearchState, align 8
  %140 = load i32, i32* %cand_mv_y, align 4
  %141 = load i16*, i16** %mv_y.addr, align 8
  %142 = load i16, i16* %141, align 2
  %conv125 = sext i16 %142 to i32
  %sub126 = sub nsw i32 %140, %conv125
  %143 = load i32, i32* %search_range_dynamic, align 4
  %add127 = add nsw i32 %sub126, %143
  %idxprom128 = sext i32 %add127 to i64
  %arrayidx129 = getelementptr inbounds i8*, i8** %139, i64 %idxprom128
  %144 = load i8*, i8** %arrayidx129, align 8
  %145 = load i32, i32* %cand_mv_x, align 4
  %146 = load i16*, i16** %mv_x.addr, align 8
  %147 = load i16, i16* %146, align 2
  %conv130 = sext i16 %147 to i32
  %sub131 = sub nsw i32 %145, %conv130
  %148 = load i32, i32* %search_range_dynamic, align 4
  %add132 = add nsw i32 %sub131, %148
  %idxprom133 = sext i32 %add132 to i64
  %arrayidx134 = getelementptr inbounds i8, i8* %144, i64 %idxprom133
  store i8 1, i8* %arrayidx134, align 1
  %149 = load i32, i32* %mcost, align 4
  %150 = load i32, i32* %min_mcost.addr, align 4
  %cmp135 = icmp slt i32 %149, %150
  br i1 %cmp135, label %if.then137, label %if.end138

if.then137:                                       ; preds = %if.then106
  %151 = load i32, i32* %mcost, align 4
  store i32 %151, i32* %min_mcost.addr, align 4
  %152 = load i32, i32* %cand_mv_x, align 4
  store i32 %152, i32* %currmv_x, align 4
  %153 = load i32, i32* %cand_mv_y, align 4
  store i32 %153, i32* %currmv_y, align 4
  br label %if.end138

if.end138:                                        ; preds = %if.then137, %if.then106
  br label %if.end139

if.end139:                                        ; preds = %if.end138, %lor.lhs.false
  %154 = load i32, i32* %currmv_x, align 4
  store i32 %154, i32* %iXMinNow, align 4
  %155 = load i32, i32* %currmv_y, align 4
  store i32 %155, i32* %iYMinNow, align 4
  %156 = load i32, i32* %search_range_dynamic, align 4
  %mul140 = mul nsw i32 2, %156
  %add141 = add nsw i32 %mul140, 1
  store i32 %add141, i32* %iCurrSearchRange, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc211, %if.end139
  %157 = load i32, i32* %i, align 4
  %158 = load i32, i32* %iCurrSearchRange, align 4
  %cmp142 = icmp slt i32 %157, %158
  br i1 %cmp142, label %for.body, label %for.end213

for.body:                                         ; preds = %for.cond
  store i32 1, i32* %abort_search, align 4
  store i32 65536, i32* %iSADLayer, align 4
  store i32 0, i32* %m, align 4
  br label %for.cond144

for.cond144:                                      ; preds = %for.inc, %for.body
  %159 = load i32, i32* %m, align 4
  %cmp145 = icmp slt i32 %159, 4
  br i1 %cmp145, label %for.body147, label %for.end

for.body147:                                      ; preds = %for.cond144
  %160 = load i32, i32* %iXMinNow, align 4
  %161 = load i32, i32* %m, align 4
  %idxprom148 = sext i32 %161 to i64
  %arrayidx149 = getelementptr inbounds [4 x i32], [4 x i32]* @FastSubPelBlockMotionSearch.Diamond_x, i64 0, i64 %idxprom148
  %162 = load i32, i32* %arrayidx149, align 4
  %add150 = add nsw i32 %160, %162
  store i32 %add150, i32* %cand_mv_x, align 4
  %163 = load i32, i32* %iYMinNow, align 4
  %164 = load i32, i32* %m, align 4
  %idxprom151 = sext i32 %164 to i64
  %arrayidx152 = getelementptr inbounds [4 x i32], [4 x i32]* @FastSubPelBlockMotionSearch.Diamond_y, i64 0, i64 %idxprom151
  %165 = load i32, i32* %arrayidx152, align 4
  %add153 = add nsw i32 %163, %165
  store i32 %add153, i32* %cand_mv_y, align 4
  %166 = load i32, i32* %cand_mv_x, align 4
  %167 = load i16*, i16** %mv_x.addr, align 8
  %168 = load i16, i16* %167, align 2
  %conv154 = sext i16 %168 to i32
  %sub155 = sub nsw i32 %166, %conv154
  %call156 = call i32 @abs(i32 %sub155) #6
  %169 = load i32, i32* %search_range_dynamic, align 4
  %cmp157 = icmp sle i32 %call156, %169
  br i1 %cmp157, label %land.lhs.true159, label %if.end207

land.lhs.true159:                                 ; preds = %for.body147
  %170 = load i32, i32* %cand_mv_y, align 4
  %171 = load i16*, i16** %mv_y.addr, align 8
  %172 = load i16, i16* %171, align 2
  %conv160 = sext i16 %172 to i32
  %sub161 = sub nsw i32 %170, %conv160
  %call162 = call i32 @abs(i32 %sub161) #6
  %173 = load i32, i32* %search_range_dynamic, align 4
  %cmp163 = icmp sle i32 %call162, %173
  br i1 %cmp163, label %if.then165, label %if.end207

if.then165:                                       ; preds = %land.lhs.true159
  %174 = load i8**, i8*** @SearchState, align 8
  %175 = load i32, i32* %cand_mv_y, align 4
  %176 = load i16*, i16** %mv_y.addr, align 8
  %177 = load i16, i16* %176, align 2
  %conv166 = sext i16 %177 to i32
  %sub167 = sub nsw i32 %175, %conv166
  %178 = load i32, i32* %search_range_dynamic, align 4
  %add168 = add nsw i32 %sub167, %178
  %idxprom169 = sext i32 %add168 to i64
  %arrayidx170 = getelementptr inbounds i8*, i8** %174, i64 %idxprom169
  %179 = load i8*, i8** %arrayidx170, align 8
  %180 = load i32, i32* %cand_mv_x, align 4
  %181 = load i16*, i16** %mv_x.addr, align 8
  %182 = load i16, i16* %181, align 2
  %conv171 = sext i16 %182 to i32
  %sub172 = sub nsw i32 %180, %conv171
  %183 = load i32, i32* %search_range_dynamic, align 4
  %add173 = add nsw i32 %sub172, %183
  %idxprom174 = sext i32 %add173 to i64
  %arrayidx175 = getelementptr inbounds i8, i8* %179, i64 %idxprom174
  %184 = load i8, i8* %arrayidx175, align 1
  %tobool176 = icmp ne i8 %184, 0
  br i1 %tobool176, label %if.end206, label %if.then177

if.then177:                                       ; preds = %if.then165
  %185 = load i32, i32* %lambda_factor, align 4
  %186 = load i32*, i32** @mvbits, align 8
  %187 = load i32, i32* %cand_mv_x, align 4
  %188 = load i32, i32* %mv_shift, align 4
  %shl178 = shl i32 %187, %188
  %189 = load i16, i16* %pred_mv_x.addr, align 2
  %conv179 = sext i16 %189 to i32
  %sub180 = sub nsw i32 %shl178, %conv179
  %idxprom181 = sext i32 %sub180 to i64
  %arrayidx182 = getelementptr inbounds i32, i32* %186, i64 %idxprom181
  %190 = load i32, i32* %arrayidx182, align 4
  %191 = load i32*, i32** @mvbits, align 8
  %192 = load i32, i32* %cand_mv_y, align 4
  %193 = load i32, i32* %mv_shift, align 4
  %shl183 = shl i32 %192, %193
  %194 = load i16, i16* %pred_mv_y.addr, align 2
  %conv184 = sext i16 %194 to i32
  %sub185 = sub nsw i32 %shl183, %conv184
  %idxprom186 = sext i32 %sub185 to i64
  %arrayidx187 = getelementptr inbounds i32, i32* %191, i64 %idxprom186
  %195 = load i32, i32* %arrayidx187, align 4
  %add188 = add nsw i32 %190, %195
  %mul189 = mul nsw i32 %185, %add188
  %shr190 = ashr i32 %mul189, 16
  store i32 %shr190, i32* %mv_cost, align 4
  %196 = load i32, i32* %pic_pix_x.addr, align 4
  %197 = load i32, i32* %pic_pix_y.addr, align 4
  %198 = load i32, i32* %blocksize_x, align 4
  %199 = load i32, i32* %blocksize_y, align 4
  %200 = load i32, i32* %cand_mv_x, align 4
  %201 = load i32, i32* %cand_mv_y, align 4
  %202 = load %struct.storable_picture*, %struct.storable_picture** %ref_picture, align 8
  %203 = load i16**, i16*** %orig_pic.addr, align 8
  %204 = load i32, i32* %mv_cost, align 4
  %205 = load i32, i32* %min_mcost.addr, align 4
  %206 = load i32, i32* %useABT.addr, align 4
  %call191 = call i32 @AddUpSADQuarter(i32 %196, i32 %197, i32 %198, i32 %199, i32 %200, i32 %201, %struct.storable_picture* %202, i16** %203, i32 %204, i32 %205, i32 %206)
  store i32 %call191, i32* %mcost, align 4
  %207 = load i8**, i8*** @SearchState, align 8
  %208 = load i32, i32* %cand_mv_y, align 4
  %209 = load i16*, i16** %mv_y.addr, align 8
  %210 = load i16, i16* %209, align 2
  %conv192 = sext i16 %210 to i32
  %sub193 = sub nsw i32 %208, %conv192
  %211 = load i32, i32* %search_range_dynamic, align 4
  %add194 = add nsw i32 %sub193, %211
  %idxprom195 = sext i32 %add194 to i64
  %arrayidx196 = getelementptr inbounds i8*, i8** %207, i64 %idxprom195
  %212 = load i8*, i8** %arrayidx196, align 8
  %213 = load i32, i32* %cand_mv_x, align 4
  %214 = load i16*, i16** %mv_x.addr, align 8
  %215 = load i16, i16* %214, align 2
  %conv197 = sext i16 %215 to i32
  %sub198 = sub nsw i32 %213, %conv197
  %216 = load i32, i32* %search_range_dynamic, align 4
  %add199 = add nsw i32 %sub198, %216
  %idxprom200 = sext i32 %add199 to i64
  %arrayidx201 = getelementptr inbounds i8, i8* %212, i64 %idxprom200
  store i8 1, i8* %arrayidx201, align 1
  %217 = load i32, i32* %mcost, align 4
  %218 = load i32, i32* %min_mcost.addr, align 4
  %cmp202 = icmp slt i32 %217, %218
  br i1 %cmp202, label %if.then204, label %if.end205

if.then204:                                       ; preds = %if.then177
  %219 = load i32, i32* %mcost, align 4
  store i32 %219, i32* %min_mcost.addr, align 4
  %220 = load i32, i32* %cand_mv_x, align 4
  store i32 %220, i32* %currmv_x, align 4
  %221 = load i32, i32* %cand_mv_y, align 4
  store i32 %221, i32* %currmv_y, align 4
  store i32 0, i32* %abort_search, align 4
  br label %if.end205

if.end205:                                        ; preds = %if.then204, %if.then177
  br label %if.end206

if.end206:                                        ; preds = %if.end205, %if.then165
  br label %if.end207

if.end207:                                        ; preds = %if.end206, %land.lhs.true159, %for.body147
  br label %for.inc

for.inc:                                          ; preds = %if.end207
  %222 = load i32, i32* %m, align 4
  %inc = add nsw i32 %222, 1
  store i32 %inc, i32* %m, align 4
  br label %for.cond144

for.end:                                          ; preds = %for.cond144
  %223 = load i32, i32* %currmv_x, align 4
  store i32 %223, i32* %iXMinNow, align 4
  %224 = load i32, i32* %currmv_y, align 4
  store i32 %224, i32* %iYMinNow, align 4
  %225 = load i32, i32* %abort_search, align 4
  %tobool208 = icmp ne i32 %225, 0
  br i1 %tobool208, label %if.then209, label %if.end210

if.then209:                                       ; preds = %for.end
  br label %for.end213

if.end210:                                        ; preds = %for.end
  br label %for.inc211

for.inc211:                                       ; preds = %if.end210
  %226 = load i32, i32* %i, align 4
  %inc212 = add nsw i32 %226, 1
  store i32 %inc212, i32* %i, align 4
  br label %for.cond

for.end213:                                       ; preds = %if.then209, %for.cond
  %227 = load i32, i32* %currmv_x, align 4
  %conv214 = trunc i32 %227 to i16
  %228 = load i16*, i16** %mv_x.addr, align 8
  store i16 %conv214, i16* %228, align 2
  %229 = load i32, i32* %currmv_y, align 4
  %conv215 = trunc i32 %229 to i16
  %230 = load i16*, i16** %mv_y.addr, align 8
  store i16 %conv215, i16* %230, align 2
  %231 = load i32, i32* %min_mcost.addr, align 4
  %232 = load i32, i32* %canary
  %233 = icmp eq i32 %232, 559200627
  br i1 %233, label %234, label %func_exit

234:                                              ; preds = %for.end213, %func_exit
  ret i32 %231

func_exit:                                        ; preds = %for.end213
  call void @detect_breach()
  br label %234
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @AddUpSADQuarter.3(i32 %pic_pix_x, i32 %pic_pix_y, i32 %blocksize_x, i32 %blocksize_y, i32 %cand_mv_x, i32 %cand_mv_y, %struct.storable_picture* %ref_picture, i16** %orig_pic, i32 %Mvmcost, i32 %min_mcost, i32 %useABT) #0 {
entry:
  %pic_pix_y.addr = alloca i32, align 4
  %yy = alloca i32, align 4
  %canary = alloca i32
  store i32 1360789800, i32* %canary
  %cand_mv_x.addr = alloca i32, align 4
  %pic_pix_x.addr = alloca i32, align 4
  %ry = alloca i32, align 4
  %Mvmcost.addr = alloca i32, align 4
  %blocksize_x.addr = alloca i32, align 4
  %ref_picture.addr = alloca %struct.storable_picture*, align 8
  %cand_mv_y.addr = alloca i32, align 4
  %mcost = alloca i32, align 4
  %d = alloca i32*, align 8
  %rx0 = alloca i32, align 4
  %orig_line = alloca i16*, align 8
  %min_mcost.addr = alloca i32, align 4
  %x0 = alloca i32, align 4
  %ry0 = alloca i32, align 4
  %ref_pic = alloca i16**, align 8
  %diff = alloca [16 x i32], align 16
  %orig_pic.addr = alloca i16**, align 8
  %img_height = alloca i32, align 4
  %curr_diff = alloca [16 x [16 x i32]], align 16
  %useABT.addr = alloca i32, align 4
  %blocksize_y.addr = alloca i32, align 4
  %y0 = alloca i32, align 4
  %xx = alloca i32, align 4
  %img_width = alloca i32, align 4
  %abort_search = alloca i32, align 4
  %kk = alloca i32, align 4
  store i32 %pic_pix_x, i32* %pic_pix_x.addr, align 4
  store i32 %pic_pix_y, i32* %pic_pix_y.addr, align 4
  store i32 %blocksize_x, i32* %blocksize_x.addr, align 4
  store i32 %blocksize_y, i32* %blocksize_y.addr, align 4
  store i32 %cand_mv_x, i32* %cand_mv_x.addr, align 4
  store i32 %cand_mv_y, i32* %cand_mv_y.addr, align 4
  store %struct.storable_picture* %ref_picture, %struct.storable_picture** %ref_picture.addr, align 8
  store i16** %orig_pic, i16*** %orig_pic.addr, align 8
  store i32 %Mvmcost, i32* %Mvmcost.addr, align 4
  store i32 %min_mcost, i32* %min_mcost.addr, align 4
  store i32 %useABT, i32* %useABT.addr, align 4
  %0 = load i32, i32* %Mvmcost.addr, align 4
  store i32 %0, i32* %mcost, align 4
  %1 = load %struct.storable_picture*, %struct.storable_picture** %ref_picture.addr, align 8
  %imgY_ups = getelementptr inbounds %struct.storable_picture, %struct.storable_picture* %1, i32 0, i32 28
  %2 = load i16**, i16*** %imgY_ups, align 8
  store i16** %2, i16*** %ref_pic, align 8
  %3 = load %struct.storable_picture*, %struct.storable_picture** %ref_picture.addr, align 8
  %size_x = getelementptr inbounds %struct.storable_picture, %struct.storable_picture* %3, i32 0, i32 18
  %4 = load i32, i32* %size_x, align 8
  store i32 %4, i32* %img_width, align 4
  %5 = load %struct.storable_picture*, %struct.storable_picture** %ref_picture.addr, align 8
  %size_y = getelementptr inbounds %struct.storable_picture, %struct.storable_picture* %5, i32 0, i32 19
  %6 = load i32, i32* %size_y, align 4
  store i32 %6, i32* %img_height, align 4
  store i32 0, i32* %y0, align 4
  store i32 0, i32* %abort_search, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc182, %entry
  %7 = load i32, i32* %y0, align 4
  %8 = load i32, i32* %blocksize_y.addr, align 4
  %cmp = icmp slt i32 %7, %8
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %9 = load i32, i32* %abort_search, align 4
  %tobool = icmp ne i32 %9, 0
  %lnot = xor i1 %tobool, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %10 = phi i1 [ false, %for.cond ], [ %lnot, %land.rhs ]
  br i1 %10, label %for.body, label %for.end184

for.body:                                         ; preds = %land.end
  %11 = load i32, i32* %pic_pix_y.addr, align 4
  %12 = load i32, i32* %y0, align 4
  %add = add nsw i32 %11, %12
  %shl = shl i32 %add, 2
  %13 = load i32, i32* %cand_mv_y.addr, align 4
  %add1 = add nsw i32 %shl, %13
  store i32 %add1, i32* %ry0, align 4
  store i32 0, i32* %x0, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc179, %for.body
  %14 = load i32, i32* %x0, align 4
  %15 = load i32, i32* %blocksize_x.addr, align 4
  %cmp3 = icmp slt i32 %14, %15
  br i1 %cmp3, label %for.body4, label %for.end181

for.body4:                                        ; preds = %for.cond2
  %16 = load i32, i32* %pic_pix_x.addr, align 4
  %17 = load i32, i32* %x0, align 4
  %add5 = add nsw i32 %16, %17
  %shl6 = shl i32 %add5, 2
  %18 = load i32, i32* %cand_mv_x.addr, align 4
  %add7 = add nsw i32 %shl6, %18
  store i32 %add7, i32* %rx0, align 4
  %arraydecay = getelementptr inbounds [16 x i32], [16 x i32]* %diff, i64 0, i64 0
  store i32* %arraydecay, i32** %d, align 8
  %19 = load i16**, i16*** %orig_pic.addr, align 8
  %20 = load i32, i32* %y0, align 4
  %idxprom = sext i32 %20 to i64
  %arrayidx = getelementptr inbounds i16*, i16** %19, i64 %idxprom
  %21 = load i16*, i16** %arrayidx, align 8
  store i16* %21, i16** %orig_line, align 8
  %22 = load i32, i32* %ry0, align 4
  store i32 %22, i32* %ry, align 4
  %23 = load i16*, i16** %orig_line, align 8
  %24 = load i32, i32* %x0, align 4
  %idxprom8 = sext i32 %24 to i64
  %arrayidx9 = getelementptr inbounds i16, i16* %23, i64 %idxprom8
  %25 = load i16, i16* %arrayidx9, align 2
  %conv = zext i16 %25 to i32
  %26 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %27 = load i16**, i16*** %ref_pic, align 8
  %28 = load i32, i32* %ry, align 4
  %29 = load i32, i32* %rx0, align 4
  %30 = load i32, i32* %img_height, align 4
  %31 = load i32, i32* %img_width, align 4
  %call = call zeroext i16 %26(i16** %27, i32 %28, i32 %29, i32 %30, i32 %31)
  %conv10 = zext i16 %call to i32
  %sub = sub nsw i32 %conv, %conv10
  %32 = load i32*, i32** %d, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %32, i32 1
  store i32* %incdec.ptr, i32** %d, align 8
  store i32 %sub, i32* %32, align 4
  %33 = load i16*, i16** %orig_line, align 8
  %34 = load i32, i32* %x0, align 4
  %add11 = add nsw i32 %34, 1
  %idxprom12 = sext i32 %add11 to i64
  %arrayidx13 = getelementptr inbounds i16, i16* %33, i64 %idxprom12
  %35 = load i16, i16* %arrayidx13, align 2
  %conv14 = zext i16 %35 to i32
  %36 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %37 = load i16**, i16*** %ref_pic, align 8
  %38 = load i32, i32* %ry, align 4
  %39 = load i32, i32* %rx0, align 4
  %add15 = add nsw i32 %39, 4
  %40 = load i32, i32* %img_height, align 4
  %41 = load i32, i32* %img_width, align 4
  %call16 = call zeroext i16 %36(i16** %37, i32 %38, i32 %add15, i32 %40, i32 %41)
  %conv17 = zext i16 %call16 to i32
  %sub18 = sub nsw i32 %conv14, %conv17
  %42 = load i32*, i32** %d, align 8
  %incdec.ptr19 = getelementptr inbounds i32, i32* %42, i32 1
  store i32* %incdec.ptr19, i32** %d, align 8
  store i32 %sub18, i32* %42, align 4
  %43 = load i16*, i16** %orig_line, align 8
  %44 = load i32, i32* %x0, align 4
  %add20 = add nsw i32 %44, 2
  %idxprom21 = sext i32 %add20 to i64
  %arrayidx22 = getelementptr inbounds i16, i16* %43, i64 %idxprom21
  %45 = load i16, i16* %arrayidx22, align 2
  %conv23 = zext i16 %45 to i32
  %46 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %47 = load i16**, i16*** %ref_pic, align 8
  %48 = load i32, i32* %ry, align 4
  %49 = load i32, i32* %rx0, align 4
  %add24 = add nsw i32 %49, 8
  %50 = load i32, i32* %img_height, align 4
  %51 = load i32, i32* %img_width, align 4
  %call25 = call zeroext i16 %46(i16** %47, i32 %48, i32 %add24, i32 %50, i32 %51)
  %conv26 = zext i16 %call25 to i32
  %sub27 = sub nsw i32 %conv23, %conv26
  %52 = load i32*, i32** %d, align 8
  %incdec.ptr28 = getelementptr inbounds i32, i32* %52, i32 1
  store i32* %incdec.ptr28, i32** %d, align 8
  store i32 %sub27, i32* %52, align 4
  %53 = load i16*, i16** %orig_line, align 8
  %54 = load i32, i32* %x0, align 4
  %add29 = add nsw i32 %54, 3
  %idxprom30 = sext i32 %add29 to i64
  %arrayidx31 = getelementptr inbounds i16, i16* %53, i64 %idxprom30
  %55 = load i16, i16* %arrayidx31, align 2
  %conv32 = zext i16 %55 to i32
  %56 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %57 = load i16**, i16*** %ref_pic, align 8
  %58 = load i32, i32* %ry, align 4
  %59 = load i32, i32* %rx0, align 4
  %add33 = add nsw i32 %59, 12
  %60 = load i32, i32* %img_height, align 4
  %61 = load i32, i32* %img_width, align 4
  %call34 = call zeroext i16 %56(i16** %57, i32 %58, i32 %add33, i32 %60, i32 %61)
  %conv35 = zext i16 %call34 to i32
  %sub36 = sub nsw i32 %conv32, %conv35
  %62 = load i32*, i32** %d, align 8
  %incdec.ptr37 = getelementptr inbounds i32, i32* %62, i32 1
  store i32* %incdec.ptr37, i32** %d, align 8
  store i32 %sub36, i32* %62, align 4
  %63 = load i16**, i16*** %orig_pic.addr, align 8
  %64 = load i32, i32* %y0, align 4
  %add38 = add nsw i32 %64, 1
  %idxprom39 = sext i32 %add38 to i64
  %arrayidx40 = getelementptr inbounds i16*, i16** %63, i64 %idxprom39
  %65 = load i16*, i16** %arrayidx40, align 8
  store i16* %65, i16** %orig_line, align 8
  %66 = load i32, i32* %ry0, align 4
  %add41 = add nsw i32 %66, 4
  store i32 %add41, i32* %ry, align 4
  %67 = load i16*, i16** %orig_line, align 8
  %68 = load i32, i32* %x0, align 4
  %idxprom42 = sext i32 %68 to i64
  %arrayidx43 = getelementptr inbounds i16, i16* %67, i64 %idxprom42
  %69 = load i16, i16* %arrayidx43, align 2
  %conv44 = zext i16 %69 to i32
  %70 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %71 = load i16**, i16*** %ref_pic, align 8
  %72 = load i32, i32* %ry, align 4
  %73 = load i32, i32* %rx0, align 4
  %74 = load i32, i32* %img_height, align 4
  %75 = load i32, i32* %img_width, align 4
  %call45 = call zeroext i16 %70(i16** %71, i32 %72, i32 %73, i32 %74, i32 %75)
  %conv46 = zext i16 %call45 to i32
  %sub47 = sub nsw i32 %conv44, %conv46
  %76 = load i32*, i32** %d, align 8
  %incdec.ptr48 = getelementptr inbounds i32, i32* %76, i32 1
  store i32* %incdec.ptr48, i32** %d, align 8
  store i32 %sub47, i32* %76, align 4
  %77 = load i16*, i16** %orig_line, align 8
  %78 = load i32, i32* %x0, align 4
  %add49 = add nsw i32 %78, 1
  %idxprom50 = sext i32 %add49 to i64
  %arrayidx51 = getelementptr inbounds i16, i16* %77, i64 %idxprom50
  %79 = load i16, i16* %arrayidx51, align 2
  %conv52 = zext i16 %79 to i32
  %80 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %81 = load i16**, i16*** %ref_pic, align 8
  %82 = load i32, i32* %ry, align 4
  %83 = load i32, i32* %rx0, align 4
  %add53 = add nsw i32 %83, 4
  %84 = load i32, i32* %img_height, align 4
  %85 = load i32, i32* %img_width, align 4
  %call54 = call zeroext i16 %80(i16** %81, i32 %82, i32 %add53, i32 %84, i32 %85)
  %conv55 = zext i16 %call54 to i32
  %sub56 = sub nsw i32 %conv52, %conv55
  %86 = load i32*, i32** %d, align 8
  %incdec.ptr57 = getelementptr inbounds i32, i32* %86, i32 1
  store i32* %incdec.ptr57, i32** %d, align 8
  store i32 %sub56, i32* %86, align 4
  %87 = load i16*, i16** %orig_line, align 8
  %88 = load i32, i32* %x0, align 4
  %add58 = add nsw i32 %88, 2
  %idxprom59 = sext i32 %add58 to i64
  %arrayidx60 = getelementptr inbounds i16, i16* %87, i64 %idxprom59
  %89 = load i16, i16* %arrayidx60, align 2
  %conv61 = zext i16 %89 to i32
  %90 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %91 = load i16**, i16*** %ref_pic, align 8
  %92 = load i32, i32* %ry, align 4
  %93 = load i32, i32* %rx0, align 4
  %add62 = add nsw i32 %93, 8
  %94 = load i32, i32* %img_height, align 4
  %95 = load i32, i32* %img_width, align 4
  %call63 = call zeroext i16 %90(i16** %91, i32 %92, i32 %add62, i32 %94, i32 %95)
  %conv64 = zext i16 %call63 to i32
  %sub65 = sub nsw i32 %conv61, %conv64
  %96 = load i32*, i32** %d, align 8
  %incdec.ptr66 = getelementptr inbounds i32, i32* %96, i32 1
  store i32* %incdec.ptr66, i32** %d, align 8
  store i32 %sub65, i32* %96, align 4
  %97 = load i16*, i16** %orig_line, align 8
  %98 = load i32, i32* %x0, align 4
  %add67 = add nsw i32 %98, 3
  %idxprom68 = sext i32 %add67 to i64
  %arrayidx69 = getelementptr inbounds i16, i16* %97, i64 %idxprom68
  %99 = load i16, i16* %arrayidx69, align 2
  %conv70 = zext i16 %99 to i32
  %100 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %101 = load i16**, i16*** %ref_pic, align 8
  %102 = load i32, i32* %ry, align 4
  %103 = load i32, i32* %rx0, align 4
  %add71 = add nsw i32 %103, 12
  %104 = load i32, i32* %img_height, align 4
  %105 = load i32, i32* %img_width, align 4
  %call72 = call zeroext i16 %100(i16** %101, i32 %102, i32 %add71, i32 %104, i32 %105)
  %conv73 = zext i16 %call72 to i32
  %sub74 = sub nsw i32 %conv70, %conv73
  %106 = load i32*, i32** %d, align 8
  %incdec.ptr75 = getelementptr inbounds i32, i32* %106, i32 1
  store i32* %incdec.ptr75, i32** %d, align 8
  store i32 %sub74, i32* %106, align 4
  %107 = load i16**, i16*** %orig_pic.addr, align 8
  %108 = load i32, i32* %y0, align 4
  %add76 = add nsw i32 %108, 2
  %idxprom77 = sext i32 %add76 to i64
  %arrayidx78 = getelementptr inbounds i16*, i16** %107, i64 %idxprom77
  %109 = load i16*, i16** %arrayidx78, align 8
  store i16* %109, i16** %orig_line, align 8
  %110 = load i32, i32* %ry0, align 4
  %add79 = add nsw i32 %110, 8
  store i32 %add79, i32* %ry, align 4
  %111 = load i16*, i16** %orig_line, align 8
  %112 = load i32, i32* %x0, align 4
  %idxprom80 = sext i32 %112 to i64
  %arrayidx81 = getelementptr inbounds i16, i16* %111, i64 %idxprom80
  %113 = load i16, i16* %arrayidx81, align 2
  %conv82 = zext i16 %113 to i32
  %114 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %115 = load i16**, i16*** %ref_pic, align 8
  %116 = load i32, i32* %ry, align 4
  %117 = load i32, i32* %rx0, align 4
  %118 = load i32, i32* %img_height, align 4
  %119 = load i32, i32* %img_width, align 4
  %call83 = call zeroext i16 %114(i16** %115, i32 %116, i32 %117, i32 %118, i32 %119)
  %conv84 = zext i16 %call83 to i32
  %sub85 = sub nsw i32 %conv82, %conv84
  %120 = load i32*, i32** %d, align 8
  %incdec.ptr86 = getelementptr inbounds i32, i32* %120, i32 1
  store i32* %incdec.ptr86, i32** %d, align 8
  store i32 %sub85, i32* %120, align 4
  %121 = load i16*, i16** %orig_line, align 8
  %122 = load i32, i32* %x0, align 4
  %add87 = add nsw i32 %122, 1
  %idxprom88 = sext i32 %add87 to i64
  %arrayidx89 = getelementptr inbounds i16, i16* %121, i64 %idxprom88
  %123 = load i16, i16* %arrayidx89, align 2
  %conv90 = zext i16 %123 to i32
  %124 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %125 = load i16**, i16*** %ref_pic, align 8
  %126 = load i32, i32* %ry, align 4
  %127 = load i32, i32* %rx0, align 4
  %add91 = add nsw i32 %127, 4
  %128 = load i32, i32* %img_height, align 4
  %129 = load i32, i32* %img_width, align 4
  %call92 = call zeroext i16 %124(i16** %125, i32 %126, i32 %add91, i32 %128, i32 %129)
  %conv93 = zext i16 %call92 to i32
  %sub94 = sub nsw i32 %conv90, %conv93
  %130 = load i32*, i32** %d, align 8
  %incdec.ptr95 = getelementptr inbounds i32, i32* %130, i32 1
  store i32* %incdec.ptr95, i32** %d, align 8
  store i32 %sub94, i32* %130, align 4
  %131 = load i16*, i16** %orig_line, align 8
  %132 = load i32, i32* %x0, align 4
  %add96 = add nsw i32 %132, 2
  %idxprom97 = sext i32 %add96 to i64
  %arrayidx98 = getelementptr inbounds i16, i16* %131, i64 %idxprom97
  %133 = load i16, i16* %arrayidx98, align 2
  %conv99 = zext i16 %133 to i32
  %134 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %135 = load i16**, i16*** %ref_pic, align 8
  %136 = load i32, i32* %ry, align 4
  %137 = load i32, i32* %rx0, align 4
  %add100 = add nsw i32 %137, 8
  %138 = load i32, i32* %img_height, align 4
  %139 = load i32, i32* %img_width, align 4
  %call101 = call zeroext i16 %134(i16** %135, i32 %136, i32 %add100, i32 %138, i32 %139)
  %conv102 = zext i16 %call101 to i32
  %sub103 = sub nsw i32 %conv99, %conv102
  %140 = load i32*, i32** %d, align 8
  %incdec.ptr104 = getelementptr inbounds i32, i32* %140, i32 1
  store i32* %incdec.ptr104, i32** %d, align 8
  store i32 %sub103, i32* %140, align 4
  %141 = load i16*, i16** %orig_line, align 8
  %142 = load i32, i32* %x0, align 4
  %add105 = add nsw i32 %142, 3
  %idxprom106 = sext i32 %add105 to i64
  %arrayidx107 = getelementptr inbounds i16, i16* %141, i64 %idxprom106
  %143 = load i16, i16* %arrayidx107, align 2
  %conv108 = zext i16 %143 to i32
  %144 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %145 = load i16**, i16*** %ref_pic, align 8
  %146 = load i32, i32* %ry, align 4
  %147 = load i32, i32* %rx0, align 4
  %add109 = add nsw i32 %147, 12
  %148 = load i32, i32* %img_height, align 4
  %149 = load i32, i32* %img_width, align 4
  %call110 = call zeroext i16 %144(i16** %145, i32 %146, i32 %add109, i32 %148, i32 %149)
  %conv111 = zext i16 %call110 to i32
  %sub112 = sub nsw i32 %conv108, %conv111
  %150 = load i32*, i32** %d, align 8
  %incdec.ptr113 = getelementptr inbounds i32, i32* %150, i32 1
  store i32* %incdec.ptr113, i32** %d, align 8
  store i32 %sub112, i32* %150, align 4
  %151 = load i16**, i16*** %orig_pic.addr, align 8
  %152 = load i32, i32* %y0, align 4
  %add114 = add nsw i32 %152, 3
  %idxprom115 = sext i32 %add114 to i64
  %arrayidx116 = getelementptr inbounds i16*, i16** %151, i64 %idxprom115
  %153 = load i16*, i16** %arrayidx116, align 8
  store i16* %153, i16** %orig_line, align 8
  %154 = load i32, i32* %ry0, align 4
  %add117 = add nsw i32 %154, 12
  store i32 %add117, i32* %ry, align 4
  %155 = load i16*, i16** %orig_line, align 8
  %156 = load i32, i32* %x0, align 4
  %idxprom118 = sext i32 %156 to i64
  %arrayidx119 = getelementptr inbounds i16, i16* %155, i64 %idxprom118
  %157 = load i16, i16* %arrayidx119, align 2
  %conv120 = zext i16 %157 to i32
  %158 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %159 = load i16**, i16*** %ref_pic, align 8
  %160 = load i32, i32* %ry, align 4
  %161 = load i32, i32* %rx0, align 4
  %162 = load i32, i32* %img_height, align 4
  %163 = load i32, i32* %img_width, align 4
  %call121 = call zeroext i16 %158(i16** %159, i32 %160, i32 %161, i32 %162, i32 %163)
  %conv122 = zext i16 %call121 to i32
  %sub123 = sub nsw i32 %conv120, %conv122
  %164 = load i32*, i32** %d, align 8
  %incdec.ptr124 = getelementptr inbounds i32, i32* %164, i32 1
  store i32* %incdec.ptr124, i32** %d, align 8
  store i32 %sub123, i32* %164, align 4
  %165 = load i16*, i16** %orig_line, align 8
  %166 = load i32, i32* %x0, align 4
  %add125 = add nsw i32 %166, 1
  %idxprom126 = sext i32 %add125 to i64
  %arrayidx127 = getelementptr inbounds i16, i16* %165, i64 %idxprom126
  %167 = load i16, i16* %arrayidx127, align 2
  %conv128 = zext i16 %167 to i32
  %168 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %169 = load i16**, i16*** %ref_pic, align 8
  %170 = load i32, i32* %ry, align 4
  %171 = load i32, i32* %rx0, align 4
  %add129 = add nsw i32 %171, 4
  %172 = load i32, i32* %img_height, align 4
  %173 = load i32, i32* %img_width, align 4
  %call130 = call zeroext i16 %168(i16** %169, i32 %170, i32 %add129, i32 %172, i32 %173)
  %conv131 = zext i16 %call130 to i32
  %sub132 = sub nsw i32 %conv128, %conv131
  %174 = load i32*, i32** %d, align 8
  %incdec.ptr133 = getelementptr inbounds i32, i32* %174, i32 1
  store i32* %incdec.ptr133, i32** %d, align 8
  store i32 %sub132, i32* %174, align 4
  %175 = load i16*, i16** %orig_line, align 8
  %176 = load i32, i32* %x0, align 4
  %add134 = add nsw i32 %176, 2
  %idxprom135 = sext i32 %add134 to i64
  %arrayidx136 = getelementptr inbounds i16, i16* %175, i64 %idxprom135
  %177 = load i16, i16* %arrayidx136, align 2
  %conv137 = zext i16 %177 to i32
  %178 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %179 = load i16**, i16*** %ref_pic, align 8
  %180 = load i32, i32* %ry, align 4
  %181 = load i32, i32* %rx0, align 4
  %add138 = add nsw i32 %181, 8
  %182 = load i32, i32* %img_height, align 4
  %183 = load i32, i32* %img_width, align 4
  %call139 = call zeroext i16 %178(i16** %179, i32 %180, i32 %add138, i32 %182, i32 %183)
  %conv140 = zext i16 %call139 to i32
  %sub141 = sub nsw i32 %conv137, %conv140
  %184 = load i32*, i32** %d, align 8
  %incdec.ptr142 = getelementptr inbounds i32, i32* %184, i32 1
  store i32* %incdec.ptr142, i32** %d, align 8
  store i32 %sub141, i32* %184, align 4
  %185 = load i16*, i16** %orig_line, align 8
  %186 = load i32, i32* %x0, align 4
  %add143 = add nsw i32 %186, 3
  %idxprom144 = sext i32 %add143 to i64
  %arrayidx145 = getelementptr inbounds i16, i16* %185, i64 %idxprom144
  %187 = load i16, i16* %arrayidx145, align 2
  %conv146 = zext i16 %187 to i32
  %188 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %189 = load i16**, i16*** %ref_pic, align 8
  %190 = load i32, i32* %ry, align 4
  %191 = load i32, i32* %rx0, align 4
  %add147 = add nsw i32 %191, 12
  %192 = load i32, i32* %img_height, align 4
  %193 = load i32, i32* %img_width, align 4
  %call148 = call zeroext i16 %188(i16** %189, i32 %190, i32 %add147, i32 %192, i32 %193)
  %conv149 = zext i16 %call148 to i32
  %sub150 = sub nsw i32 %conv146, %conv149
  %194 = load i32*, i32** %d, align 8
  store i32 %sub150, i32* %194, align 4
  %195 = load i32, i32* %useABT.addr, align 4
  %tobool151 = icmp ne i32 %195, 0
  br i1 %tobool151, label %if.else, label %if.then

if.then:                                          ; preds = %for.body4
  %arraydecay152 = getelementptr inbounds [16 x i32], [16 x i32]* %diff, i64 0, i64 0
  %196 = load %struct.InputParameters*, %struct.InputParameters** @input, align 8
  %hadamard = getelementptr inbounds %struct.InputParameters, %struct.InputParameters* %196, i32 0, i32 6
  %197 = load i32, i32* %hadamard, align 8
  %call153 = call i32 @SATD(i32* %arraydecay152, i32 %197)
  %198 = load i32, i32* %mcost, align 4
  %add154 = add nsw i32 %198, %call153
  store i32 %add154, i32* %mcost, align 4
  %199 = load i32, i32* %min_mcost.addr, align 4
  %cmp155 = icmp sgt i32 %add154, %199
  br i1 %cmp155, label %if.then157, label %if.end

if.then157:                                       ; preds = %if.then
  store i32 1, i32* %abort_search, align 4
  br label %for.end181

if.end:                                           ; preds = %if.then
  br label %if.end178

if.else:                                          ; preds = %for.body4
  %200 = load i32, i32* %y0, align 4
  store i32 %200, i32* %yy, align 4
  store i32 0, i32* %kk, align 4
  br label %for.cond158

for.cond158:                                      ; preds = %for.inc175, %if.else
  %201 = load i32, i32* %yy, align 4
  %202 = load i32, i32* %y0, align 4
  %add159 = add nsw i32 %202, 4
  %cmp160 = icmp slt i32 %201, %add159
  br i1 %cmp160, label %for.body162, label %for.end177

for.body162:                                      ; preds = %for.cond158
  %203 = load i32, i32* %x0, align 4
  store i32 %203, i32* %xx, align 4
  br label %for.cond163

for.cond163:                                      ; preds = %for.inc, %for.body162
  %204 = load i32, i32* %xx, align 4
  %205 = load i32, i32* %x0, align 4
  %add164 = add nsw i32 %205, 4
  %cmp165 = icmp slt i32 %204, %add164
  br i1 %cmp165, label %for.body167, label %for.end

for.body167:                                      ; preds = %for.cond163
  %206 = load i32, i32* %kk, align 4
  %idxprom168 = sext i32 %206 to i64
  %arrayidx169 = getelementptr inbounds [16 x i32], [16 x i32]* %diff, i64 0, i64 %idxprom168
  %207 = load i32, i32* %arrayidx169, align 4
  %208 = load i32, i32* %yy, align 4
  %idxprom170 = sext i32 %208 to i64
  %arrayidx171 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %curr_diff, i64 0, i64 %idxprom170
  %209 = load i32, i32* %xx, align 4
  %idxprom172 = sext i32 %209 to i64
  %arrayidx173 = getelementptr inbounds [16 x i32], [16 x i32]* %arrayidx171, i64 0, i64 %idxprom172
  store i32 %207, i32* %arrayidx173, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body167
  %210 = load i32, i32* %xx, align 4
  %inc = add nsw i32 %210, 1
  store i32 %inc, i32* %xx, align 4
  %211 = load i32, i32* %kk, align 4
  %inc174 = add nsw i32 %211, 1
  store i32 %inc174, i32* %kk, align 4
  br label %for.cond163

for.end:                                          ; preds = %for.cond163
  br label %for.inc175

for.inc175:                                       ; preds = %for.end
  %212 = load i32, i32* %yy, align 4
  %inc176 = add nsw i32 %212, 1
  store i32 %inc176, i32* %yy, align 4
  br label %for.cond158

for.end177:                                       ; preds = %for.cond158
  br label %if.end178

if.end178:                                        ; preds = %for.end177, %if.end
  br label %for.inc179

for.inc179:                                       ; preds = %if.end178
  %213 = load i32, i32* %x0, align 4
  %add180 = add nsw i32 %213, 4
  store i32 %add180, i32* %x0, align 4
  br label %for.cond2

for.end181:                                       ; preds = %if.then157, %for.cond2
  br label %for.inc182

for.inc182:                                       ; preds = %for.end181
  %214 = load i32, i32* %y0, align 4
  %add183 = add nsw i32 %214, 4
  store i32 %add183, i32* %y0, align 4
  br label %for.cond

for.end184:                                       ; preds = %land.end
  %215 = load i32, i32* %mcost, align 4
  %216 = load i32, i32* %canary
  %217 = icmp eq i32 %216, 1360789800
  br i1 %217, label %218, label %func_exit

218:                                              ; preds = %for.end184, %func_exit
  ret i32 %215

func_exit:                                        ; preds = %for.end184
  call void @detect_breach()
  br label %218
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @free_mem_mincost.4(i32***** %mv) #0 {
entry:
  %l = alloca i32, align 4
  %i = alloca i32, align 4
  %canary = alloca i32
  store i32 2012030661, i32* %canary
  %mv.addr = alloca i32*****, align 8
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store i32***** %mv, i32****** %mv.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc35, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %width = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %1, i32 0, i32 13
  %2 = load i32, i32* %width, align 4
  %div = sdiv i32 %2, 4
  %cmp = icmp slt i32 %0, %div
  br i1 %cmp, label %for.body, label %for.end37

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc30, %for.body
  %3 = load i32, i32* %j, align 4
  %4 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %4, i32 0, i32 15
  %5 = load i32, i32* %height, align 4
  %div2 = sdiv i32 %5, 4
  %cmp3 = icmp slt i32 %3, %div2
  br i1 %cmp3, label %for.body4, label %for.end32

for.body4:                                        ; preds = %for.cond1
  store i32 0, i32* %k, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc23, %for.body4
  %6 = load i32, i32* %k, align 4
  %7 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %max_num_references = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %7, i32 0, i32 9
  %8 = load i32, i32* %max_num_references, align 4
  %cmp6 = icmp slt i32 %6, %8
  br i1 %cmp6, label %for.body7, label %for.end25

for.body7:                                        ; preds = %for.cond5
  store i32 0, i32* %l, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc, %for.body7
  %9 = load i32, i32* %l, align 4
  %cmp9 = icmp slt i32 %9, 9
  br i1 %cmp9, label %for.body10, label %for.end

for.body10:                                       ; preds = %for.cond8
  %10 = load i32*****, i32****** %mv.addr, align 8
  %11 = load i32, i32* %i, align 4
  %idxprom = sext i32 %11 to i64
  %arrayidx = getelementptr inbounds i32****, i32***** %10, i64 %idxprom
  %12 = load i32****, i32***** %arrayidx, align 8
  %13 = load i32, i32* %j, align 4
  %idxprom11 = sext i32 %13 to i64
  %arrayidx12 = getelementptr inbounds i32***, i32**** %12, i64 %idxprom11
  %14 = load i32***, i32**** %arrayidx12, align 8
  %15 = load i32, i32* %k, align 4
  %idxprom13 = sext i32 %15 to i64
  %arrayidx14 = getelementptr inbounds i32**, i32*** %14, i64 %idxprom13
  %16 = load i32**, i32*** %arrayidx14, align 8
  %17 = load i32, i32* %l, align 4
  %idxprom15 = sext i32 %17 to i64
  %arrayidx16 = getelementptr inbounds i32*, i32** %16, i64 %idxprom15
  %18 = load i32*, i32** %arrayidx16, align 8
  %19 = bitcast i32* %18 to i8*
  call void @free(i8* %19) #5
  br label %for.inc

for.inc:                                          ; preds = %for.body10
  %20 = load i32, i32* %l, align 4
  %inc = add nsw i32 %20, 1
  store i32 %inc, i32* %l, align 4
  br label %for.cond8

for.end:                                          ; preds = %for.cond8
  %21 = load i32*****, i32****** %mv.addr, align 8
  %22 = load i32, i32* %i, align 4
  %idxprom17 = sext i32 %22 to i64
  %arrayidx18 = getelementptr inbounds i32****, i32***** %21, i64 %idxprom17
  %23 = load i32****, i32***** %arrayidx18, align 8
  %24 = load i32, i32* %j, align 4
  %idxprom19 = sext i32 %24 to i64
  %arrayidx20 = getelementptr inbounds i32***, i32**** %23, i64 %idxprom19
  %25 = load i32***, i32**** %arrayidx20, align 8
  %26 = load i32, i32* %k, align 4
  %idxprom21 = sext i32 %26 to i64
  %arrayidx22 = getelementptr inbounds i32**, i32*** %25, i64 %idxprom21
  %27 = load i32**, i32*** %arrayidx22, align 8
  %28 = bitcast i32** %27 to i8*
  call void @free(i8* %28) #5
  br label %for.inc23

for.inc23:                                        ; preds = %for.end
  %29 = load i32, i32* %k, align 4
  %inc24 = add nsw i32 %29, 1
  store i32 %inc24, i32* %k, align 4
  br label %for.cond5

for.end25:                                        ; preds = %for.cond5
  %30 = load i32*****, i32****** %mv.addr, align 8
  %31 = load i32, i32* %i, align 4
  %idxprom26 = sext i32 %31 to i64
  %arrayidx27 = getelementptr inbounds i32****, i32***** %30, i64 %idxprom26
  %32 = load i32****, i32***** %arrayidx27, align 8
  %33 = load i32, i32* %j, align 4
  %idxprom28 = sext i32 %33 to i64
  %arrayidx29 = getelementptr inbounds i32***, i32**** %32, i64 %idxprom28
  %34 = load i32***, i32**** %arrayidx29, align 8
  %35 = bitcast i32*** %34 to i8*
  call void @free(i8* %35) #5
  br label %for.inc30

for.inc30:                                        ; preds = %for.end25
  %36 = load i32, i32* %j, align 4
  %inc31 = add nsw i32 %36, 1
  store i32 %inc31, i32* %j, align 4
  br label %for.cond1

for.end32:                                        ; preds = %for.cond1
  %37 = load i32*****, i32****** %mv.addr, align 8
  %38 = load i32, i32* %i, align 4
  %idxprom33 = sext i32 %38 to i64
  %arrayidx34 = getelementptr inbounds i32****, i32***** %37, i64 %idxprom33
  %39 = load i32****, i32***** %arrayidx34, align 8
  %40 = bitcast i32**** %39 to i8*
  call void @free(i8* %40) #5
  br label %for.inc35

for.inc35:                                        ; preds = %for.end32
  %41 = load i32, i32* %i, align 4
  %inc36 = add nsw i32 %41, 1
  store i32 %inc36, i32* %i, align 4
  br label %for.cond

for.end37:                                        ; preds = %for.cond
  %42 = load i32*****, i32****** %mv.addr, align 8
  %43 = bitcast i32***** %42 to i8*
  call void @free(i8* %43) #5
  %44 = load i32, i32* %canary
  %45 = icmp eq i32 %44, 2012030661
  br i1 %45, label %46, label %func_exit

46:                                               ; preds = %for.end37, %func_exit
  ret void

func_exit:                                        ; preds = %for.end37
  call void @detect_breach()
  br label %46
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @FastSubPelBlockMotionSearch.5(i16** %orig_pic, i16 signext %ref, i32 %list, i32 %pic_pix_x, i32 %pic_pix_y, i32 %blocktype, i16 signext %pred_mv_x, i16 signext %pred_mv_y, i16* %mv_x, i16* %mv_y, i32 %search_pos2, i32 %search_pos4, i32 %min_mcost, double %lambda, i32 %useABT) #0 {
entry:
  %list.addr = alloca i32, align 4
  %pic_pix_y.addr = alloca i32, align 4
  %list_offset = alloca i32, align 4
  %pic_pix_x.addr = alloca i32, align 4
  %currmv_y = alloca i32, align 4
  %search_range_dynamic = alloca i32, align 4
  %mv_shift = alloca i32, align 4
  %ref.addr = alloca i16, align 2
  %blocksize_y = alloca i32, align 4
  %mv_x.addr = alloca i16*, align 8
  %max_pos_x4 = alloca i32, align 4
  %iSADLayer = alloca i32, align 4
  %iXMinNow = alloca i32, align 4
  %pred_frac_mv_y = alloca i32, align 4
  %pred_frac_up_mv_x = alloca i32, align 4
  %iYMinNow = alloca i32, align 4
  %blocktype.addr = alloca i32, align 4
  %m = alloca i32, align 4
  %pred_mv_y.addr = alloca i16, align 2
  %search_pos4.addr = alloca i32, align 4
  %max_pos_y4 = alloca i32, align 4
  %canary = alloca i32
  store i32 1421944360, i32* %canary
  %pred_mv_x.addr = alloca i16, align 2
  %min_mcost.addr = alloca i32, align 4
  %pic4_pix_y = alloca i32, align 4
  %iCurrSearchRange = alloca i32, align 4
  %mcost = alloca i32, align 4
  %orig_pic.addr = alloca i16**, align 8
  %blocksize_x = alloca i32, align 4
  %currmv_x = alloca i32, align 4
  %lambda_factor = alloca i32, align 4
  %cand_mv_y = alloca i32, align 4
  %mv_y.addr = alloca i16*, align 8
  %mv_cost = alloca i32, align 4
  %pred_frac_mv_x = alloca i32, align 4
  %search_pos2.addr = alloca i32, align 4
  %pred_frac_up_mv_y = alloca i32, align 4
  %useABT.addr = alloca i32, align 4
  %cand_mv_x = alloca i32, align 4
  %lambda.addr = alloca double, align 8
  %ref_picture = alloca %struct.storable_picture*, align 8
  %pic4_pix_x = alloca i32, align 4
  %i = alloca i32, align 4
  %abort_search = alloca i32, align 4
  store i16** %orig_pic, i16*** %orig_pic.addr, align 8
  store i16 %ref, i16* %ref.addr, align 2
  store i32 %list, i32* %list.addr, align 4
  store i32 %pic_pix_x, i32* %pic_pix_x.addr, align 4
  store i32 %pic_pix_y, i32* %pic_pix_y.addr, align 4
  store i32 %blocktype, i32* %blocktype.addr, align 4
  store i16 %pred_mv_x, i16* %pred_mv_x.addr, align 2
  store i16 %pred_mv_y, i16* %pred_mv_y.addr, align 2
  store i16* %mv_x, i16** %mv_x.addr, align 8
  store i16* %mv_y, i16** %mv_y.addr, align 8
  store i32 %search_pos2, i32* %search_pos2.addr, align 4
  store i32 %search_pos4, i32* %search_pos4.addr, align 4
  store i32 %min_mcost, i32* %min_mcost.addr, align 4
  store double %lambda, double* %lambda.addr, align 8
  store i32 %useABT, i32* %useABT.addr, align 4
  %0 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %MbaffFrameFlag = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %0, i32 0, i32 90
  %1 = load i32, i32* %MbaffFrameFlag, align 8
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %mb_data = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %2, i32 0, i32 51
  %3 = load %struct.macroblock*, %struct.macroblock** %mb_data, align 8
  %4 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %current_mb_nr = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %4, i32 0, i32 3
  %5 = load i32, i32* %current_mb_nr, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 %idxprom
  %mb_field = getelementptr inbounds %struct.macroblock, %struct.macroblock* %arrayidx, i32 0, i32 22
  %6 = load i32, i32* %mb_field, align 4
  %tobool1 = icmp ne i32 %6, 0
  br i1 %tobool1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %7 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %current_mb_nr2 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %7, i32 0, i32 3
  %8 = load i32, i32* %current_mb_nr2, align 4
  %rem = srem i32 %8, 2
  %tobool3 = icmp ne i32 %rem, 0
  %9 = zext i1 %tobool3 to i64
  %cond = select i1 %tobool3, i32 4, i32 2
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond4 = phi i32 [ %cond, %cond.true ], [ 0, %cond.false ]
  store i32 %cond4, i32* %list_offset, align 4
  %10 = load i32, i32* %list.addr, align 4
  %11 = load i32, i32* %list_offset, align 4
  %add = add nsw i32 %10, %11
  %idxprom5 = sext i32 %add to i64
  %arrayidx6 = getelementptr inbounds [6 x %struct.storable_picture**], [6 x %struct.storable_picture**]* @listX, i64 0, i64 %idxprom5
  %12 = load %struct.storable_picture**, %struct.storable_picture*** %arrayidx6, align 8
  %13 = load i16, i16* %ref.addr, align 2
  %idxprom7 = sext i16 %13 to i64
  %arrayidx8 = getelementptr inbounds %struct.storable_picture*, %struct.storable_picture** %12, i64 %idxprom7
  %14 = load %struct.storable_picture*, %struct.storable_picture** %arrayidx8, align 8
  store %struct.storable_picture* %14, %struct.storable_picture** %ref_picture, align 8
  %15 = load double, double* %lambda.addr, align 8
  %mul = fmul double 6.553600e+04, %15
  %add9 = fadd double %mul, 5.000000e-01
  %conv = fptosi double %add9 to i32
  store i32 %conv, i32* %lambda_factor, align 4
  store i32 0, i32* %mv_shift, align 4
  %16 = load %struct.InputParameters*, %struct.InputParameters** @input, align 8
  %blc_size = getelementptr inbounds %struct.InputParameters, %struct.InputParameters* %16, i32 0, i32 20
  %17 = load i32, i32* %blocktype.addr, align 4
  %idxprom10 = sext i32 %17 to i64
  %arrayidx11 = getelementptr inbounds [8 x [2 x i32]], [8 x [2 x i32]]* %blc_size, i64 0, i64 %idxprom10
  %arrayidx12 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx11, i64 0, i64 0
  %18 = load i32, i32* %arrayidx12, align 8
  store i32 %18, i32* %blocksize_x, align 4
  %19 = load %struct.InputParameters*, %struct.InputParameters** @input, align 8
  %blc_size13 = getelementptr inbounds %struct.InputParameters, %struct.InputParameters* %19, i32 0, i32 20
  %20 = load i32, i32* %blocktype.addr, align 4
  %idxprom14 = sext i32 %20 to i64
  %arrayidx15 = getelementptr inbounds [8 x [2 x i32]], [8 x [2 x i32]]* %blc_size13, i64 0, i64 %idxprom14
  %arrayidx16 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx15, i64 0, i64 1
  %21 = load i32, i32* %arrayidx16, align 4
  store i32 %21, i32* %blocksize_y, align 4
  %22 = load i32, i32* %pic_pix_x.addr, align 4
  %shl = shl i32 %22, 2
  store i32 %shl, i32* %pic4_pix_x, align 4
  %23 = load i32, i32* %pic_pix_y.addr, align 4
  %shl17 = shl i32 %23, 2
  store i32 %shl17, i32* %pic4_pix_y, align 4
  %24 = load %struct.storable_picture*, %struct.storable_picture** %ref_picture, align 8
  %size_x = getelementptr inbounds %struct.storable_picture, %struct.storable_picture* %24, i32 0, i32 18
  %25 = load i32, i32* %size_x, align 8
  %26 = load i32, i32* %blocksize_x, align 4
  %sub = sub nsw i32 %25, %26
  %add18 = add nsw i32 %sub, 1
  %shl19 = shl i32 %add18, 2
  store i32 %shl19, i32* %max_pos_x4, align 4
  %27 = load %struct.storable_picture*, %struct.storable_picture** %ref_picture, align 8
  %size_y = getelementptr inbounds %struct.storable_picture, %struct.storable_picture* %27, i32 0, i32 19
  %28 = load i32, i32* %size_y, align 4
  %29 = load i32, i32* %blocksize_y, align 4
  %sub20 = sub nsw i32 %28, %29
  %add21 = add nsw i32 %sub20, 1
  %shl22 = shl i32 %add21, 2
  store i32 %shl22, i32* %max_pos_y4, align 4
  store i32 0, i32* %currmv_x, align 4
  store i32 0, i32* %currmv_y, align 4
  %30 = load i16*, i16** %mv_x.addr, align 8
  %31 = load i16, i16* %30, align 2
  %conv23 = sext i16 %31 to i32
  %shl24 = shl i32 %conv23, 2
  %conv25 = trunc i32 %shl24 to i16
  store i16 %conv25, i16* %30, align 2
  %32 = load i16*, i16** %mv_y.addr, align 8
  %33 = load i16, i16* %32, align 2
  %conv26 = sext i16 %33 to i32
  %shl27 = shl i32 %conv26, 2
  %conv28 = trunc i32 %shl27 to i16
  store i16 %conv28, i16* %32, align 2
  %34 = load i32, i32* %pic4_pix_x, align 4
  %35 = load i16*, i16** %mv_x.addr, align 8
  %36 = load i16, i16* %35, align 2
  %conv29 = sext i16 %36 to i32
  %add30 = add nsw i32 %34, %conv29
  %cmp = icmp sgt i32 %add30, 1
  br i1 %cmp, label %land.lhs.true32, label %if.else

land.lhs.true32:                                  ; preds = %cond.end
  %37 = load i32, i32* %pic4_pix_x, align 4
  %38 = load i16*, i16** %mv_x.addr, align 8
  %39 = load i16, i16* %38, align 2
  %conv33 = sext i16 %39 to i32
  %add34 = add nsw i32 %37, %conv33
  %40 = load i32, i32* %max_pos_x4, align 4
  %sub35 = sub nsw i32 %40, 2
  %cmp36 = icmp slt i32 %add34, %sub35
  br i1 %cmp36, label %land.lhs.true38, label %if.else

land.lhs.true38:                                  ; preds = %land.lhs.true32
  %41 = load i32, i32* %pic4_pix_y, align 4
  %42 = load i16*, i16** %mv_y.addr, align 8
  %43 = load i16, i16* %42, align 2
  %conv39 = sext i16 %43 to i32
  %add40 = add nsw i32 %41, %conv39
  %cmp41 = icmp sgt i32 %add40, 1
  br i1 %cmp41, label %land.lhs.true43, label %if.else

land.lhs.true43:                                  ; preds = %land.lhs.true38
  %44 = load i32, i32* %pic4_pix_y, align 4
  %45 = load i16*, i16** %mv_y.addr, align 8
  %46 = load i16, i16* %45, align 2
  %conv44 = sext i16 %46 to i32
  %add45 = add nsw i32 %44, %conv44
  %47 = load i32, i32* %max_pos_y4, align 4
  %sub46 = sub nsw i32 %47, 2
  %cmp47 = icmp slt i32 %add45, %sub46
  br i1 %cmp47, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true43
  store i16 (i16**, i32, i32, i32, i32)* @FastPelY_14, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  br label %if.end

if.else:                                          ; preds = %land.lhs.true43, %land.lhs.true38, %land.lhs.true32, %cond.end
  store i16 (i16**, i32, i32, i32, i32)* @UMVPelY_14, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  store i32 3, i32* %search_range_dynamic, align 4
  %48 = load i16, i16* %pred_mv_x.addr, align 2
  %conv49 = sext i16 %48 to i32
  %49 = load i16*, i16** %mv_x.addr, align 8
  %50 = load i16, i16* %49, align 2
  %conv50 = sext i16 %50 to i32
  %sub51 = sub nsw i32 %conv49, %conv50
  %rem52 = srem i32 %sub51, 4
  store i32 %rem52, i32* %pred_frac_mv_x, align 4
  %51 = load i16, i16* %pred_mv_y.addr, align 2
  %conv53 = sext i16 %51 to i32
  %52 = load i16*, i16** %mv_y.addr, align 8
  %53 = load i16, i16* %52, align 2
  %conv54 = sext i16 %53 to i32
  %sub55 = sub nsw i32 %conv53, %conv54
  %rem56 = srem i32 %sub55, 4
  store i32 %rem56, i32* %pred_frac_mv_y, align 4
  %54 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @pred_MV_uplayer, i64 0, i64 0), align 4
  %55 = load i16*, i16** %mv_x.addr, align 8
  %56 = load i16, i16* %55, align 2
  %conv57 = sext i16 %56 to i32
  %sub58 = sub nsw i32 %54, %conv57
  %rem59 = srem i32 %sub58, 4
  store i32 %rem59, i32* %pred_frac_up_mv_x, align 4
  %57 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @pred_MV_uplayer, i64 0, i64 1), align 4
  %58 = load i16*, i16** %mv_y.addr, align 8
  %59 = load i16, i16* %58, align 2
  %conv60 = sext i16 %59 to i32
  %sub61 = sub nsw i32 %57, %conv60
  %rem62 = srem i32 %sub61, 4
  store i32 %rem62, i32* %pred_frac_up_mv_y, align 4
  %60 = load i8**, i8*** @SearchState, align 8
  %arrayidx63 = getelementptr inbounds i8*, i8** %60, i64 0
  %61 = load i8*, i8** %arrayidx63, align 8
  %62 = load i32, i32* %search_range_dynamic, align 4
  %mul64 = mul nsw i32 2, %62
  %add65 = add nsw i32 %mul64, 1
  %63 = load i32, i32* %search_range_dynamic, align 4
  %mul66 = mul nsw i32 2, %63
  %add67 = add nsw i32 %mul66, 1
  %mul68 = mul nsw i32 %add65, %add67
  %conv69 = sext i32 %mul68 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %61, i8 0, i64 %conv69, i1 false)
  %64 = load %struct.InputParameters*, %struct.InputParameters** @input, align 8
  %hadamard = getelementptr inbounds %struct.InputParameters, %struct.InputParameters* %64, i32 0, i32 6
  %65 = load i32, i32* %hadamard, align 8
  %tobool70 = icmp ne i32 %65, 0
  br i1 %tobool70, label %if.then71, label %if.else94

if.then71:                                        ; preds = %if.end
  %66 = load i16*, i16** %mv_x.addr, align 8
  %67 = load i16, i16* %66, align 2
  %conv72 = sext i16 %67 to i32
  store i32 %conv72, i32* %cand_mv_x, align 4
  %68 = load i16*, i16** %mv_y.addr, align 8
  %69 = load i16, i16* %68, align 2
  %conv73 = sext i16 %69 to i32
  store i32 %conv73, i32* %cand_mv_y, align 4
  %70 = load i32, i32* %lambda_factor, align 4
  %71 = load i32*, i32** @mvbits, align 8
  %72 = load i32, i32* %cand_mv_x, align 4
  %73 = load i32, i32* %mv_shift, align 4
  %shl74 = shl i32 %72, %73
  %74 = load i16, i16* %pred_mv_x.addr, align 2
  %conv75 = sext i16 %74 to i32
  %sub76 = sub nsw i32 %shl74, %conv75
  %idxprom77 = sext i32 %sub76 to i64
  %arrayidx78 = getelementptr inbounds i32, i32* %71, i64 %idxprom77
  %75 = load i32, i32* %arrayidx78, align 4
  %76 = load i32*, i32** @mvbits, align 8
  %77 = load i32, i32* %cand_mv_y, align 4
  %78 = load i32, i32* %mv_shift, align 4
  %shl79 = shl i32 %77, %78
  %79 = load i16, i16* %pred_mv_y.addr, align 2
  %conv80 = sext i16 %79 to i32
  %sub81 = sub nsw i32 %shl79, %conv80
  %idxprom82 = sext i32 %sub81 to i64
  %arrayidx83 = getelementptr inbounds i32, i32* %76, i64 %idxprom82
  %80 = load i32, i32* %arrayidx83, align 4
  %add84 = add nsw i32 %75, %80
  %mul85 = mul nsw i32 %70, %add84
  %shr = ashr i32 %mul85, 16
  store i32 %shr, i32* %mv_cost, align 4
  %81 = load i32, i32* %pic_pix_x.addr, align 4
  %82 = load i32, i32* %pic_pix_y.addr, align 4
  %83 = load i32, i32* %blocksize_x, align 4
  %84 = load i32, i32* %blocksize_y, align 4
  %85 = load i32, i32* %cand_mv_x, align 4
  %86 = load i32, i32* %cand_mv_y, align 4
  %87 = load %struct.storable_picture*, %struct.storable_picture** %ref_picture, align 8
  %88 = load i16**, i16*** %orig_pic.addr, align 8
  %89 = load i32, i32* %mv_cost, align 4
  %90 = load i32, i32* %min_mcost.addr, align 4
  %91 = load i32, i32* %useABT.addr, align 4
  %call = call i32 @AddUpSADQuarter(i32 %81, i32 %82, i32 %83, i32 %84, i32 %85, i32 %86, %struct.storable_picture* %87, i16** %88, i32 %89, i32 %90, i32 %91)
  store i32 %call, i32* %mcost, align 4
  %92 = load i8**, i8*** @SearchState, align 8
  %93 = load i32, i32* %search_range_dynamic, align 4
  %idxprom86 = sext i32 %93 to i64
  %arrayidx87 = getelementptr inbounds i8*, i8** %92, i64 %idxprom86
  %94 = load i8*, i8** %arrayidx87, align 8
  %95 = load i32, i32* %search_range_dynamic, align 4
  %idxprom88 = sext i32 %95 to i64
  %arrayidx89 = getelementptr inbounds i8, i8* %94, i64 %idxprom88
  store i8 1, i8* %arrayidx89, align 1
  %96 = load i32, i32* %mcost, align 4
  %97 = load i32, i32* %min_mcost.addr, align 4
  %cmp90 = icmp slt i32 %96, %97
  br i1 %cmp90, label %if.then92, label %if.end93

if.then92:                                        ; preds = %if.then71
  %98 = load i32, i32* %mcost, align 4
  store i32 %98, i32* %min_mcost.addr, align 4
  %99 = load i32, i32* %cand_mv_x, align 4
  store i32 %99, i32* %currmv_x, align 4
  %100 = load i32, i32* %cand_mv_y, align 4
  store i32 %100, i32* %currmv_y, align 4
  br label %if.end93

if.end93:                                         ; preds = %if.then92, %if.then71
  br label %if.end101

if.else94:                                        ; preds = %if.end
  %101 = load i8**, i8*** @SearchState, align 8
  %102 = load i32, i32* %search_range_dynamic, align 4
  %idxprom95 = sext i32 %102 to i64
  %arrayidx96 = getelementptr inbounds i8*, i8** %101, i64 %idxprom95
  %103 = load i8*, i8** %arrayidx96, align 8
  %104 = load i32, i32* %search_range_dynamic, align 4
  %idxprom97 = sext i32 %104 to i64
  %arrayidx98 = getelementptr inbounds i8, i8* %103, i64 %idxprom97
  store i8 1, i8* %arrayidx98, align 1
  %105 = load i16*, i16** %mv_x.addr, align 8
  %106 = load i16, i16* %105, align 2
  %conv99 = sext i16 %106 to i32
  store i32 %conv99, i32* %currmv_x, align 4
  %107 = load i16*, i16** %mv_y.addr, align 8
  %108 = load i16, i16* %107, align 2
  %conv100 = sext i16 %108 to i32
  store i32 %conv100, i32* %currmv_y, align 4
  br label %if.end101

if.end101:                                        ; preds = %if.else94, %if.end93
  %109 = load i32, i32* %pred_frac_mv_x, align 4
  %cmp102 = icmp ne i32 %109, 0
  br i1 %cmp102, label %if.then106, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end101
  %110 = load i32, i32* %pred_frac_mv_y, align 4
  %cmp104 = icmp ne i32 %110, 0
  br i1 %cmp104, label %if.then106, label %if.end139

if.then106:                                       ; preds = %lor.lhs.false, %if.end101
  %111 = load i16*, i16** %mv_x.addr, align 8
  %112 = load i16, i16* %111, align 2
  %conv107 = sext i16 %112 to i32
  %113 = load i32, i32* %pred_frac_mv_x, align 4
  %add108 = add nsw i32 %conv107, %113
  store i32 %add108, i32* %cand_mv_x, align 4
  %114 = load i16*, i16** %mv_y.addr, align 8
  %115 = load i16, i16* %114, align 2
  %conv109 = sext i16 %115 to i32
  %116 = load i32, i32* %pred_frac_mv_y, align 4
  %add110 = add nsw i32 %conv109, %116
  store i32 %add110, i32* %cand_mv_y, align 4
  %117 = load i32, i32* %lambda_factor, align 4
  %118 = load i32*, i32** @mvbits, align 8
  %119 = load i32, i32* %cand_mv_x, align 4
  %120 = load i32, i32* %mv_shift, align 4
  %shl111 = shl i32 %119, %120
  %121 = load i16, i16* %pred_mv_x.addr, align 2
  %conv112 = sext i16 %121 to i32
  %sub113 = sub nsw i32 %shl111, %conv112
  %idxprom114 = sext i32 %sub113 to i64
  %arrayidx115 = getelementptr inbounds i32, i32* %118, i64 %idxprom114
  %122 = load i32, i32* %arrayidx115, align 4
  %123 = load i32*, i32** @mvbits, align 8
  %124 = load i32, i32* %cand_mv_y, align 4
  %125 = load i32, i32* %mv_shift, align 4
  %shl116 = shl i32 %124, %125
  %126 = load i16, i16* %pred_mv_y.addr, align 2
  %conv117 = sext i16 %126 to i32
  %sub118 = sub nsw i32 %shl116, %conv117
  %idxprom119 = sext i32 %sub118 to i64
  %arrayidx120 = getelementptr inbounds i32, i32* %123, i64 %idxprom119
  %127 = load i32, i32* %arrayidx120, align 4
  %add121 = add nsw i32 %122, %127
  %mul122 = mul nsw i32 %117, %add121
  %shr123 = ashr i32 %mul122, 16
  store i32 %shr123, i32* %mv_cost, align 4
  %128 = load i32, i32* %pic_pix_x.addr, align 4
  %129 = load i32, i32* %pic_pix_y.addr, align 4
  %130 = load i32, i32* %blocksize_x, align 4
  %131 = load i32, i32* %blocksize_y, align 4
  %132 = load i32, i32* %cand_mv_x, align 4
  %133 = load i32, i32* %cand_mv_y, align 4
  %134 = load %struct.storable_picture*, %struct.storable_picture** %ref_picture, align 8
  %135 = load i16**, i16*** %orig_pic.addr, align 8
  %136 = load i32, i32* %mv_cost, align 4
  %137 = load i32, i32* %min_mcost.addr, align 4
  %138 = load i32, i32* %useABT.addr, align 4
  %call124 = call i32 @AddUpSADQuarter(i32 %128, i32 %129, i32 %130, i32 %131, i32 %132, i32 %133, %struct.storable_picture* %134, i16** %135, i32 %136, i32 %137, i32 %138)
  store i32 %call124, i32* %mcost, align 4
  %139 = load i8**, i8*** @SearchState, align 8
  %140 = load i32, i32* %cand_mv_y, align 4
  %141 = load i16*, i16** %mv_y.addr, align 8
  %142 = load i16, i16* %141, align 2
  %conv125 = sext i16 %142 to i32
  %sub126 = sub nsw i32 %140, %conv125
  %143 = load i32, i32* %search_range_dynamic, align 4
  %add127 = add nsw i32 %sub126, %143
  %idxprom128 = sext i32 %add127 to i64
  %arrayidx129 = getelementptr inbounds i8*, i8** %139, i64 %idxprom128
  %144 = load i8*, i8** %arrayidx129, align 8
  %145 = load i32, i32* %cand_mv_x, align 4
  %146 = load i16*, i16** %mv_x.addr, align 8
  %147 = load i16, i16* %146, align 2
  %conv130 = sext i16 %147 to i32
  %sub131 = sub nsw i32 %145, %conv130
  %148 = load i32, i32* %search_range_dynamic, align 4
  %add132 = add nsw i32 %sub131, %148
  %idxprom133 = sext i32 %add132 to i64
  %arrayidx134 = getelementptr inbounds i8, i8* %144, i64 %idxprom133
  store i8 1, i8* %arrayidx134, align 1
  %149 = load i32, i32* %mcost, align 4
  %150 = load i32, i32* %min_mcost.addr, align 4
  %cmp135 = icmp slt i32 %149, %150
  br i1 %cmp135, label %if.then137, label %if.end138

if.then137:                                       ; preds = %if.then106
  %151 = load i32, i32* %mcost, align 4
  store i32 %151, i32* %min_mcost.addr, align 4
  %152 = load i32, i32* %cand_mv_x, align 4
  store i32 %152, i32* %currmv_x, align 4
  %153 = load i32, i32* %cand_mv_y, align 4
  store i32 %153, i32* %currmv_y, align 4
  br label %if.end138

if.end138:                                        ; preds = %if.then137, %if.then106
  br label %if.end139

if.end139:                                        ; preds = %if.end138, %lor.lhs.false
  %154 = load i32, i32* %currmv_x, align 4
  store i32 %154, i32* %iXMinNow, align 4
  %155 = load i32, i32* %currmv_y, align 4
  store i32 %155, i32* %iYMinNow, align 4
  %156 = load i32, i32* %search_range_dynamic, align 4
  %mul140 = mul nsw i32 2, %156
  %add141 = add nsw i32 %mul140, 1
  store i32 %add141, i32* %iCurrSearchRange, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc211, %if.end139
  %157 = load i32, i32* %i, align 4
  %158 = load i32, i32* %iCurrSearchRange, align 4
  %cmp142 = icmp slt i32 %157, %158
  br i1 %cmp142, label %for.body, label %for.end213

for.body:                                         ; preds = %for.cond
  store i32 1, i32* %abort_search, align 4
  store i32 65536, i32* %iSADLayer, align 4
  store i32 0, i32* %m, align 4
  br label %for.cond144

for.cond144:                                      ; preds = %for.inc, %for.body
  %159 = load i32, i32* %m, align 4
  %cmp145 = icmp slt i32 %159, 4
  br i1 %cmp145, label %for.body147, label %for.end

for.body147:                                      ; preds = %for.cond144
  %160 = load i32, i32* %iXMinNow, align 4
  %161 = load i32, i32* %m, align 4
  %idxprom148 = sext i32 %161 to i64
  %arrayidx149 = getelementptr inbounds [4 x i32], [4 x i32]* @FastSubPelBlockMotionSearch.Diamond_x, i64 0, i64 %idxprom148
  %162 = load i32, i32* %arrayidx149, align 4
  %add150 = add nsw i32 %160, %162
  store i32 %add150, i32* %cand_mv_x, align 4
  %163 = load i32, i32* %iYMinNow, align 4
  %164 = load i32, i32* %m, align 4
  %idxprom151 = sext i32 %164 to i64
  %arrayidx152 = getelementptr inbounds [4 x i32], [4 x i32]* @FastSubPelBlockMotionSearch.Diamond_y, i64 0, i64 %idxprom151
  %165 = load i32, i32* %arrayidx152, align 4
  %add153 = add nsw i32 %163, %165
  store i32 %add153, i32* %cand_mv_y, align 4
  %166 = load i32, i32* %cand_mv_x, align 4
  %167 = load i16*, i16** %mv_x.addr, align 8
  %168 = load i16, i16* %167, align 2
  %conv154 = sext i16 %168 to i32
  %sub155 = sub nsw i32 %166, %conv154
  %call156 = call i32 @abs(i32 %sub155) #6
  %169 = load i32, i32* %search_range_dynamic, align 4
  %cmp157 = icmp sle i32 %call156, %169
  br i1 %cmp157, label %land.lhs.true159, label %if.end207

land.lhs.true159:                                 ; preds = %for.body147
  %170 = load i32, i32* %cand_mv_y, align 4
  %171 = load i16*, i16** %mv_y.addr, align 8
  %172 = load i16, i16* %171, align 2
  %conv160 = sext i16 %172 to i32
  %sub161 = sub nsw i32 %170, %conv160
  %call162 = call i32 @abs(i32 %sub161) #6
  %173 = load i32, i32* %search_range_dynamic, align 4
  %cmp163 = icmp sle i32 %call162, %173
  br i1 %cmp163, label %if.then165, label %if.end207

if.then165:                                       ; preds = %land.lhs.true159
  %174 = load i8**, i8*** @SearchState, align 8
  %175 = load i32, i32* %cand_mv_y, align 4
  %176 = load i16*, i16** %mv_y.addr, align 8
  %177 = load i16, i16* %176, align 2
  %conv166 = sext i16 %177 to i32
  %sub167 = sub nsw i32 %175, %conv166
  %178 = load i32, i32* %search_range_dynamic, align 4
  %add168 = add nsw i32 %sub167, %178
  %idxprom169 = sext i32 %add168 to i64
  %arrayidx170 = getelementptr inbounds i8*, i8** %174, i64 %idxprom169
  %179 = load i8*, i8** %arrayidx170, align 8
  %180 = load i32, i32* %cand_mv_x, align 4
  %181 = load i16*, i16** %mv_x.addr, align 8
  %182 = load i16, i16* %181, align 2
  %conv171 = sext i16 %182 to i32
  %sub172 = sub nsw i32 %180, %conv171
  %183 = load i32, i32* %search_range_dynamic, align 4
  %add173 = add nsw i32 %sub172, %183
  %idxprom174 = sext i32 %add173 to i64
  %arrayidx175 = getelementptr inbounds i8, i8* %179, i64 %idxprom174
  %184 = load i8, i8* %arrayidx175, align 1
  %tobool176 = icmp ne i8 %184, 0
  br i1 %tobool176, label %if.end206, label %if.then177

if.then177:                                       ; preds = %if.then165
  %185 = load i32, i32* %lambda_factor, align 4
  %186 = load i32*, i32** @mvbits, align 8
  %187 = load i32, i32* %cand_mv_x, align 4
  %188 = load i32, i32* %mv_shift, align 4
  %shl178 = shl i32 %187, %188
  %189 = load i16, i16* %pred_mv_x.addr, align 2
  %conv179 = sext i16 %189 to i32
  %sub180 = sub nsw i32 %shl178, %conv179
  %idxprom181 = sext i32 %sub180 to i64
  %arrayidx182 = getelementptr inbounds i32, i32* %186, i64 %idxprom181
  %190 = load i32, i32* %arrayidx182, align 4
  %191 = load i32*, i32** @mvbits, align 8
  %192 = load i32, i32* %cand_mv_y, align 4
  %193 = load i32, i32* %mv_shift, align 4
  %shl183 = shl i32 %192, %193
  %194 = load i16, i16* %pred_mv_y.addr, align 2
  %conv184 = sext i16 %194 to i32
  %sub185 = sub nsw i32 %shl183, %conv184
  %idxprom186 = sext i32 %sub185 to i64
  %arrayidx187 = getelementptr inbounds i32, i32* %191, i64 %idxprom186
  %195 = load i32, i32* %arrayidx187, align 4
  %add188 = add nsw i32 %190, %195
  %mul189 = mul nsw i32 %185, %add188
  %shr190 = ashr i32 %mul189, 16
  store i32 %shr190, i32* %mv_cost, align 4
  %196 = load i32, i32* %pic_pix_x.addr, align 4
  %197 = load i32, i32* %pic_pix_y.addr, align 4
  %198 = load i32, i32* %blocksize_x, align 4
  %199 = load i32, i32* %blocksize_y, align 4
  %200 = load i32, i32* %cand_mv_x, align 4
  %201 = load i32, i32* %cand_mv_y, align 4
  %202 = load %struct.storable_picture*, %struct.storable_picture** %ref_picture, align 8
  %203 = load i16**, i16*** %orig_pic.addr, align 8
  %204 = load i32, i32* %mv_cost, align 4
  %205 = load i32, i32* %min_mcost.addr, align 4
  %206 = load i32, i32* %useABT.addr, align 4
  %call191 = call i32 @AddUpSADQuarter(i32 %196, i32 %197, i32 %198, i32 %199, i32 %200, i32 %201, %struct.storable_picture* %202, i16** %203, i32 %204, i32 %205, i32 %206)
  store i32 %call191, i32* %mcost, align 4
  %207 = load i8**, i8*** @SearchState, align 8
  %208 = load i32, i32* %cand_mv_y, align 4
  %209 = load i16*, i16** %mv_y.addr, align 8
  %210 = load i16, i16* %209, align 2
  %conv192 = sext i16 %210 to i32
  %sub193 = sub nsw i32 %208, %conv192
  %211 = load i32, i32* %search_range_dynamic, align 4
  %add194 = add nsw i32 %sub193, %211
  %idxprom195 = sext i32 %add194 to i64
  %arrayidx196 = getelementptr inbounds i8*, i8** %207, i64 %idxprom195
  %212 = load i8*, i8** %arrayidx196, align 8
  %213 = load i32, i32* %cand_mv_x, align 4
  %214 = load i16*, i16** %mv_x.addr, align 8
  %215 = load i16, i16* %214, align 2
  %conv197 = sext i16 %215 to i32
  %sub198 = sub nsw i32 %213, %conv197
  %216 = load i32, i32* %search_range_dynamic, align 4
  %add199 = add nsw i32 %sub198, %216
  %idxprom200 = sext i32 %add199 to i64
  %arrayidx201 = getelementptr inbounds i8, i8* %212, i64 %idxprom200
  store i8 1, i8* %arrayidx201, align 1
  %217 = load i32, i32* %mcost, align 4
  %218 = load i32, i32* %min_mcost.addr, align 4
  %cmp202 = icmp slt i32 %217, %218
  br i1 %cmp202, label %if.then204, label %if.end205

if.then204:                                       ; preds = %if.then177
  %219 = load i32, i32* %mcost, align 4
  store i32 %219, i32* %min_mcost.addr, align 4
  %220 = load i32, i32* %cand_mv_x, align 4
  store i32 %220, i32* %currmv_x, align 4
  %221 = load i32, i32* %cand_mv_y, align 4
  store i32 %221, i32* %currmv_y, align 4
  store i32 0, i32* %abort_search, align 4
  br label %if.end205

if.end205:                                        ; preds = %if.then204, %if.then177
  br label %if.end206

if.end206:                                        ; preds = %if.end205, %if.then165
  br label %if.end207

if.end207:                                        ; preds = %if.end206, %land.lhs.true159, %for.body147
  br label %for.inc

for.inc:                                          ; preds = %if.end207
  %222 = load i32, i32* %m, align 4
  %inc = add nsw i32 %222, 1
  store i32 %inc, i32* %m, align 4
  br label %for.cond144

for.end:                                          ; preds = %for.cond144
  %223 = load i32, i32* %currmv_x, align 4
  store i32 %223, i32* %iXMinNow, align 4
  %224 = load i32, i32* %currmv_y, align 4
  store i32 %224, i32* %iYMinNow, align 4
  %225 = load i32, i32* %abort_search, align 4
  %tobool208 = icmp ne i32 %225, 0
  br i1 %tobool208, label %if.then209, label %if.end210

if.then209:                                       ; preds = %for.end
  br label %for.end213

if.end210:                                        ; preds = %for.end
  br label %for.inc211

for.inc211:                                       ; preds = %if.end210
  %226 = load i32, i32* %i, align 4
  %inc212 = add nsw i32 %226, 1
  store i32 %inc212, i32* %i, align 4
  br label %for.cond

for.end213:                                       ; preds = %if.then209, %for.cond
  %227 = load i32, i32* %currmv_x, align 4
  %conv214 = trunc i32 %227 to i16
  %228 = load i16*, i16** %mv_x.addr, align 8
  store i16 %conv214, i16* %228, align 2
  %229 = load i32, i32* %currmv_y, align 4
  %conv215 = trunc i32 %229 to i16
  %230 = load i16*, i16** %mv_y.addr, align 8
  store i16 %conv215, i16* %230, align 2
  %231 = load i32, i32* %min_mcost.addr, align 4
  %232 = load i32, i32* %canary
  %233 = icmp eq i32 %232, 1421944360
  br i1 %233, label %234, label %func_exit

234:                                              ; preds = %for.end213, %func_exit
  ret i32 %231

func_exit:                                        ; preds = %for.end213
  call void @detect_breach()
  br label %234
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @get_mem_mincost.6(i32****** %mv) #0 {
entry:
  %j = alloca i32, align 4
  %i = alloca i32, align 4
  %k = alloca i32, align 4
  %canary = alloca i32
  store i32 1035717275, i32* %canary
  %mv.addr = alloca i32******, align 8
  %l = alloca i32, align 4
  store i32****** %mv, i32******* %mv.addr, align 8
  %0 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %width = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %0, i32 0, i32 13
  %1 = load i32, i32* %width, align 4
  %div = sdiv i32 %1, 4
  %conv = sext i32 %div to i64
  %call = call noalias i8* @calloc(i64 %conv, i64 8) #5
  %2 = bitcast i8* %call to i32*****
  %3 = load i32******, i32******* %mv.addr, align 8
  store i32***** %2, i32****** %3, align 8
  %cmp = icmp eq i32***** %2, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @no_mem_exit(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc68, %if.end
  %4 = load i32, i32* %i, align 4
  %5 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %width2 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %5, i32 0, i32 13
  %6 = load i32, i32* %width2, align 4
  %div3 = sdiv i32 %6, 4
  %cmp4 = icmp slt i32 %4, %div3
  br i1 %cmp4, label %for.body, label %for.end70

for.body:                                         ; preds = %for.cond
  %7 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %7, i32 0, i32 15
  %8 = load i32, i32* %height, align 4
  %div6 = sdiv i32 %8, 4
  %conv7 = sext i32 %div6 to i64
  %call8 = call noalias i8* @calloc(i64 %conv7, i64 8) #5
  %9 = bitcast i8* %call8 to i32****
  %10 = load i32******, i32******* %mv.addr, align 8
  %11 = load i32*****, i32****** %10, align 8
  %12 = load i32, i32* %i, align 4
  %idxprom = sext i32 %12 to i64
  %arrayidx = getelementptr inbounds i32****, i32***** %11, i64 %idxprom
  store i32**** %9, i32***** %arrayidx, align 8
  %cmp9 = icmp eq i32**** %9, null
  br i1 %cmp9, label %if.then11, label %if.end12

if.then11:                                        ; preds = %for.body
  call void @no_mem_exit(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %if.end12

if.end12:                                         ; preds = %if.then11, %for.body
  store i32 0, i32* %j, align 4
  br label %for.cond13

for.cond13:                                       ; preds = %for.inc65, %if.end12
  %13 = load i32, i32* %j, align 4
  %14 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height14 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %14, i32 0, i32 15
  %15 = load i32, i32* %height14, align 4
  %div15 = sdiv i32 %15, 4
  %cmp16 = icmp slt i32 %13, %div15
  br i1 %cmp16, label %for.body18, label %for.end67

for.body18:                                       ; preds = %for.cond13
  %16 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %max_num_references = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %16, i32 0, i32 9
  %17 = load i32, i32* %max_num_references, align 4
  %conv19 = sext i32 %17 to i64
  %call20 = call noalias i8* @calloc(i64 %conv19, i64 8) #5
  %18 = bitcast i8* %call20 to i32***
  %19 = load i32******, i32******* %mv.addr, align 8
  %20 = load i32*****, i32****** %19, align 8
  %21 = load i32, i32* %i, align 4
  %idxprom21 = sext i32 %21 to i64
  %arrayidx22 = getelementptr inbounds i32****, i32***** %20, i64 %idxprom21
  %22 = load i32****, i32***** %arrayidx22, align 8
  %23 = load i32, i32* %j, align 4
  %idxprom23 = sext i32 %23 to i64
  %arrayidx24 = getelementptr inbounds i32***, i32**** %22, i64 %idxprom23
  store i32*** %18, i32**** %arrayidx24, align 8
  %cmp25 = icmp eq i32*** %18, null
  br i1 %cmp25, label %if.then27, label %if.end28

if.then27:                                        ; preds = %for.body18
  call void @no_mem_exit(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %if.end28

if.end28:                                         ; preds = %if.then27, %for.body18
  store i32 0, i32* %k, align 4
  br label %for.cond29

for.cond29:                                       ; preds = %for.inc62, %if.end28
  %24 = load i32, i32* %k, align 4
  %25 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %max_num_references30 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %25, i32 0, i32 9
  %26 = load i32, i32* %max_num_references30, align 4
  %cmp31 = icmp slt i32 %24, %26
  br i1 %cmp31, label %for.body33, label %for.end64

for.body33:                                       ; preds = %for.cond29
  %call34 = call noalias i8* @calloc(i64 9, i64 8) #5
  %27 = bitcast i8* %call34 to i32**
  %28 = load i32******, i32******* %mv.addr, align 8
  %29 = load i32*****, i32****** %28, align 8
  %30 = load i32, i32* %i, align 4
  %idxprom35 = sext i32 %30 to i64
  %arrayidx36 = getelementptr inbounds i32****, i32***** %29, i64 %idxprom35
  %31 = load i32****, i32***** %arrayidx36, align 8
  %32 = load i32, i32* %j, align 4
  %idxprom37 = sext i32 %32 to i64
  %arrayidx38 = getelementptr inbounds i32***, i32**** %31, i64 %idxprom37
  %33 = load i32***, i32**** %arrayidx38, align 8
  %34 = load i32, i32* %k, align 4
  %idxprom39 = sext i32 %34 to i64
  %arrayidx40 = getelementptr inbounds i32**, i32*** %33, i64 %idxprom39
  store i32** %27, i32*** %arrayidx40, align 8
  %cmp41 = icmp eq i32** %27, null
  br i1 %cmp41, label %if.then43, label %if.end44

if.then43:                                        ; preds = %for.body33
  call void @no_mem_exit(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %if.end44

if.end44:                                         ; preds = %if.then43, %for.body33
  store i32 0, i32* %l, align 4
  br label %for.cond45

for.cond45:                                       ; preds = %for.inc, %if.end44
  %35 = load i32, i32* %l, align 4
  %cmp46 = icmp slt i32 %35, 9
  br i1 %cmp46, label %for.body48, label %for.end

for.body48:                                       ; preds = %for.cond45
  %call49 = call noalias i8* @calloc(i64 3, i64 4) #5
  %36 = bitcast i8* %call49 to i32*
  %37 = load i32******, i32******* %mv.addr, align 8
  %38 = load i32*****, i32****** %37, align 8
  %39 = load i32, i32* %i, align 4
  %idxprom50 = sext i32 %39 to i64
  %arrayidx51 = getelementptr inbounds i32****, i32***** %38, i64 %idxprom50
  %40 = load i32****, i32***** %arrayidx51, align 8
  %41 = load i32, i32* %j, align 4
  %idxprom52 = sext i32 %41 to i64
  %arrayidx53 = getelementptr inbounds i32***, i32**** %40, i64 %idxprom52
  %42 = load i32***, i32**** %arrayidx53, align 8
  %43 = load i32, i32* %k, align 4
  %idxprom54 = sext i32 %43 to i64
  %arrayidx55 = getelementptr inbounds i32**, i32*** %42, i64 %idxprom54
  %44 = load i32**, i32*** %arrayidx55, align 8
  %45 = load i32, i32* %l, align 4
  %idxprom56 = sext i32 %45 to i64
  %arrayidx57 = getelementptr inbounds i32*, i32** %44, i64 %idxprom56
  store i32* %36, i32** %arrayidx57, align 8
  %cmp58 = icmp eq i32* %36, null
  br i1 %cmp58, label %if.then60, label %if.end61

if.then60:                                        ; preds = %for.body48
  call void @no_mem_exit(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %if.end61

if.end61:                                         ; preds = %if.then60, %for.body48
  br label %for.inc

for.inc:                                          ; preds = %if.end61
  %46 = load i32, i32* %l, align 4
  %inc = add nsw i32 %46, 1
  store i32 %inc, i32* %l, align 4
  br label %for.cond45

for.end:                                          ; preds = %for.cond45
  br label %for.inc62

for.inc62:                                        ; preds = %for.end
  %47 = load i32, i32* %k, align 4
  %inc63 = add nsw i32 %47, 1
  store i32 %inc63, i32* %k, align 4
  br label %for.cond29

for.end64:                                        ; preds = %for.cond29
  br label %for.inc65

for.inc65:                                        ; preds = %for.end64
  %48 = load i32, i32* %j, align 4
  %inc66 = add nsw i32 %48, 1
  store i32 %inc66, i32* %j, align 4
  br label %for.cond13

for.end67:                                        ; preds = %for.cond13
  br label %for.inc68

for.inc68:                                        ; preds = %for.end67
  %49 = load i32, i32* %i, align 4
  %inc69 = add nsw i32 %49, 1
  store i32 %inc69, i32* %i, align 4
  br label %for.cond

for.end70:                                        ; preds = %for.cond
  %50 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %width71 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %50, i32 0, i32 13
  %51 = load i32, i32* %width71, align 4
  %div72 = sdiv i32 %51, 4
  %52 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height73 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %52, i32 0, i32 15
  %53 = load i32, i32* %height73, align 4
  %mul = mul nsw i32 %div72, %53
  %div74 = sdiv i32 %mul, 4
  %54 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %max_num_references75 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %54, i32 0, i32 9
  %55 = load i32, i32* %max_num_references75, align 4
  %mul76 = mul nsw i32 %div74, %55
  %mul77 = mul nsw i32 %mul76, 9
  %mul78 = mul nsw i32 %mul77, 3
  %conv79 = sext i32 %mul78 to i64
  %mul80 = mul i64 %conv79, 4
  %conv81 = trunc i64 %mul80 to i32
  %56 = load i32, i32* %canary
  %57 = icmp eq i32 %56, 1035717275
  br i1 %57, label %58, label %func_exit

58:                                               ; preds = %for.end70, %func_exit
  ret i32 %conv81

func_exit:                                        ; preds = %for.end70
  call void @detect_breach()
  br label %58
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @get_mem_bwmincost.7(i32****** %mv) #0 {
entry:
  %j = alloca i32, align 4
  %canary = alloca i32
  store i32 964222286, i32* %canary
  %i = alloca i32, align 4
  %mv.addr = alloca i32******, align 8
  %k = alloca i32, align 4
  %l = alloca i32, align 4
  store i32****** %mv, i32******* %mv.addr, align 8
  %0 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %width = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %0, i32 0, i32 13
  %1 = load i32, i32* %width, align 4
  %div = sdiv i32 %1, 4
  %conv = sext i32 %div to i64
  %call = call noalias i8* @calloc(i64 %conv, i64 8) #5
  %2 = bitcast i8* %call to i32*****
  %3 = load i32******, i32******* %mv.addr, align 8
  store i32***** %2, i32****** %3, align 8
  %cmp = icmp eq i32***** %2, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @no_mem_exit(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc68, %if.end
  %4 = load i32, i32* %i, align 4
  %5 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %width2 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %5, i32 0, i32 13
  %6 = load i32, i32* %width2, align 4
  %div3 = sdiv i32 %6, 4
  %cmp4 = icmp slt i32 %4, %div3
  br i1 %cmp4, label %for.body, label %for.end70

for.body:                                         ; preds = %for.cond
  %7 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %7, i32 0, i32 15
  %8 = load i32, i32* %height, align 4
  %div6 = sdiv i32 %8, 4
  %conv7 = sext i32 %div6 to i64
  %call8 = call noalias i8* @calloc(i64 %conv7, i64 8) #5
  %9 = bitcast i8* %call8 to i32****
  %10 = load i32******, i32******* %mv.addr, align 8
  %11 = load i32*****, i32****** %10, align 8
  %12 = load i32, i32* %i, align 4
  %idxprom = sext i32 %12 to i64
  %arrayidx = getelementptr inbounds i32****, i32***** %11, i64 %idxprom
  store i32**** %9, i32***** %arrayidx, align 8
  %cmp9 = icmp eq i32**** %9, null
  br i1 %cmp9, label %if.then11, label %if.end12

if.then11:                                        ; preds = %for.body
  call void @no_mem_exit(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %if.end12

if.end12:                                         ; preds = %if.then11, %for.body
  store i32 0, i32* %j, align 4
  br label %for.cond13

for.cond13:                                       ; preds = %for.inc65, %if.end12
  %13 = load i32, i32* %j, align 4
  %14 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height14 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %14, i32 0, i32 15
  %15 = load i32, i32* %height14, align 4
  %div15 = sdiv i32 %15, 4
  %cmp16 = icmp slt i32 %13, %div15
  br i1 %cmp16, label %for.body18, label %for.end67

for.body18:                                       ; preds = %for.cond13
  %16 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %max_num_references = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %16, i32 0, i32 9
  %17 = load i32, i32* %max_num_references, align 4
  %conv19 = sext i32 %17 to i64
  %call20 = call noalias i8* @calloc(i64 %conv19, i64 8) #5
  %18 = bitcast i8* %call20 to i32***
  %19 = load i32******, i32******* %mv.addr, align 8
  %20 = load i32*****, i32****** %19, align 8
  %21 = load i32, i32* %i, align 4
  %idxprom21 = sext i32 %21 to i64
  %arrayidx22 = getelementptr inbounds i32****, i32***** %20, i64 %idxprom21
  %22 = load i32****, i32***** %arrayidx22, align 8
  %23 = load i32, i32* %j, align 4
  %idxprom23 = sext i32 %23 to i64
  %arrayidx24 = getelementptr inbounds i32***, i32**** %22, i64 %idxprom23
  store i32*** %18, i32**** %arrayidx24, align 8
  %cmp25 = icmp eq i32*** %18, null
  br i1 %cmp25, label %if.then27, label %if.end28

if.then27:                                        ; preds = %for.body18
  call void @no_mem_exit(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %if.end28

if.end28:                                         ; preds = %if.then27, %for.body18
  store i32 0, i32* %k, align 4
  br label %for.cond29

for.cond29:                                       ; preds = %for.inc62, %if.end28
  %24 = load i32, i32* %k, align 4
  %25 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %max_num_references30 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %25, i32 0, i32 9
  %26 = load i32, i32* %max_num_references30, align 4
  %cmp31 = icmp slt i32 %24, %26
  br i1 %cmp31, label %for.body33, label %for.end64

for.body33:                                       ; preds = %for.cond29
  %call34 = call noalias i8* @calloc(i64 9, i64 8) #5
  %27 = bitcast i8* %call34 to i32**
  %28 = load i32******, i32******* %mv.addr, align 8
  %29 = load i32*****, i32****** %28, align 8
  %30 = load i32, i32* %i, align 4
  %idxprom35 = sext i32 %30 to i64
  %arrayidx36 = getelementptr inbounds i32****, i32***** %29, i64 %idxprom35
  %31 = load i32****, i32***** %arrayidx36, align 8
  %32 = load i32, i32* %j, align 4
  %idxprom37 = sext i32 %32 to i64
  %arrayidx38 = getelementptr inbounds i32***, i32**** %31, i64 %idxprom37
  %33 = load i32***, i32**** %arrayidx38, align 8
  %34 = load i32, i32* %k, align 4
  %idxprom39 = sext i32 %34 to i64
  %arrayidx40 = getelementptr inbounds i32**, i32*** %33, i64 %idxprom39
  store i32** %27, i32*** %arrayidx40, align 8
  %cmp41 = icmp eq i32** %27, null
  br i1 %cmp41, label %if.then43, label %if.end44

if.then43:                                        ; preds = %for.body33
  call void @no_mem_exit(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %if.end44

if.end44:                                         ; preds = %if.then43, %for.body33
  store i32 0, i32* %l, align 4
  br label %for.cond45

for.cond45:                                       ; preds = %for.inc, %if.end44
  %35 = load i32, i32* %l, align 4
  %cmp46 = icmp slt i32 %35, 9
  br i1 %cmp46, label %for.body48, label %for.end

for.body48:                                       ; preds = %for.cond45
  %call49 = call noalias i8* @calloc(i64 3, i64 4) #5
  %36 = bitcast i8* %call49 to i32*
  %37 = load i32******, i32******* %mv.addr, align 8
  %38 = load i32*****, i32****** %37, align 8
  %39 = load i32, i32* %i, align 4
  %idxprom50 = sext i32 %39 to i64
  %arrayidx51 = getelementptr inbounds i32****, i32***** %38, i64 %idxprom50
  %40 = load i32****, i32***** %arrayidx51, align 8
  %41 = load i32, i32* %j, align 4
  %idxprom52 = sext i32 %41 to i64
  %arrayidx53 = getelementptr inbounds i32***, i32**** %40, i64 %idxprom52
  %42 = load i32***, i32**** %arrayidx53, align 8
  %43 = load i32, i32* %k, align 4
  %idxprom54 = sext i32 %43 to i64
  %arrayidx55 = getelementptr inbounds i32**, i32*** %42, i64 %idxprom54
  %44 = load i32**, i32*** %arrayidx55, align 8
  %45 = load i32, i32* %l, align 4
  %idxprom56 = sext i32 %45 to i64
  %arrayidx57 = getelementptr inbounds i32*, i32** %44, i64 %idxprom56
  store i32* %36, i32** %arrayidx57, align 8
  %cmp58 = icmp eq i32* %36, null
  br i1 %cmp58, label %if.then60, label %if.end61

if.then60:                                        ; preds = %for.body48
  call void @no_mem_exit(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %if.end61

if.end61:                                         ; preds = %if.then60, %for.body48
  br label %for.inc

for.inc:                                          ; preds = %if.end61
  %46 = load i32, i32* %l, align 4
  %inc = add nsw i32 %46, 1
  store i32 %inc, i32* %l, align 4
  br label %for.cond45

for.end:                                          ; preds = %for.cond45
  br label %for.inc62

for.inc62:                                        ; preds = %for.end
  %47 = load i32, i32* %k, align 4
  %inc63 = add nsw i32 %47, 1
  store i32 %inc63, i32* %k, align 4
  br label %for.cond29

for.end64:                                        ; preds = %for.cond29
  br label %for.inc65

for.inc65:                                        ; preds = %for.end64
  %48 = load i32, i32* %j, align 4
  %inc66 = add nsw i32 %48, 1
  store i32 %inc66, i32* %j, align 4
  br label %for.cond13

for.end67:                                        ; preds = %for.cond13
  br label %for.inc68

for.inc68:                                        ; preds = %for.end67
  %49 = load i32, i32* %i, align 4
  %inc69 = add nsw i32 %49, 1
  store i32 %inc69, i32* %i, align 4
  br label %for.cond

for.end70:                                        ; preds = %for.cond
  %50 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %width71 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %50, i32 0, i32 13
  %51 = load i32, i32* %width71, align 4
  %div72 = sdiv i32 %51, 4
  %52 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height73 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %52, i32 0, i32 15
  %53 = load i32, i32* %height73, align 4
  %mul = mul nsw i32 %div72, %53
  %div74 = sdiv i32 %mul, 4
  %54 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %max_num_references75 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %54, i32 0, i32 9
  %55 = load i32, i32* %max_num_references75, align 4
  %mul76 = mul nsw i32 %div74, %55
  %mul77 = mul nsw i32 %mul76, 9
  %mul78 = mul nsw i32 %mul77, 3
  %conv79 = sext i32 %mul78 to i64
  %mul80 = mul i64 %conv79, 4
  %conv81 = trunc i64 %mul80 to i32
  %56 = load i32, i32* %canary
  %57 = icmp eq i32 %56, 964222286
  br i1 %57, label %58, label %func_exit

58:                                               ; preds = %for.end70, %func_exit
  ret i32 %conv81

func_exit:                                        ; preds = %for.end70
  call void @detect_breach()
  br label %58
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @PartCalMad.8(i16* %ref_pic, i16** %orig_pic, i16* (i32, i16*, i32, i32, i32, i32)* %get_ref_line, i32 %blocksize_y, i32 %blocksize_x, i32 %blocksize_x4, i32 %mcost, i32 %min_mcost, i32 %cand_x, i32 %cand_y) #0 {
entry:
  %ref_line = alloca i16*, align 8
  %orig_pic.addr = alloca i16**, align 8
  %canary = alloca i32
  store i32 1109527802, i32* %canary
  %blocksize_y.addr = alloca i32, align 4
  %get_ref_line.addr = alloca i16* (i32, i16*, i32, i32, i32, i32)*, align 8
  %y = alloca i32, align 4
  %orig_line = alloca i16*, align 8
  %x4 = alloca i32, align 4
  %mcost.addr = alloca i32, align 4
  %ref_pic.addr = alloca i16*, align 8
  %min_mcost.addr = alloca i32, align 4
  %blocksize_x.addr = alloca i32, align 4
  %cand_x.addr = alloca i32, align 4
  %height = alloca i32, align 4
  %cand_y.addr = alloca i32, align 4
  %blocksize_x4.addr = alloca i32, align 4
  store i16* %ref_pic, i16** %ref_pic.addr, align 8
  store i16** %orig_pic, i16*** %orig_pic.addr, align 8
  store i16* (i32, i16*, i32, i32, i32, i32)* %get_ref_line, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line.addr, align 8
  store i32 %blocksize_y, i32* %blocksize_y.addr, align 4
  store i32 %blocksize_x, i32* %blocksize_x.addr, align 4
  store i32 %blocksize_x4, i32* %blocksize_x4.addr, align 4
  store i32 %mcost, i32* %mcost.addr, align 4
  store i32 %min_mcost, i32* %min_mcost.addr, align 4
  store i32 %cand_x, i32* %cand_x.addr, align 4
  store i32 %cand_y, i32* %cand_y.addr, align 4
  %0 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %MbaffFrameFlag = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %0, i32 0, i32 90
  %1 = load i32, i32* %MbaffFrameFlag, align 8
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %mb_data = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %2, i32 0, i32 51
  %3 = load %struct.macroblock*, %struct.macroblock** %mb_data, align 8
  %4 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %current_mb_nr = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %4, i32 0, i32 3
  %5 = load i32, i32* %current_mb_nr, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 %idxprom
  %mb_field = getelementptr inbounds %struct.macroblock, %struct.macroblock* %arrayidx, i32 0, i32 22
  %6 = load i32, i32* %mb_field, align 4
  %tobool1 = icmp ne i32 %6, 0
  br i1 %tobool1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %7 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height2 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %7, i32 0, i32 15
  %8 = load i32, i32* %height2, align 4
  %div = sdiv i32 %8, 2
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %entry
  %9 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height3 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %9, i32 0, i32 15
  %10 = load i32, i32* %height3, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %div, %cond.true ], [ %10, %cond.false ]
  store i32 %cond, i32* %height, align 4
  store i32 0, i32* %y, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc40, %cond.end
  %11 = load i32, i32* %y, align 4
  %12 = load i32, i32* %blocksize_y.addr, align 4
  %cmp = icmp slt i32 %11, %12
  br i1 %cmp, label %for.body, label %for.end42

for.body:                                         ; preds = %for.cond
  %13 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line.addr, align 8
  %14 = load i32, i32* %blocksize_x.addr, align 4
  %15 = load i16*, i16** %ref_pic.addr, align 8
  %16 = load i32, i32* %cand_y.addr, align 4
  %17 = load i32, i32* %y, align 4
  %add = add nsw i32 %16, %17
  %18 = load i32, i32* %cand_x.addr, align 4
  %19 = load i32, i32* %height, align 4
  %20 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %width = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %20, i32 0, i32 13
  %21 = load i32, i32* %width, align 4
  %call = call i16* %13(i32 %14, i16* %15, i32 %add, i32 %18, i32 %19, i32 %21)
  store i16* %call, i16** %ref_line, align 8
  %22 = load i16**, i16*** %orig_pic.addr, align 8
  %23 = load i32, i32* %y, align 4
  %idxprom4 = sext i32 %23 to i64
  %arrayidx5 = getelementptr inbounds i16*, i16** %22, i64 %idxprom4
  %24 = load i16*, i16** %arrayidx5, align 8
  store i16* %24, i16** %orig_line, align 8
  store i32 0, i32* %x4, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc, %for.body
  %25 = load i32, i32* %x4, align 4
  %26 = load i32, i32* %blocksize_x4.addr, align 4
  %cmp7 = icmp slt i32 %25, %26
  br i1 %cmp7, label %for.body8, label %for.end

for.body8:                                        ; preds = %for.cond6
  %27 = load i32*, i32** @byte_abs, align 8
  %28 = load i16*, i16** %orig_line, align 8
  %incdec.ptr = getelementptr inbounds i16, i16* %28, i32 1
  store i16* %incdec.ptr, i16** %orig_line, align 8
  %29 = load i16, i16* %28, align 2
  %conv = zext i16 %29 to i32
  %30 = load i16*, i16** %ref_line, align 8
  %incdec.ptr9 = getelementptr inbounds i16, i16* %30, i32 1
  store i16* %incdec.ptr9, i16** %ref_line, align 8
  %31 = load i16, i16* %30, align 2
  %conv10 = zext i16 %31 to i32
  %sub = sub nsw i32 %conv, %conv10
  %idxprom11 = sext i32 %sub to i64
  %arrayidx12 = getelementptr inbounds i32, i32* %27, i64 %idxprom11
  %32 = load i32, i32* %arrayidx12, align 4
  %33 = load i32, i32* %mcost.addr, align 4
  %add13 = add nsw i32 %33, %32
  store i32 %add13, i32* %mcost.addr, align 4
  %34 = load i32*, i32** @byte_abs, align 8
  %35 = load i16*, i16** %orig_line, align 8
  %incdec.ptr14 = getelementptr inbounds i16, i16* %35, i32 1
  store i16* %incdec.ptr14, i16** %orig_line, align 8
  %36 = load i16, i16* %35, align 2
  %conv15 = zext i16 %36 to i32
  %37 = load i16*, i16** %ref_line, align 8
  %incdec.ptr16 = getelementptr inbounds i16, i16* %37, i32 1
  store i16* %incdec.ptr16, i16** %ref_line, align 8
  %38 = load i16, i16* %37, align 2
  %conv17 = zext i16 %38 to i32
  %sub18 = sub nsw i32 %conv15, %conv17
  %idxprom19 = sext i32 %sub18 to i64
  %arrayidx20 = getelementptr inbounds i32, i32* %34, i64 %idxprom19
  %39 = load i32, i32* %arrayidx20, align 4
  %40 = load i32, i32* %mcost.addr, align 4
  %add21 = add nsw i32 %40, %39
  store i32 %add21, i32* %mcost.addr, align 4
  %41 = load i32*, i32** @byte_abs, align 8
  %42 = load i16*, i16** %orig_line, align 8
  %incdec.ptr22 = getelementptr inbounds i16, i16* %42, i32 1
  store i16* %incdec.ptr22, i16** %orig_line, align 8
  %43 = load i16, i16* %42, align 2
  %conv23 = zext i16 %43 to i32
  %44 = load i16*, i16** %ref_line, align 8
  %incdec.ptr24 = getelementptr inbounds i16, i16* %44, i32 1
  store i16* %incdec.ptr24, i16** %ref_line, align 8
  %45 = load i16, i16* %44, align 2
  %conv25 = zext i16 %45 to i32
  %sub26 = sub nsw i32 %conv23, %conv25
  %idxprom27 = sext i32 %sub26 to i64
  %arrayidx28 = getelementptr inbounds i32, i32* %41, i64 %idxprom27
  %46 = load i32, i32* %arrayidx28, align 4
  %47 = load i32, i32* %mcost.addr, align 4
  %add29 = add nsw i32 %47, %46
  store i32 %add29, i32* %mcost.addr, align 4
  %48 = load i32*, i32** @byte_abs, align 8
  %49 = load i16*, i16** %orig_line, align 8
  %incdec.ptr30 = getelementptr inbounds i16, i16* %49, i32 1
  store i16* %incdec.ptr30, i16** %orig_line, align 8
  %50 = load i16, i16* %49, align 2
  %conv31 = zext i16 %50 to i32
  %51 = load i16*, i16** %ref_line, align 8
  %incdec.ptr32 = getelementptr inbounds i16, i16* %51, i32 1
  store i16* %incdec.ptr32, i16** %ref_line, align 8
  %52 = load i16, i16* %51, align 2
  %conv33 = zext i16 %52 to i32
  %sub34 = sub nsw i32 %conv31, %conv33
  %idxprom35 = sext i32 %sub34 to i64
  %arrayidx36 = getelementptr inbounds i32, i32* %48, i64 %idxprom35
  %53 = load i32, i32* %arrayidx36, align 4
  %54 = load i32, i32* %mcost.addr, align 4
  %add37 = add nsw i32 %54, %53
  store i32 %add37, i32* %mcost.addr, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body8
  %55 = load i32, i32* %x4, align 4
  %inc = add nsw i32 %55, 1
  store i32 %inc, i32* %x4, align 4
  br label %for.cond6

for.end:                                          ; preds = %for.cond6
  %56 = load i32, i32* %mcost.addr, align 4
  %57 = load i32, i32* %min_mcost.addr, align 4
  %cmp38 = icmp sge i32 %56, %57
  br i1 %cmp38, label %if.then, label %if.end

if.then:                                          ; preds = %for.end
  br label %for.end42

if.end:                                           ; preds = %for.end
  br label %for.inc40

for.inc40:                                        ; preds = %if.end
  %58 = load i32, i32* %y, align 4
  %inc41 = add nsw i32 %58, 1
  store i32 %inc41, i32* %y, align 4
  br label %for.cond

for.end42:                                        ; preds = %if.then, %for.cond
  %59 = load i32, i32* %mcost.addr, align 4
  %60 = load i32, i32* %canary
  %61 = icmp eq i32 %60, 1109527802
  br i1 %61, label %62, label %func_exit

62:                                               ; preds = %for.end42, %func_exit
  ret i32 %59

func_exit:                                        ; preds = %for.end42
  call void @detect_breach()
  br label %62
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @FastIntegerPelBlockMotionSearch.9(i16** %orig_pic, i16 signext %ref, i32 %list, i32 %pic_pix_x, i32 %pic_pix_y, i32 %blocktype, i16 signext %pred_mv_x, i16 signext %pred_mv_y, i16* %mv_x, i16* %mv_y, i32 %search_range, i32 %min_mcost, double %lambda) #0 {
entry:
  %pred_y = alloca i32, align 4
  %iSADLayer = alloca i32, align 4
  %orig_pic.addr = alloca i16**, align 8
  %center_y = alloca i32, align 4
  %m = alloca i32, align 4
  %lambda.addr = alloca double, align 8
  %betaSec = alloca float, align 4
  %cand_x = alloca i32, align 4
  %iXMinNow = alloca i32, align 4
  %blocksize_x = alloca i32, align 4
  %blocktype.addr = alloca i32, align 4
  %iYMinNow = alloca i32, align 4
  %blocksize_y = alloca i32, align 4
  %betaThird = alloca float, align 4
  %search_range.addr = alloca i32, align 4
  %pred_mv_x.addr = alloca i16, align 2
  %ref_pic = alloca i16*, align 8
  %pic_pix_x.addr = alloca i32, align 4
  %mvshift = alloca i32, align 4
  %lambda_factor = alloca i32, align 4
  %cand_y = alloca i32, align 4
  %center_x = alloca i32, align 4
  %list_offset = alloca i32, align 4
  %canary = alloca i32
  store i32 717205320, i32* %canary
  %mv_y.addr = alloca i16*, align 8
  %get_ref_line = alloca i16* (i32, i16*, i32, i32, i32, i32)*, align 8
  %pred_x = alloca i32, align 4
  %min_mcost.addr = alloca i32, align 4
  %iAbort = alloca i32, align 4
  %mcost = alloca i32, align 4
  %pos = alloca i32, align 4
  %mv_x.addr = alloca i16*, align 8
  %height = alloca i32, align 4
  %best_x = alloca i32, align 4
  %ref.addr = alloca i16, align 2
  %pred_mv_y.addr = alloca i16, align 2
  %search_step = alloca i32, align 4
  %list.addr = alloca i32, align 4
  %N_Bframe = alloca i32, align 4
  %i = alloca i32, align 4
  %pic_pix_y.addr = alloca i32, align 4
  %blocksize_x4 = alloca i32, align 4
  %best_y = alloca i32, align 4
  store i16** %orig_pic, i16*** %orig_pic.addr, align 8
  store i16 %ref, i16* %ref.addr, align 2
  store i32 %list, i32* %list.addr, align 4
  store i32 %pic_pix_x, i32* %pic_pix_x.addr, align 4
  store i32 %pic_pix_y, i32* %pic_pix_y.addr, align 4
  store i32 %blocktype, i32* %blocktype.addr, align 4
  store i16 %pred_mv_x, i16* %pred_mv_x.addr, align 2
  store i16 %pred_mv_y, i16* %pred_mv_y.addr, align 2
  store i16* %mv_x, i16** %mv_x.addr, align 8
  store i16* %mv_y, i16** %mv_y.addr, align 8
  store i32 %search_range, i32* %search_range.addr, align 4
  store i32 %min_mcost, i32* %min_mcost.addr, align 4
  store double %lambda, double* %lambda.addr, align 8
  %0 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %MbaffFrameFlag = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %0, i32 0, i32 90
  %1 = load i32, i32* %MbaffFrameFlag, align 8
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %mb_data = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %2, i32 0, i32 51
  %3 = load %struct.macroblock*, %struct.macroblock** %mb_data, align 8
  %4 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %current_mb_nr = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %4, i32 0, i32 3
  %5 = load i32, i32* %current_mb_nr, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 %idxprom
  %mb_field = getelementptr inbounds %struct.macroblock, %struct.macroblock* %arrayidx, i32 0, i32 22
  %6 = load i32, i32* %mb_field, align 4
  %tobool1 = icmp ne i32 %6, 0
  br i1 %tobool1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %7 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %current_mb_nr2 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %7, i32 0, i32 3
  %8 = load i32, i32* %current_mb_nr2, align 4
  %rem = srem i32 %8, 2
  %tobool3 = icmp ne i32 %rem, 0
  %9 = zext i1 %tobool3 to i64
  %cond = select i1 %tobool3, i32 4, i32 2
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond4 = phi i32 [ %cond, %cond.true ], [ 0, %cond.false ]
  store i32 %cond4, i32* %list_offset, align 4
  %10 = load i32, i32* %list.addr, align 4
  %11 = load i32, i32* %list_offset, align 4
  %add = add nsw i32 %10, %11
  %idxprom5 = sext i32 %add to i64
  %arrayidx6 = getelementptr inbounds [6 x %struct.storable_picture**], [6 x %struct.storable_picture**]* @listX, i64 0, i64 %idxprom5
  %12 = load %struct.storable_picture**, %struct.storable_picture*** %arrayidx6, align 8
  %13 = load i16, i16* %ref.addr, align 2
  %idxprom7 = sext i16 %13 to i64
  %arrayidx8 = getelementptr inbounds %struct.storable_picture*, %struct.storable_picture** %12, i64 %idxprom7
  %14 = load %struct.storable_picture*, %struct.storable_picture** %arrayidx8, align 8
  %imgY_11 = getelementptr inbounds %struct.storable_picture, %struct.storable_picture* %14, i32 0, i32 26
  %15 = load i16*, i16** %imgY_11, align 8
  store i16* %15, i16** %ref_pic, align 8
  %16 = load double, double* %lambda.addr, align 8
  %mul = fmul double 6.553600e+04, %16
  %add9 = fadd double %mul, 5.000000e-01
  %conv = fptosi double %add9 to i32
  store i32 %conv, i32* %lambda_factor, align 4
  store i32 2, i32* %mvshift, align 4
  %17 = load %struct.InputParameters*, %struct.InputParameters** @input, align 8
  %blc_size = getelementptr inbounds %struct.InputParameters, %struct.InputParameters* %17, i32 0, i32 20
  %18 = load i32, i32* %blocktype.addr, align 4
  %idxprom10 = sext i32 %18 to i64
  %arrayidx11 = getelementptr inbounds [8 x [2 x i32]], [8 x [2 x i32]]* %blc_size, i64 0, i64 %idxprom10
  %arrayidx12 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx11, i64 0, i64 1
  %19 = load i32, i32* %arrayidx12, align 4
  store i32 %19, i32* %blocksize_y, align 4
  %20 = load %struct.InputParameters*, %struct.InputParameters** @input, align 8
  %blc_size13 = getelementptr inbounds %struct.InputParameters, %struct.InputParameters* %20, i32 0, i32 20
  %21 = load i32, i32* %blocktype.addr, align 4
  %idxprom14 = sext i32 %21 to i64
  %arrayidx15 = getelementptr inbounds [8 x [2 x i32]], [8 x [2 x i32]]* %blc_size13, i64 0, i64 %idxprom14
  %arrayidx16 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx15, i64 0, i64 0
  %22 = load i32, i32* %arrayidx16, align 8
  store i32 %22, i32* %blocksize_x, align 4
  %23 = load i32, i32* %blocksize_x, align 4
  %shr = ashr i32 %23, 2
  store i32 %shr, i32* %blocksize_x4, align 4
  %24 = load i32, i32* %pic_pix_x.addr, align 4
  %25 = load i32, i32* %mvshift, align 4
  %shl = shl i32 %24, %25
  %26 = load i16, i16* %pred_mv_x.addr, align 2
  %conv17 = sext i16 %26 to i32
  %add18 = add nsw i32 %shl, %conv17
  store i32 %add18, i32* %pred_x, align 4
  %27 = load i32, i32* %pic_pix_y.addr, align 4
  %28 = load i32, i32* %mvshift, align 4
  %shl19 = shl i32 %27, %28
  %29 = load i16, i16* %pred_mv_y.addr, align 2
  %conv20 = sext i16 %29 to i32
  %add21 = add nsw i32 %shl19, %conv20
  store i32 %add21, i32* %pred_y, align 4
  %30 = load i32, i32* %pic_pix_x.addr, align 4
  %31 = load i16*, i16** %mv_x.addr, align 8
  %32 = load i16, i16* %31, align 2
  %conv22 = sext i16 %32 to i32
  %add23 = add nsw i32 %30, %conv22
  store i32 %add23, i32* %center_x, align 4
  %33 = load i32, i32* %pic_pix_y.addr, align 4
  %34 = load i16*, i16** %mv_y.addr, align 8
  %35 = load i16, i16* %34, align 2
  %conv24 = sext i16 %35 to i32
  %add25 = add nsw i32 %33, %conv24
  store i32 %add25, i32* %center_y, align 4
  store i32 0, i32* %best_x, align 4
  store i32 0, i32* %best_y, align 4
  %36 = load %struct.InputParameters*, %struct.InputParameters** @input, align 8
  %successive_Bframe = getelementptr inbounds %struct.InputParameters, %struct.InputParameters* %36, i32 0, i32 34
  %37 = load i32, i32* %successive_Bframe, align 4
  store i32 %37, i32* %N_Bframe, align 4
  %38 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %MbaffFrameFlag26 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %38, i32 0, i32 90
  %39 = load i32, i32* %MbaffFrameFlag26, align 8
  %tobool27 = icmp ne i32 %39, 0
  br i1 %tobool27, label %land.lhs.true28, label %cond.false37

land.lhs.true28:                                  ; preds = %cond.end
  %40 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %mb_data29 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %40, i32 0, i32 51
  %41 = load %struct.macroblock*, %struct.macroblock** %mb_data29, align 8
  %42 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %current_mb_nr30 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %42, i32 0, i32 3
  %43 = load i32, i32* %current_mb_nr30, align 4
  %idxprom31 = sext i32 %43 to i64
  %arrayidx32 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %41, i64 %idxprom31
  %mb_field33 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %arrayidx32, i32 0, i32 22
  %44 = load i32, i32* %mb_field33, align 4
  %tobool34 = icmp ne i32 %44, 0
  br i1 %tobool34, label %cond.true35, label %cond.false37

cond.true35:                                      ; preds = %land.lhs.true28
  %45 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height36 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %45, i32 0, i32 15
  %46 = load i32, i32* %height36, align 4
  %div = sdiv i32 %46, 2
  br label %cond.end39

cond.false37:                                     ; preds = %land.lhs.true28, %cond.end
  %47 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height38 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %47, i32 0, i32 15
  %48 = load i32, i32* %height38, align 4
  br label %cond.end39

cond.end39:                                       ; preds = %cond.false37, %cond.true35
  %cond40 = phi i32 [ %div, %cond.true35 ], [ %48, %cond.false37 ]
  store i32 %cond40, i32* %height, align 4
  %49 = load i32, i32* %center_x, align 4
  %50 = load i32, i32* %search_range.addr, align 4
  %cmp = icmp sgt i32 %49, %50
  br i1 %cmp, label %land.lhs.true42, label %if.else

land.lhs.true42:                                  ; preds = %cond.end39
  %51 = load i32, i32* %center_x, align 4
  %52 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %width = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %52, i32 0, i32 13
  %53 = load i32, i32* %width, align 4
  %sub = sub nsw i32 %53, 1
  %54 = load i32, i32* %search_range.addr, align 4
  %sub43 = sub nsw i32 %sub, %54
  %55 = load i32, i32* %blocksize_x, align 4
  %sub44 = sub nsw i32 %sub43, %55
  %cmp45 = icmp slt i32 %51, %sub44
  br i1 %cmp45, label %land.lhs.true47, label %if.else

land.lhs.true47:                                  ; preds = %land.lhs.true42
  %56 = load i32, i32* %center_y, align 4
  %57 = load i32, i32* %search_range.addr, align 4
  %cmp48 = icmp sgt i32 %56, %57
  br i1 %cmp48, label %land.lhs.true50, label %if.else

land.lhs.true50:                                  ; preds = %land.lhs.true47
  %58 = load i32, i32* %center_y, align 4
  %59 = load i32, i32* %height, align 4
  %sub51 = sub nsw i32 %59, 1
  %60 = load i32, i32* %search_range.addr, align 4
  %sub52 = sub nsw i32 %sub51, %60
  %61 = load i32, i32* %blocksize_y, align 4
  %sub53 = sub nsw i32 %sub52, %61
  %cmp54 = icmp slt i32 %58, %sub53
  br i1 %cmp54, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true50
  store i16* (i32, i16*, i32, i32, i32, i32)* @FastLineX, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  br label %if.end

if.else:                                          ; preds = %land.lhs.true50, %land.lhs.true47, %land.lhs.true42, %cond.end39
  store i16* (i32, i16*, i32, i32, i32, i32)* @UMVLineX, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %62 = load i32**, i32*** @McostState, align 8
  %arrayidx56 = getelementptr inbounds i32*, i32** %62, i64 0
  %63 = load i32*, i32** %arrayidx56, align 8
  %64 = bitcast i32* %63 to i8*
  %65 = load i32, i32* %search_range.addr, align 4
  %mul57 = mul nsw i32 2, %65
  %add58 = add nsw i32 %mul57, 1
  %66 = load i32, i32* %search_range.addr, align 4
  %mul59 = mul nsw i32 2, %66
  %add60 = add nsw i32 %mul59, 1
  %mul61 = mul nsw i32 %add58, %add60
  %mul62 = mul nsw i32 %mul61, 4
  %conv63 = sext i32 %mul62 to i64
  call void @llvm.memset.p0i8.i64(i8* align 4 %64, i8 0, i64 %conv63, i1 false)
  %67 = load i16, i16* %ref.addr, align 2
  %conv64 = sext i16 %67 to i32
  %cmp65 = icmp sgt i32 %conv64, 0
  br i1 %cmp65, label %if.then67, label %if.else89

if.then67:                                        ; preds = %if.end
  %68 = load i32, i32* @pred_SAD_ref, align 4
  %cmp68 = icmp ne i32 %68, 0
  br i1 %cmp68, label %if.then70, label %if.else87

if.then70:                                        ; preds = %if.then67
  %69 = load i32, i32* %blocktype.addr, align 4
  %idxprom71 = sext i32 %69 to i64
  %arrayidx72 = getelementptr inbounds [8 x float], [8 x float]* @Bsize, i64 0, i64 %idxprom71
  %70 = load float, float* %arrayidx72, align 4
  %71 = load i32, i32* @pred_SAD_ref, align 4
  %72 = load i32, i32* @pred_SAD_ref, align 4
  %mul73 = mul nsw i32 %71, %72
  %conv74 = sitofp i32 %mul73 to float
  %div75 = fdiv float %70, %conv74
  %73 = load i32, i32* %blocktype.addr, align 4
  %idxprom76 = sext i32 %73 to i64
  %arrayidx77 = getelementptr inbounds [8 x float], [8 x float]* @AlphaSec, i64 0, i64 %idxprom76
  %74 = load float, float* %arrayidx77, align 4
  %sub78 = fsub float %div75, %74
  store float %sub78, float* %betaSec, align 4
  %75 = load i32, i32* %blocktype.addr, align 4
  %idxprom79 = sext i32 %75 to i64
  %arrayidx80 = getelementptr inbounds [8 x float], [8 x float]* @Bsize, i64 0, i64 %idxprom79
  %76 = load float, float* %arrayidx80, align 4
  %77 = load i32, i32* @pred_SAD_ref, align 4
  %78 = load i32, i32* @pred_SAD_ref, align 4
  %mul81 = mul nsw i32 %77, %78
  %conv82 = sitofp i32 %mul81 to float
  %div83 = fdiv float %76, %conv82
  %79 = load i32, i32* %blocktype.addr, align 4
  %idxprom84 = sext i32 %79 to i64
  %arrayidx85 = getelementptr inbounds [8 x float], [8 x float]* @AlphaThird, i64 0, i64 %idxprom84
  %80 = load float, float* %arrayidx85, align 4
  %sub86 = fsub float %div83, %80
  store float %sub86, float* %betaThird, align 4
  br label %if.end88

if.else87:                                        ; preds = %if.then67
  store float 0.000000e+00, float* %betaSec, align 4
  store float 0.000000e+00, float* %betaThird, align 4
  br label %if.end88

if.end88:                                         ; preds = %if.else87, %if.then70
  br label %if.end137

if.else89:                                        ; preds = %if.end
  %81 = load i32, i32* %blocktype.addr, align 4
  %cmp90 = icmp eq i32 %81, 1
  br i1 %cmp90, label %if.then92, label %if.else114

if.then92:                                        ; preds = %if.else89
  %82 = load i32, i32* @pred_SAD_space, align 4
  %cmp93 = icmp ne i32 %82, 0
  br i1 %cmp93, label %if.then95, label %if.else112

if.then95:                                        ; preds = %if.then92
  %83 = load i32, i32* %blocktype.addr, align 4
  %idxprom96 = sext i32 %83 to i64
  %arrayidx97 = getelementptr inbounds [8 x float], [8 x float]* @Bsize, i64 0, i64 %idxprom96
  %84 = load float, float* %arrayidx97, align 4
  %85 = load i32, i32* @pred_SAD_space, align 4
  %86 = load i32, i32* @pred_SAD_space, align 4
  %mul98 = mul nsw i32 %85, %86
  %conv99 = sitofp i32 %mul98 to float
  %div100 = fdiv float %84, %conv99
  %87 = load i32, i32* %blocktype.addr, align 4
  %idxprom101 = sext i32 %87 to i64
  %arrayidx102 = getelementptr inbounds [8 x float], [8 x float]* @AlphaSec, i64 0, i64 %idxprom101
  %88 = load float, float* %arrayidx102, align 4
  %sub103 = fsub float %div100, %88
  store float %sub103, float* %betaSec, align 4
  %89 = load i32, i32* %blocktype.addr, align 4
  %idxprom104 = sext i32 %89 to i64
  %arrayidx105 = getelementptr inbounds [8 x float], [8 x float]* @Bsize, i64 0, i64 %idxprom104
  %90 = load float, float* %arrayidx105, align 4
  %91 = load i32, i32* @pred_SAD_space, align 4
  %92 = load i32, i32* @pred_SAD_space, align 4
  %mul106 = mul nsw i32 %91, %92
  %conv107 = sitofp i32 %mul106 to float
  %div108 = fdiv float %90, %conv107
  %93 = load i32, i32* %blocktype.addr, align 4
  %idxprom109 = sext i32 %93 to i64
  %arrayidx110 = getelementptr inbounds [8 x float], [8 x float]* @AlphaThird, i64 0, i64 %idxprom109
  %94 = load float, float* %arrayidx110, align 4
  %sub111 = fsub float %div108, %94
  store float %sub111, float* %betaThird, align 4
  br label %if.end113

if.else112:                                       ; preds = %if.then92
  store float 0.000000e+00, float* %betaSec, align 4
  store float 0.000000e+00, float* %betaThird, align 4
  br label %if.end113

if.end113:                                        ; preds = %if.else112, %if.then95
  br label %if.end136

if.else114:                                       ; preds = %if.else89
  %95 = load i32, i32* @pred_SAD_uplayer, align 4
  %cmp115 = icmp ne i32 %95, 0
  br i1 %cmp115, label %if.then117, label %if.else134

if.then117:                                       ; preds = %if.else114
  %96 = load i32, i32* %blocktype.addr, align 4
  %idxprom118 = sext i32 %96 to i64
  %arrayidx119 = getelementptr inbounds [8 x float], [8 x float]* @Bsize, i64 0, i64 %idxprom118
  %97 = load float, float* %arrayidx119, align 4
  %98 = load i32, i32* @pred_SAD_uplayer, align 4
  %99 = load i32, i32* @pred_SAD_uplayer, align 4
  %mul120 = mul nsw i32 %98, %99
  %conv121 = sitofp i32 %mul120 to float
  %div122 = fdiv float %97, %conv121
  %100 = load i32, i32* %blocktype.addr, align 4
  %idxprom123 = sext i32 %100 to i64
  %arrayidx124 = getelementptr inbounds [8 x float], [8 x float]* @AlphaSec, i64 0, i64 %idxprom123
  %101 = load float, float* %arrayidx124, align 4
  %sub125 = fsub float %div122, %101
  store float %sub125, float* %betaSec, align 4
  %102 = load i32, i32* %blocktype.addr, align 4
  %idxprom126 = sext i32 %102 to i64
  %arrayidx127 = getelementptr inbounds [8 x float], [8 x float]* @Bsize, i64 0, i64 %idxprom126
  %103 = load float, float* %arrayidx127, align 4
  %104 = load i32, i32* @pred_SAD_uplayer, align 4
  %105 = load i32, i32* @pred_SAD_uplayer, align 4
  %mul128 = mul nsw i32 %104, %105
  %conv129 = sitofp i32 %mul128 to float
  %div130 = fdiv float %103, %conv129
  %106 = load i32, i32* %blocktype.addr, align 4
  %idxprom131 = sext i32 %106 to i64
  %arrayidx132 = getelementptr inbounds [8 x float], [8 x float]* @AlphaThird, i64 0, i64 %idxprom131
  %107 = load float, float* %arrayidx132, align 4
  %sub133 = fsub float %div130, %107
  store float %sub133, float* %betaThird, align 4
  br label %if.end135

if.else134:                                       ; preds = %if.else114
  store float 0.000000e+00, float* %betaSec, align 4
  store float 0.000000e+00, float* %betaThird, align 4
  br label %if.end135

if.end135:                                        ; preds = %if.else134, %if.then117
  br label %if.end136

if.end136:                                        ; preds = %if.end135, %if.end113
  br label %if.end137

if.end137:                                        ; preds = %if.end136, %if.end88
  %108 = load i32, i32* %center_x, align 4
  store i32 %108, i32* %cand_x, align 4
  %109 = load i32, i32* %center_y, align 4
  store i32 %109, i32* %cand_y, align 4
  %110 = load i32, i32* %lambda_factor, align 4
  %111 = load i32*, i32** @mvbits, align 8
  %112 = load i32, i32* %cand_x, align 4
  %113 = load i32, i32* %mvshift, align 4
  %shl138 = shl i32 %112, %113
  %114 = load i32, i32* %pred_x, align 4
  %sub139 = sub nsw i32 %shl138, %114
  %idxprom140 = sext i32 %sub139 to i64
  %arrayidx141 = getelementptr inbounds i32, i32* %111, i64 %idxprom140
  %115 = load i32, i32* %arrayidx141, align 4
  %116 = load i32*, i32** @mvbits, align 8
  %117 = load i32, i32* %cand_y, align 4
  %118 = load i32, i32* %mvshift, align 4
  %shl142 = shl i32 %117, %118
  %119 = load i32, i32* %pred_y, align 4
  %sub143 = sub nsw i32 %shl142, %119
  %idxprom144 = sext i32 %sub143 to i64
  %arrayidx145 = getelementptr inbounds i32, i32* %116, i64 %idxprom144
  %120 = load i32, i32* %arrayidx145, align 4
  %add146 = add nsw i32 %115, %120
  %mul147 = mul nsw i32 %110, %add146
  %shr148 = ashr i32 %mul147, 16
  store i32 %shr148, i32* %mcost, align 4
  %121 = load i16*, i16** %ref_pic, align 8
  %122 = load i16**, i16*** %orig_pic.addr, align 8
  %123 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %124 = load i32, i32* %blocksize_y, align 4
  %125 = load i32, i32* %blocksize_x, align 4
  %126 = load i32, i32* %blocksize_x4, align 4
  %127 = load i32, i32* %mcost, align 4
  %128 = load i32, i32* %min_mcost.addr, align 4
  %129 = load i32, i32* %cand_x, align 4
  %130 = load i32, i32* %cand_y, align 4
  %call = call i32 @PartCalMad(i16* %121, i16** %122, i16* (i32, i16*, i32, i32, i32, i32)* %123, i32 %124, i32 %125, i32 %126, i32 %127, i32 %128, i32 %129, i32 %130)
  store i32 %call, i32* %mcost, align 4
  %131 = load i32, i32* %mcost, align 4
  %132 = load i32**, i32*** @McostState, align 8
  %133 = load i32, i32* %search_range.addr, align 4
  %idxprom149 = sext i32 %133 to i64
  %arrayidx150 = getelementptr inbounds i32*, i32** %132, i64 %idxprom149
  %134 = load i32*, i32** %arrayidx150, align 8
  %135 = load i32, i32* %search_range.addr, align 4
  %idxprom151 = sext i32 %135 to i64
  %arrayidx152 = getelementptr inbounds i32, i32* %134, i64 %idxprom151
  store i32 %131, i32* %arrayidx152, align 4
  %136 = load i32, i32* %mcost, align 4
  %137 = load i32, i32* %min_mcost.addr, align 4
  %cmp153 = icmp slt i32 %136, %137
  br i1 %cmp153, label %if.then155, label %if.end156

if.then155:                                       ; preds = %if.end137
  %138 = load i32, i32* %mcost, align 4
  store i32 %138, i32* %min_mcost.addr, align 4
  %139 = load i32, i32* %cand_x, align 4
  store i32 %139, i32* %best_x, align 4
  %140 = load i32, i32* %cand_y, align 4
  store i32 %140, i32* %best_y, align 4
  br label %if.end156

if.end156:                                        ; preds = %if.then155, %if.end137
  %141 = load i32, i32* %best_x, align 4
  store i32 %141, i32* %iXMinNow, align 4
  %142 = load i32, i32* %best_y, align 4
  store i32 %142, i32* %iYMinNow, align 4
  store i32 0, i32* %m, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end156
  %143 = load i32, i32* %m, align 4
  %cmp157 = icmp slt i32 %143, 4
  br i1 %cmp157, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %144 = load i32, i32* %iXMinNow, align 4
  %145 = load i32, i32* %m, align 4
  %idxprom159 = sext i32 %145 to i64
  %arrayidx160 = getelementptr inbounds [4 x i32], [4 x i32]* @FastIntegerPelBlockMotionSearch.Diamond_x, i64 0, i64 %idxprom159
  %146 = load i32, i32* %arrayidx160, align 4
  %add161 = add nsw i32 %144, %146
  store i32 %add161, i32* %cand_x, align 4
  %147 = load i32, i32* %iYMinNow, align 4
  %148 = load i32, i32* %m, align 4
  %idxprom162 = sext i32 %148 to i64
  %arrayidx163 = getelementptr inbounds [4 x i32], [4 x i32]* @FastIntegerPelBlockMotionSearch.Diamond_y, i64 0, i64 %idxprom162
  %149 = load i32, i32* %arrayidx163, align 4
  %add164 = add nsw i32 %147, %149
  store i32 %add164, i32* %cand_y, align 4
  %150 = load i32, i32* %cand_x, align 4
  %151 = load i32, i32* %center_x, align 4
  %sub165 = sub nsw i32 %150, %151
  %call166 = call i32 @abs(i32 %sub165) #6
  %152 = load i32, i32* %search_range.addr, align 4
  %cmp167 = icmp sle i32 %call166, %152
  br i1 %cmp167, label %land.lhs.true169, label %if.end210

land.lhs.true169:                                 ; preds = %for.body
  %153 = load i32, i32* %cand_y, align 4
  %154 = load i32, i32* %center_y, align 4
  %sub170 = sub nsw i32 %153, %154
  %call171 = call i32 @abs(i32 %sub170) #6
  %155 = load i32, i32* %search_range.addr, align 4
  %cmp172 = icmp sle i32 %call171, %155
  br i1 %cmp172, label %if.then174, label %if.end210

if.then174:                                       ; preds = %land.lhs.true169
  %156 = load i32**, i32*** @McostState, align 8
  %157 = load i32, i32* %cand_y, align 4
  %158 = load i32, i32* %center_y, align 4
  %sub175 = sub nsw i32 %157, %158
  %159 = load i32, i32* %search_range.addr, align 4
  %add176 = add nsw i32 %sub175, %159
  %idxprom177 = sext i32 %add176 to i64
  %arrayidx178 = getelementptr inbounds i32*, i32** %156, i64 %idxprom177
  %160 = load i32*, i32** %arrayidx178, align 8
  %161 = load i32, i32* %cand_x, align 4
  %162 = load i32, i32* %center_x, align 4
  %sub179 = sub nsw i32 %161, %162
  %163 = load i32, i32* %search_range.addr, align 4
  %add180 = add nsw i32 %sub179, %163
  %idxprom181 = sext i32 %add180 to i64
  %arrayidx182 = getelementptr inbounds i32, i32* %160, i64 %idxprom181
  %164 = load i32, i32* %arrayidx182, align 4
  %tobool183 = icmp ne i32 %164, 0
  br i1 %tobool183, label %if.end209, label %if.then184

if.then184:                                       ; preds = %if.then174
  %165 = load i32, i32* %lambda_factor, align 4
  %166 = load i32*, i32** @mvbits, align 8
  %167 = load i32, i32* %cand_x, align 4
  %168 = load i32, i32* %mvshift, align 4
  %shl185 = shl i32 %167, %168
  %169 = load i32, i32* %pred_x, align 4
  %sub186 = sub nsw i32 %shl185, %169
  %idxprom187 = sext i32 %sub186 to i64
  %arrayidx188 = getelementptr inbounds i32, i32* %166, i64 %idxprom187
  %170 = load i32, i32* %arrayidx188, align 4
  %171 = load i32*, i32** @mvbits, align 8
  %172 = load i32, i32* %cand_y, align 4
  %173 = load i32, i32* %mvshift, align 4
  %shl189 = shl i32 %172, %173
  %174 = load i32, i32* %pred_y, align 4
  %sub190 = sub nsw i32 %shl189, %174
  %idxprom191 = sext i32 %sub190 to i64
  %arrayidx192 = getelementptr inbounds i32, i32* %171, i64 %idxprom191
  %175 = load i32, i32* %arrayidx192, align 4
  %add193 = add nsw i32 %170, %175
  %mul194 = mul nsw i32 %165, %add193
  %shr195 = ashr i32 %mul194, 16
  store i32 %shr195, i32* %mcost, align 4
  %176 = load i16*, i16** %ref_pic, align 8
  %177 = load i16**, i16*** %orig_pic.addr, align 8
  %178 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %179 = load i32, i32* %blocksize_y, align 4
  %180 = load i32, i32* %blocksize_x, align 4
  %181 = load i32, i32* %blocksize_x4, align 4
  %182 = load i32, i32* %mcost, align 4
  %183 = load i32, i32* %min_mcost.addr, align 4
  %184 = load i32, i32* %cand_x, align 4
  %185 = load i32, i32* %cand_y, align 4
  %call196 = call i32 @PartCalMad(i16* %176, i16** %177, i16* (i32, i16*, i32, i32, i32, i32)* %178, i32 %179, i32 %180, i32 %181, i32 %182, i32 %183, i32 %184, i32 %185)
  store i32 %call196, i32* %mcost, align 4
  %186 = load i32, i32* %mcost, align 4
  %187 = load i32**, i32*** @McostState, align 8
  %188 = load i32, i32* %cand_y, align 4
  %189 = load i32, i32* %center_y, align 4
  %sub197 = sub nsw i32 %188, %189
  %190 = load i32, i32* %search_range.addr, align 4
  %add198 = add nsw i32 %sub197, %190
  %idxprom199 = sext i32 %add198 to i64
  %arrayidx200 = getelementptr inbounds i32*, i32** %187, i64 %idxprom199
  %191 = load i32*, i32** %arrayidx200, align 8
  %192 = load i32, i32* %cand_x, align 4
  %193 = load i32, i32* %center_x, align 4
  %sub201 = sub nsw i32 %192, %193
  %194 = load i32, i32* %search_range.addr, align 4
  %add202 = add nsw i32 %sub201, %194
  %idxprom203 = sext i32 %add202 to i64
  %arrayidx204 = getelementptr inbounds i32, i32* %191, i64 %idxprom203
  store i32 %186, i32* %arrayidx204, align 4
  %195 = load i32, i32* %mcost, align 4
  %196 = load i32, i32* %min_mcost.addr, align 4
  %cmp205 = icmp slt i32 %195, %196
  br i1 %cmp205, label %if.then207, label %if.end208

if.then207:                                       ; preds = %if.then184
  %197 = load i32, i32* %cand_x, align 4
  store i32 %197, i32* %best_x, align 4
  %198 = load i32, i32* %cand_y, align 4
  store i32 %198, i32* %best_y, align 4
  %199 = load i32, i32* %mcost, align 4
  store i32 %199, i32* %min_mcost.addr, align 4
  br label %if.end208

if.end208:                                        ; preds = %if.then207, %if.then184
  br label %if.end209

if.end209:                                        ; preds = %if.end208, %if.then174
  br label %if.end210

if.end210:                                        ; preds = %if.end209, %land.lhs.true169, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end210
  %200 = load i32, i32* %m, align 4
  %inc = add nsw i32 %200, 1
  store i32 %inc, i32* %m, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %201 = load i32, i32* %center_x, align 4
  %202 = load i32, i32* %pic_pix_x.addr, align 4
  %cmp211 = icmp ne i32 %201, %202
  br i1 %cmp211, label %if.then215, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.end
  %203 = load i32, i32* %center_y, align 4
  %204 = load i32, i32* %pic_pix_y.addr, align 4
  %cmp213 = icmp ne i32 %203, %204
  br i1 %cmp213, label %if.then215, label %if.end321

if.then215:                                       ; preds = %lor.lhs.false, %for.end
  %205 = load i32, i32* %pic_pix_x.addr, align 4
  store i32 %205, i32* %cand_x, align 4
  %206 = load i32, i32* %pic_pix_y.addr, align 4
  store i32 %206, i32* %cand_y, align 4
  %207 = load i32, i32* %cand_x, align 4
  %208 = load i32, i32* %center_x, align 4
  %sub216 = sub nsw i32 %207, %208
  %call217 = call i32 @abs(i32 %sub216) #6
  %209 = load i32, i32* %search_range.addr, align 4
  %cmp218 = icmp sle i32 %call217, %209
  br i1 %cmp218, label %land.lhs.true220, label %if.end261

land.lhs.true220:                                 ; preds = %if.then215
  %210 = load i32, i32* %cand_y, align 4
  %211 = load i32, i32* %center_y, align 4
  %sub221 = sub nsw i32 %210, %211
  %call222 = call i32 @abs(i32 %sub221) #6
  %212 = load i32, i32* %search_range.addr, align 4
  %cmp223 = icmp sle i32 %call222, %212
  br i1 %cmp223, label %if.then225, label %if.end261

if.then225:                                       ; preds = %land.lhs.true220
  %213 = load i32**, i32*** @McostState, align 8
  %214 = load i32, i32* %cand_y, align 4
  %215 = load i32, i32* %center_y, align 4
  %sub226 = sub nsw i32 %214, %215
  %216 = load i32, i32* %search_range.addr, align 4
  %add227 = add nsw i32 %sub226, %216
  %idxprom228 = sext i32 %add227 to i64
  %arrayidx229 = getelementptr inbounds i32*, i32** %213, i64 %idxprom228
  %217 = load i32*, i32** %arrayidx229, align 8
  %218 = load i32, i32* %cand_x, align 4
  %219 = load i32, i32* %center_x, align 4
  %sub230 = sub nsw i32 %218, %219
  %220 = load i32, i32* %search_range.addr, align 4
  %add231 = add nsw i32 %sub230, %220
  %idxprom232 = sext i32 %add231 to i64
  %arrayidx233 = getelementptr inbounds i32, i32* %217, i64 %idxprom232
  %221 = load i32, i32* %arrayidx233, align 4
  %tobool234 = icmp ne i32 %221, 0
  br i1 %tobool234, label %if.end260, label %if.then235

if.then235:                                       ; preds = %if.then225
  %222 = load i32, i32* %lambda_factor, align 4
  %223 = load i32*, i32** @mvbits, align 8
  %224 = load i32, i32* %cand_x, align 4
  %225 = load i32, i32* %mvshift, align 4
  %shl236 = shl i32 %224, %225
  %226 = load i32, i32* %pred_x, align 4
  %sub237 = sub nsw i32 %shl236, %226
  %idxprom238 = sext i32 %sub237 to i64
  %arrayidx239 = getelementptr inbounds i32, i32* %223, i64 %idxprom238
  %227 = load i32, i32* %arrayidx239, align 4
  %228 = load i32*, i32** @mvbits, align 8
  %229 = load i32, i32* %cand_y, align 4
  %230 = load i32, i32* %mvshift, align 4
  %shl240 = shl i32 %229, %230
  %231 = load i32, i32* %pred_y, align 4
  %sub241 = sub nsw i32 %shl240, %231
  %idxprom242 = sext i32 %sub241 to i64
  %arrayidx243 = getelementptr inbounds i32, i32* %228, i64 %idxprom242
  %232 = load i32, i32* %arrayidx243, align 4
  %add244 = add nsw i32 %227, %232
  %mul245 = mul nsw i32 %222, %add244
  %shr246 = ashr i32 %mul245, 16
  store i32 %shr246, i32* %mcost, align 4
  %233 = load i16*, i16** %ref_pic, align 8
  %234 = load i16**, i16*** %orig_pic.addr, align 8
  %235 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %236 = load i32, i32* %blocksize_y, align 4
  %237 = load i32, i32* %blocksize_x, align 4
  %238 = load i32, i32* %blocksize_x4, align 4
  %239 = load i32, i32* %mcost, align 4
  %240 = load i32, i32* %min_mcost.addr, align 4
  %241 = load i32, i32* %cand_x, align 4
  %242 = load i32, i32* %cand_y, align 4
  %call247 = call i32 @PartCalMad(i16* %233, i16** %234, i16* (i32, i16*, i32, i32, i32, i32)* %235, i32 %236, i32 %237, i32 %238, i32 %239, i32 %240, i32 %241, i32 %242)
  store i32 %call247, i32* %mcost, align 4
  %243 = load i32, i32* %mcost, align 4
  %244 = load i32**, i32*** @McostState, align 8
  %245 = load i32, i32* %cand_y, align 4
  %246 = load i32, i32* %center_y, align 4
  %sub248 = sub nsw i32 %245, %246
  %247 = load i32, i32* %search_range.addr, align 4
  %add249 = add nsw i32 %sub248, %247
  %idxprom250 = sext i32 %add249 to i64
  %arrayidx251 = getelementptr inbounds i32*, i32** %244, i64 %idxprom250
  %248 = load i32*, i32** %arrayidx251, align 8
  %249 = load i32, i32* %cand_x, align 4
  %250 = load i32, i32* %center_x, align 4
  %sub252 = sub nsw i32 %249, %250
  %251 = load i32, i32* %search_range.addr, align 4
  %add253 = add nsw i32 %sub252, %251
  %idxprom254 = sext i32 %add253 to i64
  %arrayidx255 = getelementptr inbounds i32, i32* %248, i64 %idxprom254
  store i32 %243, i32* %arrayidx255, align 4
  %252 = load i32, i32* %mcost, align 4
  %253 = load i32, i32* %min_mcost.addr, align 4
  %cmp256 = icmp slt i32 %252, %253
  br i1 %cmp256, label %if.then258, label %if.end259

if.then258:                                       ; preds = %if.then235
  %254 = load i32, i32* %cand_x, align 4
  store i32 %254, i32* %best_x, align 4
  %255 = load i32, i32* %cand_y, align 4
  store i32 %255, i32* %best_y, align 4
  %256 = load i32, i32* %mcost, align 4
  store i32 %256, i32* %min_mcost.addr, align 4
  br label %if.end259

if.end259:                                        ; preds = %if.then258, %if.then235
  br label %if.end260

if.end260:                                        ; preds = %if.end259, %if.then225
  br label %if.end261

if.end261:                                        ; preds = %if.end260, %land.lhs.true220, %if.then215
  %257 = load i32, i32* %best_x, align 4
  store i32 %257, i32* %iXMinNow, align 4
  %258 = load i32, i32* %best_y, align 4
  store i32 %258, i32* %iYMinNow, align 4
  store i32 0, i32* %m, align 4
  br label %for.cond262

for.cond262:                                      ; preds = %for.inc318, %if.end261
  %259 = load i32, i32* %m, align 4
  %cmp263 = icmp slt i32 %259, 4
  br i1 %cmp263, label %for.body265, label %for.end320

for.body265:                                      ; preds = %for.cond262
  %260 = load i32, i32* %iXMinNow, align 4
  %261 = load i32, i32* %m, align 4
  %idxprom266 = sext i32 %261 to i64
  %arrayidx267 = getelementptr inbounds [4 x i32], [4 x i32]* @FastIntegerPelBlockMotionSearch.Diamond_x, i64 0, i64 %idxprom266
  %262 = load i32, i32* %arrayidx267, align 4
  %add268 = add nsw i32 %260, %262
  store i32 %add268, i32* %cand_x, align 4
  %263 = load i32, i32* %iYMinNow, align 4
  %264 = load i32, i32* %m, align 4
  %idxprom269 = sext i32 %264 to i64
  %arrayidx270 = getelementptr inbounds [4 x i32], [4 x i32]* @FastIntegerPelBlockMotionSearch.Diamond_y, i64 0, i64 %idxprom269
  %265 = load i32, i32* %arrayidx270, align 4
  %add271 = add nsw i32 %263, %265
  store i32 %add271, i32* %cand_y, align 4
  %266 = load i32, i32* %cand_x, align 4
  %267 = load i32, i32* %center_x, align 4
  %sub272 = sub nsw i32 %266, %267
  %call273 = call i32 @abs(i32 %sub272) #6
  %268 = load i32, i32* %search_range.addr, align 4
  %cmp274 = icmp sle i32 %call273, %268
  br i1 %cmp274, label %land.lhs.true276, label %if.end317

land.lhs.true276:                                 ; preds = %for.body265
  %269 = load i32, i32* %cand_y, align 4
  %270 = load i32, i32* %center_y, align 4
  %sub277 = sub nsw i32 %269, %270
  %call278 = call i32 @abs(i32 %sub277) #6
  %271 = load i32, i32* %search_range.addr, align 4
  %cmp279 = icmp sle i32 %call278, %271
  br i1 %cmp279, label %if.then281, label %if.end317

if.then281:                                       ; preds = %land.lhs.true276
  %272 = load i32**, i32*** @McostState, align 8
  %273 = load i32, i32* %cand_y, align 4
  %274 = load i32, i32* %center_y, align 4
  %sub282 = sub nsw i32 %273, %274
  %275 = load i32, i32* %search_range.addr, align 4
  %add283 = add nsw i32 %sub282, %275
  %idxprom284 = sext i32 %add283 to i64
  %arrayidx285 = getelementptr inbounds i32*, i32** %272, i64 %idxprom284
  %276 = load i32*, i32** %arrayidx285, align 8
  %277 = load i32, i32* %cand_x, align 4
  %278 = load i32, i32* %center_x, align 4
  %sub286 = sub nsw i32 %277, %278
  %279 = load i32, i32* %search_range.addr, align 4
  %add287 = add nsw i32 %sub286, %279
  %idxprom288 = sext i32 %add287 to i64
  %arrayidx289 = getelementptr inbounds i32, i32* %276, i64 %idxprom288
  %280 = load i32, i32* %arrayidx289, align 4
  %tobool290 = icmp ne i32 %280, 0
  br i1 %tobool290, label %if.end316, label %if.then291

if.then291:                                       ; preds = %if.then281
  %281 = load i32, i32* %lambda_factor, align 4
  %282 = load i32*, i32** @mvbits, align 8
  %283 = load i32, i32* %cand_x, align 4
  %284 = load i32, i32* %mvshift, align 4
  %shl292 = shl i32 %283, %284
  %285 = load i32, i32* %pred_x, align 4
  %sub293 = sub nsw i32 %shl292, %285
  %idxprom294 = sext i32 %sub293 to i64
  %arrayidx295 = getelementptr inbounds i32, i32* %282, i64 %idxprom294
  %286 = load i32, i32* %arrayidx295, align 4
  %287 = load i32*, i32** @mvbits, align 8
  %288 = load i32, i32* %cand_y, align 4
  %289 = load i32, i32* %mvshift, align 4
  %shl296 = shl i32 %288, %289
  %290 = load i32, i32* %pred_y, align 4
  %sub297 = sub nsw i32 %shl296, %290
  %idxprom298 = sext i32 %sub297 to i64
  %arrayidx299 = getelementptr inbounds i32, i32* %287, i64 %idxprom298
  %291 = load i32, i32* %arrayidx299, align 4
  %add300 = add nsw i32 %286, %291
  %mul301 = mul nsw i32 %281, %add300
  %shr302 = ashr i32 %mul301, 16
  store i32 %shr302, i32* %mcost, align 4
  %292 = load i16*, i16** %ref_pic, align 8
  %293 = load i16**, i16*** %orig_pic.addr, align 8
  %294 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %295 = load i32, i32* %blocksize_y, align 4
  %296 = load i32, i32* %blocksize_x, align 4
  %297 = load i32, i32* %blocksize_x4, align 4
  %298 = load i32, i32* %mcost, align 4
  %299 = load i32, i32* %min_mcost.addr, align 4
  %300 = load i32, i32* %cand_x, align 4
  %301 = load i32, i32* %cand_y, align 4
  %call303 = call i32 @PartCalMad(i16* %292, i16** %293, i16* (i32, i16*, i32, i32, i32, i32)* %294, i32 %295, i32 %296, i32 %297, i32 %298, i32 %299, i32 %300, i32 %301)
  store i32 %call303, i32* %mcost, align 4
  %302 = load i32, i32* %mcost, align 4
  %303 = load i32**, i32*** @McostState, align 8
  %304 = load i32, i32* %cand_y, align 4
  %305 = load i32, i32* %center_y, align 4
  %sub304 = sub nsw i32 %304, %305
  %306 = load i32, i32* %search_range.addr, align 4
  %add305 = add nsw i32 %sub304, %306
  %idxprom306 = sext i32 %add305 to i64
  %arrayidx307 = getelementptr inbounds i32*, i32** %303, i64 %idxprom306
  %307 = load i32*, i32** %arrayidx307, align 8
  %308 = load i32, i32* %cand_x, align 4
  %309 = load i32, i32* %center_x, align 4
  %sub308 = sub nsw i32 %308, %309
  %310 = load i32, i32* %search_range.addr, align 4
  %add309 = add nsw i32 %sub308, %310
  %idxprom310 = sext i32 %add309 to i64
  %arrayidx311 = getelementptr inbounds i32, i32* %307, i64 %idxprom310
  store i32 %302, i32* %arrayidx311, align 4
  %311 = load i32, i32* %mcost, align 4
  %312 = load i32, i32* %min_mcost.addr, align 4
  %cmp312 = icmp slt i32 %311, %312
  br i1 %cmp312, label %if.then314, label %if.end315

if.then314:                                       ; preds = %if.then291
  %313 = load i32, i32* %cand_x, align 4
  store i32 %313, i32* %best_x, align 4
  %314 = load i32, i32* %cand_y, align 4
  store i32 %314, i32* %best_y, align 4
  %315 = load i32, i32* %mcost, align 4
  store i32 %315, i32* %min_mcost.addr, align 4
  br label %if.end315

if.end315:                                        ; preds = %if.then314, %if.then291
  br label %if.end316

if.end316:                                        ; preds = %if.end315, %if.then281
  br label %if.end317

if.end317:                                        ; preds = %if.end316, %land.lhs.true276, %for.body265
  br label %for.inc318

for.inc318:                                       ; preds = %if.end317
  %316 = load i32, i32* %m, align 4
  %inc319 = add nsw i32 %316, 1
  store i32 %inc319, i32* %m, align 4
  br label %for.cond262

for.end320:                                       ; preds = %for.cond262
  br label %if.end321

if.end321:                                        ; preds = %for.end320, %lor.lhs.false
  %317 = load i32, i32* %blocktype.addr, align 4
  %cmp322 = icmp sgt i32 %317, 1
  br i1 %cmp322, label %if.then324, label %if.end392

if.then324:                                       ; preds = %if.end321
  %318 = load i32, i32* %pic_pix_x.addr, align 4
  %319 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @pred_MV_uplayer, i64 0, i64 0), align 4
  %div325 = sdiv i32 %319, 4
  %add326 = add nsw i32 %318, %div325
  store i32 %add326, i32* %cand_x, align 4
  %320 = load i32, i32* %pic_pix_y.addr, align 4
  %321 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @pred_MV_uplayer, i64 0, i64 1), align 4
  %div327 = sdiv i32 %321, 4
  %add328 = add nsw i32 %320, %div327
  store i32 %add328, i32* %cand_y, align 4
  %322 = load i32, i32* %cand_x, align 4
  %323 = load i32, i32* %center_x, align 4
  %sub329 = sub nsw i32 %322, %323
  %call330 = call i32 @abs(i32 %sub329) #6
  %324 = load i32, i32* %search_range.addr, align 4
  %cmp331 = icmp sle i32 %call330, %324
  br i1 %cmp331, label %land.lhs.true333, label %if.end374

land.lhs.true333:                                 ; preds = %if.then324
  %325 = load i32, i32* %cand_y, align 4
  %326 = load i32, i32* %center_y, align 4
  %sub334 = sub nsw i32 %325, %326
  %call335 = call i32 @abs(i32 %sub334) #6
  %327 = load i32, i32* %search_range.addr, align 4
  %cmp336 = icmp sle i32 %call335, %327
  br i1 %cmp336, label %if.then338, label %if.end374

if.then338:                                       ; preds = %land.lhs.true333
  %328 = load i32**, i32*** @McostState, align 8
  %329 = load i32, i32* %cand_y, align 4
  %330 = load i32, i32* %center_y, align 4
  %sub339 = sub nsw i32 %329, %330
  %331 = load i32, i32* %search_range.addr, align 4
  %add340 = add nsw i32 %sub339, %331
  %idxprom341 = sext i32 %add340 to i64
  %arrayidx342 = getelementptr inbounds i32*, i32** %328, i64 %idxprom341
  %332 = load i32*, i32** %arrayidx342, align 8
  %333 = load i32, i32* %cand_x, align 4
  %334 = load i32, i32* %center_x, align 4
  %sub343 = sub nsw i32 %333, %334
  %335 = load i32, i32* %search_range.addr, align 4
  %add344 = add nsw i32 %sub343, %335
  %idxprom345 = sext i32 %add344 to i64
  %arrayidx346 = getelementptr inbounds i32, i32* %332, i64 %idxprom345
  %336 = load i32, i32* %arrayidx346, align 4
  %tobool347 = icmp ne i32 %336, 0
  br i1 %tobool347, label %if.end373, label %if.then348

if.then348:                                       ; preds = %if.then338
  %337 = load i32, i32* %lambda_factor, align 4
  %338 = load i32*, i32** @mvbits, align 8
  %339 = load i32, i32* %cand_x, align 4
  %340 = load i32, i32* %mvshift, align 4
  %shl349 = shl i32 %339, %340
  %341 = load i32, i32* %pred_x, align 4
  %sub350 = sub nsw i32 %shl349, %341
  %idxprom351 = sext i32 %sub350 to i64
  %arrayidx352 = getelementptr inbounds i32, i32* %338, i64 %idxprom351
  %342 = load i32, i32* %arrayidx352, align 4
  %343 = load i32*, i32** @mvbits, align 8
  %344 = load i32, i32* %cand_y, align 4
  %345 = load i32, i32* %mvshift, align 4
  %shl353 = shl i32 %344, %345
  %346 = load i32, i32* %pred_y, align 4
  %sub354 = sub nsw i32 %shl353, %346
  %idxprom355 = sext i32 %sub354 to i64
  %arrayidx356 = getelementptr inbounds i32, i32* %343, i64 %idxprom355
  %347 = load i32, i32* %arrayidx356, align 4
  %add357 = add nsw i32 %342, %347
  %mul358 = mul nsw i32 %337, %add357
  %shr359 = ashr i32 %mul358, 16
  store i32 %shr359, i32* %mcost, align 4
  %348 = load i16*, i16** %ref_pic, align 8
  %349 = load i16**, i16*** %orig_pic.addr, align 8
  %350 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %351 = load i32, i32* %blocksize_y, align 4
  %352 = load i32, i32* %blocksize_x, align 4
  %353 = load i32, i32* %blocksize_x4, align 4
  %354 = load i32, i32* %mcost, align 4
  %355 = load i32, i32* %min_mcost.addr, align 4
  %356 = load i32, i32* %cand_x, align 4
  %357 = load i32, i32* %cand_y, align 4
  %call360 = call i32 @PartCalMad(i16* %348, i16** %349, i16* (i32, i16*, i32, i32, i32, i32)* %350, i32 %351, i32 %352, i32 %353, i32 %354, i32 %355, i32 %356, i32 %357)
  store i32 %call360, i32* %mcost, align 4
  %358 = load i32, i32* %mcost, align 4
  %359 = load i32**, i32*** @McostState, align 8
  %360 = load i32, i32* %cand_y, align 4
  %361 = load i32, i32* %center_y, align 4
  %sub361 = sub nsw i32 %360, %361
  %362 = load i32, i32* %search_range.addr, align 4
  %add362 = add nsw i32 %sub361, %362
  %idxprom363 = sext i32 %add362 to i64
  %arrayidx364 = getelementptr inbounds i32*, i32** %359, i64 %idxprom363
  %363 = load i32*, i32** %arrayidx364, align 8
  %364 = load i32, i32* %cand_x, align 4
  %365 = load i32, i32* %center_x, align 4
  %sub365 = sub nsw i32 %364, %365
  %366 = load i32, i32* %search_range.addr, align 4
  %add366 = add nsw i32 %sub365, %366
  %idxprom367 = sext i32 %add366 to i64
  %arrayidx368 = getelementptr inbounds i32, i32* %363, i64 %idxprom367
  store i32 %358, i32* %arrayidx368, align 4
  %367 = load i32, i32* %mcost, align 4
  %368 = load i32, i32* %min_mcost.addr, align 4
  %cmp369 = icmp slt i32 %367, %368
  br i1 %cmp369, label %if.then371, label %if.end372

if.then371:                                       ; preds = %if.then348
  %369 = load i32, i32* %cand_x, align 4
  store i32 %369, i32* %best_x, align 4
  %370 = load i32, i32* %cand_y, align 4
  store i32 %370, i32* %best_y, align 4
  %371 = load i32, i32* %mcost, align 4
  store i32 %371, i32* %min_mcost.addr, align 4
  br label %if.end372

if.end372:                                        ; preds = %if.then371, %if.then348
  br label %if.end373

if.end373:                                        ; preds = %if.end372, %if.then338
  br label %if.end374

if.end374:                                        ; preds = %if.end373, %land.lhs.true333, %if.then324
  %372 = load i32, i32* %min_mcost.addr, align 4
  %373 = load i32, i32* @pred_SAD_uplayer, align 4
  %sub375 = sub nsw i32 %372, %373
  %conv376 = sitofp i32 %sub375 to float
  %374 = load i32, i32* @pred_SAD_uplayer, align 4
  %conv377 = sitofp i32 %374 to float
  %375 = load float, float* %betaThird, align 4
  %mul378 = fmul float %conv377, %375
  %cmp379 = fcmp olt float %conv376, %mul378
  br i1 %cmp379, label %if.then381, label %if.else382

if.then381:                                       ; preds = %if.end374
  br label %third_step

if.else382:                                       ; preds = %if.end374
  %376 = load i32, i32* %min_mcost.addr, align 4
  %377 = load i32, i32* @pred_SAD_uplayer, align 4
  %sub383 = sub nsw i32 %376, %377
  %conv384 = sitofp i32 %sub383 to float
  %378 = load i32, i32* @pred_SAD_uplayer, align 4
  %conv385 = sitofp i32 %378 to float
  %379 = load float, float* %betaSec, align 4
  %mul386 = fmul float %conv385, %379
  %cmp387 = fcmp olt float %conv384, %mul386
  br i1 %cmp387, label %if.then389, label %if.end390

if.then389:                                       ; preds = %if.else382
  br label %sec_step

if.end390:                                        ; preds = %if.else382
  br label %if.end391

if.end391:                                        ; preds = %if.end390
  br label %if.end392

if.end392:                                        ; preds = %if.end391, %if.end321
  %380 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %number = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %380, i32 0, i32 0
  %381 = load i32, i32* %number, align 8
  %382 = load i16, i16* %ref.addr, align 2
  %conv393 = sext i16 %382 to i32
  %add394 = add nsw i32 1, %conv393
  %cmp395 = icmp sgt i32 %381, %add394
  br i1 %cmp395, label %land.lhs.true397, label %lor.lhs.false401

land.lhs.true397:                                 ; preds = %if.end392
  %383 = load i16, i16* %ref.addr, align 2
  %conv398 = sext i16 %383 to i32
  %cmp399 = icmp ne i32 %conv398, -1
  br i1 %cmp399, label %if.then408, label %lor.lhs.false401

lor.lhs.false401:                                 ; preds = %land.lhs.true397, %if.end392
  %384 = load i32, i32* %list.addr, align 4
  %cmp402 = icmp eq i32 %384, 1
  br i1 %cmp402, label %land.lhs.true404, label %if.end459

land.lhs.true404:                                 ; preds = %lor.lhs.false401
  %385 = load i32, i32* @Bframe_ctr, align 4
  %386 = load i32, i32* %N_Bframe, align 4
  %rem405 = srem i32 %385, %386
  %cmp406 = icmp sgt i32 %rem405, 1
  br i1 %cmp406, label %if.then408, label %if.end459

if.then408:                                       ; preds = %land.lhs.true404, %land.lhs.true397
  %387 = load i32, i32* %pic_pix_x.addr, align 4
  %388 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @pred_MV_time, i64 0, i64 0), align 4
  %div409 = sdiv i32 %388, 4
  %add410 = add nsw i32 %387, %div409
  store i32 %add410, i32* %cand_x, align 4
  %389 = load i32, i32* %pic_pix_y.addr, align 4
  %390 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @pred_MV_time, i64 0, i64 1), align 4
  %div411 = sdiv i32 %390, 4
  %add412 = add nsw i32 %389, %div411
  store i32 %add412, i32* %cand_y, align 4
  %391 = load i32, i32* %cand_x, align 4
  %392 = load i32, i32* %center_x, align 4
  %sub413 = sub nsw i32 %391, %392
  %call414 = call i32 @abs(i32 %sub413) #6
  %393 = load i32, i32* %search_range.addr, align 4
  %cmp415 = icmp sle i32 %call414, %393
  br i1 %cmp415, label %land.lhs.true417, label %if.end458

land.lhs.true417:                                 ; preds = %if.then408
  %394 = load i32, i32* %cand_y, align 4
  %395 = load i32, i32* %center_y, align 4
  %sub418 = sub nsw i32 %394, %395
  %call419 = call i32 @abs(i32 %sub418) #6
  %396 = load i32, i32* %search_range.addr, align 4
  %cmp420 = icmp sle i32 %call419, %396
  br i1 %cmp420, label %if.then422, label %if.end458

if.then422:                                       ; preds = %land.lhs.true417
  %397 = load i32**, i32*** @McostState, align 8
  %398 = load i32, i32* %cand_y, align 4
  %399 = load i32, i32* %center_y, align 4
  %sub423 = sub nsw i32 %398, %399
  %400 = load i32, i32* %search_range.addr, align 4
  %add424 = add nsw i32 %sub423, %400
  %idxprom425 = sext i32 %add424 to i64
  %arrayidx426 = getelementptr inbounds i32*, i32** %397, i64 %idxprom425
  %401 = load i32*, i32** %arrayidx426, align 8
  %402 = load i32, i32* %cand_x, align 4
  %403 = load i32, i32* %center_x, align 4
  %sub427 = sub nsw i32 %402, %403
  %404 = load i32, i32* %search_range.addr, align 4
  %add428 = add nsw i32 %sub427, %404
  %idxprom429 = sext i32 %add428 to i64
  %arrayidx430 = getelementptr inbounds i32, i32* %401, i64 %idxprom429
  %405 = load i32, i32* %arrayidx430, align 4
  %tobool431 = icmp ne i32 %405, 0
  br i1 %tobool431, label %if.end457, label %if.then432

if.then432:                                       ; preds = %if.then422
  %406 = load i32, i32* %lambda_factor, align 4
  %407 = load i32*, i32** @mvbits, align 8
  %408 = load i32, i32* %cand_x, align 4
  %409 = load i32, i32* %mvshift, align 4
  %shl433 = shl i32 %408, %409
  %410 = load i32, i32* %pred_x, align 4
  %sub434 = sub nsw i32 %shl433, %410
  %idxprom435 = sext i32 %sub434 to i64
  %arrayidx436 = getelementptr inbounds i32, i32* %407, i64 %idxprom435
  %411 = load i32, i32* %arrayidx436, align 4
  %412 = load i32*, i32** @mvbits, align 8
  %413 = load i32, i32* %cand_y, align 4
  %414 = load i32, i32* %mvshift, align 4
  %shl437 = shl i32 %413, %414
  %415 = load i32, i32* %pred_y, align 4
  %sub438 = sub nsw i32 %shl437, %415
  %idxprom439 = sext i32 %sub438 to i64
  %arrayidx440 = getelementptr inbounds i32, i32* %412, i64 %idxprom439
  %416 = load i32, i32* %arrayidx440, align 4
  %add441 = add nsw i32 %411, %416
  %mul442 = mul nsw i32 %406, %add441
  %shr443 = ashr i32 %mul442, 16
  store i32 %shr443, i32* %mcost, align 4
  %417 = load i16*, i16** %ref_pic, align 8
  %418 = load i16**, i16*** %orig_pic.addr, align 8
  %419 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %420 = load i32, i32* %blocksize_y, align 4
  %421 = load i32, i32* %blocksize_x, align 4
  %422 = load i32, i32* %blocksize_x4, align 4
  %423 = load i32, i32* %mcost, align 4
  %424 = load i32, i32* %min_mcost.addr, align 4
  %425 = load i32, i32* %cand_x, align 4
  %426 = load i32, i32* %cand_y, align 4
  %call444 = call i32 @PartCalMad(i16* %417, i16** %418, i16* (i32, i16*, i32, i32, i32, i32)* %419, i32 %420, i32 %421, i32 %422, i32 %423, i32 %424, i32 %425, i32 %426)
  store i32 %call444, i32* %mcost, align 4
  %427 = load i32, i32* %mcost, align 4
  %428 = load i32**, i32*** @McostState, align 8
  %429 = load i32, i32* %cand_y, align 4
  %430 = load i32, i32* %center_y, align 4
  %sub445 = sub nsw i32 %429, %430
  %431 = load i32, i32* %search_range.addr, align 4
  %add446 = add nsw i32 %sub445, %431
  %idxprom447 = sext i32 %add446 to i64
  %arrayidx448 = getelementptr inbounds i32*, i32** %428, i64 %idxprom447
  %432 = load i32*, i32** %arrayidx448, align 8
  %433 = load i32, i32* %cand_x, align 4
  %434 = load i32, i32* %center_x, align 4
  %sub449 = sub nsw i32 %433, %434
  %435 = load i32, i32* %search_range.addr, align 4
  %add450 = add nsw i32 %sub449, %435
  %idxprom451 = sext i32 %add450 to i64
  %arrayidx452 = getelementptr inbounds i32, i32* %432, i64 %idxprom451
  store i32 %427, i32* %arrayidx452, align 4
  %436 = load i32, i32* %mcost, align 4
  %437 = load i32, i32* %min_mcost.addr, align 4
  %cmp453 = icmp slt i32 %436, %437
  br i1 %cmp453, label %if.then455, label %if.end456

if.then455:                                       ; preds = %if.then432
  %438 = load i32, i32* %cand_x, align 4
  store i32 %438, i32* %best_x, align 4
  %439 = load i32, i32* %cand_y, align 4
  store i32 %439, i32* %best_y, align 4
  %440 = load i32, i32* %mcost, align 4
  store i32 %440, i32* %min_mcost.addr, align 4
  br label %if.end456

if.end456:                                        ; preds = %if.then455, %if.then432
  br label %if.end457

if.end457:                                        ; preds = %if.end456, %if.then422
  br label %if.end458

if.end458:                                        ; preds = %if.end457, %land.lhs.true417, %if.then408
  br label %if.end459

if.end459:                                        ; preds = %if.end458, %land.lhs.true404, %lor.lhs.false401
  %441 = load %struct.InputParameters*, %struct.InputParameters** @input, align 8
  %PicInterlace = getelementptr inbounds %struct.InputParameters, %struct.InputParameters* %441, i32 0, i32 91
  %442 = load i32, i32* %PicInterlace, align 8
  %cmp460 = icmp eq i32 %442, 1
  br i1 %cmp460, label %if.then462, label %if.else535

if.then462:                                       ; preds = %if.end459
  %443 = load i32, i32* %list.addr, align 4
  %cmp463 = icmp eq i32 %443, 0
  br i1 %cmp463, label %land.lhs.true465, label %lor.lhs.false469

land.lhs.true465:                                 ; preds = %if.then462
  %444 = load i16, i16* %ref.addr, align 2
  %conv466 = sext i16 %444 to i32
  %cmp467 = icmp sgt i32 %conv466, 0
  br i1 %cmp467, label %if.then483, label %lor.lhs.false469

lor.lhs.false469:                                 ; preds = %land.lhs.true465, %if.then462
  %445 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %type = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %445, i32 0, i32 6
  %446 = load i32, i32* %type, align 8
  %cmp470 = icmp eq i32 %446, 1
  br i1 %cmp470, label %land.lhs.true472, label %if.end534

land.lhs.true472:                                 ; preds = %lor.lhs.false469
  %447 = load i32, i32* %list.addr, align 4
  %cmp473 = icmp eq i32 %447, 0
  br i1 %cmp473, label %land.lhs.true475, label %if.end534

land.lhs.true475:                                 ; preds = %land.lhs.true472
  %448 = load i16, i16* %ref.addr, align 2
  %conv476 = sext i16 %448 to i32
  %cmp477 = icmp eq i32 %conv476, 0
  br i1 %cmp477, label %if.then483, label %lor.lhs.false479

lor.lhs.false479:                                 ; preds = %land.lhs.true475
  %449 = load i16, i16* %ref.addr, align 2
  %conv480 = sext i16 %449 to i32
  %cmp481 = icmp eq i32 %conv480, 2
  br i1 %cmp481, label %if.then483, label %if.end534

if.then483:                                       ; preds = %lor.lhs.false479, %land.lhs.true475, %land.lhs.true465
  %450 = load i32, i32* %pic_pix_x.addr, align 4
  %451 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @pred_MV_ref, i64 0, i64 0), align 4
  %div484 = sdiv i32 %451, 4
  %add485 = add nsw i32 %450, %div484
  store i32 %add485, i32* %cand_x, align 4
  %452 = load i32, i32* %pic_pix_y.addr, align 4
  %453 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @pred_MV_ref, i64 0, i64 1), align 4
  %div486 = sdiv i32 %453, 4
  %add487 = add nsw i32 %452, %div486
  store i32 %add487, i32* %cand_y, align 4
  %454 = load i32, i32* %cand_x, align 4
  %455 = load i32, i32* %center_x, align 4
  %sub488 = sub nsw i32 %454, %455
  %call489 = call i32 @abs(i32 %sub488) #6
  %456 = load i32, i32* %search_range.addr, align 4
  %cmp490 = icmp sle i32 %call489, %456
  br i1 %cmp490, label %land.lhs.true492, label %if.end533

land.lhs.true492:                                 ; preds = %if.then483
  %457 = load i32, i32* %cand_y, align 4
  %458 = load i32, i32* %center_y, align 4
  %sub493 = sub nsw i32 %457, %458
  %call494 = call i32 @abs(i32 %sub493) #6
  %459 = load i32, i32* %search_range.addr, align 4
  %cmp495 = icmp sle i32 %call494, %459
  br i1 %cmp495, label %if.then497, label %if.end533

if.then497:                                       ; preds = %land.lhs.true492
  %460 = load i32**, i32*** @McostState, align 8
  %461 = load i32, i32* %cand_y, align 4
  %462 = load i32, i32* %center_y, align 4
  %sub498 = sub nsw i32 %461, %462
  %463 = load i32, i32* %search_range.addr, align 4
  %add499 = add nsw i32 %sub498, %463
  %idxprom500 = sext i32 %add499 to i64
  %arrayidx501 = getelementptr inbounds i32*, i32** %460, i64 %idxprom500
  %464 = load i32*, i32** %arrayidx501, align 8
  %465 = load i32, i32* %cand_x, align 4
  %466 = load i32, i32* %center_x, align 4
  %sub502 = sub nsw i32 %465, %466
  %467 = load i32, i32* %search_range.addr, align 4
  %add503 = add nsw i32 %sub502, %467
  %idxprom504 = sext i32 %add503 to i64
  %arrayidx505 = getelementptr inbounds i32, i32* %464, i64 %idxprom504
  %468 = load i32, i32* %arrayidx505, align 4
  %tobool506 = icmp ne i32 %468, 0
  br i1 %tobool506, label %if.end532, label %if.then507

if.then507:                                       ; preds = %if.then497
  %469 = load i32, i32* %lambda_factor, align 4
  %470 = load i32*, i32** @mvbits, align 8
  %471 = load i32, i32* %cand_x, align 4
  %472 = load i32, i32* %mvshift, align 4
  %shl508 = shl i32 %471, %472
  %473 = load i32, i32* %pred_x, align 4
  %sub509 = sub nsw i32 %shl508, %473
  %idxprom510 = sext i32 %sub509 to i64
  %arrayidx511 = getelementptr inbounds i32, i32* %470, i64 %idxprom510
  %474 = load i32, i32* %arrayidx511, align 4
  %475 = load i32*, i32** @mvbits, align 8
  %476 = load i32, i32* %cand_y, align 4
  %477 = load i32, i32* %mvshift, align 4
  %shl512 = shl i32 %476, %477
  %478 = load i32, i32* %pred_y, align 4
  %sub513 = sub nsw i32 %shl512, %478
  %idxprom514 = sext i32 %sub513 to i64
  %arrayidx515 = getelementptr inbounds i32, i32* %475, i64 %idxprom514
  %479 = load i32, i32* %arrayidx515, align 4
  %add516 = add nsw i32 %474, %479
  %mul517 = mul nsw i32 %469, %add516
  %shr518 = ashr i32 %mul517, 16
  store i32 %shr518, i32* %mcost, align 4
  %480 = load i16*, i16** %ref_pic, align 8
  %481 = load i16**, i16*** %orig_pic.addr, align 8
  %482 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %483 = load i32, i32* %blocksize_y, align 4
  %484 = load i32, i32* %blocksize_x, align 4
  %485 = load i32, i32* %blocksize_x4, align 4
  %486 = load i32, i32* %mcost, align 4
  %487 = load i32, i32* %min_mcost.addr, align 4
  %488 = load i32, i32* %cand_x, align 4
  %489 = load i32, i32* %cand_y, align 4
  %call519 = call i32 @PartCalMad(i16* %480, i16** %481, i16* (i32, i16*, i32, i32, i32, i32)* %482, i32 %483, i32 %484, i32 %485, i32 %486, i32 %487, i32 %488, i32 %489)
  store i32 %call519, i32* %mcost, align 4
  %490 = load i32, i32* %mcost, align 4
  %491 = load i32**, i32*** @McostState, align 8
  %492 = load i32, i32* %cand_y, align 4
  %493 = load i32, i32* %center_y, align 4
  %sub520 = sub nsw i32 %492, %493
  %494 = load i32, i32* %search_range.addr, align 4
  %add521 = add nsw i32 %sub520, %494
  %idxprom522 = sext i32 %add521 to i64
  %arrayidx523 = getelementptr inbounds i32*, i32** %491, i64 %idxprom522
  %495 = load i32*, i32** %arrayidx523, align 8
  %496 = load i32, i32* %cand_x, align 4
  %497 = load i32, i32* %center_x, align 4
  %sub524 = sub nsw i32 %496, %497
  %498 = load i32, i32* %search_range.addr, align 4
  %add525 = add nsw i32 %sub524, %498
  %idxprom526 = sext i32 %add525 to i64
  %arrayidx527 = getelementptr inbounds i32, i32* %495, i64 %idxprom526
  store i32 %490, i32* %arrayidx527, align 4
  %499 = load i32, i32* %mcost, align 4
  %500 = load i32, i32* %min_mcost.addr, align 4
  %cmp528 = icmp slt i32 %499, %500
  br i1 %cmp528, label %if.then530, label %if.end531

if.then530:                                       ; preds = %if.then507
  %501 = load i32, i32* %cand_x, align 4
  store i32 %501, i32* %best_x, align 4
  %502 = load i32, i32* %cand_y, align 4
  store i32 %502, i32* %best_y, align 4
  %503 = load i32, i32* %mcost, align 4
  store i32 %503, i32* %min_mcost.addr, align 4
  br label %if.end531

if.end531:                                        ; preds = %if.then530, %if.then507
  br label %if.end532

if.end532:                                        ; preds = %if.end531, %if.then497
  br label %if.end533

if.end533:                                        ; preds = %if.end532, %land.lhs.true492, %if.then483
  br label %if.end534

if.end534:                                        ; preds = %if.end533, %lor.lhs.false479, %land.lhs.true472, %lor.lhs.false469
  br label %if.end605

if.else535:                                       ; preds = %if.end459
  %504 = load i32, i32* %list.addr, align 4
  %cmp536 = icmp eq i32 %504, 0
  br i1 %cmp536, label %land.lhs.true538, label %lor.lhs.false542

land.lhs.true538:                                 ; preds = %if.else535
  %505 = load i16, i16* %ref.addr, align 2
  %conv539 = sext i16 %505 to i32
  %cmp540 = icmp sgt i32 %conv539, 0
  br i1 %cmp540, label %if.then553, label %lor.lhs.false542

lor.lhs.false542:                                 ; preds = %land.lhs.true538, %if.else535
  %506 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %type543 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %506, i32 0, i32 6
  %507 = load i32, i32* %type543, align 8
  %cmp544 = icmp eq i32 %507, 1
  br i1 %cmp544, label %land.lhs.true546, label %if.end604

land.lhs.true546:                                 ; preds = %lor.lhs.false542
  %508 = load i32, i32* %list.addr, align 4
  %cmp547 = icmp eq i32 %508, 0
  br i1 %cmp547, label %land.lhs.true549, label %if.end604

land.lhs.true549:                                 ; preds = %land.lhs.true546
  %509 = load i16, i16* %ref.addr, align 2
  %conv550 = sext i16 %509 to i32
  %cmp551 = icmp eq i32 %conv550, 0
  br i1 %cmp551, label %if.then553, label %if.end604

if.then553:                                       ; preds = %land.lhs.true549, %land.lhs.true538
  %510 = load i32, i32* %pic_pix_x.addr, align 4
  %511 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @pred_MV_ref, i64 0, i64 0), align 4
  %div554 = sdiv i32 %511, 4
  %add555 = add nsw i32 %510, %div554
  store i32 %add555, i32* %cand_x, align 4
  %512 = load i32, i32* %pic_pix_y.addr, align 4
  %513 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @pred_MV_ref, i64 0, i64 1), align 4
  %div556 = sdiv i32 %513, 4
  %add557 = add nsw i32 %512, %div556
  store i32 %add557, i32* %cand_y, align 4
  %514 = load i32, i32* %cand_x, align 4
  %515 = load i32, i32* %center_x, align 4
  %sub558 = sub nsw i32 %514, %515
  %call559 = call i32 @abs(i32 %sub558) #6
  %516 = load i32, i32* %search_range.addr, align 4
  %cmp560 = icmp sle i32 %call559, %516
  br i1 %cmp560, label %land.lhs.true562, label %if.end603

land.lhs.true562:                                 ; preds = %if.then553
  %517 = load i32, i32* %cand_y, align 4
  %518 = load i32, i32* %center_y, align 4
  %sub563 = sub nsw i32 %517, %518
  %call564 = call i32 @abs(i32 %sub563) #6
  %519 = load i32, i32* %search_range.addr, align 4
  %cmp565 = icmp sle i32 %call564, %519
  br i1 %cmp565, label %if.then567, label %if.end603

if.then567:                                       ; preds = %land.lhs.true562
  %520 = load i32**, i32*** @McostState, align 8
  %521 = load i32, i32* %cand_y, align 4
  %522 = load i32, i32* %center_y, align 4
  %sub568 = sub nsw i32 %521, %522
  %523 = load i32, i32* %search_range.addr, align 4
  %add569 = add nsw i32 %sub568, %523
  %idxprom570 = sext i32 %add569 to i64
  %arrayidx571 = getelementptr inbounds i32*, i32** %520, i64 %idxprom570
  %524 = load i32*, i32** %arrayidx571, align 8
  %525 = load i32, i32* %cand_x, align 4
  %526 = load i32, i32* %center_x, align 4
  %sub572 = sub nsw i32 %525, %526
  %527 = load i32, i32* %search_range.addr, align 4
  %add573 = add nsw i32 %sub572, %527
  %idxprom574 = sext i32 %add573 to i64
  %arrayidx575 = getelementptr inbounds i32, i32* %524, i64 %idxprom574
  %528 = load i32, i32* %arrayidx575, align 4
  %tobool576 = icmp ne i32 %528, 0
  br i1 %tobool576, label %if.end602, label %if.then577

if.then577:                                       ; preds = %if.then567
  %529 = load i32, i32* %lambda_factor, align 4
  %530 = load i32*, i32** @mvbits, align 8
  %531 = load i32, i32* %cand_x, align 4
  %532 = load i32, i32* %mvshift, align 4
  %shl578 = shl i32 %531, %532
  %533 = load i32, i32* %pred_x, align 4
  %sub579 = sub nsw i32 %shl578, %533
  %idxprom580 = sext i32 %sub579 to i64
  %arrayidx581 = getelementptr inbounds i32, i32* %530, i64 %idxprom580
  %534 = load i32, i32* %arrayidx581, align 4
  %535 = load i32*, i32** @mvbits, align 8
  %536 = load i32, i32* %cand_y, align 4
  %537 = load i32, i32* %mvshift, align 4
  %shl582 = shl i32 %536, %537
  %538 = load i32, i32* %pred_y, align 4
  %sub583 = sub nsw i32 %shl582, %538
  %idxprom584 = sext i32 %sub583 to i64
  %arrayidx585 = getelementptr inbounds i32, i32* %535, i64 %idxprom584
  %539 = load i32, i32* %arrayidx585, align 4
  %add586 = add nsw i32 %534, %539
  %mul587 = mul nsw i32 %529, %add586
  %shr588 = ashr i32 %mul587, 16
  store i32 %shr588, i32* %mcost, align 4
  %540 = load i16*, i16** %ref_pic, align 8
  %541 = load i16**, i16*** %orig_pic.addr, align 8
  %542 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %543 = load i32, i32* %blocksize_y, align 4
  %544 = load i32, i32* %blocksize_x, align 4
  %545 = load i32, i32* %blocksize_x4, align 4
  %546 = load i32, i32* %mcost, align 4
  %547 = load i32, i32* %min_mcost.addr, align 4
  %548 = load i32, i32* %cand_x, align 4
  %549 = load i32, i32* %cand_y, align 4
  %call589 = call i32 @PartCalMad(i16* %540, i16** %541, i16* (i32, i16*, i32, i32, i32, i32)* %542, i32 %543, i32 %544, i32 %545, i32 %546, i32 %547, i32 %548, i32 %549)
  store i32 %call589, i32* %mcost, align 4
  %550 = load i32, i32* %mcost, align 4
  %551 = load i32**, i32*** @McostState, align 8
  %552 = load i32, i32* %cand_y, align 4
  %553 = load i32, i32* %center_y, align 4
  %sub590 = sub nsw i32 %552, %553
  %554 = load i32, i32* %search_range.addr, align 4
  %add591 = add nsw i32 %sub590, %554
  %idxprom592 = sext i32 %add591 to i64
  %arrayidx593 = getelementptr inbounds i32*, i32** %551, i64 %idxprom592
  %555 = load i32*, i32** %arrayidx593, align 8
  %556 = load i32, i32* %cand_x, align 4
  %557 = load i32, i32* %center_x, align 4
  %sub594 = sub nsw i32 %556, %557
  %558 = load i32, i32* %search_range.addr, align 4
  %add595 = add nsw i32 %sub594, %558
  %idxprom596 = sext i32 %add595 to i64
  %arrayidx597 = getelementptr inbounds i32, i32* %555, i64 %idxprom596
  store i32 %550, i32* %arrayidx597, align 4
  %559 = load i32, i32* %mcost, align 4
  %560 = load i32, i32* %min_mcost.addr, align 4
  %cmp598 = icmp slt i32 %559, %560
  br i1 %cmp598, label %if.then600, label %if.end601

if.then600:                                       ; preds = %if.then577
  %561 = load i32, i32* %cand_x, align 4
  store i32 %561, i32* %best_x, align 4
  %562 = load i32, i32* %cand_y, align 4
  store i32 %562, i32* %best_y, align 4
  %563 = load i32, i32* %mcost, align 4
  store i32 %563, i32* %min_mcost.addr, align 4
  br label %if.end601

if.end601:                                        ; preds = %if.then600, %if.then577
  br label %if.end602

if.end602:                                        ; preds = %if.end601, %if.then567
  br label %if.end603

if.end603:                                        ; preds = %if.end602, %land.lhs.true562, %if.then553
  br label %if.end604

if.end604:                                        ; preds = %if.end603, %land.lhs.true549, %land.lhs.true546, %lor.lhs.false542
  br label %if.end605

if.end605:                                        ; preds = %if.end604, %if.end534
  %564 = load i32, i32* %best_x, align 4
  store i32 %564, i32* %iXMinNow, align 4
  %565 = load i32, i32* %best_y, align 4
  store i32 %565, i32* %iYMinNow, align 4
  store i32 0, i32* %m, align 4
  br label %for.cond606

for.cond606:                                      ; preds = %for.inc662, %if.end605
  %566 = load i32, i32* %m, align 4
  %cmp607 = icmp slt i32 %566, 4
  br i1 %cmp607, label %for.body609, label %for.end664

for.body609:                                      ; preds = %for.cond606
  %567 = load i32, i32* %iXMinNow, align 4
  %568 = load i32, i32* %m, align 4
  %idxprom610 = sext i32 %568 to i64
  %arrayidx611 = getelementptr inbounds [4 x i32], [4 x i32]* @FastIntegerPelBlockMotionSearch.Diamond_x, i64 0, i64 %idxprom610
  %569 = load i32, i32* %arrayidx611, align 4
  %add612 = add nsw i32 %567, %569
  store i32 %add612, i32* %cand_x, align 4
  %570 = load i32, i32* %iYMinNow, align 4
  %571 = load i32, i32* %m, align 4
  %idxprom613 = sext i32 %571 to i64
  %arrayidx614 = getelementptr inbounds [4 x i32], [4 x i32]* @FastIntegerPelBlockMotionSearch.Diamond_y, i64 0, i64 %idxprom613
  %572 = load i32, i32* %arrayidx614, align 4
  %add615 = add nsw i32 %570, %572
  store i32 %add615, i32* %cand_y, align 4
  %573 = load i32, i32* %cand_x, align 4
  %574 = load i32, i32* %center_x, align 4
  %sub616 = sub nsw i32 %573, %574
  %call617 = call i32 @abs(i32 %sub616) #6
  %575 = load i32, i32* %search_range.addr, align 4
  %cmp618 = icmp sle i32 %call617, %575
  br i1 %cmp618, label %land.lhs.true620, label %if.end661

land.lhs.true620:                                 ; preds = %for.body609
  %576 = load i32, i32* %cand_y, align 4
  %577 = load i32, i32* %center_y, align 4
  %sub621 = sub nsw i32 %576, %577
  %call622 = call i32 @abs(i32 %sub621) #6
  %578 = load i32, i32* %search_range.addr, align 4
  %cmp623 = icmp sle i32 %call622, %578
  br i1 %cmp623, label %if.then625, label %if.end661

if.then625:                                       ; preds = %land.lhs.true620
  %579 = load i32**, i32*** @McostState, align 8
  %580 = load i32, i32* %cand_y, align 4
  %581 = load i32, i32* %center_y, align 4
  %sub626 = sub nsw i32 %580, %581
  %582 = load i32, i32* %search_range.addr, align 4
  %add627 = add nsw i32 %sub626, %582
  %idxprom628 = sext i32 %add627 to i64
  %arrayidx629 = getelementptr inbounds i32*, i32** %579, i64 %idxprom628
  %583 = load i32*, i32** %arrayidx629, align 8
  %584 = load i32, i32* %cand_x, align 4
  %585 = load i32, i32* %center_x, align 4
  %sub630 = sub nsw i32 %584, %585
  %586 = load i32, i32* %search_range.addr, align 4
  %add631 = add nsw i32 %sub630, %586
  %idxprom632 = sext i32 %add631 to i64
  %arrayidx633 = getelementptr inbounds i32, i32* %583, i64 %idxprom632
  %587 = load i32, i32* %arrayidx633, align 4
  %tobool634 = icmp ne i32 %587, 0
  br i1 %tobool634, label %if.end660, label %if.then635

if.then635:                                       ; preds = %if.then625
  %588 = load i32, i32* %lambda_factor, align 4
  %589 = load i32*, i32** @mvbits, align 8
  %590 = load i32, i32* %cand_x, align 4
  %591 = load i32, i32* %mvshift, align 4
  %shl636 = shl i32 %590, %591
  %592 = load i32, i32* %pred_x, align 4
  %sub637 = sub nsw i32 %shl636, %592
  %idxprom638 = sext i32 %sub637 to i64
  %arrayidx639 = getelementptr inbounds i32, i32* %589, i64 %idxprom638
  %593 = load i32, i32* %arrayidx639, align 4
  %594 = load i32*, i32** @mvbits, align 8
  %595 = load i32, i32* %cand_y, align 4
  %596 = load i32, i32* %mvshift, align 4
  %shl640 = shl i32 %595, %596
  %597 = load i32, i32* %pred_y, align 4
  %sub641 = sub nsw i32 %shl640, %597
  %idxprom642 = sext i32 %sub641 to i64
  %arrayidx643 = getelementptr inbounds i32, i32* %594, i64 %idxprom642
  %598 = load i32, i32* %arrayidx643, align 4
  %add644 = add nsw i32 %593, %598
  %mul645 = mul nsw i32 %588, %add644
  %shr646 = ashr i32 %mul645, 16
  store i32 %shr646, i32* %mcost, align 4
  %599 = load i16*, i16** %ref_pic, align 8
  %600 = load i16**, i16*** %orig_pic.addr, align 8
  %601 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %602 = load i32, i32* %blocksize_y, align 4
  %603 = load i32, i32* %blocksize_x, align 4
  %604 = load i32, i32* %blocksize_x4, align 4
  %605 = load i32, i32* %mcost, align 4
  %606 = load i32, i32* %min_mcost.addr, align 4
  %607 = load i32, i32* %cand_x, align 4
  %608 = load i32, i32* %cand_y, align 4
  %call647 = call i32 @PartCalMad(i16* %599, i16** %600, i16* (i32, i16*, i32, i32, i32, i32)* %601, i32 %602, i32 %603, i32 %604, i32 %605, i32 %606, i32 %607, i32 %608)
  store i32 %call647, i32* %mcost, align 4
  %609 = load i32, i32* %mcost, align 4
  %610 = load i32**, i32*** @McostState, align 8
  %611 = load i32, i32* %cand_y, align 4
  %612 = load i32, i32* %center_y, align 4
  %sub648 = sub nsw i32 %611, %612
  %613 = load i32, i32* %search_range.addr, align 4
  %add649 = add nsw i32 %sub648, %613
  %idxprom650 = sext i32 %add649 to i64
  %arrayidx651 = getelementptr inbounds i32*, i32** %610, i64 %idxprom650
  %614 = load i32*, i32** %arrayidx651, align 8
  %615 = load i32, i32* %cand_x, align 4
  %616 = load i32, i32* %center_x, align 4
  %sub652 = sub nsw i32 %615, %616
  %617 = load i32, i32* %search_range.addr, align 4
  %add653 = add nsw i32 %sub652, %617
  %idxprom654 = sext i32 %add653 to i64
  %arrayidx655 = getelementptr inbounds i32, i32* %614, i64 %idxprom654
  store i32 %609, i32* %arrayidx655, align 4
  %618 = load i32, i32* %mcost, align 4
  %619 = load i32, i32* %min_mcost.addr, align 4
  %cmp656 = icmp slt i32 %618, %619
  br i1 %cmp656, label %if.then658, label %if.end659

if.then658:                                       ; preds = %if.then635
  %620 = load i32, i32* %cand_x, align 4
  store i32 %620, i32* %best_x, align 4
  %621 = load i32, i32* %cand_y, align 4
  store i32 %621, i32* %best_y, align 4
  %622 = load i32, i32* %mcost, align 4
  store i32 %622, i32* %min_mcost.addr, align 4
  br label %if.end659

if.end659:                                        ; preds = %if.then658, %if.then635
  br label %if.end660

if.end660:                                        ; preds = %if.end659, %if.then625
  br label %if.end661

if.end661:                                        ; preds = %if.end660, %land.lhs.true620, %for.body609
  br label %for.inc662

for.inc662:                                       ; preds = %if.end661
  %623 = load i32, i32* %m, align 4
  %inc663 = add nsw i32 %623, 1
  store i32 %inc663, i32* %m, align 4
  br label %for.cond606

for.end664:                                       ; preds = %for.cond606
  %624 = load i16, i16* %ref.addr, align 2
  %conv665 = sext i16 %624 to i32
  %cmp666 = icmp sgt i32 %conv665, 0
  br i1 %cmp666, label %if.then668, label %if.else686

if.then668:                                       ; preds = %for.end664
  %625 = load i32, i32* %min_mcost.addr, align 4
  %626 = load i32, i32* @pred_SAD_ref, align 4
  %sub669 = sub nsw i32 %625, %626
  %conv670 = sitofp i32 %sub669 to float
  %627 = load i32, i32* @pred_SAD_ref, align 4
  %conv671 = sitofp i32 %627 to float
  %628 = load float, float* %betaThird, align 4
  %mul672 = fmul float %conv671, %628
  %cmp673 = fcmp olt float %conv670, %mul672
  br i1 %cmp673, label %if.then675, label %if.else676

if.then675:                                       ; preds = %if.then668
  br label %third_step

if.else676:                                       ; preds = %if.then668
  %629 = load i32, i32* %min_mcost.addr, align 4
  %630 = load i32, i32* @pred_SAD_ref, align 4
  %sub677 = sub nsw i32 %629, %630
  %conv678 = sitofp i32 %sub677 to float
  %631 = load i32, i32* @pred_SAD_ref, align 4
  %conv679 = sitofp i32 %631 to float
  %632 = load float, float* %betaSec, align 4
  %mul680 = fmul float %conv679, %632
  %cmp681 = fcmp olt float %conv678, %mul680
  br i1 %cmp681, label %if.then683, label %if.end684

if.then683:                                       ; preds = %if.else676
  br label %sec_step

if.end684:                                        ; preds = %if.else676
  br label %if.end685

if.end685:                                        ; preds = %if.end684
  br label %if.end726

if.else686:                                       ; preds = %for.end664
  %633 = load i32, i32* %blocktype.addr, align 4
  %cmp687 = icmp sgt i32 %633, 1
  br i1 %cmp687, label %if.then689, label %if.else707

if.then689:                                       ; preds = %if.else686
  %634 = load i32, i32* %min_mcost.addr, align 4
  %635 = load i32, i32* @pred_SAD_uplayer, align 4
  %sub690 = sub nsw i32 %634, %635
  %conv691 = sitofp i32 %sub690 to float
  %636 = load i32, i32* @pred_SAD_uplayer, align 4
  %conv692 = sitofp i32 %636 to float
  %637 = load float, float* %betaThird, align 4
  %mul693 = fmul float %conv692, %637
  %cmp694 = fcmp olt float %conv691, %mul693
  br i1 %cmp694, label %if.then696, label %if.else697

if.then696:                                       ; preds = %if.then689
  br label %third_step

if.else697:                                       ; preds = %if.then689
  %638 = load i32, i32* %min_mcost.addr, align 4
  %639 = load i32, i32* @pred_SAD_uplayer, align 4
  %sub698 = sub nsw i32 %638, %639
  %conv699 = sitofp i32 %sub698 to float
  %640 = load i32, i32* @pred_SAD_uplayer, align 4
  %conv700 = sitofp i32 %640 to float
  %641 = load float, float* %betaSec, align 4
  %mul701 = fmul float %conv700, %641
  %cmp702 = fcmp olt float %conv699, %mul701
  br i1 %cmp702, label %if.then704, label %if.end705

if.then704:                                       ; preds = %if.else697
  br label %sec_step

if.end705:                                        ; preds = %if.else697
  br label %if.end706

if.end706:                                        ; preds = %if.end705
  br label %if.end725

if.else707:                                       ; preds = %if.else686
  %642 = load i32, i32* %min_mcost.addr, align 4
  %643 = load i32, i32* @pred_SAD_space, align 4
  %sub708 = sub nsw i32 %642, %643
  %conv709 = sitofp i32 %sub708 to float
  %644 = load i32, i32* @pred_SAD_space, align 4
  %conv710 = sitofp i32 %644 to float
  %645 = load float, float* %betaThird, align 4
  %mul711 = fmul float %conv710, %645
  %cmp712 = fcmp olt float %conv709, %mul711
  br i1 %cmp712, label %if.then714, label %if.else715

if.then714:                                       ; preds = %if.else707
  br label %third_step

if.else715:                                       ; preds = %if.else707
  %646 = load i32, i32* %min_mcost.addr, align 4
  %647 = load i32, i32* @pred_SAD_space, align 4
  %sub716 = sub nsw i32 %646, %647
  %conv717 = sitofp i32 %sub716 to float
  %648 = load i32, i32* @pred_SAD_space, align 4
  %conv718 = sitofp i32 %648 to float
  %649 = load float, float* %betaSec, align 4
  %mul719 = fmul float %conv718, %649
  %cmp720 = fcmp olt float %conv717, %mul719
  br i1 %cmp720, label %if.then722, label %if.end723

if.then722:                                       ; preds = %if.else715
  br label %sec_step

if.end723:                                        ; preds = %if.else715
  br label %if.end724

if.end724:                                        ; preds = %if.end723
  br label %if.end725

if.end725:                                        ; preds = %if.end724, %if.end706
  br label %if.end726

if.end726:                                        ; preds = %if.end725, %if.end685
  %650 = load i32, i32* %blocktype.addr, align 4
  %cmp727 = icmp sgt i32 %650, 6
  br i1 %cmp727, label %if.then729, label %if.else730

if.then729:                                       ; preds = %if.end726
  br label %sec_step

if.else730:                                       ; preds = %if.end726
  br label %first_step

first_step:                                       ; preds = %if.else730
  %651 = load i32, i32* %best_x, align 4
  store i32 %651, i32* %iXMinNow, align 4
  %652 = load i32, i32* %best_y, align 4
  store i32 %652, i32* %iYMinNow, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond731

for.cond731:                                      ; preds = %for.inc832, %first_step
  %653 = load i32, i32* %i, align 4
  %654 = load i32, i32* %search_range.addr, align 4
  %div732 = sdiv i32 %654, 2
  %cmp733 = icmp sle i32 %653, %div732
  br i1 %cmp733, label %for.body735, label %for.end834

for.body735:                                      ; preds = %for.cond731
  %655 = load i32, i32* %i, align 4
  %mul736 = mul nsw i32 2, %655
  %sub737 = sub nsw i32 %mul736, 1
  store i32 %sub737, i32* %search_step, align 4
  %656 = load i32, i32* %iXMinNow, align 4
  %657 = load i32, i32* %search_step, align 4
  %add738 = add nsw i32 %656, %657
  store i32 %add738, i32* %cand_x, align 4
  %658 = load i32, i32* %iYMinNow, align 4
  store i32 %658, i32* %cand_y, align 4
  %659 = load i32, i32* %cand_x, align 4
  %660 = load i32, i32* %center_x, align 4
  %sub739 = sub nsw i32 %659, %660
  %call740 = call i32 @abs(i32 %sub739) #6
  %661 = load i32, i32* %search_range.addr, align 4
  %cmp741 = icmp sle i32 %call740, %661
  br i1 %cmp741, label %land.lhs.true743, label %if.end784

land.lhs.true743:                                 ; preds = %for.body735
  %662 = load i32, i32* %cand_y, align 4
  %663 = load i32, i32* %center_y, align 4
  %sub744 = sub nsw i32 %662, %663
  %call745 = call i32 @abs(i32 %sub744) #6
  %664 = load i32, i32* %search_range.addr, align 4
  %cmp746 = icmp sle i32 %call745, %664
  br i1 %cmp746, label %if.then748, label %if.end784

if.then748:                                       ; preds = %land.lhs.true743
  %665 = load i32**, i32*** @McostState, align 8
  %666 = load i32, i32* %cand_y, align 4
  %667 = load i32, i32* %center_y, align 4
  %sub749 = sub nsw i32 %666, %667
  %668 = load i32, i32* %search_range.addr, align 4
  %add750 = add nsw i32 %sub749, %668
  %idxprom751 = sext i32 %add750 to i64
  %arrayidx752 = getelementptr inbounds i32*, i32** %665, i64 %idxprom751
  %669 = load i32*, i32** %arrayidx752, align 8
  %670 = load i32, i32* %cand_x, align 4
  %671 = load i32, i32* %center_x, align 4
  %sub753 = sub nsw i32 %670, %671
  %672 = load i32, i32* %search_range.addr, align 4
  %add754 = add nsw i32 %sub753, %672
  %idxprom755 = sext i32 %add754 to i64
  %arrayidx756 = getelementptr inbounds i32, i32* %669, i64 %idxprom755
  %673 = load i32, i32* %arrayidx756, align 4
  %tobool757 = icmp ne i32 %673, 0
  br i1 %tobool757, label %if.end783, label %if.then758

if.then758:                                       ; preds = %if.then748
  %674 = load i32, i32* %lambda_factor, align 4
  %675 = load i32*, i32** @mvbits, align 8
  %676 = load i32, i32* %cand_x, align 4
  %677 = load i32, i32* %mvshift, align 4
  %shl759 = shl i32 %676, %677
  %678 = load i32, i32* %pred_x, align 4
  %sub760 = sub nsw i32 %shl759, %678
  %idxprom761 = sext i32 %sub760 to i64
  %arrayidx762 = getelementptr inbounds i32, i32* %675, i64 %idxprom761
  %679 = load i32, i32* %arrayidx762, align 4
  %680 = load i32*, i32** @mvbits, align 8
  %681 = load i32, i32* %cand_y, align 4
  %682 = load i32, i32* %mvshift, align 4
  %shl763 = shl i32 %681, %682
  %683 = load i32, i32* %pred_y, align 4
  %sub764 = sub nsw i32 %shl763, %683
  %idxprom765 = sext i32 %sub764 to i64
  %arrayidx766 = getelementptr inbounds i32, i32* %680, i64 %idxprom765
  %684 = load i32, i32* %arrayidx766, align 4
  %add767 = add nsw i32 %679, %684
  %mul768 = mul nsw i32 %674, %add767
  %shr769 = ashr i32 %mul768, 16
  store i32 %shr769, i32* %mcost, align 4
  %685 = load i16*, i16** %ref_pic, align 8
  %686 = load i16**, i16*** %orig_pic.addr, align 8
  %687 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %688 = load i32, i32* %blocksize_y, align 4
  %689 = load i32, i32* %blocksize_x, align 4
  %690 = load i32, i32* %blocksize_x4, align 4
  %691 = load i32, i32* %mcost, align 4
  %692 = load i32, i32* %min_mcost.addr, align 4
  %693 = load i32, i32* %cand_x, align 4
  %694 = load i32, i32* %cand_y, align 4
  %call770 = call i32 @PartCalMad(i16* %685, i16** %686, i16* (i32, i16*, i32, i32, i32, i32)* %687, i32 %688, i32 %689, i32 %690, i32 %691, i32 %692, i32 %693, i32 %694)
  store i32 %call770, i32* %mcost, align 4
  %695 = load i32, i32* %mcost, align 4
  %696 = load i32**, i32*** @McostState, align 8
  %697 = load i32, i32* %cand_y, align 4
  %698 = load i32, i32* %center_y, align 4
  %sub771 = sub nsw i32 %697, %698
  %699 = load i32, i32* %search_range.addr, align 4
  %add772 = add nsw i32 %sub771, %699
  %idxprom773 = sext i32 %add772 to i64
  %arrayidx774 = getelementptr inbounds i32*, i32** %696, i64 %idxprom773
  %700 = load i32*, i32** %arrayidx774, align 8
  %701 = load i32, i32* %cand_x, align 4
  %702 = load i32, i32* %center_x, align 4
  %sub775 = sub nsw i32 %701, %702
  %703 = load i32, i32* %search_range.addr, align 4
  %add776 = add nsw i32 %sub775, %703
  %idxprom777 = sext i32 %add776 to i64
  %arrayidx778 = getelementptr inbounds i32, i32* %700, i64 %idxprom777
  store i32 %695, i32* %arrayidx778, align 4
  %704 = load i32, i32* %mcost, align 4
  %705 = load i32, i32* %min_mcost.addr, align 4
  %cmp779 = icmp slt i32 %704, %705
  br i1 %cmp779, label %if.then781, label %if.end782

if.then781:                                       ; preds = %if.then758
  %706 = load i32, i32* %cand_x, align 4
  store i32 %706, i32* %best_x, align 4
  %707 = load i32, i32* %cand_y, align 4
  store i32 %707, i32* %best_y, align 4
  %708 = load i32, i32* %mcost, align 4
  store i32 %708, i32* %min_mcost.addr, align 4
  br label %if.end782

if.end782:                                        ; preds = %if.then781, %if.then758
  br label %if.end783

if.end783:                                        ; preds = %if.end782, %if.then748
  br label %if.end784

if.end784:                                        ; preds = %if.end783, %land.lhs.true743, %for.body735
  %709 = load i32, i32* %iXMinNow, align 4
  %710 = load i32, i32* %search_step, align 4
  %sub785 = sub nsw i32 %709, %710
  store i32 %sub785, i32* %cand_x, align 4
  %711 = load i32, i32* %iYMinNow, align 4
  store i32 %711, i32* %cand_y, align 4
  %712 = load i32, i32* %cand_x, align 4
  %713 = load i32, i32* %center_x, align 4
  %sub786 = sub nsw i32 %712, %713
  %call787 = call i32 @abs(i32 %sub786) #6
  %714 = load i32, i32* %search_range.addr, align 4
  %cmp788 = icmp sle i32 %call787, %714
  br i1 %cmp788, label %land.lhs.true790, label %if.end831

land.lhs.true790:                                 ; preds = %if.end784
  %715 = load i32, i32* %cand_y, align 4
  %716 = load i32, i32* %center_y, align 4
  %sub791 = sub nsw i32 %715, %716
  %call792 = call i32 @abs(i32 %sub791) #6
  %717 = load i32, i32* %search_range.addr, align 4
  %cmp793 = icmp sle i32 %call792, %717
  br i1 %cmp793, label %if.then795, label %if.end831

if.then795:                                       ; preds = %land.lhs.true790
  %718 = load i32**, i32*** @McostState, align 8
  %719 = load i32, i32* %cand_y, align 4
  %720 = load i32, i32* %center_y, align 4
  %sub796 = sub nsw i32 %719, %720
  %721 = load i32, i32* %search_range.addr, align 4
  %add797 = add nsw i32 %sub796, %721
  %idxprom798 = sext i32 %add797 to i64
  %arrayidx799 = getelementptr inbounds i32*, i32** %718, i64 %idxprom798
  %722 = load i32*, i32** %arrayidx799, align 8
  %723 = load i32, i32* %cand_x, align 4
  %724 = load i32, i32* %center_x, align 4
  %sub800 = sub nsw i32 %723, %724
  %725 = load i32, i32* %search_range.addr, align 4
  %add801 = add nsw i32 %sub800, %725
  %idxprom802 = sext i32 %add801 to i64
  %arrayidx803 = getelementptr inbounds i32, i32* %722, i64 %idxprom802
  %726 = load i32, i32* %arrayidx803, align 4
  %tobool804 = icmp ne i32 %726, 0
  br i1 %tobool804, label %if.end830, label %if.then805

if.then805:                                       ; preds = %if.then795
  %727 = load i32, i32* %lambda_factor, align 4
  %728 = load i32*, i32** @mvbits, align 8
  %729 = load i32, i32* %cand_x, align 4
  %730 = load i32, i32* %mvshift, align 4
  %shl806 = shl i32 %729, %730
  %731 = load i32, i32* %pred_x, align 4
  %sub807 = sub nsw i32 %shl806, %731
  %idxprom808 = sext i32 %sub807 to i64
  %arrayidx809 = getelementptr inbounds i32, i32* %728, i64 %idxprom808
  %732 = load i32, i32* %arrayidx809, align 4
  %733 = load i32*, i32** @mvbits, align 8
  %734 = load i32, i32* %cand_y, align 4
  %735 = load i32, i32* %mvshift, align 4
  %shl810 = shl i32 %734, %735
  %736 = load i32, i32* %pred_y, align 4
  %sub811 = sub nsw i32 %shl810, %736
  %idxprom812 = sext i32 %sub811 to i64
  %arrayidx813 = getelementptr inbounds i32, i32* %733, i64 %idxprom812
  %737 = load i32, i32* %arrayidx813, align 4
  %add814 = add nsw i32 %732, %737
  %mul815 = mul nsw i32 %727, %add814
  %shr816 = ashr i32 %mul815, 16
  store i32 %shr816, i32* %mcost, align 4
  %738 = load i16*, i16** %ref_pic, align 8
  %739 = load i16**, i16*** %orig_pic.addr, align 8
  %740 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %741 = load i32, i32* %blocksize_y, align 4
  %742 = load i32, i32* %blocksize_x, align 4
  %743 = load i32, i32* %blocksize_x4, align 4
  %744 = load i32, i32* %mcost, align 4
  %745 = load i32, i32* %min_mcost.addr, align 4
  %746 = load i32, i32* %cand_x, align 4
  %747 = load i32, i32* %cand_y, align 4
  %call817 = call i32 @PartCalMad(i16* %738, i16** %739, i16* (i32, i16*, i32, i32, i32, i32)* %740, i32 %741, i32 %742, i32 %743, i32 %744, i32 %745, i32 %746, i32 %747)
  store i32 %call817, i32* %mcost, align 4
  %748 = load i32, i32* %mcost, align 4
  %749 = load i32**, i32*** @McostState, align 8
  %750 = load i32, i32* %cand_y, align 4
  %751 = load i32, i32* %center_y, align 4
  %sub818 = sub nsw i32 %750, %751
  %752 = load i32, i32* %search_range.addr, align 4
  %add819 = add nsw i32 %sub818, %752
  %idxprom820 = sext i32 %add819 to i64
  %arrayidx821 = getelementptr inbounds i32*, i32** %749, i64 %idxprom820
  %753 = load i32*, i32** %arrayidx821, align 8
  %754 = load i32, i32* %cand_x, align 4
  %755 = load i32, i32* %center_x, align 4
  %sub822 = sub nsw i32 %754, %755
  %756 = load i32, i32* %search_range.addr, align 4
  %add823 = add nsw i32 %sub822, %756
  %idxprom824 = sext i32 %add823 to i64
  %arrayidx825 = getelementptr inbounds i32, i32* %753, i64 %idxprom824
  store i32 %748, i32* %arrayidx825, align 4
  %757 = load i32, i32* %mcost, align 4
  %758 = load i32, i32* %min_mcost.addr, align 4
  %cmp826 = icmp slt i32 %757, %758
  br i1 %cmp826, label %if.then828, label %if.end829

if.then828:                                       ; preds = %if.then805
  %759 = load i32, i32* %cand_x, align 4
  store i32 %759, i32* %best_x, align 4
  %760 = load i32, i32* %cand_y, align 4
  store i32 %760, i32* %best_y, align 4
  %761 = load i32, i32* %mcost, align 4
  store i32 %761, i32* %min_mcost.addr, align 4
  br label %if.end829

if.end829:                                        ; preds = %if.then828, %if.then805
  br label %if.end830

if.end830:                                        ; preds = %if.end829, %if.then795
  br label %if.end831

if.end831:                                        ; preds = %if.end830, %land.lhs.true790, %if.end784
  br label %for.inc832

for.inc832:                                       ; preds = %if.end831
  %762 = load i32, i32* %i, align 4
  %inc833 = add nsw i32 %762, 1
  store i32 %inc833, i32* %i, align 4
  br label %for.cond731

for.end834:                                       ; preds = %for.cond731
  store i32 1, i32* %i, align 4
  br label %for.cond835

for.cond835:                                      ; preds = %for.inc936, %for.end834
  %763 = load i32, i32* %i, align 4
  %764 = load i32, i32* %search_range.addr, align 4
  %div836 = sdiv i32 %764, 4
  %cmp837 = icmp sle i32 %763, %div836
  br i1 %cmp837, label %for.body839, label %for.end938

for.body839:                                      ; preds = %for.cond835
  %765 = load i32, i32* %i, align 4
  %mul840 = mul nsw i32 2, %765
  %sub841 = sub nsw i32 %mul840, 1
  store i32 %sub841, i32* %search_step, align 4
  %766 = load i32, i32* %iXMinNow, align 4
  store i32 %766, i32* %cand_x, align 4
  %767 = load i32, i32* %iYMinNow, align 4
  %768 = load i32, i32* %search_step, align 4
  %add842 = add nsw i32 %767, %768
  store i32 %add842, i32* %cand_y, align 4
  %769 = load i32, i32* %cand_x, align 4
  %770 = load i32, i32* %center_x, align 4
  %sub843 = sub nsw i32 %769, %770
  %call844 = call i32 @abs(i32 %sub843) #6
  %771 = load i32, i32* %search_range.addr, align 4
  %cmp845 = icmp sle i32 %call844, %771
  br i1 %cmp845, label %land.lhs.true847, label %if.end888

land.lhs.true847:                                 ; preds = %for.body839
  %772 = load i32, i32* %cand_y, align 4
  %773 = load i32, i32* %center_y, align 4
  %sub848 = sub nsw i32 %772, %773
  %call849 = call i32 @abs(i32 %sub848) #6
  %774 = load i32, i32* %search_range.addr, align 4
  %cmp850 = icmp sle i32 %call849, %774
  br i1 %cmp850, label %if.then852, label %if.end888

if.then852:                                       ; preds = %land.lhs.true847
  %775 = load i32**, i32*** @McostState, align 8
  %776 = load i32, i32* %cand_y, align 4
  %777 = load i32, i32* %center_y, align 4
  %sub853 = sub nsw i32 %776, %777
  %778 = load i32, i32* %search_range.addr, align 4
  %add854 = add nsw i32 %sub853, %778
  %idxprom855 = sext i32 %add854 to i64
  %arrayidx856 = getelementptr inbounds i32*, i32** %775, i64 %idxprom855
  %779 = load i32*, i32** %arrayidx856, align 8
  %780 = load i32, i32* %cand_x, align 4
  %781 = load i32, i32* %center_x, align 4
  %sub857 = sub nsw i32 %780, %781
  %782 = load i32, i32* %search_range.addr, align 4
  %add858 = add nsw i32 %sub857, %782
  %idxprom859 = sext i32 %add858 to i64
  %arrayidx860 = getelementptr inbounds i32, i32* %779, i64 %idxprom859
  %783 = load i32, i32* %arrayidx860, align 4
  %tobool861 = icmp ne i32 %783, 0
  br i1 %tobool861, label %if.end887, label %if.then862

if.then862:                                       ; preds = %if.then852
  %784 = load i32, i32* %lambda_factor, align 4
  %785 = load i32*, i32** @mvbits, align 8
  %786 = load i32, i32* %cand_x, align 4
  %787 = load i32, i32* %mvshift, align 4
  %shl863 = shl i32 %786, %787
  %788 = load i32, i32* %pred_x, align 4
  %sub864 = sub nsw i32 %shl863, %788
  %idxprom865 = sext i32 %sub864 to i64
  %arrayidx866 = getelementptr inbounds i32, i32* %785, i64 %idxprom865
  %789 = load i32, i32* %arrayidx866, align 4
  %790 = load i32*, i32** @mvbits, align 8
  %791 = load i32, i32* %cand_y, align 4
  %792 = load i32, i32* %mvshift, align 4
  %shl867 = shl i32 %791, %792
  %793 = load i32, i32* %pred_y, align 4
  %sub868 = sub nsw i32 %shl867, %793
  %idxprom869 = sext i32 %sub868 to i64
  %arrayidx870 = getelementptr inbounds i32, i32* %790, i64 %idxprom869
  %794 = load i32, i32* %arrayidx870, align 4
  %add871 = add nsw i32 %789, %794
  %mul872 = mul nsw i32 %784, %add871
  %shr873 = ashr i32 %mul872, 16
  store i32 %shr873, i32* %mcost, align 4
  %795 = load i16*, i16** %ref_pic, align 8
  %796 = load i16**, i16*** %orig_pic.addr, align 8
  %797 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %798 = load i32, i32* %blocksize_y, align 4
  %799 = load i32, i32* %blocksize_x, align 4
  %800 = load i32, i32* %blocksize_x4, align 4
  %801 = load i32, i32* %mcost, align 4
  %802 = load i32, i32* %min_mcost.addr, align 4
  %803 = load i32, i32* %cand_x, align 4
  %804 = load i32, i32* %cand_y, align 4
  %call874 = call i32 @PartCalMad(i16* %795, i16** %796, i16* (i32, i16*, i32, i32, i32, i32)* %797, i32 %798, i32 %799, i32 %800, i32 %801, i32 %802, i32 %803, i32 %804)
  store i32 %call874, i32* %mcost, align 4
  %805 = load i32, i32* %mcost, align 4
  %806 = load i32**, i32*** @McostState, align 8
  %807 = load i32, i32* %cand_y, align 4
  %808 = load i32, i32* %center_y, align 4
  %sub875 = sub nsw i32 %807, %808
  %809 = load i32, i32* %search_range.addr, align 4
  %add876 = add nsw i32 %sub875, %809
  %idxprom877 = sext i32 %add876 to i64
  %arrayidx878 = getelementptr inbounds i32*, i32** %806, i64 %idxprom877
  %810 = load i32*, i32** %arrayidx878, align 8
  %811 = load i32, i32* %cand_x, align 4
  %812 = load i32, i32* %center_x, align 4
  %sub879 = sub nsw i32 %811, %812
  %813 = load i32, i32* %search_range.addr, align 4
  %add880 = add nsw i32 %sub879, %813
  %idxprom881 = sext i32 %add880 to i64
  %arrayidx882 = getelementptr inbounds i32, i32* %810, i64 %idxprom881
  store i32 %805, i32* %arrayidx882, align 4
  %814 = load i32, i32* %mcost, align 4
  %815 = load i32, i32* %min_mcost.addr, align 4
  %cmp883 = icmp slt i32 %814, %815
  br i1 %cmp883, label %if.then885, label %if.end886

if.then885:                                       ; preds = %if.then862
  %816 = load i32, i32* %cand_x, align 4
  store i32 %816, i32* %best_x, align 4
  %817 = load i32, i32* %cand_y, align 4
  store i32 %817, i32* %best_y, align 4
  %818 = load i32, i32* %mcost, align 4
  store i32 %818, i32* %min_mcost.addr, align 4
  br label %if.end886

if.end886:                                        ; preds = %if.then885, %if.then862
  br label %if.end887

if.end887:                                        ; preds = %if.end886, %if.then852
  br label %if.end888

if.end888:                                        ; preds = %if.end887, %land.lhs.true847, %for.body839
  %819 = load i32, i32* %iXMinNow, align 4
  store i32 %819, i32* %cand_x, align 4
  %820 = load i32, i32* %iYMinNow, align 4
  %821 = load i32, i32* %search_step, align 4
  %sub889 = sub nsw i32 %820, %821
  store i32 %sub889, i32* %cand_y, align 4
  %822 = load i32, i32* %cand_x, align 4
  %823 = load i32, i32* %center_x, align 4
  %sub890 = sub nsw i32 %822, %823
  %call891 = call i32 @abs(i32 %sub890) #6
  %824 = load i32, i32* %search_range.addr, align 4
  %cmp892 = icmp sle i32 %call891, %824
  br i1 %cmp892, label %land.lhs.true894, label %if.end935

land.lhs.true894:                                 ; preds = %if.end888
  %825 = load i32, i32* %cand_y, align 4
  %826 = load i32, i32* %center_y, align 4
  %sub895 = sub nsw i32 %825, %826
  %call896 = call i32 @abs(i32 %sub895) #6
  %827 = load i32, i32* %search_range.addr, align 4
  %cmp897 = icmp sle i32 %call896, %827
  br i1 %cmp897, label %if.then899, label %if.end935

if.then899:                                       ; preds = %land.lhs.true894
  %828 = load i32**, i32*** @McostState, align 8
  %829 = load i32, i32* %cand_y, align 4
  %830 = load i32, i32* %center_y, align 4
  %sub900 = sub nsw i32 %829, %830
  %831 = load i32, i32* %search_range.addr, align 4
  %add901 = add nsw i32 %sub900, %831
  %idxprom902 = sext i32 %add901 to i64
  %arrayidx903 = getelementptr inbounds i32*, i32** %828, i64 %idxprom902
  %832 = load i32*, i32** %arrayidx903, align 8
  %833 = load i32, i32* %cand_x, align 4
  %834 = load i32, i32* %center_x, align 4
  %sub904 = sub nsw i32 %833, %834
  %835 = load i32, i32* %search_range.addr, align 4
  %add905 = add nsw i32 %sub904, %835
  %idxprom906 = sext i32 %add905 to i64
  %arrayidx907 = getelementptr inbounds i32, i32* %832, i64 %idxprom906
  %836 = load i32, i32* %arrayidx907, align 4
  %tobool908 = icmp ne i32 %836, 0
  br i1 %tobool908, label %if.end934, label %if.then909

if.then909:                                       ; preds = %if.then899
  %837 = load i32, i32* %lambda_factor, align 4
  %838 = load i32*, i32** @mvbits, align 8
  %839 = load i32, i32* %cand_x, align 4
  %840 = load i32, i32* %mvshift, align 4
  %shl910 = shl i32 %839, %840
  %841 = load i32, i32* %pred_x, align 4
  %sub911 = sub nsw i32 %shl910, %841
  %idxprom912 = sext i32 %sub911 to i64
  %arrayidx913 = getelementptr inbounds i32, i32* %838, i64 %idxprom912
  %842 = load i32, i32* %arrayidx913, align 4
  %843 = load i32*, i32** @mvbits, align 8
  %844 = load i32, i32* %cand_y, align 4
  %845 = load i32, i32* %mvshift, align 4
  %shl914 = shl i32 %844, %845
  %846 = load i32, i32* %pred_y, align 4
  %sub915 = sub nsw i32 %shl914, %846
  %idxprom916 = sext i32 %sub915 to i64
  %arrayidx917 = getelementptr inbounds i32, i32* %843, i64 %idxprom916
  %847 = load i32, i32* %arrayidx917, align 4
  %add918 = add nsw i32 %842, %847
  %mul919 = mul nsw i32 %837, %add918
  %shr920 = ashr i32 %mul919, 16
  store i32 %shr920, i32* %mcost, align 4
  %848 = load i16*, i16** %ref_pic, align 8
  %849 = load i16**, i16*** %orig_pic.addr, align 8
  %850 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %851 = load i32, i32* %blocksize_y, align 4
  %852 = load i32, i32* %blocksize_x, align 4
  %853 = load i32, i32* %blocksize_x4, align 4
  %854 = load i32, i32* %mcost, align 4
  %855 = load i32, i32* %min_mcost.addr, align 4
  %856 = load i32, i32* %cand_x, align 4
  %857 = load i32, i32* %cand_y, align 4
  %call921 = call i32 @PartCalMad(i16* %848, i16** %849, i16* (i32, i16*, i32, i32, i32, i32)* %850, i32 %851, i32 %852, i32 %853, i32 %854, i32 %855, i32 %856, i32 %857)
  store i32 %call921, i32* %mcost, align 4
  %858 = load i32, i32* %mcost, align 4
  %859 = load i32**, i32*** @McostState, align 8
  %860 = load i32, i32* %cand_y, align 4
  %861 = load i32, i32* %center_y, align 4
  %sub922 = sub nsw i32 %860, %861
  %862 = load i32, i32* %search_range.addr, align 4
  %add923 = add nsw i32 %sub922, %862
  %idxprom924 = sext i32 %add923 to i64
  %arrayidx925 = getelementptr inbounds i32*, i32** %859, i64 %idxprom924
  %863 = load i32*, i32** %arrayidx925, align 8
  %864 = load i32, i32* %cand_x, align 4
  %865 = load i32, i32* %center_x, align 4
  %sub926 = sub nsw i32 %864, %865
  %866 = load i32, i32* %search_range.addr, align 4
  %add927 = add nsw i32 %sub926, %866
  %idxprom928 = sext i32 %add927 to i64
  %arrayidx929 = getelementptr inbounds i32, i32* %863, i64 %idxprom928
  store i32 %858, i32* %arrayidx929, align 4
  %867 = load i32, i32* %mcost, align 4
  %868 = load i32, i32* %min_mcost.addr, align 4
  %cmp930 = icmp slt i32 %867, %868
  br i1 %cmp930, label %if.then932, label %if.end933

if.then932:                                       ; preds = %if.then909
  %869 = load i32, i32* %cand_x, align 4
  store i32 %869, i32* %best_x, align 4
  %870 = load i32, i32* %cand_y, align 4
  store i32 %870, i32* %best_y, align 4
  %871 = load i32, i32* %mcost, align 4
  store i32 %871, i32* %min_mcost.addr, align 4
  br label %if.end933

if.end933:                                        ; preds = %if.then932, %if.then909
  br label %if.end934

if.end934:                                        ; preds = %if.end933, %if.then899
  br label %if.end935

if.end935:                                        ; preds = %if.end934, %land.lhs.true894, %if.end888
  br label %for.inc936

for.inc936:                                       ; preds = %if.end935
  %872 = load i32, i32* %i, align 4
  %inc937 = add nsw i32 %872, 1
  store i32 %inc937, i32* %i, align 4
  br label %for.cond835

for.end938:                                       ; preds = %for.cond835
  %873 = load i16, i16* %ref.addr, align 2
  %conv939 = sext i16 %873 to i32
  %cmp940 = icmp sgt i32 %conv939, 0
  br i1 %cmp940, label %if.then942, label %if.else960

if.then942:                                       ; preds = %for.end938
  %874 = load i32, i32* %min_mcost.addr, align 4
  %875 = load i32, i32* @pred_SAD_ref, align 4
  %sub943 = sub nsw i32 %874, %875
  %conv944 = sitofp i32 %sub943 to float
  %876 = load i32, i32* @pred_SAD_ref, align 4
  %conv945 = sitofp i32 %876 to float
  %877 = load float, float* %betaThird, align 4
  %mul946 = fmul float %conv945, %877
  %cmp947 = fcmp olt float %conv944, %mul946
  br i1 %cmp947, label %if.then949, label %if.else950

if.then949:                                       ; preds = %if.then942
  br label %third_step

if.else950:                                       ; preds = %if.then942
  %878 = load i32, i32* %min_mcost.addr, align 4
  %879 = load i32, i32* @pred_SAD_ref, align 4
  %sub951 = sub nsw i32 %878, %879
  %conv952 = sitofp i32 %sub951 to float
  %880 = load i32, i32* @pred_SAD_ref, align 4
  %conv953 = sitofp i32 %880 to float
  %881 = load float, float* %betaSec, align 4
  %mul954 = fmul float %conv953, %881
  %cmp955 = fcmp olt float %conv952, %mul954
  br i1 %cmp955, label %if.then957, label %if.end958

if.then957:                                       ; preds = %if.else950
  br label %sec_step

if.end958:                                        ; preds = %if.else950
  br label %if.end959

if.end959:                                        ; preds = %if.end958
  br label %if.end1000

if.else960:                                       ; preds = %for.end938
  %882 = load i32, i32* %blocktype.addr, align 4
  %cmp961 = icmp sgt i32 %882, 1
  br i1 %cmp961, label %if.then963, label %if.else981

if.then963:                                       ; preds = %if.else960
  %883 = load i32, i32* %min_mcost.addr, align 4
  %884 = load i32, i32* @pred_SAD_uplayer, align 4
  %sub964 = sub nsw i32 %883, %884
  %conv965 = sitofp i32 %sub964 to float
  %885 = load i32, i32* @pred_SAD_uplayer, align 4
  %conv966 = sitofp i32 %885 to float
  %886 = load float, float* %betaThird, align 4
  %mul967 = fmul float %conv966, %886
  %cmp968 = fcmp olt float %conv965, %mul967
  br i1 %cmp968, label %if.then970, label %if.else971

if.then970:                                       ; preds = %if.then963
  br label %third_step

if.else971:                                       ; preds = %if.then963
  %887 = load i32, i32* %min_mcost.addr, align 4
  %888 = load i32, i32* @pred_SAD_uplayer, align 4
  %sub972 = sub nsw i32 %887, %888
  %conv973 = sitofp i32 %sub972 to float
  %889 = load i32, i32* @pred_SAD_uplayer, align 4
  %conv974 = sitofp i32 %889 to float
  %890 = load float, float* %betaSec, align 4
  %mul975 = fmul float %conv974, %890
  %cmp976 = fcmp olt float %conv973, %mul975
  br i1 %cmp976, label %if.then978, label %if.end979

if.then978:                                       ; preds = %if.else971
  br label %sec_step

if.end979:                                        ; preds = %if.else971
  br label %if.end980

if.end980:                                        ; preds = %if.end979
  br label %if.end999

if.else981:                                       ; preds = %if.else960
  %891 = load i32, i32* %min_mcost.addr, align 4
  %892 = load i32, i32* @pred_SAD_space, align 4
  %sub982 = sub nsw i32 %891, %892
  %conv983 = sitofp i32 %sub982 to float
  %893 = load i32, i32* @pred_SAD_space, align 4
  %conv984 = sitofp i32 %893 to float
  %894 = load float, float* %betaThird, align 4
  %mul985 = fmul float %conv984, %894
  %cmp986 = fcmp olt float %conv983, %mul985
  br i1 %cmp986, label %if.then988, label %if.else989

if.then988:                                       ; preds = %if.else981
  br label %third_step

if.else989:                                       ; preds = %if.else981
  %895 = load i32, i32* %min_mcost.addr, align 4
  %896 = load i32, i32* @pred_SAD_space, align 4
  %sub990 = sub nsw i32 %895, %896
  %conv991 = sitofp i32 %sub990 to float
  %897 = load i32, i32* @pred_SAD_space, align 4
  %conv992 = sitofp i32 %897 to float
  %898 = load float, float* %betaSec, align 4
  %mul993 = fmul float %conv992, %898
  %cmp994 = fcmp olt float %conv991, %mul993
  br i1 %cmp994, label %if.then996, label %if.end997

if.then996:                                       ; preds = %if.else989
  br label %sec_step

if.end997:                                        ; preds = %if.else989
  br label %if.end998

if.end998:                                        ; preds = %if.end997
  br label %if.end999

if.end999:                                        ; preds = %if.end998, %if.end980
  br label %if.end1000

if.end1000:                                       ; preds = %if.end999, %if.end959
  %899 = load i32, i32* %best_x, align 4
  store i32 %899, i32* %iXMinNow, align 4
  %900 = load i32, i32* %best_y, align 4
  store i32 %900, i32* %iYMinNow, align 4
  store i32 1, i32* %pos, align 4
  br label %for.cond1001

for.cond1001:                                     ; preds = %for.inc1057, %if.end1000
  %901 = load i32, i32* %pos, align 4
  %cmp1002 = icmp slt i32 %901, 25
  br i1 %cmp1002, label %for.body1004, label %for.end1059

for.body1004:                                     ; preds = %for.cond1001
  %902 = load i32, i32* %iXMinNow, align 4
  %903 = load i32*, i32** @spiral_search_x, align 8
  %904 = load i32, i32* %pos, align 4
  %idxprom1005 = sext i32 %904 to i64
  %arrayidx1006 = getelementptr inbounds i32, i32* %903, i64 %idxprom1005
  %905 = load i32, i32* %arrayidx1006, align 4
  %add1007 = add nsw i32 %902, %905
  store i32 %add1007, i32* %cand_x, align 4
  %906 = load i32, i32* %iYMinNow, align 4
  %907 = load i32*, i32** @spiral_search_y, align 8
  %908 = load i32, i32* %pos, align 4
  %idxprom1008 = sext i32 %908 to i64
  %arrayidx1009 = getelementptr inbounds i32, i32* %907, i64 %idxprom1008
  %909 = load i32, i32* %arrayidx1009, align 4
  %add1010 = add nsw i32 %906, %909
  store i32 %add1010, i32* %cand_y, align 4
  %910 = load i32, i32* %cand_x, align 4
  %911 = load i32, i32* %center_x, align 4
  %sub1011 = sub nsw i32 %910, %911
  %call1012 = call i32 @abs(i32 %sub1011) #6
  %912 = load i32, i32* %search_range.addr, align 4
  %cmp1013 = icmp sle i32 %call1012, %912
  br i1 %cmp1013, label %land.lhs.true1015, label %if.end1056

land.lhs.true1015:                                ; preds = %for.body1004
  %913 = load i32, i32* %cand_y, align 4
  %914 = load i32, i32* %center_y, align 4
  %sub1016 = sub nsw i32 %913, %914
  %call1017 = call i32 @abs(i32 %sub1016) #6
  %915 = load i32, i32* %search_range.addr, align 4
  %cmp1018 = icmp sle i32 %call1017, %915
  br i1 %cmp1018, label %if.then1020, label %if.end1056

if.then1020:                                      ; preds = %land.lhs.true1015
  %916 = load i32**, i32*** @McostState, align 8
  %917 = load i32, i32* %cand_y, align 4
  %918 = load i32, i32* %center_y, align 4
  %sub1021 = sub nsw i32 %917, %918
  %919 = load i32, i32* %search_range.addr, align 4
  %add1022 = add nsw i32 %sub1021, %919
  %idxprom1023 = sext i32 %add1022 to i64
  %arrayidx1024 = getelementptr inbounds i32*, i32** %916, i64 %idxprom1023
  %920 = load i32*, i32** %arrayidx1024, align 8
  %921 = load i32, i32* %cand_x, align 4
  %922 = load i32, i32* %center_x, align 4
  %sub1025 = sub nsw i32 %921, %922
  %923 = load i32, i32* %search_range.addr, align 4
  %add1026 = add nsw i32 %sub1025, %923
  %idxprom1027 = sext i32 %add1026 to i64
  %arrayidx1028 = getelementptr inbounds i32, i32* %920, i64 %idxprom1027
  %924 = load i32, i32* %arrayidx1028, align 4
  %tobool1029 = icmp ne i32 %924, 0
  br i1 %tobool1029, label %if.end1055, label %if.then1030

if.then1030:                                      ; preds = %if.then1020
  %925 = load i32, i32* %lambda_factor, align 4
  %926 = load i32*, i32** @mvbits, align 8
  %927 = load i32, i32* %cand_x, align 4
  %928 = load i32, i32* %mvshift, align 4
  %shl1031 = shl i32 %927, %928
  %929 = load i32, i32* %pred_x, align 4
  %sub1032 = sub nsw i32 %shl1031, %929
  %idxprom1033 = sext i32 %sub1032 to i64
  %arrayidx1034 = getelementptr inbounds i32, i32* %926, i64 %idxprom1033
  %930 = load i32, i32* %arrayidx1034, align 4
  %931 = load i32*, i32** @mvbits, align 8
  %932 = load i32, i32* %cand_y, align 4
  %933 = load i32, i32* %mvshift, align 4
  %shl1035 = shl i32 %932, %933
  %934 = load i32, i32* %pred_y, align 4
  %sub1036 = sub nsw i32 %shl1035, %934
  %idxprom1037 = sext i32 %sub1036 to i64
  %arrayidx1038 = getelementptr inbounds i32, i32* %931, i64 %idxprom1037
  %935 = load i32, i32* %arrayidx1038, align 4
  %add1039 = add nsw i32 %930, %935
  %mul1040 = mul nsw i32 %925, %add1039
  %shr1041 = ashr i32 %mul1040, 16
  store i32 %shr1041, i32* %mcost, align 4
  %936 = load i16*, i16** %ref_pic, align 8
  %937 = load i16**, i16*** %orig_pic.addr, align 8
  %938 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %939 = load i32, i32* %blocksize_y, align 4
  %940 = load i32, i32* %blocksize_x, align 4
  %941 = load i32, i32* %blocksize_x4, align 4
  %942 = load i32, i32* %mcost, align 4
  %943 = load i32, i32* %min_mcost.addr, align 4
  %944 = load i32, i32* %cand_x, align 4
  %945 = load i32, i32* %cand_y, align 4
  %call1042 = call i32 @PartCalMad(i16* %936, i16** %937, i16* (i32, i16*, i32, i32, i32, i32)* %938, i32 %939, i32 %940, i32 %941, i32 %942, i32 %943, i32 %944, i32 %945)
  store i32 %call1042, i32* %mcost, align 4
  %946 = load i32, i32* %mcost, align 4
  %947 = load i32**, i32*** @McostState, align 8
  %948 = load i32, i32* %cand_y, align 4
  %949 = load i32, i32* %center_y, align 4
  %sub1043 = sub nsw i32 %948, %949
  %950 = load i32, i32* %search_range.addr, align 4
  %add1044 = add nsw i32 %sub1043, %950
  %idxprom1045 = sext i32 %add1044 to i64
  %arrayidx1046 = getelementptr inbounds i32*, i32** %947, i64 %idxprom1045
  %951 = load i32*, i32** %arrayidx1046, align 8
  %952 = load i32, i32* %cand_x, align 4
  %953 = load i32, i32* %center_x, align 4
  %sub1047 = sub nsw i32 %952, %953
  %954 = load i32, i32* %search_range.addr, align 4
  %add1048 = add nsw i32 %sub1047, %954
  %idxprom1049 = sext i32 %add1048 to i64
  %arrayidx1050 = getelementptr inbounds i32, i32* %951, i64 %idxprom1049
  store i32 %946, i32* %arrayidx1050, align 4
  %955 = load i32, i32* %mcost, align 4
  %956 = load i32, i32* %min_mcost.addr, align 4
  %cmp1051 = icmp slt i32 %955, %956
  br i1 %cmp1051, label %if.then1053, label %if.end1054

if.then1053:                                      ; preds = %if.then1030
  %957 = load i32, i32* %cand_x, align 4
  store i32 %957, i32* %best_x, align 4
  %958 = load i32, i32* %cand_y, align 4
  store i32 %958, i32* %best_y, align 4
  %959 = load i32, i32* %mcost, align 4
  store i32 %959, i32* %min_mcost.addr, align 4
  br label %if.end1054

if.end1054:                                       ; preds = %if.then1053, %if.then1030
  br label %if.end1055

if.end1055:                                       ; preds = %if.end1054, %if.then1020
  br label %if.end1056

if.end1056:                                       ; preds = %if.end1055, %land.lhs.true1015, %for.body1004
  br label %for.inc1057

for.inc1057:                                      ; preds = %if.end1056
  %960 = load i32, i32* %pos, align 4
  %inc1058 = add nsw i32 %960, 1
  store i32 %inc1058, i32* %pos, align 4
  br label %for.cond1001

for.end1059:                                      ; preds = %for.cond1001
  %961 = load i16, i16* %ref.addr, align 2
  %conv1060 = sext i16 %961 to i32
  %cmp1061 = icmp sgt i32 %conv1060, 0
  br i1 %cmp1061, label %if.then1063, label %if.else1081

if.then1063:                                      ; preds = %for.end1059
  %962 = load i32, i32* %min_mcost.addr, align 4
  %963 = load i32, i32* @pred_SAD_ref, align 4
  %sub1064 = sub nsw i32 %962, %963
  %conv1065 = sitofp i32 %sub1064 to float
  %964 = load i32, i32* @pred_SAD_ref, align 4
  %conv1066 = sitofp i32 %964 to float
  %965 = load float, float* %betaThird, align 4
  %mul1067 = fmul float %conv1066, %965
  %cmp1068 = fcmp olt float %conv1065, %mul1067
  br i1 %cmp1068, label %if.then1070, label %if.else1071

if.then1070:                                      ; preds = %if.then1063
  br label %third_step

if.else1071:                                      ; preds = %if.then1063
  %966 = load i32, i32* %min_mcost.addr, align 4
  %967 = load i32, i32* @pred_SAD_ref, align 4
  %sub1072 = sub nsw i32 %966, %967
  %conv1073 = sitofp i32 %sub1072 to float
  %968 = load i32, i32* @pred_SAD_ref, align 4
  %conv1074 = sitofp i32 %968 to float
  %969 = load float, float* %betaSec, align 4
  %mul1075 = fmul float %conv1074, %969
  %cmp1076 = fcmp olt float %conv1073, %mul1075
  br i1 %cmp1076, label %if.then1078, label %if.end1079

if.then1078:                                      ; preds = %if.else1071
  br label %sec_step

if.end1079:                                       ; preds = %if.else1071
  br label %if.end1080

if.end1080:                                       ; preds = %if.end1079
  br label %if.end1121

if.else1081:                                      ; preds = %for.end1059
  %970 = load i32, i32* %blocktype.addr, align 4
  %cmp1082 = icmp sgt i32 %970, 1
  br i1 %cmp1082, label %if.then1084, label %if.else1102

if.then1084:                                      ; preds = %if.else1081
  %971 = load i32, i32* %min_mcost.addr, align 4
  %972 = load i32, i32* @pred_SAD_uplayer, align 4
  %sub1085 = sub nsw i32 %971, %972
  %conv1086 = sitofp i32 %sub1085 to float
  %973 = load i32, i32* @pred_SAD_uplayer, align 4
  %conv1087 = sitofp i32 %973 to float
  %974 = load float, float* %betaThird, align 4
  %mul1088 = fmul float %conv1087, %974
  %cmp1089 = fcmp olt float %conv1086, %mul1088
  br i1 %cmp1089, label %if.then1091, label %if.else1092

if.then1091:                                      ; preds = %if.then1084
  br label %third_step

if.else1092:                                      ; preds = %if.then1084
  %975 = load i32, i32* %min_mcost.addr, align 4
  %976 = load i32, i32* @pred_SAD_uplayer, align 4
  %sub1093 = sub nsw i32 %975, %976
  %conv1094 = sitofp i32 %sub1093 to float
  %977 = load i32, i32* @pred_SAD_uplayer, align 4
  %conv1095 = sitofp i32 %977 to float
  %978 = load float, float* %betaSec, align 4
  %mul1096 = fmul float %conv1095, %978
  %cmp1097 = fcmp olt float %conv1094, %mul1096
  br i1 %cmp1097, label %if.then1099, label %if.end1100

if.then1099:                                      ; preds = %if.else1092
  br label %sec_step

if.end1100:                                       ; preds = %if.else1092
  br label %if.end1101

if.end1101:                                       ; preds = %if.end1100
  br label %if.end1120

if.else1102:                                      ; preds = %if.else1081
  %979 = load i32, i32* %min_mcost.addr, align 4
  %980 = load i32, i32* @pred_SAD_space, align 4
  %sub1103 = sub nsw i32 %979, %980
  %conv1104 = sitofp i32 %sub1103 to float
  %981 = load i32, i32* @pred_SAD_space, align 4
  %conv1105 = sitofp i32 %981 to float
  %982 = load float, float* %betaThird, align 4
  %mul1106 = fmul float %conv1105, %982
  %cmp1107 = fcmp olt float %conv1104, %mul1106
  br i1 %cmp1107, label %if.then1109, label %if.else1110

if.then1109:                                      ; preds = %if.else1102
  br label %third_step

if.else1110:                                      ; preds = %if.else1102
  %983 = load i32, i32* %min_mcost.addr, align 4
  %984 = load i32, i32* @pred_SAD_space, align 4
  %sub1111 = sub nsw i32 %983, %984
  %conv1112 = sitofp i32 %sub1111 to float
  %985 = load i32, i32* @pred_SAD_space, align 4
  %conv1113 = sitofp i32 %985 to float
  %986 = load float, float* %betaSec, align 4
  %mul1114 = fmul float %conv1113, %986
  %cmp1115 = fcmp olt float %conv1112, %mul1114
  br i1 %cmp1115, label %if.then1117, label %if.end1118

if.then1117:                                      ; preds = %if.else1110
  br label %sec_step

if.end1118:                                       ; preds = %if.else1110
  br label %if.end1119

if.end1119:                                       ; preds = %if.end1118
  br label %if.end1120

if.end1120:                                       ; preds = %if.end1119, %if.end1101
  br label %if.end1121

if.end1121:                                       ; preds = %if.end1120, %if.end1080
  store i32 1, i32* %i, align 4
  br label %for.cond1122

for.cond1122:                                     ; preds = %for.inc1253, %if.end1121
  %987 = load i32, i32* %i, align 4
  %988 = load i32, i32* %search_range.addr, align 4
  %div1123 = sdiv i32 %988, 4
  %cmp1124 = icmp sle i32 %987, %div1123
  br i1 %cmp1124, label %for.body1126, label %for.end1255

for.body1126:                                     ; preds = %for.cond1122
  store i32 0, i32* %iAbort, align 4
  store i32 0, i32* %m, align 4
  br label %for.cond1127

for.cond1127:                                     ; preds = %for.inc1185, %for.body1126
  %989 = load i32, i32* %m, align 4
  %cmp1128 = icmp slt i32 %989, 16
  br i1 %cmp1128, label %for.body1130, label %for.end1187

for.body1130:                                     ; preds = %for.cond1127
  %990 = load i32, i32* %iXMinNow, align 4
  %991 = load i32, i32* %m, align 4
  %idxprom1131 = sext i32 %991 to i64
  %arrayidx1132 = getelementptr inbounds [16 x i32], [16 x i32]* @FastIntegerPelBlockMotionSearch.Big_Hexagon_x, i64 0, i64 %idxprom1131
  %992 = load i32, i32* %arrayidx1132, align 4
  %993 = load i32, i32* %i, align 4
  %mul1133 = mul nsw i32 %992, %993
  %add1134 = add nsw i32 %990, %mul1133
  store i32 %add1134, i32* %cand_x, align 4
  %994 = load i32, i32* %iYMinNow, align 4
  %995 = load i32, i32* %m, align 4
  %idxprom1135 = sext i32 %995 to i64
  %arrayidx1136 = getelementptr inbounds [16 x i32], [16 x i32]* @FastIntegerPelBlockMotionSearch.Big_Hexagon_y, i64 0, i64 %idxprom1135
  %996 = load i32, i32* %arrayidx1136, align 4
  %997 = load i32, i32* %i, align 4
  %mul1137 = mul nsw i32 %996, %997
  %add1138 = add nsw i32 %994, %mul1137
  store i32 %add1138, i32* %cand_y, align 4
  %998 = load i32, i32* %cand_x, align 4
  %999 = load i32, i32* %center_x, align 4
  %sub1139 = sub nsw i32 %998, %999
  %call1140 = call i32 @abs(i32 %sub1139) #6
  %1000 = load i32, i32* %search_range.addr, align 4
  %cmp1141 = icmp sle i32 %call1140, %1000
  br i1 %cmp1141, label %land.lhs.true1143, label %if.end1184

land.lhs.true1143:                                ; preds = %for.body1130
  %1001 = load i32, i32* %cand_y, align 4
  %1002 = load i32, i32* %center_y, align 4
  %sub1144 = sub nsw i32 %1001, %1002
  %call1145 = call i32 @abs(i32 %sub1144) #6
  %1003 = load i32, i32* %search_range.addr, align 4
  %cmp1146 = icmp sle i32 %call1145, %1003
  br i1 %cmp1146, label %if.then1148, label %if.end1184

if.then1148:                                      ; preds = %land.lhs.true1143
  %1004 = load i32**, i32*** @McostState, align 8
  %1005 = load i32, i32* %cand_y, align 4
  %1006 = load i32, i32* %center_y, align 4
  %sub1149 = sub nsw i32 %1005, %1006
  %1007 = load i32, i32* %search_range.addr, align 4
  %add1150 = add nsw i32 %sub1149, %1007
  %idxprom1151 = sext i32 %add1150 to i64
  %arrayidx1152 = getelementptr inbounds i32*, i32** %1004, i64 %idxprom1151
  %1008 = load i32*, i32** %arrayidx1152, align 8
  %1009 = load i32, i32* %cand_x, align 4
  %1010 = load i32, i32* %center_x, align 4
  %sub1153 = sub nsw i32 %1009, %1010
  %1011 = load i32, i32* %search_range.addr, align 4
  %add1154 = add nsw i32 %sub1153, %1011
  %idxprom1155 = sext i32 %add1154 to i64
  %arrayidx1156 = getelementptr inbounds i32, i32* %1008, i64 %idxprom1155
  %1012 = load i32, i32* %arrayidx1156, align 4
  %tobool1157 = icmp ne i32 %1012, 0
  br i1 %tobool1157, label %if.end1183, label %if.then1158

if.then1158:                                      ; preds = %if.then1148
  %1013 = load i32, i32* %lambda_factor, align 4
  %1014 = load i32*, i32** @mvbits, align 8
  %1015 = load i32, i32* %cand_x, align 4
  %1016 = load i32, i32* %mvshift, align 4
  %shl1159 = shl i32 %1015, %1016
  %1017 = load i32, i32* %pred_x, align 4
  %sub1160 = sub nsw i32 %shl1159, %1017
  %idxprom1161 = sext i32 %sub1160 to i64
  %arrayidx1162 = getelementptr inbounds i32, i32* %1014, i64 %idxprom1161
  %1018 = load i32, i32* %arrayidx1162, align 4
  %1019 = load i32*, i32** @mvbits, align 8
  %1020 = load i32, i32* %cand_y, align 4
  %1021 = load i32, i32* %mvshift, align 4
  %shl1163 = shl i32 %1020, %1021
  %1022 = load i32, i32* %pred_y, align 4
  %sub1164 = sub nsw i32 %shl1163, %1022
  %idxprom1165 = sext i32 %sub1164 to i64
  %arrayidx1166 = getelementptr inbounds i32, i32* %1019, i64 %idxprom1165
  %1023 = load i32, i32* %arrayidx1166, align 4
  %add1167 = add nsw i32 %1018, %1023
  %mul1168 = mul nsw i32 %1013, %add1167
  %shr1169 = ashr i32 %mul1168, 16
  store i32 %shr1169, i32* %mcost, align 4
  %1024 = load i16*, i16** %ref_pic, align 8
  %1025 = load i16**, i16*** %orig_pic.addr, align 8
  %1026 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %1027 = load i32, i32* %blocksize_y, align 4
  %1028 = load i32, i32* %blocksize_x, align 4
  %1029 = load i32, i32* %blocksize_x4, align 4
  %1030 = load i32, i32* %mcost, align 4
  %1031 = load i32, i32* %min_mcost.addr, align 4
  %1032 = load i32, i32* %cand_x, align 4
  %1033 = load i32, i32* %cand_y, align 4
  %call1170 = call i32 @PartCalMad(i16* %1024, i16** %1025, i16* (i32, i16*, i32, i32, i32, i32)* %1026, i32 %1027, i32 %1028, i32 %1029, i32 %1030, i32 %1031, i32 %1032, i32 %1033)
  store i32 %call1170, i32* %mcost, align 4
  %1034 = load i32, i32* %mcost, align 4
  %1035 = load i32**, i32*** @McostState, align 8
  %1036 = load i32, i32* %cand_y, align 4
  %1037 = load i32, i32* %center_y, align 4
  %sub1171 = sub nsw i32 %1036, %1037
  %1038 = load i32, i32* %search_range.addr, align 4
  %add1172 = add nsw i32 %sub1171, %1038
  %idxprom1173 = sext i32 %add1172 to i64
  %arrayidx1174 = getelementptr inbounds i32*, i32** %1035, i64 %idxprom1173
  %1039 = load i32*, i32** %arrayidx1174, align 8
  %1040 = load i32, i32* %cand_x, align 4
  %1041 = load i32, i32* %center_x, align 4
  %sub1175 = sub nsw i32 %1040, %1041
  %1042 = load i32, i32* %search_range.addr, align 4
  %add1176 = add nsw i32 %sub1175, %1042
  %idxprom1177 = sext i32 %add1176 to i64
  %arrayidx1178 = getelementptr inbounds i32, i32* %1039, i64 %idxprom1177
  store i32 %1034, i32* %arrayidx1178, align 4
  %1043 = load i32, i32* %mcost, align 4
  %1044 = load i32, i32* %min_mcost.addr, align 4
  %cmp1179 = icmp slt i32 %1043, %1044
  br i1 %cmp1179, label %if.then1181, label %if.end1182

if.then1181:                                      ; preds = %if.then1158
  %1045 = load i32, i32* %cand_x, align 4
  store i32 %1045, i32* %best_x, align 4
  %1046 = load i32, i32* %cand_y, align 4
  store i32 %1046, i32* %best_y, align 4
  %1047 = load i32, i32* %mcost, align 4
  store i32 %1047, i32* %min_mcost.addr, align 4
  store i32 1, i32* %iAbort, align 4
  br label %if.end1182

if.end1182:                                       ; preds = %if.then1181, %if.then1158
  br label %if.end1183

if.end1183:                                       ; preds = %if.end1182, %if.then1148
  br label %if.end1184

if.end1184:                                       ; preds = %if.end1183, %land.lhs.true1143, %for.body1130
  br label %for.inc1185

for.inc1185:                                      ; preds = %if.end1184
  %1048 = load i32, i32* %m, align 4
  %inc1186 = add nsw i32 %1048, 1
  store i32 %inc1186, i32* %m, align 4
  br label %for.cond1127

for.end1187:                                      ; preds = %for.cond1127
  %1049 = load i32, i32* %iAbort, align 4
  %tobool1188 = icmp ne i32 %1049, 0
  br i1 %tobool1188, label %if.then1189, label %if.end1252

if.then1189:                                      ; preds = %for.end1187
  %1050 = load i16, i16* %ref.addr, align 2
  %conv1190 = sext i16 %1050 to i32
  %cmp1191 = icmp sgt i32 %conv1190, 0
  br i1 %cmp1191, label %if.then1193, label %if.else1211

if.then1193:                                      ; preds = %if.then1189
  %1051 = load i32, i32* %min_mcost.addr, align 4
  %1052 = load i32, i32* @pred_SAD_ref, align 4
  %sub1194 = sub nsw i32 %1051, %1052
  %conv1195 = sitofp i32 %sub1194 to float
  %1053 = load i32, i32* @pred_SAD_ref, align 4
  %conv1196 = sitofp i32 %1053 to float
  %1054 = load float, float* %betaThird, align 4
  %mul1197 = fmul float %conv1196, %1054
  %cmp1198 = fcmp olt float %conv1195, %mul1197
  br i1 %cmp1198, label %if.then1200, label %if.else1201

if.then1200:                                      ; preds = %if.then1193
  br label %third_step

if.else1201:                                      ; preds = %if.then1193
  %1055 = load i32, i32* %min_mcost.addr, align 4
  %1056 = load i32, i32* @pred_SAD_ref, align 4
  %sub1202 = sub nsw i32 %1055, %1056
  %conv1203 = sitofp i32 %sub1202 to float
  %1057 = load i32, i32* @pred_SAD_ref, align 4
  %conv1204 = sitofp i32 %1057 to float
  %1058 = load float, float* %betaSec, align 4
  %mul1205 = fmul float %conv1204, %1058
  %cmp1206 = fcmp olt float %conv1203, %mul1205
  br i1 %cmp1206, label %if.then1208, label %if.end1209

if.then1208:                                      ; preds = %if.else1201
  br label %sec_step

if.end1209:                                       ; preds = %if.else1201
  br label %if.end1210

if.end1210:                                       ; preds = %if.end1209
  br label %if.end1251

if.else1211:                                      ; preds = %if.then1189
  %1059 = load i32, i32* %blocktype.addr, align 4
  %cmp1212 = icmp sgt i32 %1059, 1
  br i1 %cmp1212, label %if.then1214, label %if.else1232

if.then1214:                                      ; preds = %if.else1211
  %1060 = load i32, i32* %min_mcost.addr, align 4
  %1061 = load i32, i32* @pred_SAD_uplayer, align 4
  %sub1215 = sub nsw i32 %1060, %1061
  %conv1216 = sitofp i32 %sub1215 to float
  %1062 = load i32, i32* @pred_SAD_uplayer, align 4
  %conv1217 = sitofp i32 %1062 to float
  %1063 = load float, float* %betaThird, align 4
  %mul1218 = fmul float %conv1217, %1063
  %cmp1219 = fcmp olt float %conv1216, %mul1218
  br i1 %cmp1219, label %if.then1221, label %if.else1222

if.then1221:                                      ; preds = %if.then1214
  br label %third_step

if.else1222:                                      ; preds = %if.then1214
  %1064 = load i32, i32* %min_mcost.addr, align 4
  %1065 = load i32, i32* @pred_SAD_uplayer, align 4
  %sub1223 = sub nsw i32 %1064, %1065
  %conv1224 = sitofp i32 %sub1223 to float
  %1066 = load i32, i32* @pred_SAD_uplayer, align 4
  %conv1225 = sitofp i32 %1066 to float
  %1067 = load float, float* %betaSec, align 4
  %mul1226 = fmul float %conv1225, %1067
  %cmp1227 = fcmp olt float %conv1224, %mul1226
  br i1 %cmp1227, label %if.then1229, label %if.end1230

if.then1229:                                      ; preds = %if.else1222
  br label %sec_step

if.end1230:                                       ; preds = %if.else1222
  br label %if.end1231

if.end1231:                                       ; preds = %if.end1230
  br label %if.end1250

if.else1232:                                      ; preds = %if.else1211
  %1068 = load i32, i32* %min_mcost.addr, align 4
  %1069 = load i32, i32* @pred_SAD_space, align 4
  %sub1233 = sub nsw i32 %1068, %1069
  %conv1234 = sitofp i32 %sub1233 to float
  %1070 = load i32, i32* @pred_SAD_space, align 4
  %conv1235 = sitofp i32 %1070 to float
  %1071 = load float, float* %betaThird, align 4
  %mul1236 = fmul float %conv1235, %1071
  %cmp1237 = fcmp olt float %conv1234, %mul1236
  br i1 %cmp1237, label %if.then1239, label %if.else1240

if.then1239:                                      ; preds = %if.else1232
  br label %third_step

if.else1240:                                      ; preds = %if.else1232
  %1072 = load i32, i32* %min_mcost.addr, align 4
  %1073 = load i32, i32* @pred_SAD_space, align 4
  %sub1241 = sub nsw i32 %1072, %1073
  %conv1242 = sitofp i32 %sub1241 to float
  %1074 = load i32, i32* @pred_SAD_space, align 4
  %conv1243 = sitofp i32 %1074 to float
  %1075 = load float, float* %betaSec, align 4
  %mul1244 = fmul float %conv1243, %1075
  %cmp1245 = fcmp olt float %conv1242, %mul1244
  br i1 %cmp1245, label %if.then1247, label %if.end1248

if.then1247:                                      ; preds = %if.else1240
  br label %sec_step

if.end1248:                                       ; preds = %if.else1240
  br label %if.end1249

if.end1249:                                       ; preds = %if.end1248
  br label %if.end1250

if.end1250:                                       ; preds = %if.end1249, %if.end1231
  br label %if.end1251

if.end1251:                                       ; preds = %if.end1250, %if.end1210
  br label %if.end1252

if.end1252:                                       ; preds = %if.end1251, %for.end1187
  br label %for.inc1253

for.inc1253:                                      ; preds = %if.end1252
  %1076 = load i32, i32* %i, align 4
  %inc1254 = add nsw i32 %1076, 1
  store i32 %inc1254, i32* %i, align 4
  br label %for.cond1122

for.end1255:                                      ; preds = %for.cond1122
  br label %sec_step

sec_step:                                         ; preds = %for.end1255, %if.then1247, %if.then1229, %if.then1208, %if.then1117, %if.then1099, %if.then1078, %if.then996, %if.then978, %if.then957, %if.then729, %if.then722, %if.then704, %if.then683, %if.then389
  %1077 = load i32, i32* %best_x, align 4
  store i32 %1077, i32* %iXMinNow, align 4
  %1078 = load i32, i32* %best_y, align 4
  store i32 %1078, i32* %iYMinNow, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond1256

for.cond1256:                                     ; preds = %for.inc1322, %sec_step
  %1079 = load i32, i32* %i, align 4
  %1080 = load i32, i32* %search_range.addr, align 4
  %cmp1257 = icmp slt i32 %1079, %1080
  br i1 %cmp1257, label %for.body1259, label %for.end1324

for.body1259:                                     ; preds = %for.cond1256
  store i32 1, i32* %iAbort, align 4
  store i32 0, i32* %m, align 4
  br label %for.cond1260

for.cond1260:                                     ; preds = %for.inc1316, %for.body1259
  %1081 = load i32, i32* %m, align 4
  %cmp1261 = icmp slt i32 %1081, 6
  br i1 %cmp1261, label %for.body1263, label %for.end1318

for.body1263:                                     ; preds = %for.cond1260
  %1082 = load i32, i32* %iXMinNow, align 4
  %1083 = load i32, i32* %m, align 4
  %idxprom1264 = sext i32 %1083 to i64
  %arrayidx1265 = getelementptr inbounds [6 x i32], [6 x i32]* @FastIntegerPelBlockMotionSearch.Hexagon_x, i64 0, i64 %idxprom1264
  %1084 = load i32, i32* %arrayidx1265, align 4
  %add1266 = add nsw i32 %1082, %1084
  store i32 %add1266, i32* %cand_x, align 4
  %1085 = load i32, i32* %iYMinNow, align 4
  %1086 = load i32, i32* %m, align 4
  %idxprom1267 = sext i32 %1086 to i64
  %arrayidx1268 = getelementptr inbounds [6 x i32], [6 x i32]* @FastIntegerPelBlockMotionSearch.Hexagon_y, i64 0, i64 %idxprom1267
  %1087 = load i32, i32* %arrayidx1268, align 4
  %add1269 = add nsw i32 %1085, %1087
  store i32 %add1269, i32* %cand_y, align 4
  %1088 = load i32, i32* %cand_x, align 4
  %1089 = load i32, i32* %center_x, align 4
  %sub1270 = sub nsw i32 %1088, %1089
  %call1271 = call i32 @abs(i32 %sub1270) #6
  %1090 = load i32, i32* %search_range.addr, align 4
  %cmp1272 = icmp sle i32 %call1271, %1090
  br i1 %cmp1272, label %land.lhs.true1274, label %if.end1315

land.lhs.true1274:                                ; preds = %for.body1263
  %1091 = load i32, i32* %cand_y, align 4
  %1092 = load i32, i32* %center_y, align 4
  %sub1275 = sub nsw i32 %1091, %1092
  %call1276 = call i32 @abs(i32 %sub1275) #6
  %1093 = load i32, i32* %search_range.addr, align 4
  %cmp1277 = icmp sle i32 %call1276, %1093
  br i1 %cmp1277, label %if.then1279, label %if.end1315

if.then1279:                                      ; preds = %land.lhs.true1274
  %1094 = load i32**, i32*** @McostState, align 8
  %1095 = load i32, i32* %cand_y, align 4
  %1096 = load i32, i32* %center_y, align 4
  %sub1280 = sub nsw i32 %1095, %1096
  %1097 = load i32, i32* %search_range.addr, align 4
  %add1281 = add nsw i32 %sub1280, %1097
  %idxprom1282 = sext i32 %add1281 to i64
  %arrayidx1283 = getelementptr inbounds i32*, i32** %1094, i64 %idxprom1282
  %1098 = load i32*, i32** %arrayidx1283, align 8
  %1099 = load i32, i32* %cand_x, align 4
  %1100 = load i32, i32* %center_x, align 4
  %sub1284 = sub nsw i32 %1099, %1100
  %1101 = load i32, i32* %search_range.addr, align 4
  %add1285 = add nsw i32 %sub1284, %1101
  %idxprom1286 = sext i32 %add1285 to i64
  %arrayidx1287 = getelementptr inbounds i32, i32* %1098, i64 %idxprom1286
  %1102 = load i32, i32* %arrayidx1287, align 4
  %tobool1288 = icmp ne i32 %1102, 0
  br i1 %tobool1288, label %if.end1314, label %if.then1289

if.then1289:                                      ; preds = %if.then1279
  %1103 = load i32, i32* %lambda_factor, align 4
  %1104 = load i32*, i32** @mvbits, align 8
  %1105 = load i32, i32* %cand_x, align 4
  %1106 = load i32, i32* %mvshift, align 4
  %shl1290 = shl i32 %1105, %1106
  %1107 = load i32, i32* %pred_x, align 4
  %sub1291 = sub nsw i32 %shl1290, %1107
  %idxprom1292 = sext i32 %sub1291 to i64
  %arrayidx1293 = getelementptr inbounds i32, i32* %1104, i64 %idxprom1292
  %1108 = load i32, i32* %arrayidx1293, align 4
  %1109 = load i32*, i32** @mvbits, align 8
  %1110 = load i32, i32* %cand_y, align 4
  %1111 = load i32, i32* %mvshift, align 4
  %shl1294 = shl i32 %1110, %1111
  %1112 = load i32, i32* %pred_y, align 4
  %sub1295 = sub nsw i32 %shl1294, %1112
  %idxprom1296 = sext i32 %sub1295 to i64
  %arrayidx1297 = getelementptr inbounds i32, i32* %1109, i64 %idxprom1296
  %1113 = load i32, i32* %arrayidx1297, align 4
  %add1298 = add nsw i32 %1108, %1113
  %mul1299 = mul nsw i32 %1103, %add1298
  %shr1300 = ashr i32 %mul1299, 16
  store i32 %shr1300, i32* %mcost, align 4
  %1114 = load i16*, i16** %ref_pic, align 8
  %1115 = load i16**, i16*** %orig_pic.addr, align 8
  %1116 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %1117 = load i32, i32* %blocksize_y, align 4
  %1118 = load i32, i32* %blocksize_x, align 4
  %1119 = load i32, i32* %blocksize_x4, align 4
  %1120 = load i32, i32* %mcost, align 4
  %1121 = load i32, i32* %min_mcost.addr, align 4
  %1122 = load i32, i32* %cand_x, align 4
  %1123 = load i32, i32* %cand_y, align 4
  %call1301 = call i32 @PartCalMad(i16* %1114, i16** %1115, i16* (i32, i16*, i32, i32, i32, i32)* %1116, i32 %1117, i32 %1118, i32 %1119, i32 %1120, i32 %1121, i32 %1122, i32 %1123)
  store i32 %call1301, i32* %mcost, align 4
  %1124 = load i32, i32* %mcost, align 4
  %1125 = load i32**, i32*** @McostState, align 8
  %1126 = load i32, i32* %cand_y, align 4
  %1127 = load i32, i32* %center_y, align 4
  %sub1302 = sub nsw i32 %1126, %1127
  %1128 = load i32, i32* %search_range.addr, align 4
  %add1303 = add nsw i32 %sub1302, %1128
  %idxprom1304 = sext i32 %add1303 to i64
  %arrayidx1305 = getelementptr inbounds i32*, i32** %1125, i64 %idxprom1304
  %1129 = load i32*, i32** %arrayidx1305, align 8
  %1130 = load i32, i32* %cand_x, align 4
  %1131 = load i32, i32* %center_x, align 4
  %sub1306 = sub nsw i32 %1130, %1131
  %1132 = load i32, i32* %search_range.addr, align 4
  %add1307 = add nsw i32 %sub1306, %1132
  %idxprom1308 = sext i32 %add1307 to i64
  %arrayidx1309 = getelementptr inbounds i32, i32* %1129, i64 %idxprom1308
  store i32 %1124, i32* %arrayidx1309, align 4
  %1133 = load i32, i32* %mcost, align 4
  %1134 = load i32, i32* %min_mcost.addr, align 4
  %cmp1310 = icmp slt i32 %1133, %1134
  br i1 %cmp1310, label %if.then1312, label %if.end1313

if.then1312:                                      ; preds = %if.then1289
  %1135 = load i32, i32* %cand_x, align 4
  store i32 %1135, i32* %best_x, align 4
  %1136 = load i32, i32* %cand_y, align 4
  store i32 %1136, i32* %best_y, align 4
  %1137 = load i32, i32* %mcost, align 4
  store i32 %1137, i32* %min_mcost.addr, align 4
  store i32 0, i32* %iAbort, align 4
  br label %if.end1313

if.end1313:                                       ; preds = %if.then1312, %if.then1289
  br label %if.end1314

if.end1314:                                       ; preds = %if.end1313, %if.then1279
  br label %if.end1315

if.end1315:                                       ; preds = %if.end1314, %land.lhs.true1274, %for.body1263
  br label %for.inc1316

for.inc1316:                                      ; preds = %if.end1315
  %1138 = load i32, i32* %m, align 4
  %inc1317 = add nsw i32 %1138, 1
  store i32 %inc1317, i32* %m, align 4
  br label %for.cond1260

for.end1318:                                      ; preds = %for.cond1260
  %1139 = load i32, i32* %iAbort, align 4
  %tobool1319 = icmp ne i32 %1139, 0
  br i1 %tobool1319, label %if.then1320, label %if.end1321

if.then1320:                                      ; preds = %for.end1318
  br label %for.end1324

if.end1321:                                       ; preds = %for.end1318
  %1140 = load i32, i32* %best_x, align 4
  store i32 %1140, i32* %iXMinNow, align 4
  %1141 = load i32, i32* %best_y, align 4
  store i32 %1141, i32* %iYMinNow, align 4
  br label %for.inc1322

for.inc1322:                                      ; preds = %if.end1321
  %1142 = load i32, i32* %i, align 4
  %inc1323 = add nsw i32 %1142, 1
  store i32 %inc1323, i32* %i, align 4
  br label %for.cond1256

for.end1324:                                      ; preds = %if.then1320, %for.cond1256
  br label %third_step

third_step:                                       ; preds = %for.end1324, %if.then1239, %if.then1221, %if.then1200, %if.then1109, %if.then1091, %if.then1070, %if.then988, %if.then970, %if.then949, %if.then714, %if.then696, %if.then675, %if.then381
  %1143 = load i32, i32* %best_x, align 4
  store i32 %1143, i32* %iXMinNow, align 4
  %1144 = load i32, i32* %best_y, align 4
  store i32 %1144, i32* %iYMinNow, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond1325

for.cond1325:                                     ; preds = %for.inc1391, %third_step
  %1145 = load i32, i32* %i, align 4
  %1146 = load i32, i32* %search_range.addr, align 4
  %cmp1326 = icmp slt i32 %1145, %1146
  br i1 %cmp1326, label %for.body1328, label %for.end1393

for.body1328:                                     ; preds = %for.cond1325
  store i32 65536, i32* %iSADLayer, align 4
  store i32 1, i32* %iAbort, align 4
  store i32 0, i32* %m, align 4
  br label %for.cond1329

for.cond1329:                                     ; preds = %for.inc1385, %for.body1328
  %1147 = load i32, i32* %m, align 4
  %cmp1330 = icmp slt i32 %1147, 4
  br i1 %cmp1330, label %for.body1332, label %for.end1387

for.body1332:                                     ; preds = %for.cond1329
  %1148 = load i32, i32* %iXMinNow, align 4
  %1149 = load i32, i32* %m, align 4
  %idxprom1333 = sext i32 %1149 to i64
  %arrayidx1334 = getelementptr inbounds [4 x i32], [4 x i32]* @FastIntegerPelBlockMotionSearch.Diamond_x, i64 0, i64 %idxprom1333
  %1150 = load i32, i32* %arrayidx1334, align 4
  %add1335 = add nsw i32 %1148, %1150
  store i32 %add1335, i32* %cand_x, align 4
  %1151 = load i32, i32* %iYMinNow, align 4
  %1152 = load i32, i32* %m, align 4
  %idxprom1336 = sext i32 %1152 to i64
  %arrayidx1337 = getelementptr inbounds [4 x i32], [4 x i32]* @FastIntegerPelBlockMotionSearch.Diamond_y, i64 0, i64 %idxprom1336
  %1153 = load i32, i32* %arrayidx1337, align 4
  %add1338 = add nsw i32 %1151, %1153
  store i32 %add1338, i32* %cand_y, align 4
  %1154 = load i32, i32* %cand_x, align 4
  %1155 = load i32, i32* %center_x, align 4
  %sub1339 = sub nsw i32 %1154, %1155
  %call1340 = call i32 @abs(i32 %sub1339) #6
  %1156 = load i32, i32* %search_range.addr, align 4
  %cmp1341 = icmp sle i32 %call1340, %1156
  br i1 %cmp1341, label %land.lhs.true1343, label %if.end1384

land.lhs.true1343:                                ; preds = %for.body1332
  %1157 = load i32, i32* %cand_y, align 4
  %1158 = load i32, i32* %center_y, align 4
  %sub1344 = sub nsw i32 %1157, %1158
  %call1345 = call i32 @abs(i32 %sub1344) #6
  %1159 = load i32, i32* %search_range.addr, align 4
  %cmp1346 = icmp sle i32 %call1345, %1159
  br i1 %cmp1346, label %if.then1348, label %if.end1384

if.then1348:                                      ; preds = %land.lhs.true1343
  %1160 = load i32**, i32*** @McostState, align 8
  %1161 = load i32, i32* %cand_y, align 4
  %1162 = load i32, i32* %center_y, align 4
  %sub1349 = sub nsw i32 %1161, %1162
  %1163 = load i32, i32* %search_range.addr, align 4
  %add1350 = add nsw i32 %sub1349, %1163
  %idxprom1351 = sext i32 %add1350 to i64
  %arrayidx1352 = getelementptr inbounds i32*, i32** %1160, i64 %idxprom1351
  %1164 = load i32*, i32** %arrayidx1352, align 8
  %1165 = load i32, i32* %cand_x, align 4
  %1166 = load i32, i32* %center_x, align 4
  %sub1353 = sub nsw i32 %1165, %1166
  %1167 = load i32, i32* %search_range.addr, align 4
  %add1354 = add nsw i32 %sub1353, %1167
  %idxprom1355 = sext i32 %add1354 to i64
  %arrayidx1356 = getelementptr inbounds i32, i32* %1164, i64 %idxprom1355
  %1168 = load i32, i32* %arrayidx1356, align 4
  %tobool1357 = icmp ne i32 %1168, 0
  br i1 %tobool1357, label %if.end1383, label %if.then1358

if.then1358:                                      ; preds = %if.then1348
  %1169 = load i32, i32* %lambda_factor, align 4
  %1170 = load i32*, i32** @mvbits, align 8
  %1171 = load i32, i32* %cand_x, align 4
  %1172 = load i32, i32* %mvshift, align 4
  %shl1359 = shl i32 %1171, %1172
  %1173 = load i32, i32* %pred_x, align 4
  %sub1360 = sub nsw i32 %shl1359, %1173
  %idxprom1361 = sext i32 %sub1360 to i64
  %arrayidx1362 = getelementptr inbounds i32, i32* %1170, i64 %idxprom1361
  %1174 = load i32, i32* %arrayidx1362, align 4
  %1175 = load i32*, i32** @mvbits, align 8
  %1176 = load i32, i32* %cand_y, align 4
  %1177 = load i32, i32* %mvshift, align 4
  %shl1363 = shl i32 %1176, %1177
  %1178 = load i32, i32* %pred_y, align 4
  %sub1364 = sub nsw i32 %shl1363, %1178
  %idxprom1365 = sext i32 %sub1364 to i64
  %arrayidx1366 = getelementptr inbounds i32, i32* %1175, i64 %idxprom1365
  %1179 = load i32, i32* %arrayidx1366, align 4
  %add1367 = add nsw i32 %1174, %1179
  %mul1368 = mul nsw i32 %1169, %add1367
  %shr1369 = ashr i32 %mul1368, 16
  store i32 %shr1369, i32* %mcost, align 4
  %1180 = load i16*, i16** %ref_pic, align 8
  %1181 = load i16**, i16*** %orig_pic.addr, align 8
  %1182 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %1183 = load i32, i32* %blocksize_y, align 4
  %1184 = load i32, i32* %blocksize_x, align 4
  %1185 = load i32, i32* %blocksize_x4, align 4
  %1186 = load i32, i32* %mcost, align 4
  %1187 = load i32, i32* %min_mcost.addr, align 4
  %1188 = load i32, i32* %cand_x, align 4
  %1189 = load i32, i32* %cand_y, align 4
  %call1370 = call i32 @PartCalMad(i16* %1180, i16** %1181, i16* (i32, i16*, i32, i32, i32, i32)* %1182, i32 %1183, i32 %1184, i32 %1185, i32 %1186, i32 %1187, i32 %1188, i32 %1189)
  store i32 %call1370, i32* %mcost, align 4
  %1190 = load i32, i32* %mcost, align 4
  %1191 = load i32**, i32*** @McostState, align 8
  %1192 = load i32, i32* %cand_y, align 4
  %1193 = load i32, i32* %center_y, align 4
  %sub1371 = sub nsw i32 %1192, %1193
  %1194 = load i32, i32* %search_range.addr, align 4
  %add1372 = add nsw i32 %sub1371, %1194
  %idxprom1373 = sext i32 %add1372 to i64
  %arrayidx1374 = getelementptr inbounds i32*, i32** %1191, i64 %idxprom1373
  %1195 = load i32*, i32** %arrayidx1374, align 8
  %1196 = load i32, i32* %cand_x, align 4
  %1197 = load i32, i32* %center_x, align 4
  %sub1375 = sub nsw i32 %1196, %1197
  %1198 = load i32, i32* %search_range.addr, align 4
  %add1376 = add nsw i32 %sub1375, %1198
  %idxprom1377 = sext i32 %add1376 to i64
  %arrayidx1378 = getelementptr inbounds i32, i32* %1195, i64 %idxprom1377
  store i32 %1190, i32* %arrayidx1378, align 4
  %1199 = load i32, i32* %mcost, align 4
  %1200 = load i32, i32* %min_mcost.addr, align 4
  %cmp1379 = icmp slt i32 %1199, %1200
  br i1 %cmp1379, label %if.then1381, label %if.end1382

if.then1381:                                      ; preds = %if.then1358
  %1201 = load i32, i32* %cand_x, align 4
  store i32 %1201, i32* %best_x, align 4
  %1202 = load i32, i32* %cand_y, align 4
  store i32 %1202, i32* %best_y, align 4
  %1203 = load i32, i32* %mcost, align 4
  store i32 %1203, i32* %min_mcost.addr, align 4
  store i32 0, i32* %iAbort, align 4
  br label %if.end1382

if.end1382:                                       ; preds = %if.then1381, %if.then1358
  br label %if.end1383

if.end1383:                                       ; preds = %if.end1382, %if.then1348
  br label %if.end1384

if.end1384:                                       ; preds = %if.end1383, %land.lhs.true1343, %for.body1332
  br label %for.inc1385

for.inc1385:                                      ; preds = %if.end1384
  %1204 = load i32, i32* %m, align 4
  %inc1386 = add nsw i32 %1204, 1
  store i32 %inc1386, i32* %m, align 4
  br label %for.cond1329

for.end1387:                                      ; preds = %for.cond1329
  %1205 = load i32, i32* %iAbort, align 4
  %tobool1388 = icmp ne i32 %1205, 0
  br i1 %tobool1388, label %if.then1389, label %if.end1390

if.then1389:                                      ; preds = %for.end1387
  br label %for.end1393

if.end1390:                                       ; preds = %for.end1387
  %1206 = load i32, i32* %best_x, align 4
  store i32 %1206, i32* %iXMinNow, align 4
  %1207 = load i32, i32* %best_y, align 4
  store i32 %1207, i32* %iYMinNow, align 4
  br label %for.inc1391

for.inc1391:                                      ; preds = %if.end1390
  %1208 = load i32, i32* %i, align 4
  %inc1392 = add nsw i32 %1208, 1
  store i32 %inc1392, i32* %i, align 4
  br label %for.cond1325

for.end1393:                                      ; preds = %if.then1389, %for.cond1325
  %1209 = load i32, i32* %best_x, align 4
  %1210 = load i32, i32* %pic_pix_x.addr, align 4
  %sub1394 = sub nsw i32 %1209, %1210
  %conv1395 = trunc i32 %sub1394 to i16
  %1211 = load i16*, i16** %mv_x.addr, align 8
  store i16 %conv1395, i16* %1211, align 2
  %1212 = load i32, i32* %best_y, align 4
  %1213 = load i32, i32* %pic_pix_y.addr, align 4
  %sub1396 = sub nsw i32 %1212, %1213
  %conv1397 = trunc i32 %sub1396 to i16
  %1214 = load i16*, i16** %mv_y.addr, align 8
  store i16 %conv1397, i16* %1214, align 2
  %1215 = load i32, i32* %min_mcost.addr, align 4
  %1216 = load i32, i32* %canary
  %1217 = icmp eq i32 %1216, 717205320
  br i1 %1217, label %1218, label %func_exit

1218:                                             ; preds = %for.end1393, %func_exit
  ret i32 %1215

func_exit:                                        ; preds = %for.end1393
  call void @detect_breach()
  br label %1218
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @get_mem_mincost.10(i32****** %mv) #0 {
entry:
  %i = alloca i32, align 4
  %k = alloca i32, align 4
  %canary = alloca i32
  store i32 1778589313, i32* %canary
  %l = alloca i32, align 4
  %mv.addr = alloca i32******, align 8
  %j = alloca i32, align 4
  store i32****** %mv, i32******* %mv.addr, align 8
  %0 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %width = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %0, i32 0, i32 13
  %1 = load i32, i32* %width, align 4
  %div = sdiv i32 %1, 4
  %conv = sext i32 %div to i64
  %call = call noalias i8* @calloc(i64 %conv, i64 8) #5
  %2 = bitcast i8* %call to i32*****
  %3 = load i32******, i32******* %mv.addr, align 8
  store i32***** %2, i32****** %3, align 8
  %cmp = icmp eq i32***** %2, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @no_mem_exit(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc68, %if.end
  %4 = load i32, i32* %i, align 4
  %5 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %width2 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %5, i32 0, i32 13
  %6 = load i32, i32* %width2, align 4
  %div3 = sdiv i32 %6, 4
  %cmp4 = icmp slt i32 %4, %div3
  br i1 %cmp4, label %for.body, label %for.end70

for.body:                                         ; preds = %for.cond
  %7 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %7, i32 0, i32 15
  %8 = load i32, i32* %height, align 4
  %div6 = sdiv i32 %8, 4
  %conv7 = sext i32 %div6 to i64
  %call8 = call noalias i8* @calloc(i64 %conv7, i64 8) #5
  %9 = bitcast i8* %call8 to i32****
  %10 = load i32******, i32******* %mv.addr, align 8
  %11 = load i32*****, i32****** %10, align 8
  %12 = load i32, i32* %i, align 4
  %idxprom = sext i32 %12 to i64
  %arrayidx = getelementptr inbounds i32****, i32***** %11, i64 %idxprom
  store i32**** %9, i32***** %arrayidx, align 8
  %cmp9 = icmp eq i32**** %9, null
  br i1 %cmp9, label %if.then11, label %if.end12

if.then11:                                        ; preds = %for.body
  call void @no_mem_exit(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %if.end12

if.end12:                                         ; preds = %if.then11, %for.body
  store i32 0, i32* %j, align 4
  br label %for.cond13

for.cond13:                                       ; preds = %for.inc65, %if.end12
  %13 = load i32, i32* %j, align 4
  %14 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height14 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %14, i32 0, i32 15
  %15 = load i32, i32* %height14, align 4
  %div15 = sdiv i32 %15, 4
  %cmp16 = icmp slt i32 %13, %div15
  br i1 %cmp16, label %for.body18, label %for.end67

for.body18:                                       ; preds = %for.cond13
  %16 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %max_num_references = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %16, i32 0, i32 9
  %17 = load i32, i32* %max_num_references, align 4
  %conv19 = sext i32 %17 to i64
  %call20 = call noalias i8* @calloc(i64 %conv19, i64 8) #5
  %18 = bitcast i8* %call20 to i32***
  %19 = load i32******, i32******* %mv.addr, align 8
  %20 = load i32*****, i32****** %19, align 8
  %21 = load i32, i32* %i, align 4
  %idxprom21 = sext i32 %21 to i64
  %arrayidx22 = getelementptr inbounds i32****, i32***** %20, i64 %idxprom21
  %22 = load i32****, i32***** %arrayidx22, align 8
  %23 = load i32, i32* %j, align 4
  %idxprom23 = sext i32 %23 to i64
  %arrayidx24 = getelementptr inbounds i32***, i32**** %22, i64 %idxprom23
  store i32*** %18, i32**** %arrayidx24, align 8
  %cmp25 = icmp eq i32*** %18, null
  br i1 %cmp25, label %if.then27, label %if.end28

if.then27:                                        ; preds = %for.body18
  call void @no_mem_exit(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %if.end28

if.end28:                                         ; preds = %if.then27, %for.body18
  store i32 0, i32* %k, align 4
  br label %for.cond29

for.cond29:                                       ; preds = %for.inc62, %if.end28
  %24 = load i32, i32* %k, align 4
  %25 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %max_num_references30 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %25, i32 0, i32 9
  %26 = load i32, i32* %max_num_references30, align 4
  %cmp31 = icmp slt i32 %24, %26
  br i1 %cmp31, label %for.body33, label %for.end64

for.body33:                                       ; preds = %for.cond29
  %call34 = call noalias i8* @calloc(i64 9, i64 8) #5
  %27 = bitcast i8* %call34 to i32**
  %28 = load i32******, i32******* %mv.addr, align 8
  %29 = load i32*****, i32****** %28, align 8
  %30 = load i32, i32* %i, align 4
  %idxprom35 = sext i32 %30 to i64
  %arrayidx36 = getelementptr inbounds i32****, i32***** %29, i64 %idxprom35
  %31 = load i32****, i32***** %arrayidx36, align 8
  %32 = load i32, i32* %j, align 4
  %idxprom37 = sext i32 %32 to i64
  %arrayidx38 = getelementptr inbounds i32***, i32**** %31, i64 %idxprom37
  %33 = load i32***, i32**** %arrayidx38, align 8
  %34 = load i32, i32* %k, align 4
  %idxprom39 = sext i32 %34 to i64
  %arrayidx40 = getelementptr inbounds i32**, i32*** %33, i64 %idxprom39
  store i32** %27, i32*** %arrayidx40, align 8
  %cmp41 = icmp eq i32** %27, null
  br i1 %cmp41, label %if.then43, label %if.end44

if.then43:                                        ; preds = %for.body33
  call void @no_mem_exit(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %if.end44

if.end44:                                         ; preds = %if.then43, %for.body33
  store i32 0, i32* %l, align 4
  br label %for.cond45

for.cond45:                                       ; preds = %for.inc, %if.end44
  %35 = load i32, i32* %l, align 4
  %cmp46 = icmp slt i32 %35, 9
  br i1 %cmp46, label %for.body48, label %for.end

for.body48:                                       ; preds = %for.cond45
  %call49 = call noalias i8* @calloc(i64 3, i64 4) #5
  %36 = bitcast i8* %call49 to i32*
  %37 = load i32******, i32******* %mv.addr, align 8
  %38 = load i32*****, i32****** %37, align 8
  %39 = load i32, i32* %i, align 4
  %idxprom50 = sext i32 %39 to i64
  %arrayidx51 = getelementptr inbounds i32****, i32***** %38, i64 %idxprom50
  %40 = load i32****, i32***** %arrayidx51, align 8
  %41 = load i32, i32* %j, align 4
  %idxprom52 = sext i32 %41 to i64
  %arrayidx53 = getelementptr inbounds i32***, i32**** %40, i64 %idxprom52
  %42 = load i32***, i32**** %arrayidx53, align 8
  %43 = load i32, i32* %k, align 4
  %idxprom54 = sext i32 %43 to i64
  %arrayidx55 = getelementptr inbounds i32**, i32*** %42, i64 %idxprom54
  %44 = load i32**, i32*** %arrayidx55, align 8
  %45 = load i32, i32* %l, align 4
  %idxprom56 = sext i32 %45 to i64
  %arrayidx57 = getelementptr inbounds i32*, i32** %44, i64 %idxprom56
  store i32* %36, i32** %arrayidx57, align 8
  %cmp58 = icmp eq i32* %36, null
  br i1 %cmp58, label %if.then60, label %if.end61

if.then60:                                        ; preds = %for.body48
  call void @no_mem_exit(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %if.end61

if.end61:                                         ; preds = %if.then60, %for.body48
  br label %for.inc

for.inc:                                          ; preds = %if.end61
  %46 = load i32, i32* %l, align 4
  %inc = add nsw i32 %46, 1
  store i32 %inc, i32* %l, align 4
  br label %for.cond45

for.end:                                          ; preds = %for.cond45
  br label %for.inc62

for.inc62:                                        ; preds = %for.end
  %47 = load i32, i32* %k, align 4
  %inc63 = add nsw i32 %47, 1
  store i32 %inc63, i32* %k, align 4
  br label %for.cond29

for.end64:                                        ; preds = %for.cond29
  br label %for.inc65

for.inc65:                                        ; preds = %for.end64
  %48 = load i32, i32* %j, align 4
  %inc66 = add nsw i32 %48, 1
  store i32 %inc66, i32* %j, align 4
  br label %for.cond13

for.end67:                                        ; preds = %for.cond13
  br label %for.inc68

for.inc68:                                        ; preds = %for.end67
  %49 = load i32, i32* %i, align 4
  %inc69 = add nsw i32 %49, 1
  store i32 %inc69, i32* %i, align 4
  br label %for.cond

for.end70:                                        ; preds = %for.cond
  %50 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %width71 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %50, i32 0, i32 13
  %51 = load i32, i32* %width71, align 4
  %div72 = sdiv i32 %51, 4
  %52 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height73 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %52, i32 0, i32 15
  %53 = load i32, i32* %height73, align 4
  %mul = mul nsw i32 %div72, %53
  %div74 = sdiv i32 %mul, 4
  %54 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %max_num_references75 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %54, i32 0, i32 9
  %55 = load i32, i32* %max_num_references75, align 4
  %mul76 = mul nsw i32 %div74, %55
  %mul77 = mul nsw i32 %mul76, 9
  %mul78 = mul nsw i32 %mul77, 3
  %conv79 = sext i32 %mul78 to i64
  %mul80 = mul i64 %conv79, 4
  %conv81 = trunc i64 %mul80 to i32
  %56 = load i32, i32* %canary
  %57 = icmp eq i32 %56, 1778589313
  br i1 %57, label %58, label %func_exit

58:                                               ; preds = %for.end70, %func_exit
  ret i32 %conv81

func_exit:                                        ; preds = %for.end70
  call void @detect_breach()
  br label %58
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @FastSubPelBlockMotionSearch.11(i16** %orig_pic, i16 signext %ref, i32 %list, i32 %pic_pix_x, i32 %pic_pix_y, i32 %blocktype, i16 signext %pred_mv_x, i16 signext %pred_mv_y, i16* %mv_x, i16* %mv_y, i32 %search_pos2, i32 %search_pos4, i32 %min_mcost, double %lambda, i32 %useABT) #0 {
entry:
  %i = alloca i32, align 4
  %iCurrSearchRange = alloca i32, align 4
  %useABT.addr = alloca i32, align 4
  %pic4_pix_y = alloca i32, align 4
  %pred_frac_mv_y = alloca i32, align 4
  %orig_pic.addr = alloca i16**, align 8
  %search_range_dynamic = alloca i32, align 4
  %blocksize_x = alloca i32, align 4
  %max_pos_x4 = alloca i32, align 4
  %currmv_x = alloca i32, align 4
  %mv_x.addr = alloca i16*, align 8
  %pred_frac_up_mv_y = alloca i32, align 4
  %min_mcost.addr = alloca i32, align 4
  %search_pos4.addr = alloca i32, align 4
  %mv_shift = alloca i32, align 4
  %blocktype.addr = alloca i32, align 4
  %mcost = alloca i32, align 4
  %m = alloca i32, align 4
  %iSADLayer = alloca i32, align 4
  %canary = alloca i32
  store i32 1945131302, i32* %canary
  %pred_frac_mv_x = alloca i32, align 4
  %iXMinNow = alloca i32, align 4
  %iYMinNow = alloca i32, align 4
  %blocksize_y = alloca i32, align 4
  %max_pos_y4 = alloca i32, align 4
  %pred_mv_x.addr = alloca i16, align 2
  %lambda_factor = alloca i32, align 4
  %search_pos2.addr = alloca i32, align 4
  %pic4_pix_x = alloca i32, align 4
  %mv_cost = alloca i32, align 4
  %mv_y.addr = alloca i16*, align 8
  %pred_frac_up_mv_x = alloca i32, align 4
  %pic_pix_y.addr = alloca i32, align 4
  %lambda.addr = alloca double, align 8
  %abort_search = alloca i32, align 4
  %list_offset = alloca i32, align 4
  %pred_mv_y.addr = alloca i16, align 2
  %cand_mv_x = alloca i32, align 4
  %list.addr = alloca i32, align 4
  %currmv_y = alloca i32, align 4
  %ref_picture = alloca %struct.storable_picture*, align 8
  %cand_mv_y = alloca i32, align 4
  %pic_pix_x.addr = alloca i32, align 4
  %ref.addr = alloca i16, align 2
  store i16** %orig_pic, i16*** %orig_pic.addr, align 8
  store i16 %ref, i16* %ref.addr, align 2
  store i32 %list, i32* %list.addr, align 4
  store i32 %pic_pix_x, i32* %pic_pix_x.addr, align 4
  store i32 %pic_pix_y, i32* %pic_pix_y.addr, align 4
  store i32 %blocktype, i32* %blocktype.addr, align 4
  store i16 %pred_mv_x, i16* %pred_mv_x.addr, align 2
  store i16 %pred_mv_y, i16* %pred_mv_y.addr, align 2
  store i16* %mv_x, i16** %mv_x.addr, align 8
  store i16* %mv_y, i16** %mv_y.addr, align 8
  store i32 %search_pos2, i32* %search_pos2.addr, align 4
  store i32 %search_pos4, i32* %search_pos4.addr, align 4
  store i32 %min_mcost, i32* %min_mcost.addr, align 4
  store double %lambda, double* %lambda.addr, align 8
  store i32 %useABT, i32* %useABT.addr, align 4
  %0 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %MbaffFrameFlag = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %0, i32 0, i32 90
  %1 = load i32, i32* %MbaffFrameFlag, align 8
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %mb_data = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %2, i32 0, i32 51
  %3 = load %struct.macroblock*, %struct.macroblock** %mb_data, align 8
  %4 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %current_mb_nr = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %4, i32 0, i32 3
  %5 = load i32, i32* %current_mb_nr, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 %idxprom
  %mb_field = getelementptr inbounds %struct.macroblock, %struct.macroblock* %arrayidx, i32 0, i32 22
  %6 = load i32, i32* %mb_field, align 4
  %tobool1 = icmp ne i32 %6, 0
  br i1 %tobool1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %7 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %current_mb_nr2 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %7, i32 0, i32 3
  %8 = load i32, i32* %current_mb_nr2, align 4
  %rem = srem i32 %8, 2
  %tobool3 = icmp ne i32 %rem, 0
  %9 = zext i1 %tobool3 to i64
  %cond = select i1 %tobool3, i32 4, i32 2
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond4 = phi i32 [ %cond, %cond.true ], [ 0, %cond.false ]
  store i32 %cond4, i32* %list_offset, align 4
  %10 = load i32, i32* %list.addr, align 4
  %11 = load i32, i32* %list_offset, align 4
  %add = add nsw i32 %10, %11
  %idxprom5 = sext i32 %add to i64
  %arrayidx6 = getelementptr inbounds [6 x %struct.storable_picture**], [6 x %struct.storable_picture**]* @listX, i64 0, i64 %idxprom5
  %12 = load %struct.storable_picture**, %struct.storable_picture*** %arrayidx6, align 8
  %13 = load i16, i16* %ref.addr, align 2
  %idxprom7 = sext i16 %13 to i64
  %arrayidx8 = getelementptr inbounds %struct.storable_picture*, %struct.storable_picture** %12, i64 %idxprom7
  %14 = load %struct.storable_picture*, %struct.storable_picture** %arrayidx8, align 8
  store %struct.storable_picture* %14, %struct.storable_picture** %ref_picture, align 8
  %15 = load double, double* %lambda.addr, align 8
  %mul = fmul double 6.553600e+04, %15
  %add9 = fadd double %mul, 5.000000e-01
  %conv = fptosi double %add9 to i32
  store i32 %conv, i32* %lambda_factor, align 4
  store i32 0, i32* %mv_shift, align 4
  %16 = load %struct.InputParameters*, %struct.InputParameters** @input, align 8
  %blc_size = getelementptr inbounds %struct.InputParameters, %struct.InputParameters* %16, i32 0, i32 20
  %17 = load i32, i32* %blocktype.addr, align 4
  %idxprom10 = sext i32 %17 to i64
  %arrayidx11 = getelementptr inbounds [8 x [2 x i32]], [8 x [2 x i32]]* %blc_size, i64 0, i64 %idxprom10
  %arrayidx12 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx11, i64 0, i64 0
  %18 = load i32, i32* %arrayidx12, align 8
  store i32 %18, i32* %blocksize_x, align 4
  %19 = load %struct.InputParameters*, %struct.InputParameters** @input, align 8
  %blc_size13 = getelementptr inbounds %struct.InputParameters, %struct.InputParameters* %19, i32 0, i32 20
  %20 = load i32, i32* %blocktype.addr, align 4
  %idxprom14 = sext i32 %20 to i64
  %arrayidx15 = getelementptr inbounds [8 x [2 x i32]], [8 x [2 x i32]]* %blc_size13, i64 0, i64 %idxprom14
  %arrayidx16 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx15, i64 0, i64 1
  %21 = load i32, i32* %arrayidx16, align 4
  store i32 %21, i32* %blocksize_y, align 4
  %22 = load i32, i32* %pic_pix_x.addr, align 4
  %shl = shl i32 %22, 2
  store i32 %shl, i32* %pic4_pix_x, align 4
  %23 = load i32, i32* %pic_pix_y.addr, align 4
  %shl17 = shl i32 %23, 2
  store i32 %shl17, i32* %pic4_pix_y, align 4
  %24 = load %struct.storable_picture*, %struct.storable_picture** %ref_picture, align 8
  %size_x = getelementptr inbounds %struct.storable_picture, %struct.storable_picture* %24, i32 0, i32 18
  %25 = load i32, i32* %size_x, align 8
  %26 = load i32, i32* %blocksize_x, align 4
  %sub = sub nsw i32 %25, %26
  %add18 = add nsw i32 %sub, 1
  %shl19 = shl i32 %add18, 2
  store i32 %shl19, i32* %max_pos_x4, align 4
  %27 = load %struct.storable_picture*, %struct.storable_picture** %ref_picture, align 8
  %size_y = getelementptr inbounds %struct.storable_picture, %struct.storable_picture* %27, i32 0, i32 19
  %28 = load i32, i32* %size_y, align 4
  %29 = load i32, i32* %blocksize_y, align 4
  %sub20 = sub nsw i32 %28, %29
  %add21 = add nsw i32 %sub20, 1
  %shl22 = shl i32 %add21, 2
  store i32 %shl22, i32* %max_pos_y4, align 4
  store i32 0, i32* %currmv_x, align 4
  store i32 0, i32* %currmv_y, align 4
  %30 = load i16*, i16** %mv_x.addr, align 8
  %31 = load i16, i16* %30, align 2
  %conv23 = sext i16 %31 to i32
  %shl24 = shl i32 %conv23, 2
  %conv25 = trunc i32 %shl24 to i16
  store i16 %conv25, i16* %30, align 2
  %32 = load i16*, i16** %mv_y.addr, align 8
  %33 = load i16, i16* %32, align 2
  %conv26 = sext i16 %33 to i32
  %shl27 = shl i32 %conv26, 2
  %conv28 = trunc i32 %shl27 to i16
  store i16 %conv28, i16* %32, align 2
  %34 = load i32, i32* %pic4_pix_x, align 4
  %35 = load i16*, i16** %mv_x.addr, align 8
  %36 = load i16, i16* %35, align 2
  %conv29 = sext i16 %36 to i32
  %add30 = add nsw i32 %34, %conv29
  %cmp = icmp sgt i32 %add30, 1
  br i1 %cmp, label %land.lhs.true32, label %if.else

land.lhs.true32:                                  ; preds = %cond.end
  %37 = load i32, i32* %pic4_pix_x, align 4
  %38 = load i16*, i16** %mv_x.addr, align 8
  %39 = load i16, i16* %38, align 2
  %conv33 = sext i16 %39 to i32
  %add34 = add nsw i32 %37, %conv33
  %40 = load i32, i32* %max_pos_x4, align 4
  %sub35 = sub nsw i32 %40, 2
  %cmp36 = icmp slt i32 %add34, %sub35
  br i1 %cmp36, label %land.lhs.true38, label %if.else

land.lhs.true38:                                  ; preds = %land.lhs.true32
  %41 = load i32, i32* %pic4_pix_y, align 4
  %42 = load i16*, i16** %mv_y.addr, align 8
  %43 = load i16, i16* %42, align 2
  %conv39 = sext i16 %43 to i32
  %add40 = add nsw i32 %41, %conv39
  %cmp41 = icmp sgt i32 %add40, 1
  br i1 %cmp41, label %land.lhs.true43, label %if.else

land.lhs.true43:                                  ; preds = %land.lhs.true38
  %44 = load i32, i32* %pic4_pix_y, align 4
  %45 = load i16*, i16** %mv_y.addr, align 8
  %46 = load i16, i16* %45, align 2
  %conv44 = sext i16 %46 to i32
  %add45 = add nsw i32 %44, %conv44
  %47 = load i32, i32* %max_pos_y4, align 4
  %sub46 = sub nsw i32 %47, 2
  %cmp47 = icmp slt i32 %add45, %sub46
  br i1 %cmp47, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true43
  store i16 (i16**, i32, i32, i32, i32)* @FastPelY_14, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  br label %if.end

if.else:                                          ; preds = %land.lhs.true43, %land.lhs.true38, %land.lhs.true32, %cond.end
  store i16 (i16**, i32, i32, i32, i32)* @UMVPelY_14, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  store i32 3, i32* %search_range_dynamic, align 4
  %48 = load i16, i16* %pred_mv_x.addr, align 2
  %conv49 = sext i16 %48 to i32
  %49 = load i16*, i16** %mv_x.addr, align 8
  %50 = load i16, i16* %49, align 2
  %conv50 = sext i16 %50 to i32
  %sub51 = sub nsw i32 %conv49, %conv50
  %rem52 = srem i32 %sub51, 4
  store i32 %rem52, i32* %pred_frac_mv_x, align 4
  %51 = load i16, i16* %pred_mv_y.addr, align 2
  %conv53 = sext i16 %51 to i32
  %52 = load i16*, i16** %mv_y.addr, align 8
  %53 = load i16, i16* %52, align 2
  %conv54 = sext i16 %53 to i32
  %sub55 = sub nsw i32 %conv53, %conv54
  %rem56 = srem i32 %sub55, 4
  store i32 %rem56, i32* %pred_frac_mv_y, align 4
  %54 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @pred_MV_uplayer, i64 0, i64 0), align 4
  %55 = load i16*, i16** %mv_x.addr, align 8
  %56 = load i16, i16* %55, align 2
  %conv57 = sext i16 %56 to i32
  %sub58 = sub nsw i32 %54, %conv57
  %rem59 = srem i32 %sub58, 4
  store i32 %rem59, i32* %pred_frac_up_mv_x, align 4
  %57 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @pred_MV_uplayer, i64 0, i64 1), align 4
  %58 = load i16*, i16** %mv_y.addr, align 8
  %59 = load i16, i16* %58, align 2
  %conv60 = sext i16 %59 to i32
  %sub61 = sub nsw i32 %57, %conv60
  %rem62 = srem i32 %sub61, 4
  store i32 %rem62, i32* %pred_frac_up_mv_y, align 4
  %60 = load i8**, i8*** @SearchState, align 8
  %arrayidx63 = getelementptr inbounds i8*, i8** %60, i64 0
  %61 = load i8*, i8** %arrayidx63, align 8
  %62 = load i32, i32* %search_range_dynamic, align 4
  %mul64 = mul nsw i32 2, %62
  %add65 = add nsw i32 %mul64, 1
  %63 = load i32, i32* %search_range_dynamic, align 4
  %mul66 = mul nsw i32 2, %63
  %add67 = add nsw i32 %mul66, 1
  %mul68 = mul nsw i32 %add65, %add67
  %conv69 = sext i32 %mul68 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %61, i8 0, i64 %conv69, i1 false)
  %64 = load %struct.InputParameters*, %struct.InputParameters** @input, align 8
  %hadamard = getelementptr inbounds %struct.InputParameters, %struct.InputParameters* %64, i32 0, i32 6
  %65 = load i32, i32* %hadamard, align 8
  %tobool70 = icmp ne i32 %65, 0
  br i1 %tobool70, label %if.then71, label %if.else94

if.then71:                                        ; preds = %if.end
  %66 = load i16*, i16** %mv_x.addr, align 8
  %67 = load i16, i16* %66, align 2
  %conv72 = sext i16 %67 to i32
  store i32 %conv72, i32* %cand_mv_x, align 4
  %68 = load i16*, i16** %mv_y.addr, align 8
  %69 = load i16, i16* %68, align 2
  %conv73 = sext i16 %69 to i32
  store i32 %conv73, i32* %cand_mv_y, align 4
  %70 = load i32, i32* %lambda_factor, align 4
  %71 = load i32*, i32** @mvbits, align 8
  %72 = load i32, i32* %cand_mv_x, align 4
  %73 = load i32, i32* %mv_shift, align 4
  %shl74 = shl i32 %72, %73
  %74 = load i16, i16* %pred_mv_x.addr, align 2
  %conv75 = sext i16 %74 to i32
  %sub76 = sub nsw i32 %shl74, %conv75
  %idxprom77 = sext i32 %sub76 to i64
  %arrayidx78 = getelementptr inbounds i32, i32* %71, i64 %idxprom77
  %75 = load i32, i32* %arrayidx78, align 4
  %76 = load i32*, i32** @mvbits, align 8
  %77 = load i32, i32* %cand_mv_y, align 4
  %78 = load i32, i32* %mv_shift, align 4
  %shl79 = shl i32 %77, %78
  %79 = load i16, i16* %pred_mv_y.addr, align 2
  %conv80 = sext i16 %79 to i32
  %sub81 = sub nsw i32 %shl79, %conv80
  %idxprom82 = sext i32 %sub81 to i64
  %arrayidx83 = getelementptr inbounds i32, i32* %76, i64 %idxprom82
  %80 = load i32, i32* %arrayidx83, align 4
  %add84 = add nsw i32 %75, %80
  %mul85 = mul nsw i32 %70, %add84
  %shr = ashr i32 %mul85, 16
  store i32 %shr, i32* %mv_cost, align 4
  %81 = load i32, i32* %pic_pix_x.addr, align 4
  %82 = load i32, i32* %pic_pix_y.addr, align 4
  %83 = load i32, i32* %blocksize_x, align 4
  %84 = load i32, i32* %blocksize_y, align 4
  %85 = load i32, i32* %cand_mv_x, align 4
  %86 = load i32, i32* %cand_mv_y, align 4
  %87 = load %struct.storable_picture*, %struct.storable_picture** %ref_picture, align 8
  %88 = load i16**, i16*** %orig_pic.addr, align 8
  %89 = load i32, i32* %mv_cost, align 4
  %90 = load i32, i32* %min_mcost.addr, align 4
  %91 = load i32, i32* %useABT.addr, align 4
  %call = call i32 @AddUpSADQuarter(i32 %81, i32 %82, i32 %83, i32 %84, i32 %85, i32 %86, %struct.storable_picture* %87, i16** %88, i32 %89, i32 %90, i32 %91)
  store i32 %call, i32* %mcost, align 4
  %92 = load i8**, i8*** @SearchState, align 8
  %93 = load i32, i32* %search_range_dynamic, align 4
  %idxprom86 = sext i32 %93 to i64
  %arrayidx87 = getelementptr inbounds i8*, i8** %92, i64 %idxprom86
  %94 = load i8*, i8** %arrayidx87, align 8
  %95 = load i32, i32* %search_range_dynamic, align 4
  %idxprom88 = sext i32 %95 to i64
  %arrayidx89 = getelementptr inbounds i8, i8* %94, i64 %idxprom88
  store i8 1, i8* %arrayidx89, align 1
  %96 = load i32, i32* %mcost, align 4
  %97 = load i32, i32* %min_mcost.addr, align 4
  %cmp90 = icmp slt i32 %96, %97
  br i1 %cmp90, label %if.then92, label %if.end93

if.then92:                                        ; preds = %if.then71
  %98 = load i32, i32* %mcost, align 4
  store i32 %98, i32* %min_mcost.addr, align 4
  %99 = load i32, i32* %cand_mv_x, align 4
  store i32 %99, i32* %currmv_x, align 4
  %100 = load i32, i32* %cand_mv_y, align 4
  store i32 %100, i32* %currmv_y, align 4
  br label %if.end93

if.end93:                                         ; preds = %if.then92, %if.then71
  br label %if.end101

if.else94:                                        ; preds = %if.end
  %101 = load i8**, i8*** @SearchState, align 8
  %102 = load i32, i32* %search_range_dynamic, align 4
  %idxprom95 = sext i32 %102 to i64
  %arrayidx96 = getelementptr inbounds i8*, i8** %101, i64 %idxprom95
  %103 = load i8*, i8** %arrayidx96, align 8
  %104 = load i32, i32* %search_range_dynamic, align 4
  %idxprom97 = sext i32 %104 to i64
  %arrayidx98 = getelementptr inbounds i8, i8* %103, i64 %idxprom97
  store i8 1, i8* %arrayidx98, align 1
  %105 = load i16*, i16** %mv_x.addr, align 8
  %106 = load i16, i16* %105, align 2
  %conv99 = sext i16 %106 to i32
  store i32 %conv99, i32* %currmv_x, align 4
  %107 = load i16*, i16** %mv_y.addr, align 8
  %108 = load i16, i16* %107, align 2
  %conv100 = sext i16 %108 to i32
  store i32 %conv100, i32* %currmv_y, align 4
  br label %if.end101

if.end101:                                        ; preds = %if.else94, %if.end93
  %109 = load i32, i32* %pred_frac_mv_x, align 4
  %cmp102 = icmp ne i32 %109, 0
  br i1 %cmp102, label %if.then106, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end101
  %110 = load i32, i32* %pred_frac_mv_y, align 4
  %cmp104 = icmp ne i32 %110, 0
  br i1 %cmp104, label %if.then106, label %if.end139

if.then106:                                       ; preds = %lor.lhs.false, %if.end101
  %111 = load i16*, i16** %mv_x.addr, align 8
  %112 = load i16, i16* %111, align 2
  %conv107 = sext i16 %112 to i32
  %113 = load i32, i32* %pred_frac_mv_x, align 4
  %add108 = add nsw i32 %conv107, %113
  store i32 %add108, i32* %cand_mv_x, align 4
  %114 = load i16*, i16** %mv_y.addr, align 8
  %115 = load i16, i16* %114, align 2
  %conv109 = sext i16 %115 to i32
  %116 = load i32, i32* %pred_frac_mv_y, align 4
  %add110 = add nsw i32 %conv109, %116
  store i32 %add110, i32* %cand_mv_y, align 4
  %117 = load i32, i32* %lambda_factor, align 4
  %118 = load i32*, i32** @mvbits, align 8
  %119 = load i32, i32* %cand_mv_x, align 4
  %120 = load i32, i32* %mv_shift, align 4
  %shl111 = shl i32 %119, %120
  %121 = load i16, i16* %pred_mv_x.addr, align 2
  %conv112 = sext i16 %121 to i32
  %sub113 = sub nsw i32 %shl111, %conv112
  %idxprom114 = sext i32 %sub113 to i64
  %arrayidx115 = getelementptr inbounds i32, i32* %118, i64 %idxprom114
  %122 = load i32, i32* %arrayidx115, align 4
  %123 = load i32*, i32** @mvbits, align 8
  %124 = load i32, i32* %cand_mv_y, align 4
  %125 = load i32, i32* %mv_shift, align 4
  %shl116 = shl i32 %124, %125
  %126 = load i16, i16* %pred_mv_y.addr, align 2
  %conv117 = sext i16 %126 to i32
  %sub118 = sub nsw i32 %shl116, %conv117
  %idxprom119 = sext i32 %sub118 to i64
  %arrayidx120 = getelementptr inbounds i32, i32* %123, i64 %idxprom119
  %127 = load i32, i32* %arrayidx120, align 4
  %add121 = add nsw i32 %122, %127
  %mul122 = mul nsw i32 %117, %add121
  %shr123 = ashr i32 %mul122, 16
  store i32 %shr123, i32* %mv_cost, align 4
  %128 = load i32, i32* %pic_pix_x.addr, align 4
  %129 = load i32, i32* %pic_pix_y.addr, align 4
  %130 = load i32, i32* %blocksize_x, align 4
  %131 = load i32, i32* %blocksize_y, align 4
  %132 = load i32, i32* %cand_mv_x, align 4
  %133 = load i32, i32* %cand_mv_y, align 4
  %134 = load %struct.storable_picture*, %struct.storable_picture** %ref_picture, align 8
  %135 = load i16**, i16*** %orig_pic.addr, align 8
  %136 = load i32, i32* %mv_cost, align 4
  %137 = load i32, i32* %min_mcost.addr, align 4
  %138 = load i32, i32* %useABT.addr, align 4
  %call124 = call i32 @AddUpSADQuarter(i32 %128, i32 %129, i32 %130, i32 %131, i32 %132, i32 %133, %struct.storable_picture* %134, i16** %135, i32 %136, i32 %137, i32 %138)
  store i32 %call124, i32* %mcost, align 4
  %139 = load i8**, i8*** @SearchState, align 8
  %140 = load i32, i32* %cand_mv_y, align 4
  %141 = load i16*, i16** %mv_y.addr, align 8
  %142 = load i16, i16* %141, align 2
  %conv125 = sext i16 %142 to i32
  %sub126 = sub nsw i32 %140, %conv125
  %143 = load i32, i32* %search_range_dynamic, align 4
  %add127 = add nsw i32 %sub126, %143
  %idxprom128 = sext i32 %add127 to i64
  %arrayidx129 = getelementptr inbounds i8*, i8** %139, i64 %idxprom128
  %144 = load i8*, i8** %arrayidx129, align 8
  %145 = load i32, i32* %cand_mv_x, align 4
  %146 = load i16*, i16** %mv_x.addr, align 8
  %147 = load i16, i16* %146, align 2
  %conv130 = sext i16 %147 to i32
  %sub131 = sub nsw i32 %145, %conv130
  %148 = load i32, i32* %search_range_dynamic, align 4
  %add132 = add nsw i32 %sub131, %148
  %idxprom133 = sext i32 %add132 to i64
  %arrayidx134 = getelementptr inbounds i8, i8* %144, i64 %idxprom133
  store i8 1, i8* %arrayidx134, align 1
  %149 = load i32, i32* %mcost, align 4
  %150 = load i32, i32* %min_mcost.addr, align 4
  %cmp135 = icmp slt i32 %149, %150
  br i1 %cmp135, label %if.then137, label %if.end138

if.then137:                                       ; preds = %if.then106
  %151 = load i32, i32* %mcost, align 4
  store i32 %151, i32* %min_mcost.addr, align 4
  %152 = load i32, i32* %cand_mv_x, align 4
  store i32 %152, i32* %currmv_x, align 4
  %153 = load i32, i32* %cand_mv_y, align 4
  store i32 %153, i32* %currmv_y, align 4
  br label %if.end138

if.end138:                                        ; preds = %if.then137, %if.then106
  br label %if.end139

if.end139:                                        ; preds = %if.end138, %lor.lhs.false
  %154 = load i32, i32* %currmv_x, align 4
  store i32 %154, i32* %iXMinNow, align 4
  %155 = load i32, i32* %currmv_y, align 4
  store i32 %155, i32* %iYMinNow, align 4
  %156 = load i32, i32* %search_range_dynamic, align 4
  %mul140 = mul nsw i32 2, %156
  %add141 = add nsw i32 %mul140, 1
  store i32 %add141, i32* %iCurrSearchRange, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc211, %if.end139
  %157 = load i32, i32* %i, align 4
  %158 = load i32, i32* %iCurrSearchRange, align 4
  %cmp142 = icmp slt i32 %157, %158
  br i1 %cmp142, label %for.body, label %for.end213

for.body:                                         ; preds = %for.cond
  store i32 1, i32* %abort_search, align 4
  store i32 65536, i32* %iSADLayer, align 4
  store i32 0, i32* %m, align 4
  br label %for.cond144

for.cond144:                                      ; preds = %for.inc, %for.body
  %159 = load i32, i32* %m, align 4
  %cmp145 = icmp slt i32 %159, 4
  br i1 %cmp145, label %for.body147, label %for.end

for.body147:                                      ; preds = %for.cond144
  %160 = load i32, i32* %iXMinNow, align 4
  %161 = load i32, i32* %m, align 4
  %idxprom148 = sext i32 %161 to i64
  %arrayidx149 = getelementptr inbounds [4 x i32], [4 x i32]* @FastSubPelBlockMotionSearch.Diamond_x, i64 0, i64 %idxprom148
  %162 = load i32, i32* %arrayidx149, align 4
  %add150 = add nsw i32 %160, %162
  store i32 %add150, i32* %cand_mv_x, align 4
  %163 = load i32, i32* %iYMinNow, align 4
  %164 = load i32, i32* %m, align 4
  %idxprom151 = sext i32 %164 to i64
  %arrayidx152 = getelementptr inbounds [4 x i32], [4 x i32]* @FastSubPelBlockMotionSearch.Diamond_y, i64 0, i64 %idxprom151
  %165 = load i32, i32* %arrayidx152, align 4
  %add153 = add nsw i32 %163, %165
  store i32 %add153, i32* %cand_mv_y, align 4
  %166 = load i32, i32* %cand_mv_x, align 4
  %167 = load i16*, i16** %mv_x.addr, align 8
  %168 = load i16, i16* %167, align 2
  %conv154 = sext i16 %168 to i32
  %sub155 = sub nsw i32 %166, %conv154
  %call156 = call i32 @abs(i32 %sub155) #6
  %169 = load i32, i32* %search_range_dynamic, align 4
  %cmp157 = icmp sle i32 %call156, %169
  br i1 %cmp157, label %land.lhs.true159, label %if.end207

land.lhs.true159:                                 ; preds = %for.body147
  %170 = load i32, i32* %cand_mv_y, align 4
  %171 = load i16*, i16** %mv_y.addr, align 8
  %172 = load i16, i16* %171, align 2
  %conv160 = sext i16 %172 to i32
  %sub161 = sub nsw i32 %170, %conv160
  %call162 = call i32 @abs(i32 %sub161) #6
  %173 = load i32, i32* %search_range_dynamic, align 4
  %cmp163 = icmp sle i32 %call162, %173
  br i1 %cmp163, label %if.then165, label %if.end207

if.then165:                                       ; preds = %land.lhs.true159
  %174 = load i8**, i8*** @SearchState, align 8
  %175 = load i32, i32* %cand_mv_y, align 4
  %176 = load i16*, i16** %mv_y.addr, align 8
  %177 = load i16, i16* %176, align 2
  %conv166 = sext i16 %177 to i32
  %sub167 = sub nsw i32 %175, %conv166
  %178 = load i32, i32* %search_range_dynamic, align 4
  %add168 = add nsw i32 %sub167, %178
  %idxprom169 = sext i32 %add168 to i64
  %arrayidx170 = getelementptr inbounds i8*, i8** %174, i64 %idxprom169
  %179 = load i8*, i8** %arrayidx170, align 8
  %180 = load i32, i32* %cand_mv_x, align 4
  %181 = load i16*, i16** %mv_x.addr, align 8
  %182 = load i16, i16* %181, align 2
  %conv171 = sext i16 %182 to i32
  %sub172 = sub nsw i32 %180, %conv171
  %183 = load i32, i32* %search_range_dynamic, align 4
  %add173 = add nsw i32 %sub172, %183
  %idxprom174 = sext i32 %add173 to i64
  %arrayidx175 = getelementptr inbounds i8, i8* %179, i64 %idxprom174
  %184 = load i8, i8* %arrayidx175, align 1
  %tobool176 = icmp ne i8 %184, 0
  br i1 %tobool176, label %if.end206, label %if.then177

if.then177:                                       ; preds = %if.then165
  %185 = load i32, i32* %lambda_factor, align 4
  %186 = load i32*, i32** @mvbits, align 8
  %187 = load i32, i32* %cand_mv_x, align 4
  %188 = load i32, i32* %mv_shift, align 4
  %shl178 = shl i32 %187, %188
  %189 = load i16, i16* %pred_mv_x.addr, align 2
  %conv179 = sext i16 %189 to i32
  %sub180 = sub nsw i32 %shl178, %conv179
  %idxprom181 = sext i32 %sub180 to i64
  %arrayidx182 = getelementptr inbounds i32, i32* %186, i64 %idxprom181
  %190 = load i32, i32* %arrayidx182, align 4
  %191 = load i32*, i32** @mvbits, align 8
  %192 = load i32, i32* %cand_mv_y, align 4
  %193 = load i32, i32* %mv_shift, align 4
  %shl183 = shl i32 %192, %193
  %194 = load i16, i16* %pred_mv_y.addr, align 2
  %conv184 = sext i16 %194 to i32
  %sub185 = sub nsw i32 %shl183, %conv184
  %idxprom186 = sext i32 %sub185 to i64
  %arrayidx187 = getelementptr inbounds i32, i32* %191, i64 %idxprom186
  %195 = load i32, i32* %arrayidx187, align 4
  %add188 = add nsw i32 %190, %195
  %mul189 = mul nsw i32 %185, %add188
  %shr190 = ashr i32 %mul189, 16
  store i32 %shr190, i32* %mv_cost, align 4
  %196 = load i32, i32* %pic_pix_x.addr, align 4
  %197 = load i32, i32* %pic_pix_y.addr, align 4
  %198 = load i32, i32* %blocksize_x, align 4
  %199 = load i32, i32* %blocksize_y, align 4
  %200 = load i32, i32* %cand_mv_x, align 4
  %201 = load i32, i32* %cand_mv_y, align 4
  %202 = load %struct.storable_picture*, %struct.storable_picture** %ref_picture, align 8
  %203 = load i16**, i16*** %orig_pic.addr, align 8
  %204 = load i32, i32* %mv_cost, align 4
  %205 = load i32, i32* %min_mcost.addr, align 4
  %206 = load i32, i32* %useABT.addr, align 4
  %call191 = call i32 @AddUpSADQuarter(i32 %196, i32 %197, i32 %198, i32 %199, i32 %200, i32 %201, %struct.storable_picture* %202, i16** %203, i32 %204, i32 %205, i32 %206)
  store i32 %call191, i32* %mcost, align 4
  %207 = load i8**, i8*** @SearchState, align 8
  %208 = load i32, i32* %cand_mv_y, align 4
  %209 = load i16*, i16** %mv_y.addr, align 8
  %210 = load i16, i16* %209, align 2
  %conv192 = sext i16 %210 to i32
  %sub193 = sub nsw i32 %208, %conv192
  %211 = load i32, i32* %search_range_dynamic, align 4
  %add194 = add nsw i32 %sub193, %211
  %idxprom195 = sext i32 %add194 to i64
  %arrayidx196 = getelementptr inbounds i8*, i8** %207, i64 %idxprom195
  %212 = load i8*, i8** %arrayidx196, align 8
  %213 = load i32, i32* %cand_mv_x, align 4
  %214 = load i16*, i16** %mv_x.addr, align 8
  %215 = load i16, i16* %214, align 2
  %conv197 = sext i16 %215 to i32
  %sub198 = sub nsw i32 %213, %conv197
  %216 = load i32, i32* %search_range_dynamic, align 4
  %add199 = add nsw i32 %sub198, %216
  %idxprom200 = sext i32 %add199 to i64
  %arrayidx201 = getelementptr inbounds i8, i8* %212, i64 %idxprom200
  store i8 1, i8* %arrayidx201, align 1
  %217 = load i32, i32* %mcost, align 4
  %218 = load i32, i32* %min_mcost.addr, align 4
  %cmp202 = icmp slt i32 %217, %218
  br i1 %cmp202, label %if.then204, label %if.end205

if.then204:                                       ; preds = %if.then177
  %219 = load i32, i32* %mcost, align 4
  store i32 %219, i32* %min_mcost.addr, align 4
  %220 = load i32, i32* %cand_mv_x, align 4
  store i32 %220, i32* %currmv_x, align 4
  %221 = load i32, i32* %cand_mv_y, align 4
  store i32 %221, i32* %currmv_y, align 4
  store i32 0, i32* %abort_search, align 4
  br label %if.end205

if.end205:                                        ; preds = %if.then204, %if.then177
  br label %if.end206

if.end206:                                        ; preds = %if.end205, %if.then165
  br label %if.end207

if.end207:                                        ; preds = %if.end206, %land.lhs.true159, %for.body147
  br label %for.inc

for.inc:                                          ; preds = %if.end207
  %222 = load i32, i32* %m, align 4
  %inc = add nsw i32 %222, 1
  store i32 %inc, i32* %m, align 4
  br label %for.cond144

for.end:                                          ; preds = %for.cond144
  %223 = load i32, i32* %currmv_x, align 4
  store i32 %223, i32* %iXMinNow, align 4
  %224 = load i32, i32* %currmv_y, align 4
  store i32 %224, i32* %iYMinNow, align 4
  %225 = load i32, i32* %abort_search, align 4
  %tobool208 = icmp ne i32 %225, 0
  br i1 %tobool208, label %if.then209, label %if.end210

if.then209:                                       ; preds = %for.end
  br label %for.end213

if.end210:                                        ; preds = %for.end
  br label %for.inc211

for.inc211:                                       ; preds = %if.end210
  %226 = load i32, i32* %i, align 4
  %inc212 = add nsw i32 %226, 1
  store i32 %inc212, i32* %i, align 4
  br label %for.cond

for.end213:                                       ; preds = %if.then209, %for.cond
  %227 = load i32, i32* %currmv_x, align 4
  %conv214 = trunc i32 %227 to i16
  %228 = load i16*, i16** %mv_x.addr, align 8
  store i16 %conv214, i16* %228, align 2
  %229 = load i32, i32* %currmv_y, align 4
  %conv215 = trunc i32 %229 to i16
  %230 = load i16*, i16** %mv_y.addr, align 8
  store i16 %conv215, i16* %230, align 2
  %231 = load i32, i32* %min_mcost.addr, align 4
  %232 = load i32, i32* %canary
  %233 = icmp eq i32 %232, 1945131302
  br i1 %233, label %234, label %func_exit

234:                                              ; preds = %for.end213, %func_exit
  ret i32 %231

func_exit:                                        ; preds = %for.end213
  call void @detect_breach()
  br label %234
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @PartCalMad.12(i16* %ref_pic, i16** %orig_pic, i16* (i32, i16*, i32, i32, i32, i32)* %get_ref_line, i32 %blocksize_y, i32 %blocksize_x, i32 %blocksize_x4, i32 %mcost, i32 %min_mcost, i32 %cand_x, i32 %cand_y) #0 {
entry:
  %orig_pic.addr = alloca i16**, align 8
  %blocksize_x4.addr = alloca i32, align 4
  %get_ref_line.addr = alloca i16* (i32, i16*, i32, i32, i32, i32)*, align 8
  %cand_x.addr = alloca i32, align 4
  %blocksize_x.addr = alloca i32, align 4
  %y = alloca i32, align 4
  %ref_line = alloca i16*, align 8
  %ref_pic.addr = alloca i16*, align 8
  %x4 = alloca i32, align 4
  %mcost.addr = alloca i32, align 4
  %orig_line = alloca i16*, align 8
  %canary = alloca i32
  store i32 171830702, i32* %canary
  %height = alloca i32, align 4
  %min_mcost.addr = alloca i32, align 4
  %cand_y.addr = alloca i32, align 4
  %blocksize_y.addr = alloca i32, align 4
  store i16* %ref_pic, i16** %ref_pic.addr, align 8
  store i16** %orig_pic, i16*** %orig_pic.addr, align 8
  store i16* (i32, i16*, i32, i32, i32, i32)* %get_ref_line, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line.addr, align 8
  store i32 %blocksize_y, i32* %blocksize_y.addr, align 4
  store i32 %blocksize_x, i32* %blocksize_x.addr, align 4
  store i32 %blocksize_x4, i32* %blocksize_x4.addr, align 4
  store i32 %mcost, i32* %mcost.addr, align 4
  store i32 %min_mcost, i32* %min_mcost.addr, align 4
  store i32 %cand_x, i32* %cand_x.addr, align 4
  store i32 %cand_y, i32* %cand_y.addr, align 4
  %0 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %MbaffFrameFlag = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %0, i32 0, i32 90
  %1 = load i32, i32* %MbaffFrameFlag, align 8
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %mb_data = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %2, i32 0, i32 51
  %3 = load %struct.macroblock*, %struct.macroblock** %mb_data, align 8
  %4 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %current_mb_nr = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %4, i32 0, i32 3
  %5 = load i32, i32* %current_mb_nr, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 %idxprom
  %mb_field = getelementptr inbounds %struct.macroblock, %struct.macroblock* %arrayidx, i32 0, i32 22
  %6 = load i32, i32* %mb_field, align 4
  %tobool1 = icmp ne i32 %6, 0
  br i1 %tobool1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %7 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height2 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %7, i32 0, i32 15
  %8 = load i32, i32* %height2, align 4
  %div = sdiv i32 %8, 2
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %entry
  %9 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height3 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %9, i32 0, i32 15
  %10 = load i32, i32* %height3, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %div, %cond.true ], [ %10, %cond.false ]
  store i32 %cond, i32* %height, align 4
  store i32 0, i32* %y, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc40, %cond.end
  %11 = load i32, i32* %y, align 4
  %12 = load i32, i32* %blocksize_y.addr, align 4
  %cmp = icmp slt i32 %11, %12
  br i1 %cmp, label %for.body, label %for.end42

for.body:                                         ; preds = %for.cond
  %13 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line.addr, align 8
  %14 = load i32, i32* %blocksize_x.addr, align 4
  %15 = load i16*, i16** %ref_pic.addr, align 8
  %16 = load i32, i32* %cand_y.addr, align 4
  %17 = load i32, i32* %y, align 4
  %add = add nsw i32 %16, %17
  %18 = load i32, i32* %cand_x.addr, align 4
  %19 = load i32, i32* %height, align 4
  %20 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %width = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %20, i32 0, i32 13
  %21 = load i32, i32* %width, align 4
  %call = call i16* %13(i32 %14, i16* %15, i32 %add, i32 %18, i32 %19, i32 %21)
  store i16* %call, i16** %ref_line, align 8
  %22 = load i16**, i16*** %orig_pic.addr, align 8
  %23 = load i32, i32* %y, align 4
  %idxprom4 = sext i32 %23 to i64
  %arrayidx5 = getelementptr inbounds i16*, i16** %22, i64 %idxprom4
  %24 = load i16*, i16** %arrayidx5, align 8
  store i16* %24, i16** %orig_line, align 8
  store i32 0, i32* %x4, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc, %for.body
  %25 = load i32, i32* %x4, align 4
  %26 = load i32, i32* %blocksize_x4.addr, align 4
  %cmp7 = icmp slt i32 %25, %26
  br i1 %cmp7, label %for.body8, label %for.end

for.body8:                                        ; preds = %for.cond6
  %27 = load i32*, i32** @byte_abs, align 8
  %28 = load i16*, i16** %orig_line, align 8
  %incdec.ptr = getelementptr inbounds i16, i16* %28, i32 1
  store i16* %incdec.ptr, i16** %orig_line, align 8
  %29 = load i16, i16* %28, align 2
  %conv = zext i16 %29 to i32
  %30 = load i16*, i16** %ref_line, align 8
  %incdec.ptr9 = getelementptr inbounds i16, i16* %30, i32 1
  store i16* %incdec.ptr9, i16** %ref_line, align 8
  %31 = load i16, i16* %30, align 2
  %conv10 = zext i16 %31 to i32
  %sub = sub nsw i32 %conv, %conv10
  %idxprom11 = sext i32 %sub to i64
  %arrayidx12 = getelementptr inbounds i32, i32* %27, i64 %idxprom11
  %32 = load i32, i32* %arrayidx12, align 4
  %33 = load i32, i32* %mcost.addr, align 4
  %add13 = add nsw i32 %33, %32
  store i32 %add13, i32* %mcost.addr, align 4
  %34 = load i32*, i32** @byte_abs, align 8
  %35 = load i16*, i16** %orig_line, align 8
  %incdec.ptr14 = getelementptr inbounds i16, i16* %35, i32 1
  store i16* %incdec.ptr14, i16** %orig_line, align 8
  %36 = load i16, i16* %35, align 2
  %conv15 = zext i16 %36 to i32
  %37 = load i16*, i16** %ref_line, align 8
  %incdec.ptr16 = getelementptr inbounds i16, i16* %37, i32 1
  store i16* %incdec.ptr16, i16** %ref_line, align 8
  %38 = load i16, i16* %37, align 2
  %conv17 = zext i16 %38 to i32
  %sub18 = sub nsw i32 %conv15, %conv17
  %idxprom19 = sext i32 %sub18 to i64
  %arrayidx20 = getelementptr inbounds i32, i32* %34, i64 %idxprom19
  %39 = load i32, i32* %arrayidx20, align 4
  %40 = load i32, i32* %mcost.addr, align 4
  %add21 = add nsw i32 %40, %39
  store i32 %add21, i32* %mcost.addr, align 4
  %41 = load i32*, i32** @byte_abs, align 8
  %42 = load i16*, i16** %orig_line, align 8
  %incdec.ptr22 = getelementptr inbounds i16, i16* %42, i32 1
  store i16* %incdec.ptr22, i16** %orig_line, align 8
  %43 = load i16, i16* %42, align 2
  %conv23 = zext i16 %43 to i32
  %44 = load i16*, i16** %ref_line, align 8
  %incdec.ptr24 = getelementptr inbounds i16, i16* %44, i32 1
  store i16* %incdec.ptr24, i16** %ref_line, align 8
  %45 = load i16, i16* %44, align 2
  %conv25 = zext i16 %45 to i32
  %sub26 = sub nsw i32 %conv23, %conv25
  %idxprom27 = sext i32 %sub26 to i64
  %arrayidx28 = getelementptr inbounds i32, i32* %41, i64 %idxprom27
  %46 = load i32, i32* %arrayidx28, align 4
  %47 = load i32, i32* %mcost.addr, align 4
  %add29 = add nsw i32 %47, %46
  store i32 %add29, i32* %mcost.addr, align 4
  %48 = load i32*, i32** @byte_abs, align 8
  %49 = load i16*, i16** %orig_line, align 8
  %incdec.ptr30 = getelementptr inbounds i16, i16* %49, i32 1
  store i16* %incdec.ptr30, i16** %orig_line, align 8
  %50 = load i16, i16* %49, align 2
  %conv31 = zext i16 %50 to i32
  %51 = load i16*, i16** %ref_line, align 8
  %incdec.ptr32 = getelementptr inbounds i16, i16* %51, i32 1
  store i16* %incdec.ptr32, i16** %ref_line, align 8
  %52 = load i16, i16* %51, align 2
  %conv33 = zext i16 %52 to i32
  %sub34 = sub nsw i32 %conv31, %conv33
  %idxprom35 = sext i32 %sub34 to i64
  %arrayidx36 = getelementptr inbounds i32, i32* %48, i64 %idxprom35
  %53 = load i32, i32* %arrayidx36, align 4
  %54 = load i32, i32* %mcost.addr, align 4
  %add37 = add nsw i32 %54, %53
  store i32 %add37, i32* %mcost.addr, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body8
  %55 = load i32, i32* %x4, align 4
  %inc = add nsw i32 %55, 1
  store i32 %inc, i32* %x4, align 4
  br label %for.cond6

for.end:                                          ; preds = %for.cond6
  %56 = load i32, i32* %mcost.addr, align 4
  %57 = load i32, i32* %min_mcost.addr, align 4
  %cmp38 = icmp sge i32 %56, %57
  br i1 %cmp38, label %if.then, label %if.end

if.then:                                          ; preds = %for.end
  br label %for.end42

if.end:                                           ; preds = %for.end
  br label %for.inc40

for.inc40:                                        ; preds = %if.end
  %58 = load i32, i32* %y, align 4
  %inc41 = add nsw i32 %58, 1
  store i32 %inc41, i32* %y, align 4
  br label %for.cond

for.end42:                                        ; preds = %if.then, %for.cond
  %59 = load i32, i32* %mcost.addr, align 4
  %60 = load i32, i32* %canary
  %61 = icmp eq i32 %60, 171830702
  br i1 %61, label %62, label %func_exit

62:                                               ; preds = %for.end42, %func_exit
  ret i32 %59

func_exit:                                        ; preds = %for.end42
  call void @detect_breach()
  br label %62
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @DefineThresholdMB.13() #0 {
entry:
  %gb_qp_rem = alloca i32, align 4
  %gb_qp_per = alloca i32, align 4
  %canary = alloca i32
  store i32 598609566, i32* %canary
  %Thresh4x4 = alloca i32, align 4
  %gb_qp_const = alloca i32, align 4
  %gb_q_bits = alloca i32, align 4
  %0 = load %struct.InputParameters*, %struct.InputParameters** @input, align 8
  %qpN = getelementptr inbounds %struct.InputParameters, %struct.InputParameters* %0, i32 0, i32 4
  %1 = load i32, i32* %qpN, align 8
  %sub = sub nsw i32 %1, 0
  %div = sdiv i32 %sub, 6
  store i32 %div, i32* %gb_qp_per, align 4
  %2 = load %struct.InputParameters*, %struct.InputParameters** @input, align 8
  %qpN1 = getelementptr inbounds %struct.InputParameters, %struct.InputParameters* %2, i32 0, i32 4
  %3 = load i32, i32* %qpN1, align 8
  %sub2 = sub nsw i32 %3, 0
  %rem = srem i32 %sub2, 6
  store i32 %rem, i32* %gb_qp_rem, align 4
  %4 = load i32, i32* %gb_qp_per, align 4
  %add = add nsw i32 15, %4
  store i32 %add, i32* %gb_q_bits, align 4
  %5 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %type = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %5, i32 0, i32 6
  %6 = load i32, i32* %type, align 8
  %cmp = icmp eq i32 %6, 2
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %7 = load i32, i32* %gb_q_bits, align 4
  %shl = shl i32 1, %7
  %div3 = sdiv i32 %shl, 3
  store i32 %div3, i32* %gb_qp_const, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %8 = load i32, i32* %gb_q_bits, align 4
  %shl4 = shl i32 1, %8
  %div5 = sdiv i32 %shl4, 6
  store i32 %div5, i32* %gb_qp_const, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %gb_q_bits, align 4
  %shl6 = shl i32 1, %9
  %10 = load i32, i32* %gb_qp_const, align 4
  %sub7 = sub nsw i32 %shl6, %10
  %11 = load i32, i32* %gb_qp_rem, align 4
  %idxprom = sext i32 %11 to i64
  %arrayidx = getelementptr inbounds [6 x [4 x [4 x i32]]], [6 x [4 x [4 x i32]]]* @quant_coef, i64 0, i64 %idxprom
  %arrayidx8 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %arrayidx, i64 0, i64 0
  %arrayidx9 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx8, i64 0, i64 0
  %12 = load i32, i32* %arrayidx9, align 16
  %div10 = sdiv i32 %sub7, %12
  store i32 %div10, i32* %Thresh4x4, align 4
  %13 = load i32, i32* %Thresh4x4, align 4
  %conv = sitofp i32 %13 to float
  %div11 = fdiv float %conv, 0x403670A3E0000000
  store float %div11, float* @Quantize_step, align 4
  %14 = load float, float* @Quantize_step, align 4
  %mul = fmul float 2.560000e+02, %14
  store float %mul, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 7), align 4
  %15 = load float, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 7), align 4
  %mul12 = fmul float %15, 4.000000e+00
  store float %mul12, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 6), align 8
  %16 = load float, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 7), align 4
  %mul13 = fmul float %16, 4.000000e+00
  store float %mul13, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 5), align 4
  %17 = load float, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 5), align 4
  %mul14 = fmul float %17, 4.000000e+00
  store float %mul14, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 4), align 16
  %18 = load float, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 4), align 16
  %mul15 = fmul float %18, 4.000000e+00
  store float %mul15, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 3), align 4
  %19 = load float, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 4), align 16
  %mul16 = fmul float %19, 4.000000e+00
  store float %mul16, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 2), align 8
  %20 = load float, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 2), align 8
  %mul17 = fmul float %20, 4.000000e+00
  store float %mul17, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 1), align 4
  %21 = load i32, i32* %canary
  %22 = icmp eq i32 %21, 598609566
  br i1 %22, label %23, label %func_exit

23:                                               ; preds = %if.end, %func_exit
  ret void

func_exit:                                        ; preds = %if.end
  call void @detect_breach()
  br label %23
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @DefineThresholdMB.14() #0 {
entry:
  %gb_q_bits = alloca i32, align 4
  %canary = alloca i32
  store i32 1269392384, i32* %canary
  %gb_qp_rem = alloca i32, align 4
  %gb_qp_const = alloca i32, align 4
  %gb_qp_per = alloca i32, align 4
  %Thresh4x4 = alloca i32, align 4
  %0 = load %struct.InputParameters*, %struct.InputParameters** @input, align 8
  %qpN = getelementptr inbounds %struct.InputParameters, %struct.InputParameters* %0, i32 0, i32 4
  %1 = load i32, i32* %qpN, align 8
  %sub = sub nsw i32 %1, 0
  %div = sdiv i32 %sub, 6
  store i32 %div, i32* %gb_qp_per, align 4
  %2 = load %struct.InputParameters*, %struct.InputParameters** @input, align 8
  %qpN1 = getelementptr inbounds %struct.InputParameters, %struct.InputParameters* %2, i32 0, i32 4
  %3 = load i32, i32* %qpN1, align 8
  %sub2 = sub nsw i32 %3, 0
  %rem = srem i32 %sub2, 6
  store i32 %rem, i32* %gb_qp_rem, align 4
  %4 = load i32, i32* %gb_qp_per, align 4
  %add = add nsw i32 15, %4
  store i32 %add, i32* %gb_q_bits, align 4
  %5 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %type = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %5, i32 0, i32 6
  %6 = load i32, i32* %type, align 8
  %cmp = icmp eq i32 %6, 2
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %7 = load i32, i32* %gb_q_bits, align 4
  %shl = shl i32 1, %7
  %div3 = sdiv i32 %shl, 3
  store i32 %div3, i32* %gb_qp_const, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %8 = load i32, i32* %gb_q_bits, align 4
  %shl4 = shl i32 1, %8
  %div5 = sdiv i32 %shl4, 6
  store i32 %div5, i32* %gb_qp_const, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %gb_q_bits, align 4
  %shl6 = shl i32 1, %9
  %10 = load i32, i32* %gb_qp_const, align 4
  %sub7 = sub nsw i32 %shl6, %10
  %11 = load i32, i32* %gb_qp_rem, align 4
  %idxprom = sext i32 %11 to i64
  %arrayidx = getelementptr inbounds [6 x [4 x [4 x i32]]], [6 x [4 x [4 x i32]]]* @quant_coef, i64 0, i64 %idxprom
  %arrayidx8 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %arrayidx, i64 0, i64 0
  %arrayidx9 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx8, i64 0, i64 0
  %12 = load i32, i32* %arrayidx9, align 16
  %div10 = sdiv i32 %sub7, %12
  store i32 %div10, i32* %Thresh4x4, align 4
  %13 = load i32, i32* %Thresh4x4, align 4
  %conv = sitofp i32 %13 to float
  %div11 = fdiv float %conv, 0x403670A3E0000000
  store float %div11, float* @Quantize_step, align 4
  %14 = load float, float* @Quantize_step, align 4
  %mul = fmul float 2.560000e+02, %14
  store float %mul, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 7), align 4
  %15 = load float, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 7), align 4
  %mul12 = fmul float %15, 4.000000e+00
  store float %mul12, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 6), align 8
  %16 = load float, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 7), align 4
  %mul13 = fmul float %16, 4.000000e+00
  store float %mul13, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 5), align 4
  %17 = load float, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 5), align 4
  %mul14 = fmul float %17, 4.000000e+00
  store float %mul14, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 4), align 16
  %18 = load float, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 4), align 16
  %mul15 = fmul float %18, 4.000000e+00
  store float %mul15, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 3), align 4
  %19 = load float, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 4), align 16
  %mul16 = fmul float %19, 4.000000e+00
  store float %mul16, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 2), align 8
  %20 = load float, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 2), align 8
  %mul17 = fmul float %20, 4.000000e+00
  store float %mul17, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 1), align 4
  %21 = load i32, i32* %canary
  %22 = icmp eq i32 %21, 1269392384
  br i1 %22, label %23, label %func_exit

23:                                               ; preds = %if.end, %func_exit
  ret void

func_exit:                                        ; preds = %if.end
  call void @detect_breach()
  br label %23
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @FastSubPelBlockMotionSearch.15(i16** %orig_pic, i16 signext %ref, i32 %list, i32 %pic_pix_x, i32 %pic_pix_y, i32 %blocktype, i16 signext %pred_mv_x, i16 signext %pred_mv_y, i16* %mv_x, i16* %mv_y, i32 %search_pos2, i32 %search_pos4, i32 %min_mcost, double %lambda, i32 %useABT) #0 {
entry:
  %mv_y.addr = alloca i16*, align 8
  %blocktype.addr = alloca i32, align 4
  %currmv_x = alloca i32, align 4
  %pic_pix_y.addr = alloca i32, align 4
  %lambda_factor = alloca i32, align 4
  %pic4_pix_y = alloca i32, align 4
  %cand_mv_x = alloca i32, align 4
  %iCurrSearchRange = alloca i32, align 4
  %orig_pic.addr = alloca i16**, align 8
  %ref_picture = alloca %struct.storable_picture*, align 8
  %blocksize_y = alloca i32, align 4
  %list_offset = alloca i32, align 4
  %canary = alloca i32
  store i32 514891773, i32* %canary
  %search_pos4.addr = alloca i32, align 4
  %lambda.addr = alloca double, align 8
  %max_pos_x4 = alloca i32, align 4
  %abort_search = alloca i32, align 4
  %max_pos_y4 = alloca i32, align 4
  %pred_frac_mv_x = alloca i32, align 4
  %blocksize_x = alloca i32, align 4
  %pred_frac_mv_y = alloca i32, align 4
  %cand_mv_y = alloca i32, align 4
  %pred_mv_x.addr = alloca i16, align 2
  %pred_frac_up_mv_y = alloca i32, align 4
  %currmv_y = alloca i32, align 4
  %mv_cost = alloca i32, align 4
  %pred_frac_up_mv_x = alloca i32, align 4
  %pic_pix_x.addr = alloca i32, align 4
  %min_mcost.addr = alloca i32, align 4
  %m = alloca i32, align 4
  %iYMinNow = alloca i32, align 4
  %list.addr = alloca i32, align 4
  %mv_x.addr = alloca i16*, align 8
  %ref.addr = alloca i16, align 2
  %pred_mv_y.addr = alloca i16, align 2
  %search_range_dynamic = alloca i32, align 4
  %iXMinNow = alloca i32, align 4
  %iSADLayer = alloca i32, align 4
  %mv_shift = alloca i32, align 4
  %mcost = alloca i32, align 4
  %search_pos2.addr = alloca i32, align 4
  %useABT.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %pic4_pix_x = alloca i32, align 4
  store i16** %orig_pic, i16*** %orig_pic.addr, align 8
  store i16 %ref, i16* %ref.addr, align 2
  store i32 %list, i32* %list.addr, align 4
  store i32 %pic_pix_x, i32* %pic_pix_x.addr, align 4
  store i32 %pic_pix_y, i32* %pic_pix_y.addr, align 4
  store i32 %blocktype, i32* %blocktype.addr, align 4
  store i16 %pred_mv_x, i16* %pred_mv_x.addr, align 2
  store i16 %pred_mv_y, i16* %pred_mv_y.addr, align 2
  store i16* %mv_x, i16** %mv_x.addr, align 8
  store i16* %mv_y, i16** %mv_y.addr, align 8
  store i32 %search_pos2, i32* %search_pos2.addr, align 4
  store i32 %search_pos4, i32* %search_pos4.addr, align 4
  store i32 %min_mcost, i32* %min_mcost.addr, align 4
  store double %lambda, double* %lambda.addr, align 8
  store i32 %useABT, i32* %useABT.addr, align 4
  %0 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %MbaffFrameFlag = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %0, i32 0, i32 90
  %1 = load i32, i32* %MbaffFrameFlag, align 8
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %mb_data = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %2, i32 0, i32 51
  %3 = load %struct.macroblock*, %struct.macroblock** %mb_data, align 8
  %4 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %current_mb_nr = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %4, i32 0, i32 3
  %5 = load i32, i32* %current_mb_nr, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 %idxprom
  %mb_field = getelementptr inbounds %struct.macroblock, %struct.macroblock* %arrayidx, i32 0, i32 22
  %6 = load i32, i32* %mb_field, align 4
  %tobool1 = icmp ne i32 %6, 0
  br i1 %tobool1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %7 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %current_mb_nr2 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %7, i32 0, i32 3
  %8 = load i32, i32* %current_mb_nr2, align 4
  %rem = srem i32 %8, 2
  %tobool3 = icmp ne i32 %rem, 0
  %9 = zext i1 %tobool3 to i64
  %cond = select i1 %tobool3, i32 4, i32 2
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond4 = phi i32 [ %cond, %cond.true ], [ 0, %cond.false ]
  store i32 %cond4, i32* %list_offset, align 4
  %10 = load i32, i32* %list.addr, align 4
  %11 = load i32, i32* %list_offset, align 4
  %add = add nsw i32 %10, %11
  %idxprom5 = sext i32 %add to i64
  %arrayidx6 = getelementptr inbounds [6 x %struct.storable_picture**], [6 x %struct.storable_picture**]* @listX, i64 0, i64 %idxprom5
  %12 = load %struct.storable_picture**, %struct.storable_picture*** %arrayidx6, align 8
  %13 = load i16, i16* %ref.addr, align 2
  %idxprom7 = sext i16 %13 to i64
  %arrayidx8 = getelementptr inbounds %struct.storable_picture*, %struct.storable_picture** %12, i64 %idxprom7
  %14 = load %struct.storable_picture*, %struct.storable_picture** %arrayidx8, align 8
  store %struct.storable_picture* %14, %struct.storable_picture** %ref_picture, align 8
  %15 = load double, double* %lambda.addr, align 8
  %mul = fmul double 6.553600e+04, %15
  %add9 = fadd double %mul, 5.000000e-01
  %conv = fptosi double %add9 to i32
  store i32 %conv, i32* %lambda_factor, align 4
  store i32 0, i32* %mv_shift, align 4
  %16 = load %struct.InputParameters*, %struct.InputParameters** @input, align 8
  %blc_size = getelementptr inbounds %struct.InputParameters, %struct.InputParameters* %16, i32 0, i32 20
  %17 = load i32, i32* %blocktype.addr, align 4
  %idxprom10 = sext i32 %17 to i64
  %arrayidx11 = getelementptr inbounds [8 x [2 x i32]], [8 x [2 x i32]]* %blc_size, i64 0, i64 %idxprom10
  %arrayidx12 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx11, i64 0, i64 0
  %18 = load i32, i32* %arrayidx12, align 8
  store i32 %18, i32* %blocksize_x, align 4
  %19 = load %struct.InputParameters*, %struct.InputParameters** @input, align 8
  %blc_size13 = getelementptr inbounds %struct.InputParameters, %struct.InputParameters* %19, i32 0, i32 20
  %20 = load i32, i32* %blocktype.addr, align 4
  %idxprom14 = sext i32 %20 to i64
  %arrayidx15 = getelementptr inbounds [8 x [2 x i32]], [8 x [2 x i32]]* %blc_size13, i64 0, i64 %idxprom14
  %arrayidx16 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx15, i64 0, i64 1
  %21 = load i32, i32* %arrayidx16, align 4
  store i32 %21, i32* %blocksize_y, align 4
  %22 = load i32, i32* %pic_pix_x.addr, align 4
  %shl = shl i32 %22, 2
  store i32 %shl, i32* %pic4_pix_x, align 4
  %23 = load i32, i32* %pic_pix_y.addr, align 4
  %shl17 = shl i32 %23, 2
  store i32 %shl17, i32* %pic4_pix_y, align 4
  %24 = load %struct.storable_picture*, %struct.storable_picture** %ref_picture, align 8
  %size_x = getelementptr inbounds %struct.storable_picture, %struct.storable_picture* %24, i32 0, i32 18
  %25 = load i32, i32* %size_x, align 8
  %26 = load i32, i32* %blocksize_x, align 4
  %sub = sub nsw i32 %25, %26
  %add18 = add nsw i32 %sub, 1
  %shl19 = shl i32 %add18, 2
  store i32 %shl19, i32* %max_pos_x4, align 4
  %27 = load %struct.storable_picture*, %struct.storable_picture** %ref_picture, align 8
  %size_y = getelementptr inbounds %struct.storable_picture, %struct.storable_picture* %27, i32 0, i32 19
  %28 = load i32, i32* %size_y, align 4
  %29 = load i32, i32* %blocksize_y, align 4
  %sub20 = sub nsw i32 %28, %29
  %add21 = add nsw i32 %sub20, 1
  %shl22 = shl i32 %add21, 2
  store i32 %shl22, i32* %max_pos_y4, align 4
  store i32 0, i32* %currmv_x, align 4
  store i32 0, i32* %currmv_y, align 4
  %30 = load i16*, i16** %mv_x.addr, align 8
  %31 = load i16, i16* %30, align 2
  %conv23 = sext i16 %31 to i32
  %shl24 = shl i32 %conv23, 2
  %conv25 = trunc i32 %shl24 to i16
  store i16 %conv25, i16* %30, align 2
  %32 = load i16*, i16** %mv_y.addr, align 8
  %33 = load i16, i16* %32, align 2
  %conv26 = sext i16 %33 to i32
  %shl27 = shl i32 %conv26, 2
  %conv28 = trunc i32 %shl27 to i16
  store i16 %conv28, i16* %32, align 2
  %34 = load i32, i32* %pic4_pix_x, align 4
  %35 = load i16*, i16** %mv_x.addr, align 8
  %36 = load i16, i16* %35, align 2
  %conv29 = sext i16 %36 to i32
  %add30 = add nsw i32 %34, %conv29
  %cmp = icmp sgt i32 %add30, 1
  br i1 %cmp, label %land.lhs.true32, label %if.else

land.lhs.true32:                                  ; preds = %cond.end
  %37 = load i32, i32* %pic4_pix_x, align 4
  %38 = load i16*, i16** %mv_x.addr, align 8
  %39 = load i16, i16* %38, align 2
  %conv33 = sext i16 %39 to i32
  %add34 = add nsw i32 %37, %conv33
  %40 = load i32, i32* %max_pos_x4, align 4
  %sub35 = sub nsw i32 %40, 2
  %cmp36 = icmp slt i32 %add34, %sub35
  br i1 %cmp36, label %land.lhs.true38, label %if.else

land.lhs.true38:                                  ; preds = %land.lhs.true32
  %41 = load i32, i32* %pic4_pix_y, align 4
  %42 = load i16*, i16** %mv_y.addr, align 8
  %43 = load i16, i16* %42, align 2
  %conv39 = sext i16 %43 to i32
  %add40 = add nsw i32 %41, %conv39
  %cmp41 = icmp sgt i32 %add40, 1
  br i1 %cmp41, label %land.lhs.true43, label %if.else

land.lhs.true43:                                  ; preds = %land.lhs.true38
  %44 = load i32, i32* %pic4_pix_y, align 4
  %45 = load i16*, i16** %mv_y.addr, align 8
  %46 = load i16, i16* %45, align 2
  %conv44 = sext i16 %46 to i32
  %add45 = add nsw i32 %44, %conv44
  %47 = load i32, i32* %max_pos_y4, align 4
  %sub46 = sub nsw i32 %47, 2
  %cmp47 = icmp slt i32 %add45, %sub46
  br i1 %cmp47, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true43
  store i16 (i16**, i32, i32, i32, i32)* @FastPelY_14, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  br label %if.end

if.else:                                          ; preds = %land.lhs.true43, %land.lhs.true38, %land.lhs.true32, %cond.end
  store i16 (i16**, i32, i32, i32, i32)* @UMVPelY_14, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  store i32 3, i32* %search_range_dynamic, align 4
  %48 = load i16, i16* %pred_mv_x.addr, align 2
  %conv49 = sext i16 %48 to i32
  %49 = load i16*, i16** %mv_x.addr, align 8
  %50 = load i16, i16* %49, align 2
  %conv50 = sext i16 %50 to i32
  %sub51 = sub nsw i32 %conv49, %conv50
  %rem52 = srem i32 %sub51, 4
  store i32 %rem52, i32* %pred_frac_mv_x, align 4
  %51 = load i16, i16* %pred_mv_y.addr, align 2
  %conv53 = sext i16 %51 to i32
  %52 = load i16*, i16** %mv_y.addr, align 8
  %53 = load i16, i16* %52, align 2
  %conv54 = sext i16 %53 to i32
  %sub55 = sub nsw i32 %conv53, %conv54
  %rem56 = srem i32 %sub55, 4
  store i32 %rem56, i32* %pred_frac_mv_y, align 4
  %54 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @pred_MV_uplayer, i64 0, i64 0), align 4
  %55 = load i16*, i16** %mv_x.addr, align 8
  %56 = load i16, i16* %55, align 2
  %conv57 = sext i16 %56 to i32
  %sub58 = sub nsw i32 %54, %conv57
  %rem59 = srem i32 %sub58, 4
  store i32 %rem59, i32* %pred_frac_up_mv_x, align 4
  %57 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @pred_MV_uplayer, i64 0, i64 1), align 4
  %58 = load i16*, i16** %mv_y.addr, align 8
  %59 = load i16, i16* %58, align 2
  %conv60 = sext i16 %59 to i32
  %sub61 = sub nsw i32 %57, %conv60
  %rem62 = srem i32 %sub61, 4
  store i32 %rem62, i32* %pred_frac_up_mv_y, align 4
  %60 = load i8**, i8*** @SearchState, align 8
  %arrayidx63 = getelementptr inbounds i8*, i8** %60, i64 0
  %61 = load i8*, i8** %arrayidx63, align 8
  %62 = load i32, i32* %search_range_dynamic, align 4
  %mul64 = mul nsw i32 2, %62
  %add65 = add nsw i32 %mul64, 1
  %63 = load i32, i32* %search_range_dynamic, align 4
  %mul66 = mul nsw i32 2, %63
  %add67 = add nsw i32 %mul66, 1
  %mul68 = mul nsw i32 %add65, %add67
  %conv69 = sext i32 %mul68 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %61, i8 0, i64 %conv69, i1 false)
  %64 = load %struct.InputParameters*, %struct.InputParameters** @input, align 8
  %hadamard = getelementptr inbounds %struct.InputParameters, %struct.InputParameters* %64, i32 0, i32 6
  %65 = load i32, i32* %hadamard, align 8
  %tobool70 = icmp ne i32 %65, 0
  br i1 %tobool70, label %if.then71, label %if.else94

if.then71:                                        ; preds = %if.end
  %66 = load i16*, i16** %mv_x.addr, align 8
  %67 = load i16, i16* %66, align 2
  %conv72 = sext i16 %67 to i32
  store i32 %conv72, i32* %cand_mv_x, align 4
  %68 = load i16*, i16** %mv_y.addr, align 8
  %69 = load i16, i16* %68, align 2
  %conv73 = sext i16 %69 to i32
  store i32 %conv73, i32* %cand_mv_y, align 4
  %70 = load i32, i32* %lambda_factor, align 4
  %71 = load i32*, i32** @mvbits, align 8
  %72 = load i32, i32* %cand_mv_x, align 4
  %73 = load i32, i32* %mv_shift, align 4
  %shl74 = shl i32 %72, %73
  %74 = load i16, i16* %pred_mv_x.addr, align 2
  %conv75 = sext i16 %74 to i32
  %sub76 = sub nsw i32 %shl74, %conv75
  %idxprom77 = sext i32 %sub76 to i64
  %arrayidx78 = getelementptr inbounds i32, i32* %71, i64 %idxprom77
  %75 = load i32, i32* %arrayidx78, align 4
  %76 = load i32*, i32** @mvbits, align 8
  %77 = load i32, i32* %cand_mv_y, align 4
  %78 = load i32, i32* %mv_shift, align 4
  %shl79 = shl i32 %77, %78
  %79 = load i16, i16* %pred_mv_y.addr, align 2
  %conv80 = sext i16 %79 to i32
  %sub81 = sub nsw i32 %shl79, %conv80
  %idxprom82 = sext i32 %sub81 to i64
  %arrayidx83 = getelementptr inbounds i32, i32* %76, i64 %idxprom82
  %80 = load i32, i32* %arrayidx83, align 4
  %add84 = add nsw i32 %75, %80
  %mul85 = mul nsw i32 %70, %add84
  %shr = ashr i32 %mul85, 16
  store i32 %shr, i32* %mv_cost, align 4
  %81 = load i32, i32* %pic_pix_x.addr, align 4
  %82 = load i32, i32* %pic_pix_y.addr, align 4
  %83 = load i32, i32* %blocksize_x, align 4
  %84 = load i32, i32* %blocksize_y, align 4
  %85 = load i32, i32* %cand_mv_x, align 4
  %86 = load i32, i32* %cand_mv_y, align 4
  %87 = load %struct.storable_picture*, %struct.storable_picture** %ref_picture, align 8
  %88 = load i16**, i16*** %orig_pic.addr, align 8
  %89 = load i32, i32* %mv_cost, align 4
  %90 = load i32, i32* %min_mcost.addr, align 4
  %91 = load i32, i32* %useABT.addr, align 4
  %call = call i32 @AddUpSADQuarter(i32 %81, i32 %82, i32 %83, i32 %84, i32 %85, i32 %86, %struct.storable_picture* %87, i16** %88, i32 %89, i32 %90, i32 %91)
  store i32 %call, i32* %mcost, align 4
  %92 = load i8**, i8*** @SearchState, align 8
  %93 = load i32, i32* %search_range_dynamic, align 4
  %idxprom86 = sext i32 %93 to i64
  %arrayidx87 = getelementptr inbounds i8*, i8** %92, i64 %idxprom86
  %94 = load i8*, i8** %arrayidx87, align 8
  %95 = load i32, i32* %search_range_dynamic, align 4
  %idxprom88 = sext i32 %95 to i64
  %arrayidx89 = getelementptr inbounds i8, i8* %94, i64 %idxprom88
  store i8 1, i8* %arrayidx89, align 1
  %96 = load i32, i32* %mcost, align 4
  %97 = load i32, i32* %min_mcost.addr, align 4
  %cmp90 = icmp slt i32 %96, %97
  br i1 %cmp90, label %if.then92, label %if.end93

if.then92:                                        ; preds = %if.then71
  %98 = load i32, i32* %mcost, align 4
  store i32 %98, i32* %min_mcost.addr, align 4
  %99 = load i32, i32* %cand_mv_x, align 4
  store i32 %99, i32* %currmv_x, align 4
  %100 = load i32, i32* %cand_mv_y, align 4
  store i32 %100, i32* %currmv_y, align 4
  br label %if.end93

if.end93:                                         ; preds = %if.then92, %if.then71
  br label %if.end101

if.else94:                                        ; preds = %if.end
  %101 = load i8**, i8*** @SearchState, align 8
  %102 = load i32, i32* %search_range_dynamic, align 4
  %idxprom95 = sext i32 %102 to i64
  %arrayidx96 = getelementptr inbounds i8*, i8** %101, i64 %idxprom95
  %103 = load i8*, i8** %arrayidx96, align 8
  %104 = load i32, i32* %search_range_dynamic, align 4
  %idxprom97 = sext i32 %104 to i64
  %arrayidx98 = getelementptr inbounds i8, i8* %103, i64 %idxprom97
  store i8 1, i8* %arrayidx98, align 1
  %105 = load i16*, i16** %mv_x.addr, align 8
  %106 = load i16, i16* %105, align 2
  %conv99 = sext i16 %106 to i32
  store i32 %conv99, i32* %currmv_x, align 4
  %107 = load i16*, i16** %mv_y.addr, align 8
  %108 = load i16, i16* %107, align 2
  %conv100 = sext i16 %108 to i32
  store i32 %conv100, i32* %currmv_y, align 4
  br label %if.end101

if.end101:                                        ; preds = %if.else94, %if.end93
  %109 = load i32, i32* %pred_frac_mv_x, align 4
  %cmp102 = icmp ne i32 %109, 0
  br i1 %cmp102, label %if.then106, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end101
  %110 = load i32, i32* %pred_frac_mv_y, align 4
  %cmp104 = icmp ne i32 %110, 0
  br i1 %cmp104, label %if.then106, label %if.end139

if.then106:                                       ; preds = %lor.lhs.false, %if.end101
  %111 = load i16*, i16** %mv_x.addr, align 8
  %112 = load i16, i16* %111, align 2
  %conv107 = sext i16 %112 to i32
  %113 = load i32, i32* %pred_frac_mv_x, align 4
  %add108 = add nsw i32 %conv107, %113
  store i32 %add108, i32* %cand_mv_x, align 4
  %114 = load i16*, i16** %mv_y.addr, align 8
  %115 = load i16, i16* %114, align 2
  %conv109 = sext i16 %115 to i32
  %116 = load i32, i32* %pred_frac_mv_y, align 4
  %add110 = add nsw i32 %conv109, %116
  store i32 %add110, i32* %cand_mv_y, align 4
  %117 = load i32, i32* %lambda_factor, align 4
  %118 = load i32*, i32** @mvbits, align 8
  %119 = load i32, i32* %cand_mv_x, align 4
  %120 = load i32, i32* %mv_shift, align 4
  %shl111 = shl i32 %119, %120
  %121 = load i16, i16* %pred_mv_x.addr, align 2
  %conv112 = sext i16 %121 to i32
  %sub113 = sub nsw i32 %shl111, %conv112
  %idxprom114 = sext i32 %sub113 to i64
  %arrayidx115 = getelementptr inbounds i32, i32* %118, i64 %idxprom114
  %122 = load i32, i32* %arrayidx115, align 4
  %123 = load i32*, i32** @mvbits, align 8
  %124 = load i32, i32* %cand_mv_y, align 4
  %125 = load i32, i32* %mv_shift, align 4
  %shl116 = shl i32 %124, %125
  %126 = load i16, i16* %pred_mv_y.addr, align 2
  %conv117 = sext i16 %126 to i32
  %sub118 = sub nsw i32 %shl116, %conv117
  %idxprom119 = sext i32 %sub118 to i64
  %arrayidx120 = getelementptr inbounds i32, i32* %123, i64 %idxprom119
  %127 = load i32, i32* %arrayidx120, align 4
  %add121 = add nsw i32 %122, %127
  %mul122 = mul nsw i32 %117, %add121
  %shr123 = ashr i32 %mul122, 16
  store i32 %shr123, i32* %mv_cost, align 4
  %128 = load i32, i32* %pic_pix_x.addr, align 4
  %129 = load i32, i32* %pic_pix_y.addr, align 4
  %130 = load i32, i32* %blocksize_x, align 4
  %131 = load i32, i32* %blocksize_y, align 4
  %132 = load i32, i32* %cand_mv_x, align 4
  %133 = load i32, i32* %cand_mv_y, align 4
  %134 = load %struct.storable_picture*, %struct.storable_picture** %ref_picture, align 8
  %135 = load i16**, i16*** %orig_pic.addr, align 8
  %136 = load i32, i32* %mv_cost, align 4
  %137 = load i32, i32* %min_mcost.addr, align 4
  %138 = load i32, i32* %useABT.addr, align 4
  %call124 = call i32 @AddUpSADQuarter(i32 %128, i32 %129, i32 %130, i32 %131, i32 %132, i32 %133, %struct.storable_picture* %134, i16** %135, i32 %136, i32 %137, i32 %138)
  store i32 %call124, i32* %mcost, align 4
  %139 = load i8**, i8*** @SearchState, align 8
  %140 = load i32, i32* %cand_mv_y, align 4
  %141 = load i16*, i16** %mv_y.addr, align 8
  %142 = load i16, i16* %141, align 2
  %conv125 = sext i16 %142 to i32
  %sub126 = sub nsw i32 %140, %conv125
  %143 = load i32, i32* %search_range_dynamic, align 4
  %add127 = add nsw i32 %sub126, %143
  %idxprom128 = sext i32 %add127 to i64
  %arrayidx129 = getelementptr inbounds i8*, i8** %139, i64 %idxprom128
  %144 = load i8*, i8** %arrayidx129, align 8
  %145 = load i32, i32* %cand_mv_x, align 4
  %146 = load i16*, i16** %mv_x.addr, align 8
  %147 = load i16, i16* %146, align 2
  %conv130 = sext i16 %147 to i32
  %sub131 = sub nsw i32 %145, %conv130
  %148 = load i32, i32* %search_range_dynamic, align 4
  %add132 = add nsw i32 %sub131, %148
  %idxprom133 = sext i32 %add132 to i64
  %arrayidx134 = getelementptr inbounds i8, i8* %144, i64 %idxprom133
  store i8 1, i8* %arrayidx134, align 1
  %149 = load i32, i32* %mcost, align 4
  %150 = load i32, i32* %min_mcost.addr, align 4
  %cmp135 = icmp slt i32 %149, %150
  br i1 %cmp135, label %if.then137, label %if.end138

if.then137:                                       ; preds = %if.then106
  %151 = load i32, i32* %mcost, align 4
  store i32 %151, i32* %min_mcost.addr, align 4
  %152 = load i32, i32* %cand_mv_x, align 4
  store i32 %152, i32* %currmv_x, align 4
  %153 = load i32, i32* %cand_mv_y, align 4
  store i32 %153, i32* %currmv_y, align 4
  br label %if.end138

if.end138:                                        ; preds = %if.then137, %if.then106
  br label %if.end139

if.end139:                                        ; preds = %if.end138, %lor.lhs.false
  %154 = load i32, i32* %currmv_x, align 4
  store i32 %154, i32* %iXMinNow, align 4
  %155 = load i32, i32* %currmv_y, align 4
  store i32 %155, i32* %iYMinNow, align 4
  %156 = load i32, i32* %search_range_dynamic, align 4
  %mul140 = mul nsw i32 2, %156
  %add141 = add nsw i32 %mul140, 1
  store i32 %add141, i32* %iCurrSearchRange, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc211, %if.end139
  %157 = load i32, i32* %i, align 4
  %158 = load i32, i32* %iCurrSearchRange, align 4
  %cmp142 = icmp slt i32 %157, %158
  br i1 %cmp142, label %for.body, label %for.end213

for.body:                                         ; preds = %for.cond
  store i32 1, i32* %abort_search, align 4
  store i32 65536, i32* %iSADLayer, align 4
  store i32 0, i32* %m, align 4
  br label %for.cond144

for.cond144:                                      ; preds = %for.inc, %for.body
  %159 = load i32, i32* %m, align 4
  %cmp145 = icmp slt i32 %159, 4
  br i1 %cmp145, label %for.body147, label %for.end

for.body147:                                      ; preds = %for.cond144
  %160 = load i32, i32* %iXMinNow, align 4
  %161 = load i32, i32* %m, align 4
  %idxprom148 = sext i32 %161 to i64
  %arrayidx149 = getelementptr inbounds [4 x i32], [4 x i32]* @FastSubPelBlockMotionSearch.Diamond_x, i64 0, i64 %idxprom148
  %162 = load i32, i32* %arrayidx149, align 4
  %add150 = add nsw i32 %160, %162
  store i32 %add150, i32* %cand_mv_x, align 4
  %163 = load i32, i32* %iYMinNow, align 4
  %164 = load i32, i32* %m, align 4
  %idxprom151 = sext i32 %164 to i64
  %arrayidx152 = getelementptr inbounds [4 x i32], [4 x i32]* @FastSubPelBlockMotionSearch.Diamond_y, i64 0, i64 %idxprom151
  %165 = load i32, i32* %arrayidx152, align 4
  %add153 = add nsw i32 %163, %165
  store i32 %add153, i32* %cand_mv_y, align 4
  %166 = load i32, i32* %cand_mv_x, align 4
  %167 = load i16*, i16** %mv_x.addr, align 8
  %168 = load i16, i16* %167, align 2
  %conv154 = sext i16 %168 to i32
  %sub155 = sub nsw i32 %166, %conv154
  %call156 = call i32 @abs(i32 %sub155) #6
  %169 = load i32, i32* %search_range_dynamic, align 4
  %cmp157 = icmp sle i32 %call156, %169
  br i1 %cmp157, label %land.lhs.true159, label %if.end207

land.lhs.true159:                                 ; preds = %for.body147
  %170 = load i32, i32* %cand_mv_y, align 4
  %171 = load i16*, i16** %mv_y.addr, align 8
  %172 = load i16, i16* %171, align 2
  %conv160 = sext i16 %172 to i32
  %sub161 = sub nsw i32 %170, %conv160
  %call162 = call i32 @abs(i32 %sub161) #6
  %173 = load i32, i32* %search_range_dynamic, align 4
  %cmp163 = icmp sle i32 %call162, %173
  br i1 %cmp163, label %if.then165, label %if.end207

if.then165:                                       ; preds = %land.lhs.true159
  %174 = load i8**, i8*** @SearchState, align 8
  %175 = load i32, i32* %cand_mv_y, align 4
  %176 = load i16*, i16** %mv_y.addr, align 8
  %177 = load i16, i16* %176, align 2
  %conv166 = sext i16 %177 to i32
  %sub167 = sub nsw i32 %175, %conv166
  %178 = load i32, i32* %search_range_dynamic, align 4
  %add168 = add nsw i32 %sub167, %178
  %idxprom169 = sext i32 %add168 to i64
  %arrayidx170 = getelementptr inbounds i8*, i8** %174, i64 %idxprom169
  %179 = load i8*, i8** %arrayidx170, align 8
  %180 = load i32, i32* %cand_mv_x, align 4
  %181 = load i16*, i16** %mv_x.addr, align 8
  %182 = load i16, i16* %181, align 2
  %conv171 = sext i16 %182 to i32
  %sub172 = sub nsw i32 %180, %conv171
  %183 = load i32, i32* %search_range_dynamic, align 4
  %add173 = add nsw i32 %sub172, %183
  %idxprom174 = sext i32 %add173 to i64
  %arrayidx175 = getelementptr inbounds i8, i8* %179, i64 %idxprom174
  %184 = load i8, i8* %arrayidx175, align 1
  %tobool176 = icmp ne i8 %184, 0
  br i1 %tobool176, label %if.end206, label %if.then177

if.then177:                                       ; preds = %if.then165
  %185 = load i32, i32* %lambda_factor, align 4
  %186 = load i32*, i32** @mvbits, align 8
  %187 = load i32, i32* %cand_mv_x, align 4
  %188 = load i32, i32* %mv_shift, align 4
  %shl178 = shl i32 %187, %188
  %189 = load i16, i16* %pred_mv_x.addr, align 2
  %conv179 = sext i16 %189 to i32
  %sub180 = sub nsw i32 %shl178, %conv179
  %idxprom181 = sext i32 %sub180 to i64
  %arrayidx182 = getelementptr inbounds i32, i32* %186, i64 %idxprom181
  %190 = load i32, i32* %arrayidx182, align 4
  %191 = load i32*, i32** @mvbits, align 8
  %192 = load i32, i32* %cand_mv_y, align 4
  %193 = load i32, i32* %mv_shift, align 4
  %shl183 = shl i32 %192, %193
  %194 = load i16, i16* %pred_mv_y.addr, align 2
  %conv184 = sext i16 %194 to i32
  %sub185 = sub nsw i32 %shl183, %conv184
  %idxprom186 = sext i32 %sub185 to i64
  %arrayidx187 = getelementptr inbounds i32, i32* %191, i64 %idxprom186
  %195 = load i32, i32* %arrayidx187, align 4
  %add188 = add nsw i32 %190, %195
  %mul189 = mul nsw i32 %185, %add188
  %shr190 = ashr i32 %mul189, 16
  store i32 %shr190, i32* %mv_cost, align 4
  %196 = load i32, i32* %pic_pix_x.addr, align 4
  %197 = load i32, i32* %pic_pix_y.addr, align 4
  %198 = load i32, i32* %blocksize_x, align 4
  %199 = load i32, i32* %blocksize_y, align 4
  %200 = load i32, i32* %cand_mv_x, align 4
  %201 = load i32, i32* %cand_mv_y, align 4
  %202 = load %struct.storable_picture*, %struct.storable_picture** %ref_picture, align 8
  %203 = load i16**, i16*** %orig_pic.addr, align 8
  %204 = load i32, i32* %mv_cost, align 4
  %205 = load i32, i32* %min_mcost.addr, align 4
  %206 = load i32, i32* %useABT.addr, align 4
  %call191 = call i32 @AddUpSADQuarter(i32 %196, i32 %197, i32 %198, i32 %199, i32 %200, i32 %201, %struct.storable_picture* %202, i16** %203, i32 %204, i32 %205, i32 %206)
  store i32 %call191, i32* %mcost, align 4
  %207 = load i8**, i8*** @SearchState, align 8
  %208 = load i32, i32* %cand_mv_y, align 4
  %209 = load i16*, i16** %mv_y.addr, align 8
  %210 = load i16, i16* %209, align 2
  %conv192 = sext i16 %210 to i32
  %sub193 = sub nsw i32 %208, %conv192
  %211 = load i32, i32* %search_range_dynamic, align 4
  %add194 = add nsw i32 %sub193, %211
  %idxprom195 = sext i32 %add194 to i64
  %arrayidx196 = getelementptr inbounds i8*, i8** %207, i64 %idxprom195
  %212 = load i8*, i8** %arrayidx196, align 8
  %213 = load i32, i32* %cand_mv_x, align 4
  %214 = load i16*, i16** %mv_x.addr, align 8
  %215 = load i16, i16* %214, align 2
  %conv197 = sext i16 %215 to i32
  %sub198 = sub nsw i32 %213, %conv197
  %216 = load i32, i32* %search_range_dynamic, align 4
  %add199 = add nsw i32 %sub198, %216
  %idxprom200 = sext i32 %add199 to i64
  %arrayidx201 = getelementptr inbounds i8, i8* %212, i64 %idxprom200
  store i8 1, i8* %arrayidx201, align 1
  %217 = load i32, i32* %mcost, align 4
  %218 = load i32, i32* %min_mcost.addr, align 4
  %cmp202 = icmp slt i32 %217, %218
  br i1 %cmp202, label %if.then204, label %if.end205

if.then204:                                       ; preds = %if.then177
  %219 = load i32, i32* %mcost, align 4
  store i32 %219, i32* %min_mcost.addr, align 4
  %220 = load i32, i32* %cand_mv_x, align 4
  store i32 %220, i32* %currmv_x, align 4
  %221 = load i32, i32* %cand_mv_y, align 4
  store i32 %221, i32* %currmv_y, align 4
  store i32 0, i32* %abort_search, align 4
  br label %if.end205

if.end205:                                        ; preds = %if.then204, %if.then177
  br label %if.end206

if.end206:                                        ; preds = %if.end205, %if.then165
  br label %if.end207

if.end207:                                        ; preds = %if.end206, %land.lhs.true159, %for.body147
  br label %for.inc

for.inc:                                          ; preds = %if.end207
  %222 = load i32, i32* %m, align 4
  %inc = add nsw i32 %222, 1
  store i32 %inc, i32* %m, align 4
  br label %for.cond144

for.end:                                          ; preds = %for.cond144
  %223 = load i32, i32* %currmv_x, align 4
  store i32 %223, i32* %iXMinNow, align 4
  %224 = load i32, i32* %currmv_y, align 4
  store i32 %224, i32* %iYMinNow, align 4
  %225 = load i32, i32* %abort_search, align 4
  %tobool208 = icmp ne i32 %225, 0
  br i1 %tobool208, label %if.then209, label %if.end210

if.then209:                                       ; preds = %for.end
  br label %for.end213

if.end210:                                        ; preds = %for.end
  br label %for.inc211

for.inc211:                                       ; preds = %if.end210
  %226 = load i32, i32* %i, align 4
  %inc212 = add nsw i32 %226, 1
  store i32 %inc212, i32* %i, align 4
  br label %for.cond

for.end213:                                       ; preds = %if.then209, %for.cond
  %227 = load i32, i32* %currmv_x, align 4
  %conv214 = trunc i32 %227 to i16
  %228 = load i16*, i16** %mv_x.addr, align 8
  store i16 %conv214, i16* %228, align 2
  %229 = load i32, i32* %currmv_y, align 4
  %conv215 = trunc i32 %229 to i16
  %230 = load i16*, i16** %mv_y.addr, align 8
  store i16 %conv215, i16* %230, align 2
  %231 = load i32, i32* %min_mcost.addr, align 4
  %232 = load i32, i32* %canary
  %233 = icmp eq i32 %232, 514891773
  br i1 %233, label %234, label %func_exit

234:                                              ; preds = %for.end213, %func_exit
  ret i32 %231

func_exit:                                        ; preds = %for.end213
  call void @detect_breach()
  br label %234
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @PartCalMad.16(i16* %ref_pic, i16** %orig_pic, i16* (i32, i16*, i32, i32, i32, i32)* %get_ref_line, i32 %blocksize_y, i32 %blocksize_x, i32 %blocksize_x4, i32 %mcost, i32 %min_mcost, i32 %cand_x, i32 %cand_y) #0 {
entry:
  %get_ref_line.addr = alloca i16* (i32, i16*, i32, i32, i32, i32)*, align 8
  %mcost.addr = alloca i32, align 4
  %ref_pic.addr = alloca i16*, align 8
  %blocksize_x4.addr = alloca i32, align 4
  %min_mcost.addr = alloca i32, align 4
  %y = alloca i32, align 4
  %cand_x.addr = alloca i32, align 4
  %cand_y.addr = alloca i32, align 4
  %blocksize_x.addr = alloca i32, align 4
  %blocksize_y.addr = alloca i32, align 4
  %height = alloca i32, align 4
  %canary = alloca i32
  store i32 630823542, i32* %canary
  %x4 = alloca i32, align 4
  %orig_pic.addr = alloca i16**, align 8
  %ref_line = alloca i16*, align 8
  %orig_line = alloca i16*, align 8
  store i16* %ref_pic, i16** %ref_pic.addr, align 8
  store i16** %orig_pic, i16*** %orig_pic.addr, align 8
  store i16* (i32, i16*, i32, i32, i32, i32)* %get_ref_line, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line.addr, align 8
  store i32 %blocksize_y, i32* %blocksize_y.addr, align 4
  store i32 %blocksize_x, i32* %blocksize_x.addr, align 4
  store i32 %blocksize_x4, i32* %blocksize_x4.addr, align 4
  store i32 %mcost, i32* %mcost.addr, align 4
  store i32 %min_mcost, i32* %min_mcost.addr, align 4
  store i32 %cand_x, i32* %cand_x.addr, align 4
  store i32 %cand_y, i32* %cand_y.addr, align 4
  %0 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %MbaffFrameFlag = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %0, i32 0, i32 90
  %1 = load i32, i32* %MbaffFrameFlag, align 8
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %mb_data = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %2, i32 0, i32 51
  %3 = load %struct.macroblock*, %struct.macroblock** %mb_data, align 8
  %4 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %current_mb_nr = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %4, i32 0, i32 3
  %5 = load i32, i32* %current_mb_nr, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 %idxprom
  %mb_field = getelementptr inbounds %struct.macroblock, %struct.macroblock* %arrayidx, i32 0, i32 22
  %6 = load i32, i32* %mb_field, align 4
  %tobool1 = icmp ne i32 %6, 0
  br i1 %tobool1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %7 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height2 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %7, i32 0, i32 15
  %8 = load i32, i32* %height2, align 4
  %div = sdiv i32 %8, 2
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %entry
  %9 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height3 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %9, i32 0, i32 15
  %10 = load i32, i32* %height3, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %div, %cond.true ], [ %10, %cond.false ]
  store i32 %cond, i32* %height, align 4
  store i32 0, i32* %y, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc40, %cond.end
  %11 = load i32, i32* %y, align 4
  %12 = load i32, i32* %blocksize_y.addr, align 4
  %cmp = icmp slt i32 %11, %12
  br i1 %cmp, label %for.body, label %for.end42

for.body:                                         ; preds = %for.cond
  %13 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line.addr, align 8
  %14 = load i32, i32* %blocksize_x.addr, align 4
  %15 = load i16*, i16** %ref_pic.addr, align 8
  %16 = load i32, i32* %cand_y.addr, align 4
  %17 = load i32, i32* %y, align 4
  %add = add nsw i32 %16, %17
  %18 = load i32, i32* %cand_x.addr, align 4
  %19 = load i32, i32* %height, align 4
  %20 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %width = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %20, i32 0, i32 13
  %21 = load i32, i32* %width, align 4
  %call = call i16* %13(i32 %14, i16* %15, i32 %add, i32 %18, i32 %19, i32 %21)
  store i16* %call, i16** %ref_line, align 8
  %22 = load i16**, i16*** %orig_pic.addr, align 8
  %23 = load i32, i32* %y, align 4
  %idxprom4 = sext i32 %23 to i64
  %arrayidx5 = getelementptr inbounds i16*, i16** %22, i64 %idxprom4
  %24 = load i16*, i16** %arrayidx5, align 8
  store i16* %24, i16** %orig_line, align 8
  store i32 0, i32* %x4, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc, %for.body
  %25 = load i32, i32* %x4, align 4
  %26 = load i32, i32* %blocksize_x4.addr, align 4
  %cmp7 = icmp slt i32 %25, %26
  br i1 %cmp7, label %for.body8, label %for.end

for.body8:                                        ; preds = %for.cond6
  %27 = load i32*, i32** @byte_abs, align 8
  %28 = load i16*, i16** %orig_line, align 8
  %incdec.ptr = getelementptr inbounds i16, i16* %28, i32 1
  store i16* %incdec.ptr, i16** %orig_line, align 8
  %29 = load i16, i16* %28, align 2
  %conv = zext i16 %29 to i32
  %30 = load i16*, i16** %ref_line, align 8
  %incdec.ptr9 = getelementptr inbounds i16, i16* %30, i32 1
  store i16* %incdec.ptr9, i16** %ref_line, align 8
  %31 = load i16, i16* %30, align 2
  %conv10 = zext i16 %31 to i32
  %sub = sub nsw i32 %conv, %conv10
  %idxprom11 = sext i32 %sub to i64
  %arrayidx12 = getelementptr inbounds i32, i32* %27, i64 %idxprom11
  %32 = load i32, i32* %arrayidx12, align 4
  %33 = load i32, i32* %mcost.addr, align 4
  %add13 = add nsw i32 %33, %32
  store i32 %add13, i32* %mcost.addr, align 4
  %34 = load i32*, i32** @byte_abs, align 8
  %35 = load i16*, i16** %orig_line, align 8
  %incdec.ptr14 = getelementptr inbounds i16, i16* %35, i32 1
  store i16* %incdec.ptr14, i16** %orig_line, align 8
  %36 = load i16, i16* %35, align 2
  %conv15 = zext i16 %36 to i32
  %37 = load i16*, i16** %ref_line, align 8
  %incdec.ptr16 = getelementptr inbounds i16, i16* %37, i32 1
  store i16* %incdec.ptr16, i16** %ref_line, align 8
  %38 = load i16, i16* %37, align 2
  %conv17 = zext i16 %38 to i32
  %sub18 = sub nsw i32 %conv15, %conv17
  %idxprom19 = sext i32 %sub18 to i64
  %arrayidx20 = getelementptr inbounds i32, i32* %34, i64 %idxprom19
  %39 = load i32, i32* %arrayidx20, align 4
  %40 = load i32, i32* %mcost.addr, align 4
  %add21 = add nsw i32 %40, %39
  store i32 %add21, i32* %mcost.addr, align 4
  %41 = load i32*, i32** @byte_abs, align 8
  %42 = load i16*, i16** %orig_line, align 8
  %incdec.ptr22 = getelementptr inbounds i16, i16* %42, i32 1
  store i16* %incdec.ptr22, i16** %orig_line, align 8
  %43 = load i16, i16* %42, align 2
  %conv23 = zext i16 %43 to i32
  %44 = load i16*, i16** %ref_line, align 8
  %incdec.ptr24 = getelementptr inbounds i16, i16* %44, i32 1
  store i16* %incdec.ptr24, i16** %ref_line, align 8
  %45 = load i16, i16* %44, align 2
  %conv25 = zext i16 %45 to i32
  %sub26 = sub nsw i32 %conv23, %conv25
  %idxprom27 = sext i32 %sub26 to i64
  %arrayidx28 = getelementptr inbounds i32, i32* %41, i64 %idxprom27
  %46 = load i32, i32* %arrayidx28, align 4
  %47 = load i32, i32* %mcost.addr, align 4
  %add29 = add nsw i32 %47, %46
  store i32 %add29, i32* %mcost.addr, align 4
  %48 = load i32*, i32** @byte_abs, align 8
  %49 = load i16*, i16** %orig_line, align 8
  %incdec.ptr30 = getelementptr inbounds i16, i16* %49, i32 1
  store i16* %incdec.ptr30, i16** %orig_line, align 8
  %50 = load i16, i16* %49, align 2
  %conv31 = zext i16 %50 to i32
  %51 = load i16*, i16** %ref_line, align 8
  %incdec.ptr32 = getelementptr inbounds i16, i16* %51, i32 1
  store i16* %incdec.ptr32, i16** %ref_line, align 8
  %52 = load i16, i16* %51, align 2
  %conv33 = zext i16 %52 to i32
  %sub34 = sub nsw i32 %conv31, %conv33
  %idxprom35 = sext i32 %sub34 to i64
  %arrayidx36 = getelementptr inbounds i32, i32* %48, i64 %idxprom35
  %53 = load i32, i32* %arrayidx36, align 4
  %54 = load i32, i32* %mcost.addr, align 4
  %add37 = add nsw i32 %54, %53
  store i32 %add37, i32* %mcost.addr, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body8
  %55 = load i32, i32* %x4, align 4
  %inc = add nsw i32 %55, 1
  store i32 %inc, i32* %x4, align 4
  br label %for.cond6

for.end:                                          ; preds = %for.cond6
  %56 = load i32, i32* %mcost.addr, align 4
  %57 = load i32, i32* %min_mcost.addr, align 4
  %cmp38 = icmp sge i32 %56, %57
  br i1 %cmp38, label %if.then, label %if.end

if.then:                                          ; preds = %for.end
  br label %for.end42

if.end:                                           ; preds = %for.end
  br label %for.inc40

for.inc40:                                        ; preds = %if.end
  %58 = load i32, i32* %y, align 4
  %inc41 = add nsw i32 %58, 1
  store i32 %inc41, i32* %y, align 4
  br label %for.cond

for.end42:                                        ; preds = %if.then, %for.cond
  %59 = load i32, i32* %mcost.addr, align 4
  %60 = load i32, i32* %canary
  %61 = icmp eq i32 %60, 630823542
  br i1 %61, label %62, label %func_exit

62:                                               ; preds = %for.end42, %func_exit
  ret i32 %59

func_exit:                                        ; preds = %for.end42
  call void @detect_breach()
  br label %62
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @get_mem_bwmincost.17(i32****** %mv) #0 {
entry:
  %canary = alloca i32
  store i32 648495124, i32* %canary
  %mv.addr = alloca i32******, align 8
  %l = alloca i32, align 4
  %k = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32****** %mv, i32******* %mv.addr, align 8
  %0 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %width = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %0, i32 0, i32 13
  %1 = load i32, i32* %width, align 4
  %div = sdiv i32 %1, 4
  %conv = sext i32 %div to i64
  %call = call noalias i8* @calloc(i64 %conv, i64 8) #5
  %2 = bitcast i8* %call to i32*****
  %3 = load i32******, i32******* %mv.addr, align 8
  store i32***** %2, i32****** %3, align 8
  %cmp = icmp eq i32***** %2, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @no_mem_exit(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc68, %if.end
  %4 = load i32, i32* %i, align 4
  %5 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %width2 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %5, i32 0, i32 13
  %6 = load i32, i32* %width2, align 4
  %div3 = sdiv i32 %6, 4
  %cmp4 = icmp slt i32 %4, %div3
  br i1 %cmp4, label %for.body, label %for.end70

for.body:                                         ; preds = %for.cond
  %7 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %7, i32 0, i32 15
  %8 = load i32, i32* %height, align 4
  %div6 = sdiv i32 %8, 4
  %conv7 = sext i32 %div6 to i64
  %call8 = call noalias i8* @calloc(i64 %conv7, i64 8) #5
  %9 = bitcast i8* %call8 to i32****
  %10 = load i32******, i32******* %mv.addr, align 8
  %11 = load i32*****, i32****** %10, align 8
  %12 = load i32, i32* %i, align 4
  %idxprom = sext i32 %12 to i64
  %arrayidx = getelementptr inbounds i32****, i32***** %11, i64 %idxprom
  store i32**** %9, i32***** %arrayidx, align 8
  %cmp9 = icmp eq i32**** %9, null
  br i1 %cmp9, label %if.then11, label %if.end12

if.then11:                                        ; preds = %for.body
  call void @no_mem_exit(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %if.end12

if.end12:                                         ; preds = %if.then11, %for.body
  store i32 0, i32* %j, align 4
  br label %for.cond13

for.cond13:                                       ; preds = %for.inc65, %if.end12
  %13 = load i32, i32* %j, align 4
  %14 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height14 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %14, i32 0, i32 15
  %15 = load i32, i32* %height14, align 4
  %div15 = sdiv i32 %15, 4
  %cmp16 = icmp slt i32 %13, %div15
  br i1 %cmp16, label %for.body18, label %for.end67

for.body18:                                       ; preds = %for.cond13
  %16 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %max_num_references = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %16, i32 0, i32 9
  %17 = load i32, i32* %max_num_references, align 4
  %conv19 = sext i32 %17 to i64
  %call20 = call noalias i8* @calloc(i64 %conv19, i64 8) #5
  %18 = bitcast i8* %call20 to i32***
  %19 = load i32******, i32******* %mv.addr, align 8
  %20 = load i32*****, i32****** %19, align 8
  %21 = load i32, i32* %i, align 4
  %idxprom21 = sext i32 %21 to i64
  %arrayidx22 = getelementptr inbounds i32****, i32***** %20, i64 %idxprom21
  %22 = load i32****, i32***** %arrayidx22, align 8
  %23 = load i32, i32* %j, align 4
  %idxprom23 = sext i32 %23 to i64
  %arrayidx24 = getelementptr inbounds i32***, i32**** %22, i64 %idxprom23
  store i32*** %18, i32**** %arrayidx24, align 8
  %cmp25 = icmp eq i32*** %18, null
  br i1 %cmp25, label %if.then27, label %if.end28

if.then27:                                        ; preds = %for.body18
  call void @no_mem_exit(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %if.end28

if.end28:                                         ; preds = %if.then27, %for.body18
  store i32 0, i32* %k, align 4
  br label %for.cond29

for.cond29:                                       ; preds = %for.inc62, %if.end28
  %24 = load i32, i32* %k, align 4
  %25 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %max_num_references30 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %25, i32 0, i32 9
  %26 = load i32, i32* %max_num_references30, align 4
  %cmp31 = icmp slt i32 %24, %26
  br i1 %cmp31, label %for.body33, label %for.end64

for.body33:                                       ; preds = %for.cond29
  %call34 = call noalias i8* @calloc(i64 9, i64 8) #5
  %27 = bitcast i8* %call34 to i32**
  %28 = load i32******, i32******* %mv.addr, align 8
  %29 = load i32*****, i32****** %28, align 8
  %30 = load i32, i32* %i, align 4
  %idxprom35 = sext i32 %30 to i64
  %arrayidx36 = getelementptr inbounds i32****, i32***** %29, i64 %idxprom35
  %31 = load i32****, i32***** %arrayidx36, align 8
  %32 = load i32, i32* %j, align 4
  %idxprom37 = sext i32 %32 to i64
  %arrayidx38 = getelementptr inbounds i32***, i32**** %31, i64 %idxprom37
  %33 = load i32***, i32**** %arrayidx38, align 8
  %34 = load i32, i32* %k, align 4
  %idxprom39 = sext i32 %34 to i64
  %arrayidx40 = getelementptr inbounds i32**, i32*** %33, i64 %idxprom39
  store i32** %27, i32*** %arrayidx40, align 8
  %cmp41 = icmp eq i32** %27, null
  br i1 %cmp41, label %if.then43, label %if.end44

if.then43:                                        ; preds = %for.body33
  call void @no_mem_exit(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %if.end44

if.end44:                                         ; preds = %if.then43, %for.body33
  store i32 0, i32* %l, align 4
  br label %for.cond45

for.cond45:                                       ; preds = %for.inc, %if.end44
  %35 = load i32, i32* %l, align 4
  %cmp46 = icmp slt i32 %35, 9
  br i1 %cmp46, label %for.body48, label %for.end

for.body48:                                       ; preds = %for.cond45
  %call49 = call noalias i8* @calloc(i64 3, i64 4) #5
  %36 = bitcast i8* %call49 to i32*
  %37 = load i32******, i32******* %mv.addr, align 8
  %38 = load i32*****, i32****** %37, align 8
  %39 = load i32, i32* %i, align 4
  %idxprom50 = sext i32 %39 to i64
  %arrayidx51 = getelementptr inbounds i32****, i32***** %38, i64 %idxprom50
  %40 = load i32****, i32***** %arrayidx51, align 8
  %41 = load i32, i32* %j, align 4
  %idxprom52 = sext i32 %41 to i64
  %arrayidx53 = getelementptr inbounds i32***, i32**** %40, i64 %idxprom52
  %42 = load i32***, i32**** %arrayidx53, align 8
  %43 = load i32, i32* %k, align 4
  %idxprom54 = sext i32 %43 to i64
  %arrayidx55 = getelementptr inbounds i32**, i32*** %42, i64 %idxprom54
  %44 = load i32**, i32*** %arrayidx55, align 8
  %45 = load i32, i32* %l, align 4
  %idxprom56 = sext i32 %45 to i64
  %arrayidx57 = getelementptr inbounds i32*, i32** %44, i64 %idxprom56
  store i32* %36, i32** %arrayidx57, align 8
  %cmp58 = icmp eq i32* %36, null
  br i1 %cmp58, label %if.then60, label %if.end61

if.then60:                                        ; preds = %for.body48
  call void @no_mem_exit(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %if.end61

if.end61:                                         ; preds = %if.then60, %for.body48
  br label %for.inc

for.inc:                                          ; preds = %if.end61
  %46 = load i32, i32* %l, align 4
  %inc = add nsw i32 %46, 1
  store i32 %inc, i32* %l, align 4
  br label %for.cond45

for.end:                                          ; preds = %for.cond45
  br label %for.inc62

for.inc62:                                        ; preds = %for.end
  %47 = load i32, i32* %k, align 4
  %inc63 = add nsw i32 %47, 1
  store i32 %inc63, i32* %k, align 4
  br label %for.cond29

for.end64:                                        ; preds = %for.cond29
  br label %for.inc65

for.inc65:                                        ; preds = %for.end64
  %48 = load i32, i32* %j, align 4
  %inc66 = add nsw i32 %48, 1
  store i32 %inc66, i32* %j, align 4
  br label %for.cond13

for.end67:                                        ; preds = %for.cond13
  br label %for.inc68

for.inc68:                                        ; preds = %for.end67
  %49 = load i32, i32* %i, align 4
  %inc69 = add nsw i32 %49, 1
  store i32 %inc69, i32* %i, align 4
  br label %for.cond

for.end70:                                        ; preds = %for.cond
  %50 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %width71 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %50, i32 0, i32 13
  %51 = load i32, i32* %width71, align 4
  %div72 = sdiv i32 %51, 4
  %52 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height73 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %52, i32 0, i32 15
  %53 = load i32, i32* %height73, align 4
  %mul = mul nsw i32 %div72, %53
  %div74 = sdiv i32 %mul, 4
  %54 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %max_num_references75 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %54, i32 0, i32 9
  %55 = load i32, i32* %max_num_references75, align 4
  %mul76 = mul nsw i32 %div74, %55
  %mul77 = mul nsw i32 %mul76, 9
  %mul78 = mul nsw i32 %mul77, 3
  %conv79 = sext i32 %mul78 to i64
  %mul80 = mul i64 %conv79, 4
  %conv81 = trunc i64 %mul80 to i32
  %56 = load i32, i32* %canary
  %57 = icmp eq i32 %56, 648495124
  br i1 %57, label %58, label %func_exit

58:                                               ; preds = %for.end70, %func_exit
  ret i32 %conv81

func_exit:                                        ; preds = %for.end70
  call void @detect_breach()
  br label %58
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @get_mem_bwmincost.18(i32****** %mv) #0 {
entry:
  %j = alloca i32, align 4
  %l = alloca i32, align 4
  %mv.addr = alloca i32******, align 8
  %canary = alloca i32
  store i32 1425570407, i32* %canary
  %k = alloca i32, align 4
  %i = alloca i32, align 4
  store i32****** %mv, i32******* %mv.addr, align 8
  %0 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %width = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %0, i32 0, i32 13
  %1 = load i32, i32* %width, align 4
  %div = sdiv i32 %1, 4
  %conv = sext i32 %div to i64
  %call = call noalias i8* @calloc(i64 %conv, i64 8) #5
  %2 = bitcast i8* %call to i32*****
  %3 = load i32******, i32******* %mv.addr, align 8
  store i32***** %2, i32****** %3, align 8
  %cmp = icmp eq i32***** %2, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @no_mem_exit(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc68, %if.end
  %4 = load i32, i32* %i, align 4
  %5 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %width2 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %5, i32 0, i32 13
  %6 = load i32, i32* %width2, align 4
  %div3 = sdiv i32 %6, 4
  %cmp4 = icmp slt i32 %4, %div3
  br i1 %cmp4, label %for.body, label %for.end70

for.body:                                         ; preds = %for.cond
  %7 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %7, i32 0, i32 15
  %8 = load i32, i32* %height, align 4
  %div6 = sdiv i32 %8, 4
  %conv7 = sext i32 %div6 to i64
  %call8 = call noalias i8* @calloc(i64 %conv7, i64 8) #5
  %9 = bitcast i8* %call8 to i32****
  %10 = load i32******, i32******* %mv.addr, align 8
  %11 = load i32*****, i32****** %10, align 8
  %12 = load i32, i32* %i, align 4
  %idxprom = sext i32 %12 to i64
  %arrayidx = getelementptr inbounds i32****, i32***** %11, i64 %idxprom
  store i32**** %9, i32***** %arrayidx, align 8
  %cmp9 = icmp eq i32**** %9, null
  br i1 %cmp9, label %if.then11, label %if.end12

if.then11:                                        ; preds = %for.body
  call void @no_mem_exit(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %if.end12

if.end12:                                         ; preds = %if.then11, %for.body
  store i32 0, i32* %j, align 4
  br label %for.cond13

for.cond13:                                       ; preds = %for.inc65, %if.end12
  %13 = load i32, i32* %j, align 4
  %14 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height14 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %14, i32 0, i32 15
  %15 = load i32, i32* %height14, align 4
  %div15 = sdiv i32 %15, 4
  %cmp16 = icmp slt i32 %13, %div15
  br i1 %cmp16, label %for.body18, label %for.end67

for.body18:                                       ; preds = %for.cond13
  %16 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %max_num_references = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %16, i32 0, i32 9
  %17 = load i32, i32* %max_num_references, align 4
  %conv19 = sext i32 %17 to i64
  %call20 = call noalias i8* @calloc(i64 %conv19, i64 8) #5
  %18 = bitcast i8* %call20 to i32***
  %19 = load i32******, i32******* %mv.addr, align 8
  %20 = load i32*****, i32****** %19, align 8
  %21 = load i32, i32* %i, align 4
  %idxprom21 = sext i32 %21 to i64
  %arrayidx22 = getelementptr inbounds i32****, i32***** %20, i64 %idxprom21
  %22 = load i32****, i32***** %arrayidx22, align 8
  %23 = load i32, i32* %j, align 4
  %idxprom23 = sext i32 %23 to i64
  %arrayidx24 = getelementptr inbounds i32***, i32**** %22, i64 %idxprom23
  store i32*** %18, i32**** %arrayidx24, align 8
  %cmp25 = icmp eq i32*** %18, null
  br i1 %cmp25, label %if.then27, label %if.end28

if.then27:                                        ; preds = %for.body18
  call void @no_mem_exit(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %if.end28

if.end28:                                         ; preds = %if.then27, %for.body18
  store i32 0, i32* %k, align 4
  br label %for.cond29

for.cond29:                                       ; preds = %for.inc62, %if.end28
  %24 = load i32, i32* %k, align 4
  %25 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %max_num_references30 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %25, i32 0, i32 9
  %26 = load i32, i32* %max_num_references30, align 4
  %cmp31 = icmp slt i32 %24, %26
  br i1 %cmp31, label %for.body33, label %for.end64

for.body33:                                       ; preds = %for.cond29
  %call34 = call noalias i8* @calloc(i64 9, i64 8) #5
  %27 = bitcast i8* %call34 to i32**
  %28 = load i32******, i32******* %mv.addr, align 8
  %29 = load i32*****, i32****** %28, align 8
  %30 = load i32, i32* %i, align 4
  %idxprom35 = sext i32 %30 to i64
  %arrayidx36 = getelementptr inbounds i32****, i32***** %29, i64 %idxprom35
  %31 = load i32****, i32***** %arrayidx36, align 8
  %32 = load i32, i32* %j, align 4
  %idxprom37 = sext i32 %32 to i64
  %arrayidx38 = getelementptr inbounds i32***, i32**** %31, i64 %idxprom37
  %33 = load i32***, i32**** %arrayidx38, align 8
  %34 = load i32, i32* %k, align 4
  %idxprom39 = sext i32 %34 to i64
  %arrayidx40 = getelementptr inbounds i32**, i32*** %33, i64 %idxprom39
  store i32** %27, i32*** %arrayidx40, align 8
  %cmp41 = icmp eq i32** %27, null
  br i1 %cmp41, label %if.then43, label %if.end44

if.then43:                                        ; preds = %for.body33
  call void @no_mem_exit(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %if.end44

if.end44:                                         ; preds = %if.then43, %for.body33
  store i32 0, i32* %l, align 4
  br label %for.cond45

for.cond45:                                       ; preds = %for.inc, %if.end44
  %35 = load i32, i32* %l, align 4
  %cmp46 = icmp slt i32 %35, 9
  br i1 %cmp46, label %for.body48, label %for.end

for.body48:                                       ; preds = %for.cond45
  %call49 = call noalias i8* @calloc(i64 3, i64 4) #5
  %36 = bitcast i8* %call49 to i32*
  %37 = load i32******, i32******* %mv.addr, align 8
  %38 = load i32*****, i32****** %37, align 8
  %39 = load i32, i32* %i, align 4
  %idxprom50 = sext i32 %39 to i64
  %arrayidx51 = getelementptr inbounds i32****, i32***** %38, i64 %idxprom50
  %40 = load i32****, i32***** %arrayidx51, align 8
  %41 = load i32, i32* %j, align 4
  %idxprom52 = sext i32 %41 to i64
  %arrayidx53 = getelementptr inbounds i32***, i32**** %40, i64 %idxprom52
  %42 = load i32***, i32**** %arrayidx53, align 8
  %43 = load i32, i32* %k, align 4
  %idxprom54 = sext i32 %43 to i64
  %arrayidx55 = getelementptr inbounds i32**, i32*** %42, i64 %idxprom54
  %44 = load i32**, i32*** %arrayidx55, align 8
  %45 = load i32, i32* %l, align 4
  %idxprom56 = sext i32 %45 to i64
  %arrayidx57 = getelementptr inbounds i32*, i32** %44, i64 %idxprom56
  store i32* %36, i32** %arrayidx57, align 8
  %cmp58 = icmp eq i32* %36, null
  br i1 %cmp58, label %if.then60, label %if.end61

if.then60:                                        ; preds = %for.body48
  call void @no_mem_exit(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %if.end61

if.end61:                                         ; preds = %if.then60, %for.body48
  br label %for.inc

for.inc:                                          ; preds = %if.end61
  %46 = load i32, i32* %l, align 4
  %inc = add nsw i32 %46, 1
  store i32 %inc, i32* %l, align 4
  br label %for.cond45

for.end:                                          ; preds = %for.cond45
  br label %for.inc62

for.inc62:                                        ; preds = %for.end
  %47 = load i32, i32* %k, align 4
  %inc63 = add nsw i32 %47, 1
  store i32 %inc63, i32* %k, align 4
  br label %for.cond29

for.end64:                                        ; preds = %for.cond29
  br label %for.inc65

for.inc65:                                        ; preds = %for.end64
  %48 = load i32, i32* %j, align 4
  %inc66 = add nsw i32 %48, 1
  store i32 %inc66, i32* %j, align 4
  br label %for.cond13

for.end67:                                        ; preds = %for.cond13
  br label %for.inc68

for.inc68:                                        ; preds = %for.end67
  %49 = load i32, i32* %i, align 4
  %inc69 = add nsw i32 %49, 1
  store i32 %inc69, i32* %i, align 4
  br label %for.cond

for.end70:                                        ; preds = %for.cond
  %50 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %width71 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %50, i32 0, i32 13
  %51 = load i32, i32* %width71, align 4
  %div72 = sdiv i32 %51, 4
  %52 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height73 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %52, i32 0, i32 15
  %53 = load i32, i32* %height73, align 4
  %mul = mul nsw i32 %div72, %53
  %div74 = sdiv i32 %mul, 4
  %54 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %max_num_references75 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %54, i32 0, i32 9
  %55 = load i32, i32* %max_num_references75, align 4
  %mul76 = mul nsw i32 %div74, %55
  %mul77 = mul nsw i32 %mul76, 9
  %mul78 = mul nsw i32 %mul77, 3
  %conv79 = sext i32 %mul78 to i64
  %mul80 = mul i64 %conv79, 4
  %conv81 = trunc i64 %mul80 to i32
  %56 = load i32, i32* %canary
  %57 = icmp eq i32 %56, 1425570407
  br i1 %57, label %58, label %func_exit

58:                                               ; preds = %for.end70, %func_exit
  ret i32 %conv81

func_exit:                                        ; preds = %for.end70
  call void @detect_breach()
  br label %58
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @AddUpSADQuarter.19(i32 %pic_pix_x, i32 %pic_pix_y, i32 %blocksize_x, i32 %blocksize_y, i32 %cand_mv_x, i32 %cand_mv_y, %struct.storable_picture* %ref_picture, i16** %orig_pic, i32 %Mvmcost, i32 %min_mcost, i32 %useABT) #0 {
entry:
  %img_width = alloca i32, align 4
  %blocksize_x.addr = alloca i32, align 4
  %ry = alloca i32, align 4
  %mcost = alloca i32, align 4
  %img_height = alloca i32, align 4
  %cand_mv_x.addr = alloca i32, align 4
  %canary = alloca i32
  store i32 1522801507, i32* %canary
  %curr_diff = alloca [16 x [16 x i32]], align 16
  %blocksize_y.addr = alloca i32, align 4
  %orig_line = alloca i16*, align 8
  %orig_pic.addr = alloca i16**, align 8
  %diff = alloca [16 x i32], align 16
  %ref_picture.addr = alloca %struct.storable_picture*, align 8
  %abort_search = alloca i32, align 4
  %kk = alloca i32, align 4
  %Mvmcost.addr = alloca i32, align 4
  %y0 = alloca i32, align 4
  %d = alloca i32*, align 8
  %xx = alloca i32, align 4
  %min_mcost.addr = alloca i32, align 4
  %rx0 = alloca i32, align 4
  %ry0 = alloca i32, align 4
  %ref_pic = alloca i16**, align 8
  %yy = alloca i32, align 4
  %cand_mv_y.addr = alloca i32, align 4
  %useABT.addr = alloca i32, align 4
  %pic_pix_x.addr = alloca i32, align 4
  %x0 = alloca i32, align 4
  %pic_pix_y.addr = alloca i32, align 4
  store i32 %pic_pix_x, i32* %pic_pix_x.addr, align 4
  store i32 %pic_pix_y, i32* %pic_pix_y.addr, align 4
  store i32 %blocksize_x, i32* %blocksize_x.addr, align 4
  store i32 %blocksize_y, i32* %blocksize_y.addr, align 4
  store i32 %cand_mv_x, i32* %cand_mv_x.addr, align 4
  store i32 %cand_mv_y, i32* %cand_mv_y.addr, align 4
  store %struct.storable_picture* %ref_picture, %struct.storable_picture** %ref_picture.addr, align 8
  store i16** %orig_pic, i16*** %orig_pic.addr, align 8
  store i32 %Mvmcost, i32* %Mvmcost.addr, align 4
  store i32 %min_mcost, i32* %min_mcost.addr, align 4
  store i32 %useABT, i32* %useABT.addr, align 4
  %0 = load i32, i32* %Mvmcost.addr, align 4
  store i32 %0, i32* %mcost, align 4
  %1 = load %struct.storable_picture*, %struct.storable_picture** %ref_picture.addr, align 8
  %imgY_ups = getelementptr inbounds %struct.storable_picture, %struct.storable_picture* %1, i32 0, i32 28
  %2 = load i16**, i16*** %imgY_ups, align 8
  store i16** %2, i16*** %ref_pic, align 8
  %3 = load %struct.storable_picture*, %struct.storable_picture** %ref_picture.addr, align 8
  %size_x = getelementptr inbounds %struct.storable_picture, %struct.storable_picture* %3, i32 0, i32 18
  %4 = load i32, i32* %size_x, align 8
  store i32 %4, i32* %img_width, align 4
  %5 = load %struct.storable_picture*, %struct.storable_picture** %ref_picture.addr, align 8
  %size_y = getelementptr inbounds %struct.storable_picture, %struct.storable_picture* %5, i32 0, i32 19
  %6 = load i32, i32* %size_y, align 4
  store i32 %6, i32* %img_height, align 4
  store i32 0, i32* %y0, align 4
  store i32 0, i32* %abort_search, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc182, %entry
  %7 = load i32, i32* %y0, align 4
  %8 = load i32, i32* %blocksize_y.addr, align 4
  %cmp = icmp slt i32 %7, %8
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %9 = load i32, i32* %abort_search, align 4
  %tobool = icmp ne i32 %9, 0
  %lnot = xor i1 %tobool, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %10 = phi i1 [ false, %for.cond ], [ %lnot, %land.rhs ]
  br i1 %10, label %for.body, label %for.end184

for.body:                                         ; preds = %land.end
  %11 = load i32, i32* %pic_pix_y.addr, align 4
  %12 = load i32, i32* %y0, align 4
  %add = add nsw i32 %11, %12
  %shl = shl i32 %add, 2
  %13 = load i32, i32* %cand_mv_y.addr, align 4
  %add1 = add nsw i32 %shl, %13
  store i32 %add1, i32* %ry0, align 4
  store i32 0, i32* %x0, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc179, %for.body
  %14 = load i32, i32* %x0, align 4
  %15 = load i32, i32* %blocksize_x.addr, align 4
  %cmp3 = icmp slt i32 %14, %15
  br i1 %cmp3, label %for.body4, label %for.end181

for.body4:                                        ; preds = %for.cond2
  %16 = load i32, i32* %pic_pix_x.addr, align 4
  %17 = load i32, i32* %x0, align 4
  %add5 = add nsw i32 %16, %17
  %shl6 = shl i32 %add5, 2
  %18 = load i32, i32* %cand_mv_x.addr, align 4
  %add7 = add nsw i32 %shl6, %18
  store i32 %add7, i32* %rx0, align 4
  %arraydecay = getelementptr inbounds [16 x i32], [16 x i32]* %diff, i64 0, i64 0
  store i32* %arraydecay, i32** %d, align 8
  %19 = load i16**, i16*** %orig_pic.addr, align 8
  %20 = load i32, i32* %y0, align 4
  %idxprom = sext i32 %20 to i64
  %arrayidx = getelementptr inbounds i16*, i16** %19, i64 %idxprom
  %21 = load i16*, i16** %arrayidx, align 8
  store i16* %21, i16** %orig_line, align 8
  %22 = load i32, i32* %ry0, align 4
  store i32 %22, i32* %ry, align 4
  %23 = load i16*, i16** %orig_line, align 8
  %24 = load i32, i32* %x0, align 4
  %idxprom8 = sext i32 %24 to i64
  %arrayidx9 = getelementptr inbounds i16, i16* %23, i64 %idxprom8
  %25 = load i16, i16* %arrayidx9, align 2
  %conv = zext i16 %25 to i32
  %26 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %27 = load i16**, i16*** %ref_pic, align 8
  %28 = load i32, i32* %ry, align 4
  %29 = load i32, i32* %rx0, align 4
  %30 = load i32, i32* %img_height, align 4
  %31 = load i32, i32* %img_width, align 4
  %call = call zeroext i16 %26(i16** %27, i32 %28, i32 %29, i32 %30, i32 %31)
  %conv10 = zext i16 %call to i32
  %sub = sub nsw i32 %conv, %conv10
  %32 = load i32*, i32** %d, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %32, i32 1
  store i32* %incdec.ptr, i32** %d, align 8
  store i32 %sub, i32* %32, align 4
  %33 = load i16*, i16** %orig_line, align 8
  %34 = load i32, i32* %x0, align 4
  %add11 = add nsw i32 %34, 1
  %idxprom12 = sext i32 %add11 to i64
  %arrayidx13 = getelementptr inbounds i16, i16* %33, i64 %idxprom12
  %35 = load i16, i16* %arrayidx13, align 2
  %conv14 = zext i16 %35 to i32
  %36 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %37 = load i16**, i16*** %ref_pic, align 8
  %38 = load i32, i32* %ry, align 4
  %39 = load i32, i32* %rx0, align 4
  %add15 = add nsw i32 %39, 4
  %40 = load i32, i32* %img_height, align 4
  %41 = load i32, i32* %img_width, align 4
  %call16 = call zeroext i16 %36(i16** %37, i32 %38, i32 %add15, i32 %40, i32 %41)
  %conv17 = zext i16 %call16 to i32
  %sub18 = sub nsw i32 %conv14, %conv17
  %42 = load i32*, i32** %d, align 8
  %incdec.ptr19 = getelementptr inbounds i32, i32* %42, i32 1
  store i32* %incdec.ptr19, i32** %d, align 8
  store i32 %sub18, i32* %42, align 4
  %43 = load i16*, i16** %orig_line, align 8
  %44 = load i32, i32* %x0, align 4
  %add20 = add nsw i32 %44, 2
  %idxprom21 = sext i32 %add20 to i64
  %arrayidx22 = getelementptr inbounds i16, i16* %43, i64 %idxprom21
  %45 = load i16, i16* %arrayidx22, align 2
  %conv23 = zext i16 %45 to i32
  %46 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %47 = load i16**, i16*** %ref_pic, align 8
  %48 = load i32, i32* %ry, align 4
  %49 = load i32, i32* %rx0, align 4
  %add24 = add nsw i32 %49, 8
  %50 = load i32, i32* %img_height, align 4
  %51 = load i32, i32* %img_width, align 4
  %call25 = call zeroext i16 %46(i16** %47, i32 %48, i32 %add24, i32 %50, i32 %51)
  %conv26 = zext i16 %call25 to i32
  %sub27 = sub nsw i32 %conv23, %conv26
  %52 = load i32*, i32** %d, align 8
  %incdec.ptr28 = getelementptr inbounds i32, i32* %52, i32 1
  store i32* %incdec.ptr28, i32** %d, align 8
  store i32 %sub27, i32* %52, align 4
  %53 = load i16*, i16** %orig_line, align 8
  %54 = load i32, i32* %x0, align 4
  %add29 = add nsw i32 %54, 3
  %idxprom30 = sext i32 %add29 to i64
  %arrayidx31 = getelementptr inbounds i16, i16* %53, i64 %idxprom30
  %55 = load i16, i16* %arrayidx31, align 2
  %conv32 = zext i16 %55 to i32
  %56 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %57 = load i16**, i16*** %ref_pic, align 8
  %58 = load i32, i32* %ry, align 4
  %59 = load i32, i32* %rx0, align 4
  %add33 = add nsw i32 %59, 12
  %60 = load i32, i32* %img_height, align 4
  %61 = load i32, i32* %img_width, align 4
  %call34 = call zeroext i16 %56(i16** %57, i32 %58, i32 %add33, i32 %60, i32 %61)
  %conv35 = zext i16 %call34 to i32
  %sub36 = sub nsw i32 %conv32, %conv35
  %62 = load i32*, i32** %d, align 8
  %incdec.ptr37 = getelementptr inbounds i32, i32* %62, i32 1
  store i32* %incdec.ptr37, i32** %d, align 8
  store i32 %sub36, i32* %62, align 4
  %63 = load i16**, i16*** %orig_pic.addr, align 8
  %64 = load i32, i32* %y0, align 4
  %add38 = add nsw i32 %64, 1
  %idxprom39 = sext i32 %add38 to i64
  %arrayidx40 = getelementptr inbounds i16*, i16** %63, i64 %idxprom39
  %65 = load i16*, i16** %arrayidx40, align 8
  store i16* %65, i16** %orig_line, align 8
  %66 = load i32, i32* %ry0, align 4
  %add41 = add nsw i32 %66, 4
  store i32 %add41, i32* %ry, align 4
  %67 = load i16*, i16** %orig_line, align 8
  %68 = load i32, i32* %x0, align 4
  %idxprom42 = sext i32 %68 to i64
  %arrayidx43 = getelementptr inbounds i16, i16* %67, i64 %idxprom42
  %69 = load i16, i16* %arrayidx43, align 2
  %conv44 = zext i16 %69 to i32
  %70 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %71 = load i16**, i16*** %ref_pic, align 8
  %72 = load i32, i32* %ry, align 4
  %73 = load i32, i32* %rx0, align 4
  %74 = load i32, i32* %img_height, align 4
  %75 = load i32, i32* %img_width, align 4
  %call45 = call zeroext i16 %70(i16** %71, i32 %72, i32 %73, i32 %74, i32 %75)
  %conv46 = zext i16 %call45 to i32
  %sub47 = sub nsw i32 %conv44, %conv46
  %76 = load i32*, i32** %d, align 8
  %incdec.ptr48 = getelementptr inbounds i32, i32* %76, i32 1
  store i32* %incdec.ptr48, i32** %d, align 8
  store i32 %sub47, i32* %76, align 4
  %77 = load i16*, i16** %orig_line, align 8
  %78 = load i32, i32* %x0, align 4
  %add49 = add nsw i32 %78, 1
  %idxprom50 = sext i32 %add49 to i64
  %arrayidx51 = getelementptr inbounds i16, i16* %77, i64 %idxprom50
  %79 = load i16, i16* %arrayidx51, align 2
  %conv52 = zext i16 %79 to i32
  %80 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %81 = load i16**, i16*** %ref_pic, align 8
  %82 = load i32, i32* %ry, align 4
  %83 = load i32, i32* %rx0, align 4
  %add53 = add nsw i32 %83, 4
  %84 = load i32, i32* %img_height, align 4
  %85 = load i32, i32* %img_width, align 4
  %call54 = call zeroext i16 %80(i16** %81, i32 %82, i32 %add53, i32 %84, i32 %85)
  %conv55 = zext i16 %call54 to i32
  %sub56 = sub nsw i32 %conv52, %conv55
  %86 = load i32*, i32** %d, align 8
  %incdec.ptr57 = getelementptr inbounds i32, i32* %86, i32 1
  store i32* %incdec.ptr57, i32** %d, align 8
  store i32 %sub56, i32* %86, align 4
  %87 = load i16*, i16** %orig_line, align 8
  %88 = load i32, i32* %x0, align 4
  %add58 = add nsw i32 %88, 2
  %idxprom59 = sext i32 %add58 to i64
  %arrayidx60 = getelementptr inbounds i16, i16* %87, i64 %idxprom59
  %89 = load i16, i16* %arrayidx60, align 2
  %conv61 = zext i16 %89 to i32
  %90 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %91 = load i16**, i16*** %ref_pic, align 8
  %92 = load i32, i32* %ry, align 4
  %93 = load i32, i32* %rx0, align 4
  %add62 = add nsw i32 %93, 8
  %94 = load i32, i32* %img_height, align 4
  %95 = load i32, i32* %img_width, align 4
  %call63 = call zeroext i16 %90(i16** %91, i32 %92, i32 %add62, i32 %94, i32 %95)
  %conv64 = zext i16 %call63 to i32
  %sub65 = sub nsw i32 %conv61, %conv64
  %96 = load i32*, i32** %d, align 8
  %incdec.ptr66 = getelementptr inbounds i32, i32* %96, i32 1
  store i32* %incdec.ptr66, i32** %d, align 8
  store i32 %sub65, i32* %96, align 4
  %97 = load i16*, i16** %orig_line, align 8
  %98 = load i32, i32* %x0, align 4
  %add67 = add nsw i32 %98, 3
  %idxprom68 = sext i32 %add67 to i64
  %arrayidx69 = getelementptr inbounds i16, i16* %97, i64 %idxprom68
  %99 = load i16, i16* %arrayidx69, align 2
  %conv70 = zext i16 %99 to i32
  %100 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %101 = load i16**, i16*** %ref_pic, align 8
  %102 = load i32, i32* %ry, align 4
  %103 = load i32, i32* %rx0, align 4
  %add71 = add nsw i32 %103, 12
  %104 = load i32, i32* %img_height, align 4
  %105 = load i32, i32* %img_width, align 4
  %call72 = call zeroext i16 %100(i16** %101, i32 %102, i32 %add71, i32 %104, i32 %105)
  %conv73 = zext i16 %call72 to i32
  %sub74 = sub nsw i32 %conv70, %conv73
  %106 = load i32*, i32** %d, align 8
  %incdec.ptr75 = getelementptr inbounds i32, i32* %106, i32 1
  store i32* %incdec.ptr75, i32** %d, align 8
  store i32 %sub74, i32* %106, align 4
  %107 = load i16**, i16*** %orig_pic.addr, align 8
  %108 = load i32, i32* %y0, align 4
  %add76 = add nsw i32 %108, 2
  %idxprom77 = sext i32 %add76 to i64
  %arrayidx78 = getelementptr inbounds i16*, i16** %107, i64 %idxprom77
  %109 = load i16*, i16** %arrayidx78, align 8
  store i16* %109, i16** %orig_line, align 8
  %110 = load i32, i32* %ry0, align 4
  %add79 = add nsw i32 %110, 8
  store i32 %add79, i32* %ry, align 4
  %111 = load i16*, i16** %orig_line, align 8
  %112 = load i32, i32* %x0, align 4
  %idxprom80 = sext i32 %112 to i64
  %arrayidx81 = getelementptr inbounds i16, i16* %111, i64 %idxprom80
  %113 = load i16, i16* %arrayidx81, align 2
  %conv82 = zext i16 %113 to i32
  %114 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %115 = load i16**, i16*** %ref_pic, align 8
  %116 = load i32, i32* %ry, align 4
  %117 = load i32, i32* %rx0, align 4
  %118 = load i32, i32* %img_height, align 4
  %119 = load i32, i32* %img_width, align 4
  %call83 = call zeroext i16 %114(i16** %115, i32 %116, i32 %117, i32 %118, i32 %119)
  %conv84 = zext i16 %call83 to i32
  %sub85 = sub nsw i32 %conv82, %conv84
  %120 = load i32*, i32** %d, align 8
  %incdec.ptr86 = getelementptr inbounds i32, i32* %120, i32 1
  store i32* %incdec.ptr86, i32** %d, align 8
  store i32 %sub85, i32* %120, align 4
  %121 = load i16*, i16** %orig_line, align 8
  %122 = load i32, i32* %x0, align 4
  %add87 = add nsw i32 %122, 1
  %idxprom88 = sext i32 %add87 to i64
  %arrayidx89 = getelementptr inbounds i16, i16* %121, i64 %idxprom88
  %123 = load i16, i16* %arrayidx89, align 2
  %conv90 = zext i16 %123 to i32
  %124 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %125 = load i16**, i16*** %ref_pic, align 8
  %126 = load i32, i32* %ry, align 4
  %127 = load i32, i32* %rx0, align 4
  %add91 = add nsw i32 %127, 4
  %128 = load i32, i32* %img_height, align 4
  %129 = load i32, i32* %img_width, align 4
  %call92 = call zeroext i16 %124(i16** %125, i32 %126, i32 %add91, i32 %128, i32 %129)
  %conv93 = zext i16 %call92 to i32
  %sub94 = sub nsw i32 %conv90, %conv93
  %130 = load i32*, i32** %d, align 8
  %incdec.ptr95 = getelementptr inbounds i32, i32* %130, i32 1
  store i32* %incdec.ptr95, i32** %d, align 8
  store i32 %sub94, i32* %130, align 4
  %131 = load i16*, i16** %orig_line, align 8
  %132 = load i32, i32* %x0, align 4
  %add96 = add nsw i32 %132, 2
  %idxprom97 = sext i32 %add96 to i64
  %arrayidx98 = getelementptr inbounds i16, i16* %131, i64 %idxprom97
  %133 = load i16, i16* %arrayidx98, align 2
  %conv99 = zext i16 %133 to i32
  %134 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %135 = load i16**, i16*** %ref_pic, align 8
  %136 = load i32, i32* %ry, align 4
  %137 = load i32, i32* %rx0, align 4
  %add100 = add nsw i32 %137, 8
  %138 = load i32, i32* %img_height, align 4
  %139 = load i32, i32* %img_width, align 4
  %call101 = call zeroext i16 %134(i16** %135, i32 %136, i32 %add100, i32 %138, i32 %139)
  %conv102 = zext i16 %call101 to i32
  %sub103 = sub nsw i32 %conv99, %conv102
  %140 = load i32*, i32** %d, align 8
  %incdec.ptr104 = getelementptr inbounds i32, i32* %140, i32 1
  store i32* %incdec.ptr104, i32** %d, align 8
  store i32 %sub103, i32* %140, align 4
  %141 = load i16*, i16** %orig_line, align 8
  %142 = load i32, i32* %x0, align 4
  %add105 = add nsw i32 %142, 3
  %idxprom106 = sext i32 %add105 to i64
  %arrayidx107 = getelementptr inbounds i16, i16* %141, i64 %idxprom106
  %143 = load i16, i16* %arrayidx107, align 2
  %conv108 = zext i16 %143 to i32
  %144 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %145 = load i16**, i16*** %ref_pic, align 8
  %146 = load i32, i32* %ry, align 4
  %147 = load i32, i32* %rx0, align 4
  %add109 = add nsw i32 %147, 12
  %148 = load i32, i32* %img_height, align 4
  %149 = load i32, i32* %img_width, align 4
  %call110 = call zeroext i16 %144(i16** %145, i32 %146, i32 %add109, i32 %148, i32 %149)
  %conv111 = zext i16 %call110 to i32
  %sub112 = sub nsw i32 %conv108, %conv111
  %150 = load i32*, i32** %d, align 8
  %incdec.ptr113 = getelementptr inbounds i32, i32* %150, i32 1
  store i32* %incdec.ptr113, i32** %d, align 8
  store i32 %sub112, i32* %150, align 4
  %151 = load i16**, i16*** %orig_pic.addr, align 8
  %152 = load i32, i32* %y0, align 4
  %add114 = add nsw i32 %152, 3
  %idxprom115 = sext i32 %add114 to i64
  %arrayidx116 = getelementptr inbounds i16*, i16** %151, i64 %idxprom115
  %153 = load i16*, i16** %arrayidx116, align 8
  store i16* %153, i16** %orig_line, align 8
  %154 = load i32, i32* %ry0, align 4
  %add117 = add nsw i32 %154, 12
  store i32 %add117, i32* %ry, align 4
  %155 = load i16*, i16** %orig_line, align 8
  %156 = load i32, i32* %x0, align 4
  %idxprom118 = sext i32 %156 to i64
  %arrayidx119 = getelementptr inbounds i16, i16* %155, i64 %idxprom118
  %157 = load i16, i16* %arrayidx119, align 2
  %conv120 = zext i16 %157 to i32
  %158 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %159 = load i16**, i16*** %ref_pic, align 8
  %160 = load i32, i32* %ry, align 4
  %161 = load i32, i32* %rx0, align 4
  %162 = load i32, i32* %img_height, align 4
  %163 = load i32, i32* %img_width, align 4
  %call121 = call zeroext i16 %158(i16** %159, i32 %160, i32 %161, i32 %162, i32 %163)
  %conv122 = zext i16 %call121 to i32
  %sub123 = sub nsw i32 %conv120, %conv122
  %164 = load i32*, i32** %d, align 8
  %incdec.ptr124 = getelementptr inbounds i32, i32* %164, i32 1
  store i32* %incdec.ptr124, i32** %d, align 8
  store i32 %sub123, i32* %164, align 4
  %165 = load i16*, i16** %orig_line, align 8
  %166 = load i32, i32* %x0, align 4
  %add125 = add nsw i32 %166, 1
  %idxprom126 = sext i32 %add125 to i64
  %arrayidx127 = getelementptr inbounds i16, i16* %165, i64 %idxprom126
  %167 = load i16, i16* %arrayidx127, align 2
  %conv128 = zext i16 %167 to i32
  %168 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %169 = load i16**, i16*** %ref_pic, align 8
  %170 = load i32, i32* %ry, align 4
  %171 = load i32, i32* %rx0, align 4
  %add129 = add nsw i32 %171, 4
  %172 = load i32, i32* %img_height, align 4
  %173 = load i32, i32* %img_width, align 4
  %call130 = call zeroext i16 %168(i16** %169, i32 %170, i32 %add129, i32 %172, i32 %173)
  %conv131 = zext i16 %call130 to i32
  %sub132 = sub nsw i32 %conv128, %conv131
  %174 = load i32*, i32** %d, align 8
  %incdec.ptr133 = getelementptr inbounds i32, i32* %174, i32 1
  store i32* %incdec.ptr133, i32** %d, align 8
  store i32 %sub132, i32* %174, align 4
  %175 = load i16*, i16** %orig_line, align 8
  %176 = load i32, i32* %x0, align 4
  %add134 = add nsw i32 %176, 2
  %idxprom135 = sext i32 %add134 to i64
  %arrayidx136 = getelementptr inbounds i16, i16* %175, i64 %idxprom135
  %177 = load i16, i16* %arrayidx136, align 2
  %conv137 = zext i16 %177 to i32
  %178 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %179 = load i16**, i16*** %ref_pic, align 8
  %180 = load i32, i32* %ry, align 4
  %181 = load i32, i32* %rx0, align 4
  %add138 = add nsw i32 %181, 8
  %182 = load i32, i32* %img_height, align 4
  %183 = load i32, i32* %img_width, align 4
  %call139 = call zeroext i16 %178(i16** %179, i32 %180, i32 %add138, i32 %182, i32 %183)
  %conv140 = zext i16 %call139 to i32
  %sub141 = sub nsw i32 %conv137, %conv140
  %184 = load i32*, i32** %d, align 8
  %incdec.ptr142 = getelementptr inbounds i32, i32* %184, i32 1
  store i32* %incdec.ptr142, i32** %d, align 8
  store i32 %sub141, i32* %184, align 4
  %185 = load i16*, i16** %orig_line, align 8
  %186 = load i32, i32* %x0, align 4
  %add143 = add nsw i32 %186, 3
  %idxprom144 = sext i32 %add143 to i64
  %arrayidx145 = getelementptr inbounds i16, i16* %185, i64 %idxprom144
  %187 = load i16, i16* %arrayidx145, align 2
  %conv146 = zext i16 %187 to i32
  %188 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %189 = load i16**, i16*** %ref_pic, align 8
  %190 = load i32, i32* %ry, align 4
  %191 = load i32, i32* %rx0, align 4
  %add147 = add nsw i32 %191, 12
  %192 = load i32, i32* %img_height, align 4
  %193 = load i32, i32* %img_width, align 4
  %call148 = call zeroext i16 %188(i16** %189, i32 %190, i32 %add147, i32 %192, i32 %193)
  %conv149 = zext i16 %call148 to i32
  %sub150 = sub nsw i32 %conv146, %conv149
  %194 = load i32*, i32** %d, align 8
  store i32 %sub150, i32* %194, align 4
  %195 = load i32, i32* %useABT.addr, align 4
  %tobool151 = icmp ne i32 %195, 0
  br i1 %tobool151, label %if.else, label %if.then

if.then:                                          ; preds = %for.body4
  %arraydecay152 = getelementptr inbounds [16 x i32], [16 x i32]* %diff, i64 0, i64 0
  %196 = load %struct.InputParameters*, %struct.InputParameters** @input, align 8
  %hadamard = getelementptr inbounds %struct.InputParameters, %struct.InputParameters* %196, i32 0, i32 6
  %197 = load i32, i32* %hadamard, align 8
  %call153 = call i32 @SATD(i32* %arraydecay152, i32 %197)
  %198 = load i32, i32* %mcost, align 4
  %add154 = add nsw i32 %198, %call153
  store i32 %add154, i32* %mcost, align 4
  %199 = load i32, i32* %min_mcost.addr, align 4
  %cmp155 = icmp sgt i32 %add154, %199
  br i1 %cmp155, label %if.then157, label %if.end

if.then157:                                       ; preds = %if.then
  store i32 1, i32* %abort_search, align 4
  br label %for.end181

if.end:                                           ; preds = %if.then
  br label %if.end178

if.else:                                          ; preds = %for.body4
  %200 = load i32, i32* %y0, align 4
  store i32 %200, i32* %yy, align 4
  store i32 0, i32* %kk, align 4
  br label %for.cond158

for.cond158:                                      ; preds = %for.inc175, %if.else
  %201 = load i32, i32* %yy, align 4
  %202 = load i32, i32* %y0, align 4
  %add159 = add nsw i32 %202, 4
  %cmp160 = icmp slt i32 %201, %add159
  br i1 %cmp160, label %for.body162, label %for.end177

for.body162:                                      ; preds = %for.cond158
  %203 = load i32, i32* %x0, align 4
  store i32 %203, i32* %xx, align 4
  br label %for.cond163

for.cond163:                                      ; preds = %for.inc, %for.body162
  %204 = load i32, i32* %xx, align 4
  %205 = load i32, i32* %x0, align 4
  %add164 = add nsw i32 %205, 4
  %cmp165 = icmp slt i32 %204, %add164
  br i1 %cmp165, label %for.body167, label %for.end

for.body167:                                      ; preds = %for.cond163
  %206 = load i32, i32* %kk, align 4
  %idxprom168 = sext i32 %206 to i64
  %arrayidx169 = getelementptr inbounds [16 x i32], [16 x i32]* %diff, i64 0, i64 %idxprom168
  %207 = load i32, i32* %arrayidx169, align 4
  %208 = load i32, i32* %yy, align 4
  %idxprom170 = sext i32 %208 to i64
  %arrayidx171 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %curr_diff, i64 0, i64 %idxprom170
  %209 = load i32, i32* %xx, align 4
  %idxprom172 = sext i32 %209 to i64
  %arrayidx173 = getelementptr inbounds [16 x i32], [16 x i32]* %arrayidx171, i64 0, i64 %idxprom172
  store i32 %207, i32* %arrayidx173, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body167
  %210 = load i32, i32* %xx, align 4
  %inc = add nsw i32 %210, 1
  store i32 %inc, i32* %xx, align 4
  %211 = load i32, i32* %kk, align 4
  %inc174 = add nsw i32 %211, 1
  store i32 %inc174, i32* %kk, align 4
  br label %for.cond163

for.end:                                          ; preds = %for.cond163
  br label %for.inc175

for.inc175:                                       ; preds = %for.end
  %212 = load i32, i32* %yy, align 4
  %inc176 = add nsw i32 %212, 1
  store i32 %inc176, i32* %yy, align 4
  br label %for.cond158

for.end177:                                       ; preds = %for.cond158
  br label %if.end178

if.end178:                                        ; preds = %for.end177, %if.end
  br label %for.inc179

for.inc179:                                       ; preds = %if.end178
  %213 = load i32, i32* %x0, align 4
  %add180 = add nsw i32 %213, 4
  store i32 %add180, i32* %x0, align 4
  br label %for.cond2

for.end181:                                       ; preds = %if.then157, %for.cond2
  br label %for.inc182

for.inc182:                                       ; preds = %for.end181
  %214 = load i32, i32* %y0, align 4
  %add183 = add nsw i32 %214, 4
  store i32 %add183, i32* %y0, align 4
  br label %for.cond

for.end184:                                       ; preds = %land.end
  %215 = load i32, i32* %mcost, align 4
  %216 = load i32, i32* %canary
  %217 = icmp eq i32 %216, 1522801507
  br i1 %217, label %218, label %func_exit

218:                                              ; preds = %for.end184, %func_exit
  ret i32 %215

func_exit:                                        ; preds = %for.end184
  call void @detect_breach()
  br label %218
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @AddUpSADQuarter.20(i32 %pic_pix_x, i32 %pic_pix_y, i32 %blocksize_x, i32 %blocksize_y, i32 %cand_mv_x, i32 %cand_mv_y, %struct.storable_picture* %ref_picture, i16** %orig_pic, i32 %Mvmcost, i32 %min_mcost, i32 %useABT) #0 {
entry:
  %cand_mv_x.addr = alloca i32, align 4
  %ref_pic = alloca i16**, align 8
  %canary = alloca i32
  store i32 119720905, i32* %canary
  %cand_mv_y.addr = alloca i32, align 4
  %img_width = alloca i32, align 4
  %blocksize_y.addr = alloca i32, align 4
  %x0 = alloca i32, align 4
  %ry = alloca i32, align 4
  %Mvmcost.addr = alloca i32, align 4
  %useABT.addr = alloca i32, align 4
  %ry0 = alloca i32, align 4
  %img_height = alloca i32, align 4
  %kk = alloca i32, align 4
  %yy = alloca i32, align 4
  %min_mcost.addr = alloca i32, align 4
  %orig_line = alloca i16*, align 8
  %pic_pix_y.addr = alloca i32, align 4
  %pic_pix_x.addr = alloca i32, align 4
  %d = alloca i32*, align 8
  %abort_search = alloca i32, align 4
  %diff = alloca [16 x i32], align 16
  %ref_picture.addr = alloca %struct.storable_picture*, align 8
  %curr_diff = alloca [16 x [16 x i32]], align 16
  %blocksize_x.addr = alloca i32, align 4
  %orig_pic.addr = alloca i16**, align 8
  %y0 = alloca i32, align 4
  %xx = alloca i32, align 4
  %rx0 = alloca i32, align 4
  %mcost = alloca i32, align 4
  store i32 %pic_pix_x, i32* %pic_pix_x.addr, align 4
  store i32 %pic_pix_y, i32* %pic_pix_y.addr, align 4
  store i32 %blocksize_x, i32* %blocksize_x.addr, align 4
  store i32 %blocksize_y, i32* %blocksize_y.addr, align 4
  store i32 %cand_mv_x, i32* %cand_mv_x.addr, align 4
  store i32 %cand_mv_y, i32* %cand_mv_y.addr, align 4
  store %struct.storable_picture* %ref_picture, %struct.storable_picture** %ref_picture.addr, align 8
  store i16** %orig_pic, i16*** %orig_pic.addr, align 8
  store i32 %Mvmcost, i32* %Mvmcost.addr, align 4
  store i32 %min_mcost, i32* %min_mcost.addr, align 4
  store i32 %useABT, i32* %useABT.addr, align 4
  %0 = load i32, i32* %Mvmcost.addr, align 4
  store i32 %0, i32* %mcost, align 4
  %1 = load %struct.storable_picture*, %struct.storable_picture** %ref_picture.addr, align 8
  %imgY_ups = getelementptr inbounds %struct.storable_picture, %struct.storable_picture* %1, i32 0, i32 28
  %2 = load i16**, i16*** %imgY_ups, align 8
  store i16** %2, i16*** %ref_pic, align 8
  %3 = load %struct.storable_picture*, %struct.storable_picture** %ref_picture.addr, align 8
  %size_x = getelementptr inbounds %struct.storable_picture, %struct.storable_picture* %3, i32 0, i32 18
  %4 = load i32, i32* %size_x, align 8
  store i32 %4, i32* %img_width, align 4
  %5 = load %struct.storable_picture*, %struct.storable_picture** %ref_picture.addr, align 8
  %size_y = getelementptr inbounds %struct.storable_picture, %struct.storable_picture* %5, i32 0, i32 19
  %6 = load i32, i32* %size_y, align 4
  store i32 %6, i32* %img_height, align 4
  store i32 0, i32* %y0, align 4
  store i32 0, i32* %abort_search, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc182, %entry
  %7 = load i32, i32* %y0, align 4
  %8 = load i32, i32* %blocksize_y.addr, align 4
  %cmp = icmp slt i32 %7, %8
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %9 = load i32, i32* %abort_search, align 4
  %tobool = icmp ne i32 %9, 0
  %lnot = xor i1 %tobool, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %10 = phi i1 [ false, %for.cond ], [ %lnot, %land.rhs ]
  br i1 %10, label %for.body, label %for.end184

for.body:                                         ; preds = %land.end
  %11 = load i32, i32* %pic_pix_y.addr, align 4
  %12 = load i32, i32* %y0, align 4
  %add = add nsw i32 %11, %12
  %shl = shl i32 %add, 2
  %13 = load i32, i32* %cand_mv_y.addr, align 4
  %add1 = add nsw i32 %shl, %13
  store i32 %add1, i32* %ry0, align 4
  store i32 0, i32* %x0, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc179, %for.body
  %14 = load i32, i32* %x0, align 4
  %15 = load i32, i32* %blocksize_x.addr, align 4
  %cmp3 = icmp slt i32 %14, %15
  br i1 %cmp3, label %for.body4, label %for.end181

for.body4:                                        ; preds = %for.cond2
  %16 = load i32, i32* %pic_pix_x.addr, align 4
  %17 = load i32, i32* %x0, align 4
  %add5 = add nsw i32 %16, %17
  %shl6 = shl i32 %add5, 2
  %18 = load i32, i32* %cand_mv_x.addr, align 4
  %add7 = add nsw i32 %shl6, %18
  store i32 %add7, i32* %rx0, align 4
  %arraydecay = getelementptr inbounds [16 x i32], [16 x i32]* %diff, i64 0, i64 0
  store i32* %arraydecay, i32** %d, align 8
  %19 = load i16**, i16*** %orig_pic.addr, align 8
  %20 = load i32, i32* %y0, align 4
  %idxprom = sext i32 %20 to i64
  %arrayidx = getelementptr inbounds i16*, i16** %19, i64 %idxprom
  %21 = load i16*, i16** %arrayidx, align 8
  store i16* %21, i16** %orig_line, align 8
  %22 = load i32, i32* %ry0, align 4
  store i32 %22, i32* %ry, align 4
  %23 = load i16*, i16** %orig_line, align 8
  %24 = load i32, i32* %x0, align 4
  %idxprom8 = sext i32 %24 to i64
  %arrayidx9 = getelementptr inbounds i16, i16* %23, i64 %idxprom8
  %25 = load i16, i16* %arrayidx9, align 2
  %conv = zext i16 %25 to i32
  %26 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %27 = load i16**, i16*** %ref_pic, align 8
  %28 = load i32, i32* %ry, align 4
  %29 = load i32, i32* %rx0, align 4
  %30 = load i32, i32* %img_height, align 4
  %31 = load i32, i32* %img_width, align 4
  %call = call zeroext i16 %26(i16** %27, i32 %28, i32 %29, i32 %30, i32 %31)
  %conv10 = zext i16 %call to i32
  %sub = sub nsw i32 %conv, %conv10
  %32 = load i32*, i32** %d, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %32, i32 1
  store i32* %incdec.ptr, i32** %d, align 8
  store i32 %sub, i32* %32, align 4
  %33 = load i16*, i16** %orig_line, align 8
  %34 = load i32, i32* %x0, align 4
  %add11 = add nsw i32 %34, 1
  %idxprom12 = sext i32 %add11 to i64
  %arrayidx13 = getelementptr inbounds i16, i16* %33, i64 %idxprom12
  %35 = load i16, i16* %arrayidx13, align 2
  %conv14 = zext i16 %35 to i32
  %36 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %37 = load i16**, i16*** %ref_pic, align 8
  %38 = load i32, i32* %ry, align 4
  %39 = load i32, i32* %rx0, align 4
  %add15 = add nsw i32 %39, 4
  %40 = load i32, i32* %img_height, align 4
  %41 = load i32, i32* %img_width, align 4
  %call16 = call zeroext i16 %36(i16** %37, i32 %38, i32 %add15, i32 %40, i32 %41)
  %conv17 = zext i16 %call16 to i32
  %sub18 = sub nsw i32 %conv14, %conv17
  %42 = load i32*, i32** %d, align 8
  %incdec.ptr19 = getelementptr inbounds i32, i32* %42, i32 1
  store i32* %incdec.ptr19, i32** %d, align 8
  store i32 %sub18, i32* %42, align 4
  %43 = load i16*, i16** %orig_line, align 8
  %44 = load i32, i32* %x0, align 4
  %add20 = add nsw i32 %44, 2
  %idxprom21 = sext i32 %add20 to i64
  %arrayidx22 = getelementptr inbounds i16, i16* %43, i64 %idxprom21
  %45 = load i16, i16* %arrayidx22, align 2
  %conv23 = zext i16 %45 to i32
  %46 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %47 = load i16**, i16*** %ref_pic, align 8
  %48 = load i32, i32* %ry, align 4
  %49 = load i32, i32* %rx0, align 4
  %add24 = add nsw i32 %49, 8
  %50 = load i32, i32* %img_height, align 4
  %51 = load i32, i32* %img_width, align 4
  %call25 = call zeroext i16 %46(i16** %47, i32 %48, i32 %add24, i32 %50, i32 %51)
  %conv26 = zext i16 %call25 to i32
  %sub27 = sub nsw i32 %conv23, %conv26
  %52 = load i32*, i32** %d, align 8
  %incdec.ptr28 = getelementptr inbounds i32, i32* %52, i32 1
  store i32* %incdec.ptr28, i32** %d, align 8
  store i32 %sub27, i32* %52, align 4
  %53 = load i16*, i16** %orig_line, align 8
  %54 = load i32, i32* %x0, align 4
  %add29 = add nsw i32 %54, 3
  %idxprom30 = sext i32 %add29 to i64
  %arrayidx31 = getelementptr inbounds i16, i16* %53, i64 %idxprom30
  %55 = load i16, i16* %arrayidx31, align 2
  %conv32 = zext i16 %55 to i32
  %56 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %57 = load i16**, i16*** %ref_pic, align 8
  %58 = load i32, i32* %ry, align 4
  %59 = load i32, i32* %rx0, align 4
  %add33 = add nsw i32 %59, 12
  %60 = load i32, i32* %img_height, align 4
  %61 = load i32, i32* %img_width, align 4
  %call34 = call zeroext i16 %56(i16** %57, i32 %58, i32 %add33, i32 %60, i32 %61)
  %conv35 = zext i16 %call34 to i32
  %sub36 = sub nsw i32 %conv32, %conv35
  %62 = load i32*, i32** %d, align 8
  %incdec.ptr37 = getelementptr inbounds i32, i32* %62, i32 1
  store i32* %incdec.ptr37, i32** %d, align 8
  store i32 %sub36, i32* %62, align 4
  %63 = load i16**, i16*** %orig_pic.addr, align 8
  %64 = load i32, i32* %y0, align 4
  %add38 = add nsw i32 %64, 1
  %idxprom39 = sext i32 %add38 to i64
  %arrayidx40 = getelementptr inbounds i16*, i16** %63, i64 %idxprom39
  %65 = load i16*, i16** %arrayidx40, align 8
  store i16* %65, i16** %orig_line, align 8
  %66 = load i32, i32* %ry0, align 4
  %add41 = add nsw i32 %66, 4
  store i32 %add41, i32* %ry, align 4
  %67 = load i16*, i16** %orig_line, align 8
  %68 = load i32, i32* %x0, align 4
  %idxprom42 = sext i32 %68 to i64
  %arrayidx43 = getelementptr inbounds i16, i16* %67, i64 %idxprom42
  %69 = load i16, i16* %arrayidx43, align 2
  %conv44 = zext i16 %69 to i32
  %70 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %71 = load i16**, i16*** %ref_pic, align 8
  %72 = load i32, i32* %ry, align 4
  %73 = load i32, i32* %rx0, align 4
  %74 = load i32, i32* %img_height, align 4
  %75 = load i32, i32* %img_width, align 4
  %call45 = call zeroext i16 %70(i16** %71, i32 %72, i32 %73, i32 %74, i32 %75)
  %conv46 = zext i16 %call45 to i32
  %sub47 = sub nsw i32 %conv44, %conv46
  %76 = load i32*, i32** %d, align 8
  %incdec.ptr48 = getelementptr inbounds i32, i32* %76, i32 1
  store i32* %incdec.ptr48, i32** %d, align 8
  store i32 %sub47, i32* %76, align 4
  %77 = load i16*, i16** %orig_line, align 8
  %78 = load i32, i32* %x0, align 4
  %add49 = add nsw i32 %78, 1
  %idxprom50 = sext i32 %add49 to i64
  %arrayidx51 = getelementptr inbounds i16, i16* %77, i64 %idxprom50
  %79 = load i16, i16* %arrayidx51, align 2
  %conv52 = zext i16 %79 to i32
  %80 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %81 = load i16**, i16*** %ref_pic, align 8
  %82 = load i32, i32* %ry, align 4
  %83 = load i32, i32* %rx0, align 4
  %add53 = add nsw i32 %83, 4
  %84 = load i32, i32* %img_height, align 4
  %85 = load i32, i32* %img_width, align 4
  %call54 = call zeroext i16 %80(i16** %81, i32 %82, i32 %add53, i32 %84, i32 %85)
  %conv55 = zext i16 %call54 to i32
  %sub56 = sub nsw i32 %conv52, %conv55
  %86 = load i32*, i32** %d, align 8
  %incdec.ptr57 = getelementptr inbounds i32, i32* %86, i32 1
  store i32* %incdec.ptr57, i32** %d, align 8
  store i32 %sub56, i32* %86, align 4
  %87 = load i16*, i16** %orig_line, align 8
  %88 = load i32, i32* %x0, align 4
  %add58 = add nsw i32 %88, 2
  %idxprom59 = sext i32 %add58 to i64
  %arrayidx60 = getelementptr inbounds i16, i16* %87, i64 %idxprom59
  %89 = load i16, i16* %arrayidx60, align 2
  %conv61 = zext i16 %89 to i32
  %90 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %91 = load i16**, i16*** %ref_pic, align 8
  %92 = load i32, i32* %ry, align 4
  %93 = load i32, i32* %rx0, align 4
  %add62 = add nsw i32 %93, 8
  %94 = load i32, i32* %img_height, align 4
  %95 = load i32, i32* %img_width, align 4
  %call63 = call zeroext i16 %90(i16** %91, i32 %92, i32 %add62, i32 %94, i32 %95)
  %conv64 = zext i16 %call63 to i32
  %sub65 = sub nsw i32 %conv61, %conv64
  %96 = load i32*, i32** %d, align 8
  %incdec.ptr66 = getelementptr inbounds i32, i32* %96, i32 1
  store i32* %incdec.ptr66, i32** %d, align 8
  store i32 %sub65, i32* %96, align 4
  %97 = load i16*, i16** %orig_line, align 8
  %98 = load i32, i32* %x0, align 4
  %add67 = add nsw i32 %98, 3
  %idxprom68 = sext i32 %add67 to i64
  %arrayidx69 = getelementptr inbounds i16, i16* %97, i64 %idxprom68
  %99 = load i16, i16* %arrayidx69, align 2
  %conv70 = zext i16 %99 to i32
  %100 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %101 = load i16**, i16*** %ref_pic, align 8
  %102 = load i32, i32* %ry, align 4
  %103 = load i32, i32* %rx0, align 4
  %add71 = add nsw i32 %103, 12
  %104 = load i32, i32* %img_height, align 4
  %105 = load i32, i32* %img_width, align 4
  %call72 = call zeroext i16 %100(i16** %101, i32 %102, i32 %add71, i32 %104, i32 %105)
  %conv73 = zext i16 %call72 to i32
  %sub74 = sub nsw i32 %conv70, %conv73
  %106 = load i32*, i32** %d, align 8
  %incdec.ptr75 = getelementptr inbounds i32, i32* %106, i32 1
  store i32* %incdec.ptr75, i32** %d, align 8
  store i32 %sub74, i32* %106, align 4
  %107 = load i16**, i16*** %orig_pic.addr, align 8
  %108 = load i32, i32* %y0, align 4
  %add76 = add nsw i32 %108, 2
  %idxprom77 = sext i32 %add76 to i64
  %arrayidx78 = getelementptr inbounds i16*, i16** %107, i64 %idxprom77
  %109 = load i16*, i16** %arrayidx78, align 8
  store i16* %109, i16** %orig_line, align 8
  %110 = load i32, i32* %ry0, align 4
  %add79 = add nsw i32 %110, 8
  store i32 %add79, i32* %ry, align 4
  %111 = load i16*, i16** %orig_line, align 8
  %112 = load i32, i32* %x0, align 4
  %idxprom80 = sext i32 %112 to i64
  %arrayidx81 = getelementptr inbounds i16, i16* %111, i64 %idxprom80
  %113 = load i16, i16* %arrayidx81, align 2
  %conv82 = zext i16 %113 to i32
  %114 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %115 = load i16**, i16*** %ref_pic, align 8
  %116 = load i32, i32* %ry, align 4
  %117 = load i32, i32* %rx0, align 4
  %118 = load i32, i32* %img_height, align 4
  %119 = load i32, i32* %img_width, align 4
  %call83 = call zeroext i16 %114(i16** %115, i32 %116, i32 %117, i32 %118, i32 %119)
  %conv84 = zext i16 %call83 to i32
  %sub85 = sub nsw i32 %conv82, %conv84
  %120 = load i32*, i32** %d, align 8
  %incdec.ptr86 = getelementptr inbounds i32, i32* %120, i32 1
  store i32* %incdec.ptr86, i32** %d, align 8
  store i32 %sub85, i32* %120, align 4
  %121 = load i16*, i16** %orig_line, align 8
  %122 = load i32, i32* %x0, align 4
  %add87 = add nsw i32 %122, 1
  %idxprom88 = sext i32 %add87 to i64
  %arrayidx89 = getelementptr inbounds i16, i16* %121, i64 %idxprom88
  %123 = load i16, i16* %arrayidx89, align 2
  %conv90 = zext i16 %123 to i32
  %124 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %125 = load i16**, i16*** %ref_pic, align 8
  %126 = load i32, i32* %ry, align 4
  %127 = load i32, i32* %rx0, align 4
  %add91 = add nsw i32 %127, 4
  %128 = load i32, i32* %img_height, align 4
  %129 = load i32, i32* %img_width, align 4
  %call92 = call zeroext i16 %124(i16** %125, i32 %126, i32 %add91, i32 %128, i32 %129)
  %conv93 = zext i16 %call92 to i32
  %sub94 = sub nsw i32 %conv90, %conv93
  %130 = load i32*, i32** %d, align 8
  %incdec.ptr95 = getelementptr inbounds i32, i32* %130, i32 1
  store i32* %incdec.ptr95, i32** %d, align 8
  store i32 %sub94, i32* %130, align 4
  %131 = load i16*, i16** %orig_line, align 8
  %132 = load i32, i32* %x0, align 4
  %add96 = add nsw i32 %132, 2
  %idxprom97 = sext i32 %add96 to i64
  %arrayidx98 = getelementptr inbounds i16, i16* %131, i64 %idxprom97
  %133 = load i16, i16* %arrayidx98, align 2
  %conv99 = zext i16 %133 to i32
  %134 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %135 = load i16**, i16*** %ref_pic, align 8
  %136 = load i32, i32* %ry, align 4
  %137 = load i32, i32* %rx0, align 4
  %add100 = add nsw i32 %137, 8
  %138 = load i32, i32* %img_height, align 4
  %139 = load i32, i32* %img_width, align 4
  %call101 = call zeroext i16 %134(i16** %135, i32 %136, i32 %add100, i32 %138, i32 %139)
  %conv102 = zext i16 %call101 to i32
  %sub103 = sub nsw i32 %conv99, %conv102
  %140 = load i32*, i32** %d, align 8
  %incdec.ptr104 = getelementptr inbounds i32, i32* %140, i32 1
  store i32* %incdec.ptr104, i32** %d, align 8
  store i32 %sub103, i32* %140, align 4
  %141 = load i16*, i16** %orig_line, align 8
  %142 = load i32, i32* %x0, align 4
  %add105 = add nsw i32 %142, 3
  %idxprom106 = sext i32 %add105 to i64
  %arrayidx107 = getelementptr inbounds i16, i16* %141, i64 %idxprom106
  %143 = load i16, i16* %arrayidx107, align 2
  %conv108 = zext i16 %143 to i32
  %144 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %145 = load i16**, i16*** %ref_pic, align 8
  %146 = load i32, i32* %ry, align 4
  %147 = load i32, i32* %rx0, align 4
  %add109 = add nsw i32 %147, 12
  %148 = load i32, i32* %img_height, align 4
  %149 = load i32, i32* %img_width, align 4
  %call110 = call zeroext i16 %144(i16** %145, i32 %146, i32 %add109, i32 %148, i32 %149)
  %conv111 = zext i16 %call110 to i32
  %sub112 = sub nsw i32 %conv108, %conv111
  %150 = load i32*, i32** %d, align 8
  %incdec.ptr113 = getelementptr inbounds i32, i32* %150, i32 1
  store i32* %incdec.ptr113, i32** %d, align 8
  store i32 %sub112, i32* %150, align 4
  %151 = load i16**, i16*** %orig_pic.addr, align 8
  %152 = load i32, i32* %y0, align 4
  %add114 = add nsw i32 %152, 3
  %idxprom115 = sext i32 %add114 to i64
  %arrayidx116 = getelementptr inbounds i16*, i16** %151, i64 %idxprom115
  %153 = load i16*, i16** %arrayidx116, align 8
  store i16* %153, i16** %orig_line, align 8
  %154 = load i32, i32* %ry0, align 4
  %add117 = add nsw i32 %154, 12
  store i32 %add117, i32* %ry, align 4
  %155 = load i16*, i16** %orig_line, align 8
  %156 = load i32, i32* %x0, align 4
  %idxprom118 = sext i32 %156 to i64
  %arrayidx119 = getelementptr inbounds i16, i16* %155, i64 %idxprom118
  %157 = load i16, i16* %arrayidx119, align 2
  %conv120 = zext i16 %157 to i32
  %158 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %159 = load i16**, i16*** %ref_pic, align 8
  %160 = load i32, i32* %ry, align 4
  %161 = load i32, i32* %rx0, align 4
  %162 = load i32, i32* %img_height, align 4
  %163 = load i32, i32* %img_width, align 4
  %call121 = call zeroext i16 %158(i16** %159, i32 %160, i32 %161, i32 %162, i32 %163)
  %conv122 = zext i16 %call121 to i32
  %sub123 = sub nsw i32 %conv120, %conv122
  %164 = load i32*, i32** %d, align 8
  %incdec.ptr124 = getelementptr inbounds i32, i32* %164, i32 1
  store i32* %incdec.ptr124, i32** %d, align 8
  store i32 %sub123, i32* %164, align 4
  %165 = load i16*, i16** %orig_line, align 8
  %166 = load i32, i32* %x0, align 4
  %add125 = add nsw i32 %166, 1
  %idxprom126 = sext i32 %add125 to i64
  %arrayidx127 = getelementptr inbounds i16, i16* %165, i64 %idxprom126
  %167 = load i16, i16* %arrayidx127, align 2
  %conv128 = zext i16 %167 to i32
  %168 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %169 = load i16**, i16*** %ref_pic, align 8
  %170 = load i32, i32* %ry, align 4
  %171 = load i32, i32* %rx0, align 4
  %add129 = add nsw i32 %171, 4
  %172 = load i32, i32* %img_height, align 4
  %173 = load i32, i32* %img_width, align 4
  %call130 = call zeroext i16 %168(i16** %169, i32 %170, i32 %add129, i32 %172, i32 %173)
  %conv131 = zext i16 %call130 to i32
  %sub132 = sub nsw i32 %conv128, %conv131
  %174 = load i32*, i32** %d, align 8
  %incdec.ptr133 = getelementptr inbounds i32, i32* %174, i32 1
  store i32* %incdec.ptr133, i32** %d, align 8
  store i32 %sub132, i32* %174, align 4
  %175 = load i16*, i16** %orig_line, align 8
  %176 = load i32, i32* %x0, align 4
  %add134 = add nsw i32 %176, 2
  %idxprom135 = sext i32 %add134 to i64
  %arrayidx136 = getelementptr inbounds i16, i16* %175, i64 %idxprom135
  %177 = load i16, i16* %arrayidx136, align 2
  %conv137 = zext i16 %177 to i32
  %178 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %179 = load i16**, i16*** %ref_pic, align 8
  %180 = load i32, i32* %ry, align 4
  %181 = load i32, i32* %rx0, align 4
  %add138 = add nsw i32 %181, 8
  %182 = load i32, i32* %img_height, align 4
  %183 = load i32, i32* %img_width, align 4
  %call139 = call zeroext i16 %178(i16** %179, i32 %180, i32 %add138, i32 %182, i32 %183)
  %conv140 = zext i16 %call139 to i32
  %sub141 = sub nsw i32 %conv137, %conv140
  %184 = load i32*, i32** %d, align 8
  %incdec.ptr142 = getelementptr inbounds i32, i32* %184, i32 1
  store i32* %incdec.ptr142, i32** %d, align 8
  store i32 %sub141, i32* %184, align 4
  %185 = load i16*, i16** %orig_line, align 8
  %186 = load i32, i32* %x0, align 4
  %add143 = add nsw i32 %186, 3
  %idxprom144 = sext i32 %add143 to i64
  %arrayidx145 = getelementptr inbounds i16, i16* %185, i64 %idxprom144
  %187 = load i16, i16* %arrayidx145, align 2
  %conv146 = zext i16 %187 to i32
  %188 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %189 = load i16**, i16*** %ref_pic, align 8
  %190 = load i32, i32* %ry, align 4
  %191 = load i32, i32* %rx0, align 4
  %add147 = add nsw i32 %191, 12
  %192 = load i32, i32* %img_height, align 4
  %193 = load i32, i32* %img_width, align 4
  %call148 = call zeroext i16 %188(i16** %189, i32 %190, i32 %add147, i32 %192, i32 %193)
  %conv149 = zext i16 %call148 to i32
  %sub150 = sub nsw i32 %conv146, %conv149
  %194 = load i32*, i32** %d, align 8
  store i32 %sub150, i32* %194, align 4
  %195 = load i32, i32* %useABT.addr, align 4
  %tobool151 = icmp ne i32 %195, 0
  br i1 %tobool151, label %if.else, label %if.then

if.then:                                          ; preds = %for.body4
  %arraydecay152 = getelementptr inbounds [16 x i32], [16 x i32]* %diff, i64 0, i64 0
  %196 = load %struct.InputParameters*, %struct.InputParameters** @input, align 8
  %hadamard = getelementptr inbounds %struct.InputParameters, %struct.InputParameters* %196, i32 0, i32 6
  %197 = load i32, i32* %hadamard, align 8
  %call153 = call i32 @SATD(i32* %arraydecay152, i32 %197)
  %198 = load i32, i32* %mcost, align 4
  %add154 = add nsw i32 %198, %call153
  store i32 %add154, i32* %mcost, align 4
  %199 = load i32, i32* %min_mcost.addr, align 4
  %cmp155 = icmp sgt i32 %add154, %199
  br i1 %cmp155, label %if.then157, label %if.end

if.then157:                                       ; preds = %if.then
  store i32 1, i32* %abort_search, align 4
  br label %for.end181

if.end:                                           ; preds = %if.then
  br label %if.end178

if.else:                                          ; preds = %for.body4
  %200 = load i32, i32* %y0, align 4
  store i32 %200, i32* %yy, align 4
  store i32 0, i32* %kk, align 4
  br label %for.cond158

for.cond158:                                      ; preds = %for.inc175, %if.else
  %201 = load i32, i32* %yy, align 4
  %202 = load i32, i32* %y0, align 4
  %add159 = add nsw i32 %202, 4
  %cmp160 = icmp slt i32 %201, %add159
  br i1 %cmp160, label %for.body162, label %for.end177

for.body162:                                      ; preds = %for.cond158
  %203 = load i32, i32* %x0, align 4
  store i32 %203, i32* %xx, align 4
  br label %for.cond163

for.cond163:                                      ; preds = %for.inc, %for.body162
  %204 = load i32, i32* %xx, align 4
  %205 = load i32, i32* %x0, align 4
  %add164 = add nsw i32 %205, 4
  %cmp165 = icmp slt i32 %204, %add164
  br i1 %cmp165, label %for.body167, label %for.end

for.body167:                                      ; preds = %for.cond163
  %206 = load i32, i32* %kk, align 4
  %idxprom168 = sext i32 %206 to i64
  %arrayidx169 = getelementptr inbounds [16 x i32], [16 x i32]* %diff, i64 0, i64 %idxprom168
  %207 = load i32, i32* %arrayidx169, align 4
  %208 = load i32, i32* %yy, align 4
  %idxprom170 = sext i32 %208 to i64
  %arrayidx171 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %curr_diff, i64 0, i64 %idxprom170
  %209 = load i32, i32* %xx, align 4
  %idxprom172 = sext i32 %209 to i64
  %arrayidx173 = getelementptr inbounds [16 x i32], [16 x i32]* %arrayidx171, i64 0, i64 %idxprom172
  store i32 %207, i32* %arrayidx173, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body167
  %210 = load i32, i32* %xx, align 4
  %inc = add nsw i32 %210, 1
  store i32 %inc, i32* %xx, align 4
  %211 = load i32, i32* %kk, align 4
  %inc174 = add nsw i32 %211, 1
  store i32 %inc174, i32* %kk, align 4
  br label %for.cond163

for.end:                                          ; preds = %for.cond163
  br label %for.inc175

for.inc175:                                       ; preds = %for.end
  %212 = load i32, i32* %yy, align 4
  %inc176 = add nsw i32 %212, 1
  store i32 %inc176, i32* %yy, align 4
  br label %for.cond158

for.end177:                                       ; preds = %for.cond158
  br label %if.end178

if.end178:                                        ; preds = %for.end177, %if.end
  br label %for.inc179

for.inc179:                                       ; preds = %if.end178
  %213 = load i32, i32* %x0, align 4
  %add180 = add nsw i32 %213, 4
  store i32 %add180, i32* %x0, align 4
  br label %for.cond2

for.end181:                                       ; preds = %if.then157, %for.cond2
  br label %for.inc182

for.inc182:                                       ; preds = %for.end181
  %214 = load i32, i32* %y0, align 4
  %add183 = add nsw i32 %214, 4
  store i32 %add183, i32* %y0, align 4
  br label %for.cond

for.end184:                                       ; preds = %land.end
  %215 = load i32, i32* %mcost, align 4
  %216 = load i32, i32* %canary
  %217 = icmp eq i32 %216, 119720905
  br i1 %217, label %218, label %func_exit

218:                                              ; preds = %for.end184, %func_exit
  ret i32 %215

func_exit:                                        ; preds = %for.end184
  call void @detect_breach()
  br label %218
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @PartCalMad.21(i16* %ref_pic, i16** %orig_pic, i16* (i32, i16*, i32, i32, i32, i32)* %get_ref_line, i32 %blocksize_y, i32 %blocksize_x, i32 %blocksize_x4, i32 %mcost, i32 %min_mcost, i32 %cand_x, i32 %cand_y) #0 {
entry:
  %cand_y.addr = alloca i32, align 4
  %mcost.addr = alloca i32, align 4
  %y = alloca i32, align 4
  %height = alloca i32, align 4
  %ref_pic.addr = alloca i16*, align 8
  %blocksize_x.addr = alloca i32, align 4
  %x4 = alloca i32, align 4
  %get_ref_line.addr = alloca i16* (i32, i16*, i32, i32, i32, i32)*, align 8
  %blocksize_x4.addr = alloca i32, align 4
  %orig_line = alloca i16*, align 8
  %orig_pic.addr = alloca i16**, align 8
  %min_mcost.addr = alloca i32, align 4
  %ref_line = alloca i16*, align 8
  %canary = alloca i32
  store i32 734741886, i32* %canary
  %blocksize_y.addr = alloca i32, align 4
  %cand_x.addr = alloca i32, align 4
  store i16* %ref_pic, i16** %ref_pic.addr, align 8
  store i16** %orig_pic, i16*** %orig_pic.addr, align 8
  store i16* (i32, i16*, i32, i32, i32, i32)* %get_ref_line, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line.addr, align 8
  store i32 %blocksize_y, i32* %blocksize_y.addr, align 4
  store i32 %blocksize_x, i32* %blocksize_x.addr, align 4
  store i32 %blocksize_x4, i32* %blocksize_x4.addr, align 4
  store i32 %mcost, i32* %mcost.addr, align 4
  store i32 %min_mcost, i32* %min_mcost.addr, align 4
  store i32 %cand_x, i32* %cand_x.addr, align 4
  store i32 %cand_y, i32* %cand_y.addr, align 4
  %0 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %MbaffFrameFlag = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %0, i32 0, i32 90
  %1 = load i32, i32* %MbaffFrameFlag, align 8
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %mb_data = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %2, i32 0, i32 51
  %3 = load %struct.macroblock*, %struct.macroblock** %mb_data, align 8
  %4 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %current_mb_nr = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %4, i32 0, i32 3
  %5 = load i32, i32* %current_mb_nr, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 %idxprom
  %mb_field = getelementptr inbounds %struct.macroblock, %struct.macroblock* %arrayidx, i32 0, i32 22
  %6 = load i32, i32* %mb_field, align 4
  %tobool1 = icmp ne i32 %6, 0
  br i1 %tobool1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %7 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height2 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %7, i32 0, i32 15
  %8 = load i32, i32* %height2, align 4
  %div = sdiv i32 %8, 2
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %entry
  %9 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height3 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %9, i32 0, i32 15
  %10 = load i32, i32* %height3, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %div, %cond.true ], [ %10, %cond.false ]
  store i32 %cond, i32* %height, align 4
  store i32 0, i32* %y, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc40, %cond.end
  %11 = load i32, i32* %y, align 4
  %12 = load i32, i32* %blocksize_y.addr, align 4
  %cmp = icmp slt i32 %11, %12
  br i1 %cmp, label %for.body, label %for.end42

for.body:                                         ; preds = %for.cond
  %13 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line.addr, align 8
  %14 = load i32, i32* %blocksize_x.addr, align 4
  %15 = load i16*, i16** %ref_pic.addr, align 8
  %16 = load i32, i32* %cand_y.addr, align 4
  %17 = load i32, i32* %y, align 4
  %add = add nsw i32 %16, %17
  %18 = load i32, i32* %cand_x.addr, align 4
  %19 = load i32, i32* %height, align 4
  %20 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %width = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %20, i32 0, i32 13
  %21 = load i32, i32* %width, align 4
  %call = call i16* %13(i32 %14, i16* %15, i32 %add, i32 %18, i32 %19, i32 %21)
  store i16* %call, i16** %ref_line, align 8
  %22 = load i16**, i16*** %orig_pic.addr, align 8
  %23 = load i32, i32* %y, align 4
  %idxprom4 = sext i32 %23 to i64
  %arrayidx5 = getelementptr inbounds i16*, i16** %22, i64 %idxprom4
  %24 = load i16*, i16** %arrayidx5, align 8
  store i16* %24, i16** %orig_line, align 8
  store i32 0, i32* %x4, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc, %for.body
  %25 = load i32, i32* %x4, align 4
  %26 = load i32, i32* %blocksize_x4.addr, align 4
  %cmp7 = icmp slt i32 %25, %26
  br i1 %cmp7, label %for.body8, label %for.end

for.body8:                                        ; preds = %for.cond6
  %27 = load i32*, i32** @byte_abs, align 8
  %28 = load i16*, i16** %orig_line, align 8
  %incdec.ptr = getelementptr inbounds i16, i16* %28, i32 1
  store i16* %incdec.ptr, i16** %orig_line, align 8
  %29 = load i16, i16* %28, align 2
  %conv = zext i16 %29 to i32
  %30 = load i16*, i16** %ref_line, align 8
  %incdec.ptr9 = getelementptr inbounds i16, i16* %30, i32 1
  store i16* %incdec.ptr9, i16** %ref_line, align 8
  %31 = load i16, i16* %30, align 2
  %conv10 = zext i16 %31 to i32
  %sub = sub nsw i32 %conv, %conv10
  %idxprom11 = sext i32 %sub to i64
  %arrayidx12 = getelementptr inbounds i32, i32* %27, i64 %idxprom11
  %32 = load i32, i32* %arrayidx12, align 4
  %33 = load i32, i32* %mcost.addr, align 4
  %add13 = add nsw i32 %33, %32
  store i32 %add13, i32* %mcost.addr, align 4
  %34 = load i32*, i32** @byte_abs, align 8
  %35 = load i16*, i16** %orig_line, align 8
  %incdec.ptr14 = getelementptr inbounds i16, i16* %35, i32 1
  store i16* %incdec.ptr14, i16** %orig_line, align 8
  %36 = load i16, i16* %35, align 2
  %conv15 = zext i16 %36 to i32
  %37 = load i16*, i16** %ref_line, align 8
  %incdec.ptr16 = getelementptr inbounds i16, i16* %37, i32 1
  store i16* %incdec.ptr16, i16** %ref_line, align 8
  %38 = load i16, i16* %37, align 2
  %conv17 = zext i16 %38 to i32
  %sub18 = sub nsw i32 %conv15, %conv17
  %idxprom19 = sext i32 %sub18 to i64
  %arrayidx20 = getelementptr inbounds i32, i32* %34, i64 %idxprom19
  %39 = load i32, i32* %arrayidx20, align 4
  %40 = load i32, i32* %mcost.addr, align 4
  %add21 = add nsw i32 %40, %39
  store i32 %add21, i32* %mcost.addr, align 4
  %41 = load i32*, i32** @byte_abs, align 8
  %42 = load i16*, i16** %orig_line, align 8
  %incdec.ptr22 = getelementptr inbounds i16, i16* %42, i32 1
  store i16* %incdec.ptr22, i16** %orig_line, align 8
  %43 = load i16, i16* %42, align 2
  %conv23 = zext i16 %43 to i32
  %44 = load i16*, i16** %ref_line, align 8
  %incdec.ptr24 = getelementptr inbounds i16, i16* %44, i32 1
  store i16* %incdec.ptr24, i16** %ref_line, align 8
  %45 = load i16, i16* %44, align 2
  %conv25 = zext i16 %45 to i32
  %sub26 = sub nsw i32 %conv23, %conv25
  %idxprom27 = sext i32 %sub26 to i64
  %arrayidx28 = getelementptr inbounds i32, i32* %41, i64 %idxprom27
  %46 = load i32, i32* %arrayidx28, align 4
  %47 = load i32, i32* %mcost.addr, align 4
  %add29 = add nsw i32 %47, %46
  store i32 %add29, i32* %mcost.addr, align 4
  %48 = load i32*, i32** @byte_abs, align 8
  %49 = load i16*, i16** %orig_line, align 8
  %incdec.ptr30 = getelementptr inbounds i16, i16* %49, i32 1
  store i16* %incdec.ptr30, i16** %orig_line, align 8
  %50 = load i16, i16* %49, align 2
  %conv31 = zext i16 %50 to i32
  %51 = load i16*, i16** %ref_line, align 8
  %incdec.ptr32 = getelementptr inbounds i16, i16* %51, i32 1
  store i16* %incdec.ptr32, i16** %ref_line, align 8
  %52 = load i16, i16* %51, align 2
  %conv33 = zext i16 %52 to i32
  %sub34 = sub nsw i32 %conv31, %conv33
  %idxprom35 = sext i32 %sub34 to i64
  %arrayidx36 = getelementptr inbounds i32, i32* %48, i64 %idxprom35
  %53 = load i32, i32* %arrayidx36, align 4
  %54 = load i32, i32* %mcost.addr, align 4
  %add37 = add nsw i32 %54, %53
  store i32 %add37, i32* %mcost.addr, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body8
  %55 = load i32, i32* %x4, align 4
  %inc = add nsw i32 %55, 1
  store i32 %inc, i32* %x4, align 4
  br label %for.cond6

for.end:                                          ; preds = %for.cond6
  %56 = load i32, i32* %mcost.addr, align 4
  %57 = load i32, i32* %min_mcost.addr, align 4
  %cmp38 = icmp sge i32 %56, %57
  br i1 %cmp38, label %if.then, label %if.end

if.then:                                          ; preds = %for.end
  br label %for.end42

if.end:                                           ; preds = %for.end
  br label %for.inc40

for.inc40:                                        ; preds = %if.end
  %58 = load i32, i32* %y, align 4
  %inc41 = add nsw i32 %58, 1
  store i32 %inc41, i32* %y, align 4
  br label %for.cond

for.end42:                                        ; preds = %if.then, %for.cond
  %59 = load i32, i32* %mcost.addr, align 4
  %60 = load i32, i32* %canary
  %61 = icmp eq i32 %60, 734741886
  br i1 %61, label %62, label %func_exit

62:                                               ; preds = %for.end42, %func_exit
  ret i32 %59

func_exit:                                        ; preds = %for.end42
  call void @detect_breach()
  br label %62
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @AddUpSADQuarter.22(i32 %pic_pix_x, i32 %pic_pix_y, i32 %blocksize_x, i32 %blocksize_y, i32 %cand_mv_x, i32 %cand_mv_y, %struct.storable_picture* %ref_picture, i16** %orig_pic, i32 %Mvmcost, i32 %min_mcost, i32 %useABT) #0 {
entry:
  %orig_pic.addr = alloca i16**, align 8
  %orig_line = alloca i16*, align 8
  %img_width = alloca i32, align 4
  %cand_mv_y.addr = alloca i32, align 4
  %useABT.addr = alloca i32, align 4
  %d = alloca i32*, align 8
  %kk = alloca i32, align 4
  %blocksize_x.addr = alloca i32, align 4
  %min_mcost.addr = alloca i32, align 4
  %ref_pic = alloca i16**, align 8
  %mcost = alloca i32, align 4
  %blocksize_y.addr = alloca i32, align 4
  %pic_pix_y.addr = alloca i32, align 4
  %ry = alloca i32, align 4
  %img_height = alloca i32, align 4
  %abort_search = alloca i32, align 4
  %diff = alloca [16 x i32], align 16
  %ry0 = alloca i32, align 4
  %Mvmcost.addr = alloca i32, align 4
  %yy = alloca i32, align 4
  %xx = alloca i32, align 4
  %pic_pix_x.addr = alloca i32, align 4
  %rx0 = alloca i32, align 4
  %canary = alloca i32
  store i32 1790094097, i32* %canary
  %ref_picture.addr = alloca %struct.storable_picture*, align 8
  %cand_mv_x.addr = alloca i32, align 4
  %curr_diff = alloca [16 x [16 x i32]], align 16
  %y0 = alloca i32, align 4
  %x0 = alloca i32, align 4
  store i32 %pic_pix_x, i32* %pic_pix_x.addr, align 4
  store i32 %pic_pix_y, i32* %pic_pix_y.addr, align 4
  store i32 %blocksize_x, i32* %blocksize_x.addr, align 4
  store i32 %blocksize_y, i32* %blocksize_y.addr, align 4
  store i32 %cand_mv_x, i32* %cand_mv_x.addr, align 4
  store i32 %cand_mv_y, i32* %cand_mv_y.addr, align 4
  store %struct.storable_picture* %ref_picture, %struct.storable_picture** %ref_picture.addr, align 8
  store i16** %orig_pic, i16*** %orig_pic.addr, align 8
  store i32 %Mvmcost, i32* %Mvmcost.addr, align 4
  store i32 %min_mcost, i32* %min_mcost.addr, align 4
  store i32 %useABT, i32* %useABT.addr, align 4
  %0 = load i32, i32* %Mvmcost.addr, align 4
  store i32 %0, i32* %mcost, align 4
  %1 = load %struct.storable_picture*, %struct.storable_picture** %ref_picture.addr, align 8
  %imgY_ups = getelementptr inbounds %struct.storable_picture, %struct.storable_picture* %1, i32 0, i32 28
  %2 = load i16**, i16*** %imgY_ups, align 8
  store i16** %2, i16*** %ref_pic, align 8
  %3 = load %struct.storable_picture*, %struct.storable_picture** %ref_picture.addr, align 8
  %size_x = getelementptr inbounds %struct.storable_picture, %struct.storable_picture* %3, i32 0, i32 18
  %4 = load i32, i32* %size_x, align 8
  store i32 %4, i32* %img_width, align 4
  %5 = load %struct.storable_picture*, %struct.storable_picture** %ref_picture.addr, align 8
  %size_y = getelementptr inbounds %struct.storable_picture, %struct.storable_picture* %5, i32 0, i32 19
  %6 = load i32, i32* %size_y, align 4
  store i32 %6, i32* %img_height, align 4
  store i32 0, i32* %y0, align 4
  store i32 0, i32* %abort_search, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc182, %entry
  %7 = load i32, i32* %y0, align 4
  %8 = load i32, i32* %blocksize_y.addr, align 4
  %cmp = icmp slt i32 %7, %8
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %9 = load i32, i32* %abort_search, align 4
  %tobool = icmp ne i32 %9, 0
  %lnot = xor i1 %tobool, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %10 = phi i1 [ false, %for.cond ], [ %lnot, %land.rhs ]
  br i1 %10, label %for.body, label %for.end184

for.body:                                         ; preds = %land.end
  %11 = load i32, i32* %pic_pix_y.addr, align 4
  %12 = load i32, i32* %y0, align 4
  %add = add nsw i32 %11, %12
  %shl = shl i32 %add, 2
  %13 = load i32, i32* %cand_mv_y.addr, align 4
  %add1 = add nsw i32 %shl, %13
  store i32 %add1, i32* %ry0, align 4
  store i32 0, i32* %x0, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc179, %for.body
  %14 = load i32, i32* %x0, align 4
  %15 = load i32, i32* %blocksize_x.addr, align 4
  %cmp3 = icmp slt i32 %14, %15
  br i1 %cmp3, label %for.body4, label %for.end181

for.body4:                                        ; preds = %for.cond2
  %16 = load i32, i32* %pic_pix_x.addr, align 4
  %17 = load i32, i32* %x0, align 4
  %add5 = add nsw i32 %16, %17
  %shl6 = shl i32 %add5, 2
  %18 = load i32, i32* %cand_mv_x.addr, align 4
  %add7 = add nsw i32 %shl6, %18
  store i32 %add7, i32* %rx0, align 4
  %arraydecay = getelementptr inbounds [16 x i32], [16 x i32]* %diff, i64 0, i64 0
  store i32* %arraydecay, i32** %d, align 8
  %19 = load i16**, i16*** %orig_pic.addr, align 8
  %20 = load i32, i32* %y0, align 4
  %idxprom = sext i32 %20 to i64
  %arrayidx = getelementptr inbounds i16*, i16** %19, i64 %idxprom
  %21 = load i16*, i16** %arrayidx, align 8
  store i16* %21, i16** %orig_line, align 8
  %22 = load i32, i32* %ry0, align 4
  store i32 %22, i32* %ry, align 4
  %23 = load i16*, i16** %orig_line, align 8
  %24 = load i32, i32* %x0, align 4
  %idxprom8 = sext i32 %24 to i64
  %arrayidx9 = getelementptr inbounds i16, i16* %23, i64 %idxprom8
  %25 = load i16, i16* %arrayidx9, align 2
  %conv = zext i16 %25 to i32
  %26 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %27 = load i16**, i16*** %ref_pic, align 8
  %28 = load i32, i32* %ry, align 4
  %29 = load i32, i32* %rx0, align 4
  %30 = load i32, i32* %img_height, align 4
  %31 = load i32, i32* %img_width, align 4
  %call = call zeroext i16 %26(i16** %27, i32 %28, i32 %29, i32 %30, i32 %31)
  %conv10 = zext i16 %call to i32
  %sub = sub nsw i32 %conv, %conv10
  %32 = load i32*, i32** %d, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %32, i32 1
  store i32* %incdec.ptr, i32** %d, align 8
  store i32 %sub, i32* %32, align 4
  %33 = load i16*, i16** %orig_line, align 8
  %34 = load i32, i32* %x0, align 4
  %add11 = add nsw i32 %34, 1
  %idxprom12 = sext i32 %add11 to i64
  %arrayidx13 = getelementptr inbounds i16, i16* %33, i64 %idxprom12
  %35 = load i16, i16* %arrayidx13, align 2
  %conv14 = zext i16 %35 to i32
  %36 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %37 = load i16**, i16*** %ref_pic, align 8
  %38 = load i32, i32* %ry, align 4
  %39 = load i32, i32* %rx0, align 4
  %add15 = add nsw i32 %39, 4
  %40 = load i32, i32* %img_height, align 4
  %41 = load i32, i32* %img_width, align 4
  %call16 = call zeroext i16 %36(i16** %37, i32 %38, i32 %add15, i32 %40, i32 %41)
  %conv17 = zext i16 %call16 to i32
  %sub18 = sub nsw i32 %conv14, %conv17
  %42 = load i32*, i32** %d, align 8
  %incdec.ptr19 = getelementptr inbounds i32, i32* %42, i32 1
  store i32* %incdec.ptr19, i32** %d, align 8
  store i32 %sub18, i32* %42, align 4
  %43 = load i16*, i16** %orig_line, align 8
  %44 = load i32, i32* %x0, align 4
  %add20 = add nsw i32 %44, 2
  %idxprom21 = sext i32 %add20 to i64
  %arrayidx22 = getelementptr inbounds i16, i16* %43, i64 %idxprom21
  %45 = load i16, i16* %arrayidx22, align 2
  %conv23 = zext i16 %45 to i32
  %46 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %47 = load i16**, i16*** %ref_pic, align 8
  %48 = load i32, i32* %ry, align 4
  %49 = load i32, i32* %rx0, align 4
  %add24 = add nsw i32 %49, 8
  %50 = load i32, i32* %img_height, align 4
  %51 = load i32, i32* %img_width, align 4
  %call25 = call zeroext i16 %46(i16** %47, i32 %48, i32 %add24, i32 %50, i32 %51)
  %conv26 = zext i16 %call25 to i32
  %sub27 = sub nsw i32 %conv23, %conv26
  %52 = load i32*, i32** %d, align 8
  %incdec.ptr28 = getelementptr inbounds i32, i32* %52, i32 1
  store i32* %incdec.ptr28, i32** %d, align 8
  store i32 %sub27, i32* %52, align 4
  %53 = load i16*, i16** %orig_line, align 8
  %54 = load i32, i32* %x0, align 4
  %add29 = add nsw i32 %54, 3
  %idxprom30 = sext i32 %add29 to i64
  %arrayidx31 = getelementptr inbounds i16, i16* %53, i64 %idxprom30
  %55 = load i16, i16* %arrayidx31, align 2
  %conv32 = zext i16 %55 to i32
  %56 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %57 = load i16**, i16*** %ref_pic, align 8
  %58 = load i32, i32* %ry, align 4
  %59 = load i32, i32* %rx0, align 4
  %add33 = add nsw i32 %59, 12
  %60 = load i32, i32* %img_height, align 4
  %61 = load i32, i32* %img_width, align 4
  %call34 = call zeroext i16 %56(i16** %57, i32 %58, i32 %add33, i32 %60, i32 %61)
  %conv35 = zext i16 %call34 to i32
  %sub36 = sub nsw i32 %conv32, %conv35
  %62 = load i32*, i32** %d, align 8
  %incdec.ptr37 = getelementptr inbounds i32, i32* %62, i32 1
  store i32* %incdec.ptr37, i32** %d, align 8
  store i32 %sub36, i32* %62, align 4
  %63 = load i16**, i16*** %orig_pic.addr, align 8
  %64 = load i32, i32* %y0, align 4
  %add38 = add nsw i32 %64, 1
  %idxprom39 = sext i32 %add38 to i64
  %arrayidx40 = getelementptr inbounds i16*, i16** %63, i64 %idxprom39
  %65 = load i16*, i16** %arrayidx40, align 8
  store i16* %65, i16** %orig_line, align 8
  %66 = load i32, i32* %ry0, align 4
  %add41 = add nsw i32 %66, 4
  store i32 %add41, i32* %ry, align 4
  %67 = load i16*, i16** %orig_line, align 8
  %68 = load i32, i32* %x0, align 4
  %idxprom42 = sext i32 %68 to i64
  %arrayidx43 = getelementptr inbounds i16, i16* %67, i64 %idxprom42
  %69 = load i16, i16* %arrayidx43, align 2
  %conv44 = zext i16 %69 to i32
  %70 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %71 = load i16**, i16*** %ref_pic, align 8
  %72 = load i32, i32* %ry, align 4
  %73 = load i32, i32* %rx0, align 4
  %74 = load i32, i32* %img_height, align 4
  %75 = load i32, i32* %img_width, align 4
  %call45 = call zeroext i16 %70(i16** %71, i32 %72, i32 %73, i32 %74, i32 %75)
  %conv46 = zext i16 %call45 to i32
  %sub47 = sub nsw i32 %conv44, %conv46
  %76 = load i32*, i32** %d, align 8
  %incdec.ptr48 = getelementptr inbounds i32, i32* %76, i32 1
  store i32* %incdec.ptr48, i32** %d, align 8
  store i32 %sub47, i32* %76, align 4
  %77 = load i16*, i16** %orig_line, align 8
  %78 = load i32, i32* %x0, align 4
  %add49 = add nsw i32 %78, 1
  %idxprom50 = sext i32 %add49 to i64
  %arrayidx51 = getelementptr inbounds i16, i16* %77, i64 %idxprom50
  %79 = load i16, i16* %arrayidx51, align 2
  %conv52 = zext i16 %79 to i32
  %80 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %81 = load i16**, i16*** %ref_pic, align 8
  %82 = load i32, i32* %ry, align 4
  %83 = load i32, i32* %rx0, align 4
  %add53 = add nsw i32 %83, 4
  %84 = load i32, i32* %img_height, align 4
  %85 = load i32, i32* %img_width, align 4
  %call54 = call zeroext i16 %80(i16** %81, i32 %82, i32 %add53, i32 %84, i32 %85)
  %conv55 = zext i16 %call54 to i32
  %sub56 = sub nsw i32 %conv52, %conv55
  %86 = load i32*, i32** %d, align 8
  %incdec.ptr57 = getelementptr inbounds i32, i32* %86, i32 1
  store i32* %incdec.ptr57, i32** %d, align 8
  store i32 %sub56, i32* %86, align 4
  %87 = load i16*, i16** %orig_line, align 8
  %88 = load i32, i32* %x0, align 4
  %add58 = add nsw i32 %88, 2
  %idxprom59 = sext i32 %add58 to i64
  %arrayidx60 = getelementptr inbounds i16, i16* %87, i64 %idxprom59
  %89 = load i16, i16* %arrayidx60, align 2
  %conv61 = zext i16 %89 to i32
  %90 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %91 = load i16**, i16*** %ref_pic, align 8
  %92 = load i32, i32* %ry, align 4
  %93 = load i32, i32* %rx0, align 4
  %add62 = add nsw i32 %93, 8
  %94 = load i32, i32* %img_height, align 4
  %95 = load i32, i32* %img_width, align 4
  %call63 = call zeroext i16 %90(i16** %91, i32 %92, i32 %add62, i32 %94, i32 %95)
  %conv64 = zext i16 %call63 to i32
  %sub65 = sub nsw i32 %conv61, %conv64
  %96 = load i32*, i32** %d, align 8
  %incdec.ptr66 = getelementptr inbounds i32, i32* %96, i32 1
  store i32* %incdec.ptr66, i32** %d, align 8
  store i32 %sub65, i32* %96, align 4
  %97 = load i16*, i16** %orig_line, align 8
  %98 = load i32, i32* %x0, align 4
  %add67 = add nsw i32 %98, 3
  %idxprom68 = sext i32 %add67 to i64
  %arrayidx69 = getelementptr inbounds i16, i16* %97, i64 %idxprom68
  %99 = load i16, i16* %arrayidx69, align 2
  %conv70 = zext i16 %99 to i32
  %100 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %101 = load i16**, i16*** %ref_pic, align 8
  %102 = load i32, i32* %ry, align 4
  %103 = load i32, i32* %rx0, align 4
  %add71 = add nsw i32 %103, 12
  %104 = load i32, i32* %img_height, align 4
  %105 = load i32, i32* %img_width, align 4
  %call72 = call zeroext i16 %100(i16** %101, i32 %102, i32 %add71, i32 %104, i32 %105)
  %conv73 = zext i16 %call72 to i32
  %sub74 = sub nsw i32 %conv70, %conv73
  %106 = load i32*, i32** %d, align 8
  %incdec.ptr75 = getelementptr inbounds i32, i32* %106, i32 1
  store i32* %incdec.ptr75, i32** %d, align 8
  store i32 %sub74, i32* %106, align 4
  %107 = load i16**, i16*** %orig_pic.addr, align 8
  %108 = load i32, i32* %y0, align 4
  %add76 = add nsw i32 %108, 2
  %idxprom77 = sext i32 %add76 to i64
  %arrayidx78 = getelementptr inbounds i16*, i16** %107, i64 %idxprom77
  %109 = load i16*, i16** %arrayidx78, align 8
  store i16* %109, i16** %orig_line, align 8
  %110 = load i32, i32* %ry0, align 4
  %add79 = add nsw i32 %110, 8
  store i32 %add79, i32* %ry, align 4
  %111 = load i16*, i16** %orig_line, align 8
  %112 = load i32, i32* %x0, align 4
  %idxprom80 = sext i32 %112 to i64
  %arrayidx81 = getelementptr inbounds i16, i16* %111, i64 %idxprom80
  %113 = load i16, i16* %arrayidx81, align 2
  %conv82 = zext i16 %113 to i32
  %114 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %115 = load i16**, i16*** %ref_pic, align 8
  %116 = load i32, i32* %ry, align 4
  %117 = load i32, i32* %rx0, align 4
  %118 = load i32, i32* %img_height, align 4
  %119 = load i32, i32* %img_width, align 4
  %call83 = call zeroext i16 %114(i16** %115, i32 %116, i32 %117, i32 %118, i32 %119)
  %conv84 = zext i16 %call83 to i32
  %sub85 = sub nsw i32 %conv82, %conv84
  %120 = load i32*, i32** %d, align 8
  %incdec.ptr86 = getelementptr inbounds i32, i32* %120, i32 1
  store i32* %incdec.ptr86, i32** %d, align 8
  store i32 %sub85, i32* %120, align 4
  %121 = load i16*, i16** %orig_line, align 8
  %122 = load i32, i32* %x0, align 4
  %add87 = add nsw i32 %122, 1
  %idxprom88 = sext i32 %add87 to i64
  %arrayidx89 = getelementptr inbounds i16, i16* %121, i64 %idxprom88
  %123 = load i16, i16* %arrayidx89, align 2
  %conv90 = zext i16 %123 to i32
  %124 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %125 = load i16**, i16*** %ref_pic, align 8
  %126 = load i32, i32* %ry, align 4
  %127 = load i32, i32* %rx0, align 4
  %add91 = add nsw i32 %127, 4
  %128 = load i32, i32* %img_height, align 4
  %129 = load i32, i32* %img_width, align 4
  %call92 = call zeroext i16 %124(i16** %125, i32 %126, i32 %add91, i32 %128, i32 %129)
  %conv93 = zext i16 %call92 to i32
  %sub94 = sub nsw i32 %conv90, %conv93
  %130 = load i32*, i32** %d, align 8
  %incdec.ptr95 = getelementptr inbounds i32, i32* %130, i32 1
  store i32* %incdec.ptr95, i32** %d, align 8
  store i32 %sub94, i32* %130, align 4
  %131 = load i16*, i16** %orig_line, align 8
  %132 = load i32, i32* %x0, align 4
  %add96 = add nsw i32 %132, 2
  %idxprom97 = sext i32 %add96 to i64
  %arrayidx98 = getelementptr inbounds i16, i16* %131, i64 %idxprom97
  %133 = load i16, i16* %arrayidx98, align 2
  %conv99 = zext i16 %133 to i32
  %134 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %135 = load i16**, i16*** %ref_pic, align 8
  %136 = load i32, i32* %ry, align 4
  %137 = load i32, i32* %rx0, align 4
  %add100 = add nsw i32 %137, 8
  %138 = load i32, i32* %img_height, align 4
  %139 = load i32, i32* %img_width, align 4
  %call101 = call zeroext i16 %134(i16** %135, i32 %136, i32 %add100, i32 %138, i32 %139)
  %conv102 = zext i16 %call101 to i32
  %sub103 = sub nsw i32 %conv99, %conv102
  %140 = load i32*, i32** %d, align 8
  %incdec.ptr104 = getelementptr inbounds i32, i32* %140, i32 1
  store i32* %incdec.ptr104, i32** %d, align 8
  store i32 %sub103, i32* %140, align 4
  %141 = load i16*, i16** %orig_line, align 8
  %142 = load i32, i32* %x0, align 4
  %add105 = add nsw i32 %142, 3
  %idxprom106 = sext i32 %add105 to i64
  %arrayidx107 = getelementptr inbounds i16, i16* %141, i64 %idxprom106
  %143 = load i16, i16* %arrayidx107, align 2
  %conv108 = zext i16 %143 to i32
  %144 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %145 = load i16**, i16*** %ref_pic, align 8
  %146 = load i32, i32* %ry, align 4
  %147 = load i32, i32* %rx0, align 4
  %add109 = add nsw i32 %147, 12
  %148 = load i32, i32* %img_height, align 4
  %149 = load i32, i32* %img_width, align 4
  %call110 = call zeroext i16 %144(i16** %145, i32 %146, i32 %add109, i32 %148, i32 %149)
  %conv111 = zext i16 %call110 to i32
  %sub112 = sub nsw i32 %conv108, %conv111
  %150 = load i32*, i32** %d, align 8
  %incdec.ptr113 = getelementptr inbounds i32, i32* %150, i32 1
  store i32* %incdec.ptr113, i32** %d, align 8
  store i32 %sub112, i32* %150, align 4
  %151 = load i16**, i16*** %orig_pic.addr, align 8
  %152 = load i32, i32* %y0, align 4
  %add114 = add nsw i32 %152, 3
  %idxprom115 = sext i32 %add114 to i64
  %arrayidx116 = getelementptr inbounds i16*, i16** %151, i64 %idxprom115
  %153 = load i16*, i16** %arrayidx116, align 8
  store i16* %153, i16** %orig_line, align 8
  %154 = load i32, i32* %ry0, align 4
  %add117 = add nsw i32 %154, 12
  store i32 %add117, i32* %ry, align 4
  %155 = load i16*, i16** %orig_line, align 8
  %156 = load i32, i32* %x0, align 4
  %idxprom118 = sext i32 %156 to i64
  %arrayidx119 = getelementptr inbounds i16, i16* %155, i64 %idxprom118
  %157 = load i16, i16* %arrayidx119, align 2
  %conv120 = zext i16 %157 to i32
  %158 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %159 = load i16**, i16*** %ref_pic, align 8
  %160 = load i32, i32* %ry, align 4
  %161 = load i32, i32* %rx0, align 4
  %162 = load i32, i32* %img_height, align 4
  %163 = load i32, i32* %img_width, align 4
  %call121 = call zeroext i16 %158(i16** %159, i32 %160, i32 %161, i32 %162, i32 %163)
  %conv122 = zext i16 %call121 to i32
  %sub123 = sub nsw i32 %conv120, %conv122
  %164 = load i32*, i32** %d, align 8
  %incdec.ptr124 = getelementptr inbounds i32, i32* %164, i32 1
  store i32* %incdec.ptr124, i32** %d, align 8
  store i32 %sub123, i32* %164, align 4
  %165 = load i16*, i16** %orig_line, align 8
  %166 = load i32, i32* %x0, align 4
  %add125 = add nsw i32 %166, 1
  %idxprom126 = sext i32 %add125 to i64
  %arrayidx127 = getelementptr inbounds i16, i16* %165, i64 %idxprom126
  %167 = load i16, i16* %arrayidx127, align 2
  %conv128 = zext i16 %167 to i32
  %168 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %169 = load i16**, i16*** %ref_pic, align 8
  %170 = load i32, i32* %ry, align 4
  %171 = load i32, i32* %rx0, align 4
  %add129 = add nsw i32 %171, 4
  %172 = load i32, i32* %img_height, align 4
  %173 = load i32, i32* %img_width, align 4
  %call130 = call zeroext i16 %168(i16** %169, i32 %170, i32 %add129, i32 %172, i32 %173)
  %conv131 = zext i16 %call130 to i32
  %sub132 = sub nsw i32 %conv128, %conv131
  %174 = load i32*, i32** %d, align 8
  %incdec.ptr133 = getelementptr inbounds i32, i32* %174, i32 1
  store i32* %incdec.ptr133, i32** %d, align 8
  store i32 %sub132, i32* %174, align 4
  %175 = load i16*, i16** %orig_line, align 8
  %176 = load i32, i32* %x0, align 4
  %add134 = add nsw i32 %176, 2
  %idxprom135 = sext i32 %add134 to i64
  %arrayidx136 = getelementptr inbounds i16, i16* %175, i64 %idxprom135
  %177 = load i16, i16* %arrayidx136, align 2
  %conv137 = zext i16 %177 to i32
  %178 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %179 = load i16**, i16*** %ref_pic, align 8
  %180 = load i32, i32* %ry, align 4
  %181 = load i32, i32* %rx0, align 4
  %add138 = add nsw i32 %181, 8
  %182 = load i32, i32* %img_height, align 4
  %183 = load i32, i32* %img_width, align 4
  %call139 = call zeroext i16 %178(i16** %179, i32 %180, i32 %add138, i32 %182, i32 %183)
  %conv140 = zext i16 %call139 to i32
  %sub141 = sub nsw i32 %conv137, %conv140
  %184 = load i32*, i32** %d, align 8
  %incdec.ptr142 = getelementptr inbounds i32, i32* %184, i32 1
  store i32* %incdec.ptr142, i32** %d, align 8
  store i32 %sub141, i32* %184, align 4
  %185 = load i16*, i16** %orig_line, align 8
  %186 = load i32, i32* %x0, align 4
  %add143 = add nsw i32 %186, 3
  %idxprom144 = sext i32 %add143 to i64
  %arrayidx145 = getelementptr inbounds i16, i16* %185, i64 %idxprom144
  %187 = load i16, i16* %arrayidx145, align 2
  %conv146 = zext i16 %187 to i32
  %188 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %189 = load i16**, i16*** %ref_pic, align 8
  %190 = load i32, i32* %ry, align 4
  %191 = load i32, i32* %rx0, align 4
  %add147 = add nsw i32 %191, 12
  %192 = load i32, i32* %img_height, align 4
  %193 = load i32, i32* %img_width, align 4
  %call148 = call zeroext i16 %188(i16** %189, i32 %190, i32 %add147, i32 %192, i32 %193)
  %conv149 = zext i16 %call148 to i32
  %sub150 = sub nsw i32 %conv146, %conv149
  %194 = load i32*, i32** %d, align 8
  store i32 %sub150, i32* %194, align 4
  %195 = load i32, i32* %useABT.addr, align 4
  %tobool151 = icmp ne i32 %195, 0
  br i1 %tobool151, label %if.else, label %if.then

if.then:                                          ; preds = %for.body4
  %arraydecay152 = getelementptr inbounds [16 x i32], [16 x i32]* %diff, i64 0, i64 0
  %196 = load %struct.InputParameters*, %struct.InputParameters** @input, align 8
  %hadamard = getelementptr inbounds %struct.InputParameters, %struct.InputParameters* %196, i32 0, i32 6
  %197 = load i32, i32* %hadamard, align 8
  %call153 = call i32 @SATD(i32* %arraydecay152, i32 %197)
  %198 = load i32, i32* %mcost, align 4
  %add154 = add nsw i32 %198, %call153
  store i32 %add154, i32* %mcost, align 4
  %199 = load i32, i32* %min_mcost.addr, align 4
  %cmp155 = icmp sgt i32 %add154, %199
  br i1 %cmp155, label %if.then157, label %if.end

if.then157:                                       ; preds = %if.then
  store i32 1, i32* %abort_search, align 4
  br label %for.end181

if.end:                                           ; preds = %if.then
  br label %if.end178

if.else:                                          ; preds = %for.body4
  %200 = load i32, i32* %y0, align 4
  store i32 %200, i32* %yy, align 4
  store i32 0, i32* %kk, align 4
  br label %for.cond158

for.cond158:                                      ; preds = %for.inc175, %if.else
  %201 = load i32, i32* %yy, align 4
  %202 = load i32, i32* %y0, align 4
  %add159 = add nsw i32 %202, 4
  %cmp160 = icmp slt i32 %201, %add159
  br i1 %cmp160, label %for.body162, label %for.end177

for.body162:                                      ; preds = %for.cond158
  %203 = load i32, i32* %x0, align 4
  store i32 %203, i32* %xx, align 4
  br label %for.cond163

for.cond163:                                      ; preds = %for.inc, %for.body162
  %204 = load i32, i32* %xx, align 4
  %205 = load i32, i32* %x0, align 4
  %add164 = add nsw i32 %205, 4
  %cmp165 = icmp slt i32 %204, %add164
  br i1 %cmp165, label %for.body167, label %for.end

for.body167:                                      ; preds = %for.cond163
  %206 = load i32, i32* %kk, align 4
  %idxprom168 = sext i32 %206 to i64
  %arrayidx169 = getelementptr inbounds [16 x i32], [16 x i32]* %diff, i64 0, i64 %idxprom168
  %207 = load i32, i32* %arrayidx169, align 4
  %208 = load i32, i32* %yy, align 4
  %idxprom170 = sext i32 %208 to i64
  %arrayidx171 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %curr_diff, i64 0, i64 %idxprom170
  %209 = load i32, i32* %xx, align 4
  %idxprom172 = sext i32 %209 to i64
  %arrayidx173 = getelementptr inbounds [16 x i32], [16 x i32]* %arrayidx171, i64 0, i64 %idxprom172
  store i32 %207, i32* %arrayidx173, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body167
  %210 = load i32, i32* %xx, align 4
  %inc = add nsw i32 %210, 1
  store i32 %inc, i32* %xx, align 4
  %211 = load i32, i32* %kk, align 4
  %inc174 = add nsw i32 %211, 1
  store i32 %inc174, i32* %kk, align 4
  br label %for.cond163

for.end:                                          ; preds = %for.cond163
  br label %for.inc175

for.inc175:                                       ; preds = %for.end
  %212 = load i32, i32* %yy, align 4
  %inc176 = add nsw i32 %212, 1
  store i32 %inc176, i32* %yy, align 4
  br label %for.cond158

for.end177:                                       ; preds = %for.cond158
  br label %if.end178

if.end178:                                        ; preds = %for.end177, %if.end
  br label %for.inc179

for.inc179:                                       ; preds = %if.end178
  %213 = load i32, i32* %x0, align 4
  %add180 = add nsw i32 %213, 4
  store i32 %add180, i32* %x0, align 4
  br label %for.cond2

for.end181:                                       ; preds = %if.then157, %for.cond2
  br label %for.inc182

for.inc182:                                       ; preds = %for.end181
  %214 = load i32, i32* %y0, align 4
  %add183 = add nsw i32 %214, 4
  store i32 %add183, i32* %y0, align 4
  br label %for.cond

for.end184:                                       ; preds = %land.end
  %215 = load i32, i32* %mcost, align 4
  %216 = load i32, i32* %canary
  %217 = icmp eq i32 %216, 1790094097
  br i1 %217, label %218, label %func_exit

218:                                              ; preds = %for.end184, %func_exit
  ret i32 %215

func_exit:                                        ; preds = %for.end184
  call void @detect_breach()
  br label %218
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @skip_intrabk_SAD.23(i32 %best_mode, i32 %ref_max) #0 {
entry:
  %i = alloca i32, align 4
  %ref_max.addr = alloca i32, align 4
  %j = alloca i32, align 4
  %canary = alloca i32
  store i32 604427312, i32* %canary
  %k = alloca i32, align 4
  %best_mode.addr = alloca i32, align 4
  %ref = alloca i32, align 4
  store i32 %best_mode, i32* %best_mode.addr, align 4
  store i32 %ref_max, i32* %ref_max.addr, align 4
  %0 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %number = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %0, i32 0, i32 0
  %1 = load i32, i32* %number, align 8
  %cmp = icmp sgt i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %best_mode.addr, align 4
  %cmp1 = icmp eq i32 %2, 9
  br i1 %cmp1, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.then
  %3 = load i32, i32* %best_mode.addr, align 4
  %cmp2 = icmp eq i32 %3, 10
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.then
  %4 = phi i1 [ true, %if.then ], [ %cmp2, %lor.rhs ]
  %5 = zext i1 %4 to i64
  %cond = select i1 %4, i32 1, i32 0
  %6 = load i32*, i32** @flag_intra, align 8
  %7 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %pix_x = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %7, i32 0, i32 33
  %8 = load i32, i32* %pix_x, align 8
  %shr = ashr i32 %8, 4
  %idxprom = sext i32 %shr to i64
  %arrayidx = getelementptr inbounds i32, i32* %6, i64 %idxprom
  store i32 %cond, i32* %arrayidx, align 4
  br label %if.end

if.end:                                           ; preds = %lor.end, %entry
  %9 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %type = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %9, i32 0, i32 6
  %10 = load i32, i32* %type, align 8
  %cmp3 = icmp ne i32 %10, 0
  br i1 %cmp3, label %land.lhs.true, label %if.end39

land.lhs.true:                                    ; preds = %if.end
  %11 = load i32, i32* %best_mode.addr, align 4
  %cmp4 = icmp eq i32 %11, 9
  br i1 %cmp4, label %if.then6, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %12 = load i32, i32* %best_mode.addr, align 4
  %cmp5 = icmp eq i32 %12, 10
  br i1 %cmp5, label %if.then6, label %if.end39

if.then6:                                         ; preds = %lor.lhs.false, %land.lhs.true
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc36, %if.then6
  %13 = load i32, i32* %i, align 4
  %cmp7 = icmp slt i32 %13, 4
  br i1 %cmp7, label %for.body, label %for.end38

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc33, %for.body
  %14 = load i32, i32* %j, align 4
  %cmp9 = icmp slt i32 %14, 4
  br i1 %cmp9, label %for.body10, label %for.end35

for.body10:                                       ; preds = %for.cond8
  store i32 1, i32* %k, align 4
  br label %for.cond11

for.cond11:                                       ; preds = %for.inc30, %for.body10
  %15 = load i32, i32* %k, align 4
  %cmp12 = icmp slt i32 %15, 8
  br i1 %cmp12, label %for.body13, label %for.end32

for.body13:                                       ; preds = %for.cond11
  store i32 0, i32* %ref, align 4
  br label %for.cond14

for.cond14:                                       ; preds = %for.inc, %for.body13
  %16 = load i32, i32* %ref, align 4
  %17 = load i32, i32* %ref_max.addr, align 4
  %cmp15 = icmp slt i32 %16, %17
  br i1 %cmp15, label %for.body16, label %for.end

for.body16:                                       ; preds = %for.cond14
  %18 = load i32*****, i32****** @all_mincost, align 8
  %19 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %pix_x17 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %19, i32 0, i32 33
  %20 = load i32, i32* %pix_x17, align 8
  %shr18 = ashr i32 %20, 2
  %21 = load i32, i32* %i, align 4
  %add = add nsw i32 %shr18, %21
  %idxprom19 = sext i32 %add to i64
  %arrayidx20 = getelementptr inbounds i32****, i32***** %18, i64 %idxprom19
  %22 = load i32****, i32***** %arrayidx20, align 8
  %23 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %pix_y = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %23, i32 0, i32 34
  %24 = load i32, i32* %pix_y, align 4
  %shr21 = ashr i32 %24, 2
  %25 = load i32, i32* %j, align 4
  %add22 = add nsw i32 %shr21, %25
  %idxprom23 = sext i32 %add22 to i64
  %arrayidx24 = getelementptr inbounds i32***, i32**** %22, i64 %idxprom23
  %26 = load i32***, i32**** %arrayidx24, align 8
  %27 = load i32, i32* %ref, align 4
  %idxprom25 = sext i32 %27 to i64
  %arrayidx26 = getelementptr inbounds i32**, i32*** %26, i64 %idxprom25
  %28 = load i32**, i32*** %arrayidx26, align 8
  %29 = load i32, i32* %k, align 4
  %idxprom27 = sext i32 %29 to i64
  %arrayidx28 = getelementptr inbounds i32*, i32** %28, i64 %idxprom27
  %30 = load i32*, i32** %arrayidx28, align 8
  %arrayidx29 = getelementptr inbounds i32, i32* %30, i64 0
  store i32 0, i32* %arrayidx29, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body16
  %31 = load i32, i32* %ref, align 4
  %inc = add nsw i32 %31, 1
  store i32 %inc, i32* %ref, align 4
  br label %for.cond14

for.end:                                          ; preds = %for.cond14
  br label %for.inc30

for.inc30:                                        ; preds = %for.end
  %32 = load i32, i32* %k, align 4
  %inc31 = add nsw i32 %32, 1
  store i32 %inc31, i32* %k, align 4
  br label %for.cond11

for.end32:                                        ; preds = %for.cond11
  br label %for.inc33

for.inc33:                                        ; preds = %for.end32
  %33 = load i32, i32* %j, align 4
  %inc34 = add nsw i32 %33, 1
  store i32 %inc34, i32* %j, align 4
  br label %for.cond8

for.end35:                                        ; preds = %for.cond8
  br label %for.inc36

for.inc36:                                        ; preds = %for.end35
  %34 = load i32, i32* %i, align 4
  %inc37 = add nsw i32 %34, 1
  store i32 %inc37, i32* %i, align 4
  br label %for.cond

for.end38:                                        ; preds = %for.cond
  br label %if.end39

if.end39:                                         ; preds = %for.end38, %lor.lhs.false, %if.end
  %35 = load i32, i32* %canary
  %36 = icmp eq i32 %35, 604427312
  br i1 %36, label %37, label %func_exit

37:                                               ; preds = %if.end39, %func_exit
  ret void

func_exit:                                        ; preds = %if.end39
  call void @detect_breach()
  br label %37
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @PartCalMad.24(i16* %ref_pic, i16** %orig_pic, i16* (i32, i16*, i32, i32, i32, i32)* %get_ref_line, i32 %blocksize_y, i32 %blocksize_x, i32 %blocksize_x4, i32 %mcost, i32 %min_mcost, i32 %cand_x, i32 %cand_y) #0 {
entry:
  %x4 = alloca i32, align 4
  %height = alloca i32, align 4
  %ref_line = alloca i16*, align 8
  %cand_y.addr = alloca i32, align 4
  %blocksize_y.addr = alloca i32, align 4
  %blocksize_x.addr = alloca i32, align 4
  %get_ref_line.addr = alloca i16* (i32, i16*, i32, i32, i32, i32)*, align 8
  %blocksize_x4.addr = alloca i32, align 4
  %min_mcost.addr = alloca i32, align 4
  %cand_x.addr = alloca i32, align 4
  %orig_line = alloca i16*, align 8
  %orig_pic.addr = alloca i16**, align 8
  %canary = alloca i32
  store i32 647324283, i32* %canary
  %y = alloca i32, align 4
  %mcost.addr = alloca i32, align 4
  %ref_pic.addr = alloca i16*, align 8
  store i16* %ref_pic, i16** %ref_pic.addr, align 8
  store i16** %orig_pic, i16*** %orig_pic.addr, align 8
  store i16* (i32, i16*, i32, i32, i32, i32)* %get_ref_line, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line.addr, align 8
  store i32 %blocksize_y, i32* %blocksize_y.addr, align 4
  store i32 %blocksize_x, i32* %blocksize_x.addr, align 4
  store i32 %blocksize_x4, i32* %blocksize_x4.addr, align 4
  store i32 %mcost, i32* %mcost.addr, align 4
  store i32 %min_mcost, i32* %min_mcost.addr, align 4
  store i32 %cand_x, i32* %cand_x.addr, align 4
  store i32 %cand_y, i32* %cand_y.addr, align 4
  %0 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %MbaffFrameFlag = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %0, i32 0, i32 90
  %1 = load i32, i32* %MbaffFrameFlag, align 8
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %mb_data = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %2, i32 0, i32 51
  %3 = load %struct.macroblock*, %struct.macroblock** %mb_data, align 8
  %4 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %current_mb_nr = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %4, i32 0, i32 3
  %5 = load i32, i32* %current_mb_nr, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 %idxprom
  %mb_field = getelementptr inbounds %struct.macroblock, %struct.macroblock* %arrayidx, i32 0, i32 22
  %6 = load i32, i32* %mb_field, align 4
  %tobool1 = icmp ne i32 %6, 0
  br i1 %tobool1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %7 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height2 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %7, i32 0, i32 15
  %8 = load i32, i32* %height2, align 4
  %div = sdiv i32 %8, 2
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %entry
  %9 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height3 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %9, i32 0, i32 15
  %10 = load i32, i32* %height3, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %div, %cond.true ], [ %10, %cond.false ]
  store i32 %cond, i32* %height, align 4
  store i32 0, i32* %y, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc40, %cond.end
  %11 = load i32, i32* %y, align 4
  %12 = load i32, i32* %blocksize_y.addr, align 4
  %cmp = icmp slt i32 %11, %12
  br i1 %cmp, label %for.body, label %for.end42

for.body:                                         ; preds = %for.cond
  %13 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line.addr, align 8
  %14 = load i32, i32* %blocksize_x.addr, align 4
  %15 = load i16*, i16** %ref_pic.addr, align 8
  %16 = load i32, i32* %cand_y.addr, align 4
  %17 = load i32, i32* %y, align 4
  %add = add nsw i32 %16, %17
  %18 = load i32, i32* %cand_x.addr, align 4
  %19 = load i32, i32* %height, align 4
  %20 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %width = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %20, i32 0, i32 13
  %21 = load i32, i32* %width, align 4
  %call = call i16* %13(i32 %14, i16* %15, i32 %add, i32 %18, i32 %19, i32 %21)
  store i16* %call, i16** %ref_line, align 8
  %22 = load i16**, i16*** %orig_pic.addr, align 8
  %23 = load i32, i32* %y, align 4
  %idxprom4 = sext i32 %23 to i64
  %arrayidx5 = getelementptr inbounds i16*, i16** %22, i64 %idxprom4
  %24 = load i16*, i16** %arrayidx5, align 8
  store i16* %24, i16** %orig_line, align 8
  store i32 0, i32* %x4, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc, %for.body
  %25 = load i32, i32* %x4, align 4
  %26 = load i32, i32* %blocksize_x4.addr, align 4
  %cmp7 = icmp slt i32 %25, %26
  br i1 %cmp7, label %for.body8, label %for.end

for.body8:                                        ; preds = %for.cond6
  %27 = load i32*, i32** @byte_abs, align 8
  %28 = load i16*, i16** %orig_line, align 8
  %incdec.ptr = getelementptr inbounds i16, i16* %28, i32 1
  store i16* %incdec.ptr, i16** %orig_line, align 8
  %29 = load i16, i16* %28, align 2
  %conv = zext i16 %29 to i32
  %30 = load i16*, i16** %ref_line, align 8
  %incdec.ptr9 = getelementptr inbounds i16, i16* %30, i32 1
  store i16* %incdec.ptr9, i16** %ref_line, align 8
  %31 = load i16, i16* %30, align 2
  %conv10 = zext i16 %31 to i32
  %sub = sub nsw i32 %conv, %conv10
  %idxprom11 = sext i32 %sub to i64
  %arrayidx12 = getelementptr inbounds i32, i32* %27, i64 %idxprom11
  %32 = load i32, i32* %arrayidx12, align 4
  %33 = load i32, i32* %mcost.addr, align 4
  %add13 = add nsw i32 %33, %32
  store i32 %add13, i32* %mcost.addr, align 4
  %34 = load i32*, i32** @byte_abs, align 8
  %35 = load i16*, i16** %orig_line, align 8
  %incdec.ptr14 = getelementptr inbounds i16, i16* %35, i32 1
  store i16* %incdec.ptr14, i16** %orig_line, align 8
  %36 = load i16, i16* %35, align 2
  %conv15 = zext i16 %36 to i32
  %37 = load i16*, i16** %ref_line, align 8
  %incdec.ptr16 = getelementptr inbounds i16, i16* %37, i32 1
  store i16* %incdec.ptr16, i16** %ref_line, align 8
  %38 = load i16, i16* %37, align 2
  %conv17 = zext i16 %38 to i32
  %sub18 = sub nsw i32 %conv15, %conv17
  %idxprom19 = sext i32 %sub18 to i64
  %arrayidx20 = getelementptr inbounds i32, i32* %34, i64 %idxprom19
  %39 = load i32, i32* %arrayidx20, align 4
  %40 = load i32, i32* %mcost.addr, align 4
  %add21 = add nsw i32 %40, %39
  store i32 %add21, i32* %mcost.addr, align 4
  %41 = load i32*, i32** @byte_abs, align 8
  %42 = load i16*, i16** %orig_line, align 8
  %incdec.ptr22 = getelementptr inbounds i16, i16* %42, i32 1
  store i16* %incdec.ptr22, i16** %orig_line, align 8
  %43 = load i16, i16* %42, align 2
  %conv23 = zext i16 %43 to i32
  %44 = load i16*, i16** %ref_line, align 8
  %incdec.ptr24 = getelementptr inbounds i16, i16* %44, i32 1
  store i16* %incdec.ptr24, i16** %ref_line, align 8
  %45 = load i16, i16* %44, align 2
  %conv25 = zext i16 %45 to i32
  %sub26 = sub nsw i32 %conv23, %conv25
  %idxprom27 = sext i32 %sub26 to i64
  %arrayidx28 = getelementptr inbounds i32, i32* %41, i64 %idxprom27
  %46 = load i32, i32* %arrayidx28, align 4
  %47 = load i32, i32* %mcost.addr, align 4
  %add29 = add nsw i32 %47, %46
  store i32 %add29, i32* %mcost.addr, align 4
  %48 = load i32*, i32** @byte_abs, align 8
  %49 = load i16*, i16** %orig_line, align 8
  %incdec.ptr30 = getelementptr inbounds i16, i16* %49, i32 1
  store i16* %incdec.ptr30, i16** %orig_line, align 8
  %50 = load i16, i16* %49, align 2
  %conv31 = zext i16 %50 to i32
  %51 = load i16*, i16** %ref_line, align 8
  %incdec.ptr32 = getelementptr inbounds i16, i16* %51, i32 1
  store i16* %incdec.ptr32, i16** %ref_line, align 8
  %52 = load i16, i16* %51, align 2
  %conv33 = zext i16 %52 to i32
  %sub34 = sub nsw i32 %conv31, %conv33
  %idxprom35 = sext i32 %sub34 to i64
  %arrayidx36 = getelementptr inbounds i32, i32* %48, i64 %idxprom35
  %53 = load i32, i32* %arrayidx36, align 4
  %54 = load i32, i32* %mcost.addr, align 4
  %add37 = add nsw i32 %54, %53
  store i32 %add37, i32* %mcost.addr, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body8
  %55 = load i32, i32* %x4, align 4
  %inc = add nsw i32 %55, 1
  store i32 %inc, i32* %x4, align 4
  br label %for.cond6

for.end:                                          ; preds = %for.cond6
  %56 = load i32, i32* %mcost.addr, align 4
  %57 = load i32, i32* %min_mcost.addr, align 4
  %cmp38 = icmp sge i32 %56, %57
  br i1 %cmp38, label %if.then, label %if.end

if.then:                                          ; preds = %for.end
  br label %for.end42

if.end:                                           ; preds = %for.end
  br label %for.inc40

for.inc40:                                        ; preds = %if.end
  %58 = load i32, i32* %y, align 4
  %inc41 = add nsw i32 %58, 1
  store i32 %inc41, i32* %y, align 4
  br label %for.cond

for.end42:                                        ; preds = %if.then, %for.cond
  %59 = load i32, i32* %mcost.addr, align 4
  %60 = load i32, i32* %canary
  %61 = icmp eq i32 %60, 647324283
  br i1 %61, label %62, label %func_exit

62:                                               ; preds = %for.end42, %func_exit
  ret i32 %59

func_exit:                                        ; preds = %for.end42
  call void @detect_breach()
  br label %62
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @skip_intrabk_SAD.25(i32 %best_mode, i32 %ref_max) #0 {
entry:
  %k = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %best_mode.addr = alloca i32, align 4
  %canary = alloca i32
  store i32 1025732707, i32* %canary
  %ref = alloca i32, align 4
  %ref_max.addr = alloca i32, align 4
  store i32 %best_mode, i32* %best_mode.addr, align 4
  store i32 %ref_max, i32* %ref_max.addr, align 4
  %0 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %number = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %0, i32 0, i32 0
  %1 = load i32, i32* %number, align 8
  %cmp = icmp sgt i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %best_mode.addr, align 4
  %cmp1 = icmp eq i32 %2, 9
  br i1 %cmp1, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.then
  %3 = load i32, i32* %best_mode.addr, align 4
  %cmp2 = icmp eq i32 %3, 10
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.then
  %4 = phi i1 [ true, %if.then ], [ %cmp2, %lor.rhs ]
  %5 = zext i1 %4 to i64
  %cond = select i1 %4, i32 1, i32 0
  %6 = load i32*, i32** @flag_intra, align 8
  %7 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %pix_x = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %7, i32 0, i32 33
  %8 = load i32, i32* %pix_x, align 8
  %shr = ashr i32 %8, 4
  %idxprom = sext i32 %shr to i64
  %arrayidx = getelementptr inbounds i32, i32* %6, i64 %idxprom
  store i32 %cond, i32* %arrayidx, align 4
  br label %if.end

if.end:                                           ; preds = %lor.end, %entry
  %9 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %type = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %9, i32 0, i32 6
  %10 = load i32, i32* %type, align 8
  %cmp3 = icmp ne i32 %10, 0
  br i1 %cmp3, label %land.lhs.true, label %if.end39

land.lhs.true:                                    ; preds = %if.end
  %11 = load i32, i32* %best_mode.addr, align 4
  %cmp4 = icmp eq i32 %11, 9
  br i1 %cmp4, label %if.then6, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %12 = load i32, i32* %best_mode.addr, align 4
  %cmp5 = icmp eq i32 %12, 10
  br i1 %cmp5, label %if.then6, label %if.end39

if.then6:                                         ; preds = %lor.lhs.false, %land.lhs.true
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc36, %if.then6
  %13 = load i32, i32* %i, align 4
  %cmp7 = icmp slt i32 %13, 4
  br i1 %cmp7, label %for.body, label %for.end38

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc33, %for.body
  %14 = load i32, i32* %j, align 4
  %cmp9 = icmp slt i32 %14, 4
  br i1 %cmp9, label %for.body10, label %for.end35

for.body10:                                       ; preds = %for.cond8
  store i32 1, i32* %k, align 4
  br label %for.cond11

for.cond11:                                       ; preds = %for.inc30, %for.body10
  %15 = load i32, i32* %k, align 4
  %cmp12 = icmp slt i32 %15, 8
  br i1 %cmp12, label %for.body13, label %for.end32

for.body13:                                       ; preds = %for.cond11
  store i32 0, i32* %ref, align 4
  br label %for.cond14

for.cond14:                                       ; preds = %for.inc, %for.body13
  %16 = load i32, i32* %ref, align 4
  %17 = load i32, i32* %ref_max.addr, align 4
  %cmp15 = icmp slt i32 %16, %17
  br i1 %cmp15, label %for.body16, label %for.end

for.body16:                                       ; preds = %for.cond14
  %18 = load i32*****, i32****** @all_mincost, align 8
  %19 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %pix_x17 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %19, i32 0, i32 33
  %20 = load i32, i32* %pix_x17, align 8
  %shr18 = ashr i32 %20, 2
  %21 = load i32, i32* %i, align 4
  %add = add nsw i32 %shr18, %21
  %idxprom19 = sext i32 %add to i64
  %arrayidx20 = getelementptr inbounds i32****, i32***** %18, i64 %idxprom19
  %22 = load i32****, i32***** %arrayidx20, align 8
  %23 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %pix_y = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %23, i32 0, i32 34
  %24 = load i32, i32* %pix_y, align 4
  %shr21 = ashr i32 %24, 2
  %25 = load i32, i32* %j, align 4
  %add22 = add nsw i32 %shr21, %25
  %idxprom23 = sext i32 %add22 to i64
  %arrayidx24 = getelementptr inbounds i32***, i32**** %22, i64 %idxprom23
  %26 = load i32***, i32**** %arrayidx24, align 8
  %27 = load i32, i32* %ref, align 4
  %idxprom25 = sext i32 %27 to i64
  %arrayidx26 = getelementptr inbounds i32**, i32*** %26, i64 %idxprom25
  %28 = load i32**, i32*** %arrayidx26, align 8
  %29 = load i32, i32* %k, align 4
  %idxprom27 = sext i32 %29 to i64
  %arrayidx28 = getelementptr inbounds i32*, i32** %28, i64 %idxprom27
  %30 = load i32*, i32** %arrayidx28, align 8
  %arrayidx29 = getelementptr inbounds i32, i32* %30, i64 0
  store i32 0, i32* %arrayidx29, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body16
  %31 = load i32, i32* %ref, align 4
  %inc = add nsw i32 %31, 1
  store i32 %inc, i32* %ref, align 4
  br label %for.cond14

for.end:                                          ; preds = %for.cond14
  br label %for.inc30

for.inc30:                                        ; preds = %for.end
  %32 = load i32, i32* %k, align 4
  %inc31 = add nsw i32 %32, 1
  store i32 %inc31, i32* %k, align 4
  br label %for.cond11

for.end32:                                        ; preds = %for.cond11
  br label %for.inc33

for.inc33:                                        ; preds = %for.end32
  %33 = load i32, i32* %j, align 4
  %inc34 = add nsw i32 %33, 1
  store i32 %inc34, i32* %j, align 4
  br label %for.cond8

for.end35:                                        ; preds = %for.cond8
  br label %for.inc36

for.inc36:                                        ; preds = %for.end35
  %34 = load i32, i32* %i, align 4
  %inc37 = add nsw i32 %34, 1
  store i32 %inc37, i32* %i, align 4
  br label %for.cond

for.end38:                                        ; preds = %for.cond
  br label %if.end39

if.end39:                                         ; preds = %for.end38, %lor.lhs.false, %if.end
  %35 = load i32, i32* %canary
  %36 = icmp eq i32 %35, 1025732707
  br i1 %36, label %37, label %func_exit

37:                                               ; preds = %if.end39, %func_exit
  ret void

func_exit:                                        ; preds = %if.end39
  call void @detect_breach()
  br label %37
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @PartCalMad.26(i16* %ref_pic, i16** %orig_pic, i16* (i32, i16*, i32, i32, i32, i32)* %get_ref_line, i32 %blocksize_y, i32 %blocksize_x, i32 %blocksize_x4, i32 %mcost, i32 %min_mcost, i32 %cand_x, i32 %cand_y) #0 {
entry:
  %height = alloca i32, align 4
  %canary = alloca i32
  store i32 745729974, i32* %canary
  %blocksize_x.addr = alloca i32, align 4
  %ref_line = alloca i16*, align 8
  %cand_y.addr = alloca i32, align 4
  %blocksize_x4.addr = alloca i32, align 4
  %min_mcost.addr = alloca i32, align 4
  %x4 = alloca i32, align 4
  %blocksize_y.addr = alloca i32, align 4
  %orig_line = alloca i16*, align 8
  %orig_pic.addr = alloca i16**, align 8
  %ref_pic.addr = alloca i16*, align 8
  %get_ref_line.addr = alloca i16* (i32, i16*, i32, i32, i32, i32)*, align 8
  %cand_x.addr = alloca i32, align 4
  %y = alloca i32, align 4
  %mcost.addr = alloca i32, align 4
  store i16* %ref_pic, i16** %ref_pic.addr, align 8
  store i16** %orig_pic, i16*** %orig_pic.addr, align 8
  store i16* (i32, i16*, i32, i32, i32, i32)* %get_ref_line, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line.addr, align 8
  store i32 %blocksize_y, i32* %blocksize_y.addr, align 4
  store i32 %blocksize_x, i32* %blocksize_x.addr, align 4
  store i32 %blocksize_x4, i32* %blocksize_x4.addr, align 4
  store i32 %mcost, i32* %mcost.addr, align 4
  store i32 %min_mcost, i32* %min_mcost.addr, align 4
  store i32 %cand_x, i32* %cand_x.addr, align 4
  store i32 %cand_y, i32* %cand_y.addr, align 4
  %0 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %MbaffFrameFlag = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %0, i32 0, i32 90
  %1 = load i32, i32* %MbaffFrameFlag, align 8
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %mb_data = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %2, i32 0, i32 51
  %3 = load %struct.macroblock*, %struct.macroblock** %mb_data, align 8
  %4 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %current_mb_nr = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %4, i32 0, i32 3
  %5 = load i32, i32* %current_mb_nr, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 %idxprom
  %mb_field = getelementptr inbounds %struct.macroblock, %struct.macroblock* %arrayidx, i32 0, i32 22
  %6 = load i32, i32* %mb_field, align 4
  %tobool1 = icmp ne i32 %6, 0
  br i1 %tobool1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %7 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height2 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %7, i32 0, i32 15
  %8 = load i32, i32* %height2, align 4
  %div = sdiv i32 %8, 2
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %entry
  %9 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height3 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %9, i32 0, i32 15
  %10 = load i32, i32* %height3, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %div, %cond.true ], [ %10, %cond.false ]
  store i32 %cond, i32* %height, align 4
  store i32 0, i32* %y, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc40, %cond.end
  %11 = load i32, i32* %y, align 4
  %12 = load i32, i32* %blocksize_y.addr, align 4
  %cmp = icmp slt i32 %11, %12
  br i1 %cmp, label %for.body, label %for.end42

for.body:                                         ; preds = %for.cond
  %13 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line.addr, align 8
  %14 = load i32, i32* %blocksize_x.addr, align 4
  %15 = load i16*, i16** %ref_pic.addr, align 8
  %16 = load i32, i32* %cand_y.addr, align 4
  %17 = load i32, i32* %y, align 4
  %add = add nsw i32 %16, %17
  %18 = load i32, i32* %cand_x.addr, align 4
  %19 = load i32, i32* %height, align 4
  %20 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %width = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %20, i32 0, i32 13
  %21 = load i32, i32* %width, align 4
  %call = call i16* %13(i32 %14, i16* %15, i32 %add, i32 %18, i32 %19, i32 %21)
  store i16* %call, i16** %ref_line, align 8
  %22 = load i16**, i16*** %orig_pic.addr, align 8
  %23 = load i32, i32* %y, align 4
  %idxprom4 = sext i32 %23 to i64
  %arrayidx5 = getelementptr inbounds i16*, i16** %22, i64 %idxprom4
  %24 = load i16*, i16** %arrayidx5, align 8
  store i16* %24, i16** %orig_line, align 8
  store i32 0, i32* %x4, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc, %for.body
  %25 = load i32, i32* %x4, align 4
  %26 = load i32, i32* %blocksize_x4.addr, align 4
  %cmp7 = icmp slt i32 %25, %26
  br i1 %cmp7, label %for.body8, label %for.end

for.body8:                                        ; preds = %for.cond6
  %27 = load i32*, i32** @byte_abs, align 8
  %28 = load i16*, i16** %orig_line, align 8
  %incdec.ptr = getelementptr inbounds i16, i16* %28, i32 1
  store i16* %incdec.ptr, i16** %orig_line, align 8
  %29 = load i16, i16* %28, align 2
  %conv = zext i16 %29 to i32
  %30 = load i16*, i16** %ref_line, align 8
  %incdec.ptr9 = getelementptr inbounds i16, i16* %30, i32 1
  store i16* %incdec.ptr9, i16** %ref_line, align 8
  %31 = load i16, i16* %30, align 2
  %conv10 = zext i16 %31 to i32
  %sub = sub nsw i32 %conv, %conv10
  %idxprom11 = sext i32 %sub to i64
  %arrayidx12 = getelementptr inbounds i32, i32* %27, i64 %idxprom11
  %32 = load i32, i32* %arrayidx12, align 4
  %33 = load i32, i32* %mcost.addr, align 4
  %add13 = add nsw i32 %33, %32
  store i32 %add13, i32* %mcost.addr, align 4
  %34 = load i32*, i32** @byte_abs, align 8
  %35 = load i16*, i16** %orig_line, align 8
  %incdec.ptr14 = getelementptr inbounds i16, i16* %35, i32 1
  store i16* %incdec.ptr14, i16** %orig_line, align 8
  %36 = load i16, i16* %35, align 2
  %conv15 = zext i16 %36 to i32
  %37 = load i16*, i16** %ref_line, align 8
  %incdec.ptr16 = getelementptr inbounds i16, i16* %37, i32 1
  store i16* %incdec.ptr16, i16** %ref_line, align 8
  %38 = load i16, i16* %37, align 2
  %conv17 = zext i16 %38 to i32
  %sub18 = sub nsw i32 %conv15, %conv17
  %idxprom19 = sext i32 %sub18 to i64
  %arrayidx20 = getelementptr inbounds i32, i32* %34, i64 %idxprom19
  %39 = load i32, i32* %arrayidx20, align 4
  %40 = load i32, i32* %mcost.addr, align 4
  %add21 = add nsw i32 %40, %39
  store i32 %add21, i32* %mcost.addr, align 4
  %41 = load i32*, i32** @byte_abs, align 8
  %42 = load i16*, i16** %orig_line, align 8
  %incdec.ptr22 = getelementptr inbounds i16, i16* %42, i32 1
  store i16* %incdec.ptr22, i16** %orig_line, align 8
  %43 = load i16, i16* %42, align 2
  %conv23 = zext i16 %43 to i32
  %44 = load i16*, i16** %ref_line, align 8
  %incdec.ptr24 = getelementptr inbounds i16, i16* %44, i32 1
  store i16* %incdec.ptr24, i16** %ref_line, align 8
  %45 = load i16, i16* %44, align 2
  %conv25 = zext i16 %45 to i32
  %sub26 = sub nsw i32 %conv23, %conv25
  %idxprom27 = sext i32 %sub26 to i64
  %arrayidx28 = getelementptr inbounds i32, i32* %41, i64 %idxprom27
  %46 = load i32, i32* %arrayidx28, align 4
  %47 = load i32, i32* %mcost.addr, align 4
  %add29 = add nsw i32 %47, %46
  store i32 %add29, i32* %mcost.addr, align 4
  %48 = load i32*, i32** @byte_abs, align 8
  %49 = load i16*, i16** %orig_line, align 8
  %incdec.ptr30 = getelementptr inbounds i16, i16* %49, i32 1
  store i16* %incdec.ptr30, i16** %orig_line, align 8
  %50 = load i16, i16* %49, align 2
  %conv31 = zext i16 %50 to i32
  %51 = load i16*, i16** %ref_line, align 8
  %incdec.ptr32 = getelementptr inbounds i16, i16* %51, i32 1
  store i16* %incdec.ptr32, i16** %ref_line, align 8
  %52 = load i16, i16* %51, align 2
  %conv33 = zext i16 %52 to i32
  %sub34 = sub nsw i32 %conv31, %conv33
  %idxprom35 = sext i32 %sub34 to i64
  %arrayidx36 = getelementptr inbounds i32, i32* %48, i64 %idxprom35
  %53 = load i32, i32* %arrayidx36, align 4
  %54 = load i32, i32* %mcost.addr, align 4
  %add37 = add nsw i32 %54, %53
  store i32 %add37, i32* %mcost.addr, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body8
  %55 = load i32, i32* %x4, align 4
  %inc = add nsw i32 %55, 1
  store i32 %inc, i32* %x4, align 4
  br label %for.cond6

for.end:                                          ; preds = %for.cond6
  %56 = load i32, i32* %mcost.addr, align 4
  %57 = load i32, i32* %min_mcost.addr, align 4
  %cmp38 = icmp sge i32 %56, %57
  br i1 %cmp38, label %if.then, label %if.end

if.then:                                          ; preds = %for.end
  br label %for.end42

if.end:                                           ; preds = %for.end
  br label %for.inc40

for.inc40:                                        ; preds = %if.end
  %58 = load i32, i32* %y, align 4
  %inc41 = add nsw i32 %58, 1
  store i32 %inc41, i32* %y, align 4
  br label %for.cond

for.end42:                                        ; preds = %if.then, %for.cond
  %59 = load i32, i32* %mcost.addr, align 4
  %60 = load i32, i32* %canary
  %61 = icmp eq i32 %60, 745729974
  br i1 %61, label %62, label %func_exit

62:                                               ; preds = %for.end42, %func_exit
  ret i32 %59

func_exit:                                        ; preds = %for.end42
  call void @detect_breach()
  br label %62
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @DefineThresholdMB.27() #0 {
entry:
  %gb_q_bits = alloca i32, align 4
  %Thresh4x4 = alloca i32, align 4
  %gb_qp_const = alloca i32, align 4
  %canary = alloca i32
  store i32 1413624316, i32* %canary
  %gb_qp_per = alloca i32, align 4
  %gb_qp_rem = alloca i32, align 4
  %0 = load %struct.InputParameters*, %struct.InputParameters** @input, align 8
  %qpN = getelementptr inbounds %struct.InputParameters, %struct.InputParameters* %0, i32 0, i32 4
  %1 = load i32, i32* %qpN, align 8
  %sub = sub nsw i32 %1, 0
  %div = sdiv i32 %sub, 6
  store i32 %div, i32* %gb_qp_per, align 4
  %2 = load %struct.InputParameters*, %struct.InputParameters** @input, align 8
  %qpN1 = getelementptr inbounds %struct.InputParameters, %struct.InputParameters* %2, i32 0, i32 4
  %3 = load i32, i32* %qpN1, align 8
  %sub2 = sub nsw i32 %3, 0
  %rem = srem i32 %sub2, 6
  store i32 %rem, i32* %gb_qp_rem, align 4
  %4 = load i32, i32* %gb_qp_per, align 4
  %add = add nsw i32 15, %4
  store i32 %add, i32* %gb_q_bits, align 4
  %5 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %type = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %5, i32 0, i32 6
  %6 = load i32, i32* %type, align 8
  %cmp = icmp eq i32 %6, 2
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %7 = load i32, i32* %gb_q_bits, align 4
  %shl = shl i32 1, %7
  %div3 = sdiv i32 %shl, 3
  store i32 %div3, i32* %gb_qp_const, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %8 = load i32, i32* %gb_q_bits, align 4
  %shl4 = shl i32 1, %8
  %div5 = sdiv i32 %shl4, 6
  store i32 %div5, i32* %gb_qp_const, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %gb_q_bits, align 4
  %shl6 = shl i32 1, %9
  %10 = load i32, i32* %gb_qp_const, align 4
  %sub7 = sub nsw i32 %shl6, %10
  %11 = load i32, i32* %gb_qp_rem, align 4
  %idxprom = sext i32 %11 to i64
  %arrayidx = getelementptr inbounds [6 x [4 x [4 x i32]]], [6 x [4 x [4 x i32]]]* @quant_coef, i64 0, i64 %idxprom
  %arrayidx8 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %arrayidx, i64 0, i64 0
  %arrayidx9 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx8, i64 0, i64 0
  %12 = load i32, i32* %arrayidx9, align 16
  %div10 = sdiv i32 %sub7, %12
  store i32 %div10, i32* %Thresh4x4, align 4
  %13 = load i32, i32* %Thresh4x4, align 4
  %conv = sitofp i32 %13 to float
  %div11 = fdiv float %conv, 0x403670A3E0000000
  store float %div11, float* @Quantize_step, align 4
  %14 = load float, float* @Quantize_step, align 4
  %mul = fmul float 2.560000e+02, %14
  store float %mul, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 7), align 4
  %15 = load float, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 7), align 4
  %mul12 = fmul float %15, 4.000000e+00
  store float %mul12, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 6), align 8
  %16 = load float, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 7), align 4
  %mul13 = fmul float %16, 4.000000e+00
  store float %mul13, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 5), align 4
  %17 = load float, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 5), align 4
  %mul14 = fmul float %17, 4.000000e+00
  store float %mul14, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 4), align 16
  %18 = load float, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 4), align 16
  %mul15 = fmul float %18, 4.000000e+00
  store float %mul15, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 3), align 4
  %19 = load float, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 4), align 16
  %mul16 = fmul float %19, 4.000000e+00
  store float %mul16, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 2), align 8
  %20 = load float, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 2), align 8
  %mul17 = fmul float %20, 4.000000e+00
  store float %mul17, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 1), align 4
  %21 = load i32, i32* %canary
  %22 = icmp eq i32 %21, 1413624316
  br i1 %22, label %23, label %func_exit

23:                                               ; preds = %if.end, %func_exit
  ret void

func_exit:                                        ; preds = %if.end
  call void @detect_breach()
  br label %23
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @PartCalMad.28(i16* %ref_pic, i16** %orig_pic, i16* (i32, i16*, i32, i32, i32, i32)* %get_ref_line, i32 %blocksize_y, i32 %blocksize_x, i32 %blocksize_x4, i32 %mcost, i32 %min_mcost, i32 %cand_x, i32 %cand_y) #0 {
entry:
  %cand_y.addr = alloca i32, align 4
  %min_mcost.addr = alloca i32, align 4
  %canary = alloca i32
  store i32 656211477, i32* %canary
  %orig_line = alloca i16*, align 8
  %y = alloca i32, align 4
  %get_ref_line.addr = alloca i16* (i32, i16*, i32, i32, i32, i32)*, align 8
  %ref_line = alloca i16*, align 8
  %ref_pic.addr = alloca i16*, align 8
  %blocksize_y.addr = alloca i32, align 4
  %blocksize_x4.addr = alloca i32, align 4
  %height = alloca i32, align 4
  %x4 = alloca i32, align 4
  %blocksize_x.addr = alloca i32, align 4
  %cand_x.addr = alloca i32, align 4
  %orig_pic.addr = alloca i16**, align 8
  %mcost.addr = alloca i32, align 4
  store i16* %ref_pic, i16** %ref_pic.addr, align 8
  store i16** %orig_pic, i16*** %orig_pic.addr, align 8
  store i16* (i32, i16*, i32, i32, i32, i32)* %get_ref_line, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line.addr, align 8
  store i32 %blocksize_y, i32* %blocksize_y.addr, align 4
  store i32 %blocksize_x, i32* %blocksize_x.addr, align 4
  store i32 %blocksize_x4, i32* %blocksize_x4.addr, align 4
  store i32 %mcost, i32* %mcost.addr, align 4
  store i32 %min_mcost, i32* %min_mcost.addr, align 4
  store i32 %cand_x, i32* %cand_x.addr, align 4
  store i32 %cand_y, i32* %cand_y.addr, align 4
  %0 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %MbaffFrameFlag = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %0, i32 0, i32 90
  %1 = load i32, i32* %MbaffFrameFlag, align 8
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %mb_data = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %2, i32 0, i32 51
  %3 = load %struct.macroblock*, %struct.macroblock** %mb_data, align 8
  %4 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %current_mb_nr = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %4, i32 0, i32 3
  %5 = load i32, i32* %current_mb_nr, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 %idxprom
  %mb_field = getelementptr inbounds %struct.macroblock, %struct.macroblock* %arrayidx, i32 0, i32 22
  %6 = load i32, i32* %mb_field, align 4
  %tobool1 = icmp ne i32 %6, 0
  br i1 %tobool1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %7 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height2 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %7, i32 0, i32 15
  %8 = load i32, i32* %height2, align 4
  %div = sdiv i32 %8, 2
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %entry
  %9 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height3 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %9, i32 0, i32 15
  %10 = load i32, i32* %height3, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %div, %cond.true ], [ %10, %cond.false ]
  store i32 %cond, i32* %height, align 4
  store i32 0, i32* %y, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc40, %cond.end
  %11 = load i32, i32* %y, align 4
  %12 = load i32, i32* %blocksize_y.addr, align 4
  %cmp = icmp slt i32 %11, %12
  br i1 %cmp, label %for.body, label %for.end42

for.body:                                         ; preds = %for.cond
  %13 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line.addr, align 8
  %14 = load i32, i32* %blocksize_x.addr, align 4
  %15 = load i16*, i16** %ref_pic.addr, align 8
  %16 = load i32, i32* %cand_y.addr, align 4
  %17 = load i32, i32* %y, align 4
  %add = add nsw i32 %16, %17
  %18 = load i32, i32* %cand_x.addr, align 4
  %19 = load i32, i32* %height, align 4
  %20 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %width = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %20, i32 0, i32 13
  %21 = load i32, i32* %width, align 4
  %call = call i16* %13(i32 %14, i16* %15, i32 %add, i32 %18, i32 %19, i32 %21)
  store i16* %call, i16** %ref_line, align 8
  %22 = load i16**, i16*** %orig_pic.addr, align 8
  %23 = load i32, i32* %y, align 4
  %idxprom4 = sext i32 %23 to i64
  %arrayidx5 = getelementptr inbounds i16*, i16** %22, i64 %idxprom4
  %24 = load i16*, i16** %arrayidx5, align 8
  store i16* %24, i16** %orig_line, align 8
  store i32 0, i32* %x4, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc, %for.body
  %25 = load i32, i32* %x4, align 4
  %26 = load i32, i32* %blocksize_x4.addr, align 4
  %cmp7 = icmp slt i32 %25, %26
  br i1 %cmp7, label %for.body8, label %for.end

for.body8:                                        ; preds = %for.cond6
  %27 = load i32*, i32** @byte_abs, align 8
  %28 = load i16*, i16** %orig_line, align 8
  %incdec.ptr = getelementptr inbounds i16, i16* %28, i32 1
  store i16* %incdec.ptr, i16** %orig_line, align 8
  %29 = load i16, i16* %28, align 2
  %conv = zext i16 %29 to i32
  %30 = load i16*, i16** %ref_line, align 8
  %incdec.ptr9 = getelementptr inbounds i16, i16* %30, i32 1
  store i16* %incdec.ptr9, i16** %ref_line, align 8
  %31 = load i16, i16* %30, align 2
  %conv10 = zext i16 %31 to i32
  %sub = sub nsw i32 %conv, %conv10
  %idxprom11 = sext i32 %sub to i64
  %arrayidx12 = getelementptr inbounds i32, i32* %27, i64 %idxprom11
  %32 = load i32, i32* %arrayidx12, align 4
  %33 = load i32, i32* %mcost.addr, align 4
  %add13 = add nsw i32 %33, %32
  store i32 %add13, i32* %mcost.addr, align 4
  %34 = load i32*, i32** @byte_abs, align 8
  %35 = load i16*, i16** %orig_line, align 8
  %incdec.ptr14 = getelementptr inbounds i16, i16* %35, i32 1
  store i16* %incdec.ptr14, i16** %orig_line, align 8
  %36 = load i16, i16* %35, align 2
  %conv15 = zext i16 %36 to i32
  %37 = load i16*, i16** %ref_line, align 8
  %incdec.ptr16 = getelementptr inbounds i16, i16* %37, i32 1
  store i16* %incdec.ptr16, i16** %ref_line, align 8
  %38 = load i16, i16* %37, align 2
  %conv17 = zext i16 %38 to i32
  %sub18 = sub nsw i32 %conv15, %conv17
  %idxprom19 = sext i32 %sub18 to i64
  %arrayidx20 = getelementptr inbounds i32, i32* %34, i64 %idxprom19
  %39 = load i32, i32* %arrayidx20, align 4
  %40 = load i32, i32* %mcost.addr, align 4
  %add21 = add nsw i32 %40, %39
  store i32 %add21, i32* %mcost.addr, align 4
  %41 = load i32*, i32** @byte_abs, align 8
  %42 = load i16*, i16** %orig_line, align 8
  %incdec.ptr22 = getelementptr inbounds i16, i16* %42, i32 1
  store i16* %incdec.ptr22, i16** %orig_line, align 8
  %43 = load i16, i16* %42, align 2
  %conv23 = zext i16 %43 to i32
  %44 = load i16*, i16** %ref_line, align 8
  %incdec.ptr24 = getelementptr inbounds i16, i16* %44, i32 1
  store i16* %incdec.ptr24, i16** %ref_line, align 8
  %45 = load i16, i16* %44, align 2
  %conv25 = zext i16 %45 to i32
  %sub26 = sub nsw i32 %conv23, %conv25
  %idxprom27 = sext i32 %sub26 to i64
  %arrayidx28 = getelementptr inbounds i32, i32* %41, i64 %idxprom27
  %46 = load i32, i32* %arrayidx28, align 4
  %47 = load i32, i32* %mcost.addr, align 4
  %add29 = add nsw i32 %47, %46
  store i32 %add29, i32* %mcost.addr, align 4
  %48 = load i32*, i32** @byte_abs, align 8
  %49 = load i16*, i16** %orig_line, align 8
  %incdec.ptr30 = getelementptr inbounds i16, i16* %49, i32 1
  store i16* %incdec.ptr30, i16** %orig_line, align 8
  %50 = load i16, i16* %49, align 2
  %conv31 = zext i16 %50 to i32
  %51 = load i16*, i16** %ref_line, align 8
  %incdec.ptr32 = getelementptr inbounds i16, i16* %51, i32 1
  store i16* %incdec.ptr32, i16** %ref_line, align 8
  %52 = load i16, i16* %51, align 2
  %conv33 = zext i16 %52 to i32
  %sub34 = sub nsw i32 %conv31, %conv33
  %idxprom35 = sext i32 %sub34 to i64
  %arrayidx36 = getelementptr inbounds i32, i32* %48, i64 %idxprom35
  %53 = load i32, i32* %arrayidx36, align 4
  %54 = load i32, i32* %mcost.addr, align 4
  %add37 = add nsw i32 %54, %53
  store i32 %add37, i32* %mcost.addr, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body8
  %55 = load i32, i32* %x4, align 4
  %inc = add nsw i32 %55, 1
  store i32 %inc, i32* %x4, align 4
  br label %for.cond6

for.end:                                          ; preds = %for.cond6
  %56 = load i32, i32* %mcost.addr, align 4
  %57 = load i32, i32* %min_mcost.addr, align 4
  %cmp38 = icmp sge i32 %56, %57
  br i1 %cmp38, label %if.then, label %if.end

if.then:                                          ; preds = %for.end
  br label %for.end42

if.end:                                           ; preds = %for.end
  br label %for.inc40

for.inc40:                                        ; preds = %if.end
  %58 = load i32, i32* %y, align 4
  %inc41 = add nsw i32 %58, 1
  store i32 %inc41, i32* %y, align 4
  br label %for.cond

for.end42:                                        ; preds = %if.then, %for.cond
  %59 = load i32, i32* %mcost.addr, align 4
  %60 = load i32, i32* %canary
  %61 = icmp eq i32 %60, 656211477
  br i1 %61, label %62, label %func_exit

62:                                               ; preds = %for.end42, %func_exit
  ret i32 %59

func_exit:                                        ; preds = %for.end42
  call void @detect_breach()
  br label %62
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @PartCalMad.29(i16* %ref_pic, i16** %orig_pic, i16* (i32, i16*, i32, i32, i32, i32)* %get_ref_line, i32 %blocksize_y, i32 %blocksize_x, i32 %blocksize_x4, i32 %mcost, i32 %min_mcost, i32 %cand_x, i32 %cand_y) #0 {
entry:
  %mcost.addr = alloca i32, align 4
  %cand_x.addr = alloca i32, align 4
  %y = alloca i32, align 4
  %blocksize_x4.addr = alloca i32, align 4
  %canary = alloca i32
  store i32 1978097944, i32* %canary
  %get_ref_line.addr = alloca i16* (i32, i16*, i32, i32, i32, i32)*, align 8
  %ref_line = alloca i16*, align 8
  %ref_pic.addr = alloca i16*, align 8
  %min_mcost.addr = alloca i32, align 4
  %cand_y.addr = alloca i32, align 4
  %orig_pic.addr = alloca i16**, align 8
  %x4 = alloca i32, align 4
  %height = alloca i32, align 4
  %blocksize_x.addr = alloca i32, align 4
  %orig_line = alloca i16*, align 8
  %blocksize_y.addr = alloca i32, align 4
  store i16* %ref_pic, i16** %ref_pic.addr, align 8
  store i16** %orig_pic, i16*** %orig_pic.addr, align 8
  store i16* (i32, i16*, i32, i32, i32, i32)* %get_ref_line, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line.addr, align 8
  store i32 %blocksize_y, i32* %blocksize_y.addr, align 4
  store i32 %blocksize_x, i32* %blocksize_x.addr, align 4
  store i32 %blocksize_x4, i32* %blocksize_x4.addr, align 4
  store i32 %mcost, i32* %mcost.addr, align 4
  store i32 %min_mcost, i32* %min_mcost.addr, align 4
  store i32 %cand_x, i32* %cand_x.addr, align 4
  store i32 %cand_y, i32* %cand_y.addr, align 4
  %0 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %MbaffFrameFlag = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %0, i32 0, i32 90
  %1 = load i32, i32* %MbaffFrameFlag, align 8
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %mb_data = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %2, i32 0, i32 51
  %3 = load %struct.macroblock*, %struct.macroblock** %mb_data, align 8
  %4 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %current_mb_nr = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %4, i32 0, i32 3
  %5 = load i32, i32* %current_mb_nr, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 %idxprom
  %mb_field = getelementptr inbounds %struct.macroblock, %struct.macroblock* %arrayidx, i32 0, i32 22
  %6 = load i32, i32* %mb_field, align 4
  %tobool1 = icmp ne i32 %6, 0
  br i1 %tobool1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %7 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height2 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %7, i32 0, i32 15
  %8 = load i32, i32* %height2, align 4
  %div = sdiv i32 %8, 2
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %entry
  %9 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height3 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %9, i32 0, i32 15
  %10 = load i32, i32* %height3, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %div, %cond.true ], [ %10, %cond.false ]
  store i32 %cond, i32* %height, align 4
  store i32 0, i32* %y, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc40, %cond.end
  %11 = load i32, i32* %y, align 4
  %12 = load i32, i32* %blocksize_y.addr, align 4
  %cmp = icmp slt i32 %11, %12
  br i1 %cmp, label %for.body, label %for.end42

for.body:                                         ; preds = %for.cond
  %13 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line.addr, align 8
  %14 = load i32, i32* %blocksize_x.addr, align 4
  %15 = load i16*, i16** %ref_pic.addr, align 8
  %16 = load i32, i32* %cand_y.addr, align 4
  %17 = load i32, i32* %y, align 4
  %add = add nsw i32 %16, %17
  %18 = load i32, i32* %cand_x.addr, align 4
  %19 = load i32, i32* %height, align 4
  %20 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %width = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %20, i32 0, i32 13
  %21 = load i32, i32* %width, align 4
  %call = call i16* %13(i32 %14, i16* %15, i32 %add, i32 %18, i32 %19, i32 %21)
  store i16* %call, i16** %ref_line, align 8
  %22 = load i16**, i16*** %orig_pic.addr, align 8
  %23 = load i32, i32* %y, align 4
  %idxprom4 = sext i32 %23 to i64
  %arrayidx5 = getelementptr inbounds i16*, i16** %22, i64 %idxprom4
  %24 = load i16*, i16** %arrayidx5, align 8
  store i16* %24, i16** %orig_line, align 8
  store i32 0, i32* %x4, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc, %for.body
  %25 = load i32, i32* %x4, align 4
  %26 = load i32, i32* %blocksize_x4.addr, align 4
  %cmp7 = icmp slt i32 %25, %26
  br i1 %cmp7, label %for.body8, label %for.end

for.body8:                                        ; preds = %for.cond6
  %27 = load i32*, i32** @byte_abs, align 8
  %28 = load i16*, i16** %orig_line, align 8
  %incdec.ptr = getelementptr inbounds i16, i16* %28, i32 1
  store i16* %incdec.ptr, i16** %orig_line, align 8
  %29 = load i16, i16* %28, align 2
  %conv = zext i16 %29 to i32
  %30 = load i16*, i16** %ref_line, align 8
  %incdec.ptr9 = getelementptr inbounds i16, i16* %30, i32 1
  store i16* %incdec.ptr9, i16** %ref_line, align 8
  %31 = load i16, i16* %30, align 2
  %conv10 = zext i16 %31 to i32
  %sub = sub nsw i32 %conv, %conv10
  %idxprom11 = sext i32 %sub to i64
  %arrayidx12 = getelementptr inbounds i32, i32* %27, i64 %idxprom11
  %32 = load i32, i32* %arrayidx12, align 4
  %33 = load i32, i32* %mcost.addr, align 4
  %add13 = add nsw i32 %33, %32
  store i32 %add13, i32* %mcost.addr, align 4
  %34 = load i32*, i32** @byte_abs, align 8
  %35 = load i16*, i16** %orig_line, align 8
  %incdec.ptr14 = getelementptr inbounds i16, i16* %35, i32 1
  store i16* %incdec.ptr14, i16** %orig_line, align 8
  %36 = load i16, i16* %35, align 2
  %conv15 = zext i16 %36 to i32
  %37 = load i16*, i16** %ref_line, align 8
  %incdec.ptr16 = getelementptr inbounds i16, i16* %37, i32 1
  store i16* %incdec.ptr16, i16** %ref_line, align 8
  %38 = load i16, i16* %37, align 2
  %conv17 = zext i16 %38 to i32
  %sub18 = sub nsw i32 %conv15, %conv17
  %idxprom19 = sext i32 %sub18 to i64
  %arrayidx20 = getelementptr inbounds i32, i32* %34, i64 %idxprom19
  %39 = load i32, i32* %arrayidx20, align 4
  %40 = load i32, i32* %mcost.addr, align 4
  %add21 = add nsw i32 %40, %39
  store i32 %add21, i32* %mcost.addr, align 4
  %41 = load i32*, i32** @byte_abs, align 8
  %42 = load i16*, i16** %orig_line, align 8
  %incdec.ptr22 = getelementptr inbounds i16, i16* %42, i32 1
  store i16* %incdec.ptr22, i16** %orig_line, align 8
  %43 = load i16, i16* %42, align 2
  %conv23 = zext i16 %43 to i32
  %44 = load i16*, i16** %ref_line, align 8
  %incdec.ptr24 = getelementptr inbounds i16, i16* %44, i32 1
  store i16* %incdec.ptr24, i16** %ref_line, align 8
  %45 = load i16, i16* %44, align 2
  %conv25 = zext i16 %45 to i32
  %sub26 = sub nsw i32 %conv23, %conv25
  %idxprom27 = sext i32 %sub26 to i64
  %arrayidx28 = getelementptr inbounds i32, i32* %41, i64 %idxprom27
  %46 = load i32, i32* %arrayidx28, align 4
  %47 = load i32, i32* %mcost.addr, align 4
  %add29 = add nsw i32 %47, %46
  store i32 %add29, i32* %mcost.addr, align 4
  %48 = load i32*, i32** @byte_abs, align 8
  %49 = load i16*, i16** %orig_line, align 8
  %incdec.ptr30 = getelementptr inbounds i16, i16* %49, i32 1
  store i16* %incdec.ptr30, i16** %orig_line, align 8
  %50 = load i16, i16* %49, align 2
  %conv31 = zext i16 %50 to i32
  %51 = load i16*, i16** %ref_line, align 8
  %incdec.ptr32 = getelementptr inbounds i16, i16* %51, i32 1
  store i16* %incdec.ptr32, i16** %ref_line, align 8
  %52 = load i16, i16* %51, align 2
  %conv33 = zext i16 %52 to i32
  %sub34 = sub nsw i32 %conv31, %conv33
  %idxprom35 = sext i32 %sub34 to i64
  %arrayidx36 = getelementptr inbounds i32, i32* %48, i64 %idxprom35
  %53 = load i32, i32* %arrayidx36, align 4
  %54 = load i32, i32* %mcost.addr, align 4
  %add37 = add nsw i32 %54, %53
  store i32 %add37, i32* %mcost.addr, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body8
  %55 = load i32, i32* %x4, align 4
  %inc = add nsw i32 %55, 1
  store i32 %inc, i32* %x4, align 4
  br label %for.cond6

for.end:                                          ; preds = %for.cond6
  %56 = load i32, i32* %mcost.addr, align 4
  %57 = load i32, i32* %min_mcost.addr, align 4
  %cmp38 = icmp sge i32 %56, %57
  br i1 %cmp38, label %if.then, label %if.end

if.then:                                          ; preds = %for.end
  br label %for.end42

if.end:                                           ; preds = %for.end
  br label %for.inc40

for.inc40:                                        ; preds = %if.end
  %58 = load i32, i32* %y, align 4
  %inc41 = add nsw i32 %58, 1
  store i32 %inc41, i32* %y, align 4
  br label %for.cond

for.end42:                                        ; preds = %if.then, %for.cond
  %59 = load i32, i32* %mcost.addr, align 4
  %60 = load i32, i32* %canary
  %61 = icmp eq i32 %60, 1978097944
  br i1 %61, label %62, label %func_exit

62:                                               ; preds = %for.end42, %func_exit
  ret i32 %59

func_exit:                                        ; preds = %for.end42
  call void @detect_breach()
  br label %62
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @skip_intrabk_SAD.30(i32 %best_mode, i32 %ref_max) #0 {
entry:
  %ref_max.addr = alloca i32, align 4
  %best_mode.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %k = alloca i32, align 4
  %canary = alloca i32
  store i32 1360875924, i32* %canary
  %ref = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 %best_mode, i32* %best_mode.addr, align 4
  store i32 %ref_max, i32* %ref_max.addr, align 4
  %0 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %number = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %0, i32 0, i32 0
  %1 = load i32, i32* %number, align 8
  %cmp = icmp sgt i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %best_mode.addr, align 4
  %cmp1 = icmp eq i32 %2, 9
  br i1 %cmp1, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.then
  %3 = load i32, i32* %best_mode.addr, align 4
  %cmp2 = icmp eq i32 %3, 10
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.then
  %4 = phi i1 [ true, %if.then ], [ %cmp2, %lor.rhs ]
  %5 = zext i1 %4 to i64
  %cond = select i1 %4, i32 1, i32 0
  %6 = load i32*, i32** @flag_intra, align 8
  %7 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %pix_x = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %7, i32 0, i32 33
  %8 = load i32, i32* %pix_x, align 8
  %shr = ashr i32 %8, 4
  %idxprom = sext i32 %shr to i64
  %arrayidx = getelementptr inbounds i32, i32* %6, i64 %idxprom
  store i32 %cond, i32* %arrayidx, align 4
  br label %if.end

if.end:                                           ; preds = %lor.end, %entry
  %9 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %type = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %9, i32 0, i32 6
  %10 = load i32, i32* %type, align 8
  %cmp3 = icmp ne i32 %10, 0
  br i1 %cmp3, label %land.lhs.true, label %if.end39

land.lhs.true:                                    ; preds = %if.end
  %11 = load i32, i32* %best_mode.addr, align 4
  %cmp4 = icmp eq i32 %11, 9
  br i1 %cmp4, label %if.then6, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %12 = load i32, i32* %best_mode.addr, align 4
  %cmp5 = icmp eq i32 %12, 10
  br i1 %cmp5, label %if.then6, label %if.end39

if.then6:                                         ; preds = %lor.lhs.false, %land.lhs.true
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc36, %if.then6
  %13 = load i32, i32* %i, align 4
  %cmp7 = icmp slt i32 %13, 4
  br i1 %cmp7, label %for.body, label %for.end38

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc33, %for.body
  %14 = load i32, i32* %j, align 4
  %cmp9 = icmp slt i32 %14, 4
  br i1 %cmp9, label %for.body10, label %for.end35

for.body10:                                       ; preds = %for.cond8
  store i32 1, i32* %k, align 4
  br label %for.cond11

for.cond11:                                       ; preds = %for.inc30, %for.body10
  %15 = load i32, i32* %k, align 4
  %cmp12 = icmp slt i32 %15, 8
  br i1 %cmp12, label %for.body13, label %for.end32

for.body13:                                       ; preds = %for.cond11
  store i32 0, i32* %ref, align 4
  br label %for.cond14

for.cond14:                                       ; preds = %for.inc, %for.body13
  %16 = load i32, i32* %ref, align 4
  %17 = load i32, i32* %ref_max.addr, align 4
  %cmp15 = icmp slt i32 %16, %17
  br i1 %cmp15, label %for.body16, label %for.end

for.body16:                                       ; preds = %for.cond14
  %18 = load i32*****, i32****** @all_mincost, align 8
  %19 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %pix_x17 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %19, i32 0, i32 33
  %20 = load i32, i32* %pix_x17, align 8
  %shr18 = ashr i32 %20, 2
  %21 = load i32, i32* %i, align 4
  %add = add nsw i32 %shr18, %21
  %idxprom19 = sext i32 %add to i64
  %arrayidx20 = getelementptr inbounds i32****, i32***** %18, i64 %idxprom19
  %22 = load i32****, i32***** %arrayidx20, align 8
  %23 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %pix_y = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %23, i32 0, i32 34
  %24 = load i32, i32* %pix_y, align 4
  %shr21 = ashr i32 %24, 2
  %25 = load i32, i32* %j, align 4
  %add22 = add nsw i32 %shr21, %25
  %idxprom23 = sext i32 %add22 to i64
  %arrayidx24 = getelementptr inbounds i32***, i32**** %22, i64 %idxprom23
  %26 = load i32***, i32**** %arrayidx24, align 8
  %27 = load i32, i32* %ref, align 4
  %idxprom25 = sext i32 %27 to i64
  %arrayidx26 = getelementptr inbounds i32**, i32*** %26, i64 %idxprom25
  %28 = load i32**, i32*** %arrayidx26, align 8
  %29 = load i32, i32* %k, align 4
  %idxprom27 = sext i32 %29 to i64
  %arrayidx28 = getelementptr inbounds i32*, i32** %28, i64 %idxprom27
  %30 = load i32*, i32** %arrayidx28, align 8
  %arrayidx29 = getelementptr inbounds i32, i32* %30, i64 0
  store i32 0, i32* %arrayidx29, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body16
  %31 = load i32, i32* %ref, align 4
  %inc = add nsw i32 %31, 1
  store i32 %inc, i32* %ref, align 4
  br label %for.cond14

for.end:                                          ; preds = %for.cond14
  br label %for.inc30

for.inc30:                                        ; preds = %for.end
  %32 = load i32, i32* %k, align 4
  %inc31 = add nsw i32 %32, 1
  store i32 %inc31, i32* %k, align 4
  br label %for.cond11

for.end32:                                        ; preds = %for.cond11
  br label %for.inc33

for.inc33:                                        ; preds = %for.end32
  %33 = load i32, i32* %j, align 4
  %inc34 = add nsw i32 %33, 1
  store i32 %inc34, i32* %j, align 4
  br label %for.cond8

for.end35:                                        ; preds = %for.cond8
  br label %for.inc36

for.inc36:                                        ; preds = %for.end35
  %34 = load i32, i32* %i, align 4
  %inc37 = add nsw i32 %34, 1
  store i32 %inc37, i32* %i, align 4
  br label %for.cond

for.end38:                                        ; preds = %for.cond
  br label %if.end39

if.end39:                                         ; preds = %for.end38, %lor.lhs.false, %if.end
  %35 = load i32, i32* %canary
  %36 = icmp eq i32 %35, 1360875924
  br i1 %36, label %37, label %func_exit

37:                                               ; preds = %if.end39, %func_exit
  ret void

func_exit:                                        ; preds = %if.end39
  call void @detect_breach()
  br label %37
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @free_mem_bwmincost.31(i32***** %mv) #0 {
entry:
  %k = alloca i32, align 4
  %canary = alloca i32
  store i32 1266560238, i32* %canary
  %j = alloca i32, align 4
  %i = alloca i32, align 4
  %l = alloca i32, align 4
  %mv.addr = alloca i32*****, align 8
  store i32***** %mv, i32****** %mv.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc35, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %width = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %1, i32 0, i32 13
  %2 = load i32, i32* %width, align 4
  %div = sdiv i32 %2, 4
  %cmp = icmp slt i32 %0, %div
  br i1 %cmp, label %for.body, label %for.end37

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc30, %for.body
  %3 = load i32, i32* %j, align 4
  %4 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %4, i32 0, i32 15
  %5 = load i32, i32* %height, align 4
  %div2 = sdiv i32 %5, 4
  %cmp3 = icmp slt i32 %3, %div2
  br i1 %cmp3, label %for.body4, label %for.end32

for.body4:                                        ; preds = %for.cond1
  store i32 0, i32* %k, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc23, %for.body4
  %6 = load i32, i32* %k, align 4
  %7 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %max_num_references = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %7, i32 0, i32 9
  %8 = load i32, i32* %max_num_references, align 4
  %cmp6 = icmp slt i32 %6, %8
  br i1 %cmp6, label %for.body7, label %for.end25

for.body7:                                        ; preds = %for.cond5
  store i32 0, i32* %l, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc, %for.body7
  %9 = load i32, i32* %l, align 4
  %cmp9 = icmp slt i32 %9, 9
  br i1 %cmp9, label %for.body10, label %for.end

for.body10:                                       ; preds = %for.cond8
  %10 = load i32*****, i32****** %mv.addr, align 8
  %11 = load i32, i32* %i, align 4
  %idxprom = sext i32 %11 to i64
  %arrayidx = getelementptr inbounds i32****, i32***** %10, i64 %idxprom
  %12 = load i32****, i32***** %arrayidx, align 8
  %13 = load i32, i32* %j, align 4
  %idxprom11 = sext i32 %13 to i64
  %arrayidx12 = getelementptr inbounds i32***, i32**** %12, i64 %idxprom11
  %14 = load i32***, i32**** %arrayidx12, align 8
  %15 = load i32, i32* %k, align 4
  %idxprom13 = sext i32 %15 to i64
  %arrayidx14 = getelementptr inbounds i32**, i32*** %14, i64 %idxprom13
  %16 = load i32**, i32*** %arrayidx14, align 8
  %17 = load i32, i32* %l, align 4
  %idxprom15 = sext i32 %17 to i64
  %arrayidx16 = getelementptr inbounds i32*, i32** %16, i64 %idxprom15
  %18 = load i32*, i32** %arrayidx16, align 8
  %19 = bitcast i32* %18 to i8*
  call void @free(i8* %19) #5
  br label %for.inc

for.inc:                                          ; preds = %for.body10
  %20 = load i32, i32* %l, align 4
  %inc = add nsw i32 %20, 1
  store i32 %inc, i32* %l, align 4
  br label %for.cond8

for.end:                                          ; preds = %for.cond8
  %21 = load i32*****, i32****** %mv.addr, align 8
  %22 = load i32, i32* %i, align 4
  %idxprom17 = sext i32 %22 to i64
  %arrayidx18 = getelementptr inbounds i32****, i32***** %21, i64 %idxprom17
  %23 = load i32****, i32***** %arrayidx18, align 8
  %24 = load i32, i32* %j, align 4
  %idxprom19 = sext i32 %24 to i64
  %arrayidx20 = getelementptr inbounds i32***, i32**** %23, i64 %idxprom19
  %25 = load i32***, i32**** %arrayidx20, align 8
  %26 = load i32, i32* %k, align 4
  %idxprom21 = sext i32 %26 to i64
  %arrayidx22 = getelementptr inbounds i32**, i32*** %25, i64 %idxprom21
  %27 = load i32**, i32*** %arrayidx22, align 8
  %28 = bitcast i32** %27 to i8*
  call void @free(i8* %28) #5
  br label %for.inc23

for.inc23:                                        ; preds = %for.end
  %29 = load i32, i32* %k, align 4
  %inc24 = add nsw i32 %29, 1
  store i32 %inc24, i32* %k, align 4
  br label %for.cond5

for.end25:                                        ; preds = %for.cond5
  %30 = load i32*****, i32****** %mv.addr, align 8
  %31 = load i32, i32* %i, align 4
  %idxprom26 = sext i32 %31 to i64
  %arrayidx27 = getelementptr inbounds i32****, i32***** %30, i64 %idxprom26
  %32 = load i32****, i32***** %arrayidx27, align 8
  %33 = load i32, i32* %j, align 4
  %idxprom28 = sext i32 %33 to i64
  %arrayidx29 = getelementptr inbounds i32***, i32**** %32, i64 %idxprom28
  %34 = load i32***, i32**** %arrayidx29, align 8
  %35 = bitcast i32*** %34 to i8*
  call void @free(i8* %35) #5
  br label %for.inc30

for.inc30:                                        ; preds = %for.end25
  %36 = load i32, i32* %j, align 4
  %inc31 = add nsw i32 %36, 1
  store i32 %inc31, i32* %j, align 4
  br label %for.cond1

for.end32:                                        ; preds = %for.cond1
  %37 = load i32*****, i32****** %mv.addr, align 8
  %38 = load i32, i32* %i, align 4
  %idxprom33 = sext i32 %38 to i64
  %arrayidx34 = getelementptr inbounds i32****, i32***** %37, i64 %idxprom33
  %39 = load i32****, i32***** %arrayidx34, align 8
  %40 = bitcast i32**** %39 to i8*
  call void @free(i8* %40) #5
  br label %for.inc35

for.inc35:                                        ; preds = %for.end32
  %41 = load i32, i32* %i, align 4
  %inc36 = add nsw i32 %41, 1
  store i32 %inc36, i32* %i, align 4
  br label %for.cond

for.end37:                                        ; preds = %for.cond
  %42 = load i32*****, i32****** %mv.addr, align 8
  %43 = bitcast i32***** %42 to i8*
  call void @free(i8* %43) #5
  %44 = load i32, i32* %canary
  %45 = icmp eq i32 %44, 1266560238
  br i1 %45, label %46, label %func_exit

46:                                               ; preds = %for.end37, %func_exit
  ret void

func_exit:                                        ; preds = %for.end37
  call void @detect_breach()
  br label %46
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @free_mem_bwmincost.32(i32***** %mv) #0 {
entry:
  %mv.addr = alloca i32*****, align 8
  %canary = alloca i32
  store i32 55560247, i32* %canary
  %j = alloca i32, align 4
  %i = alloca i32, align 4
  %l = alloca i32, align 4
  %k = alloca i32, align 4
  store i32***** %mv, i32****** %mv.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc35, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %width = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %1, i32 0, i32 13
  %2 = load i32, i32* %width, align 4
  %div = sdiv i32 %2, 4
  %cmp = icmp slt i32 %0, %div
  br i1 %cmp, label %for.body, label %for.end37

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc30, %for.body
  %3 = load i32, i32* %j, align 4
  %4 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %4, i32 0, i32 15
  %5 = load i32, i32* %height, align 4
  %div2 = sdiv i32 %5, 4
  %cmp3 = icmp slt i32 %3, %div2
  br i1 %cmp3, label %for.body4, label %for.end32

for.body4:                                        ; preds = %for.cond1
  store i32 0, i32* %k, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc23, %for.body4
  %6 = load i32, i32* %k, align 4
  %7 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %max_num_references = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %7, i32 0, i32 9
  %8 = load i32, i32* %max_num_references, align 4
  %cmp6 = icmp slt i32 %6, %8
  br i1 %cmp6, label %for.body7, label %for.end25

for.body7:                                        ; preds = %for.cond5
  store i32 0, i32* %l, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc, %for.body7
  %9 = load i32, i32* %l, align 4
  %cmp9 = icmp slt i32 %9, 9
  br i1 %cmp9, label %for.body10, label %for.end

for.body10:                                       ; preds = %for.cond8
  %10 = load i32*****, i32****** %mv.addr, align 8
  %11 = load i32, i32* %i, align 4
  %idxprom = sext i32 %11 to i64
  %arrayidx = getelementptr inbounds i32****, i32***** %10, i64 %idxprom
  %12 = load i32****, i32***** %arrayidx, align 8
  %13 = load i32, i32* %j, align 4
  %idxprom11 = sext i32 %13 to i64
  %arrayidx12 = getelementptr inbounds i32***, i32**** %12, i64 %idxprom11
  %14 = load i32***, i32**** %arrayidx12, align 8
  %15 = load i32, i32* %k, align 4
  %idxprom13 = sext i32 %15 to i64
  %arrayidx14 = getelementptr inbounds i32**, i32*** %14, i64 %idxprom13
  %16 = load i32**, i32*** %arrayidx14, align 8
  %17 = load i32, i32* %l, align 4
  %idxprom15 = sext i32 %17 to i64
  %arrayidx16 = getelementptr inbounds i32*, i32** %16, i64 %idxprom15
  %18 = load i32*, i32** %arrayidx16, align 8
  %19 = bitcast i32* %18 to i8*
  call void @free(i8* %19) #5
  br label %for.inc

for.inc:                                          ; preds = %for.body10
  %20 = load i32, i32* %l, align 4
  %inc = add nsw i32 %20, 1
  store i32 %inc, i32* %l, align 4
  br label %for.cond8

for.end:                                          ; preds = %for.cond8
  %21 = load i32*****, i32****** %mv.addr, align 8
  %22 = load i32, i32* %i, align 4
  %idxprom17 = sext i32 %22 to i64
  %arrayidx18 = getelementptr inbounds i32****, i32***** %21, i64 %idxprom17
  %23 = load i32****, i32***** %arrayidx18, align 8
  %24 = load i32, i32* %j, align 4
  %idxprom19 = sext i32 %24 to i64
  %arrayidx20 = getelementptr inbounds i32***, i32**** %23, i64 %idxprom19
  %25 = load i32***, i32**** %arrayidx20, align 8
  %26 = load i32, i32* %k, align 4
  %idxprom21 = sext i32 %26 to i64
  %arrayidx22 = getelementptr inbounds i32**, i32*** %25, i64 %idxprom21
  %27 = load i32**, i32*** %arrayidx22, align 8
  %28 = bitcast i32** %27 to i8*
  call void @free(i8* %28) #5
  br label %for.inc23

for.inc23:                                        ; preds = %for.end
  %29 = load i32, i32* %k, align 4
  %inc24 = add nsw i32 %29, 1
  store i32 %inc24, i32* %k, align 4
  br label %for.cond5

for.end25:                                        ; preds = %for.cond5
  %30 = load i32*****, i32****** %mv.addr, align 8
  %31 = load i32, i32* %i, align 4
  %idxprom26 = sext i32 %31 to i64
  %arrayidx27 = getelementptr inbounds i32****, i32***** %30, i64 %idxprom26
  %32 = load i32****, i32***** %arrayidx27, align 8
  %33 = load i32, i32* %j, align 4
  %idxprom28 = sext i32 %33 to i64
  %arrayidx29 = getelementptr inbounds i32***, i32**** %32, i64 %idxprom28
  %34 = load i32***, i32**** %arrayidx29, align 8
  %35 = bitcast i32*** %34 to i8*
  call void @free(i8* %35) #5
  br label %for.inc30

for.inc30:                                        ; preds = %for.end25
  %36 = load i32, i32* %j, align 4
  %inc31 = add nsw i32 %36, 1
  store i32 %inc31, i32* %j, align 4
  br label %for.cond1

for.end32:                                        ; preds = %for.cond1
  %37 = load i32*****, i32****** %mv.addr, align 8
  %38 = load i32, i32* %i, align 4
  %idxprom33 = sext i32 %38 to i64
  %arrayidx34 = getelementptr inbounds i32****, i32***** %37, i64 %idxprom33
  %39 = load i32****, i32***** %arrayidx34, align 8
  %40 = bitcast i32**** %39 to i8*
  call void @free(i8* %40) #5
  br label %for.inc35

for.inc35:                                        ; preds = %for.end32
  %41 = load i32, i32* %i, align 4
  %inc36 = add nsw i32 %41, 1
  store i32 %inc36, i32* %i, align 4
  br label %for.cond

for.end37:                                        ; preds = %for.cond
  %42 = load i32*****, i32****** %mv.addr, align 8
  %43 = bitcast i32***** %42 to i8*
  call void @free(i8* %43) #5
  %44 = load i32, i32* %canary
  %45 = icmp eq i32 %44, 55560247
  br i1 %45, label %46, label %func_exit

46:                                               ; preds = %for.end37, %func_exit
  ret void

func_exit:                                        ; preds = %for.end37
  call void @detect_breach()
  br label %46
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @skip_intrabk_SAD.33(i32 %best_mode, i32 %ref_max) #0 {
entry:
  %k = alloca i32, align 4
  %canary = alloca i32
  store i32 736758001, i32* %canary
  %ref_max.addr = alloca i32, align 4
  %best_mode.addr = alloca i32, align 4
  %j = alloca i32, align 4
  %ref = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %best_mode, i32* %best_mode.addr, align 4
  store i32 %ref_max, i32* %ref_max.addr, align 4
  %0 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %number = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %0, i32 0, i32 0
  %1 = load i32, i32* %number, align 8
  %cmp = icmp sgt i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %best_mode.addr, align 4
  %cmp1 = icmp eq i32 %2, 9
  br i1 %cmp1, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.then
  %3 = load i32, i32* %best_mode.addr, align 4
  %cmp2 = icmp eq i32 %3, 10
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.then
  %4 = phi i1 [ true, %if.then ], [ %cmp2, %lor.rhs ]
  %5 = zext i1 %4 to i64
  %cond = select i1 %4, i32 1, i32 0
  %6 = load i32*, i32** @flag_intra, align 8
  %7 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %pix_x = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %7, i32 0, i32 33
  %8 = load i32, i32* %pix_x, align 8
  %shr = ashr i32 %8, 4
  %idxprom = sext i32 %shr to i64
  %arrayidx = getelementptr inbounds i32, i32* %6, i64 %idxprom
  store i32 %cond, i32* %arrayidx, align 4
  br label %if.end

if.end:                                           ; preds = %lor.end, %entry
  %9 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %type = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %9, i32 0, i32 6
  %10 = load i32, i32* %type, align 8
  %cmp3 = icmp ne i32 %10, 0
  br i1 %cmp3, label %land.lhs.true, label %if.end39

land.lhs.true:                                    ; preds = %if.end
  %11 = load i32, i32* %best_mode.addr, align 4
  %cmp4 = icmp eq i32 %11, 9
  br i1 %cmp4, label %if.then6, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %12 = load i32, i32* %best_mode.addr, align 4
  %cmp5 = icmp eq i32 %12, 10
  br i1 %cmp5, label %if.then6, label %if.end39

if.then6:                                         ; preds = %lor.lhs.false, %land.lhs.true
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc36, %if.then6
  %13 = load i32, i32* %i, align 4
  %cmp7 = icmp slt i32 %13, 4
  br i1 %cmp7, label %for.body, label %for.end38

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc33, %for.body
  %14 = load i32, i32* %j, align 4
  %cmp9 = icmp slt i32 %14, 4
  br i1 %cmp9, label %for.body10, label %for.end35

for.body10:                                       ; preds = %for.cond8
  store i32 1, i32* %k, align 4
  br label %for.cond11

for.cond11:                                       ; preds = %for.inc30, %for.body10
  %15 = load i32, i32* %k, align 4
  %cmp12 = icmp slt i32 %15, 8
  br i1 %cmp12, label %for.body13, label %for.end32

for.body13:                                       ; preds = %for.cond11
  store i32 0, i32* %ref, align 4
  br label %for.cond14

for.cond14:                                       ; preds = %for.inc, %for.body13
  %16 = load i32, i32* %ref, align 4
  %17 = load i32, i32* %ref_max.addr, align 4
  %cmp15 = icmp slt i32 %16, %17
  br i1 %cmp15, label %for.body16, label %for.end

for.body16:                                       ; preds = %for.cond14
  %18 = load i32*****, i32****** @all_mincost, align 8
  %19 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %pix_x17 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %19, i32 0, i32 33
  %20 = load i32, i32* %pix_x17, align 8
  %shr18 = ashr i32 %20, 2
  %21 = load i32, i32* %i, align 4
  %add = add nsw i32 %shr18, %21
  %idxprom19 = sext i32 %add to i64
  %arrayidx20 = getelementptr inbounds i32****, i32***** %18, i64 %idxprom19
  %22 = load i32****, i32***** %arrayidx20, align 8
  %23 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %pix_y = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %23, i32 0, i32 34
  %24 = load i32, i32* %pix_y, align 4
  %shr21 = ashr i32 %24, 2
  %25 = load i32, i32* %j, align 4
  %add22 = add nsw i32 %shr21, %25
  %idxprom23 = sext i32 %add22 to i64
  %arrayidx24 = getelementptr inbounds i32***, i32**** %22, i64 %idxprom23
  %26 = load i32***, i32**** %arrayidx24, align 8
  %27 = load i32, i32* %ref, align 4
  %idxprom25 = sext i32 %27 to i64
  %arrayidx26 = getelementptr inbounds i32**, i32*** %26, i64 %idxprom25
  %28 = load i32**, i32*** %arrayidx26, align 8
  %29 = load i32, i32* %k, align 4
  %idxprom27 = sext i32 %29 to i64
  %arrayidx28 = getelementptr inbounds i32*, i32** %28, i64 %idxprom27
  %30 = load i32*, i32** %arrayidx28, align 8
  %arrayidx29 = getelementptr inbounds i32, i32* %30, i64 0
  store i32 0, i32* %arrayidx29, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body16
  %31 = load i32, i32* %ref, align 4
  %inc = add nsw i32 %31, 1
  store i32 %inc, i32* %ref, align 4
  br label %for.cond14

for.end:                                          ; preds = %for.cond14
  br label %for.inc30

for.inc30:                                        ; preds = %for.end
  %32 = load i32, i32* %k, align 4
  %inc31 = add nsw i32 %32, 1
  store i32 %inc31, i32* %k, align 4
  br label %for.cond11

for.end32:                                        ; preds = %for.cond11
  br label %for.inc33

for.inc33:                                        ; preds = %for.end32
  %33 = load i32, i32* %j, align 4
  %inc34 = add nsw i32 %33, 1
  store i32 %inc34, i32* %j, align 4
  br label %for.cond8

for.end35:                                        ; preds = %for.cond8
  br label %for.inc36

for.inc36:                                        ; preds = %for.end35
  %34 = load i32, i32* %i, align 4
  %inc37 = add nsw i32 %34, 1
  store i32 %inc37, i32* %i, align 4
  br label %for.cond

for.end38:                                        ; preds = %for.cond
  br label %if.end39

if.end39:                                         ; preds = %for.end38, %lor.lhs.false, %if.end
  %35 = load i32, i32* %canary
  %36 = icmp eq i32 %35, 736758001
  br i1 %36, label %37, label %func_exit

37:                                               ; preds = %if.end39, %func_exit
  ret void

func_exit:                                        ; preds = %if.end39
  call void @detect_breach()
  br label %37
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @free_mem_bwmincost.34(i32***** %mv) #0 {
entry:
  %l = alloca i32, align 4
  %canary = alloca i32
  store i32 589682169, i32* %canary
  %i = alloca i32, align 4
  %mv.addr = alloca i32*****, align 8
  %k = alloca i32, align 4
  %j = alloca i32, align 4
  store i32***** %mv, i32****** %mv.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc35, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %width = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %1, i32 0, i32 13
  %2 = load i32, i32* %width, align 4
  %div = sdiv i32 %2, 4
  %cmp = icmp slt i32 %0, %div
  br i1 %cmp, label %for.body, label %for.end37

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc30, %for.body
  %3 = load i32, i32* %j, align 4
  %4 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %4, i32 0, i32 15
  %5 = load i32, i32* %height, align 4
  %div2 = sdiv i32 %5, 4
  %cmp3 = icmp slt i32 %3, %div2
  br i1 %cmp3, label %for.body4, label %for.end32

for.body4:                                        ; preds = %for.cond1
  store i32 0, i32* %k, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc23, %for.body4
  %6 = load i32, i32* %k, align 4
  %7 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %max_num_references = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %7, i32 0, i32 9
  %8 = load i32, i32* %max_num_references, align 4
  %cmp6 = icmp slt i32 %6, %8
  br i1 %cmp6, label %for.body7, label %for.end25

for.body7:                                        ; preds = %for.cond5
  store i32 0, i32* %l, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc, %for.body7
  %9 = load i32, i32* %l, align 4
  %cmp9 = icmp slt i32 %9, 9
  br i1 %cmp9, label %for.body10, label %for.end

for.body10:                                       ; preds = %for.cond8
  %10 = load i32*****, i32****** %mv.addr, align 8
  %11 = load i32, i32* %i, align 4
  %idxprom = sext i32 %11 to i64
  %arrayidx = getelementptr inbounds i32****, i32***** %10, i64 %idxprom
  %12 = load i32****, i32***** %arrayidx, align 8
  %13 = load i32, i32* %j, align 4
  %idxprom11 = sext i32 %13 to i64
  %arrayidx12 = getelementptr inbounds i32***, i32**** %12, i64 %idxprom11
  %14 = load i32***, i32**** %arrayidx12, align 8
  %15 = load i32, i32* %k, align 4
  %idxprom13 = sext i32 %15 to i64
  %arrayidx14 = getelementptr inbounds i32**, i32*** %14, i64 %idxprom13
  %16 = load i32**, i32*** %arrayidx14, align 8
  %17 = load i32, i32* %l, align 4
  %idxprom15 = sext i32 %17 to i64
  %arrayidx16 = getelementptr inbounds i32*, i32** %16, i64 %idxprom15
  %18 = load i32*, i32** %arrayidx16, align 8
  %19 = bitcast i32* %18 to i8*
  call void @free(i8* %19) #5
  br label %for.inc

for.inc:                                          ; preds = %for.body10
  %20 = load i32, i32* %l, align 4
  %inc = add nsw i32 %20, 1
  store i32 %inc, i32* %l, align 4
  br label %for.cond8

for.end:                                          ; preds = %for.cond8
  %21 = load i32*****, i32****** %mv.addr, align 8
  %22 = load i32, i32* %i, align 4
  %idxprom17 = sext i32 %22 to i64
  %arrayidx18 = getelementptr inbounds i32****, i32***** %21, i64 %idxprom17
  %23 = load i32****, i32***** %arrayidx18, align 8
  %24 = load i32, i32* %j, align 4
  %idxprom19 = sext i32 %24 to i64
  %arrayidx20 = getelementptr inbounds i32***, i32**** %23, i64 %idxprom19
  %25 = load i32***, i32**** %arrayidx20, align 8
  %26 = load i32, i32* %k, align 4
  %idxprom21 = sext i32 %26 to i64
  %arrayidx22 = getelementptr inbounds i32**, i32*** %25, i64 %idxprom21
  %27 = load i32**, i32*** %arrayidx22, align 8
  %28 = bitcast i32** %27 to i8*
  call void @free(i8* %28) #5
  br label %for.inc23

for.inc23:                                        ; preds = %for.end
  %29 = load i32, i32* %k, align 4
  %inc24 = add nsw i32 %29, 1
  store i32 %inc24, i32* %k, align 4
  br label %for.cond5

for.end25:                                        ; preds = %for.cond5
  %30 = load i32*****, i32****** %mv.addr, align 8
  %31 = load i32, i32* %i, align 4
  %idxprom26 = sext i32 %31 to i64
  %arrayidx27 = getelementptr inbounds i32****, i32***** %30, i64 %idxprom26
  %32 = load i32****, i32***** %arrayidx27, align 8
  %33 = load i32, i32* %j, align 4
  %idxprom28 = sext i32 %33 to i64
  %arrayidx29 = getelementptr inbounds i32***, i32**** %32, i64 %idxprom28
  %34 = load i32***, i32**** %arrayidx29, align 8
  %35 = bitcast i32*** %34 to i8*
  call void @free(i8* %35) #5
  br label %for.inc30

for.inc30:                                        ; preds = %for.end25
  %36 = load i32, i32* %j, align 4
  %inc31 = add nsw i32 %36, 1
  store i32 %inc31, i32* %j, align 4
  br label %for.cond1

for.end32:                                        ; preds = %for.cond1
  %37 = load i32*****, i32****** %mv.addr, align 8
  %38 = load i32, i32* %i, align 4
  %idxprom33 = sext i32 %38 to i64
  %arrayidx34 = getelementptr inbounds i32****, i32***** %37, i64 %idxprom33
  %39 = load i32****, i32***** %arrayidx34, align 8
  %40 = bitcast i32**** %39 to i8*
  call void @free(i8* %40) #5
  br label %for.inc35

for.inc35:                                        ; preds = %for.end32
  %41 = load i32, i32* %i, align 4
  %inc36 = add nsw i32 %41, 1
  store i32 %inc36, i32* %i, align 4
  br label %for.cond

for.end37:                                        ; preds = %for.cond
  %42 = load i32*****, i32****** %mv.addr, align 8
  %43 = bitcast i32***** %42 to i8*
  call void @free(i8* %43) #5
  %44 = load i32, i32* %canary
  %45 = icmp eq i32 %44, 589682169
  br i1 %45, label %46, label %func_exit

46:                                               ; preds = %for.end37, %func_exit
  ret void

func_exit:                                        ; preds = %for.end37
  call void @detect_breach()
  br label %46
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @AddUpSADQuarter.35(i32 %pic_pix_x, i32 %pic_pix_y, i32 %blocksize_x, i32 %blocksize_y, i32 %cand_mv_x, i32 %cand_mv_y, %struct.storable_picture* %ref_picture, i16** %orig_pic, i32 %Mvmcost, i32 %min_mcost, i32 %useABT) #0 {
entry:
  %canary = alloca i32
  store i32 155774889, i32* %canary
  %ry0 = alloca i32, align 4
  %y0 = alloca i32, align 4
  %x0 = alloca i32, align 4
  %cand_mv_x.addr = alloca i32, align 4
  %pic_pix_y.addr = alloca i32, align 4
  %blocksize_x.addr = alloca i32, align 4
  %mcost = alloca i32, align 4
  %cand_mv_y.addr = alloca i32, align 4
  %curr_diff = alloca [16 x [16 x i32]], align 16
  %diff = alloca [16 x i32], align 16
  %abort_search = alloca i32, align 4
  %rx0 = alloca i32, align 4
  %xx = alloca i32, align 4
  %blocksize_y.addr = alloca i32, align 4
  %ref_picture.addr = alloca %struct.storable_picture*, align 8
  %ref_pic = alloca i16**, align 8
  %d = alloca i32*, align 8
  %kk = alloca i32, align 4
  %min_mcost.addr = alloca i32, align 4
  %useABT.addr = alloca i32, align 4
  %img_height = alloca i32, align 4
  %pic_pix_x.addr = alloca i32, align 4
  %orig_pic.addr = alloca i16**, align 8
  %img_width = alloca i32, align 4
  %yy = alloca i32, align 4
  %ry = alloca i32, align 4
  %orig_line = alloca i16*, align 8
  %Mvmcost.addr = alloca i32, align 4
  store i32 %pic_pix_x, i32* %pic_pix_x.addr, align 4
  store i32 %pic_pix_y, i32* %pic_pix_y.addr, align 4
  store i32 %blocksize_x, i32* %blocksize_x.addr, align 4
  store i32 %blocksize_y, i32* %blocksize_y.addr, align 4
  store i32 %cand_mv_x, i32* %cand_mv_x.addr, align 4
  store i32 %cand_mv_y, i32* %cand_mv_y.addr, align 4
  store %struct.storable_picture* %ref_picture, %struct.storable_picture** %ref_picture.addr, align 8
  store i16** %orig_pic, i16*** %orig_pic.addr, align 8
  store i32 %Mvmcost, i32* %Mvmcost.addr, align 4
  store i32 %min_mcost, i32* %min_mcost.addr, align 4
  store i32 %useABT, i32* %useABT.addr, align 4
  %0 = load i32, i32* %Mvmcost.addr, align 4
  store i32 %0, i32* %mcost, align 4
  %1 = load %struct.storable_picture*, %struct.storable_picture** %ref_picture.addr, align 8
  %imgY_ups = getelementptr inbounds %struct.storable_picture, %struct.storable_picture* %1, i32 0, i32 28
  %2 = load i16**, i16*** %imgY_ups, align 8
  store i16** %2, i16*** %ref_pic, align 8
  %3 = load %struct.storable_picture*, %struct.storable_picture** %ref_picture.addr, align 8
  %size_x = getelementptr inbounds %struct.storable_picture, %struct.storable_picture* %3, i32 0, i32 18
  %4 = load i32, i32* %size_x, align 8
  store i32 %4, i32* %img_width, align 4
  %5 = load %struct.storable_picture*, %struct.storable_picture** %ref_picture.addr, align 8
  %size_y = getelementptr inbounds %struct.storable_picture, %struct.storable_picture* %5, i32 0, i32 19
  %6 = load i32, i32* %size_y, align 4
  store i32 %6, i32* %img_height, align 4
  store i32 0, i32* %y0, align 4
  store i32 0, i32* %abort_search, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc182, %entry
  %7 = load i32, i32* %y0, align 4
  %8 = load i32, i32* %blocksize_y.addr, align 4
  %cmp = icmp slt i32 %7, %8
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %9 = load i32, i32* %abort_search, align 4
  %tobool = icmp ne i32 %9, 0
  %lnot = xor i1 %tobool, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %10 = phi i1 [ false, %for.cond ], [ %lnot, %land.rhs ]
  br i1 %10, label %for.body, label %for.end184

for.body:                                         ; preds = %land.end
  %11 = load i32, i32* %pic_pix_y.addr, align 4
  %12 = load i32, i32* %y0, align 4
  %add = add nsw i32 %11, %12
  %shl = shl i32 %add, 2
  %13 = load i32, i32* %cand_mv_y.addr, align 4
  %add1 = add nsw i32 %shl, %13
  store i32 %add1, i32* %ry0, align 4
  store i32 0, i32* %x0, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc179, %for.body
  %14 = load i32, i32* %x0, align 4
  %15 = load i32, i32* %blocksize_x.addr, align 4
  %cmp3 = icmp slt i32 %14, %15
  br i1 %cmp3, label %for.body4, label %for.end181

for.body4:                                        ; preds = %for.cond2
  %16 = load i32, i32* %pic_pix_x.addr, align 4
  %17 = load i32, i32* %x0, align 4
  %add5 = add nsw i32 %16, %17
  %shl6 = shl i32 %add5, 2
  %18 = load i32, i32* %cand_mv_x.addr, align 4
  %add7 = add nsw i32 %shl6, %18
  store i32 %add7, i32* %rx0, align 4
  %arraydecay = getelementptr inbounds [16 x i32], [16 x i32]* %diff, i64 0, i64 0
  store i32* %arraydecay, i32** %d, align 8
  %19 = load i16**, i16*** %orig_pic.addr, align 8
  %20 = load i32, i32* %y0, align 4
  %idxprom = sext i32 %20 to i64
  %arrayidx = getelementptr inbounds i16*, i16** %19, i64 %idxprom
  %21 = load i16*, i16** %arrayidx, align 8
  store i16* %21, i16** %orig_line, align 8
  %22 = load i32, i32* %ry0, align 4
  store i32 %22, i32* %ry, align 4
  %23 = load i16*, i16** %orig_line, align 8
  %24 = load i32, i32* %x0, align 4
  %idxprom8 = sext i32 %24 to i64
  %arrayidx9 = getelementptr inbounds i16, i16* %23, i64 %idxprom8
  %25 = load i16, i16* %arrayidx9, align 2
  %conv = zext i16 %25 to i32
  %26 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %27 = load i16**, i16*** %ref_pic, align 8
  %28 = load i32, i32* %ry, align 4
  %29 = load i32, i32* %rx0, align 4
  %30 = load i32, i32* %img_height, align 4
  %31 = load i32, i32* %img_width, align 4
  %call = call zeroext i16 %26(i16** %27, i32 %28, i32 %29, i32 %30, i32 %31)
  %conv10 = zext i16 %call to i32
  %sub = sub nsw i32 %conv, %conv10
  %32 = load i32*, i32** %d, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %32, i32 1
  store i32* %incdec.ptr, i32** %d, align 8
  store i32 %sub, i32* %32, align 4
  %33 = load i16*, i16** %orig_line, align 8
  %34 = load i32, i32* %x0, align 4
  %add11 = add nsw i32 %34, 1
  %idxprom12 = sext i32 %add11 to i64
  %arrayidx13 = getelementptr inbounds i16, i16* %33, i64 %idxprom12
  %35 = load i16, i16* %arrayidx13, align 2
  %conv14 = zext i16 %35 to i32
  %36 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %37 = load i16**, i16*** %ref_pic, align 8
  %38 = load i32, i32* %ry, align 4
  %39 = load i32, i32* %rx0, align 4
  %add15 = add nsw i32 %39, 4
  %40 = load i32, i32* %img_height, align 4
  %41 = load i32, i32* %img_width, align 4
  %call16 = call zeroext i16 %36(i16** %37, i32 %38, i32 %add15, i32 %40, i32 %41)
  %conv17 = zext i16 %call16 to i32
  %sub18 = sub nsw i32 %conv14, %conv17
  %42 = load i32*, i32** %d, align 8
  %incdec.ptr19 = getelementptr inbounds i32, i32* %42, i32 1
  store i32* %incdec.ptr19, i32** %d, align 8
  store i32 %sub18, i32* %42, align 4
  %43 = load i16*, i16** %orig_line, align 8
  %44 = load i32, i32* %x0, align 4
  %add20 = add nsw i32 %44, 2
  %idxprom21 = sext i32 %add20 to i64
  %arrayidx22 = getelementptr inbounds i16, i16* %43, i64 %idxprom21
  %45 = load i16, i16* %arrayidx22, align 2
  %conv23 = zext i16 %45 to i32
  %46 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %47 = load i16**, i16*** %ref_pic, align 8
  %48 = load i32, i32* %ry, align 4
  %49 = load i32, i32* %rx0, align 4
  %add24 = add nsw i32 %49, 8
  %50 = load i32, i32* %img_height, align 4
  %51 = load i32, i32* %img_width, align 4
  %call25 = call zeroext i16 %46(i16** %47, i32 %48, i32 %add24, i32 %50, i32 %51)
  %conv26 = zext i16 %call25 to i32
  %sub27 = sub nsw i32 %conv23, %conv26
  %52 = load i32*, i32** %d, align 8
  %incdec.ptr28 = getelementptr inbounds i32, i32* %52, i32 1
  store i32* %incdec.ptr28, i32** %d, align 8
  store i32 %sub27, i32* %52, align 4
  %53 = load i16*, i16** %orig_line, align 8
  %54 = load i32, i32* %x0, align 4
  %add29 = add nsw i32 %54, 3
  %idxprom30 = sext i32 %add29 to i64
  %arrayidx31 = getelementptr inbounds i16, i16* %53, i64 %idxprom30
  %55 = load i16, i16* %arrayidx31, align 2
  %conv32 = zext i16 %55 to i32
  %56 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %57 = load i16**, i16*** %ref_pic, align 8
  %58 = load i32, i32* %ry, align 4
  %59 = load i32, i32* %rx0, align 4
  %add33 = add nsw i32 %59, 12
  %60 = load i32, i32* %img_height, align 4
  %61 = load i32, i32* %img_width, align 4
  %call34 = call zeroext i16 %56(i16** %57, i32 %58, i32 %add33, i32 %60, i32 %61)
  %conv35 = zext i16 %call34 to i32
  %sub36 = sub nsw i32 %conv32, %conv35
  %62 = load i32*, i32** %d, align 8
  %incdec.ptr37 = getelementptr inbounds i32, i32* %62, i32 1
  store i32* %incdec.ptr37, i32** %d, align 8
  store i32 %sub36, i32* %62, align 4
  %63 = load i16**, i16*** %orig_pic.addr, align 8
  %64 = load i32, i32* %y0, align 4
  %add38 = add nsw i32 %64, 1
  %idxprom39 = sext i32 %add38 to i64
  %arrayidx40 = getelementptr inbounds i16*, i16** %63, i64 %idxprom39
  %65 = load i16*, i16** %arrayidx40, align 8
  store i16* %65, i16** %orig_line, align 8
  %66 = load i32, i32* %ry0, align 4
  %add41 = add nsw i32 %66, 4
  store i32 %add41, i32* %ry, align 4
  %67 = load i16*, i16** %orig_line, align 8
  %68 = load i32, i32* %x0, align 4
  %idxprom42 = sext i32 %68 to i64
  %arrayidx43 = getelementptr inbounds i16, i16* %67, i64 %idxprom42
  %69 = load i16, i16* %arrayidx43, align 2
  %conv44 = zext i16 %69 to i32
  %70 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %71 = load i16**, i16*** %ref_pic, align 8
  %72 = load i32, i32* %ry, align 4
  %73 = load i32, i32* %rx0, align 4
  %74 = load i32, i32* %img_height, align 4
  %75 = load i32, i32* %img_width, align 4
  %call45 = call zeroext i16 %70(i16** %71, i32 %72, i32 %73, i32 %74, i32 %75)
  %conv46 = zext i16 %call45 to i32
  %sub47 = sub nsw i32 %conv44, %conv46
  %76 = load i32*, i32** %d, align 8
  %incdec.ptr48 = getelementptr inbounds i32, i32* %76, i32 1
  store i32* %incdec.ptr48, i32** %d, align 8
  store i32 %sub47, i32* %76, align 4
  %77 = load i16*, i16** %orig_line, align 8
  %78 = load i32, i32* %x0, align 4
  %add49 = add nsw i32 %78, 1
  %idxprom50 = sext i32 %add49 to i64
  %arrayidx51 = getelementptr inbounds i16, i16* %77, i64 %idxprom50
  %79 = load i16, i16* %arrayidx51, align 2
  %conv52 = zext i16 %79 to i32
  %80 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %81 = load i16**, i16*** %ref_pic, align 8
  %82 = load i32, i32* %ry, align 4
  %83 = load i32, i32* %rx0, align 4
  %add53 = add nsw i32 %83, 4
  %84 = load i32, i32* %img_height, align 4
  %85 = load i32, i32* %img_width, align 4
  %call54 = call zeroext i16 %80(i16** %81, i32 %82, i32 %add53, i32 %84, i32 %85)
  %conv55 = zext i16 %call54 to i32
  %sub56 = sub nsw i32 %conv52, %conv55
  %86 = load i32*, i32** %d, align 8
  %incdec.ptr57 = getelementptr inbounds i32, i32* %86, i32 1
  store i32* %incdec.ptr57, i32** %d, align 8
  store i32 %sub56, i32* %86, align 4
  %87 = load i16*, i16** %orig_line, align 8
  %88 = load i32, i32* %x0, align 4
  %add58 = add nsw i32 %88, 2
  %idxprom59 = sext i32 %add58 to i64
  %arrayidx60 = getelementptr inbounds i16, i16* %87, i64 %idxprom59
  %89 = load i16, i16* %arrayidx60, align 2
  %conv61 = zext i16 %89 to i32
  %90 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %91 = load i16**, i16*** %ref_pic, align 8
  %92 = load i32, i32* %ry, align 4
  %93 = load i32, i32* %rx0, align 4
  %add62 = add nsw i32 %93, 8
  %94 = load i32, i32* %img_height, align 4
  %95 = load i32, i32* %img_width, align 4
  %call63 = call zeroext i16 %90(i16** %91, i32 %92, i32 %add62, i32 %94, i32 %95)
  %conv64 = zext i16 %call63 to i32
  %sub65 = sub nsw i32 %conv61, %conv64
  %96 = load i32*, i32** %d, align 8
  %incdec.ptr66 = getelementptr inbounds i32, i32* %96, i32 1
  store i32* %incdec.ptr66, i32** %d, align 8
  store i32 %sub65, i32* %96, align 4
  %97 = load i16*, i16** %orig_line, align 8
  %98 = load i32, i32* %x0, align 4
  %add67 = add nsw i32 %98, 3
  %idxprom68 = sext i32 %add67 to i64
  %arrayidx69 = getelementptr inbounds i16, i16* %97, i64 %idxprom68
  %99 = load i16, i16* %arrayidx69, align 2
  %conv70 = zext i16 %99 to i32
  %100 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %101 = load i16**, i16*** %ref_pic, align 8
  %102 = load i32, i32* %ry, align 4
  %103 = load i32, i32* %rx0, align 4
  %add71 = add nsw i32 %103, 12
  %104 = load i32, i32* %img_height, align 4
  %105 = load i32, i32* %img_width, align 4
  %call72 = call zeroext i16 %100(i16** %101, i32 %102, i32 %add71, i32 %104, i32 %105)
  %conv73 = zext i16 %call72 to i32
  %sub74 = sub nsw i32 %conv70, %conv73
  %106 = load i32*, i32** %d, align 8
  %incdec.ptr75 = getelementptr inbounds i32, i32* %106, i32 1
  store i32* %incdec.ptr75, i32** %d, align 8
  store i32 %sub74, i32* %106, align 4
  %107 = load i16**, i16*** %orig_pic.addr, align 8
  %108 = load i32, i32* %y0, align 4
  %add76 = add nsw i32 %108, 2
  %idxprom77 = sext i32 %add76 to i64
  %arrayidx78 = getelementptr inbounds i16*, i16** %107, i64 %idxprom77
  %109 = load i16*, i16** %arrayidx78, align 8
  store i16* %109, i16** %orig_line, align 8
  %110 = load i32, i32* %ry0, align 4
  %add79 = add nsw i32 %110, 8
  store i32 %add79, i32* %ry, align 4
  %111 = load i16*, i16** %orig_line, align 8
  %112 = load i32, i32* %x0, align 4
  %idxprom80 = sext i32 %112 to i64
  %arrayidx81 = getelementptr inbounds i16, i16* %111, i64 %idxprom80
  %113 = load i16, i16* %arrayidx81, align 2
  %conv82 = zext i16 %113 to i32
  %114 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %115 = load i16**, i16*** %ref_pic, align 8
  %116 = load i32, i32* %ry, align 4
  %117 = load i32, i32* %rx0, align 4
  %118 = load i32, i32* %img_height, align 4
  %119 = load i32, i32* %img_width, align 4
  %call83 = call zeroext i16 %114(i16** %115, i32 %116, i32 %117, i32 %118, i32 %119)
  %conv84 = zext i16 %call83 to i32
  %sub85 = sub nsw i32 %conv82, %conv84
  %120 = load i32*, i32** %d, align 8
  %incdec.ptr86 = getelementptr inbounds i32, i32* %120, i32 1
  store i32* %incdec.ptr86, i32** %d, align 8
  store i32 %sub85, i32* %120, align 4
  %121 = load i16*, i16** %orig_line, align 8
  %122 = load i32, i32* %x0, align 4
  %add87 = add nsw i32 %122, 1
  %idxprom88 = sext i32 %add87 to i64
  %arrayidx89 = getelementptr inbounds i16, i16* %121, i64 %idxprom88
  %123 = load i16, i16* %arrayidx89, align 2
  %conv90 = zext i16 %123 to i32
  %124 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %125 = load i16**, i16*** %ref_pic, align 8
  %126 = load i32, i32* %ry, align 4
  %127 = load i32, i32* %rx0, align 4
  %add91 = add nsw i32 %127, 4
  %128 = load i32, i32* %img_height, align 4
  %129 = load i32, i32* %img_width, align 4
  %call92 = call zeroext i16 %124(i16** %125, i32 %126, i32 %add91, i32 %128, i32 %129)
  %conv93 = zext i16 %call92 to i32
  %sub94 = sub nsw i32 %conv90, %conv93
  %130 = load i32*, i32** %d, align 8
  %incdec.ptr95 = getelementptr inbounds i32, i32* %130, i32 1
  store i32* %incdec.ptr95, i32** %d, align 8
  store i32 %sub94, i32* %130, align 4
  %131 = load i16*, i16** %orig_line, align 8
  %132 = load i32, i32* %x0, align 4
  %add96 = add nsw i32 %132, 2
  %idxprom97 = sext i32 %add96 to i64
  %arrayidx98 = getelementptr inbounds i16, i16* %131, i64 %idxprom97
  %133 = load i16, i16* %arrayidx98, align 2
  %conv99 = zext i16 %133 to i32
  %134 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %135 = load i16**, i16*** %ref_pic, align 8
  %136 = load i32, i32* %ry, align 4
  %137 = load i32, i32* %rx0, align 4
  %add100 = add nsw i32 %137, 8
  %138 = load i32, i32* %img_height, align 4
  %139 = load i32, i32* %img_width, align 4
  %call101 = call zeroext i16 %134(i16** %135, i32 %136, i32 %add100, i32 %138, i32 %139)
  %conv102 = zext i16 %call101 to i32
  %sub103 = sub nsw i32 %conv99, %conv102
  %140 = load i32*, i32** %d, align 8
  %incdec.ptr104 = getelementptr inbounds i32, i32* %140, i32 1
  store i32* %incdec.ptr104, i32** %d, align 8
  store i32 %sub103, i32* %140, align 4
  %141 = load i16*, i16** %orig_line, align 8
  %142 = load i32, i32* %x0, align 4
  %add105 = add nsw i32 %142, 3
  %idxprom106 = sext i32 %add105 to i64
  %arrayidx107 = getelementptr inbounds i16, i16* %141, i64 %idxprom106
  %143 = load i16, i16* %arrayidx107, align 2
  %conv108 = zext i16 %143 to i32
  %144 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %145 = load i16**, i16*** %ref_pic, align 8
  %146 = load i32, i32* %ry, align 4
  %147 = load i32, i32* %rx0, align 4
  %add109 = add nsw i32 %147, 12
  %148 = load i32, i32* %img_height, align 4
  %149 = load i32, i32* %img_width, align 4
  %call110 = call zeroext i16 %144(i16** %145, i32 %146, i32 %add109, i32 %148, i32 %149)
  %conv111 = zext i16 %call110 to i32
  %sub112 = sub nsw i32 %conv108, %conv111
  %150 = load i32*, i32** %d, align 8
  %incdec.ptr113 = getelementptr inbounds i32, i32* %150, i32 1
  store i32* %incdec.ptr113, i32** %d, align 8
  store i32 %sub112, i32* %150, align 4
  %151 = load i16**, i16*** %orig_pic.addr, align 8
  %152 = load i32, i32* %y0, align 4
  %add114 = add nsw i32 %152, 3
  %idxprom115 = sext i32 %add114 to i64
  %arrayidx116 = getelementptr inbounds i16*, i16** %151, i64 %idxprom115
  %153 = load i16*, i16** %arrayidx116, align 8
  store i16* %153, i16** %orig_line, align 8
  %154 = load i32, i32* %ry0, align 4
  %add117 = add nsw i32 %154, 12
  store i32 %add117, i32* %ry, align 4
  %155 = load i16*, i16** %orig_line, align 8
  %156 = load i32, i32* %x0, align 4
  %idxprom118 = sext i32 %156 to i64
  %arrayidx119 = getelementptr inbounds i16, i16* %155, i64 %idxprom118
  %157 = load i16, i16* %arrayidx119, align 2
  %conv120 = zext i16 %157 to i32
  %158 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %159 = load i16**, i16*** %ref_pic, align 8
  %160 = load i32, i32* %ry, align 4
  %161 = load i32, i32* %rx0, align 4
  %162 = load i32, i32* %img_height, align 4
  %163 = load i32, i32* %img_width, align 4
  %call121 = call zeroext i16 %158(i16** %159, i32 %160, i32 %161, i32 %162, i32 %163)
  %conv122 = zext i16 %call121 to i32
  %sub123 = sub nsw i32 %conv120, %conv122
  %164 = load i32*, i32** %d, align 8
  %incdec.ptr124 = getelementptr inbounds i32, i32* %164, i32 1
  store i32* %incdec.ptr124, i32** %d, align 8
  store i32 %sub123, i32* %164, align 4
  %165 = load i16*, i16** %orig_line, align 8
  %166 = load i32, i32* %x0, align 4
  %add125 = add nsw i32 %166, 1
  %idxprom126 = sext i32 %add125 to i64
  %arrayidx127 = getelementptr inbounds i16, i16* %165, i64 %idxprom126
  %167 = load i16, i16* %arrayidx127, align 2
  %conv128 = zext i16 %167 to i32
  %168 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %169 = load i16**, i16*** %ref_pic, align 8
  %170 = load i32, i32* %ry, align 4
  %171 = load i32, i32* %rx0, align 4
  %add129 = add nsw i32 %171, 4
  %172 = load i32, i32* %img_height, align 4
  %173 = load i32, i32* %img_width, align 4
  %call130 = call zeroext i16 %168(i16** %169, i32 %170, i32 %add129, i32 %172, i32 %173)
  %conv131 = zext i16 %call130 to i32
  %sub132 = sub nsw i32 %conv128, %conv131
  %174 = load i32*, i32** %d, align 8
  %incdec.ptr133 = getelementptr inbounds i32, i32* %174, i32 1
  store i32* %incdec.ptr133, i32** %d, align 8
  store i32 %sub132, i32* %174, align 4
  %175 = load i16*, i16** %orig_line, align 8
  %176 = load i32, i32* %x0, align 4
  %add134 = add nsw i32 %176, 2
  %idxprom135 = sext i32 %add134 to i64
  %arrayidx136 = getelementptr inbounds i16, i16* %175, i64 %idxprom135
  %177 = load i16, i16* %arrayidx136, align 2
  %conv137 = zext i16 %177 to i32
  %178 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %179 = load i16**, i16*** %ref_pic, align 8
  %180 = load i32, i32* %ry, align 4
  %181 = load i32, i32* %rx0, align 4
  %add138 = add nsw i32 %181, 8
  %182 = load i32, i32* %img_height, align 4
  %183 = load i32, i32* %img_width, align 4
  %call139 = call zeroext i16 %178(i16** %179, i32 %180, i32 %add138, i32 %182, i32 %183)
  %conv140 = zext i16 %call139 to i32
  %sub141 = sub nsw i32 %conv137, %conv140
  %184 = load i32*, i32** %d, align 8
  %incdec.ptr142 = getelementptr inbounds i32, i32* %184, i32 1
  store i32* %incdec.ptr142, i32** %d, align 8
  store i32 %sub141, i32* %184, align 4
  %185 = load i16*, i16** %orig_line, align 8
  %186 = load i32, i32* %x0, align 4
  %add143 = add nsw i32 %186, 3
  %idxprom144 = sext i32 %add143 to i64
  %arrayidx145 = getelementptr inbounds i16, i16* %185, i64 %idxprom144
  %187 = load i16, i16* %arrayidx145, align 2
  %conv146 = zext i16 %187 to i32
  %188 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %189 = load i16**, i16*** %ref_pic, align 8
  %190 = load i32, i32* %ry, align 4
  %191 = load i32, i32* %rx0, align 4
  %add147 = add nsw i32 %191, 12
  %192 = load i32, i32* %img_height, align 4
  %193 = load i32, i32* %img_width, align 4
  %call148 = call zeroext i16 %188(i16** %189, i32 %190, i32 %add147, i32 %192, i32 %193)
  %conv149 = zext i16 %call148 to i32
  %sub150 = sub nsw i32 %conv146, %conv149
  %194 = load i32*, i32** %d, align 8
  store i32 %sub150, i32* %194, align 4
  %195 = load i32, i32* %useABT.addr, align 4
  %tobool151 = icmp ne i32 %195, 0
  br i1 %tobool151, label %if.else, label %if.then

if.then:                                          ; preds = %for.body4
  %arraydecay152 = getelementptr inbounds [16 x i32], [16 x i32]* %diff, i64 0, i64 0
  %196 = load %struct.InputParameters*, %struct.InputParameters** @input, align 8
  %hadamard = getelementptr inbounds %struct.InputParameters, %struct.InputParameters* %196, i32 0, i32 6
  %197 = load i32, i32* %hadamard, align 8
  %call153 = call i32 @SATD(i32* %arraydecay152, i32 %197)
  %198 = load i32, i32* %mcost, align 4
  %add154 = add nsw i32 %198, %call153
  store i32 %add154, i32* %mcost, align 4
  %199 = load i32, i32* %min_mcost.addr, align 4
  %cmp155 = icmp sgt i32 %add154, %199
  br i1 %cmp155, label %if.then157, label %if.end

if.then157:                                       ; preds = %if.then
  store i32 1, i32* %abort_search, align 4
  br label %for.end181

if.end:                                           ; preds = %if.then
  br label %if.end178

if.else:                                          ; preds = %for.body4
  %200 = load i32, i32* %y0, align 4
  store i32 %200, i32* %yy, align 4
  store i32 0, i32* %kk, align 4
  br label %for.cond158

for.cond158:                                      ; preds = %for.inc175, %if.else
  %201 = load i32, i32* %yy, align 4
  %202 = load i32, i32* %y0, align 4
  %add159 = add nsw i32 %202, 4
  %cmp160 = icmp slt i32 %201, %add159
  br i1 %cmp160, label %for.body162, label %for.end177

for.body162:                                      ; preds = %for.cond158
  %203 = load i32, i32* %x0, align 4
  store i32 %203, i32* %xx, align 4
  br label %for.cond163

for.cond163:                                      ; preds = %for.inc, %for.body162
  %204 = load i32, i32* %xx, align 4
  %205 = load i32, i32* %x0, align 4
  %add164 = add nsw i32 %205, 4
  %cmp165 = icmp slt i32 %204, %add164
  br i1 %cmp165, label %for.body167, label %for.end

for.body167:                                      ; preds = %for.cond163
  %206 = load i32, i32* %kk, align 4
  %idxprom168 = sext i32 %206 to i64
  %arrayidx169 = getelementptr inbounds [16 x i32], [16 x i32]* %diff, i64 0, i64 %idxprom168
  %207 = load i32, i32* %arrayidx169, align 4
  %208 = load i32, i32* %yy, align 4
  %idxprom170 = sext i32 %208 to i64
  %arrayidx171 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %curr_diff, i64 0, i64 %idxprom170
  %209 = load i32, i32* %xx, align 4
  %idxprom172 = sext i32 %209 to i64
  %arrayidx173 = getelementptr inbounds [16 x i32], [16 x i32]* %arrayidx171, i64 0, i64 %idxprom172
  store i32 %207, i32* %arrayidx173, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body167
  %210 = load i32, i32* %xx, align 4
  %inc = add nsw i32 %210, 1
  store i32 %inc, i32* %xx, align 4
  %211 = load i32, i32* %kk, align 4
  %inc174 = add nsw i32 %211, 1
  store i32 %inc174, i32* %kk, align 4
  br label %for.cond163

for.end:                                          ; preds = %for.cond163
  br label %for.inc175

for.inc175:                                       ; preds = %for.end
  %212 = load i32, i32* %yy, align 4
  %inc176 = add nsw i32 %212, 1
  store i32 %inc176, i32* %yy, align 4
  br label %for.cond158

for.end177:                                       ; preds = %for.cond158
  br label %if.end178

if.end178:                                        ; preds = %for.end177, %if.end
  br label %for.inc179

for.inc179:                                       ; preds = %if.end178
  %213 = load i32, i32* %x0, align 4
  %add180 = add nsw i32 %213, 4
  store i32 %add180, i32* %x0, align 4
  br label %for.cond2

for.end181:                                       ; preds = %if.then157, %for.cond2
  br label %for.inc182

for.inc182:                                       ; preds = %for.end181
  %214 = load i32, i32* %y0, align 4
  %add183 = add nsw i32 %214, 4
  store i32 %add183, i32* %y0, align 4
  br label %for.cond

for.end184:                                       ; preds = %land.end
  %215 = load i32, i32* %mcost, align 4
  %216 = load i32, i32* %canary
  %217 = icmp eq i32 %216, 155774889
  br i1 %217, label %218, label %func_exit

218:                                              ; preds = %for.end184, %func_exit
  ret i32 %215

func_exit:                                        ; preds = %for.end184
  call void @detect_breach()
  br label %218
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @AddUpSADQuarter.36(i32 %pic_pix_x, i32 %pic_pix_y, i32 %blocksize_x, i32 %blocksize_y, i32 %cand_mv_x, i32 %cand_mv_y, %struct.storable_picture* %ref_picture, i16** %orig_pic, i32 %Mvmcost, i32 %min_mcost, i32 %useABT) #0 {
entry:
  %canary = alloca i32
  store i32 1318315355, i32* %canary
  %mcost = alloca i32, align 4
  %ry = alloca i32, align 4
  %rx0 = alloca i32, align 4
  %min_mcost.addr = alloca i32, align 4
  %pic_pix_x.addr = alloca i32, align 4
  %img_height = alloca i32, align 4
  %kk = alloca i32, align 4
  %blocksize_x.addr = alloca i32, align 4
  %x0 = alloca i32, align 4
  %blocksize_y.addr = alloca i32, align 4
  %d = alloca i32*, align 8
  %Mvmcost.addr = alloca i32, align 4
  %abort_search = alloca i32, align 4
  %orig_pic.addr = alloca i16**, align 8
  %cand_mv_x.addr = alloca i32, align 4
  %diff = alloca [16 x i32], align 16
  %cand_mv_y.addr = alloca i32, align 4
  %orig_line = alloca i16*, align 8
  %pic_pix_y.addr = alloca i32, align 4
  %curr_diff = alloca [16 x [16 x i32]], align 16
  %yy = alloca i32, align 4
  %xx = alloca i32, align 4
  %ry0 = alloca i32, align 4
  %ref_picture.addr = alloca %struct.storable_picture*, align 8
  %useABT.addr = alloca i32, align 4
  %img_width = alloca i32, align 4
  %y0 = alloca i32, align 4
  %ref_pic = alloca i16**, align 8
  store i32 %pic_pix_x, i32* %pic_pix_x.addr, align 4
  store i32 %pic_pix_y, i32* %pic_pix_y.addr, align 4
  store i32 %blocksize_x, i32* %blocksize_x.addr, align 4
  store i32 %blocksize_y, i32* %blocksize_y.addr, align 4
  store i32 %cand_mv_x, i32* %cand_mv_x.addr, align 4
  store i32 %cand_mv_y, i32* %cand_mv_y.addr, align 4
  store %struct.storable_picture* %ref_picture, %struct.storable_picture** %ref_picture.addr, align 8
  store i16** %orig_pic, i16*** %orig_pic.addr, align 8
  store i32 %Mvmcost, i32* %Mvmcost.addr, align 4
  store i32 %min_mcost, i32* %min_mcost.addr, align 4
  store i32 %useABT, i32* %useABT.addr, align 4
  %0 = load i32, i32* %Mvmcost.addr, align 4
  store i32 %0, i32* %mcost, align 4
  %1 = load %struct.storable_picture*, %struct.storable_picture** %ref_picture.addr, align 8
  %imgY_ups = getelementptr inbounds %struct.storable_picture, %struct.storable_picture* %1, i32 0, i32 28
  %2 = load i16**, i16*** %imgY_ups, align 8
  store i16** %2, i16*** %ref_pic, align 8
  %3 = load %struct.storable_picture*, %struct.storable_picture** %ref_picture.addr, align 8
  %size_x = getelementptr inbounds %struct.storable_picture, %struct.storable_picture* %3, i32 0, i32 18
  %4 = load i32, i32* %size_x, align 8
  store i32 %4, i32* %img_width, align 4
  %5 = load %struct.storable_picture*, %struct.storable_picture** %ref_picture.addr, align 8
  %size_y = getelementptr inbounds %struct.storable_picture, %struct.storable_picture* %5, i32 0, i32 19
  %6 = load i32, i32* %size_y, align 4
  store i32 %6, i32* %img_height, align 4
  store i32 0, i32* %y0, align 4
  store i32 0, i32* %abort_search, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc182, %entry
  %7 = load i32, i32* %y0, align 4
  %8 = load i32, i32* %blocksize_y.addr, align 4
  %cmp = icmp slt i32 %7, %8
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %9 = load i32, i32* %abort_search, align 4
  %tobool = icmp ne i32 %9, 0
  %lnot = xor i1 %tobool, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %10 = phi i1 [ false, %for.cond ], [ %lnot, %land.rhs ]
  br i1 %10, label %for.body, label %for.end184

for.body:                                         ; preds = %land.end
  %11 = load i32, i32* %pic_pix_y.addr, align 4
  %12 = load i32, i32* %y0, align 4
  %add = add nsw i32 %11, %12
  %shl = shl i32 %add, 2
  %13 = load i32, i32* %cand_mv_y.addr, align 4
  %add1 = add nsw i32 %shl, %13
  store i32 %add1, i32* %ry0, align 4
  store i32 0, i32* %x0, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc179, %for.body
  %14 = load i32, i32* %x0, align 4
  %15 = load i32, i32* %blocksize_x.addr, align 4
  %cmp3 = icmp slt i32 %14, %15
  br i1 %cmp3, label %for.body4, label %for.end181

for.body4:                                        ; preds = %for.cond2
  %16 = load i32, i32* %pic_pix_x.addr, align 4
  %17 = load i32, i32* %x0, align 4
  %add5 = add nsw i32 %16, %17
  %shl6 = shl i32 %add5, 2
  %18 = load i32, i32* %cand_mv_x.addr, align 4
  %add7 = add nsw i32 %shl6, %18
  store i32 %add7, i32* %rx0, align 4
  %arraydecay = getelementptr inbounds [16 x i32], [16 x i32]* %diff, i64 0, i64 0
  store i32* %arraydecay, i32** %d, align 8
  %19 = load i16**, i16*** %orig_pic.addr, align 8
  %20 = load i32, i32* %y0, align 4
  %idxprom = sext i32 %20 to i64
  %arrayidx = getelementptr inbounds i16*, i16** %19, i64 %idxprom
  %21 = load i16*, i16** %arrayidx, align 8
  store i16* %21, i16** %orig_line, align 8
  %22 = load i32, i32* %ry0, align 4
  store i32 %22, i32* %ry, align 4
  %23 = load i16*, i16** %orig_line, align 8
  %24 = load i32, i32* %x0, align 4
  %idxprom8 = sext i32 %24 to i64
  %arrayidx9 = getelementptr inbounds i16, i16* %23, i64 %idxprom8
  %25 = load i16, i16* %arrayidx9, align 2
  %conv = zext i16 %25 to i32
  %26 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %27 = load i16**, i16*** %ref_pic, align 8
  %28 = load i32, i32* %ry, align 4
  %29 = load i32, i32* %rx0, align 4
  %30 = load i32, i32* %img_height, align 4
  %31 = load i32, i32* %img_width, align 4
  %call = call zeroext i16 %26(i16** %27, i32 %28, i32 %29, i32 %30, i32 %31)
  %conv10 = zext i16 %call to i32
  %sub = sub nsw i32 %conv, %conv10
  %32 = load i32*, i32** %d, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %32, i32 1
  store i32* %incdec.ptr, i32** %d, align 8
  store i32 %sub, i32* %32, align 4
  %33 = load i16*, i16** %orig_line, align 8
  %34 = load i32, i32* %x0, align 4
  %add11 = add nsw i32 %34, 1
  %idxprom12 = sext i32 %add11 to i64
  %arrayidx13 = getelementptr inbounds i16, i16* %33, i64 %idxprom12
  %35 = load i16, i16* %arrayidx13, align 2
  %conv14 = zext i16 %35 to i32
  %36 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %37 = load i16**, i16*** %ref_pic, align 8
  %38 = load i32, i32* %ry, align 4
  %39 = load i32, i32* %rx0, align 4
  %add15 = add nsw i32 %39, 4
  %40 = load i32, i32* %img_height, align 4
  %41 = load i32, i32* %img_width, align 4
  %call16 = call zeroext i16 %36(i16** %37, i32 %38, i32 %add15, i32 %40, i32 %41)
  %conv17 = zext i16 %call16 to i32
  %sub18 = sub nsw i32 %conv14, %conv17
  %42 = load i32*, i32** %d, align 8
  %incdec.ptr19 = getelementptr inbounds i32, i32* %42, i32 1
  store i32* %incdec.ptr19, i32** %d, align 8
  store i32 %sub18, i32* %42, align 4
  %43 = load i16*, i16** %orig_line, align 8
  %44 = load i32, i32* %x0, align 4
  %add20 = add nsw i32 %44, 2
  %idxprom21 = sext i32 %add20 to i64
  %arrayidx22 = getelementptr inbounds i16, i16* %43, i64 %idxprom21
  %45 = load i16, i16* %arrayidx22, align 2
  %conv23 = zext i16 %45 to i32
  %46 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %47 = load i16**, i16*** %ref_pic, align 8
  %48 = load i32, i32* %ry, align 4
  %49 = load i32, i32* %rx0, align 4
  %add24 = add nsw i32 %49, 8
  %50 = load i32, i32* %img_height, align 4
  %51 = load i32, i32* %img_width, align 4
  %call25 = call zeroext i16 %46(i16** %47, i32 %48, i32 %add24, i32 %50, i32 %51)
  %conv26 = zext i16 %call25 to i32
  %sub27 = sub nsw i32 %conv23, %conv26
  %52 = load i32*, i32** %d, align 8
  %incdec.ptr28 = getelementptr inbounds i32, i32* %52, i32 1
  store i32* %incdec.ptr28, i32** %d, align 8
  store i32 %sub27, i32* %52, align 4
  %53 = load i16*, i16** %orig_line, align 8
  %54 = load i32, i32* %x0, align 4
  %add29 = add nsw i32 %54, 3
  %idxprom30 = sext i32 %add29 to i64
  %arrayidx31 = getelementptr inbounds i16, i16* %53, i64 %idxprom30
  %55 = load i16, i16* %arrayidx31, align 2
  %conv32 = zext i16 %55 to i32
  %56 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %57 = load i16**, i16*** %ref_pic, align 8
  %58 = load i32, i32* %ry, align 4
  %59 = load i32, i32* %rx0, align 4
  %add33 = add nsw i32 %59, 12
  %60 = load i32, i32* %img_height, align 4
  %61 = load i32, i32* %img_width, align 4
  %call34 = call zeroext i16 %56(i16** %57, i32 %58, i32 %add33, i32 %60, i32 %61)
  %conv35 = zext i16 %call34 to i32
  %sub36 = sub nsw i32 %conv32, %conv35
  %62 = load i32*, i32** %d, align 8
  %incdec.ptr37 = getelementptr inbounds i32, i32* %62, i32 1
  store i32* %incdec.ptr37, i32** %d, align 8
  store i32 %sub36, i32* %62, align 4
  %63 = load i16**, i16*** %orig_pic.addr, align 8
  %64 = load i32, i32* %y0, align 4
  %add38 = add nsw i32 %64, 1
  %idxprom39 = sext i32 %add38 to i64
  %arrayidx40 = getelementptr inbounds i16*, i16** %63, i64 %idxprom39
  %65 = load i16*, i16** %arrayidx40, align 8
  store i16* %65, i16** %orig_line, align 8
  %66 = load i32, i32* %ry0, align 4
  %add41 = add nsw i32 %66, 4
  store i32 %add41, i32* %ry, align 4
  %67 = load i16*, i16** %orig_line, align 8
  %68 = load i32, i32* %x0, align 4
  %idxprom42 = sext i32 %68 to i64
  %arrayidx43 = getelementptr inbounds i16, i16* %67, i64 %idxprom42
  %69 = load i16, i16* %arrayidx43, align 2
  %conv44 = zext i16 %69 to i32
  %70 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %71 = load i16**, i16*** %ref_pic, align 8
  %72 = load i32, i32* %ry, align 4
  %73 = load i32, i32* %rx0, align 4
  %74 = load i32, i32* %img_height, align 4
  %75 = load i32, i32* %img_width, align 4
  %call45 = call zeroext i16 %70(i16** %71, i32 %72, i32 %73, i32 %74, i32 %75)
  %conv46 = zext i16 %call45 to i32
  %sub47 = sub nsw i32 %conv44, %conv46
  %76 = load i32*, i32** %d, align 8
  %incdec.ptr48 = getelementptr inbounds i32, i32* %76, i32 1
  store i32* %incdec.ptr48, i32** %d, align 8
  store i32 %sub47, i32* %76, align 4
  %77 = load i16*, i16** %orig_line, align 8
  %78 = load i32, i32* %x0, align 4
  %add49 = add nsw i32 %78, 1
  %idxprom50 = sext i32 %add49 to i64
  %arrayidx51 = getelementptr inbounds i16, i16* %77, i64 %idxprom50
  %79 = load i16, i16* %arrayidx51, align 2
  %conv52 = zext i16 %79 to i32
  %80 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %81 = load i16**, i16*** %ref_pic, align 8
  %82 = load i32, i32* %ry, align 4
  %83 = load i32, i32* %rx0, align 4
  %add53 = add nsw i32 %83, 4
  %84 = load i32, i32* %img_height, align 4
  %85 = load i32, i32* %img_width, align 4
  %call54 = call zeroext i16 %80(i16** %81, i32 %82, i32 %add53, i32 %84, i32 %85)
  %conv55 = zext i16 %call54 to i32
  %sub56 = sub nsw i32 %conv52, %conv55
  %86 = load i32*, i32** %d, align 8
  %incdec.ptr57 = getelementptr inbounds i32, i32* %86, i32 1
  store i32* %incdec.ptr57, i32** %d, align 8
  store i32 %sub56, i32* %86, align 4
  %87 = load i16*, i16** %orig_line, align 8
  %88 = load i32, i32* %x0, align 4
  %add58 = add nsw i32 %88, 2
  %idxprom59 = sext i32 %add58 to i64
  %arrayidx60 = getelementptr inbounds i16, i16* %87, i64 %idxprom59
  %89 = load i16, i16* %arrayidx60, align 2
  %conv61 = zext i16 %89 to i32
  %90 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %91 = load i16**, i16*** %ref_pic, align 8
  %92 = load i32, i32* %ry, align 4
  %93 = load i32, i32* %rx0, align 4
  %add62 = add nsw i32 %93, 8
  %94 = load i32, i32* %img_height, align 4
  %95 = load i32, i32* %img_width, align 4
  %call63 = call zeroext i16 %90(i16** %91, i32 %92, i32 %add62, i32 %94, i32 %95)
  %conv64 = zext i16 %call63 to i32
  %sub65 = sub nsw i32 %conv61, %conv64
  %96 = load i32*, i32** %d, align 8
  %incdec.ptr66 = getelementptr inbounds i32, i32* %96, i32 1
  store i32* %incdec.ptr66, i32** %d, align 8
  store i32 %sub65, i32* %96, align 4
  %97 = load i16*, i16** %orig_line, align 8
  %98 = load i32, i32* %x0, align 4
  %add67 = add nsw i32 %98, 3
  %idxprom68 = sext i32 %add67 to i64
  %arrayidx69 = getelementptr inbounds i16, i16* %97, i64 %idxprom68
  %99 = load i16, i16* %arrayidx69, align 2
  %conv70 = zext i16 %99 to i32
  %100 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %101 = load i16**, i16*** %ref_pic, align 8
  %102 = load i32, i32* %ry, align 4
  %103 = load i32, i32* %rx0, align 4
  %add71 = add nsw i32 %103, 12
  %104 = load i32, i32* %img_height, align 4
  %105 = load i32, i32* %img_width, align 4
  %call72 = call zeroext i16 %100(i16** %101, i32 %102, i32 %add71, i32 %104, i32 %105)
  %conv73 = zext i16 %call72 to i32
  %sub74 = sub nsw i32 %conv70, %conv73
  %106 = load i32*, i32** %d, align 8
  %incdec.ptr75 = getelementptr inbounds i32, i32* %106, i32 1
  store i32* %incdec.ptr75, i32** %d, align 8
  store i32 %sub74, i32* %106, align 4
  %107 = load i16**, i16*** %orig_pic.addr, align 8
  %108 = load i32, i32* %y0, align 4
  %add76 = add nsw i32 %108, 2
  %idxprom77 = sext i32 %add76 to i64
  %arrayidx78 = getelementptr inbounds i16*, i16** %107, i64 %idxprom77
  %109 = load i16*, i16** %arrayidx78, align 8
  store i16* %109, i16** %orig_line, align 8
  %110 = load i32, i32* %ry0, align 4
  %add79 = add nsw i32 %110, 8
  store i32 %add79, i32* %ry, align 4
  %111 = load i16*, i16** %orig_line, align 8
  %112 = load i32, i32* %x0, align 4
  %idxprom80 = sext i32 %112 to i64
  %arrayidx81 = getelementptr inbounds i16, i16* %111, i64 %idxprom80
  %113 = load i16, i16* %arrayidx81, align 2
  %conv82 = zext i16 %113 to i32
  %114 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %115 = load i16**, i16*** %ref_pic, align 8
  %116 = load i32, i32* %ry, align 4
  %117 = load i32, i32* %rx0, align 4
  %118 = load i32, i32* %img_height, align 4
  %119 = load i32, i32* %img_width, align 4
  %call83 = call zeroext i16 %114(i16** %115, i32 %116, i32 %117, i32 %118, i32 %119)
  %conv84 = zext i16 %call83 to i32
  %sub85 = sub nsw i32 %conv82, %conv84
  %120 = load i32*, i32** %d, align 8
  %incdec.ptr86 = getelementptr inbounds i32, i32* %120, i32 1
  store i32* %incdec.ptr86, i32** %d, align 8
  store i32 %sub85, i32* %120, align 4
  %121 = load i16*, i16** %orig_line, align 8
  %122 = load i32, i32* %x0, align 4
  %add87 = add nsw i32 %122, 1
  %idxprom88 = sext i32 %add87 to i64
  %arrayidx89 = getelementptr inbounds i16, i16* %121, i64 %idxprom88
  %123 = load i16, i16* %arrayidx89, align 2
  %conv90 = zext i16 %123 to i32
  %124 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %125 = load i16**, i16*** %ref_pic, align 8
  %126 = load i32, i32* %ry, align 4
  %127 = load i32, i32* %rx0, align 4
  %add91 = add nsw i32 %127, 4
  %128 = load i32, i32* %img_height, align 4
  %129 = load i32, i32* %img_width, align 4
  %call92 = call zeroext i16 %124(i16** %125, i32 %126, i32 %add91, i32 %128, i32 %129)
  %conv93 = zext i16 %call92 to i32
  %sub94 = sub nsw i32 %conv90, %conv93
  %130 = load i32*, i32** %d, align 8
  %incdec.ptr95 = getelementptr inbounds i32, i32* %130, i32 1
  store i32* %incdec.ptr95, i32** %d, align 8
  store i32 %sub94, i32* %130, align 4
  %131 = load i16*, i16** %orig_line, align 8
  %132 = load i32, i32* %x0, align 4
  %add96 = add nsw i32 %132, 2
  %idxprom97 = sext i32 %add96 to i64
  %arrayidx98 = getelementptr inbounds i16, i16* %131, i64 %idxprom97
  %133 = load i16, i16* %arrayidx98, align 2
  %conv99 = zext i16 %133 to i32
  %134 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %135 = load i16**, i16*** %ref_pic, align 8
  %136 = load i32, i32* %ry, align 4
  %137 = load i32, i32* %rx0, align 4
  %add100 = add nsw i32 %137, 8
  %138 = load i32, i32* %img_height, align 4
  %139 = load i32, i32* %img_width, align 4
  %call101 = call zeroext i16 %134(i16** %135, i32 %136, i32 %add100, i32 %138, i32 %139)
  %conv102 = zext i16 %call101 to i32
  %sub103 = sub nsw i32 %conv99, %conv102
  %140 = load i32*, i32** %d, align 8
  %incdec.ptr104 = getelementptr inbounds i32, i32* %140, i32 1
  store i32* %incdec.ptr104, i32** %d, align 8
  store i32 %sub103, i32* %140, align 4
  %141 = load i16*, i16** %orig_line, align 8
  %142 = load i32, i32* %x0, align 4
  %add105 = add nsw i32 %142, 3
  %idxprom106 = sext i32 %add105 to i64
  %arrayidx107 = getelementptr inbounds i16, i16* %141, i64 %idxprom106
  %143 = load i16, i16* %arrayidx107, align 2
  %conv108 = zext i16 %143 to i32
  %144 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %145 = load i16**, i16*** %ref_pic, align 8
  %146 = load i32, i32* %ry, align 4
  %147 = load i32, i32* %rx0, align 4
  %add109 = add nsw i32 %147, 12
  %148 = load i32, i32* %img_height, align 4
  %149 = load i32, i32* %img_width, align 4
  %call110 = call zeroext i16 %144(i16** %145, i32 %146, i32 %add109, i32 %148, i32 %149)
  %conv111 = zext i16 %call110 to i32
  %sub112 = sub nsw i32 %conv108, %conv111
  %150 = load i32*, i32** %d, align 8
  %incdec.ptr113 = getelementptr inbounds i32, i32* %150, i32 1
  store i32* %incdec.ptr113, i32** %d, align 8
  store i32 %sub112, i32* %150, align 4
  %151 = load i16**, i16*** %orig_pic.addr, align 8
  %152 = load i32, i32* %y0, align 4
  %add114 = add nsw i32 %152, 3
  %idxprom115 = sext i32 %add114 to i64
  %arrayidx116 = getelementptr inbounds i16*, i16** %151, i64 %idxprom115
  %153 = load i16*, i16** %arrayidx116, align 8
  store i16* %153, i16** %orig_line, align 8
  %154 = load i32, i32* %ry0, align 4
  %add117 = add nsw i32 %154, 12
  store i32 %add117, i32* %ry, align 4
  %155 = load i16*, i16** %orig_line, align 8
  %156 = load i32, i32* %x0, align 4
  %idxprom118 = sext i32 %156 to i64
  %arrayidx119 = getelementptr inbounds i16, i16* %155, i64 %idxprom118
  %157 = load i16, i16* %arrayidx119, align 2
  %conv120 = zext i16 %157 to i32
  %158 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %159 = load i16**, i16*** %ref_pic, align 8
  %160 = load i32, i32* %ry, align 4
  %161 = load i32, i32* %rx0, align 4
  %162 = load i32, i32* %img_height, align 4
  %163 = load i32, i32* %img_width, align 4
  %call121 = call zeroext i16 %158(i16** %159, i32 %160, i32 %161, i32 %162, i32 %163)
  %conv122 = zext i16 %call121 to i32
  %sub123 = sub nsw i32 %conv120, %conv122
  %164 = load i32*, i32** %d, align 8
  %incdec.ptr124 = getelementptr inbounds i32, i32* %164, i32 1
  store i32* %incdec.ptr124, i32** %d, align 8
  store i32 %sub123, i32* %164, align 4
  %165 = load i16*, i16** %orig_line, align 8
  %166 = load i32, i32* %x0, align 4
  %add125 = add nsw i32 %166, 1
  %idxprom126 = sext i32 %add125 to i64
  %arrayidx127 = getelementptr inbounds i16, i16* %165, i64 %idxprom126
  %167 = load i16, i16* %arrayidx127, align 2
  %conv128 = zext i16 %167 to i32
  %168 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %169 = load i16**, i16*** %ref_pic, align 8
  %170 = load i32, i32* %ry, align 4
  %171 = load i32, i32* %rx0, align 4
  %add129 = add nsw i32 %171, 4
  %172 = load i32, i32* %img_height, align 4
  %173 = load i32, i32* %img_width, align 4
  %call130 = call zeroext i16 %168(i16** %169, i32 %170, i32 %add129, i32 %172, i32 %173)
  %conv131 = zext i16 %call130 to i32
  %sub132 = sub nsw i32 %conv128, %conv131
  %174 = load i32*, i32** %d, align 8
  %incdec.ptr133 = getelementptr inbounds i32, i32* %174, i32 1
  store i32* %incdec.ptr133, i32** %d, align 8
  store i32 %sub132, i32* %174, align 4
  %175 = load i16*, i16** %orig_line, align 8
  %176 = load i32, i32* %x0, align 4
  %add134 = add nsw i32 %176, 2
  %idxprom135 = sext i32 %add134 to i64
  %arrayidx136 = getelementptr inbounds i16, i16* %175, i64 %idxprom135
  %177 = load i16, i16* %arrayidx136, align 2
  %conv137 = zext i16 %177 to i32
  %178 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %179 = load i16**, i16*** %ref_pic, align 8
  %180 = load i32, i32* %ry, align 4
  %181 = load i32, i32* %rx0, align 4
  %add138 = add nsw i32 %181, 8
  %182 = load i32, i32* %img_height, align 4
  %183 = load i32, i32* %img_width, align 4
  %call139 = call zeroext i16 %178(i16** %179, i32 %180, i32 %add138, i32 %182, i32 %183)
  %conv140 = zext i16 %call139 to i32
  %sub141 = sub nsw i32 %conv137, %conv140
  %184 = load i32*, i32** %d, align 8
  %incdec.ptr142 = getelementptr inbounds i32, i32* %184, i32 1
  store i32* %incdec.ptr142, i32** %d, align 8
  store i32 %sub141, i32* %184, align 4
  %185 = load i16*, i16** %orig_line, align 8
  %186 = load i32, i32* %x0, align 4
  %add143 = add nsw i32 %186, 3
  %idxprom144 = sext i32 %add143 to i64
  %arrayidx145 = getelementptr inbounds i16, i16* %185, i64 %idxprom144
  %187 = load i16, i16* %arrayidx145, align 2
  %conv146 = zext i16 %187 to i32
  %188 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %189 = load i16**, i16*** %ref_pic, align 8
  %190 = load i32, i32* %ry, align 4
  %191 = load i32, i32* %rx0, align 4
  %add147 = add nsw i32 %191, 12
  %192 = load i32, i32* %img_height, align 4
  %193 = load i32, i32* %img_width, align 4
  %call148 = call zeroext i16 %188(i16** %189, i32 %190, i32 %add147, i32 %192, i32 %193)
  %conv149 = zext i16 %call148 to i32
  %sub150 = sub nsw i32 %conv146, %conv149
  %194 = load i32*, i32** %d, align 8
  store i32 %sub150, i32* %194, align 4
  %195 = load i32, i32* %useABT.addr, align 4
  %tobool151 = icmp ne i32 %195, 0
  br i1 %tobool151, label %if.else, label %if.then

if.then:                                          ; preds = %for.body4
  %arraydecay152 = getelementptr inbounds [16 x i32], [16 x i32]* %diff, i64 0, i64 0
  %196 = load %struct.InputParameters*, %struct.InputParameters** @input, align 8
  %hadamard = getelementptr inbounds %struct.InputParameters, %struct.InputParameters* %196, i32 0, i32 6
  %197 = load i32, i32* %hadamard, align 8
  %call153 = call i32 @SATD(i32* %arraydecay152, i32 %197)
  %198 = load i32, i32* %mcost, align 4
  %add154 = add nsw i32 %198, %call153
  store i32 %add154, i32* %mcost, align 4
  %199 = load i32, i32* %min_mcost.addr, align 4
  %cmp155 = icmp sgt i32 %add154, %199
  br i1 %cmp155, label %if.then157, label %if.end

if.then157:                                       ; preds = %if.then
  store i32 1, i32* %abort_search, align 4
  br label %for.end181

if.end:                                           ; preds = %if.then
  br label %if.end178

if.else:                                          ; preds = %for.body4
  %200 = load i32, i32* %y0, align 4
  store i32 %200, i32* %yy, align 4
  store i32 0, i32* %kk, align 4
  br label %for.cond158

for.cond158:                                      ; preds = %for.inc175, %if.else
  %201 = load i32, i32* %yy, align 4
  %202 = load i32, i32* %y0, align 4
  %add159 = add nsw i32 %202, 4
  %cmp160 = icmp slt i32 %201, %add159
  br i1 %cmp160, label %for.body162, label %for.end177

for.body162:                                      ; preds = %for.cond158
  %203 = load i32, i32* %x0, align 4
  store i32 %203, i32* %xx, align 4
  br label %for.cond163

for.cond163:                                      ; preds = %for.inc, %for.body162
  %204 = load i32, i32* %xx, align 4
  %205 = load i32, i32* %x0, align 4
  %add164 = add nsw i32 %205, 4
  %cmp165 = icmp slt i32 %204, %add164
  br i1 %cmp165, label %for.body167, label %for.end

for.body167:                                      ; preds = %for.cond163
  %206 = load i32, i32* %kk, align 4
  %idxprom168 = sext i32 %206 to i64
  %arrayidx169 = getelementptr inbounds [16 x i32], [16 x i32]* %diff, i64 0, i64 %idxprom168
  %207 = load i32, i32* %arrayidx169, align 4
  %208 = load i32, i32* %yy, align 4
  %idxprom170 = sext i32 %208 to i64
  %arrayidx171 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %curr_diff, i64 0, i64 %idxprom170
  %209 = load i32, i32* %xx, align 4
  %idxprom172 = sext i32 %209 to i64
  %arrayidx173 = getelementptr inbounds [16 x i32], [16 x i32]* %arrayidx171, i64 0, i64 %idxprom172
  store i32 %207, i32* %arrayidx173, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body167
  %210 = load i32, i32* %xx, align 4
  %inc = add nsw i32 %210, 1
  store i32 %inc, i32* %xx, align 4
  %211 = load i32, i32* %kk, align 4
  %inc174 = add nsw i32 %211, 1
  store i32 %inc174, i32* %kk, align 4
  br label %for.cond163

for.end:                                          ; preds = %for.cond163
  br label %for.inc175

for.inc175:                                       ; preds = %for.end
  %212 = load i32, i32* %yy, align 4
  %inc176 = add nsw i32 %212, 1
  store i32 %inc176, i32* %yy, align 4
  br label %for.cond158

for.end177:                                       ; preds = %for.cond158
  br label %if.end178

if.end178:                                        ; preds = %for.end177, %if.end
  br label %for.inc179

for.inc179:                                       ; preds = %if.end178
  %213 = load i32, i32* %x0, align 4
  %add180 = add nsw i32 %213, 4
  store i32 %add180, i32* %x0, align 4
  br label %for.cond2

for.end181:                                       ; preds = %if.then157, %for.cond2
  br label %for.inc182

for.inc182:                                       ; preds = %for.end181
  %214 = load i32, i32* %y0, align 4
  %add183 = add nsw i32 %214, 4
  store i32 %add183, i32* %y0, align 4
  br label %for.cond

for.end184:                                       ; preds = %land.end
  %215 = load i32, i32* %mcost, align 4
  %216 = load i32, i32* %canary
  %217 = icmp eq i32 %216, 1318315355
  br i1 %217, label %218, label %func_exit

218:                                              ; preds = %for.end184, %func_exit
  ret i32 %215

func_exit:                                        ; preds = %for.end184
  call void @detect_breach()
  br label %218
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @AddUpSADQuarter.37(i32 %pic_pix_x, i32 %pic_pix_y, i32 %blocksize_x, i32 %blocksize_y, i32 %cand_mv_x, i32 %cand_mv_y, %struct.storable_picture* %ref_picture, i16** %orig_pic, i32 %Mvmcost, i32 %min_mcost, i32 %useABT) #0 {
entry:
  %y0 = alloca i32, align 4
  %orig_line = alloca i16*, align 8
  %diff = alloca [16 x i32], align 16
  %orig_pic.addr = alloca i16**, align 8
  %img_width = alloca i32, align 4
  %canary = alloca i32
  store i32 4885258, i32* %canary
  %cand_mv_y.addr = alloca i32, align 4
  %abort_search = alloca i32, align 4
  %d = alloca i32*, align 8
  %yy = alloca i32, align 4
  %rx0 = alloca i32, align 4
  %pic_pix_y.addr = alloca i32, align 4
  %ref_picture.addr = alloca %struct.storable_picture*, align 8
  %cand_mv_x.addr = alloca i32, align 4
  %ry = alloca i32, align 4
  %mcost = alloca i32, align 4
  %Mvmcost.addr = alloca i32, align 4
  %pic_pix_x.addr = alloca i32, align 4
  %curr_diff = alloca [16 x [16 x i32]], align 16
  %ry0 = alloca i32, align 4
  %blocksize_x.addr = alloca i32, align 4
  %kk = alloca i32, align 4
  %x0 = alloca i32, align 4
  %min_mcost.addr = alloca i32, align 4
  %img_height = alloca i32, align 4
  %ref_pic = alloca i16**, align 8
  %useABT.addr = alloca i32, align 4
  %xx = alloca i32, align 4
  %blocksize_y.addr = alloca i32, align 4
  store i32 %pic_pix_x, i32* %pic_pix_x.addr, align 4
  store i32 %pic_pix_y, i32* %pic_pix_y.addr, align 4
  store i32 %blocksize_x, i32* %blocksize_x.addr, align 4
  store i32 %blocksize_y, i32* %blocksize_y.addr, align 4
  store i32 %cand_mv_x, i32* %cand_mv_x.addr, align 4
  store i32 %cand_mv_y, i32* %cand_mv_y.addr, align 4
  store %struct.storable_picture* %ref_picture, %struct.storable_picture** %ref_picture.addr, align 8
  store i16** %orig_pic, i16*** %orig_pic.addr, align 8
  store i32 %Mvmcost, i32* %Mvmcost.addr, align 4
  store i32 %min_mcost, i32* %min_mcost.addr, align 4
  store i32 %useABT, i32* %useABT.addr, align 4
  %0 = load i32, i32* %Mvmcost.addr, align 4
  store i32 %0, i32* %mcost, align 4
  %1 = load %struct.storable_picture*, %struct.storable_picture** %ref_picture.addr, align 8
  %imgY_ups = getelementptr inbounds %struct.storable_picture, %struct.storable_picture* %1, i32 0, i32 28
  %2 = load i16**, i16*** %imgY_ups, align 8
  store i16** %2, i16*** %ref_pic, align 8
  %3 = load %struct.storable_picture*, %struct.storable_picture** %ref_picture.addr, align 8
  %size_x = getelementptr inbounds %struct.storable_picture, %struct.storable_picture* %3, i32 0, i32 18
  %4 = load i32, i32* %size_x, align 8
  store i32 %4, i32* %img_width, align 4
  %5 = load %struct.storable_picture*, %struct.storable_picture** %ref_picture.addr, align 8
  %size_y = getelementptr inbounds %struct.storable_picture, %struct.storable_picture* %5, i32 0, i32 19
  %6 = load i32, i32* %size_y, align 4
  store i32 %6, i32* %img_height, align 4
  store i32 0, i32* %y0, align 4
  store i32 0, i32* %abort_search, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc182, %entry
  %7 = load i32, i32* %y0, align 4
  %8 = load i32, i32* %blocksize_y.addr, align 4
  %cmp = icmp slt i32 %7, %8
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %9 = load i32, i32* %abort_search, align 4
  %tobool = icmp ne i32 %9, 0
  %lnot = xor i1 %tobool, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %10 = phi i1 [ false, %for.cond ], [ %lnot, %land.rhs ]
  br i1 %10, label %for.body, label %for.end184

for.body:                                         ; preds = %land.end
  %11 = load i32, i32* %pic_pix_y.addr, align 4
  %12 = load i32, i32* %y0, align 4
  %add = add nsw i32 %11, %12
  %shl = shl i32 %add, 2
  %13 = load i32, i32* %cand_mv_y.addr, align 4
  %add1 = add nsw i32 %shl, %13
  store i32 %add1, i32* %ry0, align 4
  store i32 0, i32* %x0, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc179, %for.body
  %14 = load i32, i32* %x0, align 4
  %15 = load i32, i32* %blocksize_x.addr, align 4
  %cmp3 = icmp slt i32 %14, %15
  br i1 %cmp3, label %for.body4, label %for.end181

for.body4:                                        ; preds = %for.cond2
  %16 = load i32, i32* %pic_pix_x.addr, align 4
  %17 = load i32, i32* %x0, align 4
  %add5 = add nsw i32 %16, %17
  %shl6 = shl i32 %add5, 2
  %18 = load i32, i32* %cand_mv_x.addr, align 4
  %add7 = add nsw i32 %shl6, %18
  store i32 %add7, i32* %rx0, align 4
  %arraydecay = getelementptr inbounds [16 x i32], [16 x i32]* %diff, i64 0, i64 0
  store i32* %arraydecay, i32** %d, align 8
  %19 = load i16**, i16*** %orig_pic.addr, align 8
  %20 = load i32, i32* %y0, align 4
  %idxprom = sext i32 %20 to i64
  %arrayidx = getelementptr inbounds i16*, i16** %19, i64 %idxprom
  %21 = load i16*, i16** %arrayidx, align 8
  store i16* %21, i16** %orig_line, align 8
  %22 = load i32, i32* %ry0, align 4
  store i32 %22, i32* %ry, align 4
  %23 = load i16*, i16** %orig_line, align 8
  %24 = load i32, i32* %x0, align 4
  %idxprom8 = sext i32 %24 to i64
  %arrayidx9 = getelementptr inbounds i16, i16* %23, i64 %idxprom8
  %25 = load i16, i16* %arrayidx9, align 2
  %conv = zext i16 %25 to i32
  %26 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %27 = load i16**, i16*** %ref_pic, align 8
  %28 = load i32, i32* %ry, align 4
  %29 = load i32, i32* %rx0, align 4
  %30 = load i32, i32* %img_height, align 4
  %31 = load i32, i32* %img_width, align 4
  %call = call zeroext i16 %26(i16** %27, i32 %28, i32 %29, i32 %30, i32 %31)
  %conv10 = zext i16 %call to i32
  %sub = sub nsw i32 %conv, %conv10
  %32 = load i32*, i32** %d, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %32, i32 1
  store i32* %incdec.ptr, i32** %d, align 8
  store i32 %sub, i32* %32, align 4
  %33 = load i16*, i16** %orig_line, align 8
  %34 = load i32, i32* %x0, align 4
  %add11 = add nsw i32 %34, 1
  %idxprom12 = sext i32 %add11 to i64
  %arrayidx13 = getelementptr inbounds i16, i16* %33, i64 %idxprom12
  %35 = load i16, i16* %arrayidx13, align 2
  %conv14 = zext i16 %35 to i32
  %36 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %37 = load i16**, i16*** %ref_pic, align 8
  %38 = load i32, i32* %ry, align 4
  %39 = load i32, i32* %rx0, align 4
  %add15 = add nsw i32 %39, 4
  %40 = load i32, i32* %img_height, align 4
  %41 = load i32, i32* %img_width, align 4
  %call16 = call zeroext i16 %36(i16** %37, i32 %38, i32 %add15, i32 %40, i32 %41)
  %conv17 = zext i16 %call16 to i32
  %sub18 = sub nsw i32 %conv14, %conv17
  %42 = load i32*, i32** %d, align 8
  %incdec.ptr19 = getelementptr inbounds i32, i32* %42, i32 1
  store i32* %incdec.ptr19, i32** %d, align 8
  store i32 %sub18, i32* %42, align 4
  %43 = load i16*, i16** %orig_line, align 8
  %44 = load i32, i32* %x0, align 4
  %add20 = add nsw i32 %44, 2
  %idxprom21 = sext i32 %add20 to i64
  %arrayidx22 = getelementptr inbounds i16, i16* %43, i64 %idxprom21
  %45 = load i16, i16* %arrayidx22, align 2
  %conv23 = zext i16 %45 to i32
  %46 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %47 = load i16**, i16*** %ref_pic, align 8
  %48 = load i32, i32* %ry, align 4
  %49 = load i32, i32* %rx0, align 4
  %add24 = add nsw i32 %49, 8
  %50 = load i32, i32* %img_height, align 4
  %51 = load i32, i32* %img_width, align 4
  %call25 = call zeroext i16 %46(i16** %47, i32 %48, i32 %add24, i32 %50, i32 %51)
  %conv26 = zext i16 %call25 to i32
  %sub27 = sub nsw i32 %conv23, %conv26
  %52 = load i32*, i32** %d, align 8
  %incdec.ptr28 = getelementptr inbounds i32, i32* %52, i32 1
  store i32* %incdec.ptr28, i32** %d, align 8
  store i32 %sub27, i32* %52, align 4
  %53 = load i16*, i16** %orig_line, align 8
  %54 = load i32, i32* %x0, align 4
  %add29 = add nsw i32 %54, 3
  %idxprom30 = sext i32 %add29 to i64
  %arrayidx31 = getelementptr inbounds i16, i16* %53, i64 %idxprom30
  %55 = load i16, i16* %arrayidx31, align 2
  %conv32 = zext i16 %55 to i32
  %56 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %57 = load i16**, i16*** %ref_pic, align 8
  %58 = load i32, i32* %ry, align 4
  %59 = load i32, i32* %rx0, align 4
  %add33 = add nsw i32 %59, 12
  %60 = load i32, i32* %img_height, align 4
  %61 = load i32, i32* %img_width, align 4
  %call34 = call zeroext i16 %56(i16** %57, i32 %58, i32 %add33, i32 %60, i32 %61)
  %conv35 = zext i16 %call34 to i32
  %sub36 = sub nsw i32 %conv32, %conv35
  %62 = load i32*, i32** %d, align 8
  %incdec.ptr37 = getelementptr inbounds i32, i32* %62, i32 1
  store i32* %incdec.ptr37, i32** %d, align 8
  store i32 %sub36, i32* %62, align 4
  %63 = load i16**, i16*** %orig_pic.addr, align 8
  %64 = load i32, i32* %y0, align 4
  %add38 = add nsw i32 %64, 1
  %idxprom39 = sext i32 %add38 to i64
  %arrayidx40 = getelementptr inbounds i16*, i16** %63, i64 %idxprom39
  %65 = load i16*, i16** %arrayidx40, align 8
  store i16* %65, i16** %orig_line, align 8
  %66 = load i32, i32* %ry0, align 4
  %add41 = add nsw i32 %66, 4
  store i32 %add41, i32* %ry, align 4
  %67 = load i16*, i16** %orig_line, align 8
  %68 = load i32, i32* %x0, align 4
  %idxprom42 = sext i32 %68 to i64
  %arrayidx43 = getelementptr inbounds i16, i16* %67, i64 %idxprom42
  %69 = load i16, i16* %arrayidx43, align 2
  %conv44 = zext i16 %69 to i32
  %70 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %71 = load i16**, i16*** %ref_pic, align 8
  %72 = load i32, i32* %ry, align 4
  %73 = load i32, i32* %rx0, align 4
  %74 = load i32, i32* %img_height, align 4
  %75 = load i32, i32* %img_width, align 4
  %call45 = call zeroext i16 %70(i16** %71, i32 %72, i32 %73, i32 %74, i32 %75)
  %conv46 = zext i16 %call45 to i32
  %sub47 = sub nsw i32 %conv44, %conv46
  %76 = load i32*, i32** %d, align 8
  %incdec.ptr48 = getelementptr inbounds i32, i32* %76, i32 1
  store i32* %incdec.ptr48, i32** %d, align 8
  store i32 %sub47, i32* %76, align 4
  %77 = load i16*, i16** %orig_line, align 8
  %78 = load i32, i32* %x0, align 4
  %add49 = add nsw i32 %78, 1
  %idxprom50 = sext i32 %add49 to i64
  %arrayidx51 = getelementptr inbounds i16, i16* %77, i64 %idxprom50
  %79 = load i16, i16* %arrayidx51, align 2
  %conv52 = zext i16 %79 to i32
  %80 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %81 = load i16**, i16*** %ref_pic, align 8
  %82 = load i32, i32* %ry, align 4
  %83 = load i32, i32* %rx0, align 4
  %add53 = add nsw i32 %83, 4
  %84 = load i32, i32* %img_height, align 4
  %85 = load i32, i32* %img_width, align 4
  %call54 = call zeroext i16 %80(i16** %81, i32 %82, i32 %add53, i32 %84, i32 %85)
  %conv55 = zext i16 %call54 to i32
  %sub56 = sub nsw i32 %conv52, %conv55
  %86 = load i32*, i32** %d, align 8
  %incdec.ptr57 = getelementptr inbounds i32, i32* %86, i32 1
  store i32* %incdec.ptr57, i32** %d, align 8
  store i32 %sub56, i32* %86, align 4
  %87 = load i16*, i16** %orig_line, align 8
  %88 = load i32, i32* %x0, align 4
  %add58 = add nsw i32 %88, 2
  %idxprom59 = sext i32 %add58 to i64
  %arrayidx60 = getelementptr inbounds i16, i16* %87, i64 %idxprom59
  %89 = load i16, i16* %arrayidx60, align 2
  %conv61 = zext i16 %89 to i32
  %90 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %91 = load i16**, i16*** %ref_pic, align 8
  %92 = load i32, i32* %ry, align 4
  %93 = load i32, i32* %rx0, align 4
  %add62 = add nsw i32 %93, 8
  %94 = load i32, i32* %img_height, align 4
  %95 = load i32, i32* %img_width, align 4
  %call63 = call zeroext i16 %90(i16** %91, i32 %92, i32 %add62, i32 %94, i32 %95)
  %conv64 = zext i16 %call63 to i32
  %sub65 = sub nsw i32 %conv61, %conv64
  %96 = load i32*, i32** %d, align 8
  %incdec.ptr66 = getelementptr inbounds i32, i32* %96, i32 1
  store i32* %incdec.ptr66, i32** %d, align 8
  store i32 %sub65, i32* %96, align 4
  %97 = load i16*, i16** %orig_line, align 8
  %98 = load i32, i32* %x0, align 4
  %add67 = add nsw i32 %98, 3
  %idxprom68 = sext i32 %add67 to i64
  %arrayidx69 = getelementptr inbounds i16, i16* %97, i64 %idxprom68
  %99 = load i16, i16* %arrayidx69, align 2
  %conv70 = zext i16 %99 to i32
  %100 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %101 = load i16**, i16*** %ref_pic, align 8
  %102 = load i32, i32* %ry, align 4
  %103 = load i32, i32* %rx0, align 4
  %add71 = add nsw i32 %103, 12
  %104 = load i32, i32* %img_height, align 4
  %105 = load i32, i32* %img_width, align 4
  %call72 = call zeroext i16 %100(i16** %101, i32 %102, i32 %add71, i32 %104, i32 %105)
  %conv73 = zext i16 %call72 to i32
  %sub74 = sub nsw i32 %conv70, %conv73
  %106 = load i32*, i32** %d, align 8
  %incdec.ptr75 = getelementptr inbounds i32, i32* %106, i32 1
  store i32* %incdec.ptr75, i32** %d, align 8
  store i32 %sub74, i32* %106, align 4
  %107 = load i16**, i16*** %orig_pic.addr, align 8
  %108 = load i32, i32* %y0, align 4
  %add76 = add nsw i32 %108, 2
  %idxprom77 = sext i32 %add76 to i64
  %arrayidx78 = getelementptr inbounds i16*, i16** %107, i64 %idxprom77
  %109 = load i16*, i16** %arrayidx78, align 8
  store i16* %109, i16** %orig_line, align 8
  %110 = load i32, i32* %ry0, align 4
  %add79 = add nsw i32 %110, 8
  store i32 %add79, i32* %ry, align 4
  %111 = load i16*, i16** %orig_line, align 8
  %112 = load i32, i32* %x0, align 4
  %idxprom80 = sext i32 %112 to i64
  %arrayidx81 = getelementptr inbounds i16, i16* %111, i64 %idxprom80
  %113 = load i16, i16* %arrayidx81, align 2
  %conv82 = zext i16 %113 to i32
  %114 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %115 = load i16**, i16*** %ref_pic, align 8
  %116 = load i32, i32* %ry, align 4
  %117 = load i32, i32* %rx0, align 4
  %118 = load i32, i32* %img_height, align 4
  %119 = load i32, i32* %img_width, align 4
  %call83 = call zeroext i16 %114(i16** %115, i32 %116, i32 %117, i32 %118, i32 %119)
  %conv84 = zext i16 %call83 to i32
  %sub85 = sub nsw i32 %conv82, %conv84
  %120 = load i32*, i32** %d, align 8
  %incdec.ptr86 = getelementptr inbounds i32, i32* %120, i32 1
  store i32* %incdec.ptr86, i32** %d, align 8
  store i32 %sub85, i32* %120, align 4
  %121 = load i16*, i16** %orig_line, align 8
  %122 = load i32, i32* %x0, align 4
  %add87 = add nsw i32 %122, 1
  %idxprom88 = sext i32 %add87 to i64
  %arrayidx89 = getelementptr inbounds i16, i16* %121, i64 %idxprom88
  %123 = load i16, i16* %arrayidx89, align 2
  %conv90 = zext i16 %123 to i32
  %124 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %125 = load i16**, i16*** %ref_pic, align 8
  %126 = load i32, i32* %ry, align 4
  %127 = load i32, i32* %rx0, align 4
  %add91 = add nsw i32 %127, 4
  %128 = load i32, i32* %img_height, align 4
  %129 = load i32, i32* %img_width, align 4
  %call92 = call zeroext i16 %124(i16** %125, i32 %126, i32 %add91, i32 %128, i32 %129)
  %conv93 = zext i16 %call92 to i32
  %sub94 = sub nsw i32 %conv90, %conv93
  %130 = load i32*, i32** %d, align 8
  %incdec.ptr95 = getelementptr inbounds i32, i32* %130, i32 1
  store i32* %incdec.ptr95, i32** %d, align 8
  store i32 %sub94, i32* %130, align 4
  %131 = load i16*, i16** %orig_line, align 8
  %132 = load i32, i32* %x0, align 4
  %add96 = add nsw i32 %132, 2
  %idxprom97 = sext i32 %add96 to i64
  %arrayidx98 = getelementptr inbounds i16, i16* %131, i64 %idxprom97
  %133 = load i16, i16* %arrayidx98, align 2
  %conv99 = zext i16 %133 to i32
  %134 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %135 = load i16**, i16*** %ref_pic, align 8
  %136 = load i32, i32* %ry, align 4
  %137 = load i32, i32* %rx0, align 4
  %add100 = add nsw i32 %137, 8
  %138 = load i32, i32* %img_height, align 4
  %139 = load i32, i32* %img_width, align 4
  %call101 = call zeroext i16 %134(i16** %135, i32 %136, i32 %add100, i32 %138, i32 %139)
  %conv102 = zext i16 %call101 to i32
  %sub103 = sub nsw i32 %conv99, %conv102
  %140 = load i32*, i32** %d, align 8
  %incdec.ptr104 = getelementptr inbounds i32, i32* %140, i32 1
  store i32* %incdec.ptr104, i32** %d, align 8
  store i32 %sub103, i32* %140, align 4
  %141 = load i16*, i16** %orig_line, align 8
  %142 = load i32, i32* %x0, align 4
  %add105 = add nsw i32 %142, 3
  %idxprom106 = sext i32 %add105 to i64
  %arrayidx107 = getelementptr inbounds i16, i16* %141, i64 %idxprom106
  %143 = load i16, i16* %arrayidx107, align 2
  %conv108 = zext i16 %143 to i32
  %144 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %145 = load i16**, i16*** %ref_pic, align 8
  %146 = load i32, i32* %ry, align 4
  %147 = load i32, i32* %rx0, align 4
  %add109 = add nsw i32 %147, 12
  %148 = load i32, i32* %img_height, align 4
  %149 = load i32, i32* %img_width, align 4
  %call110 = call zeroext i16 %144(i16** %145, i32 %146, i32 %add109, i32 %148, i32 %149)
  %conv111 = zext i16 %call110 to i32
  %sub112 = sub nsw i32 %conv108, %conv111
  %150 = load i32*, i32** %d, align 8
  %incdec.ptr113 = getelementptr inbounds i32, i32* %150, i32 1
  store i32* %incdec.ptr113, i32** %d, align 8
  store i32 %sub112, i32* %150, align 4
  %151 = load i16**, i16*** %orig_pic.addr, align 8
  %152 = load i32, i32* %y0, align 4
  %add114 = add nsw i32 %152, 3
  %idxprom115 = sext i32 %add114 to i64
  %arrayidx116 = getelementptr inbounds i16*, i16** %151, i64 %idxprom115
  %153 = load i16*, i16** %arrayidx116, align 8
  store i16* %153, i16** %orig_line, align 8
  %154 = load i32, i32* %ry0, align 4
  %add117 = add nsw i32 %154, 12
  store i32 %add117, i32* %ry, align 4
  %155 = load i16*, i16** %orig_line, align 8
  %156 = load i32, i32* %x0, align 4
  %idxprom118 = sext i32 %156 to i64
  %arrayidx119 = getelementptr inbounds i16, i16* %155, i64 %idxprom118
  %157 = load i16, i16* %arrayidx119, align 2
  %conv120 = zext i16 %157 to i32
  %158 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %159 = load i16**, i16*** %ref_pic, align 8
  %160 = load i32, i32* %ry, align 4
  %161 = load i32, i32* %rx0, align 4
  %162 = load i32, i32* %img_height, align 4
  %163 = load i32, i32* %img_width, align 4
  %call121 = call zeroext i16 %158(i16** %159, i32 %160, i32 %161, i32 %162, i32 %163)
  %conv122 = zext i16 %call121 to i32
  %sub123 = sub nsw i32 %conv120, %conv122
  %164 = load i32*, i32** %d, align 8
  %incdec.ptr124 = getelementptr inbounds i32, i32* %164, i32 1
  store i32* %incdec.ptr124, i32** %d, align 8
  store i32 %sub123, i32* %164, align 4
  %165 = load i16*, i16** %orig_line, align 8
  %166 = load i32, i32* %x0, align 4
  %add125 = add nsw i32 %166, 1
  %idxprom126 = sext i32 %add125 to i64
  %arrayidx127 = getelementptr inbounds i16, i16* %165, i64 %idxprom126
  %167 = load i16, i16* %arrayidx127, align 2
  %conv128 = zext i16 %167 to i32
  %168 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %169 = load i16**, i16*** %ref_pic, align 8
  %170 = load i32, i32* %ry, align 4
  %171 = load i32, i32* %rx0, align 4
  %add129 = add nsw i32 %171, 4
  %172 = load i32, i32* %img_height, align 4
  %173 = load i32, i32* %img_width, align 4
  %call130 = call zeroext i16 %168(i16** %169, i32 %170, i32 %add129, i32 %172, i32 %173)
  %conv131 = zext i16 %call130 to i32
  %sub132 = sub nsw i32 %conv128, %conv131
  %174 = load i32*, i32** %d, align 8
  %incdec.ptr133 = getelementptr inbounds i32, i32* %174, i32 1
  store i32* %incdec.ptr133, i32** %d, align 8
  store i32 %sub132, i32* %174, align 4
  %175 = load i16*, i16** %orig_line, align 8
  %176 = load i32, i32* %x0, align 4
  %add134 = add nsw i32 %176, 2
  %idxprom135 = sext i32 %add134 to i64
  %arrayidx136 = getelementptr inbounds i16, i16* %175, i64 %idxprom135
  %177 = load i16, i16* %arrayidx136, align 2
  %conv137 = zext i16 %177 to i32
  %178 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %179 = load i16**, i16*** %ref_pic, align 8
  %180 = load i32, i32* %ry, align 4
  %181 = load i32, i32* %rx0, align 4
  %add138 = add nsw i32 %181, 8
  %182 = load i32, i32* %img_height, align 4
  %183 = load i32, i32* %img_width, align 4
  %call139 = call zeroext i16 %178(i16** %179, i32 %180, i32 %add138, i32 %182, i32 %183)
  %conv140 = zext i16 %call139 to i32
  %sub141 = sub nsw i32 %conv137, %conv140
  %184 = load i32*, i32** %d, align 8
  %incdec.ptr142 = getelementptr inbounds i32, i32* %184, i32 1
  store i32* %incdec.ptr142, i32** %d, align 8
  store i32 %sub141, i32* %184, align 4
  %185 = load i16*, i16** %orig_line, align 8
  %186 = load i32, i32* %x0, align 4
  %add143 = add nsw i32 %186, 3
  %idxprom144 = sext i32 %add143 to i64
  %arrayidx145 = getelementptr inbounds i16, i16* %185, i64 %idxprom144
  %187 = load i16, i16* %arrayidx145, align 2
  %conv146 = zext i16 %187 to i32
  %188 = load i16 (i16**, i32, i32, i32, i32)*, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  %189 = load i16**, i16*** %ref_pic, align 8
  %190 = load i32, i32* %ry, align 4
  %191 = load i32, i32* %rx0, align 4
  %add147 = add nsw i32 %191, 12
  %192 = load i32, i32* %img_height, align 4
  %193 = load i32, i32* %img_width, align 4
  %call148 = call zeroext i16 %188(i16** %189, i32 %190, i32 %add147, i32 %192, i32 %193)
  %conv149 = zext i16 %call148 to i32
  %sub150 = sub nsw i32 %conv146, %conv149
  %194 = load i32*, i32** %d, align 8
  store i32 %sub150, i32* %194, align 4
  %195 = load i32, i32* %useABT.addr, align 4
  %tobool151 = icmp ne i32 %195, 0
  br i1 %tobool151, label %if.else, label %if.then

if.then:                                          ; preds = %for.body4
  %arraydecay152 = getelementptr inbounds [16 x i32], [16 x i32]* %diff, i64 0, i64 0
  %196 = load %struct.InputParameters*, %struct.InputParameters** @input, align 8
  %hadamard = getelementptr inbounds %struct.InputParameters, %struct.InputParameters* %196, i32 0, i32 6
  %197 = load i32, i32* %hadamard, align 8
  %call153 = call i32 @SATD(i32* %arraydecay152, i32 %197)
  %198 = load i32, i32* %mcost, align 4
  %add154 = add nsw i32 %198, %call153
  store i32 %add154, i32* %mcost, align 4
  %199 = load i32, i32* %min_mcost.addr, align 4
  %cmp155 = icmp sgt i32 %add154, %199
  br i1 %cmp155, label %if.then157, label %if.end

if.then157:                                       ; preds = %if.then
  store i32 1, i32* %abort_search, align 4
  br label %for.end181

if.end:                                           ; preds = %if.then
  br label %if.end178

if.else:                                          ; preds = %for.body4
  %200 = load i32, i32* %y0, align 4
  store i32 %200, i32* %yy, align 4
  store i32 0, i32* %kk, align 4
  br label %for.cond158

for.cond158:                                      ; preds = %for.inc175, %if.else
  %201 = load i32, i32* %yy, align 4
  %202 = load i32, i32* %y0, align 4
  %add159 = add nsw i32 %202, 4
  %cmp160 = icmp slt i32 %201, %add159
  br i1 %cmp160, label %for.body162, label %for.end177

for.body162:                                      ; preds = %for.cond158
  %203 = load i32, i32* %x0, align 4
  store i32 %203, i32* %xx, align 4
  br label %for.cond163

for.cond163:                                      ; preds = %for.inc, %for.body162
  %204 = load i32, i32* %xx, align 4
  %205 = load i32, i32* %x0, align 4
  %add164 = add nsw i32 %205, 4
  %cmp165 = icmp slt i32 %204, %add164
  br i1 %cmp165, label %for.body167, label %for.end

for.body167:                                      ; preds = %for.cond163
  %206 = load i32, i32* %kk, align 4
  %idxprom168 = sext i32 %206 to i64
  %arrayidx169 = getelementptr inbounds [16 x i32], [16 x i32]* %diff, i64 0, i64 %idxprom168
  %207 = load i32, i32* %arrayidx169, align 4
  %208 = load i32, i32* %yy, align 4
  %idxprom170 = sext i32 %208 to i64
  %arrayidx171 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %curr_diff, i64 0, i64 %idxprom170
  %209 = load i32, i32* %xx, align 4
  %idxprom172 = sext i32 %209 to i64
  %arrayidx173 = getelementptr inbounds [16 x i32], [16 x i32]* %arrayidx171, i64 0, i64 %idxprom172
  store i32 %207, i32* %arrayidx173, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body167
  %210 = load i32, i32* %xx, align 4
  %inc = add nsw i32 %210, 1
  store i32 %inc, i32* %xx, align 4
  %211 = load i32, i32* %kk, align 4
  %inc174 = add nsw i32 %211, 1
  store i32 %inc174, i32* %kk, align 4
  br label %for.cond163

for.end:                                          ; preds = %for.cond163
  br label %for.inc175

for.inc175:                                       ; preds = %for.end
  %212 = load i32, i32* %yy, align 4
  %inc176 = add nsw i32 %212, 1
  store i32 %inc176, i32* %yy, align 4
  br label %for.cond158

for.end177:                                       ; preds = %for.cond158
  br label %if.end178

if.end178:                                        ; preds = %for.end177, %if.end
  br label %for.inc179

for.inc179:                                       ; preds = %if.end178
  %213 = load i32, i32* %x0, align 4
  %add180 = add nsw i32 %213, 4
  store i32 %add180, i32* %x0, align 4
  br label %for.cond2

for.end181:                                       ; preds = %if.then157, %for.cond2
  br label %for.inc182

for.inc182:                                       ; preds = %for.end181
  %214 = load i32, i32* %y0, align 4
  %add183 = add nsw i32 %214, 4
  store i32 %add183, i32* %y0, align 4
  br label %for.cond

for.end184:                                       ; preds = %land.end
  %215 = load i32, i32* %mcost, align 4
  %216 = load i32, i32* %canary
  %217 = icmp eq i32 %216, 4885258
  br i1 %217, label %218, label %func_exit

218:                                              ; preds = %for.end184, %func_exit
  ret i32 %215

func_exit:                                        ; preds = %for.end184
  call void @detect_breach()
  br label %218
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @get_mem_mincost.38(i32****** %mv) #0 {
entry:
  %mv.addr = alloca i32******, align 8
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %canary = alloca i32
  store i32 1782894128, i32* %canary
  %i = alloca i32, align 4
  %l = alloca i32, align 4
  store i32****** %mv, i32******* %mv.addr, align 8
  %0 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %width = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %0, i32 0, i32 13
  %1 = load i32, i32* %width, align 4
  %div = sdiv i32 %1, 4
  %conv = sext i32 %div to i64
  %call = call noalias i8* @calloc(i64 %conv, i64 8) #5
  %2 = bitcast i8* %call to i32*****
  %3 = load i32******, i32******* %mv.addr, align 8
  store i32***** %2, i32****** %3, align 8
  %cmp = icmp eq i32***** %2, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @no_mem_exit(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc68, %if.end
  %4 = load i32, i32* %i, align 4
  %5 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %width2 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %5, i32 0, i32 13
  %6 = load i32, i32* %width2, align 4
  %div3 = sdiv i32 %6, 4
  %cmp4 = icmp slt i32 %4, %div3
  br i1 %cmp4, label %for.body, label %for.end70

for.body:                                         ; preds = %for.cond
  %7 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %7, i32 0, i32 15
  %8 = load i32, i32* %height, align 4
  %div6 = sdiv i32 %8, 4
  %conv7 = sext i32 %div6 to i64
  %call8 = call noalias i8* @calloc(i64 %conv7, i64 8) #5
  %9 = bitcast i8* %call8 to i32****
  %10 = load i32******, i32******* %mv.addr, align 8
  %11 = load i32*****, i32****** %10, align 8
  %12 = load i32, i32* %i, align 4
  %idxprom = sext i32 %12 to i64
  %arrayidx = getelementptr inbounds i32****, i32***** %11, i64 %idxprom
  store i32**** %9, i32***** %arrayidx, align 8
  %cmp9 = icmp eq i32**** %9, null
  br i1 %cmp9, label %if.then11, label %if.end12

if.then11:                                        ; preds = %for.body
  call void @no_mem_exit(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %if.end12

if.end12:                                         ; preds = %if.then11, %for.body
  store i32 0, i32* %j, align 4
  br label %for.cond13

for.cond13:                                       ; preds = %for.inc65, %if.end12
  %13 = load i32, i32* %j, align 4
  %14 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height14 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %14, i32 0, i32 15
  %15 = load i32, i32* %height14, align 4
  %div15 = sdiv i32 %15, 4
  %cmp16 = icmp slt i32 %13, %div15
  br i1 %cmp16, label %for.body18, label %for.end67

for.body18:                                       ; preds = %for.cond13
  %16 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %max_num_references = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %16, i32 0, i32 9
  %17 = load i32, i32* %max_num_references, align 4
  %conv19 = sext i32 %17 to i64
  %call20 = call noalias i8* @calloc(i64 %conv19, i64 8) #5
  %18 = bitcast i8* %call20 to i32***
  %19 = load i32******, i32******* %mv.addr, align 8
  %20 = load i32*****, i32****** %19, align 8
  %21 = load i32, i32* %i, align 4
  %idxprom21 = sext i32 %21 to i64
  %arrayidx22 = getelementptr inbounds i32****, i32***** %20, i64 %idxprom21
  %22 = load i32****, i32***** %arrayidx22, align 8
  %23 = load i32, i32* %j, align 4
  %idxprom23 = sext i32 %23 to i64
  %arrayidx24 = getelementptr inbounds i32***, i32**** %22, i64 %idxprom23
  store i32*** %18, i32**** %arrayidx24, align 8
  %cmp25 = icmp eq i32*** %18, null
  br i1 %cmp25, label %if.then27, label %if.end28

if.then27:                                        ; preds = %for.body18
  call void @no_mem_exit(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %if.end28

if.end28:                                         ; preds = %if.then27, %for.body18
  store i32 0, i32* %k, align 4
  br label %for.cond29

for.cond29:                                       ; preds = %for.inc62, %if.end28
  %24 = load i32, i32* %k, align 4
  %25 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %max_num_references30 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %25, i32 0, i32 9
  %26 = load i32, i32* %max_num_references30, align 4
  %cmp31 = icmp slt i32 %24, %26
  br i1 %cmp31, label %for.body33, label %for.end64

for.body33:                                       ; preds = %for.cond29
  %call34 = call noalias i8* @calloc(i64 9, i64 8) #5
  %27 = bitcast i8* %call34 to i32**
  %28 = load i32******, i32******* %mv.addr, align 8
  %29 = load i32*****, i32****** %28, align 8
  %30 = load i32, i32* %i, align 4
  %idxprom35 = sext i32 %30 to i64
  %arrayidx36 = getelementptr inbounds i32****, i32***** %29, i64 %idxprom35
  %31 = load i32****, i32***** %arrayidx36, align 8
  %32 = load i32, i32* %j, align 4
  %idxprom37 = sext i32 %32 to i64
  %arrayidx38 = getelementptr inbounds i32***, i32**** %31, i64 %idxprom37
  %33 = load i32***, i32**** %arrayidx38, align 8
  %34 = load i32, i32* %k, align 4
  %idxprom39 = sext i32 %34 to i64
  %arrayidx40 = getelementptr inbounds i32**, i32*** %33, i64 %idxprom39
  store i32** %27, i32*** %arrayidx40, align 8
  %cmp41 = icmp eq i32** %27, null
  br i1 %cmp41, label %if.then43, label %if.end44

if.then43:                                        ; preds = %for.body33
  call void @no_mem_exit(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %if.end44

if.end44:                                         ; preds = %if.then43, %for.body33
  store i32 0, i32* %l, align 4
  br label %for.cond45

for.cond45:                                       ; preds = %for.inc, %if.end44
  %35 = load i32, i32* %l, align 4
  %cmp46 = icmp slt i32 %35, 9
  br i1 %cmp46, label %for.body48, label %for.end

for.body48:                                       ; preds = %for.cond45
  %call49 = call noalias i8* @calloc(i64 3, i64 4) #5
  %36 = bitcast i8* %call49 to i32*
  %37 = load i32******, i32******* %mv.addr, align 8
  %38 = load i32*****, i32****** %37, align 8
  %39 = load i32, i32* %i, align 4
  %idxprom50 = sext i32 %39 to i64
  %arrayidx51 = getelementptr inbounds i32****, i32***** %38, i64 %idxprom50
  %40 = load i32****, i32***** %arrayidx51, align 8
  %41 = load i32, i32* %j, align 4
  %idxprom52 = sext i32 %41 to i64
  %arrayidx53 = getelementptr inbounds i32***, i32**** %40, i64 %idxprom52
  %42 = load i32***, i32**** %arrayidx53, align 8
  %43 = load i32, i32* %k, align 4
  %idxprom54 = sext i32 %43 to i64
  %arrayidx55 = getelementptr inbounds i32**, i32*** %42, i64 %idxprom54
  %44 = load i32**, i32*** %arrayidx55, align 8
  %45 = load i32, i32* %l, align 4
  %idxprom56 = sext i32 %45 to i64
  %arrayidx57 = getelementptr inbounds i32*, i32** %44, i64 %idxprom56
  store i32* %36, i32** %arrayidx57, align 8
  %cmp58 = icmp eq i32* %36, null
  br i1 %cmp58, label %if.then60, label %if.end61

if.then60:                                        ; preds = %for.body48
  call void @no_mem_exit(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %if.end61

if.end61:                                         ; preds = %if.then60, %for.body48
  br label %for.inc

for.inc:                                          ; preds = %if.end61
  %46 = load i32, i32* %l, align 4
  %inc = add nsw i32 %46, 1
  store i32 %inc, i32* %l, align 4
  br label %for.cond45

for.end:                                          ; preds = %for.cond45
  br label %for.inc62

for.inc62:                                        ; preds = %for.end
  %47 = load i32, i32* %k, align 4
  %inc63 = add nsw i32 %47, 1
  store i32 %inc63, i32* %k, align 4
  br label %for.cond29

for.end64:                                        ; preds = %for.cond29
  br label %for.inc65

for.inc65:                                        ; preds = %for.end64
  %48 = load i32, i32* %j, align 4
  %inc66 = add nsw i32 %48, 1
  store i32 %inc66, i32* %j, align 4
  br label %for.cond13

for.end67:                                        ; preds = %for.cond13
  br label %for.inc68

for.inc68:                                        ; preds = %for.end67
  %49 = load i32, i32* %i, align 4
  %inc69 = add nsw i32 %49, 1
  store i32 %inc69, i32* %i, align 4
  br label %for.cond

for.end70:                                        ; preds = %for.cond
  %50 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %width71 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %50, i32 0, i32 13
  %51 = load i32, i32* %width71, align 4
  %div72 = sdiv i32 %51, 4
  %52 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height73 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %52, i32 0, i32 15
  %53 = load i32, i32* %height73, align 4
  %mul = mul nsw i32 %div72, %53
  %div74 = sdiv i32 %mul, 4
  %54 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %max_num_references75 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %54, i32 0, i32 9
  %55 = load i32, i32* %max_num_references75, align 4
  %mul76 = mul nsw i32 %div74, %55
  %mul77 = mul nsw i32 %mul76, 9
  %mul78 = mul nsw i32 %mul77, 3
  %conv79 = sext i32 %mul78 to i64
  %mul80 = mul i64 %conv79, 4
  %conv81 = trunc i64 %mul80 to i32
  %56 = load i32, i32* %canary
  %57 = icmp eq i32 %56, 1782894128
  br i1 %57, label %58, label %func_exit

58:                                               ; preds = %for.end70, %func_exit
  ret i32 %conv81

func_exit:                                        ; preds = %for.end70
  call void @detect_breach()
  br label %58
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @free_mem_bwmincost.39(i32***** %mv) #0 {
entry:
  %mv.addr = alloca i32*****, align 8
  %l = alloca i32, align 4
  %i = alloca i32, align 4
  %canary = alloca i32
  store i32 1687602965, i32* %canary
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store i32***** %mv, i32****** %mv.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc35, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %width = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %1, i32 0, i32 13
  %2 = load i32, i32* %width, align 4
  %div = sdiv i32 %2, 4
  %cmp = icmp slt i32 %0, %div
  br i1 %cmp, label %for.body, label %for.end37

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc30, %for.body
  %3 = load i32, i32* %j, align 4
  %4 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %4, i32 0, i32 15
  %5 = load i32, i32* %height, align 4
  %div2 = sdiv i32 %5, 4
  %cmp3 = icmp slt i32 %3, %div2
  br i1 %cmp3, label %for.body4, label %for.end32

for.body4:                                        ; preds = %for.cond1
  store i32 0, i32* %k, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc23, %for.body4
  %6 = load i32, i32* %k, align 4
  %7 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %max_num_references = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %7, i32 0, i32 9
  %8 = load i32, i32* %max_num_references, align 4
  %cmp6 = icmp slt i32 %6, %8
  br i1 %cmp6, label %for.body7, label %for.end25

for.body7:                                        ; preds = %for.cond5
  store i32 0, i32* %l, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc, %for.body7
  %9 = load i32, i32* %l, align 4
  %cmp9 = icmp slt i32 %9, 9
  br i1 %cmp9, label %for.body10, label %for.end

for.body10:                                       ; preds = %for.cond8
  %10 = load i32*****, i32****** %mv.addr, align 8
  %11 = load i32, i32* %i, align 4
  %idxprom = sext i32 %11 to i64
  %arrayidx = getelementptr inbounds i32****, i32***** %10, i64 %idxprom
  %12 = load i32****, i32***** %arrayidx, align 8
  %13 = load i32, i32* %j, align 4
  %idxprom11 = sext i32 %13 to i64
  %arrayidx12 = getelementptr inbounds i32***, i32**** %12, i64 %idxprom11
  %14 = load i32***, i32**** %arrayidx12, align 8
  %15 = load i32, i32* %k, align 4
  %idxprom13 = sext i32 %15 to i64
  %arrayidx14 = getelementptr inbounds i32**, i32*** %14, i64 %idxprom13
  %16 = load i32**, i32*** %arrayidx14, align 8
  %17 = load i32, i32* %l, align 4
  %idxprom15 = sext i32 %17 to i64
  %arrayidx16 = getelementptr inbounds i32*, i32** %16, i64 %idxprom15
  %18 = load i32*, i32** %arrayidx16, align 8
  %19 = bitcast i32* %18 to i8*
  call void @free(i8* %19) #5
  br label %for.inc

for.inc:                                          ; preds = %for.body10
  %20 = load i32, i32* %l, align 4
  %inc = add nsw i32 %20, 1
  store i32 %inc, i32* %l, align 4
  br label %for.cond8

for.end:                                          ; preds = %for.cond8
  %21 = load i32*****, i32****** %mv.addr, align 8
  %22 = load i32, i32* %i, align 4
  %idxprom17 = sext i32 %22 to i64
  %arrayidx18 = getelementptr inbounds i32****, i32***** %21, i64 %idxprom17
  %23 = load i32****, i32***** %arrayidx18, align 8
  %24 = load i32, i32* %j, align 4
  %idxprom19 = sext i32 %24 to i64
  %arrayidx20 = getelementptr inbounds i32***, i32**** %23, i64 %idxprom19
  %25 = load i32***, i32**** %arrayidx20, align 8
  %26 = load i32, i32* %k, align 4
  %idxprom21 = sext i32 %26 to i64
  %arrayidx22 = getelementptr inbounds i32**, i32*** %25, i64 %idxprom21
  %27 = load i32**, i32*** %arrayidx22, align 8
  %28 = bitcast i32** %27 to i8*
  call void @free(i8* %28) #5
  br label %for.inc23

for.inc23:                                        ; preds = %for.end
  %29 = load i32, i32* %k, align 4
  %inc24 = add nsw i32 %29, 1
  store i32 %inc24, i32* %k, align 4
  br label %for.cond5

for.end25:                                        ; preds = %for.cond5
  %30 = load i32*****, i32****** %mv.addr, align 8
  %31 = load i32, i32* %i, align 4
  %idxprom26 = sext i32 %31 to i64
  %arrayidx27 = getelementptr inbounds i32****, i32***** %30, i64 %idxprom26
  %32 = load i32****, i32***** %arrayidx27, align 8
  %33 = load i32, i32* %j, align 4
  %idxprom28 = sext i32 %33 to i64
  %arrayidx29 = getelementptr inbounds i32***, i32**** %32, i64 %idxprom28
  %34 = load i32***, i32**** %arrayidx29, align 8
  %35 = bitcast i32*** %34 to i8*
  call void @free(i8* %35) #5
  br label %for.inc30

for.inc30:                                        ; preds = %for.end25
  %36 = load i32, i32* %j, align 4
  %inc31 = add nsw i32 %36, 1
  store i32 %inc31, i32* %j, align 4
  br label %for.cond1

for.end32:                                        ; preds = %for.cond1
  %37 = load i32*****, i32****** %mv.addr, align 8
  %38 = load i32, i32* %i, align 4
  %idxprom33 = sext i32 %38 to i64
  %arrayidx34 = getelementptr inbounds i32****, i32***** %37, i64 %idxprom33
  %39 = load i32****, i32***** %arrayidx34, align 8
  %40 = bitcast i32**** %39 to i8*
  call void @free(i8* %40) #5
  br label %for.inc35

for.inc35:                                        ; preds = %for.end32
  %41 = load i32, i32* %i, align 4
  %inc36 = add nsw i32 %41, 1
  store i32 %inc36, i32* %i, align 4
  br label %for.cond

for.end37:                                        ; preds = %for.cond
  %42 = load i32*****, i32****** %mv.addr, align 8
  %43 = bitcast i32***** %42 to i8*
  call void @free(i8* %43) #5
  %44 = load i32, i32* %canary
  %45 = icmp eq i32 %44, 1687602965
  br i1 %45, label %46, label %func_exit

46:                                               ; preds = %for.end37, %func_exit
  ret void

func_exit:                                        ; preds = %for.end37
  call void @detect_breach()
  br label %46
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @free_mem_bwmincost.40(i32***** %mv) #0 {
entry:
  %mv.addr = alloca i32*****, align 8
  %k = alloca i32, align 4
  %i = alloca i32, align 4
  %canary = alloca i32
  store i32 1412139515, i32* %canary
  %j = alloca i32, align 4
  %l = alloca i32, align 4
  store i32***** %mv, i32****** %mv.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc35, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %width = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %1, i32 0, i32 13
  %2 = load i32, i32* %width, align 4
  %div = sdiv i32 %2, 4
  %cmp = icmp slt i32 %0, %div
  br i1 %cmp, label %for.body, label %for.end37

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc30, %for.body
  %3 = load i32, i32* %j, align 4
  %4 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %4, i32 0, i32 15
  %5 = load i32, i32* %height, align 4
  %div2 = sdiv i32 %5, 4
  %cmp3 = icmp slt i32 %3, %div2
  br i1 %cmp3, label %for.body4, label %for.end32

for.body4:                                        ; preds = %for.cond1
  store i32 0, i32* %k, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc23, %for.body4
  %6 = load i32, i32* %k, align 4
  %7 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %max_num_references = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %7, i32 0, i32 9
  %8 = load i32, i32* %max_num_references, align 4
  %cmp6 = icmp slt i32 %6, %8
  br i1 %cmp6, label %for.body7, label %for.end25

for.body7:                                        ; preds = %for.cond5
  store i32 0, i32* %l, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc, %for.body7
  %9 = load i32, i32* %l, align 4
  %cmp9 = icmp slt i32 %9, 9
  br i1 %cmp9, label %for.body10, label %for.end

for.body10:                                       ; preds = %for.cond8
  %10 = load i32*****, i32****** %mv.addr, align 8
  %11 = load i32, i32* %i, align 4
  %idxprom = sext i32 %11 to i64
  %arrayidx = getelementptr inbounds i32****, i32***** %10, i64 %idxprom
  %12 = load i32****, i32***** %arrayidx, align 8
  %13 = load i32, i32* %j, align 4
  %idxprom11 = sext i32 %13 to i64
  %arrayidx12 = getelementptr inbounds i32***, i32**** %12, i64 %idxprom11
  %14 = load i32***, i32**** %arrayidx12, align 8
  %15 = load i32, i32* %k, align 4
  %idxprom13 = sext i32 %15 to i64
  %arrayidx14 = getelementptr inbounds i32**, i32*** %14, i64 %idxprom13
  %16 = load i32**, i32*** %arrayidx14, align 8
  %17 = load i32, i32* %l, align 4
  %idxprom15 = sext i32 %17 to i64
  %arrayidx16 = getelementptr inbounds i32*, i32** %16, i64 %idxprom15
  %18 = load i32*, i32** %arrayidx16, align 8
  %19 = bitcast i32* %18 to i8*
  call void @free(i8* %19) #5
  br label %for.inc

for.inc:                                          ; preds = %for.body10
  %20 = load i32, i32* %l, align 4
  %inc = add nsw i32 %20, 1
  store i32 %inc, i32* %l, align 4
  br label %for.cond8

for.end:                                          ; preds = %for.cond8
  %21 = load i32*****, i32****** %mv.addr, align 8
  %22 = load i32, i32* %i, align 4
  %idxprom17 = sext i32 %22 to i64
  %arrayidx18 = getelementptr inbounds i32****, i32***** %21, i64 %idxprom17
  %23 = load i32****, i32***** %arrayidx18, align 8
  %24 = load i32, i32* %j, align 4
  %idxprom19 = sext i32 %24 to i64
  %arrayidx20 = getelementptr inbounds i32***, i32**** %23, i64 %idxprom19
  %25 = load i32***, i32**** %arrayidx20, align 8
  %26 = load i32, i32* %k, align 4
  %idxprom21 = sext i32 %26 to i64
  %arrayidx22 = getelementptr inbounds i32**, i32*** %25, i64 %idxprom21
  %27 = load i32**, i32*** %arrayidx22, align 8
  %28 = bitcast i32** %27 to i8*
  call void @free(i8* %28) #5
  br label %for.inc23

for.inc23:                                        ; preds = %for.end
  %29 = load i32, i32* %k, align 4
  %inc24 = add nsw i32 %29, 1
  store i32 %inc24, i32* %k, align 4
  br label %for.cond5

for.end25:                                        ; preds = %for.cond5
  %30 = load i32*****, i32****** %mv.addr, align 8
  %31 = load i32, i32* %i, align 4
  %idxprom26 = sext i32 %31 to i64
  %arrayidx27 = getelementptr inbounds i32****, i32***** %30, i64 %idxprom26
  %32 = load i32****, i32***** %arrayidx27, align 8
  %33 = load i32, i32* %j, align 4
  %idxprom28 = sext i32 %33 to i64
  %arrayidx29 = getelementptr inbounds i32***, i32**** %32, i64 %idxprom28
  %34 = load i32***, i32**** %arrayidx29, align 8
  %35 = bitcast i32*** %34 to i8*
  call void @free(i8* %35) #5
  br label %for.inc30

for.inc30:                                        ; preds = %for.end25
  %36 = load i32, i32* %j, align 4
  %inc31 = add nsw i32 %36, 1
  store i32 %inc31, i32* %j, align 4
  br label %for.cond1

for.end32:                                        ; preds = %for.cond1
  %37 = load i32*****, i32****** %mv.addr, align 8
  %38 = load i32, i32* %i, align 4
  %idxprom33 = sext i32 %38 to i64
  %arrayidx34 = getelementptr inbounds i32****, i32***** %37, i64 %idxprom33
  %39 = load i32****, i32***** %arrayidx34, align 8
  %40 = bitcast i32**** %39 to i8*
  call void @free(i8* %40) #5
  br label %for.inc35

for.inc35:                                        ; preds = %for.end32
  %41 = load i32, i32* %i, align 4
  %inc36 = add nsw i32 %41, 1
  store i32 %inc36, i32* %i, align 4
  br label %for.cond

for.end37:                                        ; preds = %for.cond
  %42 = load i32*****, i32****** %mv.addr, align 8
  %43 = bitcast i32***** %42 to i8*
  call void @free(i8* %43) #5
  %44 = load i32, i32* %canary
  %45 = icmp eq i32 %44, 1412139515
  br i1 %45, label %46, label %func_exit

46:                                               ; preds = %for.end37, %func_exit
  ret void

func_exit:                                        ; preds = %for.end37
  call void @detect_breach()
  br label %46
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @free_mem_bwmincost.41(i32***** %mv) #0 {
entry:
  %k = alloca i32, align 4
  %mv.addr = alloca i32*****, align 8
  %canary = alloca i32
  store i32 2072469987, i32* %canary
  %l = alloca i32, align 4
  %j = alloca i32, align 4
  %i = alloca i32, align 4
  store i32***** %mv, i32****** %mv.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc35, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %width = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %1, i32 0, i32 13
  %2 = load i32, i32* %width, align 4
  %div = sdiv i32 %2, 4
  %cmp = icmp slt i32 %0, %div
  br i1 %cmp, label %for.body, label %for.end37

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc30, %for.body
  %3 = load i32, i32* %j, align 4
  %4 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %4, i32 0, i32 15
  %5 = load i32, i32* %height, align 4
  %div2 = sdiv i32 %5, 4
  %cmp3 = icmp slt i32 %3, %div2
  br i1 %cmp3, label %for.body4, label %for.end32

for.body4:                                        ; preds = %for.cond1
  store i32 0, i32* %k, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc23, %for.body4
  %6 = load i32, i32* %k, align 4
  %7 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %max_num_references = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %7, i32 0, i32 9
  %8 = load i32, i32* %max_num_references, align 4
  %cmp6 = icmp slt i32 %6, %8
  br i1 %cmp6, label %for.body7, label %for.end25

for.body7:                                        ; preds = %for.cond5
  store i32 0, i32* %l, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc, %for.body7
  %9 = load i32, i32* %l, align 4
  %cmp9 = icmp slt i32 %9, 9
  br i1 %cmp9, label %for.body10, label %for.end

for.body10:                                       ; preds = %for.cond8
  %10 = load i32*****, i32****** %mv.addr, align 8
  %11 = load i32, i32* %i, align 4
  %idxprom = sext i32 %11 to i64
  %arrayidx = getelementptr inbounds i32****, i32***** %10, i64 %idxprom
  %12 = load i32****, i32***** %arrayidx, align 8
  %13 = load i32, i32* %j, align 4
  %idxprom11 = sext i32 %13 to i64
  %arrayidx12 = getelementptr inbounds i32***, i32**** %12, i64 %idxprom11
  %14 = load i32***, i32**** %arrayidx12, align 8
  %15 = load i32, i32* %k, align 4
  %idxprom13 = sext i32 %15 to i64
  %arrayidx14 = getelementptr inbounds i32**, i32*** %14, i64 %idxprom13
  %16 = load i32**, i32*** %arrayidx14, align 8
  %17 = load i32, i32* %l, align 4
  %idxprom15 = sext i32 %17 to i64
  %arrayidx16 = getelementptr inbounds i32*, i32** %16, i64 %idxprom15
  %18 = load i32*, i32** %arrayidx16, align 8
  %19 = bitcast i32* %18 to i8*
  call void @free(i8* %19) #5
  br label %for.inc

for.inc:                                          ; preds = %for.body10
  %20 = load i32, i32* %l, align 4
  %inc = add nsw i32 %20, 1
  store i32 %inc, i32* %l, align 4
  br label %for.cond8

for.end:                                          ; preds = %for.cond8
  %21 = load i32*****, i32****** %mv.addr, align 8
  %22 = load i32, i32* %i, align 4
  %idxprom17 = sext i32 %22 to i64
  %arrayidx18 = getelementptr inbounds i32****, i32***** %21, i64 %idxprom17
  %23 = load i32****, i32***** %arrayidx18, align 8
  %24 = load i32, i32* %j, align 4
  %idxprom19 = sext i32 %24 to i64
  %arrayidx20 = getelementptr inbounds i32***, i32**** %23, i64 %idxprom19
  %25 = load i32***, i32**** %arrayidx20, align 8
  %26 = load i32, i32* %k, align 4
  %idxprom21 = sext i32 %26 to i64
  %arrayidx22 = getelementptr inbounds i32**, i32*** %25, i64 %idxprom21
  %27 = load i32**, i32*** %arrayidx22, align 8
  %28 = bitcast i32** %27 to i8*
  call void @free(i8* %28) #5
  br label %for.inc23

for.inc23:                                        ; preds = %for.end
  %29 = load i32, i32* %k, align 4
  %inc24 = add nsw i32 %29, 1
  store i32 %inc24, i32* %k, align 4
  br label %for.cond5

for.end25:                                        ; preds = %for.cond5
  %30 = load i32*****, i32****** %mv.addr, align 8
  %31 = load i32, i32* %i, align 4
  %idxprom26 = sext i32 %31 to i64
  %arrayidx27 = getelementptr inbounds i32****, i32***** %30, i64 %idxprom26
  %32 = load i32****, i32***** %arrayidx27, align 8
  %33 = load i32, i32* %j, align 4
  %idxprom28 = sext i32 %33 to i64
  %arrayidx29 = getelementptr inbounds i32***, i32**** %32, i64 %idxprom28
  %34 = load i32***, i32**** %arrayidx29, align 8
  %35 = bitcast i32*** %34 to i8*
  call void @free(i8* %35) #5
  br label %for.inc30

for.inc30:                                        ; preds = %for.end25
  %36 = load i32, i32* %j, align 4
  %inc31 = add nsw i32 %36, 1
  store i32 %inc31, i32* %j, align 4
  br label %for.cond1

for.end32:                                        ; preds = %for.cond1
  %37 = load i32*****, i32****** %mv.addr, align 8
  %38 = load i32, i32* %i, align 4
  %idxprom33 = sext i32 %38 to i64
  %arrayidx34 = getelementptr inbounds i32****, i32***** %37, i64 %idxprom33
  %39 = load i32****, i32***** %arrayidx34, align 8
  %40 = bitcast i32**** %39 to i8*
  call void @free(i8* %40) #5
  br label %for.inc35

for.inc35:                                        ; preds = %for.end32
  %41 = load i32, i32* %i, align 4
  %inc36 = add nsw i32 %41, 1
  store i32 %inc36, i32* %i, align 4
  br label %for.cond

for.end37:                                        ; preds = %for.cond
  %42 = load i32*****, i32****** %mv.addr, align 8
  %43 = bitcast i32***** %42 to i8*
  call void @free(i8* %43) #5
  %44 = load i32, i32* %canary
  %45 = icmp eq i32 %44, 2072469987
  br i1 %45, label %46, label %func_exit

46:                                               ; preds = %for.end37, %func_exit
  ret void

func_exit:                                        ; preds = %for.end37
  call void @detect_breach()
  br label %46
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @get_mem_mincost.42(i32****** %mv) #0 {
entry:
  %l = alloca i32, align 4
  %canary = alloca i32
  store i32 1872390750, i32* %canary
  %k = alloca i32, align 4
  %j = alloca i32, align 4
  %i = alloca i32, align 4
  %mv.addr = alloca i32******, align 8
  store i32****** %mv, i32******* %mv.addr, align 8
  %0 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %width = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %0, i32 0, i32 13
  %1 = load i32, i32* %width, align 4
  %div = sdiv i32 %1, 4
  %conv = sext i32 %div to i64
  %call = call noalias i8* @calloc(i64 %conv, i64 8) #5
  %2 = bitcast i8* %call to i32*****
  %3 = load i32******, i32******* %mv.addr, align 8
  store i32***** %2, i32****** %3, align 8
  %cmp = icmp eq i32***** %2, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @no_mem_exit(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc68, %if.end
  %4 = load i32, i32* %i, align 4
  %5 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %width2 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %5, i32 0, i32 13
  %6 = load i32, i32* %width2, align 4
  %div3 = sdiv i32 %6, 4
  %cmp4 = icmp slt i32 %4, %div3
  br i1 %cmp4, label %for.body, label %for.end70

for.body:                                         ; preds = %for.cond
  %7 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %7, i32 0, i32 15
  %8 = load i32, i32* %height, align 4
  %div6 = sdiv i32 %8, 4
  %conv7 = sext i32 %div6 to i64
  %call8 = call noalias i8* @calloc(i64 %conv7, i64 8) #5
  %9 = bitcast i8* %call8 to i32****
  %10 = load i32******, i32******* %mv.addr, align 8
  %11 = load i32*****, i32****** %10, align 8
  %12 = load i32, i32* %i, align 4
  %idxprom = sext i32 %12 to i64
  %arrayidx = getelementptr inbounds i32****, i32***** %11, i64 %idxprom
  store i32**** %9, i32***** %arrayidx, align 8
  %cmp9 = icmp eq i32**** %9, null
  br i1 %cmp9, label %if.then11, label %if.end12

if.then11:                                        ; preds = %for.body
  call void @no_mem_exit(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %if.end12

if.end12:                                         ; preds = %if.then11, %for.body
  store i32 0, i32* %j, align 4
  br label %for.cond13

for.cond13:                                       ; preds = %for.inc65, %if.end12
  %13 = load i32, i32* %j, align 4
  %14 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height14 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %14, i32 0, i32 15
  %15 = load i32, i32* %height14, align 4
  %div15 = sdiv i32 %15, 4
  %cmp16 = icmp slt i32 %13, %div15
  br i1 %cmp16, label %for.body18, label %for.end67

for.body18:                                       ; preds = %for.cond13
  %16 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %max_num_references = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %16, i32 0, i32 9
  %17 = load i32, i32* %max_num_references, align 4
  %conv19 = sext i32 %17 to i64
  %call20 = call noalias i8* @calloc(i64 %conv19, i64 8) #5
  %18 = bitcast i8* %call20 to i32***
  %19 = load i32******, i32******* %mv.addr, align 8
  %20 = load i32*****, i32****** %19, align 8
  %21 = load i32, i32* %i, align 4
  %idxprom21 = sext i32 %21 to i64
  %arrayidx22 = getelementptr inbounds i32****, i32***** %20, i64 %idxprom21
  %22 = load i32****, i32***** %arrayidx22, align 8
  %23 = load i32, i32* %j, align 4
  %idxprom23 = sext i32 %23 to i64
  %arrayidx24 = getelementptr inbounds i32***, i32**** %22, i64 %idxprom23
  store i32*** %18, i32**** %arrayidx24, align 8
  %cmp25 = icmp eq i32*** %18, null
  br i1 %cmp25, label %if.then27, label %if.end28

if.then27:                                        ; preds = %for.body18
  call void @no_mem_exit(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %if.end28

if.end28:                                         ; preds = %if.then27, %for.body18
  store i32 0, i32* %k, align 4
  br label %for.cond29

for.cond29:                                       ; preds = %for.inc62, %if.end28
  %24 = load i32, i32* %k, align 4
  %25 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %max_num_references30 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %25, i32 0, i32 9
  %26 = load i32, i32* %max_num_references30, align 4
  %cmp31 = icmp slt i32 %24, %26
  br i1 %cmp31, label %for.body33, label %for.end64

for.body33:                                       ; preds = %for.cond29
  %call34 = call noalias i8* @calloc(i64 9, i64 8) #5
  %27 = bitcast i8* %call34 to i32**
  %28 = load i32******, i32******* %mv.addr, align 8
  %29 = load i32*****, i32****** %28, align 8
  %30 = load i32, i32* %i, align 4
  %idxprom35 = sext i32 %30 to i64
  %arrayidx36 = getelementptr inbounds i32****, i32***** %29, i64 %idxprom35
  %31 = load i32****, i32***** %arrayidx36, align 8
  %32 = load i32, i32* %j, align 4
  %idxprom37 = sext i32 %32 to i64
  %arrayidx38 = getelementptr inbounds i32***, i32**** %31, i64 %idxprom37
  %33 = load i32***, i32**** %arrayidx38, align 8
  %34 = load i32, i32* %k, align 4
  %idxprom39 = sext i32 %34 to i64
  %arrayidx40 = getelementptr inbounds i32**, i32*** %33, i64 %idxprom39
  store i32** %27, i32*** %arrayidx40, align 8
  %cmp41 = icmp eq i32** %27, null
  br i1 %cmp41, label %if.then43, label %if.end44

if.then43:                                        ; preds = %for.body33
  call void @no_mem_exit(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %if.end44

if.end44:                                         ; preds = %if.then43, %for.body33
  store i32 0, i32* %l, align 4
  br label %for.cond45

for.cond45:                                       ; preds = %for.inc, %if.end44
  %35 = load i32, i32* %l, align 4
  %cmp46 = icmp slt i32 %35, 9
  br i1 %cmp46, label %for.body48, label %for.end

for.body48:                                       ; preds = %for.cond45
  %call49 = call noalias i8* @calloc(i64 3, i64 4) #5
  %36 = bitcast i8* %call49 to i32*
  %37 = load i32******, i32******* %mv.addr, align 8
  %38 = load i32*****, i32****** %37, align 8
  %39 = load i32, i32* %i, align 4
  %idxprom50 = sext i32 %39 to i64
  %arrayidx51 = getelementptr inbounds i32****, i32***** %38, i64 %idxprom50
  %40 = load i32****, i32***** %arrayidx51, align 8
  %41 = load i32, i32* %j, align 4
  %idxprom52 = sext i32 %41 to i64
  %arrayidx53 = getelementptr inbounds i32***, i32**** %40, i64 %idxprom52
  %42 = load i32***, i32**** %arrayidx53, align 8
  %43 = load i32, i32* %k, align 4
  %idxprom54 = sext i32 %43 to i64
  %arrayidx55 = getelementptr inbounds i32**, i32*** %42, i64 %idxprom54
  %44 = load i32**, i32*** %arrayidx55, align 8
  %45 = load i32, i32* %l, align 4
  %idxprom56 = sext i32 %45 to i64
  %arrayidx57 = getelementptr inbounds i32*, i32** %44, i64 %idxprom56
  store i32* %36, i32** %arrayidx57, align 8
  %cmp58 = icmp eq i32* %36, null
  br i1 %cmp58, label %if.then60, label %if.end61

if.then60:                                        ; preds = %for.body48
  call void @no_mem_exit(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %if.end61

if.end61:                                         ; preds = %if.then60, %for.body48
  br label %for.inc

for.inc:                                          ; preds = %if.end61
  %46 = load i32, i32* %l, align 4
  %inc = add nsw i32 %46, 1
  store i32 %inc, i32* %l, align 4
  br label %for.cond45

for.end:                                          ; preds = %for.cond45
  br label %for.inc62

for.inc62:                                        ; preds = %for.end
  %47 = load i32, i32* %k, align 4
  %inc63 = add nsw i32 %47, 1
  store i32 %inc63, i32* %k, align 4
  br label %for.cond29

for.end64:                                        ; preds = %for.cond29
  br label %for.inc65

for.inc65:                                        ; preds = %for.end64
  %48 = load i32, i32* %j, align 4
  %inc66 = add nsw i32 %48, 1
  store i32 %inc66, i32* %j, align 4
  br label %for.cond13

for.end67:                                        ; preds = %for.cond13
  br label %for.inc68

for.inc68:                                        ; preds = %for.end67
  %49 = load i32, i32* %i, align 4
  %inc69 = add nsw i32 %49, 1
  store i32 %inc69, i32* %i, align 4
  br label %for.cond

for.end70:                                        ; preds = %for.cond
  %50 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %width71 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %50, i32 0, i32 13
  %51 = load i32, i32* %width71, align 4
  %div72 = sdiv i32 %51, 4
  %52 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height73 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %52, i32 0, i32 15
  %53 = load i32, i32* %height73, align 4
  %mul = mul nsw i32 %div72, %53
  %div74 = sdiv i32 %mul, 4
  %54 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %max_num_references75 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %54, i32 0, i32 9
  %55 = load i32, i32* %max_num_references75, align 4
  %mul76 = mul nsw i32 %div74, %55
  %mul77 = mul nsw i32 %mul76, 9
  %mul78 = mul nsw i32 %mul77, 3
  %conv79 = sext i32 %mul78 to i64
  %mul80 = mul i64 %conv79, 4
  %conv81 = trunc i64 %mul80 to i32
  %56 = load i32, i32* %canary
  %57 = icmp eq i32 %56, 1872390750
  br i1 %57, label %58, label %func_exit

58:                                               ; preds = %for.end70, %func_exit
  ret i32 %conv81

func_exit:                                        ; preds = %for.end70
  call void @detect_breach()
  br label %58
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @FastIntegerPelBlockMotionSearch.43(i16** %orig_pic, i16 signext %ref, i32 %list, i32 %pic_pix_x, i32 %pic_pix_y, i32 %blocktype, i16 signext %pred_mv_x, i16 signext %pred_mv_y, i16* %mv_x, i16* %mv_y, i32 %search_range, i32 %min_mcost, double %lambda) #0 {
entry:
  %center_x = alloca i32, align 4
  %iYMinNow = alloca i32, align 4
  %pred_y = alloca i32, align 4
  %iXMinNow = alloca i32, align 4
  %mv_y.addr = alloca i16*, align 8
  %lambda.addr = alloca double, align 8
  %pred_mv_x.addr = alloca i16, align 2
  %blocksize_y = alloca i32, align 4
  %cand_y = alloca i32, align 4
  %m = alloca i32, align 4
  %pic_pix_x.addr = alloca i32, align 4
  %betaThird = alloca float, align 4
  %mvshift = alloca i32, align 4
  %i = alloca i32, align 4
  %blocksize_x4 = alloca i32, align 4
  %best_x = alloca i32, align 4
  %blocksize_x = alloca i32, align 4
  %height = alloca i32, align 4
  %N_Bframe = alloca i32, align 4
  %mcost = alloca i32, align 4
  %pos = alloca i32, align 4
  %cand_x = alloca i32, align 4
  %ref_pic = alloca i16*, align 8
  %best_y = alloca i32, align 4
  %pic_pix_y.addr = alloca i32, align 4
  %orig_pic.addr = alloca i16**, align 8
  %search_step = alloca i32, align 4
  %search_range.addr = alloca i32, align 4
  %canary = alloca i32
  store i32 155878914, i32* %canary
  %pred_mv_y.addr = alloca i16, align 2
  %lambda_factor = alloca i32, align 4
  %betaSec = alloca float, align 4
  %iSADLayer = alloca i32, align 4
  %pred_x = alloca i32, align 4
  %list_offset = alloca i32, align 4
  %list.addr = alloca i32, align 4
  %min_mcost.addr = alloca i32, align 4
  %get_ref_line = alloca i16* (i32, i16*, i32, i32, i32, i32)*, align 8
  %blocktype.addr = alloca i32, align 4
  %ref.addr = alloca i16, align 2
  %iAbort = alloca i32, align 4
  %center_y = alloca i32, align 4
  %mv_x.addr = alloca i16*, align 8
  store i16** %orig_pic, i16*** %orig_pic.addr, align 8
  store i16 %ref, i16* %ref.addr, align 2
  store i32 %list, i32* %list.addr, align 4
  store i32 %pic_pix_x, i32* %pic_pix_x.addr, align 4
  store i32 %pic_pix_y, i32* %pic_pix_y.addr, align 4
  store i32 %blocktype, i32* %blocktype.addr, align 4
  store i16 %pred_mv_x, i16* %pred_mv_x.addr, align 2
  store i16 %pred_mv_y, i16* %pred_mv_y.addr, align 2
  store i16* %mv_x, i16** %mv_x.addr, align 8
  store i16* %mv_y, i16** %mv_y.addr, align 8
  store i32 %search_range, i32* %search_range.addr, align 4
  store i32 %min_mcost, i32* %min_mcost.addr, align 4
  store double %lambda, double* %lambda.addr, align 8
  %0 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %MbaffFrameFlag = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %0, i32 0, i32 90
  %1 = load i32, i32* %MbaffFrameFlag, align 8
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %mb_data = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %2, i32 0, i32 51
  %3 = load %struct.macroblock*, %struct.macroblock** %mb_data, align 8
  %4 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %current_mb_nr = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %4, i32 0, i32 3
  %5 = load i32, i32* %current_mb_nr, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 %idxprom
  %mb_field = getelementptr inbounds %struct.macroblock, %struct.macroblock* %arrayidx, i32 0, i32 22
  %6 = load i32, i32* %mb_field, align 4
  %tobool1 = icmp ne i32 %6, 0
  br i1 %tobool1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %7 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %current_mb_nr2 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %7, i32 0, i32 3
  %8 = load i32, i32* %current_mb_nr2, align 4
  %rem = srem i32 %8, 2
  %tobool3 = icmp ne i32 %rem, 0
  %9 = zext i1 %tobool3 to i64
  %cond = select i1 %tobool3, i32 4, i32 2
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond4 = phi i32 [ %cond, %cond.true ], [ 0, %cond.false ]
  store i32 %cond4, i32* %list_offset, align 4
  %10 = load i32, i32* %list.addr, align 4
  %11 = load i32, i32* %list_offset, align 4
  %add = add nsw i32 %10, %11
  %idxprom5 = sext i32 %add to i64
  %arrayidx6 = getelementptr inbounds [6 x %struct.storable_picture**], [6 x %struct.storable_picture**]* @listX, i64 0, i64 %idxprom5
  %12 = load %struct.storable_picture**, %struct.storable_picture*** %arrayidx6, align 8
  %13 = load i16, i16* %ref.addr, align 2
  %idxprom7 = sext i16 %13 to i64
  %arrayidx8 = getelementptr inbounds %struct.storable_picture*, %struct.storable_picture** %12, i64 %idxprom7
  %14 = load %struct.storable_picture*, %struct.storable_picture** %arrayidx8, align 8
  %imgY_11 = getelementptr inbounds %struct.storable_picture, %struct.storable_picture* %14, i32 0, i32 26
  %15 = load i16*, i16** %imgY_11, align 8
  store i16* %15, i16** %ref_pic, align 8
  %16 = load double, double* %lambda.addr, align 8
  %mul = fmul double 6.553600e+04, %16
  %add9 = fadd double %mul, 5.000000e-01
  %conv = fptosi double %add9 to i32
  store i32 %conv, i32* %lambda_factor, align 4
  store i32 2, i32* %mvshift, align 4
  %17 = load %struct.InputParameters*, %struct.InputParameters** @input, align 8
  %blc_size = getelementptr inbounds %struct.InputParameters, %struct.InputParameters* %17, i32 0, i32 20
  %18 = load i32, i32* %blocktype.addr, align 4
  %idxprom10 = sext i32 %18 to i64
  %arrayidx11 = getelementptr inbounds [8 x [2 x i32]], [8 x [2 x i32]]* %blc_size, i64 0, i64 %idxprom10
  %arrayidx12 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx11, i64 0, i64 1
  %19 = load i32, i32* %arrayidx12, align 4
  store i32 %19, i32* %blocksize_y, align 4
  %20 = load %struct.InputParameters*, %struct.InputParameters** @input, align 8
  %blc_size13 = getelementptr inbounds %struct.InputParameters, %struct.InputParameters* %20, i32 0, i32 20
  %21 = load i32, i32* %blocktype.addr, align 4
  %idxprom14 = sext i32 %21 to i64
  %arrayidx15 = getelementptr inbounds [8 x [2 x i32]], [8 x [2 x i32]]* %blc_size13, i64 0, i64 %idxprom14
  %arrayidx16 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx15, i64 0, i64 0
  %22 = load i32, i32* %arrayidx16, align 8
  store i32 %22, i32* %blocksize_x, align 4
  %23 = load i32, i32* %blocksize_x, align 4
  %shr = ashr i32 %23, 2
  store i32 %shr, i32* %blocksize_x4, align 4
  %24 = load i32, i32* %pic_pix_x.addr, align 4
  %25 = load i32, i32* %mvshift, align 4
  %shl = shl i32 %24, %25
  %26 = load i16, i16* %pred_mv_x.addr, align 2
  %conv17 = sext i16 %26 to i32
  %add18 = add nsw i32 %shl, %conv17
  store i32 %add18, i32* %pred_x, align 4
  %27 = load i32, i32* %pic_pix_y.addr, align 4
  %28 = load i32, i32* %mvshift, align 4
  %shl19 = shl i32 %27, %28
  %29 = load i16, i16* %pred_mv_y.addr, align 2
  %conv20 = sext i16 %29 to i32
  %add21 = add nsw i32 %shl19, %conv20
  store i32 %add21, i32* %pred_y, align 4
  %30 = load i32, i32* %pic_pix_x.addr, align 4
  %31 = load i16*, i16** %mv_x.addr, align 8
  %32 = load i16, i16* %31, align 2
  %conv22 = sext i16 %32 to i32
  %add23 = add nsw i32 %30, %conv22
  store i32 %add23, i32* %center_x, align 4
  %33 = load i32, i32* %pic_pix_y.addr, align 4
  %34 = load i16*, i16** %mv_y.addr, align 8
  %35 = load i16, i16* %34, align 2
  %conv24 = sext i16 %35 to i32
  %add25 = add nsw i32 %33, %conv24
  store i32 %add25, i32* %center_y, align 4
  store i32 0, i32* %best_x, align 4
  store i32 0, i32* %best_y, align 4
  %36 = load %struct.InputParameters*, %struct.InputParameters** @input, align 8
  %successive_Bframe = getelementptr inbounds %struct.InputParameters, %struct.InputParameters* %36, i32 0, i32 34
  %37 = load i32, i32* %successive_Bframe, align 4
  store i32 %37, i32* %N_Bframe, align 4
  %38 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %MbaffFrameFlag26 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %38, i32 0, i32 90
  %39 = load i32, i32* %MbaffFrameFlag26, align 8
  %tobool27 = icmp ne i32 %39, 0
  br i1 %tobool27, label %land.lhs.true28, label %cond.false37

land.lhs.true28:                                  ; preds = %cond.end
  %40 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %mb_data29 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %40, i32 0, i32 51
  %41 = load %struct.macroblock*, %struct.macroblock** %mb_data29, align 8
  %42 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %current_mb_nr30 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %42, i32 0, i32 3
  %43 = load i32, i32* %current_mb_nr30, align 4
  %idxprom31 = sext i32 %43 to i64
  %arrayidx32 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %41, i64 %idxprom31
  %mb_field33 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %arrayidx32, i32 0, i32 22
  %44 = load i32, i32* %mb_field33, align 4
  %tobool34 = icmp ne i32 %44, 0
  br i1 %tobool34, label %cond.true35, label %cond.false37

cond.true35:                                      ; preds = %land.lhs.true28
  %45 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height36 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %45, i32 0, i32 15
  %46 = load i32, i32* %height36, align 4
  %div = sdiv i32 %46, 2
  br label %cond.end39

cond.false37:                                     ; preds = %land.lhs.true28, %cond.end
  %47 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height38 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %47, i32 0, i32 15
  %48 = load i32, i32* %height38, align 4
  br label %cond.end39

cond.end39:                                       ; preds = %cond.false37, %cond.true35
  %cond40 = phi i32 [ %div, %cond.true35 ], [ %48, %cond.false37 ]
  store i32 %cond40, i32* %height, align 4
  %49 = load i32, i32* %center_x, align 4
  %50 = load i32, i32* %search_range.addr, align 4
  %cmp = icmp sgt i32 %49, %50
  br i1 %cmp, label %land.lhs.true42, label %if.else

land.lhs.true42:                                  ; preds = %cond.end39
  %51 = load i32, i32* %center_x, align 4
  %52 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %width = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %52, i32 0, i32 13
  %53 = load i32, i32* %width, align 4
  %sub = sub nsw i32 %53, 1
  %54 = load i32, i32* %search_range.addr, align 4
  %sub43 = sub nsw i32 %sub, %54
  %55 = load i32, i32* %blocksize_x, align 4
  %sub44 = sub nsw i32 %sub43, %55
  %cmp45 = icmp slt i32 %51, %sub44
  br i1 %cmp45, label %land.lhs.true47, label %if.else

land.lhs.true47:                                  ; preds = %land.lhs.true42
  %56 = load i32, i32* %center_y, align 4
  %57 = load i32, i32* %search_range.addr, align 4
  %cmp48 = icmp sgt i32 %56, %57
  br i1 %cmp48, label %land.lhs.true50, label %if.else

land.lhs.true50:                                  ; preds = %land.lhs.true47
  %58 = load i32, i32* %center_y, align 4
  %59 = load i32, i32* %height, align 4
  %sub51 = sub nsw i32 %59, 1
  %60 = load i32, i32* %search_range.addr, align 4
  %sub52 = sub nsw i32 %sub51, %60
  %61 = load i32, i32* %blocksize_y, align 4
  %sub53 = sub nsw i32 %sub52, %61
  %cmp54 = icmp slt i32 %58, %sub53
  br i1 %cmp54, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true50
  store i16* (i32, i16*, i32, i32, i32, i32)* @FastLineX, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  br label %if.end

if.else:                                          ; preds = %land.lhs.true50, %land.lhs.true47, %land.lhs.true42, %cond.end39
  store i16* (i32, i16*, i32, i32, i32, i32)* @UMVLineX, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %62 = load i32**, i32*** @McostState, align 8
  %arrayidx56 = getelementptr inbounds i32*, i32** %62, i64 0
  %63 = load i32*, i32** %arrayidx56, align 8
  %64 = bitcast i32* %63 to i8*
  %65 = load i32, i32* %search_range.addr, align 4
  %mul57 = mul nsw i32 2, %65
  %add58 = add nsw i32 %mul57, 1
  %66 = load i32, i32* %search_range.addr, align 4
  %mul59 = mul nsw i32 2, %66
  %add60 = add nsw i32 %mul59, 1
  %mul61 = mul nsw i32 %add58, %add60
  %mul62 = mul nsw i32 %mul61, 4
  %conv63 = sext i32 %mul62 to i64
  call void @llvm.memset.p0i8.i64(i8* align 4 %64, i8 0, i64 %conv63, i1 false)
  %67 = load i16, i16* %ref.addr, align 2
  %conv64 = sext i16 %67 to i32
  %cmp65 = icmp sgt i32 %conv64, 0
  br i1 %cmp65, label %if.then67, label %if.else89

if.then67:                                        ; preds = %if.end
  %68 = load i32, i32* @pred_SAD_ref, align 4
  %cmp68 = icmp ne i32 %68, 0
  br i1 %cmp68, label %if.then70, label %if.else87

if.then70:                                        ; preds = %if.then67
  %69 = load i32, i32* %blocktype.addr, align 4
  %idxprom71 = sext i32 %69 to i64
  %arrayidx72 = getelementptr inbounds [8 x float], [8 x float]* @Bsize, i64 0, i64 %idxprom71
  %70 = load float, float* %arrayidx72, align 4
  %71 = load i32, i32* @pred_SAD_ref, align 4
  %72 = load i32, i32* @pred_SAD_ref, align 4
  %mul73 = mul nsw i32 %71, %72
  %conv74 = sitofp i32 %mul73 to float
  %div75 = fdiv float %70, %conv74
  %73 = load i32, i32* %blocktype.addr, align 4
  %idxprom76 = sext i32 %73 to i64
  %arrayidx77 = getelementptr inbounds [8 x float], [8 x float]* @AlphaSec, i64 0, i64 %idxprom76
  %74 = load float, float* %arrayidx77, align 4
  %sub78 = fsub float %div75, %74
  store float %sub78, float* %betaSec, align 4
  %75 = load i32, i32* %blocktype.addr, align 4
  %idxprom79 = sext i32 %75 to i64
  %arrayidx80 = getelementptr inbounds [8 x float], [8 x float]* @Bsize, i64 0, i64 %idxprom79
  %76 = load float, float* %arrayidx80, align 4
  %77 = load i32, i32* @pred_SAD_ref, align 4
  %78 = load i32, i32* @pred_SAD_ref, align 4
  %mul81 = mul nsw i32 %77, %78
  %conv82 = sitofp i32 %mul81 to float
  %div83 = fdiv float %76, %conv82
  %79 = load i32, i32* %blocktype.addr, align 4
  %idxprom84 = sext i32 %79 to i64
  %arrayidx85 = getelementptr inbounds [8 x float], [8 x float]* @AlphaThird, i64 0, i64 %idxprom84
  %80 = load float, float* %arrayidx85, align 4
  %sub86 = fsub float %div83, %80
  store float %sub86, float* %betaThird, align 4
  br label %if.end88

if.else87:                                        ; preds = %if.then67
  store float 0.000000e+00, float* %betaSec, align 4
  store float 0.000000e+00, float* %betaThird, align 4
  br label %if.end88

if.end88:                                         ; preds = %if.else87, %if.then70
  br label %if.end137

if.else89:                                        ; preds = %if.end
  %81 = load i32, i32* %blocktype.addr, align 4
  %cmp90 = icmp eq i32 %81, 1
  br i1 %cmp90, label %if.then92, label %if.else114

if.then92:                                        ; preds = %if.else89
  %82 = load i32, i32* @pred_SAD_space, align 4
  %cmp93 = icmp ne i32 %82, 0
  br i1 %cmp93, label %if.then95, label %if.else112

if.then95:                                        ; preds = %if.then92
  %83 = load i32, i32* %blocktype.addr, align 4
  %idxprom96 = sext i32 %83 to i64
  %arrayidx97 = getelementptr inbounds [8 x float], [8 x float]* @Bsize, i64 0, i64 %idxprom96
  %84 = load float, float* %arrayidx97, align 4
  %85 = load i32, i32* @pred_SAD_space, align 4
  %86 = load i32, i32* @pred_SAD_space, align 4
  %mul98 = mul nsw i32 %85, %86
  %conv99 = sitofp i32 %mul98 to float
  %div100 = fdiv float %84, %conv99
  %87 = load i32, i32* %blocktype.addr, align 4
  %idxprom101 = sext i32 %87 to i64
  %arrayidx102 = getelementptr inbounds [8 x float], [8 x float]* @AlphaSec, i64 0, i64 %idxprom101
  %88 = load float, float* %arrayidx102, align 4
  %sub103 = fsub float %div100, %88
  store float %sub103, float* %betaSec, align 4
  %89 = load i32, i32* %blocktype.addr, align 4
  %idxprom104 = sext i32 %89 to i64
  %arrayidx105 = getelementptr inbounds [8 x float], [8 x float]* @Bsize, i64 0, i64 %idxprom104
  %90 = load float, float* %arrayidx105, align 4
  %91 = load i32, i32* @pred_SAD_space, align 4
  %92 = load i32, i32* @pred_SAD_space, align 4
  %mul106 = mul nsw i32 %91, %92
  %conv107 = sitofp i32 %mul106 to float
  %div108 = fdiv float %90, %conv107
  %93 = load i32, i32* %blocktype.addr, align 4
  %idxprom109 = sext i32 %93 to i64
  %arrayidx110 = getelementptr inbounds [8 x float], [8 x float]* @AlphaThird, i64 0, i64 %idxprom109
  %94 = load float, float* %arrayidx110, align 4
  %sub111 = fsub float %div108, %94
  store float %sub111, float* %betaThird, align 4
  br label %if.end113

if.else112:                                       ; preds = %if.then92
  store float 0.000000e+00, float* %betaSec, align 4
  store float 0.000000e+00, float* %betaThird, align 4
  br label %if.end113

if.end113:                                        ; preds = %if.else112, %if.then95
  br label %if.end136

if.else114:                                       ; preds = %if.else89
  %95 = load i32, i32* @pred_SAD_uplayer, align 4
  %cmp115 = icmp ne i32 %95, 0
  br i1 %cmp115, label %if.then117, label %if.else134

if.then117:                                       ; preds = %if.else114
  %96 = load i32, i32* %blocktype.addr, align 4
  %idxprom118 = sext i32 %96 to i64
  %arrayidx119 = getelementptr inbounds [8 x float], [8 x float]* @Bsize, i64 0, i64 %idxprom118
  %97 = load float, float* %arrayidx119, align 4
  %98 = load i32, i32* @pred_SAD_uplayer, align 4
  %99 = load i32, i32* @pred_SAD_uplayer, align 4
  %mul120 = mul nsw i32 %98, %99
  %conv121 = sitofp i32 %mul120 to float
  %div122 = fdiv float %97, %conv121
  %100 = load i32, i32* %blocktype.addr, align 4
  %idxprom123 = sext i32 %100 to i64
  %arrayidx124 = getelementptr inbounds [8 x float], [8 x float]* @AlphaSec, i64 0, i64 %idxprom123
  %101 = load float, float* %arrayidx124, align 4
  %sub125 = fsub float %div122, %101
  store float %sub125, float* %betaSec, align 4
  %102 = load i32, i32* %blocktype.addr, align 4
  %idxprom126 = sext i32 %102 to i64
  %arrayidx127 = getelementptr inbounds [8 x float], [8 x float]* @Bsize, i64 0, i64 %idxprom126
  %103 = load float, float* %arrayidx127, align 4
  %104 = load i32, i32* @pred_SAD_uplayer, align 4
  %105 = load i32, i32* @pred_SAD_uplayer, align 4
  %mul128 = mul nsw i32 %104, %105
  %conv129 = sitofp i32 %mul128 to float
  %div130 = fdiv float %103, %conv129
  %106 = load i32, i32* %blocktype.addr, align 4
  %idxprom131 = sext i32 %106 to i64
  %arrayidx132 = getelementptr inbounds [8 x float], [8 x float]* @AlphaThird, i64 0, i64 %idxprom131
  %107 = load float, float* %arrayidx132, align 4
  %sub133 = fsub float %div130, %107
  store float %sub133, float* %betaThird, align 4
  br label %if.end135

if.else134:                                       ; preds = %if.else114
  store float 0.000000e+00, float* %betaSec, align 4
  store float 0.000000e+00, float* %betaThird, align 4
  br label %if.end135

if.end135:                                        ; preds = %if.else134, %if.then117
  br label %if.end136

if.end136:                                        ; preds = %if.end135, %if.end113
  br label %if.end137

if.end137:                                        ; preds = %if.end136, %if.end88
  %108 = load i32, i32* %center_x, align 4
  store i32 %108, i32* %cand_x, align 4
  %109 = load i32, i32* %center_y, align 4
  store i32 %109, i32* %cand_y, align 4
  %110 = load i32, i32* %lambda_factor, align 4
  %111 = load i32*, i32** @mvbits, align 8
  %112 = load i32, i32* %cand_x, align 4
  %113 = load i32, i32* %mvshift, align 4
  %shl138 = shl i32 %112, %113
  %114 = load i32, i32* %pred_x, align 4
  %sub139 = sub nsw i32 %shl138, %114
  %idxprom140 = sext i32 %sub139 to i64
  %arrayidx141 = getelementptr inbounds i32, i32* %111, i64 %idxprom140
  %115 = load i32, i32* %arrayidx141, align 4
  %116 = load i32*, i32** @mvbits, align 8
  %117 = load i32, i32* %cand_y, align 4
  %118 = load i32, i32* %mvshift, align 4
  %shl142 = shl i32 %117, %118
  %119 = load i32, i32* %pred_y, align 4
  %sub143 = sub nsw i32 %shl142, %119
  %idxprom144 = sext i32 %sub143 to i64
  %arrayidx145 = getelementptr inbounds i32, i32* %116, i64 %idxprom144
  %120 = load i32, i32* %arrayidx145, align 4
  %add146 = add nsw i32 %115, %120
  %mul147 = mul nsw i32 %110, %add146
  %shr148 = ashr i32 %mul147, 16
  store i32 %shr148, i32* %mcost, align 4
  %121 = load i16*, i16** %ref_pic, align 8
  %122 = load i16**, i16*** %orig_pic.addr, align 8
  %123 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %124 = load i32, i32* %blocksize_y, align 4
  %125 = load i32, i32* %blocksize_x, align 4
  %126 = load i32, i32* %blocksize_x4, align 4
  %127 = load i32, i32* %mcost, align 4
  %128 = load i32, i32* %min_mcost.addr, align 4
  %129 = load i32, i32* %cand_x, align 4
  %130 = load i32, i32* %cand_y, align 4
  %call = call i32 @PartCalMad(i16* %121, i16** %122, i16* (i32, i16*, i32, i32, i32, i32)* %123, i32 %124, i32 %125, i32 %126, i32 %127, i32 %128, i32 %129, i32 %130)
  store i32 %call, i32* %mcost, align 4
  %131 = load i32, i32* %mcost, align 4
  %132 = load i32**, i32*** @McostState, align 8
  %133 = load i32, i32* %search_range.addr, align 4
  %idxprom149 = sext i32 %133 to i64
  %arrayidx150 = getelementptr inbounds i32*, i32** %132, i64 %idxprom149
  %134 = load i32*, i32** %arrayidx150, align 8
  %135 = load i32, i32* %search_range.addr, align 4
  %idxprom151 = sext i32 %135 to i64
  %arrayidx152 = getelementptr inbounds i32, i32* %134, i64 %idxprom151
  store i32 %131, i32* %arrayidx152, align 4
  %136 = load i32, i32* %mcost, align 4
  %137 = load i32, i32* %min_mcost.addr, align 4
  %cmp153 = icmp slt i32 %136, %137
  br i1 %cmp153, label %if.then155, label %if.end156

if.then155:                                       ; preds = %if.end137
  %138 = load i32, i32* %mcost, align 4
  store i32 %138, i32* %min_mcost.addr, align 4
  %139 = load i32, i32* %cand_x, align 4
  store i32 %139, i32* %best_x, align 4
  %140 = load i32, i32* %cand_y, align 4
  store i32 %140, i32* %best_y, align 4
  br label %if.end156

if.end156:                                        ; preds = %if.then155, %if.end137
  %141 = load i32, i32* %best_x, align 4
  store i32 %141, i32* %iXMinNow, align 4
  %142 = load i32, i32* %best_y, align 4
  store i32 %142, i32* %iYMinNow, align 4
  store i32 0, i32* %m, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end156
  %143 = load i32, i32* %m, align 4
  %cmp157 = icmp slt i32 %143, 4
  br i1 %cmp157, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %144 = load i32, i32* %iXMinNow, align 4
  %145 = load i32, i32* %m, align 4
  %idxprom159 = sext i32 %145 to i64
  %arrayidx160 = getelementptr inbounds [4 x i32], [4 x i32]* @FastIntegerPelBlockMotionSearch.Diamond_x, i64 0, i64 %idxprom159
  %146 = load i32, i32* %arrayidx160, align 4
  %add161 = add nsw i32 %144, %146
  store i32 %add161, i32* %cand_x, align 4
  %147 = load i32, i32* %iYMinNow, align 4
  %148 = load i32, i32* %m, align 4
  %idxprom162 = sext i32 %148 to i64
  %arrayidx163 = getelementptr inbounds [4 x i32], [4 x i32]* @FastIntegerPelBlockMotionSearch.Diamond_y, i64 0, i64 %idxprom162
  %149 = load i32, i32* %arrayidx163, align 4
  %add164 = add nsw i32 %147, %149
  store i32 %add164, i32* %cand_y, align 4
  %150 = load i32, i32* %cand_x, align 4
  %151 = load i32, i32* %center_x, align 4
  %sub165 = sub nsw i32 %150, %151
  %call166 = call i32 @abs(i32 %sub165) #6
  %152 = load i32, i32* %search_range.addr, align 4
  %cmp167 = icmp sle i32 %call166, %152
  br i1 %cmp167, label %land.lhs.true169, label %if.end210

land.lhs.true169:                                 ; preds = %for.body
  %153 = load i32, i32* %cand_y, align 4
  %154 = load i32, i32* %center_y, align 4
  %sub170 = sub nsw i32 %153, %154
  %call171 = call i32 @abs(i32 %sub170) #6
  %155 = load i32, i32* %search_range.addr, align 4
  %cmp172 = icmp sle i32 %call171, %155
  br i1 %cmp172, label %if.then174, label %if.end210

if.then174:                                       ; preds = %land.lhs.true169
  %156 = load i32**, i32*** @McostState, align 8
  %157 = load i32, i32* %cand_y, align 4
  %158 = load i32, i32* %center_y, align 4
  %sub175 = sub nsw i32 %157, %158
  %159 = load i32, i32* %search_range.addr, align 4
  %add176 = add nsw i32 %sub175, %159
  %idxprom177 = sext i32 %add176 to i64
  %arrayidx178 = getelementptr inbounds i32*, i32** %156, i64 %idxprom177
  %160 = load i32*, i32** %arrayidx178, align 8
  %161 = load i32, i32* %cand_x, align 4
  %162 = load i32, i32* %center_x, align 4
  %sub179 = sub nsw i32 %161, %162
  %163 = load i32, i32* %search_range.addr, align 4
  %add180 = add nsw i32 %sub179, %163
  %idxprom181 = sext i32 %add180 to i64
  %arrayidx182 = getelementptr inbounds i32, i32* %160, i64 %idxprom181
  %164 = load i32, i32* %arrayidx182, align 4
  %tobool183 = icmp ne i32 %164, 0
  br i1 %tobool183, label %if.end209, label %if.then184

if.then184:                                       ; preds = %if.then174
  %165 = load i32, i32* %lambda_factor, align 4
  %166 = load i32*, i32** @mvbits, align 8
  %167 = load i32, i32* %cand_x, align 4
  %168 = load i32, i32* %mvshift, align 4
  %shl185 = shl i32 %167, %168
  %169 = load i32, i32* %pred_x, align 4
  %sub186 = sub nsw i32 %shl185, %169
  %idxprom187 = sext i32 %sub186 to i64
  %arrayidx188 = getelementptr inbounds i32, i32* %166, i64 %idxprom187
  %170 = load i32, i32* %arrayidx188, align 4
  %171 = load i32*, i32** @mvbits, align 8
  %172 = load i32, i32* %cand_y, align 4
  %173 = load i32, i32* %mvshift, align 4
  %shl189 = shl i32 %172, %173
  %174 = load i32, i32* %pred_y, align 4
  %sub190 = sub nsw i32 %shl189, %174
  %idxprom191 = sext i32 %sub190 to i64
  %arrayidx192 = getelementptr inbounds i32, i32* %171, i64 %idxprom191
  %175 = load i32, i32* %arrayidx192, align 4
  %add193 = add nsw i32 %170, %175
  %mul194 = mul nsw i32 %165, %add193
  %shr195 = ashr i32 %mul194, 16
  store i32 %shr195, i32* %mcost, align 4
  %176 = load i16*, i16** %ref_pic, align 8
  %177 = load i16**, i16*** %orig_pic.addr, align 8
  %178 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %179 = load i32, i32* %blocksize_y, align 4
  %180 = load i32, i32* %blocksize_x, align 4
  %181 = load i32, i32* %blocksize_x4, align 4
  %182 = load i32, i32* %mcost, align 4
  %183 = load i32, i32* %min_mcost.addr, align 4
  %184 = load i32, i32* %cand_x, align 4
  %185 = load i32, i32* %cand_y, align 4
  %call196 = call i32 @PartCalMad(i16* %176, i16** %177, i16* (i32, i16*, i32, i32, i32, i32)* %178, i32 %179, i32 %180, i32 %181, i32 %182, i32 %183, i32 %184, i32 %185)
  store i32 %call196, i32* %mcost, align 4
  %186 = load i32, i32* %mcost, align 4
  %187 = load i32**, i32*** @McostState, align 8
  %188 = load i32, i32* %cand_y, align 4
  %189 = load i32, i32* %center_y, align 4
  %sub197 = sub nsw i32 %188, %189
  %190 = load i32, i32* %search_range.addr, align 4
  %add198 = add nsw i32 %sub197, %190
  %idxprom199 = sext i32 %add198 to i64
  %arrayidx200 = getelementptr inbounds i32*, i32** %187, i64 %idxprom199
  %191 = load i32*, i32** %arrayidx200, align 8
  %192 = load i32, i32* %cand_x, align 4
  %193 = load i32, i32* %center_x, align 4
  %sub201 = sub nsw i32 %192, %193
  %194 = load i32, i32* %search_range.addr, align 4
  %add202 = add nsw i32 %sub201, %194
  %idxprom203 = sext i32 %add202 to i64
  %arrayidx204 = getelementptr inbounds i32, i32* %191, i64 %idxprom203
  store i32 %186, i32* %arrayidx204, align 4
  %195 = load i32, i32* %mcost, align 4
  %196 = load i32, i32* %min_mcost.addr, align 4
  %cmp205 = icmp slt i32 %195, %196
  br i1 %cmp205, label %if.then207, label %if.end208

if.then207:                                       ; preds = %if.then184
  %197 = load i32, i32* %cand_x, align 4
  store i32 %197, i32* %best_x, align 4
  %198 = load i32, i32* %cand_y, align 4
  store i32 %198, i32* %best_y, align 4
  %199 = load i32, i32* %mcost, align 4
  store i32 %199, i32* %min_mcost.addr, align 4
  br label %if.end208

if.end208:                                        ; preds = %if.then207, %if.then184
  br label %if.end209

if.end209:                                        ; preds = %if.end208, %if.then174
  br label %if.end210

if.end210:                                        ; preds = %if.end209, %land.lhs.true169, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end210
  %200 = load i32, i32* %m, align 4
  %inc = add nsw i32 %200, 1
  store i32 %inc, i32* %m, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %201 = load i32, i32* %center_x, align 4
  %202 = load i32, i32* %pic_pix_x.addr, align 4
  %cmp211 = icmp ne i32 %201, %202
  br i1 %cmp211, label %if.then215, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.end
  %203 = load i32, i32* %center_y, align 4
  %204 = load i32, i32* %pic_pix_y.addr, align 4
  %cmp213 = icmp ne i32 %203, %204
  br i1 %cmp213, label %if.then215, label %if.end321

if.then215:                                       ; preds = %lor.lhs.false, %for.end
  %205 = load i32, i32* %pic_pix_x.addr, align 4
  store i32 %205, i32* %cand_x, align 4
  %206 = load i32, i32* %pic_pix_y.addr, align 4
  store i32 %206, i32* %cand_y, align 4
  %207 = load i32, i32* %cand_x, align 4
  %208 = load i32, i32* %center_x, align 4
  %sub216 = sub nsw i32 %207, %208
  %call217 = call i32 @abs(i32 %sub216) #6
  %209 = load i32, i32* %search_range.addr, align 4
  %cmp218 = icmp sle i32 %call217, %209
  br i1 %cmp218, label %land.lhs.true220, label %if.end261

land.lhs.true220:                                 ; preds = %if.then215
  %210 = load i32, i32* %cand_y, align 4
  %211 = load i32, i32* %center_y, align 4
  %sub221 = sub nsw i32 %210, %211
  %call222 = call i32 @abs(i32 %sub221) #6
  %212 = load i32, i32* %search_range.addr, align 4
  %cmp223 = icmp sle i32 %call222, %212
  br i1 %cmp223, label %if.then225, label %if.end261

if.then225:                                       ; preds = %land.lhs.true220
  %213 = load i32**, i32*** @McostState, align 8
  %214 = load i32, i32* %cand_y, align 4
  %215 = load i32, i32* %center_y, align 4
  %sub226 = sub nsw i32 %214, %215
  %216 = load i32, i32* %search_range.addr, align 4
  %add227 = add nsw i32 %sub226, %216
  %idxprom228 = sext i32 %add227 to i64
  %arrayidx229 = getelementptr inbounds i32*, i32** %213, i64 %idxprom228
  %217 = load i32*, i32** %arrayidx229, align 8
  %218 = load i32, i32* %cand_x, align 4
  %219 = load i32, i32* %center_x, align 4
  %sub230 = sub nsw i32 %218, %219
  %220 = load i32, i32* %search_range.addr, align 4
  %add231 = add nsw i32 %sub230, %220
  %idxprom232 = sext i32 %add231 to i64
  %arrayidx233 = getelementptr inbounds i32, i32* %217, i64 %idxprom232
  %221 = load i32, i32* %arrayidx233, align 4
  %tobool234 = icmp ne i32 %221, 0
  br i1 %tobool234, label %if.end260, label %if.then235

if.then235:                                       ; preds = %if.then225
  %222 = load i32, i32* %lambda_factor, align 4
  %223 = load i32*, i32** @mvbits, align 8
  %224 = load i32, i32* %cand_x, align 4
  %225 = load i32, i32* %mvshift, align 4
  %shl236 = shl i32 %224, %225
  %226 = load i32, i32* %pred_x, align 4
  %sub237 = sub nsw i32 %shl236, %226
  %idxprom238 = sext i32 %sub237 to i64
  %arrayidx239 = getelementptr inbounds i32, i32* %223, i64 %idxprom238
  %227 = load i32, i32* %arrayidx239, align 4
  %228 = load i32*, i32** @mvbits, align 8
  %229 = load i32, i32* %cand_y, align 4
  %230 = load i32, i32* %mvshift, align 4
  %shl240 = shl i32 %229, %230
  %231 = load i32, i32* %pred_y, align 4
  %sub241 = sub nsw i32 %shl240, %231
  %idxprom242 = sext i32 %sub241 to i64
  %arrayidx243 = getelementptr inbounds i32, i32* %228, i64 %idxprom242
  %232 = load i32, i32* %arrayidx243, align 4
  %add244 = add nsw i32 %227, %232
  %mul245 = mul nsw i32 %222, %add244
  %shr246 = ashr i32 %mul245, 16
  store i32 %shr246, i32* %mcost, align 4
  %233 = load i16*, i16** %ref_pic, align 8
  %234 = load i16**, i16*** %orig_pic.addr, align 8
  %235 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %236 = load i32, i32* %blocksize_y, align 4
  %237 = load i32, i32* %blocksize_x, align 4
  %238 = load i32, i32* %blocksize_x4, align 4
  %239 = load i32, i32* %mcost, align 4
  %240 = load i32, i32* %min_mcost.addr, align 4
  %241 = load i32, i32* %cand_x, align 4
  %242 = load i32, i32* %cand_y, align 4
  %call247 = call i32 @PartCalMad(i16* %233, i16** %234, i16* (i32, i16*, i32, i32, i32, i32)* %235, i32 %236, i32 %237, i32 %238, i32 %239, i32 %240, i32 %241, i32 %242)
  store i32 %call247, i32* %mcost, align 4
  %243 = load i32, i32* %mcost, align 4
  %244 = load i32**, i32*** @McostState, align 8
  %245 = load i32, i32* %cand_y, align 4
  %246 = load i32, i32* %center_y, align 4
  %sub248 = sub nsw i32 %245, %246
  %247 = load i32, i32* %search_range.addr, align 4
  %add249 = add nsw i32 %sub248, %247
  %idxprom250 = sext i32 %add249 to i64
  %arrayidx251 = getelementptr inbounds i32*, i32** %244, i64 %idxprom250
  %248 = load i32*, i32** %arrayidx251, align 8
  %249 = load i32, i32* %cand_x, align 4
  %250 = load i32, i32* %center_x, align 4
  %sub252 = sub nsw i32 %249, %250
  %251 = load i32, i32* %search_range.addr, align 4
  %add253 = add nsw i32 %sub252, %251
  %idxprom254 = sext i32 %add253 to i64
  %arrayidx255 = getelementptr inbounds i32, i32* %248, i64 %idxprom254
  store i32 %243, i32* %arrayidx255, align 4
  %252 = load i32, i32* %mcost, align 4
  %253 = load i32, i32* %min_mcost.addr, align 4
  %cmp256 = icmp slt i32 %252, %253
  br i1 %cmp256, label %if.then258, label %if.end259

if.then258:                                       ; preds = %if.then235
  %254 = load i32, i32* %cand_x, align 4
  store i32 %254, i32* %best_x, align 4
  %255 = load i32, i32* %cand_y, align 4
  store i32 %255, i32* %best_y, align 4
  %256 = load i32, i32* %mcost, align 4
  store i32 %256, i32* %min_mcost.addr, align 4
  br label %if.end259

if.end259:                                        ; preds = %if.then258, %if.then235
  br label %if.end260

if.end260:                                        ; preds = %if.end259, %if.then225
  br label %if.end261

if.end261:                                        ; preds = %if.end260, %land.lhs.true220, %if.then215
  %257 = load i32, i32* %best_x, align 4
  store i32 %257, i32* %iXMinNow, align 4
  %258 = load i32, i32* %best_y, align 4
  store i32 %258, i32* %iYMinNow, align 4
  store i32 0, i32* %m, align 4
  br label %for.cond262

for.cond262:                                      ; preds = %for.inc318, %if.end261
  %259 = load i32, i32* %m, align 4
  %cmp263 = icmp slt i32 %259, 4
  br i1 %cmp263, label %for.body265, label %for.end320

for.body265:                                      ; preds = %for.cond262
  %260 = load i32, i32* %iXMinNow, align 4
  %261 = load i32, i32* %m, align 4
  %idxprom266 = sext i32 %261 to i64
  %arrayidx267 = getelementptr inbounds [4 x i32], [4 x i32]* @FastIntegerPelBlockMotionSearch.Diamond_x, i64 0, i64 %idxprom266
  %262 = load i32, i32* %arrayidx267, align 4
  %add268 = add nsw i32 %260, %262
  store i32 %add268, i32* %cand_x, align 4
  %263 = load i32, i32* %iYMinNow, align 4
  %264 = load i32, i32* %m, align 4
  %idxprom269 = sext i32 %264 to i64
  %arrayidx270 = getelementptr inbounds [4 x i32], [4 x i32]* @FastIntegerPelBlockMotionSearch.Diamond_y, i64 0, i64 %idxprom269
  %265 = load i32, i32* %arrayidx270, align 4
  %add271 = add nsw i32 %263, %265
  store i32 %add271, i32* %cand_y, align 4
  %266 = load i32, i32* %cand_x, align 4
  %267 = load i32, i32* %center_x, align 4
  %sub272 = sub nsw i32 %266, %267
  %call273 = call i32 @abs(i32 %sub272) #6
  %268 = load i32, i32* %search_range.addr, align 4
  %cmp274 = icmp sle i32 %call273, %268
  br i1 %cmp274, label %land.lhs.true276, label %if.end317

land.lhs.true276:                                 ; preds = %for.body265
  %269 = load i32, i32* %cand_y, align 4
  %270 = load i32, i32* %center_y, align 4
  %sub277 = sub nsw i32 %269, %270
  %call278 = call i32 @abs(i32 %sub277) #6
  %271 = load i32, i32* %search_range.addr, align 4
  %cmp279 = icmp sle i32 %call278, %271
  br i1 %cmp279, label %if.then281, label %if.end317

if.then281:                                       ; preds = %land.lhs.true276
  %272 = load i32**, i32*** @McostState, align 8
  %273 = load i32, i32* %cand_y, align 4
  %274 = load i32, i32* %center_y, align 4
  %sub282 = sub nsw i32 %273, %274
  %275 = load i32, i32* %search_range.addr, align 4
  %add283 = add nsw i32 %sub282, %275
  %idxprom284 = sext i32 %add283 to i64
  %arrayidx285 = getelementptr inbounds i32*, i32** %272, i64 %idxprom284
  %276 = load i32*, i32** %arrayidx285, align 8
  %277 = load i32, i32* %cand_x, align 4
  %278 = load i32, i32* %center_x, align 4
  %sub286 = sub nsw i32 %277, %278
  %279 = load i32, i32* %search_range.addr, align 4
  %add287 = add nsw i32 %sub286, %279
  %idxprom288 = sext i32 %add287 to i64
  %arrayidx289 = getelementptr inbounds i32, i32* %276, i64 %idxprom288
  %280 = load i32, i32* %arrayidx289, align 4
  %tobool290 = icmp ne i32 %280, 0
  br i1 %tobool290, label %if.end316, label %if.then291

if.then291:                                       ; preds = %if.then281
  %281 = load i32, i32* %lambda_factor, align 4
  %282 = load i32*, i32** @mvbits, align 8
  %283 = load i32, i32* %cand_x, align 4
  %284 = load i32, i32* %mvshift, align 4
  %shl292 = shl i32 %283, %284
  %285 = load i32, i32* %pred_x, align 4
  %sub293 = sub nsw i32 %shl292, %285
  %idxprom294 = sext i32 %sub293 to i64
  %arrayidx295 = getelementptr inbounds i32, i32* %282, i64 %idxprom294
  %286 = load i32, i32* %arrayidx295, align 4
  %287 = load i32*, i32** @mvbits, align 8
  %288 = load i32, i32* %cand_y, align 4
  %289 = load i32, i32* %mvshift, align 4
  %shl296 = shl i32 %288, %289
  %290 = load i32, i32* %pred_y, align 4
  %sub297 = sub nsw i32 %shl296, %290
  %idxprom298 = sext i32 %sub297 to i64
  %arrayidx299 = getelementptr inbounds i32, i32* %287, i64 %idxprom298
  %291 = load i32, i32* %arrayidx299, align 4
  %add300 = add nsw i32 %286, %291
  %mul301 = mul nsw i32 %281, %add300
  %shr302 = ashr i32 %mul301, 16
  store i32 %shr302, i32* %mcost, align 4
  %292 = load i16*, i16** %ref_pic, align 8
  %293 = load i16**, i16*** %orig_pic.addr, align 8
  %294 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %295 = load i32, i32* %blocksize_y, align 4
  %296 = load i32, i32* %blocksize_x, align 4
  %297 = load i32, i32* %blocksize_x4, align 4
  %298 = load i32, i32* %mcost, align 4
  %299 = load i32, i32* %min_mcost.addr, align 4
  %300 = load i32, i32* %cand_x, align 4
  %301 = load i32, i32* %cand_y, align 4
  %call303 = call i32 @PartCalMad(i16* %292, i16** %293, i16* (i32, i16*, i32, i32, i32, i32)* %294, i32 %295, i32 %296, i32 %297, i32 %298, i32 %299, i32 %300, i32 %301)
  store i32 %call303, i32* %mcost, align 4
  %302 = load i32, i32* %mcost, align 4
  %303 = load i32**, i32*** @McostState, align 8
  %304 = load i32, i32* %cand_y, align 4
  %305 = load i32, i32* %center_y, align 4
  %sub304 = sub nsw i32 %304, %305
  %306 = load i32, i32* %search_range.addr, align 4
  %add305 = add nsw i32 %sub304, %306
  %idxprom306 = sext i32 %add305 to i64
  %arrayidx307 = getelementptr inbounds i32*, i32** %303, i64 %idxprom306
  %307 = load i32*, i32** %arrayidx307, align 8
  %308 = load i32, i32* %cand_x, align 4
  %309 = load i32, i32* %center_x, align 4
  %sub308 = sub nsw i32 %308, %309
  %310 = load i32, i32* %search_range.addr, align 4
  %add309 = add nsw i32 %sub308, %310
  %idxprom310 = sext i32 %add309 to i64
  %arrayidx311 = getelementptr inbounds i32, i32* %307, i64 %idxprom310
  store i32 %302, i32* %arrayidx311, align 4
  %311 = load i32, i32* %mcost, align 4
  %312 = load i32, i32* %min_mcost.addr, align 4
  %cmp312 = icmp slt i32 %311, %312
  br i1 %cmp312, label %if.then314, label %if.end315

if.then314:                                       ; preds = %if.then291
  %313 = load i32, i32* %cand_x, align 4
  store i32 %313, i32* %best_x, align 4
  %314 = load i32, i32* %cand_y, align 4
  store i32 %314, i32* %best_y, align 4
  %315 = load i32, i32* %mcost, align 4
  store i32 %315, i32* %min_mcost.addr, align 4
  br label %if.end315

if.end315:                                        ; preds = %if.then314, %if.then291
  br label %if.end316

if.end316:                                        ; preds = %if.end315, %if.then281
  br label %if.end317

if.end317:                                        ; preds = %if.end316, %land.lhs.true276, %for.body265
  br label %for.inc318

for.inc318:                                       ; preds = %if.end317
  %316 = load i32, i32* %m, align 4
  %inc319 = add nsw i32 %316, 1
  store i32 %inc319, i32* %m, align 4
  br label %for.cond262

for.end320:                                       ; preds = %for.cond262
  br label %if.end321

if.end321:                                        ; preds = %for.end320, %lor.lhs.false
  %317 = load i32, i32* %blocktype.addr, align 4
  %cmp322 = icmp sgt i32 %317, 1
  br i1 %cmp322, label %if.then324, label %if.end392

if.then324:                                       ; preds = %if.end321
  %318 = load i32, i32* %pic_pix_x.addr, align 4
  %319 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @pred_MV_uplayer, i64 0, i64 0), align 4
  %div325 = sdiv i32 %319, 4
  %add326 = add nsw i32 %318, %div325
  store i32 %add326, i32* %cand_x, align 4
  %320 = load i32, i32* %pic_pix_y.addr, align 4
  %321 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @pred_MV_uplayer, i64 0, i64 1), align 4
  %div327 = sdiv i32 %321, 4
  %add328 = add nsw i32 %320, %div327
  store i32 %add328, i32* %cand_y, align 4
  %322 = load i32, i32* %cand_x, align 4
  %323 = load i32, i32* %center_x, align 4
  %sub329 = sub nsw i32 %322, %323
  %call330 = call i32 @abs(i32 %sub329) #6
  %324 = load i32, i32* %search_range.addr, align 4
  %cmp331 = icmp sle i32 %call330, %324
  br i1 %cmp331, label %land.lhs.true333, label %if.end374

land.lhs.true333:                                 ; preds = %if.then324
  %325 = load i32, i32* %cand_y, align 4
  %326 = load i32, i32* %center_y, align 4
  %sub334 = sub nsw i32 %325, %326
  %call335 = call i32 @abs(i32 %sub334) #6
  %327 = load i32, i32* %search_range.addr, align 4
  %cmp336 = icmp sle i32 %call335, %327
  br i1 %cmp336, label %if.then338, label %if.end374

if.then338:                                       ; preds = %land.lhs.true333
  %328 = load i32**, i32*** @McostState, align 8
  %329 = load i32, i32* %cand_y, align 4
  %330 = load i32, i32* %center_y, align 4
  %sub339 = sub nsw i32 %329, %330
  %331 = load i32, i32* %search_range.addr, align 4
  %add340 = add nsw i32 %sub339, %331
  %idxprom341 = sext i32 %add340 to i64
  %arrayidx342 = getelementptr inbounds i32*, i32** %328, i64 %idxprom341
  %332 = load i32*, i32** %arrayidx342, align 8
  %333 = load i32, i32* %cand_x, align 4
  %334 = load i32, i32* %center_x, align 4
  %sub343 = sub nsw i32 %333, %334
  %335 = load i32, i32* %search_range.addr, align 4
  %add344 = add nsw i32 %sub343, %335
  %idxprom345 = sext i32 %add344 to i64
  %arrayidx346 = getelementptr inbounds i32, i32* %332, i64 %idxprom345
  %336 = load i32, i32* %arrayidx346, align 4
  %tobool347 = icmp ne i32 %336, 0
  br i1 %tobool347, label %if.end373, label %if.then348

if.then348:                                       ; preds = %if.then338
  %337 = load i32, i32* %lambda_factor, align 4
  %338 = load i32*, i32** @mvbits, align 8
  %339 = load i32, i32* %cand_x, align 4
  %340 = load i32, i32* %mvshift, align 4
  %shl349 = shl i32 %339, %340
  %341 = load i32, i32* %pred_x, align 4
  %sub350 = sub nsw i32 %shl349, %341
  %idxprom351 = sext i32 %sub350 to i64
  %arrayidx352 = getelementptr inbounds i32, i32* %338, i64 %idxprom351
  %342 = load i32, i32* %arrayidx352, align 4
  %343 = load i32*, i32** @mvbits, align 8
  %344 = load i32, i32* %cand_y, align 4
  %345 = load i32, i32* %mvshift, align 4
  %shl353 = shl i32 %344, %345
  %346 = load i32, i32* %pred_y, align 4
  %sub354 = sub nsw i32 %shl353, %346
  %idxprom355 = sext i32 %sub354 to i64
  %arrayidx356 = getelementptr inbounds i32, i32* %343, i64 %idxprom355
  %347 = load i32, i32* %arrayidx356, align 4
  %add357 = add nsw i32 %342, %347
  %mul358 = mul nsw i32 %337, %add357
  %shr359 = ashr i32 %mul358, 16
  store i32 %shr359, i32* %mcost, align 4
  %348 = load i16*, i16** %ref_pic, align 8
  %349 = load i16**, i16*** %orig_pic.addr, align 8
  %350 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %351 = load i32, i32* %blocksize_y, align 4
  %352 = load i32, i32* %blocksize_x, align 4
  %353 = load i32, i32* %blocksize_x4, align 4
  %354 = load i32, i32* %mcost, align 4
  %355 = load i32, i32* %min_mcost.addr, align 4
  %356 = load i32, i32* %cand_x, align 4
  %357 = load i32, i32* %cand_y, align 4
  %call360 = call i32 @PartCalMad(i16* %348, i16** %349, i16* (i32, i16*, i32, i32, i32, i32)* %350, i32 %351, i32 %352, i32 %353, i32 %354, i32 %355, i32 %356, i32 %357)
  store i32 %call360, i32* %mcost, align 4
  %358 = load i32, i32* %mcost, align 4
  %359 = load i32**, i32*** @McostState, align 8
  %360 = load i32, i32* %cand_y, align 4
  %361 = load i32, i32* %center_y, align 4
  %sub361 = sub nsw i32 %360, %361
  %362 = load i32, i32* %search_range.addr, align 4
  %add362 = add nsw i32 %sub361, %362
  %idxprom363 = sext i32 %add362 to i64
  %arrayidx364 = getelementptr inbounds i32*, i32** %359, i64 %idxprom363
  %363 = load i32*, i32** %arrayidx364, align 8
  %364 = load i32, i32* %cand_x, align 4
  %365 = load i32, i32* %center_x, align 4
  %sub365 = sub nsw i32 %364, %365
  %366 = load i32, i32* %search_range.addr, align 4
  %add366 = add nsw i32 %sub365, %366
  %idxprom367 = sext i32 %add366 to i64
  %arrayidx368 = getelementptr inbounds i32, i32* %363, i64 %idxprom367
  store i32 %358, i32* %arrayidx368, align 4
  %367 = load i32, i32* %mcost, align 4
  %368 = load i32, i32* %min_mcost.addr, align 4
  %cmp369 = icmp slt i32 %367, %368
  br i1 %cmp369, label %if.then371, label %if.end372

if.then371:                                       ; preds = %if.then348
  %369 = load i32, i32* %cand_x, align 4
  store i32 %369, i32* %best_x, align 4
  %370 = load i32, i32* %cand_y, align 4
  store i32 %370, i32* %best_y, align 4
  %371 = load i32, i32* %mcost, align 4
  store i32 %371, i32* %min_mcost.addr, align 4
  br label %if.end372

if.end372:                                        ; preds = %if.then371, %if.then348
  br label %if.end373

if.end373:                                        ; preds = %if.end372, %if.then338
  br label %if.end374

if.end374:                                        ; preds = %if.end373, %land.lhs.true333, %if.then324
  %372 = load i32, i32* %min_mcost.addr, align 4
  %373 = load i32, i32* @pred_SAD_uplayer, align 4
  %sub375 = sub nsw i32 %372, %373
  %conv376 = sitofp i32 %sub375 to float
  %374 = load i32, i32* @pred_SAD_uplayer, align 4
  %conv377 = sitofp i32 %374 to float
  %375 = load float, float* %betaThird, align 4
  %mul378 = fmul float %conv377, %375
  %cmp379 = fcmp olt float %conv376, %mul378
  br i1 %cmp379, label %if.then381, label %if.else382

if.then381:                                       ; preds = %if.end374
  br label %third_step

if.else382:                                       ; preds = %if.end374
  %376 = load i32, i32* %min_mcost.addr, align 4
  %377 = load i32, i32* @pred_SAD_uplayer, align 4
  %sub383 = sub nsw i32 %376, %377
  %conv384 = sitofp i32 %sub383 to float
  %378 = load i32, i32* @pred_SAD_uplayer, align 4
  %conv385 = sitofp i32 %378 to float
  %379 = load float, float* %betaSec, align 4
  %mul386 = fmul float %conv385, %379
  %cmp387 = fcmp olt float %conv384, %mul386
  br i1 %cmp387, label %if.then389, label %if.end390

if.then389:                                       ; preds = %if.else382
  br label %sec_step

if.end390:                                        ; preds = %if.else382
  br label %if.end391

if.end391:                                        ; preds = %if.end390
  br label %if.end392

if.end392:                                        ; preds = %if.end391, %if.end321
  %380 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %number = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %380, i32 0, i32 0
  %381 = load i32, i32* %number, align 8
  %382 = load i16, i16* %ref.addr, align 2
  %conv393 = sext i16 %382 to i32
  %add394 = add nsw i32 1, %conv393
  %cmp395 = icmp sgt i32 %381, %add394
  br i1 %cmp395, label %land.lhs.true397, label %lor.lhs.false401

land.lhs.true397:                                 ; preds = %if.end392
  %383 = load i16, i16* %ref.addr, align 2
  %conv398 = sext i16 %383 to i32
  %cmp399 = icmp ne i32 %conv398, -1
  br i1 %cmp399, label %if.then408, label %lor.lhs.false401

lor.lhs.false401:                                 ; preds = %land.lhs.true397, %if.end392
  %384 = load i32, i32* %list.addr, align 4
  %cmp402 = icmp eq i32 %384, 1
  br i1 %cmp402, label %land.lhs.true404, label %if.end459

land.lhs.true404:                                 ; preds = %lor.lhs.false401
  %385 = load i32, i32* @Bframe_ctr, align 4
  %386 = load i32, i32* %N_Bframe, align 4
  %rem405 = srem i32 %385, %386
  %cmp406 = icmp sgt i32 %rem405, 1
  br i1 %cmp406, label %if.then408, label %if.end459

if.then408:                                       ; preds = %land.lhs.true404, %land.lhs.true397
  %387 = load i32, i32* %pic_pix_x.addr, align 4
  %388 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @pred_MV_time, i64 0, i64 0), align 4
  %div409 = sdiv i32 %388, 4
  %add410 = add nsw i32 %387, %div409
  store i32 %add410, i32* %cand_x, align 4
  %389 = load i32, i32* %pic_pix_y.addr, align 4
  %390 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @pred_MV_time, i64 0, i64 1), align 4
  %div411 = sdiv i32 %390, 4
  %add412 = add nsw i32 %389, %div411
  store i32 %add412, i32* %cand_y, align 4
  %391 = load i32, i32* %cand_x, align 4
  %392 = load i32, i32* %center_x, align 4
  %sub413 = sub nsw i32 %391, %392
  %call414 = call i32 @abs(i32 %sub413) #6
  %393 = load i32, i32* %search_range.addr, align 4
  %cmp415 = icmp sle i32 %call414, %393
  br i1 %cmp415, label %land.lhs.true417, label %if.end458

land.lhs.true417:                                 ; preds = %if.then408
  %394 = load i32, i32* %cand_y, align 4
  %395 = load i32, i32* %center_y, align 4
  %sub418 = sub nsw i32 %394, %395
  %call419 = call i32 @abs(i32 %sub418) #6
  %396 = load i32, i32* %search_range.addr, align 4
  %cmp420 = icmp sle i32 %call419, %396
  br i1 %cmp420, label %if.then422, label %if.end458

if.then422:                                       ; preds = %land.lhs.true417
  %397 = load i32**, i32*** @McostState, align 8
  %398 = load i32, i32* %cand_y, align 4
  %399 = load i32, i32* %center_y, align 4
  %sub423 = sub nsw i32 %398, %399
  %400 = load i32, i32* %search_range.addr, align 4
  %add424 = add nsw i32 %sub423, %400
  %idxprom425 = sext i32 %add424 to i64
  %arrayidx426 = getelementptr inbounds i32*, i32** %397, i64 %idxprom425
  %401 = load i32*, i32** %arrayidx426, align 8
  %402 = load i32, i32* %cand_x, align 4
  %403 = load i32, i32* %center_x, align 4
  %sub427 = sub nsw i32 %402, %403
  %404 = load i32, i32* %search_range.addr, align 4
  %add428 = add nsw i32 %sub427, %404
  %idxprom429 = sext i32 %add428 to i64
  %arrayidx430 = getelementptr inbounds i32, i32* %401, i64 %idxprom429
  %405 = load i32, i32* %arrayidx430, align 4
  %tobool431 = icmp ne i32 %405, 0
  br i1 %tobool431, label %if.end457, label %if.then432

if.then432:                                       ; preds = %if.then422
  %406 = load i32, i32* %lambda_factor, align 4
  %407 = load i32*, i32** @mvbits, align 8
  %408 = load i32, i32* %cand_x, align 4
  %409 = load i32, i32* %mvshift, align 4
  %shl433 = shl i32 %408, %409
  %410 = load i32, i32* %pred_x, align 4
  %sub434 = sub nsw i32 %shl433, %410
  %idxprom435 = sext i32 %sub434 to i64
  %arrayidx436 = getelementptr inbounds i32, i32* %407, i64 %idxprom435
  %411 = load i32, i32* %arrayidx436, align 4
  %412 = load i32*, i32** @mvbits, align 8
  %413 = load i32, i32* %cand_y, align 4
  %414 = load i32, i32* %mvshift, align 4
  %shl437 = shl i32 %413, %414
  %415 = load i32, i32* %pred_y, align 4
  %sub438 = sub nsw i32 %shl437, %415
  %idxprom439 = sext i32 %sub438 to i64
  %arrayidx440 = getelementptr inbounds i32, i32* %412, i64 %idxprom439
  %416 = load i32, i32* %arrayidx440, align 4
  %add441 = add nsw i32 %411, %416
  %mul442 = mul nsw i32 %406, %add441
  %shr443 = ashr i32 %mul442, 16
  store i32 %shr443, i32* %mcost, align 4
  %417 = load i16*, i16** %ref_pic, align 8
  %418 = load i16**, i16*** %orig_pic.addr, align 8
  %419 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %420 = load i32, i32* %blocksize_y, align 4
  %421 = load i32, i32* %blocksize_x, align 4
  %422 = load i32, i32* %blocksize_x4, align 4
  %423 = load i32, i32* %mcost, align 4
  %424 = load i32, i32* %min_mcost.addr, align 4
  %425 = load i32, i32* %cand_x, align 4
  %426 = load i32, i32* %cand_y, align 4
  %call444 = call i32 @PartCalMad(i16* %417, i16** %418, i16* (i32, i16*, i32, i32, i32, i32)* %419, i32 %420, i32 %421, i32 %422, i32 %423, i32 %424, i32 %425, i32 %426)
  store i32 %call444, i32* %mcost, align 4
  %427 = load i32, i32* %mcost, align 4
  %428 = load i32**, i32*** @McostState, align 8
  %429 = load i32, i32* %cand_y, align 4
  %430 = load i32, i32* %center_y, align 4
  %sub445 = sub nsw i32 %429, %430
  %431 = load i32, i32* %search_range.addr, align 4
  %add446 = add nsw i32 %sub445, %431
  %idxprom447 = sext i32 %add446 to i64
  %arrayidx448 = getelementptr inbounds i32*, i32** %428, i64 %idxprom447
  %432 = load i32*, i32** %arrayidx448, align 8
  %433 = load i32, i32* %cand_x, align 4
  %434 = load i32, i32* %center_x, align 4
  %sub449 = sub nsw i32 %433, %434
  %435 = load i32, i32* %search_range.addr, align 4
  %add450 = add nsw i32 %sub449, %435
  %idxprom451 = sext i32 %add450 to i64
  %arrayidx452 = getelementptr inbounds i32, i32* %432, i64 %idxprom451
  store i32 %427, i32* %arrayidx452, align 4
  %436 = load i32, i32* %mcost, align 4
  %437 = load i32, i32* %min_mcost.addr, align 4
  %cmp453 = icmp slt i32 %436, %437
  br i1 %cmp453, label %if.then455, label %if.end456

if.then455:                                       ; preds = %if.then432
  %438 = load i32, i32* %cand_x, align 4
  store i32 %438, i32* %best_x, align 4
  %439 = load i32, i32* %cand_y, align 4
  store i32 %439, i32* %best_y, align 4
  %440 = load i32, i32* %mcost, align 4
  store i32 %440, i32* %min_mcost.addr, align 4
  br label %if.end456

if.end456:                                        ; preds = %if.then455, %if.then432
  br label %if.end457

if.end457:                                        ; preds = %if.end456, %if.then422
  br label %if.end458

if.end458:                                        ; preds = %if.end457, %land.lhs.true417, %if.then408
  br label %if.end459

if.end459:                                        ; preds = %if.end458, %land.lhs.true404, %lor.lhs.false401
  %441 = load %struct.InputParameters*, %struct.InputParameters** @input, align 8
  %PicInterlace = getelementptr inbounds %struct.InputParameters, %struct.InputParameters* %441, i32 0, i32 91
  %442 = load i32, i32* %PicInterlace, align 8
  %cmp460 = icmp eq i32 %442, 1
  br i1 %cmp460, label %if.then462, label %if.else535

if.then462:                                       ; preds = %if.end459
  %443 = load i32, i32* %list.addr, align 4
  %cmp463 = icmp eq i32 %443, 0
  br i1 %cmp463, label %land.lhs.true465, label %lor.lhs.false469

land.lhs.true465:                                 ; preds = %if.then462
  %444 = load i16, i16* %ref.addr, align 2
  %conv466 = sext i16 %444 to i32
  %cmp467 = icmp sgt i32 %conv466, 0
  br i1 %cmp467, label %if.then483, label %lor.lhs.false469

lor.lhs.false469:                                 ; preds = %land.lhs.true465, %if.then462
  %445 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %type = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %445, i32 0, i32 6
  %446 = load i32, i32* %type, align 8
  %cmp470 = icmp eq i32 %446, 1
  br i1 %cmp470, label %land.lhs.true472, label %if.end534

land.lhs.true472:                                 ; preds = %lor.lhs.false469
  %447 = load i32, i32* %list.addr, align 4
  %cmp473 = icmp eq i32 %447, 0
  br i1 %cmp473, label %land.lhs.true475, label %if.end534

land.lhs.true475:                                 ; preds = %land.lhs.true472
  %448 = load i16, i16* %ref.addr, align 2
  %conv476 = sext i16 %448 to i32
  %cmp477 = icmp eq i32 %conv476, 0
  br i1 %cmp477, label %if.then483, label %lor.lhs.false479

lor.lhs.false479:                                 ; preds = %land.lhs.true475
  %449 = load i16, i16* %ref.addr, align 2
  %conv480 = sext i16 %449 to i32
  %cmp481 = icmp eq i32 %conv480, 2
  br i1 %cmp481, label %if.then483, label %if.end534

if.then483:                                       ; preds = %lor.lhs.false479, %land.lhs.true475, %land.lhs.true465
  %450 = load i32, i32* %pic_pix_x.addr, align 4
  %451 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @pred_MV_ref, i64 0, i64 0), align 4
  %div484 = sdiv i32 %451, 4
  %add485 = add nsw i32 %450, %div484
  store i32 %add485, i32* %cand_x, align 4
  %452 = load i32, i32* %pic_pix_y.addr, align 4
  %453 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @pred_MV_ref, i64 0, i64 1), align 4
  %div486 = sdiv i32 %453, 4
  %add487 = add nsw i32 %452, %div486
  store i32 %add487, i32* %cand_y, align 4
  %454 = load i32, i32* %cand_x, align 4
  %455 = load i32, i32* %center_x, align 4
  %sub488 = sub nsw i32 %454, %455
  %call489 = call i32 @abs(i32 %sub488) #6
  %456 = load i32, i32* %search_range.addr, align 4
  %cmp490 = icmp sle i32 %call489, %456
  br i1 %cmp490, label %land.lhs.true492, label %if.end533

land.lhs.true492:                                 ; preds = %if.then483
  %457 = load i32, i32* %cand_y, align 4
  %458 = load i32, i32* %center_y, align 4
  %sub493 = sub nsw i32 %457, %458
  %call494 = call i32 @abs(i32 %sub493) #6
  %459 = load i32, i32* %search_range.addr, align 4
  %cmp495 = icmp sle i32 %call494, %459
  br i1 %cmp495, label %if.then497, label %if.end533

if.then497:                                       ; preds = %land.lhs.true492
  %460 = load i32**, i32*** @McostState, align 8
  %461 = load i32, i32* %cand_y, align 4
  %462 = load i32, i32* %center_y, align 4
  %sub498 = sub nsw i32 %461, %462
  %463 = load i32, i32* %search_range.addr, align 4
  %add499 = add nsw i32 %sub498, %463
  %idxprom500 = sext i32 %add499 to i64
  %arrayidx501 = getelementptr inbounds i32*, i32** %460, i64 %idxprom500
  %464 = load i32*, i32** %arrayidx501, align 8
  %465 = load i32, i32* %cand_x, align 4
  %466 = load i32, i32* %center_x, align 4
  %sub502 = sub nsw i32 %465, %466
  %467 = load i32, i32* %search_range.addr, align 4
  %add503 = add nsw i32 %sub502, %467
  %idxprom504 = sext i32 %add503 to i64
  %arrayidx505 = getelementptr inbounds i32, i32* %464, i64 %idxprom504
  %468 = load i32, i32* %arrayidx505, align 4
  %tobool506 = icmp ne i32 %468, 0
  br i1 %tobool506, label %if.end532, label %if.then507

if.then507:                                       ; preds = %if.then497
  %469 = load i32, i32* %lambda_factor, align 4
  %470 = load i32*, i32** @mvbits, align 8
  %471 = load i32, i32* %cand_x, align 4
  %472 = load i32, i32* %mvshift, align 4
  %shl508 = shl i32 %471, %472
  %473 = load i32, i32* %pred_x, align 4
  %sub509 = sub nsw i32 %shl508, %473
  %idxprom510 = sext i32 %sub509 to i64
  %arrayidx511 = getelementptr inbounds i32, i32* %470, i64 %idxprom510
  %474 = load i32, i32* %arrayidx511, align 4
  %475 = load i32*, i32** @mvbits, align 8
  %476 = load i32, i32* %cand_y, align 4
  %477 = load i32, i32* %mvshift, align 4
  %shl512 = shl i32 %476, %477
  %478 = load i32, i32* %pred_y, align 4
  %sub513 = sub nsw i32 %shl512, %478
  %idxprom514 = sext i32 %sub513 to i64
  %arrayidx515 = getelementptr inbounds i32, i32* %475, i64 %idxprom514
  %479 = load i32, i32* %arrayidx515, align 4
  %add516 = add nsw i32 %474, %479
  %mul517 = mul nsw i32 %469, %add516
  %shr518 = ashr i32 %mul517, 16
  store i32 %shr518, i32* %mcost, align 4
  %480 = load i16*, i16** %ref_pic, align 8
  %481 = load i16**, i16*** %orig_pic.addr, align 8
  %482 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %483 = load i32, i32* %blocksize_y, align 4
  %484 = load i32, i32* %blocksize_x, align 4
  %485 = load i32, i32* %blocksize_x4, align 4
  %486 = load i32, i32* %mcost, align 4
  %487 = load i32, i32* %min_mcost.addr, align 4
  %488 = load i32, i32* %cand_x, align 4
  %489 = load i32, i32* %cand_y, align 4
  %call519 = call i32 @PartCalMad(i16* %480, i16** %481, i16* (i32, i16*, i32, i32, i32, i32)* %482, i32 %483, i32 %484, i32 %485, i32 %486, i32 %487, i32 %488, i32 %489)
  store i32 %call519, i32* %mcost, align 4
  %490 = load i32, i32* %mcost, align 4
  %491 = load i32**, i32*** @McostState, align 8
  %492 = load i32, i32* %cand_y, align 4
  %493 = load i32, i32* %center_y, align 4
  %sub520 = sub nsw i32 %492, %493
  %494 = load i32, i32* %search_range.addr, align 4
  %add521 = add nsw i32 %sub520, %494
  %idxprom522 = sext i32 %add521 to i64
  %arrayidx523 = getelementptr inbounds i32*, i32** %491, i64 %idxprom522
  %495 = load i32*, i32** %arrayidx523, align 8
  %496 = load i32, i32* %cand_x, align 4
  %497 = load i32, i32* %center_x, align 4
  %sub524 = sub nsw i32 %496, %497
  %498 = load i32, i32* %search_range.addr, align 4
  %add525 = add nsw i32 %sub524, %498
  %idxprom526 = sext i32 %add525 to i64
  %arrayidx527 = getelementptr inbounds i32, i32* %495, i64 %idxprom526
  store i32 %490, i32* %arrayidx527, align 4
  %499 = load i32, i32* %mcost, align 4
  %500 = load i32, i32* %min_mcost.addr, align 4
  %cmp528 = icmp slt i32 %499, %500
  br i1 %cmp528, label %if.then530, label %if.end531

if.then530:                                       ; preds = %if.then507
  %501 = load i32, i32* %cand_x, align 4
  store i32 %501, i32* %best_x, align 4
  %502 = load i32, i32* %cand_y, align 4
  store i32 %502, i32* %best_y, align 4
  %503 = load i32, i32* %mcost, align 4
  store i32 %503, i32* %min_mcost.addr, align 4
  br label %if.end531

if.end531:                                        ; preds = %if.then530, %if.then507
  br label %if.end532

if.end532:                                        ; preds = %if.end531, %if.then497
  br label %if.end533

if.end533:                                        ; preds = %if.end532, %land.lhs.true492, %if.then483
  br label %if.end534

if.end534:                                        ; preds = %if.end533, %lor.lhs.false479, %land.lhs.true472, %lor.lhs.false469
  br label %if.end605

if.else535:                                       ; preds = %if.end459
  %504 = load i32, i32* %list.addr, align 4
  %cmp536 = icmp eq i32 %504, 0
  br i1 %cmp536, label %land.lhs.true538, label %lor.lhs.false542

land.lhs.true538:                                 ; preds = %if.else535
  %505 = load i16, i16* %ref.addr, align 2
  %conv539 = sext i16 %505 to i32
  %cmp540 = icmp sgt i32 %conv539, 0
  br i1 %cmp540, label %if.then553, label %lor.lhs.false542

lor.lhs.false542:                                 ; preds = %land.lhs.true538, %if.else535
  %506 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %type543 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %506, i32 0, i32 6
  %507 = load i32, i32* %type543, align 8
  %cmp544 = icmp eq i32 %507, 1
  br i1 %cmp544, label %land.lhs.true546, label %if.end604

land.lhs.true546:                                 ; preds = %lor.lhs.false542
  %508 = load i32, i32* %list.addr, align 4
  %cmp547 = icmp eq i32 %508, 0
  br i1 %cmp547, label %land.lhs.true549, label %if.end604

land.lhs.true549:                                 ; preds = %land.lhs.true546
  %509 = load i16, i16* %ref.addr, align 2
  %conv550 = sext i16 %509 to i32
  %cmp551 = icmp eq i32 %conv550, 0
  br i1 %cmp551, label %if.then553, label %if.end604

if.then553:                                       ; preds = %land.lhs.true549, %land.lhs.true538
  %510 = load i32, i32* %pic_pix_x.addr, align 4
  %511 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @pred_MV_ref, i64 0, i64 0), align 4
  %div554 = sdiv i32 %511, 4
  %add555 = add nsw i32 %510, %div554
  store i32 %add555, i32* %cand_x, align 4
  %512 = load i32, i32* %pic_pix_y.addr, align 4
  %513 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @pred_MV_ref, i64 0, i64 1), align 4
  %div556 = sdiv i32 %513, 4
  %add557 = add nsw i32 %512, %div556
  store i32 %add557, i32* %cand_y, align 4
  %514 = load i32, i32* %cand_x, align 4
  %515 = load i32, i32* %center_x, align 4
  %sub558 = sub nsw i32 %514, %515
  %call559 = call i32 @abs(i32 %sub558) #6
  %516 = load i32, i32* %search_range.addr, align 4
  %cmp560 = icmp sle i32 %call559, %516
  br i1 %cmp560, label %land.lhs.true562, label %if.end603

land.lhs.true562:                                 ; preds = %if.then553
  %517 = load i32, i32* %cand_y, align 4
  %518 = load i32, i32* %center_y, align 4
  %sub563 = sub nsw i32 %517, %518
  %call564 = call i32 @abs(i32 %sub563) #6
  %519 = load i32, i32* %search_range.addr, align 4
  %cmp565 = icmp sle i32 %call564, %519
  br i1 %cmp565, label %if.then567, label %if.end603

if.then567:                                       ; preds = %land.lhs.true562
  %520 = load i32**, i32*** @McostState, align 8
  %521 = load i32, i32* %cand_y, align 4
  %522 = load i32, i32* %center_y, align 4
  %sub568 = sub nsw i32 %521, %522
  %523 = load i32, i32* %search_range.addr, align 4
  %add569 = add nsw i32 %sub568, %523
  %idxprom570 = sext i32 %add569 to i64
  %arrayidx571 = getelementptr inbounds i32*, i32** %520, i64 %idxprom570
  %524 = load i32*, i32** %arrayidx571, align 8
  %525 = load i32, i32* %cand_x, align 4
  %526 = load i32, i32* %center_x, align 4
  %sub572 = sub nsw i32 %525, %526
  %527 = load i32, i32* %search_range.addr, align 4
  %add573 = add nsw i32 %sub572, %527
  %idxprom574 = sext i32 %add573 to i64
  %arrayidx575 = getelementptr inbounds i32, i32* %524, i64 %idxprom574
  %528 = load i32, i32* %arrayidx575, align 4
  %tobool576 = icmp ne i32 %528, 0
  br i1 %tobool576, label %if.end602, label %if.then577

if.then577:                                       ; preds = %if.then567
  %529 = load i32, i32* %lambda_factor, align 4
  %530 = load i32*, i32** @mvbits, align 8
  %531 = load i32, i32* %cand_x, align 4
  %532 = load i32, i32* %mvshift, align 4
  %shl578 = shl i32 %531, %532
  %533 = load i32, i32* %pred_x, align 4
  %sub579 = sub nsw i32 %shl578, %533
  %idxprom580 = sext i32 %sub579 to i64
  %arrayidx581 = getelementptr inbounds i32, i32* %530, i64 %idxprom580
  %534 = load i32, i32* %arrayidx581, align 4
  %535 = load i32*, i32** @mvbits, align 8
  %536 = load i32, i32* %cand_y, align 4
  %537 = load i32, i32* %mvshift, align 4
  %shl582 = shl i32 %536, %537
  %538 = load i32, i32* %pred_y, align 4
  %sub583 = sub nsw i32 %shl582, %538
  %idxprom584 = sext i32 %sub583 to i64
  %arrayidx585 = getelementptr inbounds i32, i32* %535, i64 %idxprom584
  %539 = load i32, i32* %arrayidx585, align 4
  %add586 = add nsw i32 %534, %539
  %mul587 = mul nsw i32 %529, %add586
  %shr588 = ashr i32 %mul587, 16
  store i32 %shr588, i32* %mcost, align 4
  %540 = load i16*, i16** %ref_pic, align 8
  %541 = load i16**, i16*** %orig_pic.addr, align 8
  %542 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %543 = load i32, i32* %blocksize_y, align 4
  %544 = load i32, i32* %blocksize_x, align 4
  %545 = load i32, i32* %blocksize_x4, align 4
  %546 = load i32, i32* %mcost, align 4
  %547 = load i32, i32* %min_mcost.addr, align 4
  %548 = load i32, i32* %cand_x, align 4
  %549 = load i32, i32* %cand_y, align 4
  %call589 = call i32 @PartCalMad(i16* %540, i16** %541, i16* (i32, i16*, i32, i32, i32, i32)* %542, i32 %543, i32 %544, i32 %545, i32 %546, i32 %547, i32 %548, i32 %549)
  store i32 %call589, i32* %mcost, align 4
  %550 = load i32, i32* %mcost, align 4
  %551 = load i32**, i32*** @McostState, align 8
  %552 = load i32, i32* %cand_y, align 4
  %553 = load i32, i32* %center_y, align 4
  %sub590 = sub nsw i32 %552, %553
  %554 = load i32, i32* %search_range.addr, align 4
  %add591 = add nsw i32 %sub590, %554
  %idxprom592 = sext i32 %add591 to i64
  %arrayidx593 = getelementptr inbounds i32*, i32** %551, i64 %idxprom592
  %555 = load i32*, i32** %arrayidx593, align 8
  %556 = load i32, i32* %cand_x, align 4
  %557 = load i32, i32* %center_x, align 4
  %sub594 = sub nsw i32 %556, %557
  %558 = load i32, i32* %search_range.addr, align 4
  %add595 = add nsw i32 %sub594, %558
  %idxprom596 = sext i32 %add595 to i64
  %arrayidx597 = getelementptr inbounds i32, i32* %555, i64 %idxprom596
  store i32 %550, i32* %arrayidx597, align 4
  %559 = load i32, i32* %mcost, align 4
  %560 = load i32, i32* %min_mcost.addr, align 4
  %cmp598 = icmp slt i32 %559, %560
  br i1 %cmp598, label %if.then600, label %if.end601

if.then600:                                       ; preds = %if.then577
  %561 = load i32, i32* %cand_x, align 4
  store i32 %561, i32* %best_x, align 4
  %562 = load i32, i32* %cand_y, align 4
  store i32 %562, i32* %best_y, align 4
  %563 = load i32, i32* %mcost, align 4
  store i32 %563, i32* %min_mcost.addr, align 4
  br label %if.end601

if.end601:                                        ; preds = %if.then600, %if.then577
  br label %if.end602

if.end602:                                        ; preds = %if.end601, %if.then567
  br label %if.end603

if.end603:                                        ; preds = %if.end602, %land.lhs.true562, %if.then553
  br label %if.end604

if.end604:                                        ; preds = %if.end603, %land.lhs.true549, %land.lhs.true546, %lor.lhs.false542
  br label %if.end605

if.end605:                                        ; preds = %if.end604, %if.end534
  %564 = load i32, i32* %best_x, align 4
  store i32 %564, i32* %iXMinNow, align 4
  %565 = load i32, i32* %best_y, align 4
  store i32 %565, i32* %iYMinNow, align 4
  store i32 0, i32* %m, align 4
  br label %for.cond606

for.cond606:                                      ; preds = %for.inc662, %if.end605
  %566 = load i32, i32* %m, align 4
  %cmp607 = icmp slt i32 %566, 4
  br i1 %cmp607, label %for.body609, label %for.end664

for.body609:                                      ; preds = %for.cond606
  %567 = load i32, i32* %iXMinNow, align 4
  %568 = load i32, i32* %m, align 4
  %idxprom610 = sext i32 %568 to i64
  %arrayidx611 = getelementptr inbounds [4 x i32], [4 x i32]* @FastIntegerPelBlockMotionSearch.Diamond_x, i64 0, i64 %idxprom610
  %569 = load i32, i32* %arrayidx611, align 4
  %add612 = add nsw i32 %567, %569
  store i32 %add612, i32* %cand_x, align 4
  %570 = load i32, i32* %iYMinNow, align 4
  %571 = load i32, i32* %m, align 4
  %idxprom613 = sext i32 %571 to i64
  %arrayidx614 = getelementptr inbounds [4 x i32], [4 x i32]* @FastIntegerPelBlockMotionSearch.Diamond_y, i64 0, i64 %idxprom613
  %572 = load i32, i32* %arrayidx614, align 4
  %add615 = add nsw i32 %570, %572
  store i32 %add615, i32* %cand_y, align 4
  %573 = load i32, i32* %cand_x, align 4
  %574 = load i32, i32* %center_x, align 4
  %sub616 = sub nsw i32 %573, %574
  %call617 = call i32 @abs(i32 %sub616) #6
  %575 = load i32, i32* %search_range.addr, align 4
  %cmp618 = icmp sle i32 %call617, %575
  br i1 %cmp618, label %land.lhs.true620, label %if.end661

land.lhs.true620:                                 ; preds = %for.body609
  %576 = load i32, i32* %cand_y, align 4
  %577 = load i32, i32* %center_y, align 4
  %sub621 = sub nsw i32 %576, %577
  %call622 = call i32 @abs(i32 %sub621) #6
  %578 = load i32, i32* %search_range.addr, align 4
  %cmp623 = icmp sle i32 %call622, %578
  br i1 %cmp623, label %if.then625, label %if.end661

if.then625:                                       ; preds = %land.lhs.true620
  %579 = load i32**, i32*** @McostState, align 8
  %580 = load i32, i32* %cand_y, align 4
  %581 = load i32, i32* %center_y, align 4
  %sub626 = sub nsw i32 %580, %581
  %582 = load i32, i32* %search_range.addr, align 4
  %add627 = add nsw i32 %sub626, %582
  %idxprom628 = sext i32 %add627 to i64
  %arrayidx629 = getelementptr inbounds i32*, i32** %579, i64 %idxprom628
  %583 = load i32*, i32** %arrayidx629, align 8
  %584 = load i32, i32* %cand_x, align 4
  %585 = load i32, i32* %center_x, align 4
  %sub630 = sub nsw i32 %584, %585
  %586 = load i32, i32* %search_range.addr, align 4
  %add631 = add nsw i32 %sub630, %586
  %idxprom632 = sext i32 %add631 to i64
  %arrayidx633 = getelementptr inbounds i32, i32* %583, i64 %idxprom632
  %587 = load i32, i32* %arrayidx633, align 4
  %tobool634 = icmp ne i32 %587, 0
  br i1 %tobool634, label %if.end660, label %if.then635

if.then635:                                       ; preds = %if.then625
  %588 = load i32, i32* %lambda_factor, align 4
  %589 = load i32*, i32** @mvbits, align 8
  %590 = load i32, i32* %cand_x, align 4
  %591 = load i32, i32* %mvshift, align 4
  %shl636 = shl i32 %590, %591
  %592 = load i32, i32* %pred_x, align 4
  %sub637 = sub nsw i32 %shl636, %592
  %idxprom638 = sext i32 %sub637 to i64
  %arrayidx639 = getelementptr inbounds i32, i32* %589, i64 %idxprom638
  %593 = load i32, i32* %arrayidx639, align 4
  %594 = load i32*, i32** @mvbits, align 8
  %595 = load i32, i32* %cand_y, align 4
  %596 = load i32, i32* %mvshift, align 4
  %shl640 = shl i32 %595, %596
  %597 = load i32, i32* %pred_y, align 4
  %sub641 = sub nsw i32 %shl640, %597
  %idxprom642 = sext i32 %sub641 to i64
  %arrayidx643 = getelementptr inbounds i32, i32* %594, i64 %idxprom642
  %598 = load i32, i32* %arrayidx643, align 4
  %add644 = add nsw i32 %593, %598
  %mul645 = mul nsw i32 %588, %add644
  %shr646 = ashr i32 %mul645, 16
  store i32 %shr646, i32* %mcost, align 4
  %599 = load i16*, i16** %ref_pic, align 8
  %600 = load i16**, i16*** %orig_pic.addr, align 8
  %601 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %602 = load i32, i32* %blocksize_y, align 4
  %603 = load i32, i32* %blocksize_x, align 4
  %604 = load i32, i32* %blocksize_x4, align 4
  %605 = load i32, i32* %mcost, align 4
  %606 = load i32, i32* %min_mcost.addr, align 4
  %607 = load i32, i32* %cand_x, align 4
  %608 = load i32, i32* %cand_y, align 4
  %call647 = call i32 @PartCalMad(i16* %599, i16** %600, i16* (i32, i16*, i32, i32, i32, i32)* %601, i32 %602, i32 %603, i32 %604, i32 %605, i32 %606, i32 %607, i32 %608)
  store i32 %call647, i32* %mcost, align 4
  %609 = load i32, i32* %mcost, align 4
  %610 = load i32**, i32*** @McostState, align 8
  %611 = load i32, i32* %cand_y, align 4
  %612 = load i32, i32* %center_y, align 4
  %sub648 = sub nsw i32 %611, %612
  %613 = load i32, i32* %search_range.addr, align 4
  %add649 = add nsw i32 %sub648, %613
  %idxprom650 = sext i32 %add649 to i64
  %arrayidx651 = getelementptr inbounds i32*, i32** %610, i64 %idxprom650
  %614 = load i32*, i32** %arrayidx651, align 8
  %615 = load i32, i32* %cand_x, align 4
  %616 = load i32, i32* %center_x, align 4
  %sub652 = sub nsw i32 %615, %616
  %617 = load i32, i32* %search_range.addr, align 4
  %add653 = add nsw i32 %sub652, %617
  %idxprom654 = sext i32 %add653 to i64
  %arrayidx655 = getelementptr inbounds i32, i32* %614, i64 %idxprom654
  store i32 %609, i32* %arrayidx655, align 4
  %618 = load i32, i32* %mcost, align 4
  %619 = load i32, i32* %min_mcost.addr, align 4
  %cmp656 = icmp slt i32 %618, %619
  br i1 %cmp656, label %if.then658, label %if.end659

if.then658:                                       ; preds = %if.then635
  %620 = load i32, i32* %cand_x, align 4
  store i32 %620, i32* %best_x, align 4
  %621 = load i32, i32* %cand_y, align 4
  store i32 %621, i32* %best_y, align 4
  %622 = load i32, i32* %mcost, align 4
  store i32 %622, i32* %min_mcost.addr, align 4
  br label %if.end659

if.end659:                                        ; preds = %if.then658, %if.then635
  br label %if.end660

if.end660:                                        ; preds = %if.end659, %if.then625
  br label %if.end661

if.end661:                                        ; preds = %if.end660, %land.lhs.true620, %for.body609
  br label %for.inc662

for.inc662:                                       ; preds = %if.end661
  %623 = load i32, i32* %m, align 4
  %inc663 = add nsw i32 %623, 1
  store i32 %inc663, i32* %m, align 4
  br label %for.cond606

for.end664:                                       ; preds = %for.cond606
  %624 = load i16, i16* %ref.addr, align 2
  %conv665 = sext i16 %624 to i32
  %cmp666 = icmp sgt i32 %conv665, 0
  br i1 %cmp666, label %if.then668, label %if.else686

if.then668:                                       ; preds = %for.end664
  %625 = load i32, i32* %min_mcost.addr, align 4
  %626 = load i32, i32* @pred_SAD_ref, align 4
  %sub669 = sub nsw i32 %625, %626
  %conv670 = sitofp i32 %sub669 to float
  %627 = load i32, i32* @pred_SAD_ref, align 4
  %conv671 = sitofp i32 %627 to float
  %628 = load float, float* %betaThird, align 4
  %mul672 = fmul float %conv671, %628
  %cmp673 = fcmp olt float %conv670, %mul672
  br i1 %cmp673, label %if.then675, label %if.else676

if.then675:                                       ; preds = %if.then668
  br label %third_step

if.else676:                                       ; preds = %if.then668
  %629 = load i32, i32* %min_mcost.addr, align 4
  %630 = load i32, i32* @pred_SAD_ref, align 4
  %sub677 = sub nsw i32 %629, %630
  %conv678 = sitofp i32 %sub677 to float
  %631 = load i32, i32* @pred_SAD_ref, align 4
  %conv679 = sitofp i32 %631 to float
  %632 = load float, float* %betaSec, align 4
  %mul680 = fmul float %conv679, %632
  %cmp681 = fcmp olt float %conv678, %mul680
  br i1 %cmp681, label %if.then683, label %if.end684

if.then683:                                       ; preds = %if.else676
  br label %sec_step

if.end684:                                        ; preds = %if.else676
  br label %if.end685

if.end685:                                        ; preds = %if.end684
  br label %if.end726

if.else686:                                       ; preds = %for.end664
  %633 = load i32, i32* %blocktype.addr, align 4
  %cmp687 = icmp sgt i32 %633, 1
  br i1 %cmp687, label %if.then689, label %if.else707

if.then689:                                       ; preds = %if.else686
  %634 = load i32, i32* %min_mcost.addr, align 4
  %635 = load i32, i32* @pred_SAD_uplayer, align 4
  %sub690 = sub nsw i32 %634, %635
  %conv691 = sitofp i32 %sub690 to float
  %636 = load i32, i32* @pred_SAD_uplayer, align 4
  %conv692 = sitofp i32 %636 to float
  %637 = load float, float* %betaThird, align 4
  %mul693 = fmul float %conv692, %637
  %cmp694 = fcmp olt float %conv691, %mul693
  br i1 %cmp694, label %if.then696, label %if.else697

if.then696:                                       ; preds = %if.then689
  br label %third_step

if.else697:                                       ; preds = %if.then689
  %638 = load i32, i32* %min_mcost.addr, align 4
  %639 = load i32, i32* @pred_SAD_uplayer, align 4
  %sub698 = sub nsw i32 %638, %639
  %conv699 = sitofp i32 %sub698 to float
  %640 = load i32, i32* @pred_SAD_uplayer, align 4
  %conv700 = sitofp i32 %640 to float
  %641 = load float, float* %betaSec, align 4
  %mul701 = fmul float %conv700, %641
  %cmp702 = fcmp olt float %conv699, %mul701
  br i1 %cmp702, label %if.then704, label %if.end705

if.then704:                                       ; preds = %if.else697
  br label %sec_step

if.end705:                                        ; preds = %if.else697
  br label %if.end706

if.end706:                                        ; preds = %if.end705
  br label %if.end725

if.else707:                                       ; preds = %if.else686
  %642 = load i32, i32* %min_mcost.addr, align 4
  %643 = load i32, i32* @pred_SAD_space, align 4
  %sub708 = sub nsw i32 %642, %643
  %conv709 = sitofp i32 %sub708 to float
  %644 = load i32, i32* @pred_SAD_space, align 4
  %conv710 = sitofp i32 %644 to float
  %645 = load float, float* %betaThird, align 4
  %mul711 = fmul float %conv710, %645
  %cmp712 = fcmp olt float %conv709, %mul711
  br i1 %cmp712, label %if.then714, label %if.else715

if.then714:                                       ; preds = %if.else707
  br label %third_step

if.else715:                                       ; preds = %if.else707
  %646 = load i32, i32* %min_mcost.addr, align 4
  %647 = load i32, i32* @pred_SAD_space, align 4
  %sub716 = sub nsw i32 %646, %647
  %conv717 = sitofp i32 %sub716 to float
  %648 = load i32, i32* @pred_SAD_space, align 4
  %conv718 = sitofp i32 %648 to float
  %649 = load float, float* %betaSec, align 4
  %mul719 = fmul float %conv718, %649
  %cmp720 = fcmp olt float %conv717, %mul719
  br i1 %cmp720, label %if.then722, label %if.end723

if.then722:                                       ; preds = %if.else715
  br label %sec_step

if.end723:                                        ; preds = %if.else715
  br label %if.end724

if.end724:                                        ; preds = %if.end723
  br label %if.end725

if.end725:                                        ; preds = %if.end724, %if.end706
  br label %if.end726

if.end726:                                        ; preds = %if.end725, %if.end685
  %650 = load i32, i32* %blocktype.addr, align 4
  %cmp727 = icmp sgt i32 %650, 6
  br i1 %cmp727, label %if.then729, label %if.else730

if.then729:                                       ; preds = %if.end726
  br label %sec_step

if.else730:                                       ; preds = %if.end726
  br label %first_step

first_step:                                       ; preds = %if.else730
  %651 = load i32, i32* %best_x, align 4
  store i32 %651, i32* %iXMinNow, align 4
  %652 = load i32, i32* %best_y, align 4
  store i32 %652, i32* %iYMinNow, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond731

for.cond731:                                      ; preds = %for.inc832, %first_step
  %653 = load i32, i32* %i, align 4
  %654 = load i32, i32* %search_range.addr, align 4
  %div732 = sdiv i32 %654, 2
  %cmp733 = icmp sle i32 %653, %div732
  br i1 %cmp733, label %for.body735, label %for.end834

for.body735:                                      ; preds = %for.cond731
  %655 = load i32, i32* %i, align 4
  %mul736 = mul nsw i32 2, %655
  %sub737 = sub nsw i32 %mul736, 1
  store i32 %sub737, i32* %search_step, align 4
  %656 = load i32, i32* %iXMinNow, align 4
  %657 = load i32, i32* %search_step, align 4
  %add738 = add nsw i32 %656, %657
  store i32 %add738, i32* %cand_x, align 4
  %658 = load i32, i32* %iYMinNow, align 4
  store i32 %658, i32* %cand_y, align 4
  %659 = load i32, i32* %cand_x, align 4
  %660 = load i32, i32* %center_x, align 4
  %sub739 = sub nsw i32 %659, %660
  %call740 = call i32 @abs(i32 %sub739) #6
  %661 = load i32, i32* %search_range.addr, align 4
  %cmp741 = icmp sle i32 %call740, %661
  br i1 %cmp741, label %land.lhs.true743, label %if.end784

land.lhs.true743:                                 ; preds = %for.body735
  %662 = load i32, i32* %cand_y, align 4
  %663 = load i32, i32* %center_y, align 4
  %sub744 = sub nsw i32 %662, %663
  %call745 = call i32 @abs(i32 %sub744) #6
  %664 = load i32, i32* %search_range.addr, align 4
  %cmp746 = icmp sle i32 %call745, %664
  br i1 %cmp746, label %if.then748, label %if.end784

if.then748:                                       ; preds = %land.lhs.true743
  %665 = load i32**, i32*** @McostState, align 8
  %666 = load i32, i32* %cand_y, align 4
  %667 = load i32, i32* %center_y, align 4
  %sub749 = sub nsw i32 %666, %667
  %668 = load i32, i32* %search_range.addr, align 4
  %add750 = add nsw i32 %sub749, %668
  %idxprom751 = sext i32 %add750 to i64
  %arrayidx752 = getelementptr inbounds i32*, i32** %665, i64 %idxprom751
  %669 = load i32*, i32** %arrayidx752, align 8
  %670 = load i32, i32* %cand_x, align 4
  %671 = load i32, i32* %center_x, align 4
  %sub753 = sub nsw i32 %670, %671
  %672 = load i32, i32* %search_range.addr, align 4
  %add754 = add nsw i32 %sub753, %672
  %idxprom755 = sext i32 %add754 to i64
  %arrayidx756 = getelementptr inbounds i32, i32* %669, i64 %idxprom755
  %673 = load i32, i32* %arrayidx756, align 4
  %tobool757 = icmp ne i32 %673, 0
  br i1 %tobool757, label %if.end783, label %if.then758

if.then758:                                       ; preds = %if.then748
  %674 = load i32, i32* %lambda_factor, align 4
  %675 = load i32*, i32** @mvbits, align 8
  %676 = load i32, i32* %cand_x, align 4
  %677 = load i32, i32* %mvshift, align 4
  %shl759 = shl i32 %676, %677
  %678 = load i32, i32* %pred_x, align 4
  %sub760 = sub nsw i32 %shl759, %678
  %idxprom761 = sext i32 %sub760 to i64
  %arrayidx762 = getelementptr inbounds i32, i32* %675, i64 %idxprom761
  %679 = load i32, i32* %arrayidx762, align 4
  %680 = load i32*, i32** @mvbits, align 8
  %681 = load i32, i32* %cand_y, align 4
  %682 = load i32, i32* %mvshift, align 4
  %shl763 = shl i32 %681, %682
  %683 = load i32, i32* %pred_y, align 4
  %sub764 = sub nsw i32 %shl763, %683
  %idxprom765 = sext i32 %sub764 to i64
  %arrayidx766 = getelementptr inbounds i32, i32* %680, i64 %idxprom765
  %684 = load i32, i32* %arrayidx766, align 4
  %add767 = add nsw i32 %679, %684
  %mul768 = mul nsw i32 %674, %add767
  %shr769 = ashr i32 %mul768, 16
  store i32 %shr769, i32* %mcost, align 4
  %685 = load i16*, i16** %ref_pic, align 8
  %686 = load i16**, i16*** %orig_pic.addr, align 8
  %687 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %688 = load i32, i32* %blocksize_y, align 4
  %689 = load i32, i32* %blocksize_x, align 4
  %690 = load i32, i32* %blocksize_x4, align 4
  %691 = load i32, i32* %mcost, align 4
  %692 = load i32, i32* %min_mcost.addr, align 4
  %693 = load i32, i32* %cand_x, align 4
  %694 = load i32, i32* %cand_y, align 4
  %call770 = call i32 @PartCalMad(i16* %685, i16** %686, i16* (i32, i16*, i32, i32, i32, i32)* %687, i32 %688, i32 %689, i32 %690, i32 %691, i32 %692, i32 %693, i32 %694)
  store i32 %call770, i32* %mcost, align 4
  %695 = load i32, i32* %mcost, align 4
  %696 = load i32**, i32*** @McostState, align 8
  %697 = load i32, i32* %cand_y, align 4
  %698 = load i32, i32* %center_y, align 4
  %sub771 = sub nsw i32 %697, %698
  %699 = load i32, i32* %search_range.addr, align 4
  %add772 = add nsw i32 %sub771, %699
  %idxprom773 = sext i32 %add772 to i64
  %arrayidx774 = getelementptr inbounds i32*, i32** %696, i64 %idxprom773
  %700 = load i32*, i32** %arrayidx774, align 8
  %701 = load i32, i32* %cand_x, align 4
  %702 = load i32, i32* %center_x, align 4
  %sub775 = sub nsw i32 %701, %702
  %703 = load i32, i32* %search_range.addr, align 4
  %add776 = add nsw i32 %sub775, %703
  %idxprom777 = sext i32 %add776 to i64
  %arrayidx778 = getelementptr inbounds i32, i32* %700, i64 %idxprom777
  store i32 %695, i32* %arrayidx778, align 4
  %704 = load i32, i32* %mcost, align 4
  %705 = load i32, i32* %min_mcost.addr, align 4
  %cmp779 = icmp slt i32 %704, %705
  br i1 %cmp779, label %if.then781, label %if.end782

if.then781:                                       ; preds = %if.then758
  %706 = load i32, i32* %cand_x, align 4
  store i32 %706, i32* %best_x, align 4
  %707 = load i32, i32* %cand_y, align 4
  store i32 %707, i32* %best_y, align 4
  %708 = load i32, i32* %mcost, align 4
  store i32 %708, i32* %min_mcost.addr, align 4
  br label %if.end782

if.end782:                                        ; preds = %if.then781, %if.then758
  br label %if.end783

if.end783:                                        ; preds = %if.end782, %if.then748
  br label %if.end784

if.end784:                                        ; preds = %if.end783, %land.lhs.true743, %for.body735
  %709 = load i32, i32* %iXMinNow, align 4
  %710 = load i32, i32* %search_step, align 4
  %sub785 = sub nsw i32 %709, %710
  store i32 %sub785, i32* %cand_x, align 4
  %711 = load i32, i32* %iYMinNow, align 4
  store i32 %711, i32* %cand_y, align 4
  %712 = load i32, i32* %cand_x, align 4
  %713 = load i32, i32* %center_x, align 4
  %sub786 = sub nsw i32 %712, %713
  %call787 = call i32 @abs(i32 %sub786) #6
  %714 = load i32, i32* %search_range.addr, align 4
  %cmp788 = icmp sle i32 %call787, %714
  br i1 %cmp788, label %land.lhs.true790, label %if.end831

land.lhs.true790:                                 ; preds = %if.end784
  %715 = load i32, i32* %cand_y, align 4
  %716 = load i32, i32* %center_y, align 4
  %sub791 = sub nsw i32 %715, %716
  %call792 = call i32 @abs(i32 %sub791) #6
  %717 = load i32, i32* %search_range.addr, align 4
  %cmp793 = icmp sle i32 %call792, %717
  br i1 %cmp793, label %if.then795, label %if.end831

if.then795:                                       ; preds = %land.lhs.true790
  %718 = load i32**, i32*** @McostState, align 8
  %719 = load i32, i32* %cand_y, align 4
  %720 = load i32, i32* %center_y, align 4
  %sub796 = sub nsw i32 %719, %720
  %721 = load i32, i32* %search_range.addr, align 4
  %add797 = add nsw i32 %sub796, %721
  %idxprom798 = sext i32 %add797 to i64
  %arrayidx799 = getelementptr inbounds i32*, i32** %718, i64 %idxprom798
  %722 = load i32*, i32** %arrayidx799, align 8
  %723 = load i32, i32* %cand_x, align 4
  %724 = load i32, i32* %center_x, align 4
  %sub800 = sub nsw i32 %723, %724
  %725 = load i32, i32* %search_range.addr, align 4
  %add801 = add nsw i32 %sub800, %725
  %idxprom802 = sext i32 %add801 to i64
  %arrayidx803 = getelementptr inbounds i32, i32* %722, i64 %idxprom802
  %726 = load i32, i32* %arrayidx803, align 4
  %tobool804 = icmp ne i32 %726, 0
  br i1 %tobool804, label %if.end830, label %if.then805

if.then805:                                       ; preds = %if.then795
  %727 = load i32, i32* %lambda_factor, align 4
  %728 = load i32*, i32** @mvbits, align 8
  %729 = load i32, i32* %cand_x, align 4
  %730 = load i32, i32* %mvshift, align 4
  %shl806 = shl i32 %729, %730
  %731 = load i32, i32* %pred_x, align 4
  %sub807 = sub nsw i32 %shl806, %731
  %idxprom808 = sext i32 %sub807 to i64
  %arrayidx809 = getelementptr inbounds i32, i32* %728, i64 %idxprom808
  %732 = load i32, i32* %arrayidx809, align 4
  %733 = load i32*, i32** @mvbits, align 8
  %734 = load i32, i32* %cand_y, align 4
  %735 = load i32, i32* %mvshift, align 4
  %shl810 = shl i32 %734, %735
  %736 = load i32, i32* %pred_y, align 4
  %sub811 = sub nsw i32 %shl810, %736
  %idxprom812 = sext i32 %sub811 to i64
  %arrayidx813 = getelementptr inbounds i32, i32* %733, i64 %idxprom812
  %737 = load i32, i32* %arrayidx813, align 4
  %add814 = add nsw i32 %732, %737
  %mul815 = mul nsw i32 %727, %add814
  %shr816 = ashr i32 %mul815, 16
  store i32 %shr816, i32* %mcost, align 4
  %738 = load i16*, i16** %ref_pic, align 8
  %739 = load i16**, i16*** %orig_pic.addr, align 8
  %740 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %741 = load i32, i32* %blocksize_y, align 4
  %742 = load i32, i32* %blocksize_x, align 4
  %743 = load i32, i32* %blocksize_x4, align 4
  %744 = load i32, i32* %mcost, align 4
  %745 = load i32, i32* %min_mcost.addr, align 4
  %746 = load i32, i32* %cand_x, align 4
  %747 = load i32, i32* %cand_y, align 4
  %call817 = call i32 @PartCalMad(i16* %738, i16** %739, i16* (i32, i16*, i32, i32, i32, i32)* %740, i32 %741, i32 %742, i32 %743, i32 %744, i32 %745, i32 %746, i32 %747)
  store i32 %call817, i32* %mcost, align 4
  %748 = load i32, i32* %mcost, align 4
  %749 = load i32**, i32*** @McostState, align 8
  %750 = load i32, i32* %cand_y, align 4
  %751 = load i32, i32* %center_y, align 4
  %sub818 = sub nsw i32 %750, %751
  %752 = load i32, i32* %search_range.addr, align 4
  %add819 = add nsw i32 %sub818, %752
  %idxprom820 = sext i32 %add819 to i64
  %arrayidx821 = getelementptr inbounds i32*, i32** %749, i64 %idxprom820
  %753 = load i32*, i32** %arrayidx821, align 8
  %754 = load i32, i32* %cand_x, align 4
  %755 = load i32, i32* %center_x, align 4
  %sub822 = sub nsw i32 %754, %755
  %756 = load i32, i32* %search_range.addr, align 4
  %add823 = add nsw i32 %sub822, %756
  %idxprom824 = sext i32 %add823 to i64
  %arrayidx825 = getelementptr inbounds i32, i32* %753, i64 %idxprom824
  store i32 %748, i32* %arrayidx825, align 4
  %757 = load i32, i32* %mcost, align 4
  %758 = load i32, i32* %min_mcost.addr, align 4
  %cmp826 = icmp slt i32 %757, %758
  br i1 %cmp826, label %if.then828, label %if.end829

if.then828:                                       ; preds = %if.then805
  %759 = load i32, i32* %cand_x, align 4
  store i32 %759, i32* %best_x, align 4
  %760 = load i32, i32* %cand_y, align 4
  store i32 %760, i32* %best_y, align 4
  %761 = load i32, i32* %mcost, align 4
  store i32 %761, i32* %min_mcost.addr, align 4
  br label %if.end829

if.end829:                                        ; preds = %if.then828, %if.then805
  br label %if.end830

if.end830:                                        ; preds = %if.end829, %if.then795
  br label %if.end831

if.end831:                                        ; preds = %if.end830, %land.lhs.true790, %if.end784
  br label %for.inc832

for.inc832:                                       ; preds = %if.end831
  %762 = load i32, i32* %i, align 4
  %inc833 = add nsw i32 %762, 1
  store i32 %inc833, i32* %i, align 4
  br label %for.cond731

for.end834:                                       ; preds = %for.cond731
  store i32 1, i32* %i, align 4
  br label %for.cond835

for.cond835:                                      ; preds = %for.inc936, %for.end834
  %763 = load i32, i32* %i, align 4
  %764 = load i32, i32* %search_range.addr, align 4
  %div836 = sdiv i32 %764, 4
  %cmp837 = icmp sle i32 %763, %div836
  br i1 %cmp837, label %for.body839, label %for.end938

for.body839:                                      ; preds = %for.cond835
  %765 = load i32, i32* %i, align 4
  %mul840 = mul nsw i32 2, %765
  %sub841 = sub nsw i32 %mul840, 1
  store i32 %sub841, i32* %search_step, align 4
  %766 = load i32, i32* %iXMinNow, align 4
  store i32 %766, i32* %cand_x, align 4
  %767 = load i32, i32* %iYMinNow, align 4
  %768 = load i32, i32* %search_step, align 4
  %add842 = add nsw i32 %767, %768
  store i32 %add842, i32* %cand_y, align 4
  %769 = load i32, i32* %cand_x, align 4
  %770 = load i32, i32* %center_x, align 4
  %sub843 = sub nsw i32 %769, %770
  %call844 = call i32 @abs(i32 %sub843) #6
  %771 = load i32, i32* %search_range.addr, align 4
  %cmp845 = icmp sle i32 %call844, %771
  br i1 %cmp845, label %land.lhs.true847, label %if.end888

land.lhs.true847:                                 ; preds = %for.body839
  %772 = load i32, i32* %cand_y, align 4
  %773 = load i32, i32* %center_y, align 4
  %sub848 = sub nsw i32 %772, %773
  %call849 = call i32 @abs(i32 %sub848) #6
  %774 = load i32, i32* %search_range.addr, align 4
  %cmp850 = icmp sle i32 %call849, %774
  br i1 %cmp850, label %if.then852, label %if.end888

if.then852:                                       ; preds = %land.lhs.true847
  %775 = load i32**, i32*** @McostState, align 8
  %776 = load i32, i32* %cand_y, align 4
  %777 = load i32, i32* %center_y, align 4
  %sub853 = sub nsw i32 %776, %777
  %778 = load i32, i32* %search_range.addr, align 4
  %add854 = add nsw i32 %sub853, %778
  %idxprom855 = sext i32 %add854 to i64
  %arrayidx856 = getelementptr inbounds i32*, i32** %775, i64 %idxprom855
  %779 = load i32*, i32** %arrayidx856, align 8
  %780 = load i32, i32* %cand_x, align 4
  %781 = load i32, i32* %center_x, align 4
  %sub857 = sub nsw i32 %780, %781
  %782 = load i32, i32* %search_range.addr, align 4
  %add858 = add nsw i32 %sub857, %782
  %idxprom859 = sext i32 %add858 to i64
  %arrayidx860 = getelementptr inbounds i32, i32* %779, i64 %idxprom859
  %783 = load i32, i32* %arrayidx860, align 4
  %tobool861 = icmp ne i32 %783, 0
  br i1 %tobool861, label %if.end887, label %if.then862

if.then862:                                       ; preds = %if.then852
  %784 = load i32, i32* %lambda_factor, align 4
  %785 = load i32*, i32** @mvbits, align 8
  %786 = load i32, i32* %cand_x, align 4
  %787 = load i32, i32* %mvshift, align 4
  %shl863 = shl i32 %786, %787
  %788 = load i32, i32* %pred_x, align 4
  %sub864 = sub nsw i32 %shl863, %788
  %idxprom865 = sext i32 %sub864 to i64
  %arrayidx866 = getelementptr inbounds i32, i32* %785, i64 %idxprom865
  %789 = load i32, i32* %arrayidx866, align 4
  %790 = load i32*, i32** @mvbits, align 8
  %791 = load i32, i32* %cand_y, align 4
  %792 = load i32, i32* %mvshift, align 4
  %shl867 = shl i32 %791, %792
  %793 = load i32, i32* %pred_y, align 4
  %sub868 = sub nsw i32 %shl867, %793
  %idxprom869 = sext i32 %sub868 to i64
  %arrayidx870 = getelementptr inbounds i32, i32* %790, i64 %idxprom869
  %794 = load i32, i32* %arrayidx870, align 4
  %add871 = add nsw i32 %789, %794
  %mul872 = mul nsw i32 %784, %add871
  %shr873 = ashr i32 %mul872, 16
  store i32 %shr873, i32* %mcost, align 4
  %795 = load i16*, i16** %ref_pic, align 8
  %796 = load i16**, i16*** %orig_pic.addr, align 8
  %797 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %798 = load i32, i32* %blocksize_y, align 4
  %799 = load i32, i32* %blocksize_x, align 4
  %800 = load i32, i32* %blocksize_x4, align 4
  %801 = load i32, i32* %mcost, align 4
  %802 = load i32, i32* %min_mcost.addr, align 4
  %803 = load i32, i32* %cand_x, align 4
  %804 = load i32, i32* %cand_y, align 4
  %call874 = call i32 @PartCalMad(i16* %795, i16** %796, i16* (i32, i16*, i32, i32, i32, i32)* %797, i32 %798, i32 %799, i32 %800, i32 %801, i32 %802, i32 %803, i32 %804)
  store i32 %call874, i32* %mcost, align 4
  %805 = load i32, i32* %mcost, align 4
  %806 = load i32**, i32*** @McostState, align 8
  %807 = load i32, i32* %cand_y, align 4
  %808 = load i32, i32* %center_y, align 4
  %sub875 = sub nsw i32 %807, %808
  %809 = load i32, i32* %search_range.addr, align 4
  %add876 = add nsw i32 %sub875, %809
  %idxprom877 = sext i32 %add876 to i64
  %arrayidx878 = getelementptr inbounds i32*, i32** %806, i64 %idxprom877
  %810 = load i32*, i32** %arrayidx878, align 8
  %811 = load i32, i32* %cand_x, align 4
  %812 = load i32, i32* %center_x, align 4
  %sub879 = sub nsw i32 %811, %812
  %813 = load i32, i32* %search_range.addr, align 4
  %add880 = add nsw i32 %sub879, %813
  %idxprom881 = sext i32 %add880 to i64
  %arrayidx882 = getelementptr inbounds i32, i32* %810, i64 %idxprom881
  store i32 %805, i32* %arrayidx882, align 4
  %814 = load i32, i32* %mcost, align 4
  %815 = load i32, i32* %min_mcost.addr, align 4
  %cmp883 = icmp slt i32 %814, %815
  br i1 %cmp883, label %if.then885, label %if.end886

if.then885:                                       ; preds = %if.then862
  %816 = load i32, i32* %cand_x, align 4
  store i32 %816, i32* %best_x, align 4
  %817 = load i32, i32* %cand_y, align 4
  store i32 %817, i32* %best_y, align 4
  %818 = load i32, i32* %mcost, align 4
  store i32 %818, i32* %min_mcost.addr, align 4
  br label %if.end886

if.end886:                                        ; preds = %if.then885, %if.then862
  br label %if.end887

if.end887:                                        ; preds = %if.end886, %if.then852
  br label %if.end888

if.end888:                                        ; preds = %if.end887, %land.lhs.true847, %for.body839
  %819 = load i32, i32* %iXMinNow, align 4
  store i32 %819, i32* %cand_x, align 4
  %820 = load i32, i32* %iYMinNow, align 4
  %821 = load i32, i32* %search_step, align 4
  %sub889 = sub nsw i32 %820, %821
  store i32 %sub889, i32* %cand_y, align 4
  %822 = load i32, i32* %cand_x, align 4
  %823 = load i32, i32* %center_x, align 4
  %sub890 = sub nsw i32 %822, %823
  %call891 = call i32 @abs(i32 %sub890) #6
  %824 = load i32, i32* %search_range.addr, align 4
  %cmp892 = icmp sle i32 %call891, %824
  br i1 %cmp892, label %land.lhs.true894, label %if.end935

land.lhs.true894:                                 ; preds = %if.end888
  %825 = load i32, i32* %cand_y, align 4
  %826 = load i32, i32* %center_y, align 4
  %sub895 = sub nsw i32 %825, %826
  %call896 = call i32 @abs(i32 %sub895) #6
  %827 = load i32, i32* %search_range.addr, align 4
  %cmp897 = icmp sle i32 %call896, %827
  br i1 %cmp897, label %if.then899, label %if.end935

if.then899:                                       ; preds = %land.lhs.true894
  %828 = load i32**, i32*** @McostState, align 8
  %829 = load i32, i32* %cand_y, align 4
  %830 = load i32, i32* %center_y, align 4
  %sub900 = sub nsw i32 %829, %830
  %831 = load i32, i32* %search_range.addr, align 4
  %add901 = add nsw i32 %sub900, %831
  %idxprom902 = sext i32 %add901 to i64
  %arrayidx903 = getelementptr inbounds i32*, i32** %828, i64 %idxprom902
  %832 = load i32*, i32** %arrayidx903, align 8
  %833 = load i32, i32* %cand_x, align 4
  %834 = load i32, i32* %center_x, align 4
  %sub904 = sub nsw i32 %833, %834
  %835 = load i32, i32* %search_range.addr, align 4
  %add905 = add nsw i32 %sub904, %835
  %idxprom906 = sext i32 %add905 to i64
  %arrayidx907 = getelementptr inbounds i32, i32* %832, i64 %idxprom906
  %836 = load i32, i32* %arrayidx907, align 4
  %tobool908 = icmp ne i32 %836, 0
  br i1 %tobool908, label %if.end934, label %if.then909

if.then909:                                       ; preds = %if.then899
  %837 = load i32, i32* %lambda_factor, align 4
  %838 = load i32*, i32** @mvbits, align 8
  %839 = load i32, i32* %cand_x, align 4
  %840 = load i32, i32* %mvshift, align 4
  %shl910 = shl i32 %839, %840
  %841 = load i32, i32* %pred_x, align 4
  %sub911 = sub nsw i32 %shl910, %841
  %idxprom912 = sext i32 %sub911 to i64
  %arrayidx913 = getelementptr inbounds i32, i32* %838, i64 %idxprom912
  %842 = load i32, i32* %arrayidx913, align 4
  %843 = load i32*, i32** @mvbits, align 8
  %844 = load i32, i32* %cand_y, align 4
  %845 = load i32, i32* %mvshift, align 4
  %shl914 = shl i32 %844, %845
  %846 = load i32, i32* %pred_y, align 4
  %sub915 = sub nsw i32 %shl914, %846
  %idxprom916 = sext i32 %sub915 to i64
  %arrayidx917 = getelementptr inbounds i32, i32* %843, i64 %idxprom916
  %847 = load i32, i32* %arrayidx917, align 4
  %add918 = add nsw i32 %842, %847
  %mul919 = mul nsw i32 %837, %add918
  %shr920 = ashr i32 %mul919, 16
  store i32 %shr920, i32* %mcost, align 4
  %848 = load i16*, i16** %ref_pic, align 8
  %849 = load i16**, i16*** %orig_pic.addr, align 8
  %850 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %851 = load i32, i32* %blocksize_y, align 4
  %852 = load i32, i32* %blocksize_x, align 4
  %853 = load i32, i32* %blocksize_x4, align 4
  %854 = load i32, i32* %mcost, align 4
  %855 = load i32, i32* %min_mcost.addr, align 4
  %856 = load i32, i32* %cand_x, align 4
  %857 = load i32, i32* %cand_y, align 4
  %call921 = call i32 @PartCalMad(i16* %848, i16** %849, i16* (i32, i16*, i32, i32, i32, i32)* %850, i32 %851, i32 %852, i32 %853, i32 %854, i32 %855, i32 %856, i32 %857)
  store i32 %call921, i32* %mcost, align 4
  %858 = load i32, i32* %mcost, align 4
  %859 = load i32**, i32*** @McostState, align 8
  %860 = load i32, i32* %cand_y, align 4
  %861 = load i32, i32* %center_y, align 4
  %sub922 = sub nsw i32 %860, %861
  %862 = load i32, i32* %search_range.addr, align 4
  %add923 = add nsw i32 %sub922, %862
  %idxprom924 = sext i32 %add923 to i64
  %arrayidx925 = getelementptr inbounds i32*, i32** %859, i64 %idxprom924
  %863 = load i32*, i32** %arrayidx925, align 8
  %864 = load i32, i32* %cand_x, align 4
  %865 = load i32, i32* %center_x, align 4
  %sub926 = sub nsw i32 %864, %865
  %866 = load i32, i32* %search_range.addr, align 4
  %add927 = add nsw i32 %sub926, %866
  %idxprom928 = sext i32 %add927 to i64
  %arrayidx929 = getelementptr inbounds i32, i32* %863, i64 %idxprom928
  store i32 %858, i32* %arrayidx929, align 4
  %867 = load i32, i32* %mcost, align 4
  %868 = load i32, i32* %min_mcost.addr, align 4
  %cmp930 = icmp slt i32 %867, %868
  br i1 %cmp930, label %if.then932, label %if.end933

if.then932:                                       ; preds = %if.then909
  %869 = load i32, i32* %cand_x, align 4
  store i32 %869, i32* %best_x, align 4
  %870 = load i32, i32* %cand_y, align 4
  store i32 %870, i32* %best_y, align 4
  %871 = load i32, i32* %mcost, align 4
  store i32 %871, i32* %min_mcost.addr, align 4
  br label %if.end933

if.end933:                                        ; preds = %if.then932, %if.then909
  br label %if.end934

if.end934:                                        ; preds = %if.end933, %if.then899
  br label %if.end935

if.end935:                                        ; preds = %if.end934, %land.lhs.true894, %if.end888
  br label %for.inc936

for.inc936:                                       ; preds = %if.end935
  %872 = load i32, i32* %i, align 4
  %inc937 = add nsw i32 %872, 1
  store i32 %inc937, i32* %i, align 4
  br label %for.cond835

for.end938:                                       ; preds = %for.cond835
  %873 = load i16, i16* %ref.addr, align 2
  %conv939 = sext i16 %873 to i32
  %cmp940 = icmp sgt i32 %conv939, 0
  br i1 %cmp940, label %if.then942, label %if.else960

if.then942:                                       ; preds = %for.end938
  %874 = load i32, i32* %min_mcost.addr, align 4
  %875 = load i32, i32* @pred_SAD_ref, align 4
  %sub943 = sub nsw i32 %874, %875
  %conv944 = sitofp i32 %sub943 to float
  %876 = load i32, i32* @pred_SAD_ref, align 4
  %conv945 = sitofp i32 %876 to float
  %877 = load float, float* %betaThird, align 4
  %mul946 = fmul float %conv945, %877
  %cmp947 = fcmp olt float %conv944, %mul946
  br i1 %cmp947, label %if.then949, label %if.else950

if.then949:                                       ; preds = %if.then942
  br label %third_step

if.else950:                                       ; preds = %if.then942
  %878 = load i32, i32* %min_mcost.addr, align 4
  %879 = load i32, i32* @pred_SAD_ref, align 4
  %sub951 = sub nsw i32 %878, %879
  %conv952 = sitofp i32 %sub951 to float
  %880 = load i32, i32* @pred_SAD_ref, align 4
  %conv953 = sitofp i32 %880 to float
  %881 = load float, float* %betaSec, align 4
  %mul954 = fmul float %conv953, %881
  %cmp955 = fcmp olt float %conv952, %mul954
  br i1 %cmp955, label %if.then957, label %if.end958

if.then957:                                       ; preds = %if.else950
  br label %sec_step

if.end958:                                        ; preds = %if.else950
  br label %if.end959

if.end959:                                        ; preds = %if.end958
  br label %if.end1000

if.else960:                                       ; preds = %for.end938
  %882 = load i32, i32* %blocktype.addr, align 4
  %cmp961 = icmp sgt i32 %882, 1
  br i1 %cmp961, label %if.then963, label %if.else981

if.then963:                                       ; preds = %if.else960
  %883 = load i32, i32* %min_mcost.addr, align 4
  %884 = load i32, i32* @pred_SAD_uplayer, align 4
  %sub964 = sub nsw i32 %883, %884
  %conv965 = sitofp i32 %sub964 to float
  %885 = load i32, i32* @pred_SAD_uplayer, align 4
  %conv966 = sitofp i32 %885 to float
  %886 = load float, float* %betaThird, align 4
  %mul967 = fmul float %conv966, %886
  %cmp968 = fcmp olt float %conv965, %mul967
  br i1 %cmp968, label %if.then970, label %if.else971

if.then970:                                       ; preds = %if.then963
  br label %third_step

if.else971:                                       ; preds = %if.then963
  %887 = load i32, i32* %min_mcost.addr, align 4
  %888 = load i32, i32* @pred_SAD_uplayer, align 4
  %sub972 = sub nsw i32 %887, %888
  %conv973 = sitofp i32 %sub972 to float
  %889 = load i32, i32* @pred_SAD_uplayer, align 4
  %conv974 = sitofp i32 %889 to float
  %890 = load float, float* %betaSec, align 4
  %mul975 = fmul float %conv974, %890
  %cmp976 = fcmp olt float %conv973, %mul975
  br i1 %cmp976, label %if.then978, label %if.end979

if.then978:                                       ; preds = %if.else971
  br label %sec_step

if.end979:                                        ; preds = %if.else971
  br label %if.end980

if.end980:                                        ; preds = %if.end979
  br label %if.end999

if.else981:                                       ; preds = %if.else960
  %891 = load i32, i32* %min_mcost.addr, align 4
  %892 = load i32, i32* @pred_SAD_space, align 4
  %sub982 = sub nsw i32 %891, %892
  %conv983 = sitofp i32 %sub982 to float
  %893 = load i32, i32* @pred_SAD_space, align 4
  %conv984 = sitofp i32 %893 to float
  %894 = load float, float* %betaThird, align 4
  %mul985 = fmul float %conv984, %894
  %cmp986 = fcmp olt float %conv983, %mul985
  br i1 %cmp986, label %if.then988, label %if.else989

if.then988:                                       ; preds = %if.else981
  br label %third_step

if.else989:                                       ; preds = %if.else981
  %895 = load i32, i32* %min_mcost.addr, align 4
  %896 = load i32, i32* @pred_SAD_space, align 4
  %sub990 = sub nsw i32 %895, %896
  %conv991 = sitofp i32 %sub990 to float
  %897 = load i32, i32* @pred_SAD_space, align 4
  %conv992 = sitofp i32 %897 to float
  %898 = load float, float* %betaSec, align 4
  %mul993 = fmul float %conv992, %898
  %cmp994 = fcmp olt float %conv991, %mul993
  br i1 %cmp994, label %if.then996, label %if.end997

if.then996:                                       ; preds = %if.else989
  br label %sec_step

if.end997:                                        ; preds = %if.else989
  br label %if.end998

if.end998:                                        ; preds = %if.end997
  br label %if.end999

if.end999:                                        ; preds = %if.end998, %if.end980
  br label %if.end1000

if.end1000:                                       ; preds = %if.end999, %if.end959
  %899 = load i32, i32* %best_x, align 4
  store i32 %899, i32* %iXMinNow, align 4
  %900 = load i32, i32* %best_y, align 4
  store i32 %900, i32* %iYMinNow, align 4
  store i32 1, i32* %pos, align 4
  br label %for.cond1001

for.cond1001:                                     ; preds = %for.inc1057, %if.end1000
  %901 = load i32, i32* %pos, align 4
  %cmp1002 = icmp slt i32 %901, 25
  br i1 %cmp1002, label %for.body1004, label %for.end1059

for.body1004:                                     ; preds = %for.cond1001
  %902 = load i32, i32* %iXMinNow, align 4
  %903 = load i32*, i32** @spiral_search_x, align 8
  %904 = load i32, i32* %pos, align 4
  %idxprom1005 = sext i32 %904 to i64
  %arrayidx1006 = getelementptr inbounds i32, i32* %903, i64 %idxprom1005
  %905 = load i32, i32* %arrayidx1006, align 4
  %add1007 = add nsw i32 %902, %905
  store i32 %add1007, i32* %cand_x, align 4
  %906 = load i32, i32* %iYMinNow, align 4
  %907 = load i32*, i32** @spiral_search_y, align 8
  %908 = load i32, i32* %pos, align 4
  %idxprom1008 = sext i32 %908 to i64
  %arrayidx1009 = getelementptr inbounds i32, i32* %907, i64 %idxprom1008
  %909 = load i32, i32* %arrayidx1009, align 4
  %add1010 = add nsw i32 %906, %909
  store i32 %add1010, i32* %cand_y, align 4
  %910 = load i32, i32* %cand_x, align 4
  %911 = load i32, i32* %center_x, align 4
  %sub1011 = sub nsw i32 %910, %911
  %call1012 = call i32 @abs(i32 %sub1011) #6
  %912 = load i32, i32* %search_range.addr, align 4
  %cmp1013 = icmp sle i32 %call1012, %912
  br i1 %cmp1013, label %land.lhs.true1015, label %if.end1056

land.lhs.true1015:                                ; preds = %for.body1004
  %913 = load i32, i32* %cand_y, align 4
  %914 = load i32, i32* %center_y, align 4
  %sub1016 = sub nsw i32 %913, %914
  %call1017 = call i32 @abs(i32 %sub1016) #6
  %915 = load i32, i32* %search_range.addr, align 4
  %cmp1018 = icmp sle i32 %call1017, %915
  br i1 %cmp1018, label %if.then1020, label %if.end1056

if.then1020:                                      ; preds = %land.lhs.true1015
  %916 = load i32**, i32*** @McostState, align 8
  %917 = load i32, i32* %cand_y, align 4
  %918 = load i32, i32* %center_y, align 4
  %sub1021 = sub nsw i32 %917, %918
  %919 = load i32, i32* %search_range.addr, align 4
  %add1022 = add nsw i32 %sub1021, %919
  %idxprom1023 = sext i32 %add1022 to i64
  %arrayidx1024 = getelementptr inbounds i32*, i32** %916, i64 %idxprom1023
  %920 = load i32*, i32** %arrayidx1024, align 8
  %921 = load i32, i32* %cand_x, align 4
  %922 = load i32, i32* %center_x, align 4
  %sub1025 = sub nsw i32 %921, %922
  %923 = load i32, i32* %search_range.addr, align 4
  %add1026 = add nsw i32 %sub1025, %923
  %idxprom1027 = sext i32 %add1026 to i64
  %arrayidx1028 = getelementptr inbounds i32, i32* %920, i64 %idxprom1027
  %924 = load i32, i32* %arrayidx1028, align 4
  %tobool1029 = icmp ne i32 %924, 0
  br i1 %tobool1029, label %if.end1055, label %if.then1030

if.then1030:                                      ; preds = %if.then1020
  %925 = load i32, i32* %lambda_factor, align 4
  %926 = load i32*, i32** @mvbits, align 8
  %927 = load i32, i32* %cand_x, align 4
  %928 = load i32, i32* %mvshift, align 4
  %shl1031 = shl i32 %927, %928
  %929 = load i32, i32* %pred_x, align 4
  %sub1032 = sub nsw i32 %shl1031, %929
  %idxprom1033 = sext i32 %sub1032 to i64
  %arrayidx1034 = getelementptr inbounds i32, i32* %926, i64 %idxprom1033
  %930 = load i32, i32* %arrayidx1034, align 4
  %931 = load i32*, i32** @mvbits, align 8
  %932 = load i32, i32* %cand_y, align 4
  %933 = load i32, i32* %mvshift, align 4
  %shl1035 = shl i32 %932, %933
  %934 = load i32, i32* %pred_y, align 4
  %sub1036 = sub nsw i32 %shl1035, %934
  %idxprom1037 = sext i32 %sub1036 to i64
  %arrayidx1038 = getelementptr inbounds i32, i32* %931, i64 %idxprom1037
  %935 = load i32, i32* %arrayidx1038, align 4
  %add1039 = add nsw i32 %930, %935
  %mul1040 = mul nsw i32 %925, %add1039
  %shr1041 = ashr i32 %mul1040, 16
  store i32 %shr1041, i32* %mcost, align 4
  %936 = load i16*, i16** %ref_pic, align 8
  %937 = load i16**, i16*** %orig_pic.addr, align 8
  %938 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %939 = load i32, i32* %blocksize_y, align 4
  %940 = load i32, i32* %blocksize_x, align 4
  %941 = load i32, i32* %blocksize_x4, align 4
  %942 = load i32, i32* %mcost, align 4
  %943 = load i32, i32* %min_mcost.addr, align 4
  %944 = load i32, i32* %cand_x, align 4
  %945 = load i32, i32* %cand_y, align 4
  %call1042 = call i32 @PartCalMad(i16* %936, i16** %937, i16* (i32, i16*, i32, i32, i32, i32)* %938, i32 %939, i32 %940, i32 %941, i32 %942, i32 %943, i32 %944, i32 %945)
  store i32 %call1042, i32* %mcost, align 4
  %946 = load i32, i32* %mcost, align 4
  %947 = load i32**, i32*** @McostState, align 8
  %948 = load i32, i32* %cand_y, align 4
  %949 = load i32, i32* %center_y, align 4
  %sub1043 = sub nsw i32 %948, %949
  %950 = load i32, i32* %search_range.addr, align 4
  %add1044 = add nsw i32 %sub1043, %950
  %idxprom1045 = sext i32 %add1044 to i64
  %arrayidx1046 = getelementptr inbounds i32*, i32** %947, i64 %idxprom1045
  %951 = load i32*, i32** %arrayidx1046, align 8
  %952 = load i32, i32* %cand_x, align 4
  %953 = load i32, i32* %center_x, align 4
  %sub1047 = sub nsw i32 %952, %953
  %954 = load i32, i32* %search_range.addr, align 4
  %add1048 = add nsw i32 %sub1047, %954
  %idxprom1049 = sext i32 %add1048 to i64
  %arrayidx1050 = getelementptr inbounds i32, i32* %951, i64 %idxprom1049
  store i32 %946, i32* %arrayidx1050, align 4
  %955 = load i32, i32* %mcost, align 4
  %956 = load i32, i32* %min_mcost.addr, align 4
  %cmp1051 = icmp slt i32 %955, %956
  br i1 %cmp1051, label %if.then1053, label %if.end1054

if.then1053:                                      ; preds = %if.then1030
  %957 = load i32, i32* %cand_x, align 4
  store i32 %957, i32* %best_x, align 4
  %958 = load i32, i32* %cand_y, align 4
  store i32 %958, i32* %best_y, align 4
  %959 = load i32, i32* %mcost, align 4
  store i32 %959, i32* %min_mcost.addr, align 4
  br label %if.end1054

if.end1054:                                       ; preds = %if.then1053, %if.then1030
  br label %if.end1055

if.end1055:                                       ; preds = %if.end1054, %if.then1020
  br label %if.end1056

if.end1056:                                       ; preds = %if.end1055, %land.lhs.true1015, %for.body1004
  br label %for.inc1057

for.inc1057:                                      ; preds = %if.end1056
  %960 = load i32, i32* %pos, align 4
  %inc1058 = add nsw i32 %960, 1
  store i32 %inc1058, i32* %pos, align 4
  br label %for.cond1001

for.end1059:                                      ; preds = %for.cond1001
  %961 = load i16, i16* %ref.addr, align 2
  %conv1060 = sext i16 %961 to i32
  %cmp1061 = icmp sgt i32 %conv1060, 0
  br i1 %cmp1061, label %if.then1063, label %if.else1081

if.then1063:                                      ; preds = %for.end1059
  %962 = load i32, i32* %min_mcost.addr, align 4
  %963 = load i32, i32* @pred_SAD_ref, align 4
  %sub1064 = sub nsw i32 %962, %963
  %conv1065 = sitofp i32 %sub1064 to float
  %964 = load i32, i32* @pred_SAD_ref, align 4
  %conv1066 = sitofp i32 %964 to float
  %965 = load float, float* %betaThird, align 4
  %mul1067 = fmul float %conv1066, %965
  %cmp1068 = fcmp olt float %conv1065, %mul1067
  br i1 %cmp1068, label %if.then1070, label %if.else1071

if.then1070:                                      ; preds = %if.then1063
  br label %third_step

if.else1071:                                      ; preds = %if.then1063
  %966 = load i32, i32* %min_mcost.addr, align 4
  %967 = load i32, i32* @pred_SAD_ref, align 4
  %sub1072 = sub nsw i32 %966, %967
  %conv1073 = sitofp i32 %sub1072 to float
  %968 = load i32, i32* @pred_SAD_ref, align 4
  %conv1074 = sitofp i32 %968 to float
  %969 = load float, float* %betaSec, align 4
  %mul1075 = fmul float %conv1074, %969
  %cmp1076 = fcmp olt float %conv1073, %mul1075
  br i1 %cmp1076, label %if.then1078, label %if.end1079

if.then1078:                                      ; preds = %if.else1071
  br label %sec_step

if.end1079:                                       ; preds = %if.else1071
  br label %if.end1080

if.end1080:                                       ; preds = %if.end1079
  br label %if.end1121

if.else1081:                                      ; preds = %for.end1059
  %970 = load i32, i32* %blocktype.addr, align 4
  %cmp1082 = icmp sgt i32 %970, 1
  br i1 %cmp1082, label %if.then1084, label %if.else1102

if.then1084:                                      ; preds = %if.else1081
  %971 = load i32, i32* %min_mcost.addr, align 4
  %972 = load i32, i32* @pred_SAD_uplayer, align 4
  %sub1085 = sub nsw i32 %971, %972
  %conv1086 = sitofp i32 %sub1085 to float
  %973 = load i32, i32* @pred_SAD_uplayer, align 4
  %conv1087 = sitofp i32 %973 to float
  %974 = load float, float* %betaThird, align 4
  %mul1088 = fmul float %conv1087, %974
  %cmp1089 = fcmp olt float %conv1086, %mul1088
  br i1 %cmp1089, label %if.then1091, label %if.else1092

if.then1091:                                      ; preds = %if.then1084
  br label %third_step

if.else1092:                                      ; preds = %if.then1084
  %975 = load i32, i32* %min_mcost.addr, align 4
  %976 = load i32, i32* @pred_SAD_uplayer, align 4
  %sub1093 = sub nsw i32 %975, %976
  %conv1094 = sitofp i32 %sub1093 to float
  %977 = load i32, i32* @pred_SAD_uplayer, align 4
  %conv1095 = sitofp i32 %977 to float
  %978 = load float, float* %betaSec, align 4
  %mul1096 = fmul float %conv1095, %978
  %cmp1097 = fcmp olt float %conv1094, %mul1096
  br i1 %cmp1097, label %if.then1099, label %if.end1100

if.then1099:                                      ; preds = %if.else1092
  br label %sec_step

if.end1100:                                       ; preds = %if.else1092
  br label %if.end1101

if.end1101:                                       ; preds = %if.end1100
  br label %if.end1120

if.else1102:                                      ; preds = %if.else1081
  %979 = load i32, i32* %min_mcost.addr, align 4
  %980 = load i32, i32* @pred_SAD_space, align 4
  %sub1103 = sub nsw i32 %979, %980
  %conv1104 = sitofp i32 %sub1103 to float
  %981 = load i32, i32* @pred_SAD_space, align 4
  %conv1105 = sitofp i32 %981 to float
  %982 = load float, float* %betaThird, align 4
  %mul1106 = fmul float %conv1105, %982
  %cmp1107 = fcmp olt float %conv1104, %mul1106
  br i1 %cmp1107, label %if.then1109, label %if.else1110

if.then1109:                                      ; preds = %if.else1102
  br label %third_step

if.else1110:                                      ; preds = %if.else1102
  %983 = load i32, i32* %min_mcost.addr, align 4
  %984 = load i32, i32* @pred_SAD_space, align 4
  %sub1111 = sub nsw i32 %983, %984
  %conv1112 = sitofp i32 %sub1111 to float
  %985 = load i32, i32* @pred_SAD_space, align 4
  %conv1113 = sitofp i32 %985 to float
  %986 = load float, float* %betaSec, align 4
  %mul1114 = fmul float %conv1113, %986
  %cmp1115 = fcmp olt float %conv1112, %mul1114
  br i1 %cmp1115, label %if.then1117, label %if.end1118

if.then1117:                                      ; preds = %if.else1110
  br label %sec_step

if.end1118:                                       ; preds = %if.else1110
  br label %if.end1119

if.end1119:                                       ; preds = %if.end1118
  br label %if.end1120

if.end1120:                                       ; preds = %if.end1119, %if.end1101
  br label %if.end1121

if.end1121:                                       ; preds = %if.end1120, %if.end1080
  store i32 1, i32* %i, align 4
  br label %for.cond1122

for.cond1122:                                     ; preds = %for.inc1253, %if.end1121
  %987 = load i32, i32* %i, align 4
  %988 = load i32, i32* %search_range.addr, align 4
  %div1123 = sdiv i32 %988, 4
  %cmp1124 = icmp sle i32 %987, %div1123
  br i1 %cmp1124, label %for.body1126, label %for.end1255

for.body1126:                                     ; preds = %for.cond1122
  store i32 0, i32* %iAbort, align 4
  store i32 0, i32* %m, align 4
  br label %for.cond1127

for.cond1127:                                     ; preds = %for.inc1185, %for.body1126
  %989 = load i32, i32* %m, align 4
  %cmp1128 = icmp slt i32 %989, 16
  br i1 %cmp1128, label %for.body1130, label %for.end1187

for.body1130:                                     ; preds = %for.cond1127
  %990 = load i32, i32* %iXMinNow, align 4
  %991 = load i32, i32* %m, align 4
  %idxprom1131 = sext i32 %991 to i64
  %arrayidx1132 = getelementptr inbounds [16 x i32], [16 x i32]* @FastIntegerPelBlockMotionSearch.Big_Hexagon_x, i64 0, i64 %idxprom1131
  %992 = load i32, i32* %arrayidx1132, align 4
  %993 = load i32, i32* %i, align 4
  %mul1133 = mul nsw i32 %992, %993
  %add1134 = add nsw i32 %990, %mul1133
  store i32 %add1134, i32* %cand_x, align 4
  %994 = load i32, i32* %iYMinNow, align 4
  %995 = load i32, i32* %m, align 4
  %idxprom1135 = sext i32 %995 to i64
  %arrayidx1136 = getelementptr inbounds [16 x i32], [16 x i32]* @FastIntegerPelBlockMotionSearch.Big_Hexagon_y, i64 0, i64 %idxprom1135
  %996 = load i32, i32* %arrayidx1136, align 4
  %997 = load i32, i32* %i, align 4
  %mul1137 = mul nsw i32 %996, %997
  %add1138 = add nsw i32 %994, %mul1137
  store i32 %add1138, i32* %cand_y, align 4
  %998 = load i32, i32* %cand_x, align 4
  %999 = load i32, i32* %center_x, align 4
  %sub1139 = sub nsw i32 %998, %999
  %call1140 = call i32 @abs(i32 %sub1139) #6
  %1000 = load i32, i32* %search_range.addr, align 4
  %cmp1141 = icmp sle i32 %call1140, %1000
  br i1 %cmp1141, label %land.lhs.true1143, label %if.end1184

land.lhs.true1143:                                ; preds = %for.body1130
  %1001 = load i32, i32* %cand_y, align 4
  %1002 = load i32, i32* %center_y, align 4
  %sub1144 = sub nsw i32 %1001, %1002
  %call1145 = call i32 @abs(i32 %sub1144) #6
  %1003 = load i32, i32* %search_range.addr, align 4
  %cmp1146 = icmp sle i32 %call1145, %1003
  br i1 %cmp1146, label %if.then1148, label %if.end1184

if.then1148:                                      ; preds = %land.lhs.true1143
  %1004 = load i32**, i32*** @McostState, align 8
  %1005 = load i32, i32* %cand_y, align 4
  %1006 = load i32, i32* %center_y, align 4
  %sub1149 = sub nsw i32 %1005, %1006
  %1007 = load i32, i32* %search_range.addr, align 4
  %add1150 = add nsw i32 %sub1149, %1007
  %idxprom1151 = sext i32 %add1150 to i64
  %arrayidx1152 = getelementptr inbounds i32*, i32** %1004, i64 %idxprom1151
  %1008 = load i32*, i32** %arrayidx1152, align 8
  %1009 = load i32, i32* %cand_x, align 4
  %1010 = load i32, i32* %center_x, align 4
  %sub1153 = sub nsw i32 %1009, %1010
  %1011 = load i32, i32* %search_range.addr, align 4
  %add1154 = add nsw i32 %sub1153, %1011
  %idxprom1155 = sext i32 %add1154 to i64
  %arrayidx1156 = getelementptr inbounds i32, i32* %1008, i64 %idxprom1155
  %1012 = load i32, i32* %arrayidx1156, align 4
  %tobool1157 = icmp ne i32 %1012, 0
  br i1 %tobool1157, label %if.end1183, label %if.then1158

if.then1158:                                      ; preds = %if.then1148
  %1013 = load i32, i32* %lambda_factor, align 4
  %1014 = load i32*, i32** @mvbits, align 8
  %1015 = load i32, i32* %cand_x, align 4
  %1016 = load i32, i32* %mvshift, align 4
  %shl1159 = shl i32 %1015, %1016
  %1017 = load i32, i32* %pred_x, align 4
  %sub1160 = sub nsw i32 %shl1159, %1017
  %idxprom1161 = sext i32 %sub1160 to i64
  %arrayidx1162 = getelementptr inbounds i32, i32* %1014, i64 %idxprom1161
  %1018 = load i32, i32* %arrayidx1162, align 4
  %1019 = load i32*, i32** @mvbits, align 8
  %1020 = load i32, i32* %cand_y, align 4
  %1021 = load i32, i32* %mvshift, align 4
  %shl1163 = shl i32 %1020, %1021
  %1022 = load i32, i32* %pred_y, align 4
  %sub1164 = sub nsw i32 %shl1163, %1022
  %idxprom1165 = sext i32 %sub1164 to i64
  %arrayidx1166 = getelementptr inbounds i32, i32* %1019, i64 %idxprom1165
  %1023 = load i32, i32* %arrayidx1166, align 4
  %add1167 = add nsw i32 %1018, %1023
  %mul1168 = mul nsw i32 %1013, %add1167
  %shr1169 = ashr i32 %mul1168, 16
  store i32 %shr1169, i32* %mcost, align 4
  %1024 = load i16*, i16** %ref_pic, align 8
  %1025 = load i16**, i16*** %orig_pic.addr, align 8
  %1026 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %1027 = load i32, i32* %blocksize_y, align 4
  %1028 = load i32, i32* %blocksize_x, align 4
  %1029 = load i32, i32* %blocksize_x4, align 4
  %1030 = load i32, i32* %mcost, align 4
  %1031 = load i32, i32* %min_mcost.addr, align 4
  %1032 = load i32, i32* %cand_x, align 4
  %1033 = load i32, i32* %cand_y, align 4
  %call1170 = call i32 @PartCalMad(i16* %1024, i16** %1025, i16* (i32, i16*, i32, i32, i32, i32)* %1026, i32 %1027, i32 %1028, i32 %1029, i32 %1030, i32 %1031, i32 %1032, i32 %1033)
  store i32 %call1170, i32* %mcost, align 4
  %1034 = load i32, i32* %mcost, align 4
  %1035 = load i32**, i32*** @McostState, align 8
  %1036 = load i32, i32* %cand_y, align 4
  %1037 = load i32, i32* %center_y, align 4
  %sub1171 = sub nsw i32 %1036, %1037
  %1038 = load i32, i32* %search_range.addr, align 4
  %add1172 = add nsw i32 %sub1171, %1038
  %idxprom1173 = sext i32 %add1172 to i64
  %arrayidx1174 = getelementptr inbounds i32*, i32** %1035, i64 %idxprom1173
  %1039 = load i32*, i32** %arrayidx1174, align 8
  %1040 = load i32, i32* %cand_x, align 4
  %1041 = load i32, i32* %center_x, align 4
  %sub1175 = sub nsw i32 %1040, %1041
  %1042 = load i32, i32* %search_range.addr, align 4
  %add1176 = add nsw i32 %sub1175, %1042
  %idxprom1177 = sext i32 %add1176 to i64
  %arrayidx1178 = getelementptr inbounds i32, i32* %1039, i64 %idxprom1177
  store i32 %1034, i32* %arrayidx1178, align 4
  %1043 = load i32, i32* %mcost, align 4
  %1044 = load i32, i32* %min_mcost.addr, align 4
  %cmp1179 = icmp slt i32 %1043, %1044
  br i1 %cmp1179, label %if.then1181, label %if.end1182

if.then1181:                                      ; preds = %if.then1158
  %1045 = load i32, i32* %cand_x, align 4
  store i32 %1045, i32* %best_x, align 4
  %1046 = load i32, i32* %cand_y, align 4
  store i32 %1046, i32* %best_y, align 4
  %1047 = load i32, i32* %mcost, align 4
  store i32 %1047, i32* %min_mcost.addr, align 4
  store i32 1, i32* %iAbort, align 4
  br label %if.end1182

if.end1182:                                       ; preds = %if.then1181, %if.then1158
  br label %if.end1183

if.end1183:                                       ; preds = %if.end1182, %if.then1148
  br label %if.end1184

if.end1184:                                       ; preds = %if.end1183, %land.lhs.true1143, %for.body1130
  br label %for.inc1185

for.inc1185:                                      ; preds = %if.end1184
  %1048 = load i32, i32* %m, align 4
  %inc1186 = add nsw i32 %1048, 1
  store i32 %inc1186, i32* %m, align 4
  br label %for.cond1127

for.end1187:                                      ; preds = %for.cond1127
  %1049 = load i32, i32* %iAbort, align 4
  %tobool1188 = icmp ne i32 %1049, 0
  br i1 %tobool1188, label %if.then1189, label %if.end1252

if.then1189:                                      ; preds = %for.end1187
  %1050 = load i16, i16* %ref.addr, align 2
  %conv1190 = sext i16 %1050 to i32
  %cmp1191 = icmp sgt i32 %conv1190, 0
  br i1 %cmp1191, label %if.then1193, label %if.else1211

if.then1193:                                      ; preds = %if.then1189
  %1051 = load i32, i32* %min_mcost.addr, align 4
  %1052 = load i32, i32* @pred_SAD_ref, align 4
  %sub1194 = sub nsw i32 %1051, %1052
  %conv1195 = sitofp i32 %sub1194 to float
  %1053 = load i32, i32* @pred_SAD_ref, align 4
  %conv1196 = sitofp i32 %1053 to float
  %1054 = load float, float* %betaThird, align 4
  %mul1197 = fmul float %conv1196, %1054
  %cmp1198 = fcmp olt float %conv1195, %mul1197
  br i1 %cmp1198, label %if.then1200, label %if.else1201

if.then1200:                                      ; preds = %if.then1193
  br label %third_step

if.else1201:                                      ; preds = %if.then1193
  %1055 = load i32, i32* %min_mcost.addr, align 4
  %1056 = load i32, i32* @pred_SAD_ref, align 4
  %sub1202 = sub nsw i32 %1055, %1056
  %conv1203 = sitofp i32 %sub1202 to float
  %1057 = load i32, i32* @pred_SAD_ref, align 4
  %conv1204 = sitofp i32 %1057 to float
  %1058 = load float, float* %betaSec, align 4
  %mul1205 = fmul float %conv1204, %1058
  %cmp1206 = fcmp olt float %conv1203, %mul1205
  br i1 %cmp1206, label %if.then1208, label %if.end1209

if.then1208:                                      ; preds = %if.else1201
  br label %sec_step

if.end1209:                                       ; preds = %if.else1201
  br label %if.end1210

if.end1210:                                       ; preds = %if.end1209
  br label %if.end1251

if.else1211:                                      ; preds = %if.then1189
  %1059 = load i32, i32* %blocktype.addr, align 4
  %cmp1212 = icmp sgt i32 %1059, 1
  br i1 %cmp1212, label %if.then1214, label %if.else1232

if.then1214:                                      ; preds = %if.else1211
  %1060 = load i32, i32* %min_mcost.addr, align 4
  %1061 = load i32, i32* @pred_SAD_uplayer, align 4
  %sub1215 = sub nsw i32 %1060, %1061
  %conv1216 = sitofp i32 %sub1215 to float
  %1062 = load i32, i32* @pred_SAD_uplayer, align 4
  %conv1217 = sitofp i32 %1062 to float
  %1063 = load float, float* %betaThird, align 4
  %mul1218 = fmul float %conv1217, %1063
  %cmp1219 = fcmp olt float %conv1216, %mul1218
  br i1 %cmp1219, label %if.then1221, label %if.else1222

if.then1221:                                      ; preds = %if.then1214
  br label %third_step

if.else1222:                                      ; preds = %if.then1214
  %1064 = load i32, i32* %min_mcost.addr, align 4
  %1065 = load i32, i32* @pred_SAD_uplayer, align 4
  %sub1223 = sub nsw i32 %1064, %1065
  %conv1224 = sitofp i32 %sub1223 to float
  %1066 = load i32, i32* @pred_SAD_uplayer, align 4
  %conv1225 = sitofp i32 %1066 to float
  %1067 = load float, float* %betaSec, align 4
  %mul1226 = fmul float %conv1225, %1067
  %cmp1227 = fcmp olt float %conv1224, %mul1226
  br i1 %cmp1227, label %if.then1229, label %if.end1230

if.then1229:                                      ; preds = %if.else1222
  br label %sec_step

if.end1230:                                       ; preds = %if.else1222
  br label %if.end1231

if.end1231:                                       ; preds = %if.end1230
  br label %if.end1250

if.else1232:                                      ; preds = %if.else1211
  %1068 = load i32, i32* %min_mcost.addr, align 4
  %1069 = load i32, i32* @pred_SAD_space, align 4
  %sub1233 = sub nsw i32 %1068, %1069
  %conv1234 = sitofp i32 %sub1233 to float
  %1070 = load i32, i32* @pred_SAD_space, align 4
  %conv1235 = sitofp i32 %1070 to float
  %1071 = load float, float* %betaThird, align 4
  %mul1236 = fmul float %conv1235, %1071
  %cmp1237 = fcmp olt float %conv1234, %mul1236
  br i1 %cmp1237, label %if.then1239, label %if.else1240

if.then1239:                                      ; preds = %if.else1232
  br label %third_step

if.else1240:                                      ; preds = %if.else1232
  %1072 = load i32, i32* %min_mcost.addr, align 4
  %1073 = load i32, i32* @pred_SAD_space, align 4
  %sub1241 = sub nsw i32 %1072, %1073
  %conv1242 = sitofp i32 %sub1241 to float
  %1074 = load i32, i32* @pred_SAD_space, align 4
  %conv1243 = sitofp i32 %1074 to float
  %1075 = load float, float* %betaSec, align 4
  %mul1244 = fmul float %conv1243, %1075
  %cmp1245 = fcmp olt float %conv1242, %mul1244
  br i1 %cmp1245, label %if.then1247, label %if.end1248

if.then1247:                                      ; preds = %if.else1240
  br label %sec_step

if.end1248:                                       ; preds = %if.else1240
  br label %if.end1249

if.end1249:                                       ; preds = %if.end1248
  br label %if.end1250

if.end1250:                                       ; preds = %if.end1249, %if.end1231
  br label %if.end1251

if.end1251:                                       ; preds = %if.end1250, %if.end1210
  br label %if.end1252

if.end1252:                                       ; preds = %if.end1251, %for.end1187
  br label %for.inc1253

for.inc1253:                                      ; preds = %if.end1252
  %1076 = load i32, i32* %i, align 4
  %inc1254 = add nsw i32 %1076, 1
  store i32 %inc1254, i32* %i, align 4
  br label %for.cond1122

for.end1255:                                      ; preds = %for.cond1122
  br label %sec_step

sec_step:                                         ; preds = %for.end1255, %if.then1247, %if.then1229, %if.then1208, %if.then1117, %if.then1099, %if.then1078, %if.then996, %if.then978, %if.then957, %if.then729, %if.then722, %if.then704, %if.then683, %if.then389
  %1077 = load i32, i32* %best_x, align 4
  store i32 %1077, i32* %iXMinNow, align 4
  %1078 = load i32, i32* %best_y, align 4
  store i32 %1078, i32* %iYMinNow, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond1256

for.cond1256:                                     ; preds = %for.inc1322, %sec_step
  %1079 = load i32, i32* %i, align 4
  %1080 = load i32, i32* %search_range.addr, align 4
  %cmp1257 = icmp slt i32 %1079, %1080
  br i1 %cmp1257, label %for.body1259, label %for.end1324

for.body1259:                                     ; preds = %for.cond1256
  store i32 1, i32* %iAbort, align 4
  store i32 0, i32* %m, align 4
  br label %for.cond1260

for.cond1260:                                     ; preds = %for.inc1316, %for.body1259
  %1081 = load i32, i32* %m, align 4
  %cmp1261 = icmp slt i32 %1081, 6
  br i1 %cmp1261, label %for.body1263, label %for.end1318

for.body1263:                                     ; preds = %for.cond1260
  %1082 = load i32, i32* %iXMinNow, align 4
  %1083 = load i32, i32* %m, align 4
  %idxprom1264 = sext i32 %1083 to i64
  %arrayidx1265 = getelementptr inbounds [6 x i32], [6 x i32]* @FastIntegerPelBlockMotionSearch.Hexagon_x, i64 0, i64 %idxprom1264
  %1084 = load i32, i32* %arrayidx1265, align 4
  %add1266 = add nsw i32 %1082, %1084
  store i32 %add1266, i32* %cand_x, align 4
  %1085 = load i32, i32* %iYMinNow, align 4
  %1086 = load i32, i32* %m, align 4
  %idxprom1267 = sext i32 %1086 to i64
  %arrayidx1268 = getelementptr inbounds [6 x i32], [6 x i32]* @FastIntegerPelBlockMotionSearch.Hexagon_y, i64 0, i64 %idxprom1267
  %1087 = load i32, i32* %arrayidx1268, align 4
  %add1269 = add nsw i32 %1085, %1087
  store i32 %add1269, i32* %cand_y, align 4
  %1088 = load i32, i32* %cand_x, align 4
  %1089 = load i32, i32* %center_x, align 4
  %sub1270 = sub nsw i32 %1088, %1089
  %call1271 = call i32 @abs(i32 %sub1270) #6
  %1090 = load i32, i32* %search_range.addr, align 4
  %cmp1272 = icmp sle i32 %call1271, %1090
  br i1 %cmp1272, label %land.lhs.true1274, label %if.end1315

land.lhs.true1274:                                ; preds = %for.body1263
  %1091 = load i32, i32* %cand_y, align 4
  %1092 = load i32, i32* %center_y, align 4
  %sub1275 = sub nsw i32 %1091, %1092
  %call1276 = call i32 @abs(i32 %sub1275) #6
  %1093 = load i32, i32* %search_range.addr, align 4
  %cmp1277 = icmp sle i32 %call1276, %1093
  br i1 %cmp1277, label %if.then1279, label %if.end1315

if.then1279:                                      ; preds = %land.lhs.true1274
  %1094 = load i32**, i32*** @McostState, align 8
  %1095 = load i32, i32* %cand_y, align 4
  %1096 = load i32, i32* %center_y, align 4
  %sub1280 = sub nsw i32 %1095, %1096
  %1097 = load i32, i32* %search_range.addr, align 4
  %add1281 = add nsw i32 %sub1280, %1097
  %idxprom1282 = sext i32 %add1281 to i64
  %arrayidx1283 = getelementptr inbounds i32*, i32** %1094, i64 %idxprom1282
  %1098 = load i32*, i32** %arrayidx1283, align 8
  %1099 = load i32, i32* %cand_x, align 4
  %1100 = load i32, i32* %center_x, align 4
  %sub1284 = sub nsw i32 %1099, %1100
  %1101 = load i32, i32* %search_range.addr, align 4
  %add1285 = add nsw i32 %sub1284, %1101
  %idxprom1286 = sext i32 %add1285 to i64
  %arrayidx1287 = getelementptr inbounds i32, i32* %1098, i64 %idxprom1286
  %1102 = load i32, i32* %arrayidx1287, align 4
  %tobool1288 = icmp ne i32 %1102, 0
  br i1 %tobool1288, label %if.end1314, label %if.then1289

if.then1289:                                      ; preds = %if.then1279
  %1103 = load i32, i32* %lambda_factor, align 4
  %1104 = load i32*, i32** @mvbits, align 8
  %1105 = load i32, i32* %cand_x, align 4
  %1106 = load i32, i32* %mvshift, align 4
  %shl1290 = shl i32 %1105, %1106
  %1107 = load i32, i32* %pred_x, align 4
  %sub1291 = sub nsw i32 %shl1290, %1107
  %idxprom1292 = sext i32 %sub1291 to i64
  %arrayidx1293 = getelementptr inbounds i32, i32* %1104, i64 %idxprom1292
  %1108 = load i32, i32* %arrayidx1293, align 4
  %1109 = load i32*, i32** @mvbits, align 8
  %1110 = load i32, i32* %cand_y, align 4
  %1111 = load i32, i32* %mvshift, align 4
  %shl1294 = shl i32 %1110, %1111
  %1112 = load i32, i32* %pred_y, align 4
  %sub1295 = sub nsw i32 %shl1294, %1112
  %idxprom1296 = sext i32 %sub1295 to i64
  %arrayidx1297 = getelementptr inbounds i32, i32* %1109, i64 %idxprom1296
  %1113 = load i32, i32* %arrayidx1297, align 4
  %add1298 = add nsw i32 %1108, %1113
  %mul1299 = mul nsw i32 %1103, %add1298
  %shr1300 = ashr i32 %mul1299, 16
  store i32 %shr1300, i32* %mcost, align 4
  %1114 = load i16*, i16** %ref_pic, align 8
  %1115 = load i16**, i16*** %orig_pic.addr, align 8
  %1116 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %1117 = load i32, i32* %blocksize_y, align 4
  %1118 = load i32, i32* %blocksize_x, align 4
  %1119 = load i32, i32* %blocksize_x4, align 4
  %1120 = load i32, i32* %mcost, align 4
  %1121 = load i32, i32* %min_mcost.addr, align 4
  %1122 = load i32, i32* %cand_x, align 4
  %1123 = load i32, i32* %cand_y, align 4
  %call1301 = call i32 @PartCalMad(i16* %1114, i16** %1115, i16* (i32, i16*, i32, i32, i32, i32)* %1116, i32 %1117, i32 %1118, i32 %1119, i32 %1120, i32 %1121, i32 %1122, i32 %1123)
  store i32 %call1301, i32* %mcost, align 4
  %1124 = load i32, i32* %mcost, align 4
  %1125 = load i32**, i32*** @McostState, align 8
  %1126 = load i32, i32* %cand_y, align 4
  %1127 = load i32, i32* %center_y, align 4
  %sub1302 = sub nsw i32 %1126, %1127
  %1128 = load i32, i32* %search_range.addr, align 4
  %add1303 = add nsw i32 %sub1302, %1128
  %idxprom1304 = sext i32 %add1303 to i64
  %arrayidx1305 = getelementptr inbounds i32*, i32** %1125, i64 %idxprom1304
  %1129 = load i32*, i32** %arrayidx1305, align 8
  %1130 = load i32, i32* %cand_x, align 4
  %1131 = load i32, i32* %center_x, align 4
  %sub1306 = sub nsw i32 %1130, %1131
  %1132 = load i32, i32* %search_range.addr, align 4
  %add1307 = add nsw i32 %sub1306, %1132
  %idxprom1308 = sext i32 %add1307 to i64
  %arrayidx1309 = getelementptr inbounds i32, i32* %1129, i64 %idxprom1308
  store i32 %1124, i32* %arrayidx1309, align 4
  %1133 = load i32, i32* %mcost, align 4
  %1134 = load i32, i32* %min_mcost.addr, align 4
  %cmp1310 = icmp slt i32 %1133, %1134
  br i1 %cmp1310, label %if.then1312, label %if.end1313

if.then1312:                                      ; preds = %if.then1289
  %1135 = load i32, i32* %cand_x, align 4
  store i32 %1135, i32* %best_x, align 4
  %1136 = load i32, i32* %cand_y, align 4
  store i32 %1136, i32* %best_y, align 4
  %1137 = load i32, i32* %mcost, align 4
  store i32 %1137, i32* %min_mcost.addr, align 4
  store i32 0, i32* %iAbort, align 4
  br label %if.end1313

if.end1313:                                       ; preds = %if.then1312, %if.then1289
  br label %if.end1314

if.end1314:                                       ; preds = %if.end1313, %if.then1279
  br label %if.end1315

if.end1315:                                       ; preds = %if.end1314, %land.lhs.true1274, %for.body1263
  br label %for.inc1316

for.inc1316:                                      ; preds = %if.end1315
  %1138 = load i32, i32* %m, align 4
  %inc1317 = add nsw i32 %1138, 1
  store i32 %inc1317, i32* %m, align 4
  br label %for.cond1260

for.end1318:                                      ; preds = %for.cond1260
  %1139 = load i32, i32* %iAbort, align 4
  %tobool1319 = icmp ne i32 %1139, 0
  br i1 %tobool1319, label %if.then1320, label %if.end1321

if.then1320:                                      ; preds = %for.end1318
  br label %for.end1324

if.end1321:                                       ; preds = %for.end1318
  %1140 = load i32, i32* %best_x, align 4
  store i32 %1140, i32* %iXMinNow, align 4
  %1141 = load i32, i32* %best_y, align 4
  store i32 %1141, i32* %iYMinNow, align 4
  br label %for.inc1322

for.inc1322:                                      ; preds = %if.end1321
  %1142 = load i32, i32* %i, align 4
  %inc1323 = add nsw i32 %1142, 1
  store i32 %inc1323, i32* %i, align 4
  br label %for.cond1256

for.end1324:                                      ; preds = %if.then1320, %for.cond1256
  br label %third_step

third_step:                                       ; preds = %for.end1324, %if.then1239, %if.then1221, %if.then1200, %if.then1109, %if.then1091, %if.then1070, %if.then988, %if.then970, %if.then949, %if.then714, %if.then696, %if.then675, %if.then381
  %1143 = load i32, i32* %best_x, align 4
  store i32 %1143, i32* %iXMinNow, align 4
  %1144 = load i32, i32* %best_y, align 4
  store i32 %1144, i32* %iYMinNow, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond1325

for.cond1325:                                     ; preds = %for.inc1391, %third_step
  %1145 = load i32, i32* %i, align 4
  %1146 = load i32, i32* %search_range.addr, align 4
  %cmp1326 = icmp slt i32 %1145, %1146
  br i1 %cmp1326, label %for.body1328, label %for.end1393

for.body1328:                                     ; preds = %for.cond1325
  store i32 65536, i32* %iSADLayer, align 4
  store i32 1, i32* %iAbort, align 4
  store i32 0, i32* %m, align 4
  br label %for.cond1329

for.cond1329:                                     ; preds = %for.inc1385, %for.body1328
  %1147 = load i32, i32* %m, align 4
  %cmp1330 = icmp slt i32 %1147, 4
  br i1 %cmp1330, label %for.body1332, label %for.end1387

for.body1332:                                     ; preds = %for.cond1329
  %1148 = load i32, i32* %iXMinNow, align 4
  %1149 = load i32, i32* %m, align 4
  %idxprom1333 = sext i32 %1149 to i64
  %arrayidx1334 = getelementptr inbounds [4 x i32], [4 x i32]* @FastIntegerPelBlockMotionSearch.Diamond_x, i64 0, i64 %idxprom1333
  %1150 = load i32, i32* %arrayidx1334, align 4
  %add1335 = add nsw i32 %1148, %1150
  store i32 %add1335, i32* %cand_x, align 4
  %1151 = load i32, i32* %iYMinNow, align 4
  %1152 = load i32, i32* %m, align 4
  %idxprom1336 = sext i32 %1152 to i64
  %arrayidx1337 = getelementptr inbounds [4 x i32], [4 x i32]* @FastIntegerPelBlockMotionSearch.Diamond_y, i64 0, i64 %idxprom1336
  %1153 = load i32, i32* %arrayidx1337, align 4
  %add1338 = add nsw i32 %1151, %1153
  store i32 %add1338, i32* %cand_y, align 4
  %1154 = load i32, i32* %cand_x, align 4
  %1155 = load i32, i32* %center_x, align 4
  %sub1339 = sub nsw i32 %1154, %1155
  %call1340 = call i32 @abs(i32 %sub1339) #6
  %1156 = load i32, i32* %search_range.addr, align 4
  %cmp1341 = icmp sle i32 %call1340, %1156
  br i1 %cmp1341, label %land.lhs.true1343, label %if.end1384

land.lhs.true1343:                                ; preds = %for.body1332
  %1157 = load i32, i32* %cand_y, align 4
  %1158 = load i32, i32* %center_y, align 4
  %sub1344 = sub nsw i32 %1157, %1158
  %call1345 = call i32 @abs(i32 %sub1344) #6
  %1159 = load i32, i32* %search_range.addr, align 4
  %cmp1346 = icmp sle i32 %call1345, %1159
  br i1 %cmp1346, label %if.then1348, label %if.end1384

if.then1348:                                      ; preds = %land.lhs.true1343
  %1160 = load i32**, i32*** @McostState, align 8
  %1161 = load i32, i32* %cand_y, align 4
  %1162 = load i32, i32* %center_y, align 4
  %sub1349 = sub nsw i32 %1161, %1162
  %1163 = load i32, i32* %search_range.addr, align 4
  %add1350 = add nsw i32 %sub1349, %1163
  %idxprom1351 = sext i32 %add1350 to i64
  %arrayidx1352 = getelementptr inbounds i32*, i32** %1160, i64 %idxprom1351
  %1164 = load i32*, i32** %arrayidx1352, align 8
  %1165 = load i32, i32* %cand_x, align 4
  %1166 = load i32, i32* %center_x, align 4
  %sub1353 = sub nsw i32 %1165, %1166
  %1167 = load i32, i32* %search_range.addr, align 4
  %add1354 = add nsw i32 %sub1353, %1167
  %idxprom1355 = sext i32 %add1354 to i64
  %arrayidx1356 = getelementptr inbounds i32, i32* %1164, i64 %idxprom1355
  %1168 = load i32, i32* %arrayidx1356, align 4
  %tobool1357 = icmp ne i32 %1168, 0
  br i1 %tobool1357, label %if.end1383, label %if.then1358

if.then1358:                                      ; preds = %if.then1348
  %1169 = load i32, i32* %lambda_factor, align 4
  %1170 = load i32*, i32** @mvbits, align 8
  %1171 = load i32, i32* %cand_x, align 4
  %1172 = load i32, i32* %mvshift, align 4
  %shl1359 = shl i32 %1171, %1172
  %1173 = load i32, i32* %pred_x, align 4
  %sub1360 = sub nsw i32 %shl1359, %1173
  %idxprom1361 = sext i32 %sub1360 to i64
  %arrayidx1362 = getelementptr inbounds i32, i32* %1170, i64 %idxprom1361
  %1174 = load i32, i32* %arrayidx1362, align 4
  %1175 = load i32*, i32** @mvbits, align 8
  %1176 = load i32, i32* %cand_y, align 4
  %1177 = load i32, i32* %mvshift, align 4
  %shl1363 = shl i32 %1176, %1177
  %1178 = load i32, i32* %pred_y, align 4
  %sub1364 = sub nsw i32 %shl1363, %1178
  %idxprom1365 = sext i32 %sub1364 to i64
  %arrayidx1366 = getelementptr inbounds i32, i32* %1175, i64 %idxprom1365
  %1179 = load i32, i32* %arrayidx1366, align 4
  %add1367 = add nsw i32 %1174, %1179
  %mul1368 = mul nsw i32 %1169, %add1367
  %shr1369 = ashr i32 %mul1368, 16
  store i32 %shr1369, i32* %mcost, align 4
  %1180 = load i16*, i16** %ref_pic, align 8
  %1181 = load i16**, i16*** %orig_pic.addr, align 8
  %1182 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %1183 = load i32, i32* %blocksize_y, align 4
  %1184 = load i32, i32* %blocksize_x, align 4
  %1185 = load i32, i32* %blocksize_x4, align 4
  %1186 = load i32, i32* %mcost, align 4
  %1187 = load i32, i32* %min_mcost.addr, align 4
  %1188 = load i32, i32* %cand_x, align 4
  %1189 = load i32, i32* %cand_y, align 4
  %call1370 = call i32 @PartCalMad(i16* %1180, i16** %1181, i16* (i32, i16*, i32, i32, i32, i32)* %1182, i32 %1183, i32 %1184, i32 %1185, i32 %1186, i32 %1187, i32 %1188, i32 %1189)
  store i32 %call1370, i32* %mcost, align 4
  %1190 = load i32, i32* %mcost, align 4
  %1191 = load i32**, i32*** @McostState, align 8
  %1192 = load i32, i32* %cand_y, align 4
  %1193 = load i32, i32* %center_y, align 4
  %sub1371 = sub nsw i32 %1192, %1193
  %1194 = load i32, i32* %search_range.addr, align 4
  %add1372 = add nsw i32 %sub1371, %1194
  %idxprom1373 = sext i32 %add1372 to i64
  %arrayidx1374 = getelementptr inbounds i32*, i32** %1191, i64 %idxprom1373
  %1195 = load i32*, i32** %arrayidx1374, align 8
  %1196 = load i32, i32* %cand_x, align 4
  %1197 = load i32, i32* %center_x, align 4
  %sub1375 = sub nsw i32 %1196, %1197
  %1198 = load i32, i32* %search_range.addr, align 4
  %add1376 = add nsw i32 %sub1375, %1198
  %idxprom1377 = sext i32 %add1376 to i64
  %arrayidx1378 = getelementptr inbounds i32, i32* %1195, i64 %idxprom1377
  store i32 %1190, i32* %arrayidx1378, align 4
  %1199 = load i32, i32* %mcost, align 4
  %1200 = load i32, i32* %min_mcost.addr, align 4
  %cmp1379 = icmp slt i32 %1199, %1200
  br i1 %cmp1379, label %if.then1381, label %if.end1382

if.then1381:                                      ; preds = %if.then1358
  %1201 = load i32, i32* %cand_x, align 4
  store i32 %1201, i32* %best_x, align 4
  %1202 = load i32, i32* %cand_y, align 4
  store i32 %1202, i32* %best_y, align 4
  %1203 = load i32, i32* %mcost, align 4
  store i32 %1203, i32* %min_mcost.addr, align 4
  store i32 0, i32* %iAbort, align 4
  br label %if.end1382

if.end1382:                                       ; preds = %if.then1381, %if.then1358
  br label %if.end1383

if.end1383:                                       ; preds = %if.end1382, %if.then1348
  br label %if.end1384

if.end1384:                                       ; preds = %if.end1383, %land.lhs.true1343, %for.body1332
  br label %for.inc1385

for.inc1385:                                      ; preds = %if.end1384
  %1204 = load i32, i32* %m, align 4
  %inc1386 = add nsw i32 %1204, 1
  store i32 %inc1386, i32* %m, align 4
  br label %for.cond1329

for.end1387:                                      ; preds = %for.cond1329
  %1205 = load i32, i32* %iAbort, align 4
  %tobool1388 = icmp ne i32 %1205, 0
  br i1 %tobool1388, label %if.then1389, label %if.end1390

if.then1389:                                      ; preds = %for.end1387
  br label %for.end1393

if.end1390:                                       ; preds = %for.end1387
  %1206 = load i32, i32* %best_x, align 4
  store i32 %1206, i32* %iXMinNow, align 4
  %1207 = load i32, i32* %best_y, align 4
  store i32 %1207, i32* %iYMinNow, align 4
  br label %for.inc1391

for.inc1391:                                      ; preds = %if.end1390
  %1208 = load i32, i32* %i, align 4
  %inc1392 = add nsw i32 %1208, 1
  store i32 %inc1392, i32* %i, align 4
  br label %for.cond1325

for.end1393:                                      ; preds = %if.then1389, %for.cond1325
  %1209 = load i32, i32* %best_x, align 4
  %1210 = load i32, i32* %pic_pix_x.addr, align 4
  %sub1394 = sub nsw i32 %1209, %1210
  %conv1395 = trunc i32 %sub1394 to i16
  %1211 = load i16*, i16** %mv_x.addr, align 8
  store i16 %conv1395, i16* %1211, align 2
  %1212 = load i32, i32* %best_y, align 4
  %1213 = load i32, i32* %pic_pix_y.addr, align 4
  %sub1396 = sub nsw i32 %1212, %1213
  %conv1397 = trunc i32 %sub1396 to i16
  %1214 = load i16*, i16** %mv_y.addr, align 8
  store i16 %conv1397, i16* %1214, align 2
  %1215 = load i32, i32* %min_mcost.addr, align 4
  %1216 = load i32, i32* %canary
  %1217 = icmp eq i32 %1216, 155878914
  br i1 %1217, label %1218, label %func_exit

1218:                                             ; preds = %for.end1393, %func_exit
  ret i32 %1215

func_exit:                                        ; preds = %for.end1393
  call void @detect_breach()
  br label %1218
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @DefineThresholdMB.44() #0 {
entry:
  %Thresh4x4 = alloca i32, align 4
  %gb_q_bits = alloca i32, align 4
  %gb_qp_per = alloca i32, align 4
  %gb_qp_const = alloca i32, align 4
  %canary = alloca i32
  store i32 1113362310, i32* %canary
  %gb_qp_rem = alloca i32, align 4
  %0 = load %struct.InputParameters*, %struct.InputParameters** @input, align 8
  %qpN = getelementptr inbounds %struct.InputParameters, %struct.InputParameters* %0, i32 0, i32 4
  %1 = load i32, i32* %qpN, align 8
  %sub = sub nsw i32 %1, 0
  %div = sdiv i32 %sub, 6
  store i32 %div, i32* %gb_qp_per, align 4
  %2 = load %struct.InputParameters*, %struct.InputParameters** @input, align 8
  %qpN1 = getelementptr inbounds %struct.InputParameters, %struct.InputParameters* %2, i32 0, i32 4
  %3 = load i32, i32* %qpN1, align 8
  %sub2 = sub nsw i32 %3, 0
  %rem = srem i32 %sub2, 6
  store i32 %rem, i32* %gb_qp_rem, align 4
  %4 = load i32, i32* %gb_qp_per, align 4
  %add = add nsw i32 15, %4
  store i32 %add, i32* %gb_q_bits, align 4
  %5 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %type = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %5, i32 0, i32 6
  %6 = load i32, i32* %type, align 8
  %cmp = icmp eq i32 %6, 2
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %7 = load i32, i32* %gb_q_bits, align 4
  %shl = shl i32 1, %7
  %div3 = sdiv i32 %shl, 3
  store i32 %div3, i32* %gb_qp_const, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %8 = load i32, i32* %gb_q_bits, align 4
  %shl4 = shl i32 1, %8
  %div5 = sdiv i32 %shl4, 6
  store i32 %div5, i32* %gb_qp_const, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %gb_q_bits, align 4
  %shl6 = shl i32 1, %9
  %10 = load i32, i32* %gb_qp_const, align 4
  %sub7 = sub nsw i32 %shl6, %10
  %11 = load i32, i32* %gb_qp_rem, align 4
  %idxprom = sext i32 %11 to i64
  %arrayidx = getelementptr inbounds [6 x [4 x [4 x i32]]], [6 x [4 x [4 x i32]]]* @quant_coef, i64 0, i64 %idxprom
  %arrayidx8 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %arrayidx, i64 0, i64 0
  %arrayidx9 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx8, i64 0, i64 0
  %12 = load i32, i32* %arrayidx9, align 16
  %div10 = sdiv i32 %sub7, %12
  store i32 %div10, i32* %Thresh4x4, align 4
  %13 = load i32, i32* %Thresh4x4, align 4
  %conv = sitofp i32 %13 to float
  %div11 = fdiv float %conv, 0x403670A3E0000000
  store float %div11, float* @Quantize_step, align 4
  %14 = load float, float* @Quantize_step, align 4
  %mul = fmul float 2.560000e+02, %14
  store float %mul, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 7), align 4
  %15 = load float, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 7), align 4
  %mul12 = fmul float %15, 4.000000e+00
  store float %mul12, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 6), align 8
  %16 = load float, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 7), align 4
  %mul13 = fmul float %16, 4.000000e+00
  store float %mul13, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 5), align 4
  %17 = load float, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 5), align 4
  %mul14 = fmul float %17, 4.000000e+00
  store float %mul14, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 4), align 16
  %18 = load float, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 4), align 16
  %mul15 = fmul float %18, 4.000000e+00
  store float %mul15, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 3), align 4
  %19 = load float, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 4), align 16
  %mul16 = fmul float %19, 4.000000e+00
  store float %mul16, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 2), align 8
  %20 = load float, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 2), align 8
  %mul17 = fmul float %20, 4.000000e+00
  store float %mul17, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 1), align 4
  %21 = load i32, i32* %canary
  %22 = icmp eq i32 %21, 1113362310
  br i1 %22, label %23, label %func_exit

23:                                               ; preds = %if.end, %func_exit
  ret void

func_exit:                                        ; preds = %if.end
  call void @detect_breach()
  br label %23
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @free_mem_mincost.45(i32***** %mv) #0 {
entry:
  %canary = alloca i32
  store i32 917436717, i32* %canary
  %l = alloca i32, align 4
  %k = alloca i32, align 4
  %mv.addr = alloca i32*****, align 8
  %j = alloca i32, align 4
  %i = alloca i32, align 4
  store i32***** %mv, i32****** %mv.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc35, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %width = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %1, i32 0, i32 13
  %2 = load i32, i32* %width, align 4
  %div = sdiv i32 %2, 4
  %cmp = icmp slt i32 %0, %div
  br i1 %cmp, label %for.body, label %for.end37

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc30, %for.body
  %3 = load i32, i32* %j, align 4
  %4 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %4, i32 0, i32 15
  %5 = load i32, i32* %height, align 4
  %div2 = sdiv i32 %5, 4
  %cmp3 = icmp slt i32 %3, %div2
  br i1 %cmp3, label %for.body4, label %for.end32

for.body4:                                        ; preds = %for.cond1
  store i32 0, i32* %k, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc23, %for.body4
  %6 = load i32, i32* %k, align 4
  %7 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %max_num_references = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %7, i32 0, i32 9
  %8 = load i32, i32* %max_num_references, align 4
  %cmp6 = icmp slt i32 %6, %8
  br i1 %cmp6, label %for.body7, label %for.end25

for.body7:                                        ; preds = %for.cond5
  store i32 0, i32* %l, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc, %for.body7
  %9 = load i32, i32* %l, align 4
  %cmp9 = icmp slt i32 %9, 9
  br i1 %cmp9, label %for.body10, label %for.end

for.body10:                                       ; preds = %for.cond8
  %10 = load i32*****, i32****** %mv.addr, align 8
  %11 = load i32, i32* %i, align 4
  %idxprom = sext i32 %11 to i64
  %arrayidx = getelementptr inbounds i32****, i32***** %10, i64 %idxprom
  %12 = load i32****, i32***** %arrayidx, align 8
  %13 = load i32, i32* %j, align 4
  %idxprom11 = sext i32 %13 to i64
  %arrayidx12 = getelementptr inbounds i32***, i32**** %12, i64 %idxprom11
  %14 = load i32***, i32**** %arrayidx12, align 8
  %15 = load i32, i32* %k, align 4
  %idxprom13 = sext i32 %15 to i64
  %arrayidx14 = getelementptr inbounds i32**, i32*** %14, i64 %idxprom13
  %16 = load i32**, i32*** %arrayidx14, align 8
  %17 = load i32, i32* %l, align 4
  %idxprom15 = sext i32 %17 to i64
  %arrayidx16 = getelementptr inbounds i32*, i32** %16, i64 %idxprom15
  %18 = load i32*, i32** %arrayidx16, align 8
  %19 = bitcast i32* %18 to i8*
  call void @free(i8* %19) #5
  br label %for.inc

for.inc:                                          ; preds = %for.body10
  %20 = load i32, i32* %l, align 4
  %inc = add nsw i32 %20, 1
  store i32 %inc, i32* %l, align 4
  br label %for.cond8

for.end:                                          ; preds = %for.cond8
  %21 = load i32*****, i32****** %mv.addr, align 8
  %22 = load i32, i32* %i, align 4
  %idxprom17 = sext i32 %22 to i64
  %arrayidx18 = getelementptr inbounds i32****, i32***** %21, i64 %idxprom17
  %23 = load i32****, i32***** %arrayidx18, align 8
  %24 = load i32, i32* %j, align 4
  %idxprom19 = sext i32 %24 to i64
  %arrayidx20 = getelementptr inbounds i32***, i32**** %23, i64 %idxprom19
  %25 = load i32***, i32**** %arrayidx20, align 8
  %26 = load i32, i32* %k, align 4
  %idxprom21 = sext i32 %26 to i64
  %arrayidx22 = getelementptr inbounds i32**, i32*** %25, i64 %idxprom21
  %27 = load i32**, i32*** %arrayidx22, align 8
  %28 = bitcast i32** %27 to i8*
  call void @free(i8* %28) #5
  br label %for.inc23

for.inc23:                                        ; preds = %for.end
  %29 = load i32, i32* %k, align 4
  %inc24 = add nsw i32 %29, 1
  store i32 %inc24, i32* %k, align 4
  br label %for.cond5

for.end25:                                        ; preds = %for.cond5
  %30 = load i32*****, i32****** %mv.addr, align 8
  %31 = load i32, i32* %i, align 4
  %idxprom26 = sext i32 %31 to i64
  %arrayidx27 = getelementptr inbounds i32****, i32***** %30, i64 %idxprom26
  %32 = load i32****, i32***** %arrayidx27, align 8
  %33 = load i32, i32* %j, align 4
  %idxprom28 = sext i32 %33 to i64
  %arrayidx29 = getelementptr inbounds i32***, i32**** %32, i64 %idxprom28
  %34 = load i32***, i32**** %arrayidx29, align 8
  %35 = bitcast i32*** %34 to i8*
  call void @free(i8* %35) #5
  br label %for.inc30

for.inc30:                                        ; preds = %for.end25
  %36 = load i32, i32* %j, align 4
  %inc31 = add nsw i32 %36, 1
  store i32 %inc31, i32* %j, align 4
  br label %for.cond1

for.end32:                                        ; preds = %for.cond1
  %37 = load i32*****, i32****** %mv.addr, align 8
  %38 = load i32, i32* %i, align 4
  %idxprom33 = sext i32 %38 to i64
  %arrayidx34 = getelementptr inbounds i32****, i32***** %37, i64 %idxprom33
  %39 = load i32****, i32***** %arrayidx34, align 8
  %40 = bitcast i32**** %39 to i8*
  call void @free(i8* %40) #5
  br label %for.inc35

for.inc35:                                        ; preds = %for.end32
  %41 = load i32, i32* %i, align 4
  %inc36 = add nsw i32 %41, 1
  store i32 %inc36, i32* %i, align 4
  br label %for.cond

for.end37:                                        ; preds = %for.cond
  %42 = load i32*****, i32****** %mv.addr, align 8
  %43 = bitcast i32***** %42 to i8*
  call void @free(i8* %43) #5
  %44 = load i32, i32* %canary
  %45 = icmp eq i32 %44, 917436717
  br i1 %45, label %46, label %func_exit

46:                                               ; preds = %for.end37, %func_exit
  ret void

func_exit:                                        ; preds = %for.end37
  call void @detect_breach()
  br label %46
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @FastSubPelBlockMotionSearch.46(i16** %orig_pic, i16 signext %ref, i32 %list, i32 %pic_pix_x, i32 %pic_pix_y, i32 %blocktype, i16 signext %pred_mv_x, i16 signext %pred_mv_y, i16* %mv_x, i16* %mv_y, i32 %search_pos2, i32 %search_pos4, i32 %min_mcost, double %lambda, i32 %useABT) #0 {
entry:
  %search_pos2.addr = alloca i32, align 4
  %pred_frac_mv_y = alloca i32, align 4
  %currmv_x = alloca i32, align 4
  %lambda_factor = alloca i32, align 4
  %pred_frac_mv_x = alloca i32, align 4
  %pred_mv_x.addr = alloca i16, align 2
  %currmv_y = alloca i32, align 4
  %iYMinNow = alloca i32, align 4
  %abort_search = alloca i32, align 4
  %cand_mv_y = alloca i32, align 4
  %iCurrSearchRange = alloca i32, align 4
  %i = alloca i32, align 4
  %useABT.addr = alloca i32, align 4
  %list.addr = alloca i32, align 4
  %pic_pix_x.addr = alloca i32, align 4
  %ref_picture = alloca %struct.storable_picture*, align 8
  %canary = alloca i32
  store i32 1650770547, i32* %canary
  %mv_y.addr = alloca i16*, align 8
  %pic4_pix_x = alloca i32, align 4
  %mv_cost = alloca i32, align 4
  %blocksize_y = alloca i32, align 4
  %orig_pic.addr = alloca i16**, align 8
  %pred_mv_y.addr = alloca i16, align 2
  %pred_frac_up_mv_x = alloca i32, align 4
  %lambda.addr = alloca double, align 8
  %search_pos4.addr = alloca i32, align 4
  %pred_frac_up_mv_y = alloca i32, align 4
  %mv_shift = alloca i32, align 4
  %pic4_pix_y = alloca i32, align 4
  %m = alloca i32, align 4
  %max_pos_y4 = alloca i32, align 4
  %list_offset = alloca i32, align 4
  %ref.addr = alloca i16, align 2
  %mv_x.addr = alloca i16*, align 8
  %mcost = alloca i32, align 4
  %blocktype.addr = alloca i32, align 4
  %cand_mv_x = alloca i32, align 4
  %min_mcost.addr = alloca i32, align 4
  %search_range_dynamic = alloca i32, align 4
  %iXMinNow = alloca i32, align 4
  %blocksize_x = alloca i32, align 4
  %pic_pix_y.addr = alloca i32, align 4
  %max_pos_x4 = alloca i32, align 4
  %iSADLayer = alloca i32, align 4
  store i16** %orig_pic, i16*** %orig_pic.addr, align 8
  store i16 %ref, i16* %ref.addr, align 2
  store i32 %list, i32* %list.addr, align 4
  store i32 %pic_pix_x, i32* %pic_pix_x.addr, align 4
  store i32 %pic_pix_y, i32* %pic_pix_y.addr, align 4
  store i32 %blocktype, i32* %blocktype.addr, align 4
  store i16 %pred_mv_x, i16* %pred_mv_x.addr, align 2
  store i16 %pred_mv_y, i16* %pred_mv_y.addr, align 2
  store i16* %mv_x, i16** %mv_x.addr, align 8
  store i16* %mv_y, i16** %mv_y.addr, align 8
  store i32 %search_pos2, i32* %search_pos2.addr, align 4
  store i32 %search_pos4, i32* %search_pos4.addr, align 4
  store i32 %min_mcost, i32* %min_mcost.addr, align 4
  store double %lambda, double* %lambda.addr, align 8
  store i32 %useABT, i32* %useABT.addr, align 4
  %0 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %MbaffFrameFlag = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %0, i32 0, i32 90
  %1 = load i32, i32* %MbaffFrameFlag, align 8
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %mb_data = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %2, i32 0, i32 51
  %3 = load %struct.macroblock*, %struct.macroblock** %mb_data, align 8
  %4 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %current_mb_nr = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %4, i32 0, i32 3
  %5 = load i32, i32* %current_mb_nr, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 %idxprom
  %mb_field = getelementptr inbounds %struct.macroblock, %struct.macroblock* %arrayidx, i32 0, i32 22
  %6 = load i32, i32* %mb_field, align 4
  %tobool1 = icmp ne i32 %6, 0
  br i1 %tobool1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %7 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %current_mb_nr2 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %7, i32 0, i32 3
  %8 = load i32, i32* %current_mb_nr2, align 4
  %rem = srem i32 %8, 2
  %tobool3 = icmp ne i32 %rem, 0
  %9 = zext i1 %tobool3 to i64
  %cond = select i1 %tobool3, i32 4, i32 2
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond4 = phi i32 [ %cond, %cond.true ], [ 0, %cond.false ]
  store i32 %cond4, i32* %list_offset, align 4
  %10 = load i32, i32* %list.addr, align 4
  %11 = load i32, i32* %list_offset, align 4
  %add = add nsw i32 %10, %11
  %idxprom5 = sext i32 %add to i64
  %arrayidx6 = getelementptr inbounds [6 x %struct.storable_picture**], [6 x %struct.storable_picture**]* @listX, i64 0, i64 %idxprom5
  %12 = load %struct.storable_picture**, %struct.storable_picture*** %arrayidx6, align 8
  %13 = load i16, i16* %ref.addr, align 2
  %idxprom7 = sext i16 %13 to i64
  %arrayidx8 = getelementptr inbounds %struct.storable_picture*, %struct.storable_picture** %12, i64 %idxprom7
  %14 = load %struct.storable_picture*, %struct.storable_picture** %arrayidx8, align 8
  store %struct.storable_picture* %14, %struct.storable_picture** %ref_picture, align 8
  %15 = load double, double* %lambda.addr, align 8
  %mul = fmul double 6.553600e+04, %15
  %add9 = fadd double %mul, 5.000000e-01
  %conv = fptosi double %add9 to i32
  store i32 %conv, i32* %lambda_factor, align 4
  store i32 0, i32* %mv_shift, align 4
  %16 = load %struct.InputParameters*, %struct.InputParameters** @input, align 8
  %blc_size = getelementptr inbounds %struct.InputParameters, %struct.InputParameters* %16, i32 0, i32 20
  %17 = load i32, i32* %blocktype.addr, align 4
  %idxprom10 = sext i32 %17 to i64
  %arrayidx11 = getelementptr inbounds [8 x [2 x i32]], [8 x [2 x i32]]* %blc_size, i64 0, i64 %idxprom10
  %arrayidx12 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx11, i64 0, i64 0
  %18 = load i32, i32* %arrayidx12, align 8
  store i32 %18, i32* %blocksize_x, align 4
  %19 = load %struct.InputParameters*, %struct.InputParameters** @input, align 8
  %blc_size13 = getelementptr inbounds %struct.InputParameters, %struct.InputParameters* %19, i32 0, i32 20
  %20 = load i32, i32* %blocktype.addr, align 4
  %idxprom14 = sext i32 %20 to i64
  %arrayidx15 = getelementptr inbounds [8 x [2 x i32]], [8 x [2 x i32]]* %blc_size13, i64 0, i64 %idxprom14
  %arrayidx16 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx15, i64 0, i64 1
  %21 = load i32, i32* %arrayidx16, align 4
  store i32 %21, i32* %blocksize_y, align 4
  %22 = load i32, i32* %pic_pix_x.addr, align 4
  %shl = shl i32 %22, 2
  store i32 %shl, i32* %pic4_pix_x, align 4
  %23 = load i32, i32* %pic_pix_y.addr, align 4
  %shl17 = shl i32 %23, 2
  store i32 %shl17, i32* %pic4_pix_y, align 4
  %24 = load %struct.storable_picture*, %struct.storable_picture** %ref_picture, align 8
  %size_x = getelementptr inbounds %struct.storable_picture, %struct.storable_picture* %24, i32 0, i32 18
  %25 = load i32, i32* %size_x, align 8
  %26 = load i32, i32* %blocksize_x, align 4
  %sub = sub nsw i32 %25, %26
  %add18 = add nsw i32 %sub, 1
  %shl19 = shl i32 %add18, 2
  store i32 %shl19, i32* %max_pos_x4, align 4
  %27 = load %struct.storable_picture*, %struct.storable_picture** %ref_picture, align 8
  %size_y = getelementptr inbounds %struct.storable_picture, %struct.storable_picture* %27, i32 0, i32 19
  %28 = load i32, i32* %size_y, align 4
  %29 = load i32, i32* %blocksize_y, align 4
  %sub20 = sub nsw i32 %28, %29
  %add21 = add nsw i32 %sub20, 1
  %shl22 = shl i32 %add21, 2
  store i32 %shl22, i32* %max_pos_y4, align 4
  store i32 0, i32* %currmv_x, align 4
  store i32 0, i32* %currmv_y, align 4
  %30 = load i16*, i16** %mv_x.addr, align 8
  %31 = load i16, i16* %30, align 2
  %conv23 = sext i16 %31 to i32
  %shl24 = shl i32 %conv23, 2
  %conv25 = trunc i32 %shl24 to i16
  store i16 %conv25, i16* %30, align 2
  %32 = load i16*, i16** %mv_y.addr, align 8
  %33 = load i16, i16* %32, align 2
  %conv26 = sext i16 %33 to i32
  %shl27 = shl i32 %conv26, 2
  %conv28 = trunc i32 %shl27 to i16
  store i16 %conv28, i16* %32, align 2
  %34 = load i32, i32* %pic4_pix_x, align 4
  %35 = load i16*, i16** %mv_x.addr, align 8
  %36 = load i16, i16* %35, align 2
  %conv29 = sext i16 %36 to i32
  %add30 = add nsw i32 %34, %conv29
  %cmp = icmp sgt i32 %add30, 1
  br i1 %cmp, label %land.lhs.true32, label %if.else

land.lhs.true32:                                  ; preds = %cond.end
  %37 = load i32, i32* %pic4_pix_x, align 4
  %38 = load i16*, i16** %mv_x.addr, align 8
  %39 = load i16, i16* %38, align 2
  %conv33 = sext i16 %39 to i32
  %add34 = add nsw i32 %37, %conv33
  %40 = load i32, i32* %max_pos_x4, align 4
  %sub35 = sub nsw i32 %40, 2
  %cmp36 = icmp slt i32 %add34, %sub35
  br i1 %cmp36, label %land.lhs.true38, label %if.else

land.lhs.true38:                                  ; preds = %land.lhs.true32
  %41 = load i32, i32* %pic4_pix_y, align 4
  %42 = load i16*, i16** %mv_y.addr, align 8
  %43 = load i16, i16* %42, align 2
  %conv39 = sext i16 %43 to i32
  %add40 = add nsw i32 %41, %conv39
  %cmp41 = icmp sgt i32 %add40, 1
  br i1 %cmp41, label %land.lhs.true43, label %if.else

land.lhs.true43:                                  ; preds = %land.lhs.true38
  %44 = load i32, i32* %pic4_pix_y, align 4
  %45 = load i16*, i16** %mv_y.addr, align 8
  %46 = load i16, i16* %45, align 2
  %conv44 = sext i16 %46 to i32
  %add45 = add nsw i32 %44, %conv44
  %47 = load i32, i32* %max_pos_y4, align 4
  %sub46 = sub nsw i32 %47, 2
  %cmp47 = icmp slt i32 %add45, %sub46
  br i1 %cmp47, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true43
  store i16 (i16**, i32, i32, i32, i32)* @FastPelY_14, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  br label %if.end

if.else:                                          ; preds = %land.lhs.true43, %land.lhs.true38, %land.lhs.true32, %cond.end
  store i16 (i16**, i32, i32, i32, i32)* @UMVPelY_14, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  store i32 3, i32* %search_range_dynamic, align 4
  %48 = load i16, i16* %pred_mv_x.addr, align 2
  %conv49 = sext i16 %48 to i32
  %49 = load i16*, i16** %mv_x.addr, align 8
  %50 = load i16, i16* %49, align 2
  %conv50 = sext i16 %50 to i32
  %sub51 = sub nsw i32 %conv49, %conv50
  %rem52 = srem i32 %sub51, 4
  store i32 %rem52, i32* %pred_frac_mv_x, align 4
  %51 = load i16, i16* %pred_mv_y.addr, align 2
  %conv53 = sext i16 %51 to i32
  %52 = load i16*, i16** %mv_y.addr, align 8
  %53 = load i16, i16* %52, align 2
  %conv54 = sext i16 %53 to i32
  %sub55 = sub nsw i32 %conv53, %conv54
  %rem56 = srem i32 %sub55, 4
  store i32 %rem56, i32* %pred_frac_mv_y, align 4
  %54 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @pred_MV_uplayer, i64 0, i64 0), align 4
  %55 = load i16*, i16** %mv_x.addr, align 8
  %56 = load i16, i16* %55, align 2
  %conv57 = sext i16 %56 to i32
  %sub58 = sub nsw i32 %54, %conv57
  %rem59 = srem i32 %sub58, 4
  store i32 %rem59, i32* %pred_frac_up_mv_x, align 4
  %57 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @pred_MV_uplayer, i64 0, i64 1), align 4
  %58 = load i16*, i16** %mv_y.addr, align 8
  %59 = load i16, i16* %58, align 2
  %conv60 = sext i16 %59 to i32
  %sub61 = sub nsw i32 %57, %conv60
  %rem62 = srem i32 %sub61, 4
  store i32 %rem62, i32* %pred_frac_up_mv_y, align 4
  %60 = load i8**, i8*** @SearchState, align 8
  %arrayidx63 = getelementptr inbounds i8*, i8** %60, i64 0
  %61 = load i8*, i8** %arrayidx63, align 8
  %62 = load i32, i32* %search_range_dynamic, align 4
  %mul64 = mul nsw i32 2, %62
  %add65 = add nsw i32 %mul64, 1
  %63 = load i32, i32* %search_range_dynamic, align 4
  %mul66 = mul nsw i32 2, %63
  %add67 = add nsw i32 %mul66, 1
  %mul68 = mul nsw i32 %add65, %add67
  %conv69 = sext i32 %mul68 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %61, i8 0, i64 %conv69, i1 false)
  %64 = load %struct.InputParameters*, %struct.InputParameters** @input, align 8
  %hadamard = getelementptr inbounds %struct.InputParameters, %struct.InputParameters* %64, i32 0, i32 6
  %65 = load i32, i32* %hadamard, align 8
  %tobool70 = icmp ne i32 %65, 0
  br i1 %tobool70, label %if.then71, label %if.else94

if.then71:                                        ; preds = %if.end
  %66 = load i16*, i16** %mv_x.addr, align 8
  %67 = load i16, i16* %66, align 2
  %conv72 = sext i16 %67 to i32
  store i32 %conv72, i32* %cand_mv_x, align 4
  %68 = load i16*, i16** %mv_y.addr, align 8
  %69 = load i16, i16* %68, align 2
  %conv73 = sext i16 %69 to i32
  store i32 %conv73, i32* %cand_mv_y, align 4
  %70 = load i32, i32* %lambda_factor, align 4
  %71 = load i32*, i32** @mvbits, align 8
  %72 = load i32, i32* %cand_mv_x, align 4
  %73 = load i32, i32* %mv_shift, align 4
  %shl74 = shl i32 %72, %73
  %74 = load i16, i16* %pred_mv_x.addr, align 2
  %conv75 = sext i16 %74 to i32
  %sub76 = sub nsw i32 %shl74, %conv75
  %idxprom77 = sext i32 %sub76 to i64
  %arrayidx78 = getelementptr inbounds i32, i32* %71, i64 %idxprom77
  %75 = load i32, i32* %arrayidx78, align 4
  %76 = load i32*, i32** @mvbits, align 8
  %77 = load i32, i32* %cand_mv_y, align 4
  %78 = load i32, i32* %mv_shift, align 4
  %shl79 = shl i32 %77, %78
  %79 = load i16, i16* %pred_mv_y.addr, align 2
  %conv80 = sext i16 %79 to i32
  %sub81 = sub nsw i32 %shl79, %conv80
  %idxprom82 = sext i32 %sub81 to i64
  %arrayidx83 = getelementptr inbounds i32, i32* %76, i64 %idxprom82
  %80 = load i32, i32* %arrayidx83, align 4
  %add84 = add nsw i32 %75, %80
  %mul85 = mul nsw i32 %70, %add84
  %shr = ashr i32 %mul85, 16
  store i32 %shr, i32* %mv_cost, align 4
  %81 = load i32, i32* %pic_pix_x.addr, align 4
  %82 = load i32, i32* %pic_pix_y.addr, align 4
  %83 = load i32, i32* %blocksize_x, align 4
  %84 = load i32, i32* %blocksize_y, align 4
  %85 = load i32, i32* %cand_mv_x, align 4
  %86 = load i32, i32* %cand_mv_y, align 4
  %87 = load %struct.storable_picture*, %struct.storable_picture** %ref_picture, align 8
  %88 = load i16**, i16*** %orig_pic.addr, align 8
  %89 = load i32, i32* %mv_cost, align 4
  %90 = load i32, i32* %min_mcost.addr, align 4
  %91 = load i32, i32* %useABT.addr, align 4
  %call = call i32 @AddUpSADQuarter(i32 %81, i32 %82, i32 %83, i32 %84, i32 %85, i32 %86, %struct.storable_picture* %87, i16** %88, i32 %89, i32 %90, i32 %91)
  store i32 %call, i32* %mcost, align 4
  %92 = load i8**, i8*** @SearchState, align 8
  %93 = load i32, i32* %search_range_dynamic, align 4
  %idxprom86 = sext i32 %93 to i64
  %arrayidx87 = getelementptr inbounds i8*, i8** %92, i64 %idxprom86
  %94 = load i8*, i8** %arrayidx87, align 8
  %95 = load i32, i32* %search_range_dynamic, align 4
  %idxprom88 = sext i32 %95 to i64
  %arrayidx89 = getelementptr inbounds i8, i8* %94, i64 %idxprom88
  store i8 1, i8* %arrayidx89, align 1
  %96 = load i32, i32* %mcost, align 4
  %97 = load i32, i32* %min_mcost.addr, align 4
  %cmp90 = icmp slt i32 %96, %97
  br i1 %cmp90, label %if.then92, label %if.end93

if.then92:                                        ; preds = %if.then71
  %98 = load i32, i32* %mcost, align 4
  store i32 %98, i32* %min_mcost.addr, align 4
  %99 = load i32, i32* %cand_mv_x, align 4
  store i32 %99, i32* %currmv_x, align 4
  %100 = load i32, i32* %cand_mv_y, align 4
  store i32 %100, i32* %currmv_y, align 4
  br label %if.end93

if.end93:                                         ; preds = %if.then92, %if.then71
  br label %if.end101

if.else94:                                        ; preds = %if.end
  %101 = load i8**, i8*** @SearchState, align 8
  %102 = load i32, i32* %search_range_dynamic, align 4
  %idxprom95 = sext i32 %102 to i64
  %arrayidx96 = getelementptr inbounds i8*, i8** %101, i64 %idxprom95
  %103 = load i8*, i8** %arrayidx96, align 8
  %104 = load i32, i32* %search_range_dynamic, align 4
  %idxprom97 = sext i32 %104 to i64
  %arrayidx98 = getelementptr inbounds i8, i8* %103, i64 %idxprom97
  store i8 1, i8* %arrayidx98, align 1
  %105 = load i16*, i16** %mv_x.addr, align 8
  %106 = load i16, i16* %105, align 2
  %conv99 = sext i16 %106 to i32
  store i32 %conv99, i32* %currmv_x, align 4
  %107 = load i16*, i16** %mv_y.addr, align 8
  %108 = load i16, i16* %107, align 2
  %conv100 = sext i16 %108 to i32
  store i32 %conv100, i32* %currmv_y, align 4
  br label %if.end101

if.end101:                                        ; preds = %if.else94, %if.end93
  %109 = load i32, i32* %pred_frac_mv_x, align 4
  %cmp102 = icmp ne i32 %109, 0
  br i1 %cmp102, label %if.then106, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end101
  %110 = load i32, i32* %pred_frac_mv_y, align 4
  %cmp104 = icmp ne i32 %110, 0
  br i1 %cmp104, label %if.then106, label %if.end139

if.then106:                                       ; preds = %lor.lhs.false, %if.end101
  %111 = load i16*, i16** %mv_x.addr, align 8
  %112 = load i16, i16* %111, align 2
  %conv107 = sext i16 %112 to i32
  %113 = load i32, i32* %pred_frac_mv_x, align 4
  %add108 = add nsw i32 %conv107, %113
  store i32 %add108, i32* %cand_mv_x, align 4
  %114 = load i16*, i16** %mv_y.addr, align 8
  %115 = load i16, i16* %114, align 2
  %conv109 = sext i16 %115 to i32
  %116 = load i32, i32* %pred_frac_mv_y, align 4
  %add110 = add nsw i32 %conv109, %116
  store i32 %add110, i32* %cand_mv_y, align 4
  %117 = load i32, i32* %lambda_factor, align 4
  %118 = load i32*, i32** @mvbits, align 8
  %119 = load i32, i32* %cand_mv_x, align 4
  %120 = load i32, i32* %mv_shift, align 4
  %shl111 = shl i32 %119, %120
  %121 = load i16, i16* %pred_mv_x.addr, align 2
  %conv112 = sext i16 %121 to i32
  %sub113 = sub nsw i32 %shl111, %conv112
  %idxprom114 = sext i32 %sub113 to i64
  %arrayidx115 = getelementptr inbounds i32, i32* %118, i64 %idxprom114
  %122 = load i32, i32* %arrayidx115, align 4
  %123 = load i32*, i32** @mvbits, align 8
  %124 = load i32, i32* %cand_mv_y, align 4
  %125 = load i32, i32* %mv_shift, align 4
  %shl116 = shl i32 %124, %125
  %126 = load i16, i16* %pred_mv_y.addr, align 2
  %conv117 = sext i16 %126 to i32
  %sub118 = sub nsw i32 %shl116, %conv117
  %idxprom119 = sext i32 %sub118 to i64
  %arrayidx120 = getelementptr inbounds i32, i32* %123, i64 %idxprom119
  %127 = load i32, i32* %arrayidx120, align 4
  %add121 = add nsw i32 %122, %127
  %mul122 = mul nsw i32 %117, %add121
  %shr123 = ashr i32 %mul122, 16
  store i32 %shr123, i32* %mv_cost, align 4
  %128 = load i32, i32* %pic_pix_x.addr, align 4
  %129 = load i32, i32* %pic_pix_y.addr, align 4
  %130 = load i32, i32* %blocksize_x, align 4
  %131 = load i32, i32* %blocksize_y, align 4
  %132 = load i32, i32* %cand_mv_x, align 4
  %133 = load i32, i32* %cand_mv_y, align 4
  %134 = load %struct.storable_picture*, %struct.storable_picture** %ref_picture, align 8
  %135 = load i16**, i16*** %orig_pic.addr, align 8
  %136 = load i32, i32* %mv_cost, align 4
  %137 = load i32, i32* %min_mcost.addr, align 4
  %138 = load i32, i32* %useABT.addr, align 4
  %call124 = call i32 @AddUpSADQuarter(i32 %128, i32 %129, i32 %130, i32 %131, i32 %132, i32 %133, %struct.storable_picture* %134, i16** %135, i32 %136, i32 %137, i32 %138)
  store i32 %call124, i32* %mcost, align 4
  %139 = load i8**, i8*** @SearchState, align 8
  %140 = load i32, i32* %cand_mv_y, align 4
  %141 = load i16*, i16** %mv_y.addr, align 8
  %142 = load i16, i16* %141, align 2
  %conv125 = sext i16 %142 to i32
  %sub126 = sub nsw i32 %140, %conv125
  %143 = load i32, i32* %search_range_dynamic, align 4
  %add127 = add nsw i32 %sub126, %143
  %idxprom128 = sext i32 %add127 to i64
  %arrayidx129 = getelementptr inbounds i8*, i8** %139, i64 %idxprom128
  %144 = load i8*, i8** %arrayidx129, align 8
  %145 = load i32, i32* %cand_mv_x, align 4
  %146 = load i16*, i16** %mv_x.addr, align 8
  %147 = load i16, i16* %146, align 2
  %conv130 = sext i16 %147 to i32
  %sub131 = sub nsw i32 %145, %conv130
  %148 = load i32, i32* %search_range_dynamic, align 4
  %add132 = add nsw i32 %sub131, %148
  %idxprom133 = sext i32 %add132 to i64
  %arrayidx134 = getelementptr inbounds i8, i8* %144, i64 %idxprom133
  store i8 1, i8* %arrayidx134, align 1
  %149 = load i32, i32* %mcost, align 4
  %150 = load i32, i32* %min_mcost.addr, align 4
  %cmp135 = icmp slt i32 %149, %150
  br i1 %cmp135, label %if.then137, label %if.end138

if.then137:                                       ; preds = %if.then106
  %151 = load i32, i32* %mcost, align 4
  store i32 %151, i32* %min_mcost.addr, align 4
  %152 = load i32, i32* %cand_mv_x, align 4
  store i32 %152, i32* %currmv_x, align 4
  %153 = load i32, i32* %cand_mv_y, align 4
  store i32 %153, i32* %currmv_y, align 4
  br label %if.end138

if.end138:                                        ; preds = %if.then137, %if.then106
  br label %if.end139

if.end139:                                        ; preds = %if.end138, %lor.lhs.false
  %154 = load i32, i32* %currmv_x, align 4
  store i32 %154, i32* %iXMinNow, align 4
  %155 = load i32, i32* %currmv_y, align 4
  store i32 %155, i32* %iYMinNow, align 4
  %156 = load i32, i32* %search_range_dynamic, align 4
  %mul140 = mul nsw i32 2, %156
  %add141 = add nsw i32 %mul140, 1
  store i32 %add141, i32* %iCurrSearchRange, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc211, %if.end139
  %157 = load i32, i32* %i, align 4
  %158 = load i32, i32* %iCurrSearchRange, align 4
  %cmp142 = icmp slt i32 %157, %158
  br i1 %cmp142, label %for.body, label %for.end213

for.body:                                         ; preds = %for.cond
  store i32 1, i32* %abort_search, align 4
  store i32 65536, i32* %iSADLayer, align 4
  store i32 0, i32* %m, align 4
  br label %for.cond144

for.cond144:                                      ; preds = %for.inc, %for.body
  %159 = load i32, i32* %m, align 4
  %cmp145 = icmp slt i32 %159, 4
  br i1 %cmp145, label %for.body147, label %for.end

for.body147:                                      ; preds = %for.cond144
  %160 = load i32, i32* %iXMinNow, align 4
  %161 = load i32, i32* %m, align 4
  %idxprom148 = sext i32 %161 to i64
  %arrayidx149 = getelementptr inbounds [4 x i32], [4 x i32]* @FastSubPelBlockMotionSearch.Diamond_x, i64 0, i64 %idxprom148
  %162 = load i32, i32* %arrayidx149, align 4
  %add150 = add nsw i32 %160, %162
  store i32 %add150, i32* %cand_mv_x, align 4
  %163 = load i32, i32* %iYMinNow, align 4
  %164 = load i32, i32* %m, align 4
  %idxprom151 = sext i32 %164 to i64
  %arrayidx152 = getelementptr inbounds [4 x i32], [4 x i32]* @FastSubPelBlockMotionSearch.Diamond_y, i64 0, i64 %idxprom151
  %165 = load i32, i32* %arrayidx152, align 4
  %add153 = add nsw i32 %163, %165
  store i32 %add153, i32* %cand_mv_y, align 4
  %166 = load i32, i32* %cand_mv_x, align 4
  %167 = load i16*, i16** %mv_x.addr, align 8
  %168 = load i16, i16* %167, align 2
  %conv154 = sext i16 %168 to i32
  %sub155 = sub nsw i32 %166, %conv154
  %call156 = call i32 @abs(i32 %sub155) #6
  %169 = load i32, i32* %search_range_dynamic, align 4
  %cmp157 = icmp sle i32 %call156, %169
  br i1 %cmp157, label %land.lhs.true159, label %if.end207

land.lhs.true159:                                 ; preds = %for.body147
  %170 = load i32, i32* %cand_mv_y, align 4
  %171 = load i16*, i16** %mv_y.addr, align 8
  %172 = load i16, i16* %171, align 2
  %conv160 = sext i16 %172 to i32
  %sub161 = sub nsw i32 %170, %conv160
  %call162 = call i32 @abs(i32 %sub161) #6
  %173 = load i32, i32* %search_range_dynamic, align 4
  %cmp163 = icmp sle i32 %call162, %173
  br i1 %cmp163, label %if.then165, label %if.end207

if.then165:                                       ; preds = %land.lhs.true159
  %174 = load i8**, i8*** @SearchState, align 8
  %175 = load i32, i32* %cand_mv_y, align 4
  %176 = load i16*, i16** %mv_y.addr, align 8
  %177 = load i16, i16* %176, align 2
  %conv166 = sext i16 %177 to i32
  %sub167 = sub nsw i32 %175, %conv166
  %178 = load i32, i32* %search_range_dynamic, align 4
  %add168 = add nsw i32 %sub167, %178
  %idxprom169 = sext i32 %add168 to i64
  %arrayidx170 = getelementptr inbounds i8*, i8** %174, i64 %idxprom169
  %179 = load i8*, i8** %arrayidx170, align 8
  %180 = load i32, i32* %cand_mv_x, align 4
  %181 = load i16*, i16** %mv_x.addr, align 8
  %182 = load i16, i16* %181, align 2
  %conv171 = sext i16 %182 to i32
  %sub172 = sub nsw i32 %180, %conv171
  %183 = load i32, i32* %search_range_dynamic, align 4
  %add173 = add nsw i32 %sub172, %183
  %idxprom174 = sext i32 %add173 to i64
  %arrayidx175 = getelementptr inbounds i8, i8* %179, i64 %idxprom174
  %184 = load i8, i8* %arrayidx175, align 1
  %tobool176 = icmp ne i8 %184, 0
  br i1 %tobool176, label %if.end206, label %if.then177

if.then177:                                       ; preds = %if.then165
  %185 = load i32, i32* %lambda_factor, align 4
  %186 = load i32*, i32** @mvbits, align 8
  %187 = load i32, i32* %cand_mv_x, align 4
  %188 = load i32, i32* %mv_shift, align 4
  %shl178 = shl i32 %187, %188
  %189 = load i16, i16* %pred_mv_x.addr, align 2
  %conv179 = sext i16 %189 to i32
  %sub180 = sub nsw i32 %shl178, %conv179
  %idxprom181 = sext i32 %sub180 to i64
  %arrayidx182 = getelementptr inbounds i32, i32* %186, i64 %idxprom181
  %190 = load i32, i32* %arrayidx182, align 4
  %191 = load i32*, i32** @mvbits, align 8
  %192 = load i32, i32* %cand_mv_y, align 4
  %193 = load i32, i32* %mv_shift, align 4
  %shl183 = shl i32 %192, %193
  %194 = load i16, i16* %pred_mv_y.addr, align 2
  %conv184 = sext i16 %194 to i32
  %sub185 = sub nsw i32 %shl183, %conv184
  %idxprom186 = sext i32 %sub185 to i64
  %arrayidx187 = getelementptr inbounds i32, i32* %191, i64 %idxprom186
  %195 = load i32, i32* %arrayidx187, align 4
  %add188 = add nsw i32 %190, %195
  %mul189 = mul nsw i32 %185, %add188
  %shr190 = ashr i32 %mul189, 16
  store i32 %shr190, i32* %mv_cost, align 4
  %196 = load i32, i32* %pic_pix_x.addr, align 4
  %197 = load i32, i32* %pic_pix_y.addr, align 4
  %198 = load i32, i32* %blocksize_x, align 4
  %199 = load i32, i32* %blocksize_y, align 4
  %200 = load i32, i32* %cand_mv_x, align 4
  %201 = load i32, i32* %cand_mv_y, align 4
  %202 = load %struct.storable_picture*, %struct.storable_picture** %ref_picture, align 8
  %203 = load i16**, i16*** %orig_pic.addr, align 8
  %204 = load i32, i32* %mv_cost, align 4
  %205 = load i32, i32* %min_mcost.addr, align 4
  %206 = load i32, i32* %useABT.addr, align 4
  %call191 = call i32 @AddUpSADQuarter(i32 %196, i32 %197, i32 %198, i32 %199, i32 %200, i32 %201, %struct.storable_picture* %202, i16** %203, i32 %204, i32 %205, i32 %206)
  store i32 %call191, i32* %mcost, align 4
  %207 = load i8**, i8*** @SearchState, align 8
  %208 = load i32, i32* %cand_mv_y, align 4
  %209 = load i16*, i16** %mv_y.addr, align 8
  %210 = load i16, i16* %209, align 2
  %conv192 = sext i16 %210 to i32
  %sub193 = sub nsw i32 %208, %conv192
  %211 = load i32, i32* %search_range_dynamic, align 4
  %add194 = add nsw i32 %sub193, %211
  %idxprom195 = sext i32 %add194 to i64
  %arrayidx196 = getelementptr inbounds i8*, i8** %207, i64 %idxprom195
  %212 = load i8*, i8** %arrayidx196, align 8
  %213 = load i32, i32* %cand_mv_x, align 4
  %214 = load i16*, i16** %mv_x.addr, align 8
  %215 = load i16, i16* %214, align 2
  %conv197 = sext i16 %215 to i32
  %sub198 = sub nsw i32 %213, %conv197
  %216 = load i32, i32* %search_range_dynamic, align 4
  %add199 = add nsw i32 %sub198, %216
  %idxprom200 = sext i32 %add199 to i64
  %arrayidx201 = getelementptr inbounds i8, i8* %212, i64 %idxprom200
  store i8 1, i8* %arrayidx201, align 1
  %217 = load i32, i32* %mcost, align 4
  %218 = load i32, i32* %min_mcost.addr, align 4
  %cmp202 = icmp slt i32 %217, %218
  br i1 %cmp202, label %if.then204, label %if.end205

if.then204:                                       ; preds = %if.then177
  %219 = load i32, i32* %mcost, align 4
  store i32 %219, i32* %min_mcost.addr, align 4
  %220 = load i32, i32* %cand_mv_x, align 4
  store i32 %220, i32* %currmv_x, align 4
  %221 = load i32, i32* %cand_mv_y, align 4
  store i32 %221, i32* %currmv_y, align 4
  store i32 0, i32* %abort_search, align 4
  br label %if.end205

if.end205:                                        ; preds = %if.then204, %if.then177
  br label %if.end206

if.end206:                                        ; preds = %if.end205, %if.then165
  br label %if.end207

if.end207:                                        ; preds = %if.end206, %land.lhs.true159, %for.body147
  br label %for.inc

for.inc:                                          ; preds = %if.end207
  %222 = load i32, i32* %m, align 4
  %inc = add nsw i32 %222, 1
  store i32 %inc, i32* %m, align 4
  br label %for.cond144

for.end:                                          ; preds = %for.cond144
  %223 = load i32, i32* %currmv_x, align 4
  store i32 %223, i32* %iXMinNow, align 4
  %224 = load i32, i32* %currmv_y, align 4
  store i32 %224, i32* %iYMinNow, align 4
  %225 = load i32, i32* %abort_search, align 4
  %tobool208 = icmp ne i32 %225, 0
  br i1 %tobool208, label %if.then209, label %if.end210

if.then209:                                       ; preds = %for.end
  br label %for.end213

if.end210:                                        ; preds = %for.end
  br label %for.inc211

for.inc211:                                       ; preds = %if.end210
  %226 = load i32, i32* %i, align 4
  %inc212 = add nsw i32 %226, 1
  store i32 %inc212, i32* %i, align 4
  br label %for.cond

for.end213:                                       ; preds = %if.then209, %for.cond
  %227 = load i32, i32* %currmv_x, align 4
  %conv214 = trunc i32 %227 to i16
  %228 = load i16*, i16** %mv_x.addr, align 8
  store i16 %conv214, i16* %228, align 2
  %229 = load i32, i32* %currmv_y, align 4
  %conv215 = trunc i32 %229 to i16
  %230 = load i16*, i16** %mv_y.addr, align 8
  store i16 %conv215, i16* %230, align 2
  %231 = load i32, i32* %min_mcost.addr, align 4
  %232 = load i32, i32* %canary
  %233 = icmp eq i32 %232, 1650770547
  br i1 %233, label %234, label %func_exit

234:                                              ; preds = %for.end213, %func_exit
  ret i32 %231

func_exit:                                        ; preds = %for.end213
  call void @detect_breach()
  br label %234
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @get_mem_bwmincost.47(i32****** %mv) #0 {
entry:
  %k = alloca i32, align 4
  %j = alloca i32, align 4
  %l = alloca i32, align 4
  %i = alloca i32, align 4
  %canary = alloca i32
  store i32 9499850, i32* %canary
  %mv.addr = alloca i32******, align 8
  store i32****** %mv, i32******* %mv.addr, align 8
  %0 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %width = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %0, i32 0, i32 13
  %1 = load i32, i32* %width, align 4
  %div = sdiv i32 %1, 4
  %conv = sext i32 %div to i64
  %call = call noalias i8* @calloc(i64 %conv, i64 8) #5
  %2 = bitcast i8* %call to i32*****
  %3 = load i32******, i32******* %mv.addr, align 8
  store i32***** %2, i32****** %3, align 8
  %cmp = icmp eq i32***** %2, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @no_mem_exit(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc68, %if.end
  %4 = load i32, i32* %i, align 4
  %5 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %width2 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %5, i32 0, i32 13
  %6 = load i32, i32* %width2, align 4
  %div3 = sdiv i32 %6, 4
  %cmp4 = icmp slt i32 %4, %div3
  br i1 %cmp4, label %for.body, label %for.end70

for.body:                                         ; preds = %for.cond
  %7 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %7, i32 0, i32 15
  %8 = load i32, i32* %height, align 4
  %div6 = sdiv i32 %8, 4
  %conv7 = sext i32 %div6 to i64
  %call8 = call noalias i8* @calloc(i64 %conv7, i64 8) #5
  %9 = bitcast i8* %call8 to i32****
  %10 = load i32******, i32******* %mv.addr, align 8
  %11 = load i32*****, i32****** %10, align 8
  %12 = load i32, i32* %i, align 4
  %idxprom = sext i32 %12 to i64
  %arrayidx = getelementptr inbounds i32****, i32***** %11, i64 %idxprom
  store i32**** %9, i32***** %arrayidx, align 8
  %cmp9 = icmp eq i32**** %9, null
  br i1 %cmp9, label %if.then11, label %if.end12

if.then11:                                        ; preds = %for.body
  call void @no_mem_exit(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %if.end12

if.end12:                                         ; preds = %if.then11, %for.body
  store i32 0, i32* %j, align 4
  br label %for.cond13

for.cond13:                                       ; preds = %for.inc65, %if.end12
  %13 = load i32, i32* %j, align 4
  %14 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height14 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %14, i32 0, i32 15
  %15 = load i32, i32* %height14, align 4
  %div15 = sdiv i32 %15, 4
  %cmp16 = icmp slt i32 %13, %div15
  br i1 %cmp16, label %for.body18, label %for.end67

for.body18:                                       ; preds = %for.cond13
  %16 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %max_num_references = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %16, i32 0, i32 9
  %17 = load i32, i32* %max_num_references, align 4
  %conv19 = sext i32 %17 to i64
  %call20 = call noalias i8* @calloc(i64 %conv19, i64 8) #5
  %18 = bitcast i8* %call20 to i32***
  %19 = load i32******, i32******* %mv.addr, align 8
  %20 = load i32*****, i32****** %19, align 8
  %21 = load i32, i32* %i, align 4
  %idxprom21 = sext i32 %21 to i64
  %arrayidx22 = getelementptr inbounds i32****, i32***** %20, i64 %idxprom21
  %22 = load i32****, i32***** %arrayidx22, align 8
  %23 = load i32, i32* %j, align 4
  %idxprom23 = sext i32 %23 to i64
  %arrayidx24 = getelementptr inbounds i32***, i32**** %22, i64 %idxprom23
  store i32*** %18, i32**** %arrayidx24, align 8
  %cmp25 = icmp eq i32*** %18, null
  br i1 %cmp25, label %if.then27, label %if.end28

if.then27:                                        ; preds = %for.body18
  call void @no_mem_exit(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %if.end28

if.end28:                                         ; preds = %if.then27, %for.body18
  store i32 0, i32* %k, align 4
  br label %for.cond29

for.cond29:                                       ; preds = %for.inc62, %if.end28
  %24 = load i32, i32* %k, align 4
  %25 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %max_num_references30 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %25, i32 0, i32 9
  %26 = load i32, i32* %max_num_references30, align 4
  %cmp31 = icmp slt i32 %24, %26
  br i1 %cmp31, label %for.body33, label %for.end64

for.body33:                                       ; preds = %for.cond29
  %call34 = call noalias i8* @calloc(i64 9, i64 8) #5
  %27 = bitcast i8* %call34 to i32**
  %28 = load i32******, i32******* %mv.addr, align 8
  %29 = load i32*****, i32****** %28, align 8
  %30 = load i32, i32* %i, align 4
  %idxprom35 = sext i32 %30 to i64
  %arrayidx36 = getelementptr inbounds i32****, i32***** %29, i64 %idxprom35
  %31 = load i32****, i32***** %arrayidx36, align 8
  %32 = load i32, i32* %j, align 4
  %idxprom37 = sext i32 %32 to i64
  %arrayidx38 = getelementptr inbounds i32***, i32**** %31, i64 %idxprom37
  %33 = load i32***, i32**** %arrayidx38, align 8
  %34 = load i32, i32* %k, align 4
  %idxprom39 = sext i32 %34 to i64
  %arrayidx40 = getelementptr inbounds i32**, i32*** %33, i64 %idxprom39
  store i32** %27, i32*** %arrayidx40, align 8
  %cmp41 = icmp eq i32** %27, null
  br i1 %cmp41, label %if.then43, label %if.end44

if.then43:                                        ; preds = %for.body33
  call void @no_mem_exit(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %if.end44

if.end44:                                         ; preds = %if.then43, %for.body33
  store i32 0, i32* %l, align 4
  br label %for.cond45

for.cond45:                                       ; preds = %for.inc, %if.end44
  %35 = load i32, i32* %l, align 4
  %cmp46 = icmp slt i32 %35, 9
  br i1 %cmp46, label %for.body48, label %for.end

for.body48:                                       ; preds = %for.cond45
  %call49 = call noalias i8* @calloc(i64 3, i64 4) #5
  %36 = bitcast i8* %call49 to i32*
  %37 = load i32******, i32******* %mv.addr, align 8
  %38 = load i32*****, i32****** %37, align 8
  %39 = load i32, i32* %i, align 4
  %idxprom50 = sext i32 %39 to i64
  %arrayidx51 = getelementptr inbounds i32****, i32***** %38, i64 %idxprom50
  %40 = load i32****, i32***** %arrayidx51, align 8
  %41 = load i32, i32* %j, align 4
  %idxprom52 = sext i32 %41 to i64
  %arrayidx53 = getelementptr inbounds i32***, i32**** %40, i64 %idxprom52
  %42 = load i32***, i32**** %arrayidx53, align 8
  %43 = load i32, i32* %k, align 4
  %idxprom54 = sext i32 %43 to i64
  %arrayidx55 = getelementptr inbounds i32**, i32*** %42, i64 %idxprom54
  %44 = load i32**, i32*** %arrayidx55, align 8
  %45 = load i32, i32* %l, align 4
  %idxprom56 = sext i32 %45 to i64
  %arrayidx57 = getelementptr inbounds i32*, i32** %44, i64 %idxprom56
  store i32* %36, i32** %arrayidx57, align 8
  %cmp58 = icmp eq i32* %36, null
  br i1 %cmp58, label %if.then60, label %if.end61

if.then60:                                        ; preds = %for.body48
  call void @no_mem_exit(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %if.end61

if.end61:                                         ; preds = %if.then60, %for.body48
  br label %for.inc

for.inc:                                          ; preds = %if.end61
  %46 = load i32, i32* %l, align 4
  %inc = add nsw i32 %46, 1
  store i32 %inc, i32* %l, align 4
  br label %for.cond45

for.end:                                          ; preds = %for.cond45
  br label %for.inc62

for.inc62:                                        ; preds = %for.end
  %47 = load i32, i32* %k, align 4
  %inc63 = add nsw i32 %47, 1
  store i32 %inc63, i32* %k, align 4
  br label %for.cond29

for.end64:                                        ; preds = %for.cond29
  br label %for.inc65

for.inc65:                                        ; preds = %for.end64
  %48 = load i32, i32* %j, align 4
  %inc66 = add nsw i32 %48, 1
  store i32 %inc66, i32* %j, align 4
  br label %for.cond13

for.end67:                                        ; preds = %for.cond13
  br label %for.inc68

for.inc68:                                        ; preds = %for.end67
  %49 = load i32, i32* %i, align 4
  %inc69 = add nsw i32 %49, 1
  store i32 %inc69, i32* %i, align 4
  br label %for.cond

for.end70:                                        ; preds = %for.cond
  %50 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %width71 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %50, i32 0, i32 13
  %51 = load i32, i32* %width71, align 4
  %div72 = sdiv i32 %51, 4
  %52 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height73 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %52, i32 0, i32 15
  %53 = load i32, i32* %height73, align 4
  %mul = mul nsw i32 %div72, %53
  %div74 = sdiv i32 %mul, 4
  %54 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %max_num_references75 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %54, i32 0, i32 9
  %55 = load i32, i32* %max_num_references75, align 4
  %mul76 = mul nsw i32 %div74, %55
  %mul77 = mul nsw i32 %mul76, 9
  %mul78 = mul nsw i32 %mul77, 3
  %conv79 = sext i32 %mul78 to i64
  %mul80 = mul i64 %conv79, 4
  %conv81 = trunc i64 %mul80 to i32
  %56 = load i32, i32* %canary
  %57 = icmp eq i32 %56, 9499850
  br i1 %57, label %58, label %func_exit

58:                                               ; preds = %for.end70, %func_exit
  ret i32 %conv81

func_exit:                                        ; preds = %for.end70
  call void @detect_breach()
  br label %58
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @get_mem_bwmincost.48(i32****** %mv) #0 {
entry:
  %canary = alloca i32
  store i32 1367397690, i32* %canary
  %l = alloca i32, align 4
  %mv.addr = alloca i32******, align 8
  %i = alloca i32, align 4
  %k = alloca i32, align 4
  %j = alloca i32, align 4
  store i32****** %mv, i32******* %mv.addr, align 8
  %0 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %width = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %0, i32 0, i32 13
  %1 = load i32, i32* %width, align 4
  %div = sdiv i32 %1, 4
  %conv = sext i32 %div to i64
  %call = call noalias i8* @calloc(i64 %conv, i64 8) #5
  %2 = bitcast i8* %call to i32*****
  %3 = load i32******, i32******* %mv.addr, align 8
  store i32***** %2, i32****** %3, align 8
  %cmp = icmp eq i32***** %2, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @no_mem_exit(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc68, %if.end
  %4 = load i32, i32* %i, align 4
  %5 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %width2 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %5, i32 0, i32 13
  %6 = load i32, i32* %width2, align 4
  %div3 = sdiv i32 %6, 4
  %cmp4 = icmp slt i32 %4, %div3
  br i1 %cmp4, label %for.body, label %for.end70

for.body:                                         ; preds = %for.cond
  %7 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %7, i32 0, i32 15
  %8 = load i32, i32* %height, align 4
  %div6 = sdiv i32 %8, 4
  %conv7 = sext i32 %div6 to i64
  %call8 = call noalias i8* @calloc(i64 %conv7, i64 8) #5
  %9 = bitcast i8* %call8 to i32****
  %10 = load i32******, i32******* %mv.addr, align 8
  %11 = load i32*****, i32****** %10, align 8
  %12 = load i32, i32* %i, align 4
  %idxprom = sext i32 %12 to i64
  %arrayidx = getelementptr inbounds i32****, i32***** %11, i64 %idxprom
  store i32**** %9, i32***** %arrayidx, align 8
  %cmp9 = icmp eq i32**** %9, null
  br i1 %cmp9, label %if.then11, label %if.end12

if.then11:                                        ; preds = %for.body
  call void @no_mem_exit(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %if.end12

if.end12:                                         ; preds = %if.then11, %for.body
  store i32 0, i32* %j, align 4
  br label %for.cond13

for.cond13:                                       ; preds = %for.inc65, %if.end12
  %13 = load i32, i32* %j, align 4
  %14 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height14 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %14, i32 0, i32 15
  %15 = load i32, i32* %height14, align 4
  %div15 = sdiv i32 %15, 4
  %cmp16 = icmp slt i32 %13, %div15
  br i1 %cmp16, label %for.body18, label %for.end67

for.body18:                                       ; preds = %for.cond13
  %16 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %max_num_references = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %16, i32 0, i32 9
  %17 = load i32, i32* %max_num_references, align 4
  %conv19 = sext i32 %17 to i64
  %call20 = call noalias i8* @calloc(i64 %conv19, i64 8) #5
  %18 = bitcast i8* %call20 to i32***
  %19 = load i32******, i32******* %mv.addr, align 8
  %20 = load i32*****, i32****** %19, align 8
  %21 = load i32, i32* %i, align 4
  %idxprom21 = sext i32 %21 to i64
  %arrayidx22 = getelementptr inbounds i32****, i32***** %20, i64 %idxprom21
  %22 = load i32****, i32***** %arrayidx22, align 8
  %23 = load i32, i32* %j, align 4
  %idxprom23 = sext i32 %23 to i64
  %arrayidx24 = getelementptr inbounds i32***, i32**** %22, i64 %idxprom23
  store i32*** %18, i32**** %arrayidx24, align 8
  %cmp25 = icmp eq i32*** %18, null
  br i1 %cmp25, label %if.then27, label %if.end28

if.then27:                                        ; preds = %for.body18
  call void @no_mem_exit(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %if.end28

if.end28:                                         ; preds = %if.then27, %for.body18
  store i32 0, i32* %k, align 4
  br label %for.cond29

for.cond29:                                       ; preds = %for.inc62, %if.end28
  %24 = load i32, i32* %k, align 4
  %25 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %max_num_references30 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %25, i32 0, i32 9
  %26 = load i32, i32* %max_num_references30, align 4
  %cmp31 = icmp slt i32 %24, %26
  br i1 %cmp31, label %for.body33, label %for.end64

for.body33:                                       ; preds = %for.cond29
  %call34 = call noalias i8* @calloc(i64 9, i64 8) #5
  %27 = bitcast i8* %call34 to i32**
  %28 = load i32******, i32******* %mv.addr, align 8
  %29 = load i32*****, i32****** %28, align 8
  %30 = load i32, i32* %i, align 4
  %idxprom35 = sext i32 %30 to i64
  %arrayidx36 = getelementptr inbounds i32****, i32***** %29, i64 %idxprom35
  %31 = load i32****, i32***** %arrayidx36, align 8
  %32 = load i32, i32* %j, align 4
  %idxprom37 = sext i32 %32 to i64
  %arrayidx38 = getelementptr inbounds i32***, i32**** %31, i64 %idxprom37
  %33 = load i32***, i32**** %arrayidx38, align 8
  %34 = load i32, i32* %k, align 4
  %idxprom39 = sext i32 %34 to i64
  %arrayidx40 = getelementptr inbounds i32**, i32*** %33, i64 %idxprom39
  store i32** %27, i32*** %arrayidx40, align 8
  %cmp41 = icmp eq i32** %27, null
  br i1 %cmp41, label %if.then43, label %if.end44

if.then43:                                        ; preds = %for.body33
  call void @no_mem_exit(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %if.end44

if.end44:                                         ; preds = %if.then43, %for.body33
  store i32 0, i32* %l, align 4
  br label %for.cond45

for.cond45:                                       ; preds = %for.inc, %if.end44
  %35 = load i32, i32* %l, align 4
  %cmp46 = icmp slt i32 %35, 9
  br i1 %cmp46, label %for.body48, label %for.end

for.body48:                                       ; preds = %for.cond45
  %call49 = call noalias i8* @calloc(i64 3, i64 4) #5
  %36 = bitcast i8* %call49 to i32*
  %37 = load i32******, i32******* %mv.addr, align 8
  %38 = load i32*****, i32****** %37, align 8
  %39 = load i32, i32* %i, align 4
  %idxprom50 = sext i32 %39 to i64
  %arrayidx51 = getelementptr inbounds i32****, i32***** %38, i64 %idxprom50
  %40 = load i32****, i32***** %arrayidx51, align 8
  %41 = load i32, i32* %j, align 4
  %idxprom52 = sext i32 %41 to i64
  %arrayidx53 = getelementptr inbounds i32***, i32**** %40, i64 %idxprom52
  %42 = load i32***, i32**** %arrayidx53, align 8
  %43 = load i32, i32* %k, align 4
  %idxprom54 = sext i32 %43 to i64
  %arrayidx55 = getelementptr inbounds i32**, i32*** %42, i64 %idxprom54
  %44 = load i32**, i32*** %arrayidx55, align 8
  %45 = load i32, i32* %l, align 4
  %idxprom56 = sext i32 %45 to i64
  %arrayidx57 = getelementptr inbounds i32*, i32** %44, i64 %idxprom56
  store i32* %36, i32** %arrayidx57, align 8
  %cmp58 = icmp eq i32* %36, null
  br i1 %cmp58, label %if.then60, label %if.end61

if.then60:                                        ; preds = %for.body48
  call void @no_mem_exit(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %if.end61

if.end61:                                         ; preds = %if.then60, %for.body48
  br label %for.inc

for.inc:                                          ; preds = %if.end61
  %46 = load i32, i32* %l, align 4
  %inc = add nsw i32 %46, 1
  store i32 %inc, i32* %l, align 4
  br label %for.cond45

for.end:                                          ; preds = %for.cond45
  br label %for.inc62

for.inc62:                                        ; preds = %for.end
  %47 = load i32, i32* %k, align 4
  %inc63 = add nsw i32 %47, 1
  store i32 %inc63, i32* %k, align 4
  br label %for.cond29

for.end64:                                        ; preds = %for.cond29
  br label %for.inc65

for.inc65:                                        ; preds = %for.end64
  %48 = load i32, i32* %j, align 4
  %inc66 = add nsw i32 %48, 1
  store i32 %inc66, i32* %j, align 4
  br label %for.cond13

for.end67:                                        ; preds = %for.cond13
  br label %for.inc68

for.inc68:                                        ; preds = %for.end67
  %49 = load i32, i32* %i, align 4
  %inc69 = add nsw i32 %49, 1
  store i32 %inc69, i32* %i, align 4
  br label %for.cond

for.end70:                                        ; preds = %for.cond
  %50 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %width71 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %50, i32 0, i32 13
  %51 = load i32, i32* %width71, align 4
  %div72 = sdiv i32 %51, 4
  %52 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height73 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %52, i32 0, i32 15
  %53 = load i32, i32* %height73, align 4
  %mul = mul nsw i32 %div72, %53
  %div74 = sdiv i32 %mul, 4
  %54 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %max_num_references75 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %54, i32 0, i32 9
  %55 = load i32, i32* %max_num_references75, align 4
  %mul76 = mul nsw i32 %div74, %55
  %mul77 = mul nsw i32 %mul76, 9
  %mul78 = mul nsw i32 %mul77, 3
  %conv79 = sext i32 %mul78 to i64
  %mul80 = mul i64 %conv79, 4
  %conv81 = trunc i64 %mul80 to i32
  %56 = load i32, i32* %canary
  %57 = icmp eq i32 %56, 1367397690
  br i1 %57, label %58, label %func_exit

58:                                               ; preds = %for.end70, %func_exit
  ret i32 %conv81

func_exit:                                        ; preds = %for.end70
  call void @detect_breach()
  br label %58
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @FastIntegerPelBlockMotionSearch.49(i16** %orig_pic, i16 signext %ref, i32 %list, i32 %pic_pix_x, i32 %pic_pix_y, i32 %blocktype, i16 signext %pred_mv_x, i16 signext %pred_mv_y, i16* %mv_x, i16* %mv_y, i32 %search_range, i32 %min_mcost, double %lambda) #0 {
entry:
  %blocksize_y = alloca i32, align 4
  %get_ref_line = alloca i16* (i32, i16*, i32, i32, i32, i32)*, align 8
  %list.addr = alloca i32, align 4
  %pic_pix_x.addr = alloca i32, align 4
  %pos = alloca i32, align 4
  %N_Bframe = alloca i32, align 4
  %mvshift = alloca i32, align 4
  %m = alloca i32, align 4
  %mcost = alloca i32, align 4
  %orig_pic.addr = alloca i16**, align 8
  %iSADLayer = alloca i32, align 4
  %search_range.addr = alloca i32, align 4
  %center_x = alloca i32, align 4
  %ref_pic = alloca i16*, align 8
  %mv_y.addr = alloca i16*, align 8
  %cand_x = alloca i32, align 4
  %blocksize_x = alloca i32, align 4
  %pred_x = alloca i32, align 4
  %blocksize_x4 = alloca i32, align 4
  %iXMinNow = alloca i32, align 4
  %height = alloca i32, align 4
  %list_offset = alloca i32, align 4
  %search_step = alloca i32, align 4
  %center_y = alloca i32, align 4
  %canary = alloca i32
  store i32 764460282, i32* %canary
  %i = alloca i32, align 4
  %betaSec = alloca float, align 4
  %pred_mv_x.addr = alloca i16, align 2
  %pic_pix_y.addr = alloca i32, align 4
  %mv_x.addr = alloca i16*, align 8
  %best_x = alloca i32, align 4
  %ref.addr = alloca i16, align 2
  %cand_y = alloca i32, align 4
  %iYMinNow = alloca i32, align 4
  %lambda.addr = alloca double, align 8
  %lambda_factor = alloca i32, align 4
  %betaThird = alloca float, align 4
  %iAbort = alloca i32, align 4
  %min_mcost.addr = alloca i32, align 4
  %pred_mv_y.addr = alloca i16, align 2
  %blocktype.addr = alloca i32, align 4
  %best_y = alloca i32, align 4
  %pred_y = alloca i32, align 4
  store i16** %orig_pic, i16*** %orig_pic.addr, align 8
  store i16 %ref, i16* %ref.addr, align 2
  store i32 %list, i32* %list.addr, align 4
  store i32 %pic_pix_x, i32* %pic_pix_x.addr, align 4
  store i32 %pic_pix_y, i32* %pic_pix_y.addr, align 4
  store i32 %blocktype, i32* %blocktype.addr, align 4
  store i16 %pred_mv_x, i16* %pred_mv_x.addr, align 2
  store i16 %pred_mv_y, i16* %pred_mv_y.addr, align 2
  store i16* %mv_x, i16** %mv_x.addr, align 8
  store i16* %mv_y, i16** %mv_y.addr, align 8
  store i32 %search_range, i32* %search_range.addr, align 4
  store i32 %min_mcost, i32* %min_mcost.addr, align 4
  store double %lambda, double* %lambda.addr, align 8
  %0 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %MbaffFrameFlag = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %0, i32 0, i32 90
  %1 = load i32, i32* %MbaffFrameFlag, align 8
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %mb_data = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %2, i32 0, i32 51
  %3 = load %struct.macroblock*, %struct.macroblock** %mb_data, align 8
  %4 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %current_mb_nr = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %4, i32 0, i32 3
  %5 = load i32, i32* %current_mb_nr, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 %idxprom
  %mb_field = getelementptr inbounds %struct.macroblock, %struct.macroblock* %arrayidx, i32 0, i32 22
  %6 = load i32, i32* %mb_field, align 4
  %tobool1 = icmp ne i32 %6, 0
  br i1 %tobool1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %7 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %current_mb_nr2 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %7, i32 0, i32 3
  %8 = load i32, i32* %current_mb_nr2, align 4
  %rem = srem i32 %8, 2
  %tobool3 = icmp ne i32 %rem, 0
  %9 = zext i1 %tobool3 to i64
  %cond = select i1 %tobool3, i32 4, i32 2
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond4 = phi i32 [ %cond, %cond.true ], [ 0, %cond.false ]
  store i32 %cond4, i32* %list_offset, align 4
  %10 = load i32, i32* %list.addr, align 4
  %11 = load i32, i32* %list_offset, align 4
  %add = add nsw i32 %10, %11
  %idxprom5 = sext i32 %add to i64
  %arrayidx6 = getelementptr inbounds [6 x %struct.storable_picture**], [6 x %struct.storable_picture**]* @listX, i64 0, i64 %idxprom5
  %12 = load %struct.storable_picture**, %struct.storable_picture*** %arrayidx6, align 8
  %13 = load i16, i16* %ref.addr, align 2
  %idxprom7 = sext i16 %13 to i64
  %arrayidx8 = getelementptr inbounds %struct.storable_picture*, %struct.storable_picture** %12, i64 %idxprom7
  %14 = load %struct.storable_picture*, %struct.storable_picture** %arrayidx8, align 8
  %imgY_11 = getelementptr inbounds %struct.storable_picture, %struct.storable_picture* %14, i32 0, i32 26
  %15 = load i16*, i16** %imgY_11, align 8
  store i16* %15, i16** %ref_pic, align 8
  %16 = load double, double* %lambda.addr, align 8
  %mul = fmul double 6.553600e+04, %16
  %add9 = fadd double %mul, 5.000000e-01
  %conv = fptosi double %add9 to i32
  store i32 %conv, i32* %lambda_factor, align 4
  store i32 2, i32* %mvshift, align 4
  %17 = load %struct.InputParameters*, %struct.InputParameters** @input, align 8
  %blc_size = getelementptr inbounds %struct.InputParameters, %struct.InputParameters* %17, i32 0, i32 20
  %18 = load i32, i32* %blocktype.addr, align 4
  %idxprom10 = sext i32 %18 to i64
  %arrayidx11 = getelementptr inbounds [8 x [2 x i32]], [8 x [2 x i32]]* %blc_size, i64 0, i64 %idxprom10
  %arrayidx12 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx11, i64 0, i64 1
  %19 = load i32, i32* %arrayidx12, align 4
  store i32 %19, i32* %blocksize_y, align 4
  %20 = load %struct.InputParameters*, %struct.InputParameters** @input, align 8
  %blc_size13 = getelementptr inbounds %struct.InputParameters, %struct.InputParameters* %20, i32 0, i32 20
  %21 = load i32, i32* %blocktype.addr, align 4
  %idxprom14 = sext i32 %21 to i64
  %arrayidx15 = getelementptr inbounds [8 x [2 x i32]], [8 x [2 x i32]]* %blc_size13, i64 0, i64 %idxprom14
  %arrayidx16 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx15, i64 0, i64 0
  %22 = load i32, i32* %arrayidx16, align 8
  store i32 %22, i32* %blocksize_x, align 4
  %23 = load i32, i32* %blocksize_x, align 4
  %shr = ashr i32 %23, 2
  store i32 %shr, i32* %blocksize_x4, align 4
  %24 = load i32, i32* %pic_pix_x.addr, align 4
  %25 = load i32, i32* %mvshift, align 4
  %shl = shl i32 %24, %25
  %26 = load i16, i16* %pred_mv_x.addr, align 2
  %conv17 = sext i16 %26 to i32
  %add18 = add nsw i32 %shl, %conv17
  store i32 %add18, i32* %pred_x, align 4
  %27 = load i32, i32* %pic_pix_y.addr, align 4
  %28 = load i32, i32* %mvshift, align 4
  %shl19 = shl i32 %27, %28
  %29 = load i16, i16* %pred_mv_y.addr, align 2
  %conv20 = sext i16 %29 to i32
  %add21 = add nsw i32 %shl19, %conv20
  store i32 %add21, i32* %pred_y, align 4
  %30 = load i32, i32* %pic_pix_x.addr, align 4
  %31 = load i16*, i16** %mv_x.addr, align 8
  %32 = load i16, i16* %31, align 2
  %conv22 = sext i16 %32 to i32
  %add23 = add nsw i32 %30, %conv22
  store i32 %add23, i32* %center_x, align 4
  %33 = load i32, i32* %pic_pix_y.addr, align 4
  %34 = load i16*, i16** %mv_y.addr, align 8
  %35 = load i16, i16* %34, align 2
  %conv24 = sext i16 %35 to i32
  %add25 = add nsw i32 %33, %conv24
  store i32 %add25, i32* %center_y, align 4
  store i32 0, i32* %best_x, align 4
  store i32 0, i32* %best_y, align 4
  %36 = load %struct.InputParameters*, %struct.InputParameters** @input, align 8
  %successive_Bframe = getelementptr inbounds %struct.InputParameters, %struct.InputParameters* %36, i32 0, i32 34
  %37 = load i32, i32* %successive_Bframe, align 4
  store i32 %37, i32* %N_Bframe, align 4
  %38 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %MbaffFrameFlag26 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %38, i32 0, i32 90
  %39 = load i32, i32* %MbaffFrameFlag26, align 8
  %tobool27 = icmp ne i32 %39, 0
  br i1 %tobool27, label %land.lhs.true28, label %cond.false37

land.lhs.true28:                                  ; preds = %cond.end
  %40 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %mb_data29 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %40, i32 0, i32 51
  %41 = load %struct.macroblock*, %struct.macroblock** %mb_data29, align 8
  %42 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %current_mb_nr30 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %42, i32 0, i32 3
  %43 = load i32, i32* %current_mb_nr30, align 4
  %idxprom31 = sext i32 %43 to i64
  %arrayidx32 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %41, i64 %idxprom31
  %mb_field33 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %arrayidx32, i32 0, i32 22
  %44 = load i32, i32* %mb_field33, align 4
  %tobool34 = icmp ne i32 %44, 0
  br i1 %tobool34, label %cond.true35, label %cond.false37

cond.true35:                                      ; preds = %land.lhs.true28
  %45 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height36 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %45, i32 0, i32 15
  %46 = load i32, i32* %height36, align 4
  %div = sdiv i32 %46, 2
  br label %cond.end39

cond.false37:                                     ; preds = %land.lhs.true28, %cond.end
  %47 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height38 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %47, i32 0, i32 15
  %48 = load i32, i32* %height38, align 4
  br label %cond.end39

cond.end39:                                       ; preds = %cond.false37, %cond.true35
  %cond40 = phi i32 [ %div, %cond.true35 ], [ %48, %cond.false37 ]
  store i32 %cond40, i32* %height, align 4
  %49 = load i32, i32* %center_x, align 4
  %50 = load i32, i32* %search_range.addr, align 4
  %cmp = icmp sgt i32 %49, %50
  br i1 %cmp, label %land.lhs.true42, label %if.else

land.lhs.true42:                                  ; preds = %cond.end39
  %51 = load i32, i32* %center_x, align 4
  %52 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %width = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %52, i32 0, i32 13
  %53 = load i32, i32* %width, align 4
  %sub = sub nsw i32 %53, 1
  %54 = load i32, i32* %search_range.addr, align 4
  %sub43 = sub nsw i32 %sub, %54
  %55 = load i32, i32* %blocksize_x, align 4
  %sub44 = sub nsw i32 %sub43, %55
  %cmp45 = icmp slt i32 %51, %sub44
  br i1 %cmp45, label %land.lhs.true47, label %if.else

land.lhs.true47:                                  ; preds = %land.lhs.true42
  %56 = load i32, i32* %center_y, align 4
  %57 = load i32, i32* %search_range.addr, align 4
  %cmp48 = icmp sgt i32 %56, %57
  br i1 %cmp48, label %land.lhs.true50, label %if.else

land.lhs.true50:                                  ; preds = %land.lhs.true47
  %58 = load i32, i32* %center_y, align 4
  %59 = load i32, i32* %height, align 4
  %sub51 = sub nsw i32 %59, 1
  %60 = load i32, i32* %search_range.addr, align 4
  %sub52 = sub nsw i32 %sub51, %60
  %61 = load i32, i32* %blocksize_y, align 4
  %sub53 = sub nsw i32 %sub52, %61
  %cmp54 = icmp slt i32 %58, %sub53
  br i1 %cmp54, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true50
  store i16* (i32, i16*, i32, i32, i32, i32)* @FastLineX, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  br label %if.end

if.else:                                          ; preds = %land.lhs.true50, %land.lhs.true47, %land.lhs.true42, %cond.end39
  store i16* (i32, i16*, i32, i32, i32, i32)* @UMVLineX, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %62 = load i32**, i32*** @McostState, align 8
  %arrayidx56 = getelementptr inbounds i32*, i32** %62, i64 0
  %63 = load i32*, i32** %arrayidx56, align 8
  %64 = bitcast i32* %63 to i8*
  %65 = load i32, i32* %search_range.addr, align 4
  %mul57 = mul nsw i32 2, %65
  %add58 = add nsw i32 %mul57, 1
  %66 = load i32, i32* %search_range.addr, align 4
  %mul59 = mul nsw i32 2, %66
  %add60 = add nsw i32 %mul59, 1
  %mul61 = mul nsw i32 %add58, %add60
  %mul62 = mul nsw i32 %mul61, 4
  %conv63 = sext i32 %mul62 to i64
  call void @llvm.memset.p0i8.i64(i8* align 4 %64, i8 0, i64 %conv63, i1 false)
  %67 = load i16, i16* %ref.addr, align 2
  %conv64 = sext i16 %67 to i32
  %cmp65 = icmp sgt i32 %conv64, 0
  br i1 %cmp65, label %if.then67, label %if.else89

if.then67:                                        ; preds = %if.end
  %68 = load i32, i32* @pred_SAD_ref, align 4
  %cmp68 = icmp ne i32 %68, 0
  br i1 %cmp68, label %if.then70, label %if.else87

if.then70:                                        ; preds = %if.then67
  %69 = load i32, i32* %blocktype.addr, align 4
  %idxprom71 = sext i32 %69 to i64
  %arrayidx72 = getelementptr inbounds [8 x float], [8 x float]* @Bsize, i64 0, i64 %idxprom71
  %70 = load float, float* %arrayidx72, align 4
  %71 = load i32, i32* @pred_SAD_ref, align 4
  %72 = load i32, i32* @pred_SAD_ref, align 4
  %mul73 = mul nsw i32 %71, %72
  %conv74 = sitofp i32 %mul73 to float
  %div75 = fdiv float %70, %conv74
  %73 = load i32, i32* %blocktype.addr, align 4
  %idxprom76 = sext i32 %73 to i64
  %arrayidx77 = getelementptr inbounds [8 x float], [8 x float]* @AlphaSec, i64 0, i64 %idxprom76
  %74 = load float, float* %arrayidx77, align 4
  %sub78 = fsub float %div75, %74
  store float %sub78, float* %betaSec, align 4
  %75 = load i32, i32* %blocktype.addr, align 4
  %idxprom79 = sext i32 %75 to i64
  %arrayidx80 = getelementptr inbounds [8 x float], [8 x float]* @Bsize, i64 0, i64 %idxprom79
  %76 = load float, float* %arrayidx80, align 4
  %77 = load i32, i32* @pred_SAD_ref, align 4
  %78 = load i32, i32* @pred_SAD_ref, align 4
  %mul81 = mul nsw i32 %77, %78
  %conv82 = sitofp i32 %mul81 to float
  %div83 = fdiv float %76, %conv82
  %79 = load i32, i32* %blocktype.addr, align 4
  %idxprom84 = sext i32 %79 to i64
  %arrayidx85 = getelementptr inbounds [8 x float], [8 x float]* @AlphaThird, i64 0, i64 %idxprom84
  %80 = load float, float* %arrayidx85, align 4
  %sub86 = fsub float %div83, %80
  store float %sub86, float* %betaThird, align 4
  br label %if.end88

if.else87:                                        ; preds = %if.then67
  store float 0.000000e+00, float* %betaSec, align 4
  store float 0.000000e+00, float* %betaThird, align 4
  br label %if.end88

if.end88:                                         ; preds = %if.else87, %if.then70
  br label %if.end137

if.else89:                                        ; preds = %if.end
  %81 = load i32, i32* %blocktype.addr, align 4
  %cmp90 = icmp eq i32 %81, 1
  br i1 %cmp90, label %if.then92, label %if.else114

if.then92:                                        ; preds = %if.else89
  %82 = load i32, i32* @pred_SAD_space, align 4
  %cmp93 = icmp ne i32 %82, 0
  br i1 %cmp93, label %if.then95, label %if.else112

if.then95:                                        ; preds = %if.then92
  %83 = load i32, i32* %blocktype.addr, align 4
  %idxprom96 = sext i32 %83 to i64
  %arrayidx97 = getelementptr inbounds [8 x float], [8 x float]* @Bsize, i64 0, i64 %idxprom96
  %84 = load float, float* %arrayidx97, align 4
  %85 = load i32, i32* @pred_SAD_space, align 4
  %86 = load i32, i32* @pred_SAD_space, align 4
  %mul98 = mul nsw i32 %85, %86
  %conv99 = sitofp i32 %mul98 to float
  %div100 = fdiv float %84, %conv99
  %87 = load i32, i32* %blocktype.addr, align 4
  %idxprom101 = sext i32 %87 to i64
  %arrayidx102 = getelementptr inbounds [8 x float], [8 x float]* @AlphaSec, i64 0, i64 %idxprom101
  %88 = load float, float* %arrayidx102, align 4
  %sub103 = fsub float %div100, %88
  store float %sub103, float* %betaSec, align 4
  %89 = load i32, i32* %blocktype.addr, align 4
  %idxprom104 = sext i32 %89 to i64
  %arrayidx105 = getelementptr inbounds [8 x float], [8 x float]* @Bsize, i64 0, i64 %idxprom104
  %90 = load float, float* %arrayidx105, align 4
  %91 = load i32, i32* @pred_SAD_space, align 4
  %92 = load i32, i32* @pred_SAD_space, align 4
  %mul106 = mul nsw i32 %91, %92
  %conv107 = sitofp i32 %mul106 to float
  %div108 = fdiv float %90, %conv107
  %93 = load i32, i32* %blocktype.addr, align 4
  %idxprom109 = sext i32 %93 to i64
  %arrayidx110 = getelementptr inbounds [8 x float], [8 x float]* @AlphaThird, i64 0, i64 %idxprom109
  %94 = load float, float* %arrayidx110, align 4
  %sub111 = fsub float %div108, %94
  store float %sub111, float* %betaThird, align 4
  br label %if.end113

if.else112:                                       ; preds = %if.then92
  store float 0.000000e+00, float* %betaSec, align 4
  store float 0.000000e+00, float* %betaThird, align 4
  br label %if.end113

if.end113:                                        ; preds = %if.else112, %if.then95
  br label %if.end136

if.else114:                                       ; preds = %if.else89
  %95 = load i32, i32* @pred_SAD_uplayer, align 4
  %cmp115 = icmp ne i32 %95, 0
  br i1 %cmp115, label %if.then117, label %if.else134

if.then117:                                       ; preds = %if.else114
  %96 = load i32, i32* %blocktype.addr, align 4
  %idxprom118 = sext i32 %96 to i64
  %arrayidx119 = getelementptr inbounds [8 x float], [8 x float]* @Bsize, i64 0, i64 %idxprom118
  %97 = load float, float* %arrayidx119, align 4
  %98 = load i32, i32* @pred_SAD_uplayer, align 4
  %99 = load i32, i32* @pred_SAD_uplayer, align 4
  %mul120 = mul nsw i32 %98, %99
  %conv121 = sitofp i32 %mul120 to float
  %div122 = fdiv float %97, %conv121
  %100 = load i32, i32* %blocktype.addr, align 4
  %idxprom123 = sext i32 %100 to i64
  %arrayidx124 = getelementptr inbounds [8 x float], [8 x float]* @AlphaSec, i64 0, i64 %idxprom123
  %101 = load float, float* %arrayidx124, align 4
  %sub125 = fsub float %div122, %101
  store float %sub125, float* %betaSec, align 4
  %102 = load i32, i32* %blocktype.addr, align 4
  %idxprom126 = sext i32 %102 to i64
  %arrayidx127 = getelementptr inbounds [8 x float], [8 x float]* @Bsize, i64 0, i64 %idxprom126
  %103 = load float, float* %arrayidx127, align 4
  %104 = load i32, i32* @pred_SAD_uplayer, align 4
  %105 = load i32, i32* @pred_SAD_uplayer, align 4
  %mul128 = mul nsw i32 %104, %105
  %conv129 = sitofp i32 %mul128 to float
  %div130 = fdiv float %103, %conv129
  %106 = load i32, i32* %blocktype.addr, align 4
  %idxprom131 = sext i32 %106 to i64
  %arrayidx132 = getelementptr inbounds [8 x float], [8 x float]* @AlphaThird, i64 0, i64 %idxprom131
  %107 = load float, float* %arrayidx132, align 4
  %sub133 = fsub float %div130, %107
  store float %sub133, float* %betaThird, align 4
  br label %if.end135

if.else134:                                       ; preds = %if.else114
  store float 0.000000e+00, float* %betaSec, align 4
  store float 0.000000e+00, float* %betaThird, align 4
  br label %if.end135

if.end135:                                        ; preds = %if.else134, %if.then117
  br label %if.end136

if.end136:                                        ; preds = %if.end135, %if.end113
  br label %if.end137

if.end137:                                        ; preds = %if.end136, %if.end88
  %108 = load i32, i32* %center_x, align 4
  store i32 %108, i32* %cand_x, align 4
  %109 = load i32, i32* %center_y, align 4
  store i32 %109, i32* %cand_y, align 4
  %110 = load i32, i32* %lambda_factor, align 4
  %111 = load i32*, i32** @mvbits, align 8
  %112 = load i32, i32* %cand_x, align 4
  %113 = load i32, i32* %mvshift, align 4
  %shl138 = shl i32 %112, %113
  %114 = load i32, i32* %pred_x, align 4
  %sub139 = sub nsw i32 %shl138, %114
  %idxprom140 = sext i32 %sub139 to i64
  %arrayidx141 = getelementptr inbounds i32, i32* %111, i64 %idxprom140
  %115 = load i32, i32* %arrayidx141, align 4
  %116 = load i32*, i32** @mvbits, align 8
  %117 = load i32, i32* %cand_y, align 4
  %118 = load i32, i32* %mvshift, align 4
  %shl142 = shl i32 %117, %118
  %119 = load i32, i32* %pred_y, align 4
  %sub143 = sub nsw i32 %shl142, %119
  %idxprom144 = sext i32 %sub143 to i64
  %arrayidx145 = getelementptr inbounds i32, i32* %116, i64 %idxprom144
  %120 = load i32, i32* %arrayidx145, align 4
  %add146 = add nsw i32 %115, %120
  %mul147 = mul nsw i32 %110, %add146
  %shr148 = ashr i32 %mul147, 16
  store i32 %shr148, i32* %mcost, align 4
  %121 = load i16*, i16** %ref_pic, align 8
  %122 = load i16**, i16*** %orig_pic.addr, align 8
  %123 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %124 = load i32, i32* %blocksize_y, align 4
  %125 = load i32, i32* %blocksize_x, align 4
  %126 = load i32, i32* %blocksize_x4, align 4
  %127 = load i32, i32* %mcost, align 4
  %128 = load i32, i32* %min_mcost.addr, align 4
  %129 = load i32, i32* %cand_x, align 4
  %130 = load i32, i32* %cand_y, align 4
  %call = call i32 @PartCalMad(i16* %121, i16** %122, i16* (i32, i16*, i32, i32, i32, i32)* %123, i32 %124, i32 %125, i32 %126, i32 %127, i32 %128, i32 %129, i32 %130)
  store i32 %call, i32* %mcost, align 4
  %131 = load i32, i32* %mcost, align 4
  %132 = load i32**, i32*** @McostState, align 8
  %133 = load i32, i32* %search_range.addr, align 4
  %idxprom149 = sext i32 %133 to i64
  %arrayidx150 = getelementptr inbounds i32*, i32** %132, i64 %idxprom149
  %134 = load i32*, i32** %arrayidx150, align 8
  %135 = load i32, i32* %search_range.addr, align 4
  %idxprom151 = sext i32 %135 to i64
  %arrayidx152 = getelementptr inbounds i32, i32* %134, i64 %idxprom151
  store i32 %131, i32* %arrayidx152, align 4
  %136 = load i32, i32* %mcost, align 4
  %137 = load i32, i32* %min_mcost.addr, align 4
  %cmp153 = icmp slt i32 %136, %137
  br i1 %cmp153, label %if.then155, label %if.end156

if.then155:                                       ; preds = %if.end137
  %138 = load i32, i32* %mcost, align 4
  store i32 %138, i32* %min_mcost.addr, align 4
  %139 = load i32, i32* %cand_x, align 4
  store i32 %139, i32* %best_x, align 4
  %140 = load i32, i32* %cand_y, align 4
  store i32 %140, i32* %best_y, align 4
  br label %if.end156

if.end156:                                        ; preds = %if.then155, %if.end137
  %141 = load i32, i32* %best_x, align 4
  store i32 %141, i32* %iXMinNow, align 4
  %142 = load i32, i32* %best_y, align 4
  store i32 %142, i32* %iYMinNow, align 4
  store i32 0, i32* %m, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end156
  %143 = load i32, i32* %m, align 4
  %cmp157 = icmp slt i32 %143, 4
  br i1 %cmp157, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %144 = load i32, i32* %iXMinNow, align 4
  %145 = load i32, i32* %m, align 4
  %idxprom159 = sext i32 %145 to i64
  %arrayidx160 = getelementptr inbounds [4 x i32], [4 x i32]* @FastIntegerPelBlockMotionSearch.Diamond_x, i64 0, i64 %idxprom159
  %146 = load i32, i32* %arrayidx160, align 4
  %add161 = add nsw i32 %144, %146
  store i32 %add161, i32* %cand_x, align 4
  %147 = load i32, i32* %iYMinNow, align 4
  %148 = load i32, i32* %m, align 4
  %idxprom162 = sext i32 %148 to i64
  %arrayidx163 = getelementptr inbounds [4 x i32], [4 x i32]* @FastIntegerPelBlockMotionSearch.Diamond_y, i64 0, i64 %idxprom162
  %149 = load i32, i32* %arrayidx163, align 4
  %add164 = add nsw i32 %147, %149
  store i32 %add164, i32* %cand_y, align 4
  %150 = load i32, i32* %cand_x, align 4
  %151 = load i32, i32* %center_x, align 4
  %sub165 = sub nsw i32 %150, %151
  %call166 = call i32 @abs(i32 %sub165) #6
  %152 = load i32, i32* %search_range.addr, align 4
  %cmp167 = icmp sle i32 %call166, %152
  br i1 %cmp167, label %land.lhs.true169, label %if.end210

land.lhs.true169:                                 ; preds = %for.body
  %153 = load i32, i32* %cand_y, align 4
  %154 = load i32, i32* %center_y, align 4
  %sub170 = sub nsw i32 %153, %154
  %call171 = call i32 @abs(i32 %sub170) #6
  %155 = load i32, i32* %search_range.addr, align 4
  %cmp172 = icmp sle i32 %call171, %155
  br i1 %cmp172, label %if.then174, label %if.end210

if.then174:                                       ; preds = %land.lhs.true169
  %156 = load i32**, i32*** @McostState, align 8
  %157 = load i32, i32* %cand_y, align 4
  %158 = load i32, i32* %center_y, align 4
  %sub175 = sub nsw i32 %157, %158
  %159 = load i32, i32* %search_range.addr, align 4
  %add176 = add nsw i32 %sub175, %159
  %idxprom177 = sext i32 %add176 to i64
  %arrayidx178 = getelementptr inbounds i32*, i32** %156, i64 %idxprom177
  %160 = load i32*, i32** %arrayidx178, align 8
  %161 = load i32, i32* %cand_x, align 4
  %162 = load i32, i32* %center_x, align 4
  %sub179 = sub nsw i32 %161, %162
  %163 = load i32, i32* %search_range.addr, align 4
  %add180 = add nsw i32 %sub179, %163
  %idxprom181 = sext i32 %add180 to i64
  %arrayidx182 = getelementptr inbounds i32, i32* %160, i64 %idxprom181
  %164 = load i32, i32* %arrayidx182, align 4
  %tobool183 = icmp ne i32 %164, 0
  br i1 %tobool183, label %if.end209, label %if.then184

if.then184:                                       ; preds = %if.then174
  %165 = load i32, i32* %lambda_factor, align 4
  %166 = load i32*, i32** @mvbits, align 8
  %167 = load i32, i32* %cand_x, align 4
  %168 = load i32, i32* %mvshift, align 4
  %shl185 = shl i32 %167, %168
  %169 = load i32, i32* %pred_x, align 4
  %sub186 = sub nsw i32 %shl185, %169
  %idxprom187 = sext i32 %sub186 to i64
  %arrayidx188 = getelementptr inbounds i32, i32* %166, i64 %idxprom187
  %170 = load i32, i32* %arrayidx188, align 4
  %171 = load i32*, i32** @mvbits, align 8
  %172 = load i32, i32* %cand_y, align 4
  %173 = load i32, i32* %mvshift, align 4
  %shl189 = shl i32 %172, %173
  %174 = load i32, i32* %pred_y, align 4
  %sub190 = sub nsw i32 %shl189, %174
  %idxprom191 = sext i32 %sub190 to i64
  %arrayidx192 = getelementptr inbounds i32, i32* %171, i64 %idxprom191
  %175 = load i32, i32* %arrayidx192, align 4
  %add193 = add nsw i32 %170, %175
  %mul194 = mul nsw i32 %165, %add193
  %shr195 = ashr i32 %mul194, 16
  store i32 %shr195, i32* %mcost, align 4
  %176 = load i16*, i16** %ref_pic, align 8
  %177 = load i16**, i16*** %orig_pic.addr, align 8
  %178 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %179 = load i32, i32* %blocksize_y, align 4
  %180 = load i32, i32* %blocksize_x, align 4
  %181 = load i32, i32* %blocksize_x4, align 4
  %182 = load i32, i32* %mcost, align 4
  %183 = load i32, i32* %min_mcost.addr, align 4
  %184 = load i32, i32* %cand_x, align 4
  %185 = load i32, i32* %cand_y, align 4
  %call196 = call i32 @PartCalMad(i16* %176, i16** %177, i16* (i32, i16*, i32, i32, i32, i32)* %178, i32 %179, i32 %180, i32 %181, i32 %182, i32 %183, i32 %184, i32 %185)
  store i32 %call196, i32* %mcost, align 4
  %186 = load i32, i32* %mcost, align 4
  %187 = load i32**, i32*** @McostState, align 8
  %188 = load i32, i32* %cand_y, align 4
  %189 = load i32, i32* %center_y, align 4
  %sub197 = sub nsw i32 %188, %189
  %190 = load i32, i32* %search_range.addr, align 4
  %add198 = add nsw i32 %sub197, %190
  %idxprom199 = sext i32 %add198 to i64
  %arrayidx200 = getelementptr inbounds i32*, i32** %187, i64 %idxprom199
  %191 = load i32*, i32** %arrayidx200, align 8
  %192 = load i32, i32* %cand_x, align 4
  %193 = load i32, i32* %center_x, align 4
  %sub201 = sub nsw i32 %192, %193
  %194 = load i32, i32* %search_range.addr, align 4
  %add202 = add nsw i32 %sub201, %194
  %idxprom203 = sext i32 %add202 to i64
  %arrayidx204 = getelementptr inbounds i32, i32* %191, i64 %idxprom203
  store i32 %186, i32* %arrayidx204, align 4
  %195 = load i32, i32* %mcost, align 4
  %196 = load i32, i32* %min_mcost.addr, align 4
  %cmp205 = icmp slt i32 %195, %196
  br i1 %cmp205, label %if.then207, label %if.end208

if.then207:                                       ; preds = %if.then184
  %197 = load i32, i32* %cand_x, align 4
  store i32 %197, i32* %best_x, align 4
  %198 = load i32, i32* %cand_y, align 4
  store i32 %198, i32* %best_y, align 4
  %199 = load i32, i32* %mcost, align 4
  store i32 %199, i32* %min_mcost.addr, align 4
  br label %if.end208

if.end208:                                        ; preds = %if.then207, %if.then184
  br label %if.end209

if.end209:                                        ; preds = %if.end208, %if.then174
  br label %if.end210

if.end210:                                        ; preds = %if.end209, %land.lhs.true169, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end210
  %200 = load i32, i32* %m, align 4
  %inc = add nsw i32 %200, 1
  store i32 %inc, i32* %m, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %201 = load i32, i32* %center_x, align 4
  %202 = load i32, i32* %pic_pix_x.addr, align 4
  %cmp211 = icmp ne i32 %201, %202
  br i1 %cmp211, label %if.then215, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.end
  %203 = load i32, i32* %center_y, align 4
  %204 = load i32, i32* %pic_pix_y.addr, align 4
  %cmp213 = icmp ne i32 %203, %204
  br i1 %cmp213, label %if.then215, label %if.end321

if.then215:                                       ; preds = %lor.lhs.false, %for.end
  %205 = load i32, i32* %pic_pix_x.addr, align 4
  store i32 %205, i32* %cand_x, align 4
  %206 = load i32, i32* %pic_pix_y.addr, align 4
  store i32 %206, i32* %cand_y, align 4
  %207 = load i32, i32* %cand_x, align 4
  %208 = load i32, i32* %center_x, align 4
  %sub216 = sub nsw i32 %207, %208
  %call217 = call i32 @abs(i32 %sub216) #6
  %209 = load i32, i32* %search_range.addr, align 4
  %cmp218 = icmp sle i32 %call217, %209
  br i1 %cmp218, label %land.lhs.true220, label %if.end261

land.lhs.true220:                                 ; preds = %if.then215
  %210 = load i32, i32* %cand_y, align 4
  %211 = load i32, i32* %center_y, align 4
  %sub221 = sub nsw i32 %210, %211
  %call222 = call i32 @abs(i32 %sub221) #6
  %212 = load i32, i32* %search_range.addr, align 4
  %cmp223 = icmp sle i32 %call222, %212
  br i1 %cmp223, label %if.then225, label %if.end261

if.then225:                                       ; preds = %land.lhs.true220
  %213 = load i32**, i32*** @McostState, align 8
  %214 = load i32, i32* %cand_y, align 4
  %215 = load i32, i32* %center_y, align 4
  %sub226 = sub nsw i32 %214, %215
  %216 = load i32, i32* %search_range.addr, align 4
  %add227 = add nsw i32 %sub226, %216
  %idxprom228 = sext i32 %add227 to i64
  %arrayidx229 = getelementptr inbounds i32*, i32** %213, i64 %idxprom228
  %217 = load i32*, i32** %arrayidx229, align 8
  %218 = load i32, i32* %cand_x, align 4
  %219 = load i32, i32* %center_x, align 4
  %sub230 = sub nsw i32 %218, %219
  %220 = load i32, i32* %search_range.addr, align 4
  %add231 = add nsw i32 %sub230, %220
  %idxprom232 = sext i32 %add231 to i64
  %arrayidx233 = getelementptr inbounds i32, i32* %217, i64 %idxprom232
  %221 = load i32, i32* %arrayidx233, align 4
  %tobool234 = icmp ne i32 %221, 0
  br i1 %tobool234, label %if.end260, label %if.then235

if.then235:                                       ; preds = %if.then225
  %222 = load i32, i32* %lambda_factor, align 4
  %223 = load i32*, i32** @mvbits, align 8
  %224 = load i32, i32* %cand_x, align 4
  %225 = load i32, i32* %mvshift, align 4
  %shl236 = shl i32 %224, %225
  %226 = load i32, i32* %pred_x, align 4
  %sub237 = sub nsw i32 %shl236, %226
  %idxprom238 = sext i32 %sub237 to i64
  %arrayidx239 = getelementptr inbounds i32, i32* %223, i64 %idxprom238
  %227 = load i32, i32* %arrayidx239, align 4
  %228 = load i32*, i32** @mvbits, align 8
  %229 = load i32, i32* %cand_y, align 4
  %230 = load i32, i32* %mvshift, align 4
  %shl240 = shl i32 %229, %230
  %231 = load i32, i32* %pred_y, align 4
  %sub241 = sub nsw i32 %shl240, %231
  %idxprom242 = sext i32 %sub241 to i64
  %arrayidx243 = getelementptr inbounds i32, i32* %228, i64 %idxprom242
  %232 = load i32, i32* %arrayidx243, align 4
  %add244 = add nsw i32 %227, %232
  %mul245 = mul nsw i32 %222, %add244
  %shr246 = ashr i32 %mul245, 16
  store i32 %shr246, i32* %mcost, align 4
  %233 = load i16*, i16** %ref_pic, align 8
  %234 = load i16**, i16*** %orig_pic.addr, align 8
  %235 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %236 = load i32, i32* %blocksize_y, align 4
  %237 = load i32, i32* %blocksize_x, align 4
  %238 = load i32, i32* %blocksize_x4, align 4
  %239 = load i32, i32* %mcost, align 4
  %240 = load i32, i32* %min_mcost.addr, align 4
  %241 = load i32, i32* %cand_x, align 4
  %242 = load i32, i32* %cand_y, align 4
  %call247 = call i32 @PartCalMad(i16* %233, i16** %234, i16* (i32, i16*, i32, i32, i32, i32)* %235, i32 %236, i32 %237, i32 %238, i32 %239, i32 %240, i32 %241, i32 %242)
  store i32 %call247, i32* %mcost, align 4
  %243 = load i32, i32* %mcost, align 4
  %244 = load i32**, i32*** @McostState, align 8
  %245 = load i32, i32* %cand_y, align 4
  %246 = load i32, i32* %center_y, align 4
  %sub248 = sub nsw i32 %245, %246
  %247 = load i32, i32* %search_range.addr, align 4
  %add249 = add nsw i32 %sub248, %247
  %idxprom250 = sext i32 %add249 to i64
  %arrayidx251 = getelementptr inbounds i32*, i32** %244, i64 %idxprom250
  %248 = load i32*, i32** %arrayidx251, align 8
  %249 = load i32, i32* %cand_x, align 4
  %250 = load i32, i32* %center_x, align 4
  %sub252 = sub nsw i32 %249, %250
  %251 = load i32, i32* %search_range.addr, align 4
  %add253 = add nsw i32 %sub252, %251
  %idxprom254 = sext i32 %add253 to i64
  %arrayidx255 = getelementptr inbounds i32, i32* %248, i64 %idxprom254
  store i32 %243, i32* %arrayidx255, align 4
  %252 = load i32, i32* %mcost, align 4
  %253 = load i32, i32* %min_mcost.addr, align 4
  %cmp256 = icmp slt i32 %252, %253
  br i1 %cmp256, label %if.then258, label %if.end259

if.then258:                                       ; preds = %if.then235
  %254 = load i32, i32* %cand_x, align 4
  store i32 %254, i32* %best_x, align 4
  %255 = load i32, i32* %cand_y, align 4
  store i32 %255, i32* %best_y, align 4
  %256 = load i32, i32* %mcost, align 4
  store i32 %256, i32* %min_mcost.addr, align 4
  br label %if.end259

if.end259:                                        ; preds = %if.then258, %if.then235
  br label %if.end260

if.end260:                                        ; preds = %if.end259, %if.then225
  br label %if.end261

if.end261:                                        ; preds = %if.end260, %land.lhs.true220, %if.then215
  %257 = load i32, i32* %best_x, align 4
  store i32 %257, i32* %iXMinNow, align 4
  %258 = load i32, i32* %best_y, align 4
  store i32 %258, i32* %iYMinNow, align 4
  store i32 0, i32* %m, align 4
  br label %for.cond262

for.cond262:                                      ; preds = %for.inc318, %if.end261
  %259 = load i32, i32* %m, align 4
  %cmp263 = icmp slt i32 %259, 4
  br i1 %cmp263, label %for.body265, label %for.end320

for.body265:                                      ; preds = %for.cond262
  %260 = load i32, i32* %iXMinNow, align 4
  %261 = load i32, i32* %m, align 4
  %idxprom266 = sext i32 %261 to i64
  %arrayidx267 = getelementptr inbounds [4 x i32], [4 x i32]* @FastIntegerPelBlockMotionSearch.Diamond_x, i64 0, i64 %idxprom266
  %262 = load i32, i32* %arrayidx267, align 4
  %add268 = add nsw i32 %260, %262
  store i32 %add268, i32* %cand_x, align 4
  %263 = load i32, i32* %iYMinNow, align 4
  %264 = load i32, i32* %m, align 4
  %idxprom269 = sext i32 %264 to i64
  %arrayidx270 = getelementptr inbounds [4 x i32], [4 x i32]* @FastIntegerPelBlockMotionSearch.Diamond_y, i64 0, i64 %idxprom269
  %265 = load i32, i32* %arrayidx270, align 4
  %add271 = add nsw i32 %263, %265
  store i32 %add271, i32* %cand_y, align 4
  %266 = load i32, i32* %cand_x, align 4
  %267 = load i32, i32* %center_x, align 4
  %sub272 = sub nsw i32 %266, %267
  %call273 = call i32 @abs(i32 %sub272) #6
  %268 = load i32, i32* %search_range.addr, align 4
  %cmp274 = icmp sle i32 %call273, %268
  br i1 %cmp274, label %land.lhs.true276, label %if.end317

land.lhs.true276:                                 ; preds = %for.body265
  %269 = load i32, i32* %cand_y, align 4
  %270 = load i32, i32* %center_y, align 4
  %sub277 = sub nsw i32 %269, %270
  %call278 = call i32 @abs(i32 %sub277) #6
  %271 = load i32, i32* %search_range.addr, align 4
  %cmp279 = icmp sle i32 %call278, %271
  br i1 %cmp279, label %if.then281, label %if.end317

if.then281:                                       ; preds = %land.lhs.true276
  %272 = load i32**, i32*** @McostState, align 8
  %273 = load i32, i32* %cand_y, align 4
  %274 = load i32, i32* %center_y, align 4
  %sub282 = sub nsw i32 %273, %274
  %275 = load i32, i32* %search_range.addr, align 4
  %add283 = add nsw i32 %sub282, %275
  %idxprom284 = sext i32 %add283 to i64
  %arrayidx285 = getelementptr inbounds i32*, i32** %272, i64 %idxprom284
  %276 = load i32*, i32** %arrayidx285, align 8
  %277 = load i32, i32* %cand_x, align 4
  %278 = load i32, i32* %center_x, align 4
  %sub286 = sub nsw i32 %277, %278
  %279 = load i32, i32* %search_range.addr, align 4
  %add287 = add nsw i32 %sub286, %279
  %idxprom288 = sext i32 %add287 to i64
  %arrayidx289 = getelementptr inbounds i32, i32* %276, i64 %idxprom288
  %280 = load i32, i32* %arrayidx289, align 4
  %tobool290 = icmp ne i32 %280, 0
  br i1 %tobool290, label %if.end316, label %if.then291

if.then291:                                       ; preds = %if.then281
  %281 = load i32, i32* %lambda_factor, align 4
  %282 = load i32*, i32** @mvbits, align 8
  %283 = load i32, i32* %cand_x, align 4
  %284 = load i32, i32* %mvshift, align 4
  %shl292 = shl i32 %283, %284
  %285 = load i32, i32* %pred_x, align 4
  %sub293 = sub nsw i32 %shl292, %285
  %idxprom294 = sext i32 %sub293 to i64
  %arrayidx295 = getelementptr inbounds i32, i32* %282, i64 %idxprom294
  %286 = load i32, i32* %arrayidx295, align 4
  %287 = load i32*, i32** @mvbits, align 8
  %288 = load i32, i32* %cand_y, align 4
  %289 = load i32, i32* %mvshift, align 4
  %shl296 = shl i32 %288, %289
  %290 = load i32, i32* %pred_y, align 4
  %sub297 = sub nsw i32 %shl296, %290
  %idxprom298 = sext i32 %sub297 to i64
  %arrayidx299 = getelementptr inbounds i32, i32* %287, i64 %idxprom298
  %291 = load i32, i32* %arrayidx299, align 4
  %add300 = add nsw i32 %286, %291
  %mul301 = mul nsw i32 %281, %add300
  %shr302 = ashr i32 %mul301, 16
  store i32 %shr302, i32* %mcost, align 4
  %292 = load i16*, i16** %ref_pic, align 8
  %293 = load i16**, i16*** %orig_pic.addr, align 8
  %294 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %295 = load i32, i32* %blocksize_y, align 4
  %296 = load i32, i32* %blocksize_x, align 4
  %297 = load i32, i32* %blocksize_x4, align 4
  %298 = load i32, i32* %mcost, align 4
  %299 = load i32, i32* %min_mcost.addr, align 4
  %300 = load i32, i32* %cand_x, align 4
  %301 = load i32, i32* %cand_y, align 4
  %call303 = call i32 @PartCalMad(i16* %292, i16** %293, i16* (i32, i16*, i32, i32, i32, i32)* %294, i32 %295, i32 %296, i32 %297, i32 %298, i32 %299, i32 %300, i32 %301)
  store i32 %call303, i32* %mcost, align 4
  %302 = load i32, i32* %mcost, align 4
  %303 = load i32**, i32*** @McostState, align 8
  %304 = load i32, i32* %cand_y, align 4
  %305 = load i32, i32* %center_y, align 4
  %sub304 = sub nsw i32 %304, %305
  %306 = load i32, i32* %search_range.addr, align 4
  %add305 = add nsw i32 %sub304, %306
  %idxprom306 = sext i32 %add305 to i64
  %arrayidx307 = getelementptr inbounds i32*, i32** %303, i64 %idxprom306
  %307 = load i32*, i32** %arrayidx307, align 8
  %308 = load i32, i32* %cand_x, align 4
  %309 = load i32, i32* %center_x, align 4
  %sub308 = sub nsw i32 %308, %309
  %310 = load i32, i32* %search_range.addr, align 4
  %add309 = add nsw i32 %sub308, %310
  %idxprom310 = sext i32 %add309 to i64
  %arrayidx311 = getelementptr inbounds i32, i32* %307, i64 %idxprom310
  store i32 %302, i32* %arrayidx311, align 4
  %311 = load i32, i32* %mcost, align 4
  %312 = load i32, i32* %min_mcost.addr, align 4
  %cmp312 = icmp slt i32 %311, %312
  br i1 %cmp312, label %if.then314, label %if.end315

if.then314:                                       ; preds = %if.then291
  %313 = load i32, i32* %cand_x, align 4
  store i32 %313, i32* %best_x, align 4
  %314 = load i32, i32* %cand_y, align 4
  store i32 %314, i32* %best_y, align 4
  %315 = load i32, i32* %mcost, align 4
  store i32 %315, i32* %min_mcost.addr, align 4
  br label %if.end315

if.end315:                                        ; preds = %if.then314, %if.then291
  br label %if.end316

if.end316:                                        ; preds = %if.end315, %if.then281
  br label %if.end317

if.end317:                                        ; preds = %if.end316, %land.lhs.true276, %for.body265
  br label %for.inc318

for.inc318:                                       ; preds = %if.end317
  %316 = load i32, i32* %m, align 4
  %inc319 = add nsw i32 %316, 1
  store i32 %inc319, i32* %m, align 4
  br label %for.cond262

for.end320:                                       ; preds = %for.cond262
  br label %if.end321

if.end321:                                        ; preds = %for.end320, %lor.lhs.false
  %317 = load i32, i32* %blocktype.addr, align 4
  %cmp322 = icmp sgt i32 %317, 1
  br i1 %cmp322, label %if.then324, label %if.end392

if.then324:                                       ; preds = %if.end321
  %318 = load i32, i32* %pic_pix_x.addr, align 4
  %319 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @pred_MV_uplayer, i64 0, i64 0), align 4
  %div325 = sdiv i32 %319, 4
  %add326 = add nsw i32 %318, %div325
  store i32 %add326, i32* %cand_x, align 4
  %320 = load i32, i32* %pic_pix_y.addr, align 4
  %321 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @pred_MV_uplayer, i64 0, i64 1), align 4
  %div327 = sdiv i32 %321, 4
  %add328 = add nsw i32 %320, %div327
  store i32 %add328, i32* %cand_y, align 4
  %322 = load i32, i32* %cand_x, align 4
  %323 = load i32, i32* %center_x, align 4
  %sub329 = sub nsw i32 %322, %323
  %call330 = call i32 @abs(i32 %sub329) #6
  %324 = load i32, i32* %search_range.addr, align 4
  %cmp331 = icmp sle i32 %call330, %324
  br i1 %cmp331, label %land.lhs.true333, label %if.end374

land.lhs.true333:                                 ; preds = %if.then324
  %325 = load i32, i32* %cand_y, align 4
  %326 = load i32, i32* %center_y, align 4
  %sub334 = sub nsw i32 %325, %326
  %call335 = call i32 @abs(i32 %sub334) #6
  %327 = load i32, i32* %search_range.addr, align 4
  %cmp336 = icmp sle i32 %call335, %327
  br i1 %cmp336, label %if.then338, label %if.end374

if.then338:                                       ; preds = %land.lhs.true333
  %328 = load i32**, i32*** @McostState, align 8
  %329 = load i32, i32* %cand_y, align 4
  %330 = load i32, i32* %center_y, align 4
  %sub339 = sub nsw i32 %329, %330
  %331 = load i32, i32* %search_range.addr, align 4
  %add340 = add nsw i32 %sub339, %331
  %idxprom341 = sext i32 %add340 to i64
  %arrayidx342 = getelementptr inbounds i32*, i32** %328, i64 %idxprom341
  %332 = load i32*, i32** %arrayidx342, align 8
  %333 = load i32, i32* %cand_x, align 4
  %334 = load i32, i32* %center_x, align 4
  %sub343 = sub nsw i32 %333, %334
  %335 = load i32, i32* %search_range.addr, align 4
  %add344 = add nsw i32 %sub343, %335
  %idxprom345 = sext i32 %add344 to i64
  %arrayidx346 = getelementptr inbounds i32, i32* %332, i64 %idxprom345
  %336 = load i32, i32* %arrayidx346, align 4
  %tobool347 = icmp ne i32 %336, 0
  br i1 %tobool347, label %if.end373, label %if.then348

if.then348:                                       ; preds = %if.then338
  %337 = load i32, i32* %lambda_factor, align 4
  %338 = load i32*, i32** @mvbits, align 8
  %339 = load i32, i32* %cand_x, align 4
  %340 = load i32, i32* %mvshift, align 4
  %shl349 = shl i32 %339, %340
  %341 = load i32, i32* %pred_x, align 4
  %sub350 = sub nsw i32 %shl349, %341
  %idxprom351 = sext i32 %sub350 to i64
  %arrayidx352 = getelementptr inbounds i32, i32* %338, i64 %idxprom351
  %342 = load i32, i32* %arrayidx352, align 4
  %343 = load i32*, i32** @mvbits, align 8
  %344 = load i32, i32* %cand_y, align 4
  %345 = load i32, i32* %mvshift, align 4
  %shl353 = shl i32 %344, %345
  %346 = load i32, i32* %pred_y, align 4
  %sub354 = sub nsw i32 %shl353, %346
  %idxprom355 = sext i32 %sub354 to i64
  %arrayidx356 = getelementptr inbounds i32, i32* %343, i64 %idxprom355
  %347 = load i32, i32* %arrayidx356, align 4
  %add357 = add nsw i32 %342, %347
  %mul358 = mul nsw i32 %337, %add357
  %shr359 = ashr i32 %mul358, 16
  store i32 %shr359, i32* %mcost, align 4
  %348 = load i16*, i16** %ref_pic, align 8
  %349 = load i16**, i16*** %orig_pic.addr, align 8
  %350 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %351 = load i32, i32* %blocksize_y, align 4
  %352 = load i32, i32* %blocksize_x, align 4
  %353 = load i32, i32* %blocksize_x4, align 4
  %354 = load i32, i32* %mcost, align 4
  %355 = load i32, i32* %min_mcost.addr, align 4
  %356 = load i32, i32* %cand_x, align 4
  %357 = load i32, i32* %cand_y, align 4
  %call360 = call i32 @PartCalMad(i16* %348, i16** %349, i16* (i32, i16*, i32, i32, i32, i32)* %350, i32 %351, i32 %352, i32 %353, i32 %354, i32 %355, i32 %356, i32 %357)
  store i32 %call360, i32* %mcost, align 4
  %358 = load i32, i32* %mcost, align 4
  %359 = load i32**, i32*** @McostState, align 8
  %360 = load i32, i32* %cand_y, align 4
  %361 = load i32, i32* %center_y, align 4
  %sub361 = sub nsw i32 %360, %361
  %362 = load i32, i32* %search_range.addr, align 4
  %add362 = add nsw i32 %sub361, %362
  %idxprom363 = sext i32 %add362 to i64
  %arrayidx364 = getelementptr inbounds i32*, i32** %359, i64 %idxprom363
  %363 = load i32*, i32** %arrayidx364, align 8
  %364 = load i32, i32* %cand_x, align 4
  %365 = load i32, i32* %center_x, align 4
  %sub365 = sub nsw i32 %364, %365
  %366 = load i32, i32* %search_range.addr, align 4
  %add366 = add nsw i32 %sub365, %366
  %idxprom367 = sext i32 %add366 to i64
  %arrayidx368 = getelementptr inbounds i32, i32* %363, i64 %idxprom367
  store i32 %358, i32* %arrayidx368, align 4
  %367 = load i32, i32* %mcost, align 4
  %368 = load i32, i32* %min_mcost.addr, align 4
  %cmp369 = icmp slt i32 %367, %368
  br i1 %cmp369, label %if.then371, label %if.end372

if.then371:                                       ; preds = %if.then348
  %369 = load i32, i32* %cand_x, align 4
  store i32 %369, i32* %best_x, align 4
  %370 = load i32, i32* %cand_y, align 4
  store i32 %370, i32* %best_y, align 4
  %371 = load i32, i32* %mcost, align 4
  store i32 %371, i32* %min_mcost.addr, align 4
  br label %if.end372

if.end372:                                        ; preds = %if.then371, %if.then348
  br label %if.end373

if.end373:                                        ; preds = %if.end372, %if.then338
  br label %if.end374

if.end374:                                        ; preds = %if.end373, %land.lhs.true333, %if.then324
  %372 = load i32, i32* %min_mcost.addr, align 4
  %373 = load i32, i32* @pred_SAD_uplayer, align 4
  %sub375 = sub nsw i32 %372, %373
  %conv376 = sitofp i32 %sub375 to float
  %374 = load i32, i32* @pred_SAD_uplayer, align 4
  %conv377 = sitofp i32 %374 to float
  %375 = load float, float* %betaThird, align 4
  %mul378 = fmul float %conv377, %375
  %cmp379 = fcmp olt float %conv376, %mul378
  br i1 %cmp379, label %if.then381, label %if.else382

if.then381:                                       ; preds = %if.end374
  br label %third_step

if.else382:                                       ; preds = %if.end374
  %376 = load i32, i32* %min_mcost.addr, align 4
  %377 = load i32, i32* @pred_SAD_uplayer, align 4
  %sub383 = sub nsw i32 %376, %377
  %conv384 = sitofp i32 %sub383 to float
  %378 = load i32, i32* @pred_SAD_uplayer, align 4
  %conv385 = sitofp i32 %378 to float
  %379 = load float, float* %betaSec, align 4
  %mul386 = fmul float %conv385, %379
  %cmp387 = fcmp olt float %conv384, %mul386
  br i1 %cmp387, label %if.then389, label %if.end390

if.then389:                                       ; preds = %if.else382
  br label %sec_step

if.end390:                                        ; preds = %if.else382
  br label %if.end391

if.end391:                                        ; preds = %if.end390
  br label %if.end392

if.end392:                                        ; preds = %if.end391, %if.end321
  %380 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %number = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %380, i32 0, i32 0
  %381 = load i32, i32* %number, align 8
  %382 = load i16, i16* %ref.addr, align 2
  %conv393 = sext i16 %382 to i32
  %add394 = add nsw i32 1, %conv393
  %cmp395 = icmp sgt i32 %381, %add394
  br i1 %cmp395, label %land.lhs.true397, label %lor.lhs.false401

land.lhs.true397:                                 ; preds = %if.end392
  %383 = load i16, i16* %ref.addr, align 2
  %conv398 = sext i16 %383 to i32
  %cmp399 = icmp ne i32 %conv398, -1
  br i1 %cmp399, label %if.then408, label %lor.lhs.false401

lor.lhs.false401:                                 ; preds = %land.lhs.true397, %if.end392
  %384 = load i32, i32* %list.addr, align 4
  %cmp402 = icmp eq i32 %384, 1
  br i1 %cmp402, label %land.lhs.true404, label %if.end459

land.lhs.true404:                                 ; preds = %lor.lhs.false401
  %385 = load i32, i32* @Bframe_ctr, align 4
  %386 = load i32, i32* %N_Bframe, align 4
  %rem405 = srem i32 %385, %386
  %cmp406 = icmp sgt i32 %rem405, 1
  br i1 %cmp406, label %if.then408, label %if.end459

if.then408:                                       ; preds = %land.lhs.true404, %land.lhs.true397
  %387 = load i32, i32* %pic_pix_x.addr, align 4
  %388 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @pred_MV_time, i64 0, i64 0), align 4
  %div409 = sdiv i32 %388, 4
  %add410 = add nsw i32 %387, %div409
  store i32 %add410, i32* %cand_x, align 4
  %389 = load i32, i32* %pic_pix_y.addr, align 4
  %390 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @pred_MV_time, i64 0, i64 1), align 4
  %div411 = sdiv i32 %390, 4
  %add412 = add nsw i32 %389, %div411
  store i32 %add412, i32* %cand_y, align 4
  %391 = load i32, i32* %cand_x, align 4
  %392 = load i32, i32* %center_x, align 4
  %sub413 = sub nsw i32 %391, %392
  %call414 = call i32 @abs(i32 %sub413) #6
  %393 = load i32, i32* %search_range.addr, align 4
  %cmp415 = icmp sle i32 %call414, %393
  br i1 %cmp415, label %land.lhs.true417, label %if.end458

land.lhs.true417:                                 ; preds = %if.then408
  %394 = load i32, i32* %cand_y, align 4
  %395 = load i32, i32* %center_y, align 4
  %sub418 = sub nsw i32 %394, %395
  %call419 = call i32 @abs(i32 %sub418) #6
  %396 = load i32, i32* %search_range.addr, align 4
  %cmp420 = icmp sle i32 %call419, %396
  br i1 %cmp420, label %if.then422, label %if.end458

if.then422:                                       ; preds = %land.lhs.true417
  %397 = load i32**, i32*** @McostState, align 8
  %398 = load i32, i32* %cand_y, align 4
  %399 = load i32, i32* %center_y, align 4
  %sub423 = sub nsw i32 %398, %399
  %400 = load i32, i32* %search_range.addr, align 4
  %add424 = add nsw i32 %sub423, %400
  %idxprom425 = sext i32 %add424 to i64
  %arrayidx426 = getelementptr inbounds i32*, i32** %397, i64 %idxprom425
  %401 = load i32*, i32** %arrayidx426, align 8
  %402 = load i32, i32* %cand_x, align 4
  %403 = load i32, i32* %center_x, align 4
  %sub427 = sub nsw i32 %402, %403
  %404 = load i32, i32* %search_range.addr, align 4
  %add428 = add nsw i32 %sub427, %404
  %idxprom429 = sext i32 %add428 to i64
  %arrayidx430 = getelementptr inbounds i32, i32* %401, i64 %idxprom429
  %405 = load i32, i32* %arrayidx430, align 4
  %tobool431 = icmp ne i32 %405, 0
  br i1 %tobool431, label %if.end457, label %if.then432

if.then432:                                       ; preds = %if.then422
  %406 = load i32, i32* %lambda_factor, align 4
  %407 = load i32*, i32** @mvbits, align 8
  %408 = load i32, i32* %cand_x, align 4
  %409 = load i32, i32* %mvshift, align 4
  %shl433 = shl i32 %408, %409
  %410 = load i32, i32* %pred_x, align 4
  %sub434 = sub nsw i32 %shl433, %410
  %idxprom435 = sext i32 %sub434 to i64
  %arrayidx436 = getelementptr inbounds i32, i32* %407, i64 %idxprom435
  %411 = load i32, i32* %arrayidx436, align 4
  %412 = load i32*, i32** @mvbits, align 8
  %413 = load i32, i32* %cand_y, align 4
  %414 = load i32, i32* %mvshift, align 4
  %shl437 = shl i32 %413, %414
  %415 = load i32, i32* %pred_y, align 4
  %sub438 = sub nsw i32 %shl437, %415
  %idxprom439 = sext i32 %sub438 to i64
  %arrayidx440 = getelementptr inbounds i32, i32* %412, i64 %idxprom439
  %416 = load i32, i32* %arrayidx440, align 4
  %add441 = add nsw i32 %411, %416
  %mul442 = mul nsw i32 %406, %add441
  %shr443 = ashr i32 %mul442, 16
  store i32 %shr443, i32* %mcost, align 4
  %417 = load i16*, i16** %ref_pic, align 8
  %418 = load i16**, i16*** %orig_pic.addr, align 8
  %419 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %420 = load i32, i32* %blocksize_y, align 4
  %421 = load i32, i32* %blocksize_x, align 4
  %422 = load i32, i32* %blocksize_x4, align 4
  %423 = load i32, i32* %mcost, align 4
  %424 = load i32, i32* %min_mcost.addr, align 4
  %425 = load i32, i32* %cand_x, align 4
  %426 = load i32, i32* %cand_y, align 4
  %call444 = call i32 @PartCalMad(i16* %417, i16** %418, i16* (i32, i16*, i32, i32, i32, i32)* %419, i32 %420, i32 %421, i32 %422, i32 %423, i32 %424, i32 %425, i32 %426)
  store i32 %call444, i32* %mcost, align 4
  %427 = load i32, i32* %mcost, align 4
  %428 = load i32**, i32*** @McostState, align 8
  %429 = load i32, i32* %cand_y, align 4
  %430 = load i32, i32* %center_y, align 4
  %sub445 = sub nsw i32 %429, %430
  %431 = load i32, i32* %search_range.addr, align 4
  %add446 = add nsw i32 %sub445, %431
  %idxprom447 = sext i32 %add446 to i64
  %arrayidx448 = getelementptr inbounds i32*, i32** %428, i64 %idxprom447
  %432 = load i32*, i32** %arrayidx448, align 8
  %433 = load i32, i32* %cand_x, align 4
  %434 = load i32, i32* %center_x, align 4
  %sub449 = sub nsw i32 %433, %434
  %435 = load i32, i32* %search_range.addr, align 4
  %add450 = add nsw i32 %sub449, %435
  %idxprom451 = sext i32 %add450 to i64
  %arrayidx452 = getelementptr inbounds i32, i32* %432, i64 %idxprom451
  store i32 %427, i32* %arrayidx452, align 4
  %436 = load i32, i32* %mcost, align 4
  %437 = load i32, i32* %min_mcost.addr, align 4
  %cmp453 = icmp slt i32 %436, %437
  br i1 %cmp453, label %if.then455, label %if.end456

if.then455:                                       ; preds = %if.then432
  %438 = load i32, i32* %cand_x, align 4
  store i32 %438, i32* %best_x, align 4
  %439 = load i32, i32* %cand_y, align 4
  store i32 %439, i32* %best_y, align 4
  %440 = load i32, i32* %mcost, align 4
  store i32 %440, i32* %min_mcost.addr, align 4
  br label %if.end456

if.end456:                                        ; preds = %if.then455, %if.then432
  br label %if.end457

if.end457:                                        ; preds = %if.end456, %if.then422
  br label %if.end458

if.end458:                                        ; preds = %if.end457, %land.lhs.true417, %if.then408
  br label %if.end459

if.end459:                                        ; preds = %if.end458, %land.lhs.true404, %lor.lhs.false401
  %441 = load %struct.InputParameters*, %struct.InputParameters** @input, align 8
  %PicInterlace = getelementptr inbounds %struct.InputParameters, %struct.InputParameters* %441, i32 0, i32 91
  %442 = load i32, i32* %PicInterlace, align 8
  %cmp460 = icmp eq i32 %442, 1
  br i1 %cmp460, label %if.then462, label %if.else535

if.then462:                                       ; preds = %if.end459
  %443 = load i32, i32* %list.addr, align 4
  %cmp463 = icmp eq i32 %443, 0
  br i1 %cmp463, label %land.lhs.true465, label %lor.lhs.false469

land.lhs.true465:                                 ; preds = %if.then462
  %444 = load i16, i16* %ref.addr, align 2
  %conv466 = sext i16 %444 to i32
  %cmp467 = icmp sgt i32 %conv466, 0
  br i1 %cmp467, label %if.then483, label %lor.lhs.false469

lor.lhs.false469:                                 ; preds = %land.lhs.true465, %if.then462
  %445 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %type = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %445, i32 0, i32 6
  %446 = load i32, i32* %type, align 8
  %cmp470 = icmp eq i32 %446, 1
  br i1 %cmp470, label %land.lhs.true472, label %if.end534

land.lhs.true472:                                 ; preds = %lor.lhs.false469
  %447 = load i32, i32* %list.addr, align 4
  %cmp473 = icmp eq i32 %447, 0
  br i1 %cmp473, label %land.lhs.true475, label %if.end534

land.lhs.true475:                                 ; preds = %land.lhs.true472
  %448 = load i16, i16* %ref.addr, align 2
  %conv476 = sext i16 %448 to i32
  %cmp477 = icmp eq i32 %conv476, 0
  br i1 %cmp477, label %if.then483, label %lor.lhs.false479

lor.lhs.false479:                                 ; preds = %land.lhs.true475
  %449 = load i16, i16* %ref.addr, align 2
  %conv480 = sext i16 %449 to i32
  %cmp481 = icmp eq i32 %conv480, 2
  br i1 %cmp481, label %if.then483, label %if.end534

if.then483:                                       ; preds = %lor.lhs.false479, %land.lhs.true475, %land.lhs.true465
  %450 = load i32, i32* %pic_pix_x.addr, align 4
  %451 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @pred_MV_ref, i64 0, i64 0), align 4
  %div484 = sdiv i32 %451, 4
  %add485 = add nsw i32 %450, %div484
  store i32 %add485, i32* %cand_x, align 4
  %452 = load i32, i32* %pic_pix_y.addr, align 4
  %453 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @pred_MV_ref, i64 0, i64 1), align 4
  %div486 = sdiv i32 %453, 4
  %add487 = add nsw i32 %452, %div486
  store i32 %add487, i32* %cand_y, align 4
  %454 = load i32, i32* %cand_x, align 4
  %455 = load i32, i32* %center_x, align 4
  %sub488 = sub nsw i32 %454, %455
  %call489 = call i32 @abs(i32 %sub488) #6
  %456 = load i32, i32* %search_range.addr, align 4
  %cmp490 = icmp sle i32 %call489, %456
  br i1 %cmp490, label %land.lhs.true492, label %if.end533

land.lhs.true492:                                 ; preds = %if.then483
  %457 = load i32, i32* %cand_y, align 4
  %458 = load i32, i32* %center_y, align 4
  %sub493 = sub nsw i32 %457, %458
  %call494 = call i32 @abs(i32 %sub493) #6
  %459 = load i32, i32* %search_range.addr, align 4
  %cmp495 = icmp sle i32 %call494, %459
  br i1 %cmp495, label %if.then497, label %if.end533

if.then497:                                       ; preds = %land.lhs.true492
  %460 = load i32**, i32*** @McostState, align 8
  %461 = load i32, i32* %cand_y, align 4
  %462 = load i32, i32* %center_y, align 4
  %sub498 = sub nsw i32 %461, %462
  %463 = load i32, i32* %search_range.addr, align 4
  %add499 = add nsw i32 %sub498, %463
  %idxprom500 = sext i32 %add499 to i64
  %arrayidx501 = getelementptr inbounds i32*, i32** %460, i64 %idxprom500
  %464 = load i32*, i32** %arrayidx501, align 8
  %465 = load i32, i32* %cand_x, align 4
  %466 = load i32, i32* %center_x, align 4
  %sub502 = sub nsw i32 %465, %466
  %467 = load i32, i32* %search_range.addr, align 4
  %add503 = add nsw i32 %sub502, %467
  %idxprom504 = sext i32 %add503 to i64
  %arrayidx505 = getelementptr inbounds i32, i32* %464, i64 %idxprom504
  %468 = load i32, i32* %arrayidx505, align 4
  %tobool506 = icmp ne i32 %468, 0
  br i1 %tobool506, label %if.end532, label %if.then507

if.then507:                                       ; preds = %if.then497
  %469 = load i32, i32* %lambda_factor, align 4
  %470 = load i32*, i32** @mvbits, align 8
  %471 = load i32, i32* %cand_x, align 4
  %472 = load i32, i32* %mvshift, align 4
  %shl508 = shl i32 %471, %472
  %473 = load i32, i32* %pred_x, align 4
  %sub509 = sub nsw i32 %shl508, %473
  %idxprom510 = sext i32 %sub509 to i64
  %arrayidx511 = getelementptr inbounds i32, i32* %470, i64 %idxprom510
  %474 = load i32, i32* %arrayidx511, align 4
  %475 = load i32*, i32** @mvbits, align 8
  %476 = load i32, i32* %cand_y, align 4
  %477 = load i32, i32* %mvshift, align 4
  %shl512 = shl i32 %476, %477
  %478 = load i32, i32* %pred_y, align 4
  %sub513 = sub nsw i32 %shl512, %478
  %idxprom514 = sext i32 %sub513 to i64
  %arrayidx515 = getelementptr inbounds i32, i32* %475, i64 %idxprom514
  %479 = load i32, i32* %arrayidx515, align 4
  %add516 = add nsw i32 %474, %479
  %mul517 = mul nsw i32 %469, %add516
  %shr518 = ashr i32 %mul517, 16
  store i32 %shr518, i32* %mcost, align 4
  %480 = load i16*, i16** %ref_pic, align 8
  %481 = load i16**, i16*** %orig_pic.addr, align 8
  %482 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %483 = load i32, i32* %blocksize_y, align 4
  %484 = load i32, i32* %blocksize_x, align 4
  %485 = load i32, i32* %blocksize_x4, align 4
  %486 = load i32, i32* %mcost, align 4
  %487 = load i32, i32* %min_mcost.addr, align 4
  %488 = load i32, i32* %cand_x, align 4
  %489 = load i32, i32* %cand_y, align 4
  %call519 = call i32 @PartCalMad(i16* %480, i16** %481, i16* (i32, i16*, i32, i32, i32, i32)* %482, i32 %483, i32 %484, i32 %485, i32 %486, i32 %487, i32 %488, i32 %489)
  store i32 %call519, i32* %mcost, align 4
  %490 = load i32, i32* %mcost, align 4
  %491 = load i32**, i32*** @McostState, align 8
  %492 = load i32, i32* %cand_y, align 4
  %493 = load i32, i32* %center_y, align 4
  %sub520 = sub nsw i32 %492, %493
  %494 = load i32, i32* %search_range.addr, align 4
  %add521 = add nsw i32 %sub520, %494
  %idxprom522 = sext i32 %add521 to i64
  %arrayidx523 = getelementptr inbounds i32*, i32** %491, i64 %idxprom522
  %495 = load i32*, i32** %arrayidx523, align 8
  %496 = load i32, i32* %cand_x, align 4
  %497 = load i32, i32* %center_x, align 4
  %sub524 = sub nsw i32 %496, %497
  %498 = load i32, i32* %search_range.addr, align 4
  %add525 = add nsw i32 %sub524, %498
  %idxprom526 = sext i32 %add525 to i64
  %arrayidx527 = getelementptr inbounds i32, i32* %495, i64 %idxprom526
  store i32 %490, i32* %arrayidx527, align 4
  %499 = load i32, i32* %mcost, align 4
  %500 = load i32, i32* %min_mcost.addr, align 4
  %cmp528 = icmp slt i32 %499, %500
  br i1 %cmp528, label %if.then530, label %if.end531

if.then530:                                       ; preds = %if.then507
  %501 = load i32, i32* %cand_x, align 4
  store i32 %501, i32* %best_x, align 4
  %502 = load i32, i32* %cand_y, align 4
  store i32 %502, i32* %best_y, align 4
  %503 = load i32, i32* %mcost, align 4
  store i32 %503, i32* %min_mcost.addr, align 4
  br label %if.end531

if.end531:                                        ; preds = %if.then530, %if.then507
  br label %if.end532

if.end532:                                        ; preds = %if.end531, %if.then497
  br label %if.end533

if.end533:                                        ; preds = %if.end532, %land.lhs.true492, %if.then483
  br label %if.end534

if.end534:                                        ; preds = %if.end533, %lor.lhs.false479, %land.lhs.true472, %lor.lhs.false469
  br label %if.end605

if.else535:                                       ; preds = %if.end459
  %504 = load i32, i32* %list.addr, align 4
  %cmp536 = icmp eq i32 %504, 0
  br i1 %cmp536, label %land.lhs.true538, label %lor.lhs.false542

land.lhs.true538:                                 ; preds = %if.else535
  %505 = load i16, i16* %ref.addr, align 2
  %conv539 = sext i16 %505 to i32
  %cmp540 = icmp sgt i32 %conv539, 0
  br i1 %cmp540, label %if.then553, label %lor.lhs.false542

lor.lhs.false542:                                 ; preds = %land.lhs.true538, %if.else535
  %506 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %type543 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %506, i32 0, i32 6
  %507 = load i32, i32* %type543, align 8
  %cmp544 = icmp eq i32 %507, 1
  br i1 %cmp544, label %land.lhs.true546, label %if.end604

land.lhs.true546:                                 ; preds = %lor.lhs.false542
  %508 = load i32, i32* %list.addr, align 4
  %cmp547 = icmp eq i32 %508, 0
  br i1 %cmp547, label %land.lhs.true549, label %if.end604

land.lhs.true549:                                 ; preds = %land.lhs.true546
  %509 = load i16, i16* %ref.addr, align 2
  %conv550 = sext i16 %509 to i32
  %cmp551 = icmp eq i32 %conv550, 0
  br i1 %cmp551, label %if.then553, label %if.end604

if.then553:                                       ; preds = %land.lhs.true549, %land.lhs.true538
  %510 = load i32, i32* %pic_pix_x.addr, align 4
  %511 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @pred_MV_ref, i64 0, i64 0), align 4
  %div554 = sdiv i32 %511, 4
  %add555 = add nsw i32 %510, %div554
  store i32 %add555, i32* %cand_x, align 4
  %512 = load i32, i32* %pic_pix_y.addr, align 4
  %513 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @pred_MV_ref, i64 0, i64 1), align 4
  %div556 = sdiv i32 %513, 4
  %add557 = add nsw i32 %512, %div556
  store i32 %add557, i32* %cand_y, align 4
  %514 = load i32, i32* %cand_x, align 4
  %515 = load i32, i32* %center_x, align 4
  %sub558 = sub nsw i32 %514, %515
  %call559 = call i32 @abs(i32 %sub558) #6
  %516 = load i32, i32* %search_range.addr, align 4
  %cmp560 = icmp sle i32 %call559, %516
  br i1 %cmp560, label %land.lhs.true562, label %if.end603

land.lhs.true562:                                 ; preds = %if.then553
  %517 = load i32, i32* %cand_y, align 4
  %518 = load i32, i32* %center_y, align 4
  %sub563 = sub nsw i32 %517, %518
  %call564 = call i32 @abs(i32 %sub563) #6
  %519 = load i32, i32* %search_range.addr, align 4
  %cmp565 = icmp sle i32 %call564, %519
  br i1 %cmp565, label %if.then567, label %if.end603

if.then567:                                       ; preds = %land.lhs.true562
  %520 = load i32**, i32*** @McostState, align 8
  %521 = load i32, i32* %cand_y, align 4
  %522 = load i32, i32* %center_y, align 4
  %sub568 = sub nsw i32 %521, %522
  %523 = load i32, i32* %search_range.addr, align 4
  %add569 = add nsw i32 %sub568, %523
  %idxprom570 = sext i32 %add569 to i64
  %arrayidx571 = getelementptr inbounds i32*, i32** %520, i64 %idxprom570
  %524 = load i32*, i32** %arrayidx571, align 8
  %525 = load i32, i32* %cand_x, align 4
  %526 = load i32, i32* %center_x, align 4
  %sub572 = sub nsw i32 %525, %526
  %527 = load i32, i32* %search_range.addr, align 4
  %add573 = add nsw i32 %sub572, %527
  %idxprom574 = sext i32 %add573 to i64
  %arrayidx575 = getelementptr inbounds i32, i32* %524, i64 %idxprom574
  %528 = load i32, i32* %arrayidx575, align 4
  %tobool576 = icmp ne i32 %528, 0
  br i1 %tobool576, label %if.end602, label %if.then577

if.then577:                                       ; preds = %if.then567
  %529 = load i32, i32* %lambda_factor, align 4
  %530 = load i32*, i32** @mvbits, align 8
  %531 = load i32, i32* %cand_x, align 4
  %532 = load i32, i32* %mvshift, align 4
  %shl578 = shl i32 %531, %532
  %533 = load i32, i32* %pred_x, align 4
  %sub579 = sub nsw i32 %shl578, %533
  %idxprom580 = sext i32 %sub579 to i64
  %arrayidx581 = getelementptr inbounds i32, i32* %530, i64 %idxprom580
  %534 = load i32, i32* %arrayidx581, align 4
  %535 = load i32*, i32** @mvbits, align 8
  %536 = load i32, i32* %cand_y, align 4
  %537 = load i32, i32* %mvshift, align 4
  %shl582 = shl i32 %536, %537
  %538 = load i32, i32* %pred_y, align 4
  %sub583 = sub nsw i32 %shl582, %538
  %idxprom584 = sext i32 %sub583 to i64
  %arrayidx585 = getelementptr inbounds i32, i32* %535, i64 %idxprom584
  %539 = load i32, i32* %arrayidx585, align 4
  %add586 = add nsw i32 %534, %539
  %mul587 = mul nsw i32 %529, %add586
  %shr588 = ashr i32 %mul587, 16
  store i32 %shr588, i32* %mcost, align 4
  %540 = load i16*, i16** %ref_pic, align 8
  %541 = load i16**, i16*** %orig_pic.addr, align 8
  %542 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %543 = load i32, i32* %blocksize_y, align 4
  %544 = load i32, i32* %blocksize_x, align 4
  %545 = load i32, i32* %blocksize_x4, align 4
  %546 = load i32, i32* %mcost, align 4
  %547 = load i32, i32* %min_mcost.addr, align 4
  %548 = load i32, i32* %cand_x, align 4
  %549 = load i32, i32* %cand_y, align 4
  %call589 = call i32 @PartCalMad(i16* %540, i16** %541, i16* (i32, i16*, i32, i32, i32, i32)* %542, i32 %543, i32 %544, i32 %545, i32 %546, i32 %547, i32 %548, i32 %549)
  store i32 %call589, i32* %mcost, align 4
  %550 = load i32, i32* %mcost, align 4
  %551 = load i32**, i32*** @McostState, align 8
  %552 = load i32, i32* %cand_y, align 4
  %553 = load i32, i32* %center_y, align 4
  %sub590 = sub nsw i32 %552, %553
  %554 = load i32, i32* %search_range.addr, align 4
  %add591 = add nsw i32 %sub590, %554
  %idxprom592 = sext i32 %add591 to i64
  %arrayidx593 = getelementptr inbounds i32*, i32** %551, i64 %idxprom592
  %555 = load i32*, i32** %arrayidx593, align 8
  %556 = load i32, i32* %cand_x, align 4
  %557 = load i32, i32* %center_x, align 4
  %sub594 = sub nsw i32 %556, %557
  %558 = load i32, i32* %search_range.addr, align 4
  %add595 = add nsw i32 %sub594, %558
  %idxprom596 = sext i32 %add595 to i64
  %arrayidx597 = getelementptr inbounds i32, i32* %555, i64 %idxprom596
  store i32 %550, i32* %arrayidx597, align 4
  %559 = load i32, i32* %mcost, align 4
  %560 = load i32, i32* %min_mcost.addr, align 4
  %cmp598 = icmp slt i32 %559, %560
  br i1 %cmp598, label %if.then600, label %if.end601

if.then600:                                       ; preds = %if.then577
  %561 = load i32, i32* %cand_x, align 4
  store i32 %561, i32* %best_x, align 4
  %562 = load i32, i32* %cand_y, align 4
  store i32 %562, i32* %best_y, align 4
  %563 = load i32, i32* %mcost, align 4
  store i32 %563, i32* %min_mcost.addr, align 4
  br label %if.end601

if.end601:                                        ; preds = %if.then600, %if.then577
  br label %if.end602

if.end602:                                        ; preds = %if.end601, %if.then567
  br label %if.end603

if.end603:                                        ; preds = %if.end602, %land.lhs.true562, %if.then553
  br label %if.end604

if.end604:                                        ; preds = %if.end603, %land.lhs.true549, %land.lhs.true546, %lor.lhs.false542
  br label %if.end605

if.end605:                                        ; preds = %if.end604, %if.end534
  %564 = load i32, i32* %best_x, align 4
  store i32 %564, i32* %iXMinNow, align 4
  %565 = load i32, i32* %best_y, align 4
  store i32 %565, i32* %iYMinNow, align 4
  store i32 0, i32* %m, align 4
  br label %for.cond606

for.cond606:                                      ; preds = %for.inc662, %if.end605
  %566 = load i32, i32* %m, align 4
  %cmp607 = icmp slt i32 %566, 4
  br i1 %cmp607, label %for.body609, label %for.end664

for.body609:                                      ; preds = %for.cond606
  %567 = load i32, i32* %iXMinNow, align 4
  %568 = load i32, i32* %m, align 4
  %idxprom610 = sext i32 %568 to i64
  %arrayidx611 = getelementptr inbounds [4 x i32], [4 x i32]* @FastIntegerPelBlockMotionSearch.Diamond_x, i64 0, i64 %idxprom610
  %569 = load i32, i32* %arrayidx611, align 4
  %add612 = add nsw i32 %567, %569
  store i32 %add612, i32* %cand_x, align 4
  %570 = load i32, i32* %iYMinNow, align 4
  %571 = load i32, i32* %m, align 4
  %idxprom613 = sext i32 %571 to i64
  %arrayidx614 = getelementptr inbounds [4 x i32], [4 x i32]* @FastIntegerPelBlockMotionSearch.Diamond_y, i64 0, i64 %idxprom613
  %572 = load i32, i32* %arrayidx614, align 4
  %add615 = add nsw i32 %570, %572
  store i32 %add615, i32* %cand_y, align 4
  %573 = load i32, i32* %cand_x, align 4
  %574 = load i32, i32* %center_x, align 4
  %sub616 = sub nsw i32 %573, %574
  %call617 = call i32 @abs(i32 %sub616) #6
  %575 = load i32, i32* %search_range.addr, align 4
  %cmp618 = icmp sle i32 %call617, %575
  br i1 %cmp618, label %land.lhs.true620, label %if.end661

land.lhs.true620:                                 ; preds = %for.body609
  %576 = load i32, i32* %cand_y, align 4
  %577 = load i32, i32* %center_y, align 4
  %sub621 = sub nsw i32 %576, %577
  %call622 = call i32 @abs(i32 %sub621) #6
  %578 = load i32, i32* %search_range.addr, align 4
  %cmp623 = icmp sle i32 %call622, %578
  br i1 %cmp623, label %if.then625, label %if.end661

if.then625:                                       ; preds = %land.lhs.true620
  %579 = load i32**, i32*** @McostState, align 8
  %580 = load i32, i32* %cand_y, align 4
  %581 = load i32, i32* %center_y, align 4
  %sub626 = sub nsw i32 %580, %581
  %582 = load i32, i32* %search_range.addr, align 4
  %add627 = add nsw i32 %sub626, %582
  %idxprom628 = sext i32 %add627 to i64
  %arrayidx629 = getelementptr inbounds i32*, i32** %579, i64 %idxprom628
  %583 = load i32*, i32** %arrayidx629, align 8
  %584 = load i32, i32* %cand_x, align 4
  %585 = load i32, i32* %center_x, align 4
  %sub630 = sub nsw i32 %584, %585
  %586 = load i32, i32* %search_range.addr, align 4
  %add631 = add nsw i32 %sub630, %586
  %idxprom632 = sext i32 %add631 to i64
  %arrayidx633 = getelementptr inbounds i32, i32* %583, i64 %idxprom632
  %587 = load i32, i32* %arrayidx633, align 4
  %tobool634 = icmp ne i32 %587, 0
  br i1 %tobool634, label %if.end660, label %if.then635

if.then635:                                       ; preds = %if.then625
  %588 = load i32, i32* %lambda_factor, align 4
  %589 = load i32*, i32** @mvbits, align 8
  %590 = load i32, i32* %cand_x, align 4
  %591 = load i32, i32* %mvshift, align 4
  %shl636 = shl i32 %590, %591
  %592 = load i32, i32* %pred_x, align 4
  %sub637 = sub nsw i32 %shl636, %592
  %idxprom638 = sext i32 %sub637 to i64
  %arrayidx639 = getelementptr inbounds i32, i32* %589, i64 %idxprom638
  %593 = load i32, i32* %arrayidx639, align 4
  %594 = load i32*, i32** @mvbits, align 8
  %595 = load i32, i32* %cand_y, align 4
  %596 = load i32, i32* %mvshift, align 4
  %shl640 = shl i32 %595, %596
  %597 = load i32, i32* %pred_y, align 4
  %sub641 = sub nsw i32 %shl640, %597
  %idxprom642 = sext i32 %sub641 to i64
  %arrayidx643 = getelementptr inbounds i32, i32* %594, i64 %idxprom642
  %598 = load i32, i32* %arrayidx643, align 4
  %add644 = add nsw i32 %593, %598
  %mul645 = mul nsw i32 %588, %add644
  %shr646 = ashr i32 %mul645, 16
  store i32 %shr646, i32* %mcost, align 4
  %599 = load i16*, i16** %ref_pic, align 8
  %600 = load i16**, i16*** %orig_pic.addr, align 8
  %601 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %602 = load i32, i32* %blocksize_y, align 4
  %603 = load i32, i32* %blocksize_x, align 4
  %604 = load i32, i32* %blocksize_x4, align 4
  %605 = load i32, i32* %mcost, align 4
  %606 = load i32, i32* %min_mcost.addr, align 4
  %607 = load i32, i32* %cand_x, align 4
  %608 = load i32, i32* %cand_y, align 4
  %call647 = call i32 @PartCalMad(i16* %599, i16** %600, i16* (i32, i16*, i32, i32, i32, i32)* %601, i32 %602, i32 %603, i32 %604, i32 %605, i32 %606, i32 %607, i32 %608)
  store i32 %call647, i32* %mcost, align 4
  %609 = load i32, i32* %mcost, align 4
  %610 = load i32**, i32*** @McostState, align 8
  %611 = load i32, i32* %cand_y, align 4
  %612 = load i32, i32* %center_y, align 4
  %sub648 = sub nsw i32 %611, %612
  %613 = load i32, i32* %search_range.addr, align 4
  %add649 = add nsw i32 %sub648, %613
  %idxprom650 = sext i32 %add649 to i64
  %arrayidx651 = getelementptr inbounds i32*, i32** %610, i64 %idxprom650
  %614 = load i32*, i32** %arrayidx651, align 8
  %615 = load i32, i32* %cand_x, align 4
  %616 = load i32, i32* %center_x, align 4
  %sub652 = sub nsw i32 %615, %616
  %617 = load i32, i32* %search_range.addr, align 4
  %add653 = add nsw i32 %sub652, %617
  %idxprom654 = sext i32 %add653 to i64
  %arrayidx655 = getelementptr inbounds i32, i32* %614, i64 %idxprom654
  store i32 %609, i32* %arrayidx655, align 4
  %618 = load i32, i32* %mcost, align 4
  %619 = load i32, i32* %min_mcost.addr, align 4
  %cmp656 = icmp slt i32 %618, %619
  br i1 %cmp656, label %if.then658, label %if.end659

if.then658:                                       ; preds = %if.then635
  %620 = load i32, i32* %cand_x, align 4
  store i32 %620, i32* %best_x, align 4
  %621 = load i32, i32* %cand_y, align 4
  store i32 %621, i32* %best_y, align 4
  %622 = load i32, i32* %mcost, align 4
  store i32 %622, i32* %min_mcost.addr, align 4
  br label %if.end659

if.end659:                                        ; preds = %if.then658, %if.then635
  br label %if.end660

if.end660:                                        ; preds = %if.end659, %if.then625
  br label %if.end661

if.end661:                                        ; preds = %if.end660, %land.lhs.true620, %for.body609
  br label %for.inc662

for.inc662:                                       ; preds = %if.end661
  %623 = load i32, i32* %m, align 4
  %inc663 = add nsw i32 %623, 1
  store i32 %inc663, i32* %m, align 4
  br label %for.cond606

for.end664:                                       ; preds = %for.cond606
  %624 = load i16, i16* %ref.addr, align 2
  %conv665 = sext i16 %624 to i32
  %cmp666 = icmp sgt i32 %conv665, 0
  br i1 %cmp666, label %if.then668, label %if.else686

if.then668:                                       ; preds = %for.end664
  %625 = load i32, i32* %min_mcost.addr, align 4
  %626 = load i32, i32* @pred_SAD_ref, align 4
  %sub669 = sub nsw i32 %625, %626
  %conv670 = sitofp i32 %sub669 to float
  %627 = load i32, i32* @pred_SAD_ref, align 4
  %conv671 = sitofp i32 %627 to float
  %628 = load float, float* %betaThird, align 4
  %mul672 = fmul float %conv671, %628
  %cmp673 = fcmp olt float %conv670, %mul672
  br i1 %cmp673, label %if.then675, label %if.else676

if.then675:                                       ; preds = %if.then668
  br label %third_step

if.else676:                                       ; preds = %if.then668
  %629 = load i32, i32* %min_mcost.addr, align 4
  %630 = load i32, i32* @pred_SAD_ref, align 4
  %sub677 = sub nsw i32 %629, %630
  %conv678 = sitofp i32 %sub677 to float
  %631 = load i32, i32* @pred_SAD_ref, align 4
  %conv679 = sitofp i32 %631 to float
  %632 = load float, float* %betaSec, align 4
  %mul680 = fmul float %conv679, %632
  %cmp681 = fcmp olt float %conv678, %mul680
  br i1 %cmp681, label %if.then683, label %if.end684

if.then683:                                       ; preds = %if.else676
  br label %sec_step

if.end684:                                        ; preds = %if.else676
  br label %if.end685

if.end685:                                        ; preds = %if.end684
  br label %if.end726

if.else686:                                       ; preds = %for.end664
  %633 = load i32, i32* %blocktype.addr, align 4
  %cmp687 = icmp sgt i32 %633, 1
  br i1 %cmp687, label %if.then689, label %if.else707

if.then689:                                       ; preds = %if.else686
  %634 = load i32, i32* %min_mcost.addr, align 4
  %635 = load i32, i32* @pred_SAD_uplayer, align 4
  %sub690 = sub nsw i32 %634, %635
  %conv691 = sitofp i32 %sub690 to float
  %636 = load i32, i32* @pred_SAD_uplayer, align 4
  %conv692 = sitofp i32 %636 to float
  %637 = load float, float* %betaThird, align 4
  %mul693 = fmul float %conv692, %637
  %cmp694 = fcmp olt float %conv691, %mul693
  br i1 %cmp694, label %if.then696, label %if.else697

if.then696:                                       ; preds = %if.then689
  br label %third_step

if.else697:                                       ; preds = %if.then689
  %638 = load i32, i32* %min_mcost.addr, align 4
  %639 = load i32, i32* @pred_SAD_uplayer, align 4
  %sub698 = sub nsw i32 %638, %639
  %conv699 = sitofp i32 %sub698 to float
  %640 = load i32, i32* @pred_SAD_uplayer, align 4
  %conv700 = sitofp i32 %640 to float
  %641 = load float, float* %betaSec, align 4
  %mul701 = fmul float %conv700, %641
  %cmp702 = fcmp olt float %conv699, %mul701
  br i1 %cmp702, label %if.then704, label %if.end705

if.then704:                                       ; preds = %if.else697
  br label %sec_step

if.end705:                                        ; preds = %if.else697
  br label %if.end706

if.end706:                                        ; preds = %if.end705
  br label %if.end725

if.else707:                                       ; preds = %if.else686
  %642 = load i32, i32* %min_mcost.addr, align 4
  %643 = load i32, i32* @pred_SAD_space, align 4
  %sub708 = sub nsw i32 %642, %643
  %conv709 = sitofp i32 %sub708 to float
  %644 = load i32, i32* @pred_SAD_space, align 4
  %conv710 = sitofp i32 %644 to float
  %645 = load float, float* %betaThird, align 4
  %mul711 = fmul float %conv710, %645
  %cmp712 = fcmp olt float %conv709, %mul711
  br i1 %cmp712, label %if.then714, label %if.else715

if.then714:                                       ; preds = %if.else707
  br label %third_step

if.else715:                                       ; preds = %if.else707
  %646 = load i32, i32* %min_mcost.addr, align 4
  %647 = load i32, i32* @pred_SAD_space, align 4
  %sub716 = sub nsw i32 %646, %647
  %conv717 = sitofp i32 %sub716 to float
  %648 = load i32, i32* @pred_SAD_space, align 4
  %conv718 = sitofp i32 %648 to float
  %649 = load float, float* %betaSec, align 4
  %mul719 = fmul float %conv718, %649
  %cmp720 = fcmp olt float %conv717, %mul719
  br i1 %cmp720, label %if.then722, label %if.end723

if.then722:                                       ; preds = %if.else715
  br label %sec_step

if.end723:                                        ; preds = %if.else715
  br label %if.end724

if.end724:                                        ; preds = %if.end723
  br label %if.end725

if.end725:                                        ; preds = %if.end724, %if.end706
  br label %if.end726

if.end726:                                        ; preds = %if.end725, %if.end685
  %650 = load i32, i32* %blocktype.addr, align 4
  %cmp727 = icmp sgt i32 %650, 6
  br i1 %cmp727, label %if.then729, label %if.else730

if.then729:                                       ; preds = %if.end726
  br label %sec_step

if.else730:                                       ; preds = %if.end726
  br label %first_step

first_step:                                       ; preds = %if.else730
  %651 = load i32, i32* %best_x, align 4
  store i32 %651, i32* %iXMinNow, align 4
  %652 = load i32, i32* %best_y, align 4
  store i32 %652, i32* %iYMinNow, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond731

for.cond731:                                      ; preds = %for.inc832, %first_step
  %653 = load i32, i32* %i, align 4
  %654 = load i32, i32* %search_range.addr, align 4
  %div732 = sdiv i32 %654, 2
  %cmp733 = icmp sle i32 %653, %div732
  br i1 %cmp733, label %for.body735, label %for.end834

for.body735:                                      ; preds = %for.cond731
  %655 = load i32, i32* %i, align 4
  %mul736 = mul nsw i32 2, %655
  %sub737 = sub nsw i32 %mul736, 1
  store i32 %sub737, i32* %search_step, align 4
  %656 = load i32, i32* %iXMinNow, align 4
  %657 = load i32, i32* %search_step, align 4
  %add738 = add nsw i32 %656, %657
  store i32 %add738, i32* %cand_x, align 4
  %658 = load i32, i32* %iYMinNow, align 4
  store i32 %658, i32* %cand_y, align 4
  %659 = load i32, i32* %cand_x, align 4
  %660 = load i32, i32* %center_x, align 4
  %sub739 = sub nsw i32 %659, %660
  %call740 = call i32 @abs(i32 %sub739) #6
  %661 = load i32, i32* %search_range.addr, align 4
  %cmp741 = icmp sle i32 %call740, %661
  br i1 %cmp741, label %land.lhs.true743, label %if.end784

land.lhs.true743:                                 ; preds = %for.body735
  %662 = load i32, i32* %cand_y, align 4
  %663 = load i32, i32* %center_y, align 4
  %sub744 = sub nsw i32 %662, %663
  %call745 = call i32 @abs(i32 %sub744) #6
  %664 = load i32, i32* %search_range.addr, align 4
  %cmp746 = icmp sle i32 %call745, %664
  br i1 %cmp746, label %if.then748, label %if.end784

if.then748:                                       ; preds = %land.lhs.true743
  %665 = load i32**, i32*** @McostState, align 8
  %666 = load i32, i32* %cand_y, align 4
  %667 = load i32, i32* %center_y, align 4
  %sub749 = sub nsw i32 %666, %667
  %668 = load i32, i32* %search_range.addr, align 4
  %add750 = add nsw i32 %sub749, %668
  %idxprom751 = sext i32 %add750 to i64
  %arrayidx752 = getelementptr inbounds i32*, i32** %665, i64 %idxprom751
  %669 = load i32*, i32** %arrayidx752, align 8
  %670 = load i32, i32* %cand_x, align 4
  %671 = load i32, i32* %center_x, align 4
  %sub753 = sub nsw i32 %670, %671
  %672 = load i32, i32* %search_range.addr, align 4
  %add754 = add nsw i32 %sub753, %672
  %idxprom755 = sext i32 %add754 to i64
  %arrayidx756 = getelementptr inbounds i32, i32* %669, i64 %idxprom755
  %673 = load i32, i32* %arrayidx756, align 4
  %tobool757 = icmp ne i32 %673, 0
  br i1 %tobool757, label %if.end783, label %if.then758

if.then758:                                       ; preds = %if.then748
  %674 = load i32, i32* %lambda_factor, align 4
  %675 = load i32*, i32** @mvbits, align 8
  %676 = load i32, i32* %cand_x, align 4
  %677 = load i32, i32* %mvshift, align 4
  %shl759 = shl i32 %676, %677
  %678 = load i32, i32* %pred_x, align 4
  %sub760 = sub nsw i32 %shl759, %678
  %idxprom761 = sext i32 %sub760 to i64
  %arrayidx762 = getelementptr inbounds i32, i32* %675, i64 %idxprom761
  %679 = load i32, i32* %arrayidx762, align 4
  %680 = load i32*, i32** @mvbits, align 8
  %681 = load i32, i32* %cand_y, align 4
  %682 = load i32, i32* %mvshift, align 4
  %shl763 = shl i32 %681, %682
  %683 = load i32, i32* %pred_y, align 4
  %sub764 = sub nsw i32 %shl763, %683
  %idxprom765 = sext i32 %sub764 to i64
  %arrayidx766 = getelementptr inbounds i32, i32* %680, i64 %idxprom765
  %684 = load i32, i32* %arrayidx766, align 4
  %add767 = add nsw i32 %679, %684
  %mul768 = mul nsw i32 %674, %add767
  %shr769 = ashr i32 %mul768, 16
  store i32 %shr769, i32* %mcost, align 4
  %685 = load i16*, i16** %ref_pic, align 8
  %686 = load i16**, i16*** %orig_pic.addr, align 8
  %687 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %688 = load i32, i32* %blocksize_y, align 4
  %689 = load i32, i32* %blocksize_x, align 4
  %690 = load i32, i32* %blocksize_x4, align 4
  %691 = load i32, i32* %mcost, align 4
  %692 = load i32, i32* %min_mcost.addr, align 4
  %693 = load i32, i32* %cand_x, align 4
  %694 = load i32, i32* %cand_y, align 4
  %call770 = call i32 @PartCalMad(i16* %685, i16** %686, i16* (i32, i16*, i32, i32, i32, i32)* %687, i32 %688, i32 %689, i32 %690, i32 %691, i32 %692, i32 %693, i32 %694)
  store i32 %call770, i32* %mcost, align 4
  %695 = load i32, i32* %mcost, align 4
  %696 = load i32**, i32*** @McostState, align 8
  %697 = load i32, i32* %cand_y, align 4
  %698 = load i32, i32* %center_y, align 4
  %sub771 = sub nsw i32 %697, %698
  %699 = load i32, i32* %search_range.addr, align 4
  %add772 = add nsw i32 %sub771, %699
  %idxprom773 = sext i32 %add772 to i64
  %arrayidx774 = getelementptr inbounds i32*, i32** %696, i64 %idxprom773
  %700 = load i32*, i32** %arrayidx774, align 8
  %701 = load i32, i32* %cand_x, align 4
  %702 = load i32, i32* %center_x, align 4
  %sub775 = sub nsw i32 %701, %702
  %703 = load i32, i32* %search_range.addr, align 4
  %add776 = add nsw i32 %sub775, %703
  %idxprom777 = sext i32 %add776 to i64
  %arrayidx778 = getelementptr inbounds i32, i32* %700, i64 %idxprom777
  store i32 %695, i32* %arrayidx778, align 4
  %704 = load i32, i32* %mcost, align 4
  %705 = load i32, i32* %min_mcost.addr, align 4
  %cmp779 = icmp slt i32 %704, %705
  br i1 %cmp779, label %if.then781, label %if.end782

if.then781:                                       ; preds = %if.then758
  %706 = load i32, i32* %cand_x, align 4
  store i32 %706, i32* %best_x, align 4
  %707 = load i32, i32* %cand_y, align 4
  store i32 %707, i32* %best_y, align 4
  %708 = load i32, i32* %mcost, align 4
  store i32 %708, i32* %min_mcost.addr, align 4
  br label %if.end782

if.end782:                                        ; preds = %if.then781, %if.then758
  br label %if.end783

if.end783:                                        ; preds = %if.end782, %if.then748
  br label %if.end784

if.end784:                                        ; preds = %if.end783, %land.lhs.true743, %for.body735
  %709 = load i32, i32* %iXMinNow, align 4
  %710 = load i32, i32* %search_step, align 4
  %sub785 = sub nsw i32 %709, %710
  store i32 %sub785, i32* %cand_x, align 4
  %711 = load i32, i32* %iYMinNow, align 4
  store i32 %711, i32* %cand_y, align 4
  %712 = load i32, i32* %cand_x, align 4
  %713 = load i32, i32* %center_x, align 4
  %sub786 = sub nsw i32 %712, %713
  %call787 = call i32 @abs(i32 %sub786) #6
  %714 = load i32, i32* %search_range.addr, align 4
  %cmp788 = icmp sle i32 %call787, %714
  br i1 %cmp788, label %land.lhs.true790, label %if.end831

land.lhs.true790:                                 ; preds = %if.end784
  %715 = load i32, i32* %cand_y, align 4
  %716 = load i32, i32* %center_y, align 4
  %sub791 = sub nsw i32 %715, %716
  %call792 = call i32 @abs(i32 %sub791) #6
  %717 = load i32, i32* %search_range.addr, align 4
  %cmp793 = icmp sle i32 %call792, %717
  br i1 %cmp793, label %if.then795, label %if.end831

if.then795:                                       ; preds = %land.lhs.true790
  %718 = load i32**, i32*** @McostState, align 8
  %719 = load i32, i32* %cand_y, align 4
  %720 = load i32, i32* %center_y, align 4
  %sub796 = sub nsw i32 %719, %720
  %721 = load i32, i32* %search_range.addr, align 4
  %add797 = add nsw i32 %sub796, %721
  %idxprom798 = sext i32 %add797 to i64
  %arrayidx799 = getelementptr inbounds i32*, i32** %718, i64 %idxprom798
  %722 = load i32*, i32** %arrayidx799, align 8
  %723 = load i32, i32* %cand_x, align 4
  %724 = load i32, i32* %center_x, align 4
  %sub800 = sub nsw i32 %723, %724
  %725 = load i32, i32* %search_range.addr, align 4
  %add801 = add nsw i32 %sub800, %725
  %idxprom802 = sext i32 %add801 to i64
  %arrayidx803 = getelementptr inbounds i32, i32* %722, i64 %idxprom802
  %726 = load i32, i32* %arrayidx803, align 4
  %tobool804 = icmp ne i32 %726, 0
  br i1 %tobool804, label %if.end830, label %if.then805

if.then805:                                       ; preds = %if.then795
  %727 = load i32, i32* %lambda_factor, align 4
  %728 = load i32*, i32** @mvbits, align 8
  %729 = load i32, i32* %cand_x, align 4
  %730 = load i32, i32* %mvshift, align 4
  %shl806 = shl i32 %729, %730
  %731 = load i32, i32* %pred_x, align 4
  %sub807 = sub nsw i32 %shl806, %731
  %idxprom808 = sext i32 %sub807 to i64
  %arrayidx809 = getelementptr inbounds i32, i32* %728, i64 %idxprom808
  %732 = load i32, i32* %arrayidx809, align 4
  %733 = load i32*, i32** @mvbits, align 8
  %734 = load i32, i32* %cand_y, align 4
  %735 = load i32, i32* %mvshift, align 4
  %shl810 = shl i32 %734, %735
  %736 = load i32, i32* %pred_y, align 4
  %sub811 = sub nsw i32 %shl810, %736
  %idxprom812 = sext i32 %sub811 to i64
  %arrayidx813 = getelementptr inbounds i32, i32* %733, i64 %idxprom812
  %737 = load i32, i32* %arrayidx813, align 4
  %add814 = add nsw i32 %732, %737
  %mul815 = mul nsw i32 %727, %add814
  %shr816 = ashr i32 %mul815, 16
  store i32 %shr816, i32* %mcost, align 4
  %738 = load i16*, i16** %ref_pic, align 8
  %739 = load i16**, i16*** %orig_pic.addr, align 8
  %740 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %741 = load i32, i32* %blocksize_y, align 4
  %742 = load i32, i32* %blocksize_x, align 4
  %743 = load i32, i32* %blocksize_x4, align 4
  %744 = load i32, i32* %mcost, align 4
  %745 = load i32, i32* %min_mcost.addr, align 4
  %746 = load i32, i32* %cand_x, align 4
  %747 = load i32, i32* %cand_y, align 4
  %call817 = call i32 @PartCalMad(i16* %738, i16** %739, i16* (i32, i16*, i32, i32, i32, i32)* %740, i32 %741, i32 %742, i32 %743, i32 %744, i32 %745, i32 %746, i32 %747)
  store i32 %call817, i32* %mcost, align 4
  %748 = load i32, i32* %mcost, align 4
  %749 = load i32**, i32*** @McostState, align 8
  %750 = load i32, i32* %cand_y, align 4
  %751 = load i32, i32* %center_y, align 4
  %sub818 = sub nsw i32 %750, %751
  %752 = load i32, i32* %search_range.addr, align 4
  %add819 = add nsw i32 %sub818, %752
  %idxprom820 = sext i32 %add819 to i64
  %arrayidx821 = getelementptr inbounds i32*, i32** %749, i64 %idxprom820
  %753 = load i32*, i32** %arrayidx821, align 8
  %754 = load i32, i32* %cand_x, align 4
  %755 = load i32, i32* %center_x, align 4
  %sub822 = sub nsw i32 %754, %755
  %756 = load i32, i32* %search_range.addr, align 4
  %add823 = add nsw i32 %sub822, %756
  %idxprom824 = sext i32 %add823 to i64
  %arrayidx825 = getelementptr inbounds i32, i32* %753, i64 %idxprom824
  store i32 %748, i32* %arrayidx825, align 4
  %757 = load i32, i32* %mcost, align 4
  %758 = load i32, i32* %min_mcost.addr, align 4
  %cmp826 = icmp slt i32 %757, %758
  br i1 %cmp826, label %if.then828, label %if.end829

if.then828:                                       ; preds = %if.then805
  %759 = load i32, i32* %cand_x, align 4
  store i32 %759, i32* %best_x, align 4
  %760 = load i32, i32* %cand_y, align 4
  store i32 %760, i32* %best_y, align 4
  %761 = load i32, i32* %mcost, align 4
  store i32 %761, i32* %min_mcost.addr, align 4
  br label %if.end829

if.end829:                                        ; preds = %if.then828, %if.then805
  br label %if.end830

if.end830:                                        ; preds = %if.end829, %if.then795
  br label %if.end831

if.end831:                                        ; preds = %if.end830, %land.lhs.true790, %if.end784
  br label %for.inc832

for.inc832:                                       ; preds = %if.end831
  %762 = load i32, i32* %i, align 4
  %inc833 = add nsw i32 %762, 1
  store i32 %inc833, i32* %i, align 4
  br label %for.cond731

for.end834:                                       ; preds = %for.cond731
  store i32 1, i32* %i, align 4
  br label %for.cond835

for.cond835:                                      ; preds = %for.inc936, %for.end834
  %763 = load i32, i32* %i, align 4
  %764 = load i32, i32* %search_range.addr, align 4
  %div836 = sdiv i32 %764, 4
  %cmp837 = icmp sle i32 %763, %div836
  br i1 %cmp837, label %for.body839, label %for.end938

for.body839:                                      ; preds = %for.cond835
  %765 = load i32, i32* %i, align 4
  %mul840 = mul nsw i32 2, %765
  %sub841 = sub nsw i32 %mul840, 1
  store i32 %sub841, i32* %search_step, align 4
  %766 = load i32, i32* %iXMinNow, align 4
  store i32 %766, i32* %cand_x, align 4
  %767 = load i32, i32* %iYMinNow, align 4
  %768 = load i32, i32* %search_step, align 4
  %add842 = add nsw i32 %767, %768
  store i32 %add842, i32* %cand_y, align 4
  %769 = load i32, i32* %cand_x, align 4
  %770 = load i32, i32* %center_x, align 4
  %sub843 = sub nsw i32 %769, %770
  %call844 = call i32 @abs(i32 %sub843) #6
  %771 = load i32, i32* %search_range.addr, align 4
  %cmp845 = icmp sle i32 %call844, %771
  br i1 %cmp845, label %land.lhs.true847, label %if.end888

land.lhs.true847:                                 ; preds = %for.body839
  %772 = load i32, i32* %cand_y, align 4
  %773 = load i32, i32* %center_y, align 4
  %sub848 = sub nsw i32 %772, %773
  %call849 = call i32 @abs(i32 %sub848) #6
  %774 = load i32, i32* %search_range.addr, align 4
  %cmp850 = icmp sle i32 %call849, %774
  br i1 %cmp850, label %if.then852, label %if.end888

if.then852:                                       ; preds = %land.lhs.true847
  %775 = load i32**, i32*** @McostState, align 8
  %776 = load i32, i32* %cand_y, align 4
  %777 = load i32, i32* %center_y, align 4
  %sub853 = sub nsw i32 %776, %777
  %778 = load i32, i32* %search_range.addr, align 4
  %add854 = add nsw i32 %sub853, %778
  %idxprom855 = sext i32 %add854 to i64
  %arrayidx856 = getelementptr inbounds i32*, i32** %775, i64 %idxprom855
  %779 = load i32*, i32** %arrayidx856, align 8
  %780 = load i32, i32* %cand_x, align 4
  %781 = load i32, i32* %center_x, align 4
  %sub857 = sub nsw i32 %780, %781
  %782 = load i32, i32* %search_range.addr, align 4
  %add858 = add nsw i32 %sub857, %782
  %idxprom859 = sext i32 %add858 to i64
  %arrayidx860 = getelementptr inbounds i32, i32* %779, i64 %idxprom859
  %783 = load i32, i32* %arrayidx860, align 4
  %tobool861 = icmp ne i32 %783, 0
  br i1 %tobool861, label %if.end887, label %if.then862

if.then862:                                       ; preds = %if.then852
  %784 = load i32, i32* %lambda_factor, align 4
  %785 = load i32*, i32** @mvbits, align 8
  %786 = load i32, i32* %cand_x, align 4
  %787 = load i32, i32* %mvshift, align 4
  %shl863 = shl i32 %786, %787
  %788 = load i32, i32* %pred_x, align 4
  %sub864 = sub nsw i32 %shl863, %788
  %idxprom865 = sext i32 %sub864 to i64
  %arrayidx866 = getelementptr inbounds i32, i32* %785, i64 %idxprom865
  %789 = load i32, i32* %arrayidx866, align 4
  %790 = load i32*, i32** @mvbits, align 8
  %791 = load i32, i32* %cand_y, align 4
  %792 = load i32, i32* %mvshift, align 4
  %shl867 = shl i32 %791, %792
  %793 = load i32, i32* %pred_y, align 4
  %sub868 = sub nsw i32 %shl867, %793
  %idxprom869 = sext i32 %sub868 to i64
  %arrayidx870 = getelementptr inbounds i32, i32* %790, i64 %idxprom869
  %794 = load i32, i32* %arrayidx870, align 4
  %add871 = add nsw i32 %789, %794
  %mul872 = mul nsw i32 %784, %add871
  %shr873 = ashr i32 %mul872, 16
  store i32 %shr873, i32* %mcost, align 4
  %795 = load i16*, i16** %ref_pic, align 8
  %796 = load i16**, i16*** %orig_pic.addr, align 8
  %797 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %798 = load i32, i32* %blocksize_y, align 4
  %799 = load i32, i32* %blocksize_x, align 4
  %800 = load i32, i32* %blocksize_x4, align 4
  %801 = load i32, i32* %mcost, align 4
  %802 = load i32, i32* %min_mcost.addr, align 4
  %803 = load i32, i32* %cand_x, align 4
  %804 = load i32, i32* %cand_y, align 4
  %call874 = call i32 @PartCalMad(i16* %795, i16** %796, i16* (i32, i16*, i32, i32, i32, i32)* %797, i32 %798, i32 %799, i32 %800, i32 %801, i32 %802, i32 %803, i32 %804)
  store i32 %call874, i32* %mcost, align 4
  %805 = load i32, i32* %mcost, align 4
  %806 = load i32**, i32*** @McostState, align 8
  %807 = load i32, i32* %cand_y, align 4
  %808 = load i32, i32* %center_y, align 4
  %sub875 = sub nsw i32 %807, %808
  %809 = load i32, i32* %search_range.addr, align 4
  %add876 = add nsw i32 %sub875, %809
  %idxprom877 = sext i32 %add876 to i64
  %arrayidx878 = getelementptr inbounds i32*, i32** %806, i64 %idxprom877
  %810 = load i32*, i32** %arrayidx878, align 8
  %811 = load i32, i32* %cand_x, align 4
  %812 = load i32, i32* %center_x, align 4
  %sub879 = sub nsw i32 %811, %812
  %813 = load i32, i32* %search_range.addr, align 4
  %add880 = add nsw i32 %sub879, %813
  %idxprom881 = sext i32 %add880 to i64
  %arrayidx882 = getelementptr inbounds i32, i32* %810, i64 %idxprom881
  store i32 %805, i32* %arrayidx882, align 4
  %814 = load i32, i32* %mcost, align 4
  %815 = load i32, i32* %min_mcost.addr, align 4
  %cmp883 = icmp slt i32 %814, %815
  br i1 %cmp883, label %if.then885, label %if.end886

if.then885:                                       ; preds = %if.then862
  %816 = load i32, i32* %cand_x, align 4
  store i32 %816, i32* %best_x, align 4
  %817 = load i32, i32* %cand_y, align 4
  store i32 %817, i32* %best_y, align 4
  %818 = load i32, i32* %mcost, align 4
  store i32 %818, i32* %min_mcost.addr, align 4
  br label %if.end886

if.end886:                                        ; preds = %if.then885, %if.then862
  br label %if.end887

if.end887:                                        ; preds = %if.end886, %if.then852
  br label %if.end888

if.end888:                                        ; preds = %if.end887, %land.lhs.true847, %for.body839
  %819 = load i32, i32* %iXMinNow, align 4
  store i32 %819, i32* %cand_x, align 4
  %820 = load i32, i32* %iYMinNow, align 4
  %821 = load i32, i32* %search_step, align 4
  %sub889 = sub nsw i32 %820, %821
  store i32 %sub889, i32* %cand_y, align 4
  %822 = load i32, i32* %cand_x, align 4
  %823 = load i32, i32* %center_x, align 4
  %sub890 = sub nsw i32 %822, %823
  %call891 = call i32 @abs(i32 %sub890) #6
  %824 = load i32, i32* %search_range.addr, align 4
  %cmp892 = icmp sle i32 %call891, %824
  br i1 %cmp892, label %land.lhs.true894, label %if.end935

land.lhs.true894:                                 ; preds = %if.end888
  %825 = load i32, i32* %cand_y, align 4
  %826 = load i32, i32* %center_y, align 4
  %sub895 = sub nsw i32 %825, %826
  %call896 = call i32 @abs(i32 %sub895) #6
  %827 = load i32, i32* %search_range.addr, align 4
  %cmp897 = icmp sle i32 %call896, %827
  br i1 %cmp897, label %if.then899, label %if.end935

if.then899:                                       ; preds = %land.lhs.true894
  %828 = load i32**, i32*** @McostState, align 8
  %829 = load i32, i32* %cand_y, align 4
  %830 = load i32, i32* %center_y, align 4
  %sub900 = sub nsw i32 %829, %830
  %831 = load i32, i32* %search_range.addr, align 4
  %add901 = add nsw i32 %sub900, %831
  %idxprom902 = sext i32 %add901 to i64
  %arrayidx903 = getelementptr inbounds i32*, i32** %828, i64 %idxprom902
  %832 = load i32*, i32** %arrayidx903, align 8
  %833 = load i32, i32* %cand_x, align 4
  %834 = load i32, i32* %center_x, align 4
  %sub904 = sub nsw i32 %833, %834
  %835 = load i32, i32* %search_range.addr, align 4
  %add905 = add nsw i32 %sub904, %835
  %idxprom906 = sext i32 %add905 to i64
  %arrayidx907 = getelementptr inbounds i32, i32* %832, i64 %idxprom906
  %836 = load i32, i32* %arrayidx907, align 4
  %tobool908 = icmp ne i32 %836, 0
  br i1 %tobool908, label %if.end934, label %if.then909

if.then909:                                       ; preds = %if.then899
  %837 = load i32, i32* %lambda_factor, align 4
  %838 = load i32*, i32** @mvbits, align 8
  %839 = load i32, i32* %cand_x, align 4
  %840 = load i32, i32* %mvshift, align 4
  %shl910 = shl i32 %839, %840
  %841 = load i32, i32* %pred_x, align 4
  %sub911 = sub nsw i32 %shl910, %841
  %idxprom912 = sext i32 %sub911 to i64
  %arrayidx913 = getelementptr inbounds i32, i32* %838, i64 %idxprom912
  %842 = load i32, i32* %arrayidx913, align 4
  %843 = load i32*, i32** @mvbits, align 8
  %844 = load i32, i32* %cand_y, align 4
  %845 = load i32, i32* %mvshift, align 4
  %shl914 = shl i32 %844, %845
  %846 = load i32, i32* %pred_y, align 4
  %sub915 = sub nsw i32 %shl914, %846
  %idxprom916 = sext i32 %sub915 to i64
  %arrayidx917 = getelementptr inbounds i32, i32* %843, i64 %idxprom916
  %847 = load i32, i32* %arrayidx917, align 4
  %add918 = add nsw i32 %842, %847
  %mul919 = mul nsw i32 %837, %add918
  %shr920 = ashr i32 %mul919, 16
  store i32 %shr920, i32* %mcost, align 4
  %848 = load i16*, i16** %ref_pic, align 8
  %849 = load i16**, i16*** %orig_pic.addr, align 8
  %850 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %851 = load i32, i32* %blocksize_y, align 4
  %852 = load i32, i32* %blocksize_x, align 4
  %853 = load i32, i32* %blocksize_x4, align 4
  %854 = load i32, i32* %mcost, align 4
  %855 = load i32, i32* %min_mcost.addr, align 4
  %856 = load i32, i32* %cand_x, align 4
  %857 = load i32, i32* %cand_y, align 4
  %call921 = call i32 @PartCalMad(i16* %848, i16** %849, i16* (i32, i16*, i32, i32, i32, i32)* %850, i32 %851, i32 %852, i32 %853, i32 %854, i32 %855, i32 %856, i32 %857)
  store i32 %call921, i32* %mcost, align 4
  %858 = load i32, i32* %mcost, align 4
  %859 = load i32**, i32*** @McostState, align 8
  %860 = load i32, i32* %cand_y, align 4
  %861 = load i32, i32* %center_y, align 4
  %sub922 = sub nsw i32 %860, %861
  %862 = load i32, i32* %search_range.addr, align 4
  %add923 = add nsw i32 %sub922, %862
  %idxprom924 = sext i32 %add923 to i64
  %arrayidx925 = getelementptr inbounds i32*, i32** %859, i64 %idxprom924
  %863 = load i32*, i32** %arrayidx925, align 8
  %864 = load i32, i32* %cand_x, align 4
  %865 = load i32, i32* %center_x, align 4
  %sub926 = sub nsw i32 %864, %865
  %866 = load i32, i32* %search_range.addr, align 4
  %add927 = add nsw i32 %sub926, %866
  %idxprom928 = sext i32 %add927 to i64
  %arrayidx929 = getelementptr inbounds i32, i32* %863, i64 %idxprom928
  store i32 %858, i32* %arrayidx929, align 4
  %867 = load i32, i32* %mcost, align 4
  %868 = load i32, i32* %min_mcost.addr, align 4
  %cmp930 = icmp slt i32 %867, %868
  br i1 %cmp930, label %if.then932, label %if.end933

if.then932:                                       ; preds = %if.then909
  %869 = load i32, i32* %cand_x, align 4
  store i32 %869, i32* %best_x, align 4
  %870 = load i32, i32* %cand_y, align 4
  store i32 %870, i32* %best_y, align 4
  %871 = load i32, i32* %mcost, align 4
  store i32 %871, i32* %min_mcost.addr, align 4
  br label %if.end933

if.end933:                                        ; preds = %if.then932, %if.then909
  br label %if.end934

if.end934:                                        ; preds = %if.end933, %if.then899
  br label %if.end935

if.end935:                                        ; preds = %if.end934, %land.lhs.true894, %if.end888
  br label %for.inc936

for.inc936:                                       ; preds = %if.end935
  %872 = load i32, i32* %i, align 4
  %inc937 = add nsw i32 %872, 1
  store i32 %inc937, i32* %i, align 4
  br label %for.cond835

for.end938:                                       ; preds = %for.cond835
  %873 = load i16, i16* %ref.addr, align 2
  %conv939 = sext i16 %873 to i32
  %cmp940 = icmp sgt i32 %conv939, 0
  br i1 %cmp940, label %if.then942, label %if.else960

if.then942:                                       ; preds = %for.end938
  %874 = load i32, i32* %min_mcost.addr, align 4
  %875 = load i32, i32* @pred_SAD_ref, align 4
  %sub943 = sub nsw i32 %874, %875
  %conv944 = sitofp i32 %sub943 to float
  %876 = load i32, i32* @pred_SAD_ref, align 4
  %conv945 = sitofp i32 %876 to float
  %877 = load float, float* %betaThird, align 4
  %mul946 = fmul float %conv945, %877
  %cmp947 = fcmp olt float %conv944, %mul946
  br i1 %cmp947, label %if.then949, label %if.else950

if.then949:                                       ; preds = %if.then942
  br label %third_step

if.else950:                                       ; preds = %if.then942
  %878 = load i32, i32* %min_mcost.addr, align 4
  %879 = load i32, i32* @pred_SAD_ref, align 4
  %sub951 = sub nsw i32 %878, %879
  %conv952 = sitofp i32 %sub951 to float
  %880 = load i32, i32* @pred_SAD_ref, align 4
  %conv953 = sitofp i32 %880 to float
  %881 = load float, float* %betaSec, align 4
  %mul954 = fmul float %conv953, %881
  %cmp955 = fcmp olt float %conv952, %mul954
  br i1 %cmp955, label %if.then957, label %if.end958

if.then957:                                       ; preds = %if.else950
  br label %sec_step

if.end958:                                        ; preds = %if.else950
  br label %if.end959

if.end959:                                        ; preds = %if.end958
  br label %if.end1000

if.else960:                                       ; preds = %for.end938
  %882 = load i32, i32* %blocktype.addr, align 4
  %cmp961 = icmp sgt i32 %882, 1
  br i1 %cmp961, label %if.then963, label %if.else981

if.then963:                                       ; preds = %if.else960
  %883 = load i32, i32* %min_mcost.addr, align 4
  %884 = load i32, i32* @pred_SAD_uplayer, align 4
  %sub964 = sub nsw i32 %883, %884
  %conv965 = sitofp i32 %sub964 to float
  %885 = load i32, i32* @pred_SAD_uplayer, align 4
  %conv966 = sitofp i32 %885 to float
  %886 = load float, float* %betaThird, align 4
  %mul967 = fmul float %conv966, %886
  %cmp968 = fcmp olt float %conv965, %mul967
  br i1 %cmp968, label %if.then970, label %if.else971

if.then970:                                       ; preds = %if.then963
  br label %third_step

if.else971:                                       ; preds = %if.then963
  %887 = load i32, i32* %min_mcost.addr, align 4
  %888 = load i32, i32* @pred_SAD_uplayer, align 4
  %sub972 = sub nsw i32 %887, %888
  %conv973 = sitofp i32 %sub972 to float
  %889 = load i32, i32* @pred_SAD_uplayer, align 4
  %conv974 = sitofp i32 %889 to float
  %890 = load float, float* %betaSec, align 4
  %mul975 = fmul float %conv974, %890
  %cmp976 = fcmp olt float %conv973, %mul975
  br i1 %cmp976, label %if.then978, label %if.end979

if.then978:                                       ; preds = %if.else971
  br label %sec_step

if.end979:                                        ; preds = %if.else971
  br label %if.end980

if.end980:                                        ; preds = %if.end979
  br label %if.end999

if.else981:                                       ; preds = %if.else960
  %891 = load i32, i32* %min_mcost.addr, align 4
  %892 = load i32, i32* @pred_SAD_space, align 4
  %sub982 = sub nsw i32 %891, %892
  %conv983 = sitofp i32 %sub982 to float
  %893 = load i32, i32* @pred_SAD_space, align 4
  %conv984 = sitofp i32 %893 to float
  %894 = load float, float* %betaThird, align 4
  %mul985 = fmul float %conv984, %894
  %cmp986 = fcmp olt float %conv983, %mul985
  br i1 %cmp986, label %if.then988, label %if.else989

if.then988:                                       ; preds = %if.else981
  br label %third_step

if.else989:                                       ; preds = %if.else981
  %895 = load i32, i32* %min_mcost.addr, align 4
  %896 = load i32, i32* @pred_SAD_space, align 4
  %sub990 = sub nsw i32 %895, %896
  %conv991 = sitofp i32 %sub990 to float
  %897 = load i32, i32* @pred_SAD_space, align 4
  %conv992 = sitofp i32 %897 to float
  %898 = load float, float* %betaSec, align 4
  %mul993 = fmul float %conv992, %898
  %cmp994 = fcmp olt float %conv991, %mul993
  br i1 %cmp994, label %if.then996, label %if.end997

if.then996:                                       ; preds = %if.else989
  br label %sec_step

if.end997:                                        ; preds = %if.else989
  br label %if.end998

if.end998:                                        ; preds = %if.end997
  br label %if.end999

if.end999:                                        ; preds = %if.end998, %if.end980
  br label %if.end1000

if.end1000:                                       ; preds = %if.end999, %if.end959
  %899 = load i32, i32* %best_x, align 4
  store i32 %899, i32* %iXMinNow, align 4
  %900 = load i32, i32* %best_y, align 4
  store i32 %900, i32* %iYMinNow, align 4
  store i32 1, i32* %pos, align 4
  br label %for.cond1001

for.cond1001:                                     ; preds = %for.inc1057, %if.end1000
  %901 = load i32, i32* %pos, align 4
  %cmp1002 = icmp slt i32 %901, 25
  br i1 %cmp1002, label %for.body1004, label %for.end1059

for.body1004:                                     ; preds = %for.cond1001
  %902 = load i32, i32* %iXMinNow, align 4
  %903 = load i32*, i32** @spiral_search_x, align 8
  %904 = load i32, i32* %pos, align 4
  %idxprom1005 = sext i32 %904 to i64
  %arrayidx1006 = getelementptr inbounds i32, i32* %903, i64 %idxprom1005
  %905 = load i32, i32* %arrayidx1006, align 4
  %add1007 = add nsw i32 %902, %905
  store i32 %add1007, i32* %cand_x, align 4
  %906 = load i32, i32* %iYMinNow, align 4
  %907 = load i32*, i32** @spiral_search_y, align 8
  %908 = load i32, i32* %pos, align 4
  %idxprom1008 = sext i32 %908 to i64
  %arrayidx1009 = getelementptr inbounds i32, i32* %907, i64 %idxprom1008
  %909 = load i32, i32* %arrayidx1009, align 4
  %add1010 = add nsw i32 %906, %909
  store i32 %add1010, i32* %cand_y, align 4
  %910 = load i32, i32* %cand_x, align 4
  %911 = load i32, i32* %center_x, align 4
  %sub1011 = sub nsw i32 %910, %911
  %call1012 = call i32 @abs(i32 %sub1011) #6
  %912 = load i32, i32* %search_range.addr, align 4
  %cmp1013 = icmp sle i32 %call1012, %912
  br i1 %cmp1013, label %land.lhs.true1015, label %if.end1056

land.lhs.true1015:                                ; preds = %for.body1004
  %913 = load i32, i32* %cand_y, align 4
  %914 = load i32, i32* %center_y, align 4
  %sub1016 = sub nsw i32 %913, %914
  %call1017 = call i32 @abs(i32 %sub1016) #6
  %915 = load i32, i32* %search_range.addr, align 4
  %cmp1018 = icmp sle i32 %call1017, %915
  br i1 %cmp1018, label %if.then1020, label %if.end1056

if.then1020:                                      ; preds = %land.lhs.true1015
  %916 = load i32**, i32*** @McostState, align 8
  %917 = load i32, i32* %cand_y, align 4
  %918 = load i32, i32* %center_y, align 4
  %sub1021 = sub nsw i32 %917, %918
  %919 = load i32, i32* %search_range.addr, align 4
  %add1022 = add nsw i32 %sub1021, %919
  %idxprom1023 = sext i32 %add1022 to i64
  %arrayidx1024 = getelementptr inbounds i32*, i32** %916, i64 %idxprom1023
  %920 = load i32*, i32** %arrayidx1024, align 8
  %921 = load i32, i32* %cand_x, align 4
  %922 = load i32, i32* %center_x, align 4
  %sub1025 = sub nsw i32 %921, %922
  %923 = load i32, i32* %search_range.addr, align 4
  %add1026 = add nsw i32 %sub1025, %923
  %idxprom1027 = sext i32 %add1026 to i64
  %arrayidx1028 = getelementptr inbounds i32, i32* %920, i64 %idxprom1027
  %924 = load i32, i32* %arrayidx1028, align 4
  %tobool1029 = icmp ne i32 %924, 0
  br i1 %tobool1029, label %if.end1055, label %if.then1030

if.then1030:                                      ; preds = %if.then1020
  %925 = load i32, i32* %lambda_factor, align 4
  %926 = load i32*, i32** @mvbits, align 8
  %927 = load i32, i32* %cand_x, align 4
  %928 = load i32, i32* %mvshift, align 4
  %shl1031 = shl i32 %927, %928
  %929 = load i32, i32* %pred_x, align 4
  %sub1032 = sub nsw i32 %shl1031, %929
  %idxprom1033 = sext i32 %sub1032 to i64
  %arrayidx1034 = getelementptr inbounds i32, i32* %926, i64 %idxprom1033
  %930 = load i32, i32* %arrayidx1034, align 4
  %931 = load i32*, i32** @mvbits, align 8
  %932 = load i32, i32* %cand_y, align 4
  %933 = load i32, i32* %mvshift, align 4
  %shl1035 = shl i32 %932, %933
  %934 = load i32, i32* %pred_y, align 4
  %sub1036 = sub nsw i32 %shl1035, %934
  %idxprom1037 = sext i32 %sub1036 to i64
  %arrayidx1038 = getelementptr inbounds i32, i32* %931, i64 %idxprom1037
  %935 = load i32, i32* %arrayidx1038, align 4
  %add1039 = add nsw i32 %930, %935
  %mul1040 = mul nsw i32 %925, %add1039
  %shr1041 = ashr i32 %mul1040, 16
  store i32 %shr1041, i32* %mcost, align 4
  %936 = load i16*, i16** %ref_pic, align 8
  %937 = load i16**, i16*** %orig_pic.addr, align 8
  %938 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %939 = load i32, i32* %blocksize_y, align 4
  %940 = load i32, i32* %blocksize_x, align 4
  %941 = load i32, i32* %blocksize_x4, align 4
  %942 = load i32, i32* %mcost, align 4
  %943 = load i32, i32* %min_mcost.addr, align 4
  %944 = load i32, i32* %cand_x, align 4
  %945 = load i32, i32* %cand_y, align 4
  %call1042 = call i32 @PartCalMad(i16* %936, i16** %937, i16* (i32, i16*, i32, i32, i32, i32)* %938, i32 %939, i32 %940, i32 %941, i32 %942, i32 %943, i32 %944, i32 %945)
  store i32 %call1042, i32* %mcost, align 4
  %946 = load i32, i32* %mcost, align 4
  %947 = load i32**, i32*** @McostState, align 8
  %948 = load i32, i32* %cand_y, align 4
  %949 = load i32, i32* %center_y, align 4
  %sub1043 = sub nsw i32 %948, %949
  %950 = load i32, i32* %search_range.addr, align 4
  %add1044 = add nsw i32 %sub1043, %950
  %idxprom1045 = sext i32 %add1044 to i64
  %arrayidx1046 = getelementptr inbounds i32*, i32** %947, i64 %idxprom1045
  %951 = load i32*, i32** %arrayidx1046, align 8
  %952 = load i32, i32* %cand_x, align 4
  %953 = load i32, i32* %center_x, align 4
  %sub1047 = sub nsw i32 %952, %953
  %954 = load i32, i32* %search_range.addr, align 4
  %add1048 = add nsw i32 %sub1047, %954
  %idxprom1049 = sext i32 %add1048 to i64
  %arrayidx1050 = getelementptr inbounds i32, i32* %951, i64 %idxprom1049
  store i32 %946, i32* %arrayidx1050, align 4
  %955 = load i32, i32* %mcost, align 4
  %956 = load i32, i32* %min_mcost.addr, align 4
  %cmp1051 = icmp slt i32 %955, %956
  br i1 %cmp1051, label %if.then1053, label %if.end1054

if.then1053:                                      ; preds = %if.then1030
  %957 = load i32, i32* %cand_x, align 4
  store i32 %957, i32* %best_x, align 4
  %958 = load i32, i32* %cand_y, align 4
  store i32 %958, i32* %best_y, align 4
  %959 = load i32, i32* %mcost, align 4
  store i32 %959, i32* %min_mcost.addr, align 4
  br label %if.end1054

if.end1054:                                       ; preds = %if.then1053, %if.then1030
  br label %if.end1055

if.end1055:                                       ; preds = %if.end1054, %if.then1020
  br label %if.end1056

if.end1056:                                       ; preds = %if.end1055, %land.lhs.true1015, %for.body1004
  br label %for.inc1057

for.inc1057:                                      ; preds = %if.end1056
  %960 = load i32, i32* %pos, align 4
  %inc1058 = add nsw i32 %960, 1
  store i32 %inc1058, i32* %pos, align 4
  br label %for.cond1001

for.end1059:                                      ; preds = %for.cond1001
  %961 = load i16, i16* %ref.addr, align 2
  %conv1060 = sext i16 %961 to i32
  %cmp1061 = icmp sgt i32 %conv1060, 0
  br i1 %cmp1061, label %if.then1063, label %if.else1081

if.then1063:                                      ; preds = %for.end1059
  %962 = load i32, i32* %min_mcost.addr, align 4
  %963 = load i32, i32* @pred_SAD_ref, align 4
  %sub1064 = sub nsw i32 %962, %963
  %conv1065 = sitofp i32 %sub1064 to float
  %964 = load i32, i32* @pred_SAD_ref, align 4
  %conv1066 = sitofp i32 %964 to float
  %965 = load float, float* %betaThird, align 4
  %mul1067 = fmul float %conv1066, %965
  %cmp1068 = fcmp olt float %conv1065, %mul1067
  br i1 %cmp1068, label %if.then1070, label %if.else1071

if.then1070:                                      ; preds = %if.then1063
  br label %third_step

if.else1071:                                      ; preds = %if.then1063
  %966 = load i32, i32* %min_mcost.addr, align 4
  %967 = load i32, i32* @pred_SAD_ref, align 4
  %sub1072 = sub nsw i32 %966, %967
  %conv1073 = sitofp i32 %sub1072 to float
  %968 = load i32, i32* @pred_SAD_ref, align 4
  %conv1074 = sitofp i32 %968 to float
  %969 = load float, float* %betaSec, align 4
  %mul1075 = fmul float %conv1074, %969
  %cmp1076 = fcmp olt float %conv1073, %mul1075
  br i1 %cmp1076, label %if.then1078, label %if.end1079

if.then1078:                                      ; preds = %if.else1071
  br label %sec_step

if.end1079:                                       ; preds = %if.else1071
  br label %if.end1080

if.end1080:                                       ; preds = %if.end1079
  br label %if.end1121

if.else1081:                                      ; preds = %for.end1059
  %970 = load i32, i32* %blocktype.addr, align 4
  %cmp1082 = icmp sgt i32 %970, 1
  br i1 %cmp1082, label %if.then1084, label %if.else1102

if.then1084:                                      ; preds = %if.else1081
  %971 = load i32, i32* %min_mcost.addr, align 4
  %972 = load i32, i32* @pred_SAD_uplayer, align 4
  %sub1085 = sub nsw i32 %971, %972
  %conv1086 = sitofp i32 %sub1085 to float
  %973 = load i32, i32* @pred_SAD_uplayer, align 4
  %conv1087 = sitofp i32 %973 to float
  %974 = load float, float* %betaThird, align 4
  %mul1088 = fmul float %conv1087, %974
  %cmp1089 = fcmp olt float %conv1086, %mul1088
  br i1 %cmp1089, label %if.then1091, label %if.else1092

if.then1091:                                      ; preds = %if.then1084
  br label %third_step

if.else1092:                                      ; preds = %if.then1084
  %975 = load i32, i32* %min_mcost.addr, align 4
  %976 = load i32, i32* @pred_SAD_uplayer, align 4
  %sub1093 = sub nsw i32 %975, %976
  %conv1094 = sitofp i32 %sub1093 to float
  %977 = load i32, i32* @pred_SAD_uplayer, align 4
  %conv1095 = sitofp i32 %977 to float
  %978 = load float, float* %betaSec, align 4
  %mul1096 = fmul float %conv1095, %978
  %cmp1097 = fcmp olt float %conv1094, %mul1096
  br i1 %cmp1097, label %if.then1099, label %if.end1100

if.then1099:                                      ; preds = %if.else1092
  br label %sec_step

if.end1100:                                       ; preds = %if.else1092
  br label %if.end1101

if.end1101:                                       ; preds = %if.end1100
  br label %if.end1120

if.else1102:                                      ; preds = %if.else1081
  %979 = load i32, i32* %min_mcost.addr, align 4
  %980 = load i32, i32* @pred_SAD_space, align 4
  %sub1103 = sub nsw i32 %979, %980
  %conv1104 = sitofp i32 %sub1103 to float
  %981 = load i32, i32* @pred_SAD_space, align 4
  %conv1105 = sitofp i32 %981 to float
  %982 = load float, float* %betaThird, align 4
  %mul1106 = fmul float %conv1105, %982
  %cmp1107 = fcmp olt float %conv1104, %mul1106
  br i1 %cmp1107, label %if.then1109, label %if.else1110

if.then1109:                                      ; preds = %if.else1102
  br label %third_step

if.else1110:                                      ; preds = %if.else1102
  %983 = load i32, i32* %min_mcost.addr, align 4
  %984 = load i32, i32* @pred_SAD_space, align 4
  %sub1111 = sub nsw i32 %983, %984
  %conv1112 = sitofp i32 %sub1111 to float
  %985 = load i32, i32* @pred_SAD_space, align 4
  %conv1113 = sitofp i32 %985 to float
  %986 = load float, float* %betaSec, align 4
  %mul1114 = fmul float %conv1113, %986
  %cmp1115 = fcmp olt float %conv1112, %mul1114
  br i1 %cmp1115, label %if.then1117, label %if.end1118

if.then1117:                                      ; preds = %if.else1110
  br label %sec_step

if.end1118:                                       ; preds = %if.else1110
  br label %if.end1119

if.end1119:                                       ; preds = %if.end1118
  br label %if.end1120

if.end1120:                                       ; preds = %if.end1119, %if.end1101
  br label %if.end1121

if.end1121:                                       ; preds = %if.end1120, %if.end1080
  store i32 1, i32* %i, align 4
  br label %for.cond1122

for.cond1122:                                     ; preds = %for.inc1253, %if.end1121
  %987 = load i32, i32* %i, align 4
  %988 = load i32, i32* %search_range.addr, align 4
  %div1123 = sdiv i32 %988, 4
  %cmp1124 = icmp sle i32 %987, %div1123
  br i1 %cmp1124, label %for.body1126, label %for.end1255

for.body1126:                                     ; preds = %for.cond1122
  store i32 0, i32* %iAbort, align 4
  store i32 0, i32* %m, align 4
  br label %for.cond1127

for.cond1127:                                     ; preds = %for.inc1185, %for.body1126
  %989 = load i32, i32* %m, align 4
  %cmp1128 = icmp slt i32 %989, 16
  br i1 %cmp1128, label %for.body1130, label %for.end1187

for.body1130:                                     ; preds = %for.cond1127
  %990 = load i32, i32* %iXMinNow, align 4
  %991 = load i32, i32* %m, align 4
  %idxprom1131 = sext i32 %991 to i64
  %arrayidx1132 = getelementptr inbounds [16 x i32], [16 x i32]* @FastIntegerPelBlockMotionSearch.Big_Hexagon_x, i64 0, i64 %idxprom1131
  %992 = load i32, i32* %arrayidx1132, align 4
  %993 = load i32, i32* %i, align 4
  %mul1133 = mul nsw i32 %992, %993
  %add1134 = add nsw i32 %990, %mul1133
  store i32 %add1134, i32* %cand_x, align 4
  %994 = load i32, i32* %iYMinNow, align 4
  %995 = load i32, i32* %m, align 4
  %idxprom1135 = sext i32 %995 to i64
  %arrayidx1136 = getelementptr inbounds [16 x i32], [16 x i32]* @FastIntegerPelBlockMotionSearch.Big_Hexagon_y, i64 0, i64 %idxprom1135
  %996 = load i32, i32* %arrayidx1136, align 4
  %997 = load i32, i32* %i, align 4
  %mul1137 = mul nsw i32 %996, %997
  %add1138 = add nsw i32 %994, %mul1137
  store i32 %add1138, i32* %cand_y, align 4
  %998 = load i32, i32* %cand_x, align 4
  %999 = load i32, i32* %center_x, align 4
  %sub1139 = sub nsw i32 %998, %999
  %call1140 = call i32 @abs(i32 %sub1139) #6
  %1000 = load i32, i32* %search_range.addr, align 4
  %cmp1141 = icmp sle i32 %call1140, %1000
  br i1 %cmp1141, label %land.lhs.true1143, label %if.end1184

land.lhs.true1143:                                ; preds = %for.body1130
  %1001 = load i32, i32* %cand_y, align 4
  %1002 = load i32, i32* %center_y, align 4
  %sub1144 = sub nsw i32 %1001, %1002
  %call1145 = call i32 @abs(i32 %sub1144) #6
  %1003 = load i32, i32* %search_range.addr, align 4
  %cmp1146 = icmp sle i32 %call1145, %1003
  br i1 %cmp1146, label %if.then1148, label %if.end1184

if.then1148:                                      ; preds = %land.lhs.true1143
  %1004 = load i32**, i32*** @McostState, align 8
  %1005 = load i32, i32* %cand_y, align 4
  %1006 = load i32, i32* %center_y, align 4
  %sub1149 = sub nsw i32 %1005, %1006
  %1007 = load i32, i32* %search_range.addr, align 4
  %add1150 = add nsw i32 %sub1149, %1007
  %idxprom1151 = sext i32 %add1150 to i64
  %arrayidx1152 = getelementptr inbounds i32*, i32** %1004, i64 %idxprom1151
  %1008 = load i32*, i32** %arrayidx1152, align 8
  %1009 = load i32, i32* %cand_x, align 4
  %1010 = load i32, i32* %center_x, align 4
  %sub1153 = sub nsw i32 %1009, %1010
  %1011 = load i32, i32* %search_range.addr, align 4
  %add1154 = add nsw i32 %sub1153, %1011
  %idxprom1155 = sext i32 %add1154 to i64
  %arrayidx1156 = getelementptr inbounds i32, i32* %1008, i64 %idxprom1155
  %1012 = load i32, i32* %arrayidx1156, align 4
  %tobool1157 = icmp ne i32 %1012, 0
  br i1 %tobool1157, label %if.end1183, label %if.then1158

if.then1158:                                      ; preds = %if.then1148
  %1013 = load i32, i32* %lambda_factor, align 4
  %1014 = load i32*, i32** @mvbits, align 8
  %1015 = load i32, i32* %cand_x, align 4
  %1016 = load i32, i32* %mvshift, align 4
  %shl1159 = shl i32 %1015, %1016
  %1017 = load i32, i32* %pred_x, align 4
  %sub1160 = sub nsw i32 %shl1159, %1017
  %idxprom1161 = sext i32 %sub1160 to i64
  %arrayidx1162 = getelementptr inbounds i32, i32* %1014, i64 %idxprom1161
  %1018 = load i32, i32* %arrayidx1162, align 4
  %1019 = load i32*, i32** @mvbits, align 8
  %1020 = load i32, i32* %cand_y, align 4
  %1021 = load i32, i32* %mvshift, align 4
  %shl1163 = shl i32 %1020, %1021
  %1022 = load i32, i32* %pred_y, align 4
  %sub1164 = sub nsw i32 %shl1163, %1022
  %idxprom1165 = sext i32 %sub1164 to i64
  %arrayidx1166 = getelementptr inbounds i32, i32* %1019, i64 %idxprom1165
  %1023 = load i32, i32* %arrayidx1166, align 4
  %add1167 = add nsw i32 %1018, %1023
  %mul1168 = mul nsw i32 %1013, %add1167
  %shr1169 = ashr i32 %mul1168, 16
  store i32 %shr1169, i32* %mcost, align 4
  %1024 = load i16*, i16** %ref_pic, align 8
  %1025 = load i16**, i16*** %orig_pic.addr, align 8
  %1026 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %1027 = load i32, i32* %blocksize_y, align 4
  %1028 = load i32, i32* %blocksize_x, align 4
  %1029 = load i32, i32* %blocksize_x4, align 4
  %1030 = load i32, i32* %mcost, align 4
  %1031 = load i32, i32* %min_mcost.addr, align 4
  %1032 = load i32, i32* %cand_x, align 4
  %1033 = load i32, i32* %cand_y, align 4
  %call1170 = call i32 @PartCalMad(i16* %1024, i16** %1025, i16* (i32, i16*, i32, i32, i32, i32)* %1026, i32 %1027, i32 %1028, i32 %1029, i32 %1030, i32 %1031, i32 %1032, i32 %1033)
  store i32 %call1170, i32* %mcost, align 4
  %1034 = load i32, i32* %mcost, align 4
  %1035 = load i32**, i32*** @McostState, align 8
  %1036 = load i32, i32* %cand_y, align 4
  %1037 = load i32, i32* %center_y, align 4
  %sub1171 = sub nsw i32 %1036, %1037
  %1038 = load i32, i32* %search_range.addr, align 4
  %add1172 = add nsw i32 %sub1171, %1038
  %idxprom1173 = sext i32 %add1172 to i64
  %arrayidx1174 = getelementptr inbounds i32*, i32** %1035, i64 %idxprom1173
  %1039 = load i32*, i32** %arrayidx1174, align 8
  %1040 = load i32, i32* %cand_x, align 4
  %1041 = load i32, i32* %center_x, align 4
  %sub1175 = sub nsw i32 %1040, %1041
  %1042 = load i32, i32* %search_range.addr, align 4
  %add1176 = add nsw i32 %sub1175, %1042
  %idxprom1177 = sext i32 %add1176 to i64
  %arrayidx1178 = getelementptr inbounds i32, i32* %1039, i64 %idxprom1177
  store i32 %1034, i32* %arrayidx1178, align 4
  %1043 = load i32, i32* %mcost, align 4
  %1044 = load i32, i32* %min_mcost.addr, align 4
  %cmp1179 = icmp slt i32 %1043, %1044
  br i1 %cmp1179, label %if.then1181, label %if.end1182

if.then1181:                                      ; preds = %if.then1158
  %1045 = load i32, i32* %cand_x, align 4
  store i32 %1045, i32* %best_x, align 4
  %1046 = load i32, i32* %cand_y, align 4
  store i32 %1046, i32* %best_y, align 4
  %1047 = load i32, i32* %mcost, align 4
  store i32 %1047, i32* %min_mcost.addr, align 4
  store i32 1, i32* %iAbort, align 4
  br label %if.end1182

if.end1182:                                       ; preds = %if.then1181, %if.then1158
  br label %if.end1183

if.end1183:                                       ; preds = %if.end1182, %if.then1148
  br label %if.end1184

if.end1184:                                       ; preds = %if.end1183, %land.lhs.true1143, %for.body1130
  br label %for.inc1185

for.inc1185:                                      ; preds = %if.end1184
  %1048 = load i32, i32* %m, align 4
  %inc1186 = add nsw i32 %1048, 1
  store i32 %inc1186, i32* %m, align 4
  br label %for.cond1127

for.end1187:                                      ; preds = %for.cond1127
  %1049 = load i32, i32* %iAbort, align 4
  %tobool1188 = icmp ne i32 %1049, 0
  br i1 %tobool1188, label %if.then1189, label %if.end1252

if.then1189:                                      ; preds = %for.end1187
  %1050 = load i16, i16* %ref.addr, align 2
  %conv1190 = sext i16 %1050 to i32
  %cmp1191 = icmp sgt i32 %conv1190, 0
  br i1 %cmp1191, label %if.then1193, label %if.else1211

if.then1193:                                      ; preds = %if.then1189
  %1051 = load i32, i32* %min_mcost.addr, align 4
  %1052 = load i32, i32* @pred_SAD_ref, align 4
  %sub1194 = sub nsw i32 %1051, %1052
  %conv1195 = sitofp i32 %sub1194 to float
  %1053 = load i32, i32* @pred_SAD_ref, align 4
  %conv1196 = sitofp i32 %1053 to float
  %1054 = load float, float* %betaThird, align 4
  %mul1197 = fmul float %conv1196, %1054
  %cmp1198 = fcmp olt float %conv1195, %mul1197
  br i1 %cmp1198, label %if.then1200, label %if.else1201

if.then1200:                                      ; preds = %if.then1193
  br label %third_step

if.else1201:                                      ; preds = %if.then1193
  %1055 = load i32, i32* %min_mcost.addr, align 4
  %1056 = load i32, i32* @pred_SAD_ref, align 4
  %sub1202 = sub nsw i32 %1055, %1056
  %conv1203 = sitofp i32 %sub1202 to float
  %1057 = load i32, i32* @pred_SAD_ref, align 4
  %conv1204 = sitofp i32 %1057 to float
  %1058 = load float, float* %betaSec, align 4
  %mul1205 = fmul float %conv1204, %1058
  %cmp1206 = fcmp olt float %conv1203, %mul1205
  br i1 %cmp1206, label %if.then1208, label %if.end1209

if.then1208:                                      ; preds = %if.else1201
  br label %sec_step

if.end1209:                                       ; preds = %if.else1201
  br label %if.end1210

if.end1210:                                       ; preds = %if.end1209
  br label %if.end1251

if.else1211:                                      ; preds = %if.then1189
  %1059 = load i32, i32* %blocktype.addr, align 4
  %cmp1212 = icmp sgt i32 %1059, 1
  br i1 %cmp1212, label %if.then1214, label %if.else1232

if.then1214:                                      ; preds = %if.else1211
  %1060 = load i32, i32* %min_mcost.addr, align 4
  %1061 = load i32, i32* @pred_SAD_uplayer, align 4
  %sub1215 = sub nsw i32 %1060, %1061
  %conv1216 = sitofp i32 %sub1215 to float
  %1062 = load i32, i32* @pred_SAD_uplayer, align 4
  %conv1217 = sitofp i32 %1062 to float
  %1063 = load float, float* %betaThird, align 4
  %mul1218 = fmul float %conv1217, %1063
  %cmp1219 = fcmp olt float %conv1216, %mul1218
  br i1 %cmp1219, label %if.then1221, label %if.else1222

if.then1221:                                      ; preds = %if.then1214
  br label %third_step

if.else1222:                                      ; preds = %if.then1214
  %1064 = load i32, i32* %min_mcost.addr, align 4
  %1065 = load i32, i32* @pred_SAD_uplayer, align 4
  %sub1223 = sub nsw i32 %1064, %1065
  %conv1224 = sitofp i32 %sub1223 to float
  %1066 = load i32, i32* @pred_SAD_uplayer, align 4
  %conv1225 = sitofp i32 %1066 to float
  %1067 = load float, float* %betaSec, align 4
  %mul1226 = fmul float %conv1225, %1067
  %cmp1227 = fcmp olt float %conv1224, %mul1226
  br i1 %cmp1227, label %if.then1229, label %if.end1230

if.then1229:                                      ; preds = %if.else1222
  br label %sec_step

if.end1230:                                       ; preds = %if.else1222
  br label %if.end1231

if.end1231:                                       ; preds = %if.end1230
  br label %if.end1250

if.else1232:                                      ; preds = %if.else1211
  %1068 = load i32, i32* %min_mcost.addr, align 4
  %1069 = load i32, i32* @pred_SAD_space, align 4
  %sub1233 = sub nsw i32 %1068, %1069
  %conv1234 = sitofp i32 %sub1233 to float
  %1070 = load i32, i32* @pred_SAD_space, align 4
  %conv1235 = sitofp i32 %1070 to float
  %1071 = load float, float* %betaThird, align 4
  %mul1236 = fmul float %conv1235, %1071
  %cmp1237 = fcmp olt float %conv1234, %mul1236
  br i1 %cmp1237, label %if.then1239, label %if.else1240

if.then1239:                                      ; preds = %if.else1232
  br label %third_step

if.else1240:                                      ; preds = %if.else1232
  %1072 = load i32, i32* %min_mcost.addr, align 4
  %1073 = load i32, i32* @pred_SAD_space, align 4
  %sub1241 = sub nsw i32 %1072, %1073
  %conv1242 = sitofp i32 %sub1241 to float
  %1074 = load i32, i32* @pred_SAD_space, align 4
  %conv1243 = sitofp i32 %1074 to float
  %1075 = load float, float* %betaSec, align 4
  %mul1244 = fmul float %conv1243, %1075
  %cmp1245 = fcmp olt float %conv1242, %mul1244
  br i1 %cmp1245, label %if.then1247, label %if.end1248

if.then1247:                                      ; preds = %if.else1240
  br label %sec_step

if.end1248:                                       ; preds = %if.else1240
  br label %if.end1249

if.end1249:                                       ; preds = %if.end1248
  br label %if.end1250

if.end1250:                                       ; preds = %if.end1249, %if.end1231
  br label %if.end1251

if.end1251:                                       ; preds = %if.end1250, %if.end1210
  br label %if.end1252

if.end1252:                                       ; preds = %if.end1251, %for.end1187
  br label %for.inc1253

for.inc1253:                                      ; preds = %if.end1252
  %1076 = load i32, i32* %i, align 4
  %inc1254 = add nsw i32 %1076, 1
  store i32 %inc1254, i32* %i, align 4
  br label %for.cond1122

for.end1255:                                      ; preds = %for.cond1122
  br label %sec_step

sec_step:                                         ; preds = %for.end1255, %if.then1247, %if.then1229, %if.then1208, %if.then1117, %if.then1099, %if.then1078, %if.then996, %if.then978, %if.then957, %if.then729, %if.then722, %if.then704, %if.then683, %if.then389
  %1077 = load i32, i32* %best_x, align 4
  store i32 %1077, i32* %iXMinNow, align 4
  %1078 = load i32, i32* %best_y, align 4
  store i32 %1078, i32* %iYMinNow, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond1256

for.cond1256:                                     ; preds = %for.inc1322, %sec_step
  %1079 = load i32, i32* %i, align 4
  %1080 = load i32, i32* %search_range.addr, align 4
  %cmp1257 = icmp slt i32 %1079, %1080
  br i1 %cmp1257, label %for.body1259, label %for.end1324

for.body1259:                                     ; preds = %for.cond1256
  store i32 1, i32* %iAbort, align 4
  store i32 0, i32* %m, align 4
  br label %for.cond1260

for.cond1260:                                     ; preds = %for.inc1316, %for.body1259
  %1081 = load i32, i32* %m, align 4
  %cmp1261 = icmp slt i32 %1081, 6
  br i1 %cmp1261, label %for.body1263, label %for.end1318

for.body1263:                                     ; preds = %for.cond1260
  %1082 = load i32, i32* %iXMinNow, align 4
  %1083 = load i32, i32* %m, align 4
  %idxprom1264 = sext i32 %1083 to i64
  %arrayidx1265 = getelementptr inbounds [6 x i32], [6 x i32]* @FastIntegerPelBlockMotionSearch.Hexagon_x, i64 0, i64 %idxprom1264
  %1084 = load i32, i32* %arrayidx1265, align 4
  %add1266 = add nsw i32 %1082, %1084
  store i32 %add1266, i32* %cand_x, align 4
  %1085 = load i32, i32* %iYMinNow, align 4
  %1086 = load i32, i32* %m, align 4
  %idxprom1267 = sext i32 %1086 to i64
  %arrayidx1268 = getelementptr inbounds [6 x i32], [6 x i32]* @FastIntegerPelBlockMotionSearch.Hexagon_y, i64 0, i64 %idxprom1267
  %1087 = load i32, i32* %arrayidx1268, align 4
  %add1269 = add nsw i32 %1085, %1087
  store i32 %add1269, i32* %cand_y, align 4
  %1088 = load i32, i32* %cand_x, align 4
  %1089 = load i32, i32* %center_x, align 4
  %sub1270 = sub nsw i32 %1088, %1089
  %call1271 = call i32 @abs(i32 %sub1270) #6
  %1090 = load i32, i32* %search_range.addr, align 4
  %cmp1272 = icmp sle i32 %call1271, %1090
  br i1 %cmp1272, label %land.lhs.true1274, label %if.end1315

land.lhs.true1274:                                ; preds = %for.body1263
  %1091 = load i32, i32* %cand_y, align 4
  %1092 = load i32, i32* %center_y, align 4
  %sub1275 = sub nsw i32 %1091, %1092
  %call1276 = call i32 @abs(i32 %sub1275) #6
  %1093 = load i32, i32* %search_range.addr, align 4
  %cmp1277 = icmp sle i32 %call1276, %1093
  br i1 %cmp1277, label %if.then1279, label %if.end1315

if.then1279:                                      ; preds = %land.lhs.true1274
  %1094 = load i32**, i32*** @McostState, align 8
  %1095 = load i32, i32* %cand_y, align 4
  %1096 = load i32, i32* %center_y, align 4
  %sub1280 = sub nsw i32 %1095, %1096
  %1097 = load i32, i32* %search_range.addr, align 4
  %add1281 = add nsw i32 %sub1280, %1097
  %idxprom1282 = sext i32 %add1281 to i64
  %arrayidx1283 = getelementptr inbounds i32*, i32** %1094, i64 %idxprom1282
  %1098 = load i32*, i32** %arrayidx1283, align 8
  %1099 = load i32, i32* %cand_x, align 4
  %1100 = load i32, i32* %center_x, align 4
  %sub1284 = sub nsw i32 %1099, %1100
  %1101 = load i32, i32* %search_range.addr, align 4
  %add1285 = add nsw i32 %sub1284, %1101
  %idxprom1286 = sext i32 %add1285 to i64
  %arrayidx1287 = getelementptr inbounds i32, i32* %1098, i64 %idxprom1286
  %1102 = load i32, i32* %arrayidx1287, align 4
  %tobool1288 = icmp ne i32 %1102, 0
  br i1 %tobool1288, label %if.end1314, label %if.then1289

if.then1289:                                      ; preds = %if.then1279
  %1103 = load i32, i32* %lambda_factor, align 4
  %1104 = load i32*, i32** @mvbits, align 8
  %1105 = load i32, i32* %cand_x, align 4
  %1106 = load i32, i32* %mvshift, align 4
  %shl1290 = shl i32 %1105, %1106
  %1107 = load i32, i32* %pred_x, align 4
  %sub1291 = sub nsw i32 %shl1290, %1107
  %idxprom1292 = sext i32 %sub1291 to i64
  %arrayidx1293 = getelementptr inbounds i32, i32* %1104, i64 %idxprom1292
  %1108 = load i32, i32* %arrayidx1293, align 4
  %1109 = load i32*, i32** @mvbits, align 8
  %1110 = load i32, i32* %cand_y, align 4
  %1111 = load i32, i32* %mvshift, align 4
  %shl1294 = shl i32 %1110, %1111
  %1112 = load i32, i32* %pred_y, align 4
  %sub1295 = sub nsw i32 %shl1294, %1112
  %idxprom1296 = sext i32 %sub1295 to i64
  %arrayidx1297 = getelementptr inbounds i32, i32* %1109, i64 %idxprom1296
  %1113 = load i32, i32* %arrayidx1297, align 4
  %add1298 = add nsw i32 %1108, %1113
  %mul1299 = mul nsw i32 %1103, %add1298
  %shr1300 = ashr i32 %mul1299, 16
  store i32 %shr1300, i32* %mcost, align 4
  %1114 = load i16*, i16** %ref_pic, align 8
  %1115 = load i16**, i16*** %orig_pic.addr, align 8
  %1116 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %1117 = load i32, i32* %blocksize_y, align 4
  %1118 = load i32, i32* %blocksize_x, align 4
  %1119 = load i32, i32* %blocksize_x4, align 4
  %1120 = load i32, i32* %mcost, align 4
  %1121 = load i32, i32* %min_mcost.addr, align 4
  %1122 = load i32, i32* %cand_x, align 4
  %1123 = load i32, i32* %cand_y, align 4
  %call1301 = call i32 @PartCalMad(i16* %1114, i16** %1115, i16* (i32, i16*, i32, i32, i32, i32)* %1116, i32 %1117, i32 %1118, i32 %1119, i32 %1120, i32 %1121, i32 %1122, i32 %1123)
  store i32 %call1301, i32* %mcost, align 4
  %1124 = load i32, i32* %mcost, align 4
  %1125 = load i32**, i32*** @McostState, align 8
  %1126 = load i32, i32* %cand_y, align 4
  %1127 = load i32, i32* %center_y, align 4
  %sub1302 = sub nsw i32 %1126, %1127
  %1128 = load i32, i32* %search_range.addr, align 4
  %add1303 = add nsw i32 %sub1302, %1128
  %idxprom1304 = sext i32 %add1303 to i64
  %arrayidx1305 = getelementptr inbounds i32*, i32** %1125, i64 %idxprom1304
  %1129 = load i32*, i32** %arrayidx1305, align 8
  %1130 = load i32, i32* %cand_x, align 4
  %1131 = load i32, i32* %center_x, align 4
  %sub1306 = sub nsw i32 %1130, %1131
  %1132 = load i32, i32* %search_range.addr, align 4
  %add1307 = add nsw i32 %sub1306, %1132
  %idxprom1308 = sext i32 %add1307 to i64
  %arrayidx1309 = getelementptr inbounds i32, i32* %1129, i64 %idxprom1308
  store i32 %1124, i32* %arrayidx1309, align 4
  %1133 = load i32, i32* %mcost, align 4
  %1134 = load i32, i32* %min_mcost.addr, align 4
  %cmp1310 = icmp slt i32 %1133, %1134
  br i1 %cmp1310, label %if.then1312, label %if.end1313

if.then1312:                                      ; preds = %if.then1289
  %1135 = load i32, i32* %cand_x, align 4
  store i32 %1135, i32* %best_x, align 4
  %1136 = load i32, i32* %cand_y, align 4
  store i32 %1136, i32* %best_y, align 4
  %1137 = load i32, i32* %mcost, align 4
  store i32 %1137, i32* %min_mcost.addr, align 4
  store i32 0, i32* %iAbort, align 4
  br label %if.end1313

if.end1313:                                       ; preds = %if.then1312, %if.then1289
  br label %if.end1314

if.end1314:                                       ; preds = %if.end1313, %if.then1279
  br label %if.end1315

if.end1315:                                       ; preds = %if.end1314, %land.lhs.true1274, %for.body1263
  br label %for.inc1316

for.inc1316:                                      ; preds = %if.end1315
  %1138 = load i32, i32* %m, align 4
  %inc1317 = add nsw i32 %1138, 1
  store i32 %inc1317, i32* %m, align 4
  br label %for.cond1260

for.end1318:                                      ; preds = %for.cond1260
  %1139 = load i32, i32* %iAbort, align 4
  %tobool1319 = icmp ne i32 %1139, 0
  br i1 %tobool1319, label %if.then1320, label %if.end1321

if.then1320:                                      ; preds = %for.end1318
  br label %for.end1324

if.end1321:                                       ; preds = %for.end1318
  %1140 = load i32, i32* %best_x, align 4
  store i32 %1140, i32* %iXMinNow, align 4
  %1141 = load i32, i32* %best_y, align 4
  store i32 %1141, i32* %iYMinNow, align 4
  br label %for.inc1322

for.inc1322:                                      ; preds = %if.end1321
  %1142 = load i32, i32* %i, align 4
  %inc1323 = add nsw i32 %1142, 1
  store i32 %inc1323, i32* %i, align 4
  br label %for.cond1256

for.end1324:                                      ; preds = %if.then1320, %for.cond1256
  br label %third_step

third_step:                                       ; preds = %for.end1324, %if.then1239, %if.then1221, %if.then1200, %if.then1109, %if.then1091, %if.then1070, %if.then988, %if.then970, %if.then949, %if.then714, %if.then696, %if.then675, %if.then381
  %1143 = load i32, i32* %best_x, align 4
  store i32 %1143, i32* %iXMinNow, align 4
  %1144 = load i32, i32* %best_y, align 4
  store i32 %1144, i32* %iYMinNow, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond1325

for.cond1325:                                     ; preds = %for.inc1391, %third_step
  %1145 = load i32, i32* %i, align 4
  %1146 = load i32, i32* %search_range.addr, align 4
  %cmp1326 = icmp slt i32 %1145, %1146
  br i1 %cmp1326, label %for.body1328, label %for.end1393

for.body1328:                                     ; preds = %for.cond1325
  store i32 65536, i32* %iSADLayer, align 4
  store i32 1, i32* %iAbort, align 4
  store i32 0, i32* %m, align 4
  br label %for.cond1329

for.cond1329:                                     ; preds = %for.inc1385, %for.body1328
  %1147 = load i32, i32* %m, align 4
  %cmp1330 = icmp slt i32 %1147, 4
  br i1 %cmp1330, label %for.body1332, label %for.end1387

for.body1332:                                     ; preds = %for.cond1329
  %1148 = load i32, i32* %iXMinNow, align 4
  %1149 = load i32, i32* %m, align 4
  %idxprom1333 = sext i32 %1149 to i64
  %arrayidx1334 = getelementptr inbounds [4 x i32], [4 x i32]* @FastIntegerPelBlockMotionSearch.Diamond_x, i64 0, i64 %idxprom1333
  %1150 = load i32, i32* %arrayidx1334, align 4
  %add1335 = add nsw i32 %1148, %1150
  store i32 %add1335, i32* %cand_x, align 4
  %1151 = load i32, i32* %iYMinNow, align 4
  %1152 = load i32, i32* %m, align 4
  %idxprom1336 = sext i32 %1152 to i64
  %arrayidx1337 = getelementptr inbounds [4 x i32], [4 x i32]* @FastIntegerPelBlockMotionSearch.Diamond_y, i64 0, i64 %idxprom1336
  %1153 = load i32, i32* %arrayidx1337, align 4
  %add1338 = add nsw i32 %1151, %1153
  store i32 %add1338, i32* %cand_y, align 4
  %1154 = load i32, i32* %cand_x, align 4
  %1155 = load i32, i32* %center_x, align 4
  %sub1339 = sub nsw i32 %1154, %1155
  %call1340 = call i32 @abs(i32 %sub1339) #6
  %1156 = load i32, i32* %search_range.addr, align 4
  %cmp1341 = icmp sle i32 %call1340, %1156
  br i1 %cmp1341, label %land.lhs.true1343, label %if.end1384

land.lhs.true1343:                                ; preds = %for.body1332
  %1157 = load i32, i32* %cand_y, align 4
  %1158 = load i32, i32* %center_y, align 4
  %sub1344 = sub nsw i32 %1157, %1158
  %call1345 = call i32 @abs(i32 %sub1344) #6
  %1159 = load i32, i32* %search_range.addr, align 4
  %cmp1346 = icmp sle i32 %call1345, %1159
  br i1 %cmp1346, label %if.then1348, label %if.end1384

if.then1348:                                      ; preds = %land.lhs.true1343
  %1160 = load i32**, i32*** @McostState, align 8
  %1161 = load i32, i32* %cand_y, align 4
  %1162 = load i32, i32* %center_y, align 4
  %sub1349 = sub nsw i32 %1161, %1162
  %1163 = load i32, i32* %search_range.addr, align 4
  %add1350 = add nsw i32 %sub1349, %1163
  %idxprom1351 = sext i32 %add1350 to i64
  %arrayidx1352 = getelementptr inbounds i32*, i32** %1160, i64 %idxprom1351
  %1164 = load i32*, i32** %arrayidx1352, align 8
  %1165 = load i32, i32* %cand_x, align 4
  %1166 = load i32, i32* %center_x, align 4
  %sub1353 = sub nsw i32 %1165, %1166
  %1167 = load i32, i32* %search_range.addr, align 4
  %add1354 = add nsw i32 %sub1353, %1167
  %idxprom1355 = sext i32 %add1354 to i64
  %arrayidx1356 = getelementptr inbounds i32, i32* %1164, i64 %idxprom1355
  %1168 = load i32, i32* %arrayidx1356, align 4
  %tobool1357 = icmp ne i32 %1168, 0
  br i1 %tobool1357, label %if.end1383, label %if.then1358

if.then1358:                                      ; preds = %if.then1348
  %1169 = load i32, i32* %lambda_factor, align 4
  %1170 = load i32*, i32** @mvbits, align 8
  %1171 = load i32, i32* %cand_x, align 4
  %1172 = load i32, i32* %mvshift, align 4
  %shl1359 = shl i32 %1171, %1172
  %1173 = load i32, i32* %pred_x, align 4
  %sub1360 = sub nsw i32 %shl1359, %1173
  %idxprom1361 = sext i32 %sub1360 to i64
  %arrayidx1362 = getelementptr inbounds i32, i32* %1170, i64 %idxprom1361
  %1174 = load i32, i32* %arrayidx1362, align 4
  %1175 = load i32*, i32** @mvbits, align 8
  %1176 = load i32, i32* %cand_y, align 4
  %1177 = load i32, i32* %mvshift, align 4
  %shl1363 = shl i32 %1176, %1177
  %1178 = load i32, i32* %pred_y, align 4
  %sub1364 = sub nsw i32 %shl1363, %1178
  %idxprom1365 = sext i32 %sub1364 to i64
  %arrayidx1366 = getelementptr inbounds i32, i32* %1175, i64 %idxprom1365
  %1179 = load i32, i32* %arrayidx1366, align 4
  %add1367 = add nsw i32 %1174, %1179
  %mul1368 = mul nsw i32 %1169, %add1367
  %shr1369 = ashr i32 %mul1368, 16
  store i32 %shr1369, i32* %mcost, align 4
  %1180 = load i16*, i16** %ref_pic, align 8
  %1181 = load i16**, i16*** %orig_pic.addr, align 8
  %1182 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %1183 = load i32, i32* %blocksize_y, align 4
  %1184 = load i32, i32* %blocksize_x, align 4
  %1185 = load i32, i32* %blocksize_x4, align 4
  %1186 = load i32, i32* %mcost, align 4
  %1187 = load i32, i32* %min_mcost.addr, align 4
  %1188 = load i32, i32* %cand_x, align 4
  %1189 = load i32, i32* %cand_y, align 4
  %call1370 = call i32 @PartCalMad(i16* %1180, i16** %1181, i16* (i32, i16*, i32, i32, i32, i32)* %1182, i32 %1183, i32 %1184, i32 %1185, i32 %1186, i32 %1187, i32 %1188, i32 %1189)
  store i32 %call1370, i32* %mcost, align 4
  %1190 = load i32, i32* %mcost, align 4
  %1191 = load i32**, i32*** @McostState, align 8
  %1192 = load i32, i32* %cand_y, align 4
  %1193 = load i32, i32* %center_y, align 4
  %sub1371 = sub nsw i32 %1192, %1193
  %1194 = load i32, i32* %search_range.addr, align 4
  %add1372 = add nsw i32 %sub1371, %1194
  %idxprom1373 = sext i32 %add1372 to i64
  %arrayidx1374 = getelementptr inbounds i32*, i32** %1191, i64 %idxprom1373
  %1195 = load i32*, i32** %arrayidx1374, align 8
  %1196 = load i32, i32* %cand_x, align 4
  %1197 = load i32, i32* %center_x, align 4
  %sub1375 = sub nsw i32 %1196, %1197
  %1198 = load i32, i32* %search_range.addr, align 4
  %add1376 = add nsw i32 %sub1375, %1198
  %idxprom1377 = sext i32 %add1376 to i64
  %arrayidx1378 = getelementptr inbounds i32, i32* %1195, i64 %idxprom1377
  store i32 %1190, i32* %arrayidx1378, align 4
  %1199 = load i32, i32* %mcost, align 4
  %1200 = load i32, i32* %min_mcost.addr, align 4
  %cmp1379 = icmp slt i32 %1199, %1200
  br i1 %cmp1379, label %if.then1381, label %if.end1382

if.then1381:                                      ; preds = %if.then1358
  %1201 = load i32, i32* %cand_x, align 4
  store i32 %1201, i32* %best_x, align 4
  %1202 = load i32, i32* %cand_y, align 4
  store i32 %1202, i32* %best_y, align 4
  %1203 = load i32, i32* %mcost, align 4
  store i32 %1203, i32* %min_mcost.addr, align 4
  store i32 0, i32* %iAbort, align 4
  br label %if.end1382

if.end1382:                                       ; preds = %if.then1381, %if.then1358
  br label %if.end1383

if.end1383:                                       ; preds = %if.end1382, %if.then1348
  br label %if.end1384

if.end1384:                                       ; preds = %if.end1383, %land.lhs.true1343, %for.body1332
  br label %for.inc1385

for.inc1385:                                      ; preds = %if.end1384
  %1204 = load i32, i32* %m, align 4
  %inc1386 = add nsw i32 %1204, 1
  store i32 %inc1386, i32* %m, align 4
  br label %for.cond1329

for.end1387:                                      ; preds = %for.cond1329
  %1205 = load i32, i32* %iAbort, align 4
  %tobool1388 = icmp ne i32 %1205, 0
  br i1 %tobool1388, label %if.then1389, label %if.end1390

if.then1389:                                      ; preds = %for.end1387
  br label %for.end1393

if.end1390:                                       ; preds = %for.end1387
  %1206 = load i32, i32* %best_x, align 4
  store i32 %1206, i32* %iXMinNow, align 4
  %1207 = load i32, i32* %best_y, align 4
  store i32 %1207, i32* %iYMinNow, align 4
  br label %for.inc1391

for.inc1391:                                      ; preds = %if.end1390
  %1208 = load i32, i32* %i, align 4
  %inc1392 = add nsw i32 %1208, 1
  store i32 %inc1392, i32* %i, align 4
  br label %for.cond1325

for.end1393:                                      ; preds = %if.then1389, %for.cond1325
  %1209 = load i32, i32* %best_x, align 4
  %1210 = load i32, i32* %pic_pix_x.addr, align 4
  %sub1394 = sub nsw i32 %1209, %1210
  %conv1395 = trunc i32 %sub1394 to i16
  %1211 = load i16*, i16** %mv_x.addr, align 8
  store i16 %conv1395, i16* %1211, align 2
  %1212 = load i32, i32* %best_y, align 4
  %1213 = load i32, i32* %pic_pix_y.addr, align 4
  %sub1396 = sub nsw i32 %1212, %1213
  %conv1397 = trunc i32 %sub1396 to i16
  %1214 = load i16*, i16** %mv_y.addr, align 8
  store i16 %conv1397, i16* %1214, align 2
  %1215 = load i32, i32* %min_mcost.addr, align 4
  %1216 = load i32, i32* %canary
  %1217 = icmp eq i32 %1216, 764460282
  br i1 %1217, label %1218, label %func_exit

1218:                                             ; preds = %for.end1393, %func_exit
  ret i32 %1215

func_exit:                                        ; preds = %for.end1393
  call void @detect_breach()
  br label %1218
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @skip_intrabk_SAD.50(i32 %best_mode, i32 %ref_max) #0 {
entry:
  %best_mode.addr = alloca i32, align 4
  %ref = alloca i32, align 4
  %i = alloca i32, align 4
  %ref_max.addr = alloca i32, align 4
  %j = alloca i32, align 4
  %canary = alloca i32
  store i32 1120030001, i32* %canary
  %k = alloca i32, align 4
  store i32 %best_mode, i32* %best_mode.addr, align 4
  store i32 %ref_max, i32* %ref_max.addr, align 4
  %0 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %number = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %0, i32 0, i32 0
  %1 = load i32, i32* %number, align 8
  %cmp = icmp sgt i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %best_mode.addr, align 4
  %cmp1 = icmp eq i32 %2, 9
  br i1 %cmp1, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.then
  %3 = load i32, i32* %best_mode.addr, align 4
  %cmp2 = icmp eq i32 %3, 10
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.then
  %4 = phi i1 [ true, %if.then ], [ %cmp2, %lor.rhs ]
  %5 = zext i1 %4 to i64
  %cond = select i1 %4, i32 1, i32 0
  %6 = load i32*, i32** @flag_intra, align 8
  %7 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %pix_x = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %7, i32 0, i32 33
  %8 = load i32, i32* %pix_x, align 8
  %shr = ashr i32 %8, 4
  %idxprom = sext i32 %shr to i64
  %arrayidx = getelementptr inbounds i32, i32* %6, i64 %idxprom
  store i32 %cond, i32* %arrayidx, align 4
  br label %if.end

if.end:                                           ; preds = %lor.end, %entry
  %9 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %type = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %9, i32 0, i32 6
  %10 = load i32, i32* %type, align 8
  %cmp3 = icmp ne i32 %10, 0
  br i1 %cmp3, label %land.lhs.true, label %if.end39

land.lhs.true:                                    ; preds = %if.end
  %11 = load i32, i32* %best_mode.addr, align 4
  %cmp4 = icmp eq i32 %11, 9
  br i1 %cmp4, label %if.then6, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %12 = load i32, i32* %best_mode.addr, align 4
  %cmp5 = icmp eq i32 %12, 10
  br i1 %cmp5, label %if.then6, label %if.end39

if.then6:                                         ; preds = %lor.lhs.false, %land.lhs.true
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc36, %if.then6
  %13 = load i32, i32* %i, align 4
  %cmp7 = icmp slt i32 %13, 4
  br i1 %cmp7, label %for.body, label %for.end38

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc33, %for.body
  %14 = load i32, i32* %j, align 4
  %cmp9 = icmp slt i32 %14, 4
  br i1 %cmp9, label %for.body10, label %for.end35

for.body10:                                       ; preds = %for.cond8
  store i32 1, i32* %k, align 4
  br label %for.cond11

for.cond11:                                       ; preds = %for.inc30, %for.body10
  %15 = load i32, i32* %k, align 4
  %cmp12 = icmp slt i32 %15, 8
  br i1 %cmp12, label %for.body13, label %for.end32

for.body13:                                       ; preds = %for.cond11
  store i32 0, i32* %ref, align 4
  br label %for.cond14

for.cond14:                                       ; preds = %for.inc, %for.body13
  %16 = load i32, i32* %ref, align 4
  %17 = load i32, i32* %ref_max.addr, align 4
  %cmp15 = icmp slt i32 %16, %17
  br i1 %cmp15, label %for.body16, label %for.end

for.body16:                                       ; preds = %for.cond14
  %18 = load i32*****, i32****** @all_mincost, align 8
  %19 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %pix_x17 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %19, i32 0, i32 33
  %20 = load i32, i32* %pix_x17, align 8
  %shr18 = ashr i32 %20, 2
  %21 = load i32, i32* %i, align 4
  %add = add nsw i32 %shr18, %21
  %idxprom19 = sext i32 %add to i64
  %arrayidx20 = getelementptr inbounds i32****, i32***** %18, i64 %idxprom19
  %22 = load i32****, i32***** %arrayidx20, align 8
  %23 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %pix_y = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %23, i32 0, i32 34
  %24 = load i32, i32* %pix_y, align 4
  %shr21 = ashr i32 %24, 2
  %25 = load i32, i32* %j, align 4
  %add22 = add nsw i32 %shr21, %25
  %idxprom23 = sext i32 %add22 to i64
  %arrayidx24 = getelementptr inbounds i32***, i32**** %22, i64 %idxprom23
  %26 = load i32***, i32**** %arrayidx24, align 8
  %27 = load i32, i32* %ref, align 4
  %idxprom25 = sext i32 %27 to i64
  %arrayidx26 = getelementptr inbounds i32**, i32*** %26, i64 %idxprom25
  %28 = load i32**, i32*** %arrayidx26, align 8
  %29 = load i32, i32* %k, align 4
  %idxprom27 = sext i32 %29 to i64
  %arrayidx28 = getelementptr inbounds i32*, i32** %28, i64 %idxprom27
  %30 = load i32*, i32** %arrayidx28, align 8
  %arrayidx29 = getelementptr inbounds i32, i32* %30, i64 0
  store i32 0, i32* %arrayidx29, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body16
  %31 = load i32, i32* %ref, align 4
  %inc = add nsw i32 %31, 1
  store i32 %inc, i32* %ref, align 4
  br label %for.cond14

for.end:                                          ; preds = %for.cond14
  br label %for.inc30

for.inc30:                                        ; preds = %for.end
  %32 = load i32, i32* %k, align 4
  %inc31 = add nsw i32 %32, 1
  store i32 %inc31, i32* %k, align 4
  br label %for.cond11

for.end32:                                        ; preds = %for.cond11
  br label %for.inc33

for.inc33:                                        ; preds = %for.end32
  %33 = load i32, i32* %j, align 4
  %inc34 = add nsw i32 %33, 1
  store i32 %inc34, i32* %j, align 4
  br label %for.cond8

for.end35:                                        ; preds = %for.cond8
  br label %for.inc36

for.inc36:                                        ; preds = %for.end35
  %34 = load i32, i32* %i, align 4
  %inc37 = add nsw i32 %34, 1
  store i32 %inc37, i32* %i, align 4
  br label %for.cond

for.end38:                                        ; preds = %for.cond
  br label %if.end39

if.end39:                                         ; preds = %for.end38, %lor.lhs.false, %if.end
  %35 = load i32, i32* %canary
  %36 = icmp eq i32 %35, 1120030001
  br i1 %36, label %37, label %func_exit

37:                                               ; preds = %if.end39, %func_exit
  ret void

func_exit:                                        ; preds = %if.end39
  call void @detect_breach()
  br label %37
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @get_mem_mincost.51(i32****** %mv) #0 {
entry:
  %j = alloca i32, align 4
  %mv.addr = alloca i32******, align 8
  %k = alloca i32, align 4
  %l = alloca i32, align 4
  %canary = alloca i32
  store i32 1730995116, i32* %canary
  %i = alloca i32, align 4
  store i32****** %mv, i32******* %mv.addr, align 8
  %0 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %width = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %0, i32 0, i32 13
  %1 = load i32, i32* %width, align 4
  %div = sdiv i32 %1, 4
  %conv = sext i32 %div to i64
  %call = call noalias i8* @calloc(i64 %conv, i64 8) #5
  %2 = bitcast i8* %call to i32*****
  %3 = load i32******, i32******* %mv.addr, align 8
  store i32***** %2, i32****** %3, align 8
  %cmp = icmp eq i32***** %2, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @no_mem_exit(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc68, %if.end
  %4 = load i32, i32* %i, align 4
  %5 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %width2 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %5, i32 0, i32 13
  %6 = load i32, i32* %width2, align 4
  %div3 = sdiv i32 %6, 4
  %cmp4 = icmp slt i32 %4, %div3
  br i1 %cmp4, label %for.body, label %for.end70

for.body:                                         ; preds = %for.cond
  %7 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %7, i32 0, i32 15
  %8 = load i32, i32* %height, align 4
  %div6 = sdiv i32 %8, 4
  %conv7 = sext i32 %div6 to i64
  %call8 = call noalias i8* @calloc(i64 %conv7, i64 8) #5
  %9 = bitcast i8* %call8 to i32****
  %10 = load i32******, i32******* %mv.addr, align 8
  %11 = load i32*****, i32****** %10, align 8
  %12 = load i32, i32* %i, align 4
  %idxprom = sext i32 %12 to i64
  %arrayidx = getelementptr inbounds i32****, i32***** %11, i64 %idxprom
  store i32**** %9, i32***** %arrayidx, align 8
  %cmp9 = icmp eq i32**** %9, null
  br i1 %cmp9, label %if.then11, label %if.end12

if.then11:                                        ; preds = %for.body
  call void @no_mem_exit(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %if.end12

if.end12:                                         ; preds = %if.then11, %for.body
  store i32 0, i32* %j, align 4
  br label %for.cond13

for.cond13:                                       ; preds = %for.inc65, %if.end12
  %13 = load i32, i32* %j, align 4
  %14 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height14 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %14, i32 0, i32 15
  %15 = load i32, i32* %height14, align 4
  %div15 = sdiv i32 %15, 4
  %cmp16 = icmp slt i32 %13, %div15
  br i1 %cmp16, label %for.body18, label %for.end67

for.body18:                                       ; preds = %for.cond13
  %16 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %max_num_references = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %16, i32 0, i32 9
  %17 = load i32, i32* %max_num_references, align 4
  %conv19 = sext i32 %17 to i64
  %call20 = call noalias i8* @calloc(i64 %conv19, i64 8) #5
  %18 = bitcast i8* %call20 to i32***
  %19 = load i32******, i32******* %mv.addr, align 8
  %20 = load i32*****, i32****** %19, align 8
  %21 = load i32, i32* %i, align 4
  %idxprom21 = sext i32 %21 to i64
  %arrayidx22 = getelementptr inbounds i32****, i32***** %20, i64 %idxprom21
  %22 = load i32****, i32***** %arrayidx22, align 8
  %23 = load i32, i32* %j, align 4
  %idxprom23 = sext i32 %23 to i64
  %arrayidx24 = getelementptr inbounds i32***, i32**** %22, i64 %idxprom23
  store i32*** %18, i32**** %arrayidx24, align 8
  %cmp25 = icmp eq i32*** %18, null
  br i1 %cmp25, label %if.then27, label %if.end28

if.then27:                                        ; preds = %for.body18
  call void @no_mem_exit(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %if.end28

if.end28:                                         ; preds = %if.then27, %for.body18
  store i32 0, i32* %k, align 4
  br label %for.cond29

for.cond29:                                       ; preds = %for.inc62, %if.end28
  %24 = load i32, i32* %k, align 4
  %25 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %max_num_references30 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %25, i32 0, i32 9
  %26 = load i32, i32* %max_num_references30, align 4
  %cmp31 = icmp slt i32 %24, %26
  br i1 %cmp31, label %for.body33, label %for.end64

for.body33:                                       ; preds = %for.cond29
  %call34 = call noalias i8* @calloc(i64 9, i64 8) #5
  %27 = bitcast i8* %call34 to i32**
  %28 = load i32******, i32******* %mv.addr, align 8
  %29 = load i32*****, i32****** %28, align 8
  %30 = load i32, i32* %i, align 4
  %idxprom35 = sext i32 %30 to i64
  %arrayidx36 = getelementptr inbounds i32****, i32***** %29, i64 %idxprom35
  %31 = load i32****, i32***** %arrayidx36, align 8
  %32 = load i32, i32* %j, align 4
  %idxprom37 = sext i32 %32 to i64
  %arrayidx38 = getelementptr inbounds i32***, i32**** %31, i64 %idxprom37
  %33 = load i32***, i32**** %arrayidx38, align 8
  %34 = load i32, i32* %k, align 4
  %idxprom39 = sext i32 %34 to i64
  %arrayidx40 = getelementptr inbounds i32**, i32*** %33, i64 %idxprom39
  store i32** %27, i32*** %arrayidx40, align 8
  %cmp41 = icmp eq i32** %27, null
  br i1 %cmp41, label %if.then43, label %if.end44

if.then43:                                        ; preds = %for.body33
  call void @no_mem_exit(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %if.end44

if.end44:                                         ; preds = %if.then43, %for.body33
  store i32 0, i32* %l, align 4
  br label %for.cond45

for.cond45:                                       ; preds = %for.inc, %if.end44
  %35 = load i32, i32* %l, align 4
  %cmp46 = icmp slt i32 %35, 9
  br i1 %cmp46, label %for.body48, label %for.end

for.body48:                                       ; preds = %for.cond45
  %call49 = call noalias i8* @calloc(i64 3, i64 4) #5
  %36 = bitcast i8* %call49 to i32*
  %37 = load i32******, i32******* %mv.addr, align 8
  %38 = load i32*****, i32****** %37, align 8
  %39 = load i32, i32* %i, align 4
  %idxprom50 = sext i32 %39 to i64
  %arrayidx51 = getelementptr inbounds i32****, i32***** %38, i64 %idxprom50
  %40 = load i32****, i32***** %arrayidx51, align 8
  %41 = load i32, i32* %j, align 4
  %idxprom52 = sext i32 %41 to i64
  %arrayidx53 = getelementptr inbounds i32***, i32**** %40, i64 %idxprom52
  %42 = load i32***, i32**** %arrayidx53, align 8
  %43 = load i32, i32* %k, align 4
  %idxprom54 = sext i32 %43 to i64
  %arrayidx55 = getelementptr inbounds i32**, i32*** %42, i64 %idxprom54
  %44 = load i32**, i32*** %arrayidx55, align 8
  %45 = load i32, i32* %l, align 4
  %idxprom56 = sext i32 %45 to i64
  %arrayidx57 = getelementptr inbounds i32*, i32** %44, i64 %idxprom56
  store i32* %36, i32** %arrayidx57, align 8
  %cmp58 = icmp eq i32* %36, null
  br i1 %cmp58, label %if.then60, label %if.end61

if.then60:                                        ; preds = %for.body48
  call void @no_mem_exit(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %if.end61

if.end61:                                         ; preds = %if.then60, %for.body48
  br label %for.inc

for.inc:                                          ; preds = %if.end61
  %46 = load i32, i32* %l, align 4
  %inc = add nsw i32 %46, 1
  store i32 %inc, i32* %l, align 4
  br label %for.cond45

for.end:                                          ; preds = %for.cond45
  br label %for.inc62

for.inc62:                                        ; preds = %for.end
  %47 = load i32, i32* %k, align 4
  %inc63 = add nsw i32 %47, 1
  store i32 %inc63, i32* %k, align 4
  br label %for.cond29

for.end64:                                        ; preds = %for.cond29
  br label %for.inc65

for.inc65:                                        ; preds = %for.end64
  %48 = load i32, i32* %j, align 4
  %inc66 = add nsw i32 %48, 1
  store i32 %inc66, i32* %j, align 4
  br label %for.cond13

for.end67:                                        ; preds = %for.cond13
  br label %for.inc68

for.inc68:                                        ; preds = %for.end67
  %49 = load i32, i32* %i, align 4
  %inc69 = add nsw i32 %49, 1
  store i32 %inc69, i32* %i, align 4
  br label %for.cond

for.end70:                                        ; preds = %for.cond
  %50 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %width71 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %50, i32 0, i32 13
  %51 = load i32, i32* %width71, align 4
  %div72 = sdiv i32 %51, 4
  %52 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height73 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %52, i32 0, i32 15
  %53 = load i32, i32* %height73, align 4
  %mul = mul nsw i32 %div72, %53
  %div74 = sdiv i32 %mul, 4
  %54 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %max_num_references75 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %54, i32 0, i32 9
  %55 = load i32, i32* %max_num_references75, align 4
  %mul76 = mul nsw i32 %div74, %55
  %mul77 = mul nsw i32 %mul76, 9
  %mul78 = mul nsw i32 %mul77, 3
  %conv79 = sext i32 %mul78 to i64
  %mul80 = mul i64 %conv79, 4
  %conv81 = trunc i64 %mul80 to i32
  %56 = load i32, i32* %canary
  %57 = icmp eq i32 %56, 1730995116
  br i1 %57, label %58, label %func_exit

58:                                               ; preds = %for.end70, %func_exit
  ret i32 %conv81

func_exit:                                        ; preds = %for.end70
  call void @detect_breach()
  br label %58
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @get_mem_mincost.52(i32****** %mv) #0 {
entry:
  %canary = alloca i32
  store i32 615332842, i32* %canary
  %l = alloca i32, align 4
  %k = alloca i32, align 4
  %i = alloca i32, align 4
  %mv.addr = alloca i32******, align 8
  %j = alloca i32, align 4
  store i32****** %mv, i32******* %mv.addr, align 8
  %0 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %width = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %0, i32 0, i32 13
  %1 = load i32, i32* %width, align 4
  %div = sdiv i32 %1, 4
  %conv = sext i32 %div to i64
  %call = call noalias i8* @calloc(i64 %conv, i64 8) #5
  %2 = bitcast i8* %call to i32*****
  %3 = load i32******, i32******* %mv.addr, align 8
  store i32***** %2, i32****** %3, align 8
  %cmp = icmp eq i32***** %2, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @no_mem_exit(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc68, %if.end
  %4 = load i32, i32* %i, align 4
  %5 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %width2 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %5, i32 0, i32 13
  %6 = load i32, i32* %width2, align 4
  %div3 = sdiv i32 %6, 4
  %cmp4 = icmp slt i32 %4, %div3
  br i1 %cmp4, label %for.body, label %for.end70

for.body:                                         ; preds = %for.cond
  %7 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %7, i32 0, i32 15
  %8 = load i32, i32* %height, align 4
  %div6 = sdiv i32 %8, 4
  %conv7 = sext i32 %div6 to i64
  %call8 = call noalias i8* @calloc(i64 %conv7, i64 8) #5
  %9 = bitcast i8* %call8 to i32****
  %10 = load i32******, i32******* %mv.addr, align 8
  %11 = load i32*****, i32****** %10, align 8
  %12 = load i32, i32* %i, align 4
  %idxprom = sext i32 %12 to i64
  %arrayidx = getelementptr inbounds i32****, i32***** %11, i64 %idxprom
  store i32**** %9, i32***** %arrayidx, align 8
  %cmp9 = icmp eq i32**** %9, null
  br i1 %cmp9, label %if.then11, label %if.end12

if.then11:                                        ; preds = %for.body
  call void @no_mem_exit(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %if.end12

if.end12:                                         ; preds = %if.then11, %for.body
  store i32 0, i32* %j, align 4
  br label %for.cond13

for.cond13:                                       ; preds = %for.inc65, %if.end12
  %13 = load i32, i32* %j, align 4
  %14 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height14 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %14, i32 0, i32 15
  %15 = load i32, i32* %height14, align 4
  %div15 = sdiv i32 %15, 4
  %cmp16 = icmp slt i32 %13, %div15
  br i1 %cmp16, label %for.body18, label %for.end67

for.body18:                                       ; preds = %for.cond13
  %16 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %max_num_references = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %16, i32 0, i32 9
  %17 = load i32, i32* %max_num_references, align 4
  %conv19 = sext i32 %17 to i64
  %call20 = call noalias i8* @calloc(i64 %conv19, i64 8) #5
  %18 = bitcast i8* %call20 to i32***
  %19 = load i32******, i32******* %mv.addr, align 8
  %20 = load i32*****, i32****** %19, align 8
  %21 = load i32, i32* %i, align 4
  %idxprom21 = sext i32 %21 to i64
  %arrayidx22 = getelementptr inbounds i32****, i32***** %20, i64 %idxprom21
  %22 = load i32****, i32***** %arrayidx22, align 8
  %23 = load i32, i32* %j, align 4
  %idxprom23 = sext i32 %23 to i64
  %arrayidx24 = getelementptr inbounds i32***, i32**** %22, i64 %idxprom23
  store i32*** %18, i32**** %arrayidx24, align 8
  %cmp25 = icmp eq i32*** %18, null
  br i1 %cmp25, label %if.then27, label %if.end28

if.then27:                                        ; preds = %for.body18
  call void @no_mem_exit(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %if.end28

if.end28:                                         ; preds = %if.then27, %for.body18
  store i32 0, i32* %k, align 4
  br label %for.cond29

for.cond29:                                       ; preds = %for.inc62, %if.end28
  %24 = load i32, i32* %k, align 4
  %25 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %max_num_references30 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %25, i32 0, i32 9
  %26 = load i32, i32* %max_num_references30, align 4
  %cmp31 = icmp slt i32 %24, %26
  br i1 %cmp31, label %for.body33, label %for.end64

for.body33:                                       ; preds = %for.cond29
  %call34 = call noalias i8* @calloc(i64 9, i64 8) #5
  %27 = bitcast i8* %call34 to i32**
  %28 = load i32******, i32******* %mv.addr, align 8
  %29 = load i32*****, i32****** %28, align 8
  %30 = load i32, i32* %i, align 4
  %idxprom35 = sext i32 %30 to i64
  %arrayidx36 = getelementptr inbounds i32****, i32***** %29, i64 %idxprom35
  %31 = load i32****, i32***** %arrayidx36, align 8
  %32 = load i32, i32* %j, align 4
  %idxprom37 = sext i32 %32 to i64
  %arrayidx38 = getelementptr inbounds i32***, i32**** %31, i64 %idxprom37
  %33 = load i32***, i32**** %arrayidx38, align 8
  %34 = load i32, i32* %k, align 4
  %idxprom39 = sext i32 %34 to i64
  %arrayidx40 = getelementptr inbounds i32**, i32*** %33, i64 %idxprom39
  store i32** %27, i32*** %arrayidx40, align 8
  %cmp41 = icmp eq i32** %27, null
  br i1 %cmp41, label %if.then43, label %if.end44

if.then43:                                        ; preds = %for.body33
  call void @no_mem_exit(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %if.end44

if.end44:                                         ; preds = %if.then43, %for.body33
  store i32 0, i32* %l, align 4
  br label %for.cond45

for.cond45:                                       ; preds = %for.inc, %if.end44
  %35 = load i32, i32* %l, align 4
  %cmp46 = icmp slt i32 %35, 9
  br i1 %cmp46, label %for.body48, label %for.end

for.body48:                                       ; preds = %for.cond45
  %call49 = call noalias i8* @calloc(i64 3, i64 4) #5
  %36 = bitcast i8* %call49 to i32*
  %37 = load i32******, i32******* %mv.addr, align 8
  %38 = load i32*****, i32****** %37, align 8
  %39 = load i32, i32* %i, align 4
  %idxprom50 = sext i32 %39 to i64
  %arrayidx51 = getelementptr inbounds i32****, i32***** %38, i64 %idxprom50
  %40 = load i32****, i32***** %arrayidx51, align 8
  %41 = load i32, i32* %j, align 4
  %idxprom52 = sext i32 %41 to i64
  %arrayidx53 = getelementptr inbounds i32***, i32**** %40, i64 %idxprom52
  %42 = load i32***, i32**** %arrayidx53, align 8
  %43 = load i32, i32* %k, align 4
  %idxprom54 = sext i32 %43 to i64
  %arrayidx55 = getelementptr inbounds i32**, i32*** %42, i64 %idxprom54
  %44 = load i32**, i32*** %arrayidx55, align 8
  %45 = load i32, i32* %l, align 4
  %idxprom56 = sext i32 %45 to i64
  %arrayidx57 = getelementptr inbounds i32*, i32** %44, i64 %idxprom56
  store i32* %36, i32** %arrayidx57, align 8
  %cmp58 = icmp eq i32* %36, null
  br i1 %cmp58, label %if.then60, label %if.end61

if.then60:                                        ; preds = %for.body48
  call void @no_mem_exit(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %if.end61

if.end61:                                         ; preds = %if.then60, %for.body48
  br label %for.inc

for.inc:                                          ; preds = %if.end61
  %46 = load i32, i32* %l, align 4
  %inc = add nsw i32 %46, 1
  store i32 %inc, i32* %l, align 4
  br label %for.cond45

for.end:                                          ; preds = %for.cond45
  br label %for.inc62

for.inc62:                                        ; preds = %for.end
  %47 = load i32, i32* %k, align 4
  %inc63 = add nsw i32 %47, 1
  store i32 %inc63, i32* %k, align 4
  br label %for.cond29

for.end64:                                        ; preds = %for.cond29
  br label %for.inc65

for.inc65:                                        ; preds = %for.end64
  %48 = load i32, i32* %j, align 4
  %inc66 = add nsw i32 %48, 1
  store i32 %inc66, i32* %j, align 4
  br label %for.cond13

for.end67:                                        ; preds = %for.cond13
  br label %for.inc68

for.inc68:                                        ; preds = %for.end67
  %49 = load i32, i32* %i, align 4
  %inc69 = add nsw i32 %49, 1
  store i32 %inc69, i32* %i, align 4
  br label %for.cond

for.end70:                                        ; preds = %for.cond
  %50 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %width71 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %50, i32 0, i32 13
  %51 = load i32, i32* %width71, align 4
  %div72 = sdiv i32 %51, 4
  %52 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height73 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %52, i32 0, i32 15
  %53 = load i32, i32* %height73, align 4
  %mul = mul nsw i32 %div72, %53
  %div74 = sdiv i32 %mul, 4
  %54 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %max_num_references75 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %54, i32 0, i32 9
  %55 = load i32, i32* %max_num_references75, align 4
  %mul76 = mul nsw i32 %div74, %55
  %mul77 = mul nsw i32 %mul76, 9
  %mul78 = mul nsw i32 %mul77, 3
  %conv79 = sext i32 %mul78 to i64
  %mul80 = mul i64 %conv79, 4
  %conv81 = trunc i64 %mul80 to i32
  %56 = load i32, i32* %canary
  %57 = icmp eq i32 %56, 615332842
  br i1 %57, label %58, label %func_exit

58:                                               ; preds = %for.end70, %func_exit
  ret i32 %conv81

func_exit:                                        ; preds = %for.end70
  call void @detect_breach()
  br label %58
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @free_mem_bwmincost.53(i32***** %mv) #0 {
entry:
  %j = alloca i32, align 4
  %i = alloca i32, align 4
  %canary = alloca i32
  store i32 146923632, i32* %canary
  %mv.addr = alloca i32*****, align 8
  %k = alloca i32, align 4
  %l = alloca i32, align 4
  store i32***** %mv, i32****** %mv.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc35, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %width = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %1, i32 0, i32 13
  %2 = load i32, i32* %width, align 4
  %div = sdiv i32 %2, 4
  %cmp = icmp slt i32 %0, %div
  br i1 %cmp, label %for.body, label %for.end37

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc30, %for.body
  %3 = load i32, i32* %j, align 4
  %4 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %4, i32 0, i32 15
  %5 = load i32, i32* %height, align 4
  %div2 = sdiv i32 %5, 4
  %cmp3 = icmp slt i32 %3, %div2
  br i1 %cmp3, label %for.body4, label %for.end32

for.body4:                                        ; preds = %for.cond1
  store i32 0, i32* %k, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc23, %for.body4
  %6 = load i32, i32* %k, align 4
  %7 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %max_num_references = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %7, i32 0, i32 9
  %8 = load i32, i32* %max_num_references, align 4
  %cmp6 = icmp slt i32 %6, %8
  br i1 %cmp6, label %for.body7, label %for.end25

for.body7:                                        ; preds = %for.cond5
  store i32 0, i32* %l, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc, %for.body7
  %9 = load i32, i32* %l, align 4
  %cmp9 = icmp slt i32 %9, 9
  br i1 %cmp9, label %for.body10, label %for.end

for.body10:                                       ; preds = %for.cond8
  %10 = load i32*****, i32****** %mv.addr, align 8
  %11 = load i32, i32* %i, align 4
  %idxprom = sext i32 %11 to i64
  %arrayidx = getelementptr inbounds i32****, i32***** %10, i64 %idxprom
  %12 = load i32****, i32***** %arrayidx, align 8
  %13 = load i32, i32* %j, align 4
  %idxprom11 = sext i32 %13 to i64
  %arrayidx12 = getelementptr inbounds i32***, i32**** %12, i64 %idxprom11
  %14 = load i32***, i32**** %arrayidx12, align 8
  %15 = load i32, i32* %k, align 4
  %idxprom13 = sext i32 %15 to i64
  %arrayidx14 = getelementptr inbounds i32**, i32*** %14, i64 %idxprom13
  %16 = load i32**, i32*** %arrayidx14, align 8
  %17 = load i32, i32* %l, align 4
  %idxprom15 = sext i32 %17 to i64
  %arrayidx16 = getelementptr inbounds i32*, i32** %16, i64 %idxprom15
  %18 = load i32*, i32** %arrayidx16, align 8
  %19 = bitcast i32* %18 to i8*
  call void @free(i8* %19) #5
  br label %for.inc

for.inc:                                          ; preds = %for.body10
  %20 = load i32, i32* %l, align 4
  %inc = add nsw i32 %20, 1
  store i32 %inc, i32* %l, align 4
  br label %for.cond8

for.end:                                          ; preds = %for.cond8
  %21 = load i32*****, i32****** %mv.addr, align 8
  %22 = load i32, i32* %i, align 4
  %idxprom17 = sext i32 %22 to i64
  %arrayidx18 = getelementptr inbounds i32****, i32***** %21, i64 %idxprom17
  %23 = load i32****, i32***** %arrayidx18, align 8
  %24 = load i32, i32* %j, align 4
  %idxprom19 = sext i32 %24 to i64
  %arrayidx20 = getelementptr inbounds i32***, i32**** %23, i64 %idxprom19
  %25 = load i32***, i32**** %arrayidx20, align 8
  %26 = load i32, i32* %k, align 4
  %idxprom21 = sext i32 %26 to i64
  %arrayidx22 = getelementptr inbounds i32**, i32*** %25, i64 %idxprom21
  %27 = load i32**, i32*** %arrayidx22, align 8
  %28 = bitcast i32** %27 to i8*
  call void @free(i8* %28) #5
  br label %for.inc23

for.inc23:                                        ; preds = %for.end
  %29 = load i32, i32* %k, align 4
  %inc24 = add nsw i32 %29, 1
  store i32 %inc24, i32* %k, align 4
  br label %for.cond5

for.end25:                                        ; preds = %for.cond5
  %30 = load i32*****, i32****** %mv.addr, align 8
  %31 = load i32, i32* %i, align 4
  %idxprom26 = sext i32 %31 to i64
  %arrayidx27 = getelementptr inbounds i32****, i32***** %30, i64 %idxprom26
  %32 = load i32****, i32***** %arrayidx27, align 8
  %33 = load i32, i32* %j, align 4
  %idxprom28 = sext i32 %33 to i64
  %arrayidx29 = getelementptr inbounds i32***, i32**** %32, i64 %idxprom28
  %34 = load i32***, i32**** %arrayidx29, align 8
  %35 = bitcast i32*** %34 to i8*
  call void @free(i8* %35) #5
  br label %for.inc30

for.inc30:                                        ; preds = %for.end25
  %36 = load i32, i32* %j, align 4
  %inc31 = add nsw i32 %36, 1
  store i32 %inc31, i32* %j, align 4
  br label %for.cond1

for.end32:                                        ; preds = %for.cond1
  %37 = load i32*****, i32****** %mv.addr, align 8
  %38 = load i32, i32* %i, align 4
  %idxprom33 = sext i32 %38 to i64
  %arrayidx34 = getelementptr inbounds i32****, i32***** %37, i64 %idxprom33
  %39 = load i32****, i32***** %arrayidx34, align 8
  %40 = bitcast i32**** %39 to i8*
  call void @free(i8* %40) #5
  br label %for.inc35

for.inc35:                                        ; preds = %for.end32
  %41 = load i32, i32* %i, align 4
  %inc36 = add nsw i32 %41, 1
  store i32 %inc36, i32* %i, align 4
  br label %for.cond

for.end37:                                        ; preds = %for.cond
  %42 = load i32*****, i32****** %mv.addr, align 8
  %43 = bitcast i32***** %42 to i8*
  call void @free(i8* %43) #5
  %44 = load i32, i32* %canary
  %45 = icmp eq i32 %44, 146923632
  br i1 %45, label %46, label %func_exit

46:                                               ; preds = %for.end37, %func_exit
  ret void

func_exit:                                        ; preds = %for.end37
  call void @detect_breach()
  br label %46
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @FastSubPelBlockMotionSearch.54(i16** %orig_pic, i16 signext %ref, i32 %list, i32 %pic_pix_x, i32 %pic_pix_y, i32 %blocktype, i16 signext %pred_mv_x, i16 signext %pred_mv_y, i16* %mv_x, i16* %mv_y, i32 %search_pos2, i32 %search_pos4, i32 %min_mcost, double %lambda, i32 %useABT) #0 {
entry:
  %iCurrSearchRange = alloca i32, align 4
  %pred_frac_mv_x = alloca i32, align 4
  %abort_search = alloca i32, align 4
  %pred_mv_x.addr = alloca i16, align 2
  %iYMinNow = alloca i32, align 4
  %blocksize_x = alloca i32, align 4
  %mv_cost = alloca i32, align 4
  %ref_picture = alloca %struct.storable_picture*, align 8
  %pic4_pix_y = alloca i32, align 4
  %m = alloca i32, align 4
  %ref.addr = alloca i16, align 2
  %pred_frac_mv_y = alloca i32, align 4
  %pic4_pix_x = alloca i32, align 4
  %lambda_factor = alloca i32, align 4
  %iSADLayer = alloca i32, align 4
  %blocktype.addr = alloca i32, align 4
  %mv_shift = alloca i32, align 4
  %min_mcost.addr = alloca i32, align 4
  %pic_pix_x.addr = alloca i32, align 4
  %list.addr = alloca i32, align 4
  %pred_frac_up_mv_x = alloca i32, align 4
  %cand_mv_y = alloca i32, align 4
  %cand_mv_x = alloca i32, align 4
  %max_pos_y4 = alloca i32, align 4
  %currmv_x = alloca i32, align 4
  %canary = alloca i32
  store i32 286547050, i32* %canary
  %mv_x.addr = alloca i16*, align 8
  %list_offset = alloca i32, align 4
  %search_pos2.addr = alloca i32, align 4
  %blocksize_y = alloca i32, align 4
  %useABT.addr = alloca i32, align 4
  %pred_mv_y.addr = alloca i16, align 2
  %mv_y.addr = alloca i16*, align 8
  %pred_frac_up_mv_y = alloca i32, align 4
  %search_range_dynamic = alloca i32, align 4
  %iXMinNow = alloca i32, align 4
  %orig_pic.addr = alloca i16**, align 8
  %lambda.addr = alloca double, align 8
  %i = alloca i32, align 4
  %max_pos_x4 = alloca i32, align 4
  %search_pos4.addr = alloca i32, align 4
  %currmv_y = alloca i32, align 4
  %pic_pix_y.addr = alloca i32, align 4
  %mcost = alloca i32, align 4
  store i16** %orig_pic, i16*** %orig_pic.addr, align 8
  store i16 %ref, i16* %ref.addr, align 2
  store i32 %list, i32* %list.addr, align 4
  store i32 %pic_pix_x, i32* %pic_pix_x.addr, align 4
  store i32 %pic_pix_y, i32* %pic_pix_y.addr, align 4
  store i32 %blocktype, i32* %blocktype.addr, align 4
  store i16 %pred_mv_x, i16* %pred_mv_x.addr, align 2
  store i16 %pred_mv_y, i16* %pred_mv_y.addr, align 2
  store i16* %mv_x, i16** %mv_x.addr, align 8
  store i16* %mv_y, i16** %mv_y.addr, align 8
  store i32 %search_pos2, i32* %search_pos2.addr, align 4
  store i32 %search_pos4, i32* %search_pos4.addr, align 4
  store i32 %min_mcost, i32* %min_mcost.addr, align 4
  store double %lambda, double* %lambda.addr, align 8
  store i32 %useABT, i32* %useABT.addr, align 4
  %0 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %MbaffFrameFlag = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %0, i32 0, i32 90
  %1 = load i32, i32* %MbaffFrameFlag, align 8
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %mb_data = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %2, i32 0, i32 51
  %3 = load %struct.macroblock*, %struct.macroblock** %mb_data, align 8
  %4 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %current_mb_nr = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %4, i32 0, i32 3
  %5 = load i32, i32* %current_mb_nr, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 %idxprom
  %mb_field = getelementptr inbounds %struct.macroblock, %struct.macroblock* %arrayidx, i32 0, i32 22
  %6 = load i32, i32* %mb_field, align 4
  %tobool1 = icmp ne i32 %6, 0
  br i1 %tobool1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %7 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %current_mb_nr2 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %7, i32 0, i32 3
  %8 = load i32, i32* %current_mb_nr2, align 4
  %rem = srem i32 %8, 2
  %tobool3 = icmp ne i32 %rem, 0
  %9 = zext i1 %tobool3 to i64
  %cond = select i1 %tobool3, i32 4, i32 2
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond4 = phi i32 [ %cond, %cond.true ], [ 0, %cond.false ]
  store i32 %cond4, i32* %list_offset, align 4
  %10 = load i32, i32* %list.addr, align 4
  %11 = load i32, i32* %list_offset, align 4
  %add = add nsw i32 %10, %11
  %idxprom5 = sext i32 %add to i64
  %arrayidx6 = getelementptr inbounds [6 x %struct.storable_picture**], [6 x %struct.storable_picture**]* @listX, i64 0, i64 %idxprom5
  %12 = load %struct.storable_picture**, %struct.storable_picture*** %arrayidx6, align 8
  %13 = load i16, i16* %ref.addr, align 2
  %idxprom7 = sext i16 %13 to i64
  %arrayidx8 = getelementptr inbounds %struct.storable_picture*, %struct.storable_picture** %12, i64 %idxprom7
  %14 = load %struct.storable_picture*, %struct.storable_picture** %arrayidx8, align 8
  store %struct.storable_picture* %14, %struct.storable_picture** %ref_picture, align 8
  %15 = load double, double* %lambda.addr, align 8
  %mul = fmul double 6.553600e+04, %15
  %add9 = fadd double %mul, 5.000000e-01
  %conv = fptosi double %add9 to i32
  store i32 %conv, i32* %lambda_factor, align 4
  store i32 0, i32* %mv_shift, align 4
  %16 = load %struct.InputParameters*, %struct.InputParameters** @input, align 8
  %blc_size = getelementptr inbounds %struct.InputParameters, %struct.InputParameters* %16, i32 0, i32 20
  %17 = load i32, i32* %blocktype.addr, align 4
  %idxprom10 = sext i32 %17 to i64
  %arrayidx11 = getelementptr inbounds [8 x [2 x i32]], [8 x [2 x i32]]* %blc_size, i64 0, i64 %idxprom10
  %arrayidx12 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx11, i64 0, i64 0
  %18 = load i32, i32* %arrayidx12, align 8
  store i32 %18, i32* %blocksize_x, align 4
  %19 = load %struct.InputParameters*, %struct.InputParameters** @input, align 8
  %blc_size13 = getelementptr inbounds %struct.InputParameters, %struct.InputParameters* %19, i32 0, i32 20
  %20 = load i32, i32* %blocktype.addr, align 4
  %idxprom14 = sext i32 %20 to i64
  %arrayidx15 = getelementptr inbounds [8 x [2 x i32]], [8 x [2 x i32]]* %blc_size13, i64 0, i64 %idxprom14
  %arrayidx16 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx15, i64 0, i64 1
  %21 = load i32, i32* %arrayidx16, align 4
  store i32 %21, i32* %blocksize_y, align 4
  %22 = load i32, i32* %pic_pix_x.addr, align 4
  %shl = shl i32 %22, 2
  store i32 %shl, i32* %pic4_pix_x, align 4
  %23 = load i32, i32* %pic_pix_y.addr, align 4
  %shl17 = shl i32 %23, 2
  store i32 %shl17, i32* %pic4_pix_y, align 4
  %24 = load %struct.storable_picture*, %struct.storable_picture** %ref_picture, align 8
  %size_x = getelementptr inbounds %struct.storable_picture, %struct.storable_picture* %24, i32 0, i32 18
  %25 = load i32, i32* %size_x, align 8
  %26 = load i32, i32* %blocksize_x, align 4
  %sub = sub nsw i32 %25, %26
  %add18 = add nsw i32 %sub, 1
  %shl19 = shl i32 %add18, 2
  store i32 %shl19, i32* %max_pos_x4, align 4
  %27 = load %struct.storable_picture*, %struct.storable_picture** %ref_picture, align 8
  %size_y = getelementptr inbounds %struct.storable_picture, %struct.storable_picture* %27, i32 0, i32 19
  %28 = load i32, i32* %size_y, align 4
  %29 = load i32, i32* %blocksize_y, align 4
  %sub20 = sub nsw i32 %28, %29
  %add21 = add nsw i32 %sub20, 1
  %shl22 = shl i32 %add21, 2
  store i32 %shl22, i32* %max_pos_y4, align 4
  store i32 0, i32* %currmv_x, align 4
  store i32 0, i32* %currmv_y, align 4
  %30 = load i16*, i16** %mv_x.addr, align 8
  %31 = load i16, i16* %30, align 2
  %conv23 = sext i16 %31 to i32
  %shl24 = shl i32 %conv23, 2
  %conv25 = trunc i32 %shl24 to i16
  store i16 %conv25, i16* %30, align 2
  %32 = load i16*, i16** %mv_y.addr, align 8
  %33 = load i16, i16* %32, align 2
  %conv26 = sext i16 %33 to i32
  %shl27 = shl i32 %conv26, 2
  %conv28 = trunc i32 %shl27 to i16
  store i16 %conv28, i16* %32, align 2
  %34 = load i32, i32* %pic4_pix_x, align 4
  %35 = load i16*, i16** %mv_x.addr, align 8
  %36 = load i16, i16* %35, align 2
  %conv29 = sext i16 %36 to i32
  %add30 = add nsw i32 %34, %conv29
  %cmp = icmp sgt i32 %add30, 1
  br i1 %cmp, label %land.lhs.true32, label %if.else

land.lhs.true32:                                  ; preds = %cond.end
  %37 = load i32, i32* %pic4_pix_x, align 4
  %38 = load i16*, i16** %mv_x.addr, align 8
  %39 = load i16, i16* %38, align 2
  %conv33 = sext i16 %39 to i32
  %add34 = add nsw i32 %37, %conv33
  %40 = load i32, i32* %max_pos_x4, align 4
  %sub35 = sub nsw i32 %40, 2
  %cmp36 = icmp slt i32 %add34, %sub35
  br i1 %cmp36, label %land.lhs.true38, label %if.else

land.lhs.true38:                                  ; preds = %land.lhs.true32
  %41 = load i32, i32* %pic4_pix_y, align 4
  %42 = load i16*, i16** %mv_y.addr, align 8
  %43 = load i16, i16* %42, align 2
  %conv39 = sext i16 %43 to i32
  %add40 = add nsw i32 %41, %conv39
  %cmp41 = icmp sgt i32 %add40, 1
  br i1 %cmp41, label %land.lhs.true43, label %if.else

land.lhs.true43:                                  ; preds = %land.lhs.true38
  %44 = load i32, i32* %pic4_pix_y, align 4
  %45 = load i16*, i16** %mv_y.addr, align 8
  %46 = load i16, i16* %45, align 2
  %conv44 = sext i16 %46 to i32
  %add45 = add nsw i32 %44, %conv44
  %47 = load i32, i32* %max_pos_y4, align 4
  %sub46 = sub nsw i32 %47, 2
  %cmp47 = icmp slt i32 %add45, %sub46
  br i1 %cmp47, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true43
  store i16 (i16**, i32, i32, i32, i32)* @FastPelY_14, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  br label %if.end

if.else:                                          ; preds = %land.lhs.true43, %land.lhs.true38, %land.lhs.true32, %cond.end
  store i16 (i16**, i32, i32, i32, i32)* @UMVPelY_14, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  store i32 3, i32* %search_range_dynamic, align 4
  %48 = load i16, i16* %pred_mv_x.addr, align 2
  %conv49 = sext i16 %48 to i32
  %49 = load i16*, i16** %mv_x.addr, align 8
  %50 = load i16, i16* %49, align 2
  %conv50 = sext i16 %50 to i32
  %sub51 = sub nsw i32 %conv49, %conv50
  %rem52 = srem i32 %sub51, 4
  store i32 %rem52, i32* %pred_frac_mv_x, align 4
  %51 = load i16, i16* %pred_mv_y.addr, align 2
  %conv53 = sext i16 %51 to i32
  %52 = load i16*, i16** %mv_y.addr, align 8
  %53 = load i16, i16* %52, align 2
  %conv54 = sext i16 %53 to i32
  %sub55 = sub nsw i32 %conv53, %conv54
  %rem56 = srem i32 %sub55, 4
  store i32 %rem56, i32* %pred_frac_mv_y, align 4
  %54 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @pred_MV_uplayer, i64 0, i64 0), align 4
  %55 = load i16*, i16** %mv_x.addr, align 8
  %56 = load i16, i16* %55, align 2
  %conv57 = sext i16 %56 to i32
  %sub58 = sub nsw i32 %54, %conv57
  %rem59 = srem i32 %sub58, 4
  store i32 %rem59, i32* %pred_frac_up_mv_x, align 4
  %57 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @pred_MV_uplayer, i64 0, i64 1), align 4
  %58 = load i16*, i16** %mv_y.addr, align 8
  %59 = load i16, i16* %58, align 2
  %conv60 = sext i16 %59 to i32
  %sub61 = sub nsw i32 %57, %conv60
  %rem62 = srem i32 %sub61, 4
  store i32 %rem62, i32* %pred_frac_up_mv_y, align 4
  %60 = load i8**, i8*** @SearchState, align 8
  %arrayidx63 = getelementptr inbounds i8*, i8** %60, i64 0
  %61 = load i8*, i8** %arrayidx63, align 8
  %62 = load i32, i32* %search_range_dynamic, align 4
  %mul64 = mul nsw i32 2, %62
  %add65 = add nsw i32 %mul64, 1
  %63 = load i32, i32* %search_range_dynamic, align 4
  %mul66 = mul nsw i32 2, %63
  %add67 = add nsw i32 %mul66, 1
  %mul68 = mul nsw i32 %add65, %add67
  %conv69 = sext i32 %mul68 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %61, i8 0, i64 %conv69, i1 false)
  %64 = load %struct.InputParameters*, %struct.InputParameters** @input, align 8
  %hadamard = getelementptr inbounds %struct.InputParameters, %struct.InputParameters* %64, i32 0, i32 6
  %65 = load i32, i32* %hadamard, align 8
  %tobool70 = icmp ne i32 %65, 0
  br i1 %tobool70, label %if.then71, label %if.else94

if.then71:                                        ; preds = %if.end
  %66 = load i16*, i16** %mv_x.addr, align 8
  %67 = load i16, i16* %66, align 2
  %conv72 = sext i16 %67 to i32
  store i32 %conv72, i32* %cand_mv_x, align 4
  %68 = load i16*, i16** %mv_y.addr, align 8
  %69 = load i16, i16* %68, align 2
  %conv73 = sext i16 %69 to i32
  store i32 %conv73, i32* %cand_mv_y, align 4
  %70 = load i32, i32* %lambda_factor, align 4
  %71 = load i32*, i32** @mvbits, align 8
  %72 = load i32, i32* %cand_mv_x, align 4
  %73 = load i32, i32* %mv_shift, align 4
  %shl74 = shl i32 %72, %73
  %74 = load i16, i16* %pred_mv_x.addr, align 2
  %conv75 = sext i16 %74 to i32
  %sub76 = sub nsw i32 %shl74, %conv75
  %idxprom77 = sext i32 %sub76 to i64
  %arrayidx78 = getelementptr inbounds i32, i32* %71, i64 %idxprom77
  %75 = load i32, i32* %arrayidx78, align 4
  %76 = load i32*, i32** @mvbits, align 8
  %77 = load i32, i32* %cand_mv_y, align 4
  %78 = load i32, i32* %mv_shift, align 4
  %shl79 = shl i32 %77, %78
  %79 = load i16, i16* %pred_mv_y.addr, align 2
  %conv80 = sext i16 %79 to i32
  %sub81 = sub nsw i32 %shl79, %conv80
  %idxprom82 = sext i32 %sub81 to i64
  %arrayidx83 = getelementptr inbounds i32, i32* %76, i64 %idxprom82
  %80 = load i32, i32* %arrayidx83, align 4
  %add84 = add nsw i32 %75, %80
  %mul85 = mul nsw i32 %70, %add84
  %shr = ashr i32 %mul85, 16
  store i32 %shr, i32* %mv_cost, align 4
  %81 = load i32, i32* %pic_pix_x.addr, align 4
  %82 = load i32, i32* %pic_pix_y.addr, align 4
  %83 = load i32, i32* %blocksize_x, align 4
  %84 = load i32, i32* %blocksize_y, align 4
  %85 = load i32, i32* %cand_mv_x, align 4
  %86 = load i32, i32* %cand_mv_y, align 4
  %87 = load %struct.storable_picture*, %struct.storable_picture** %ref_picture, align 8
  %88 = load i16**, i16*** %orig_pic.addr, align 8
  %89 = load i32, i32* %mv_cost, align 4
  %90 = load i32, i32* %min_mcost.addr, align 4
  %91 = load i32, i32* %useABT.addr, align 4
  %call = call i32 @AddUpSADQuarter(i32 %81, i32 %82, i32 %83, i32 %84, i32 %85, i32 %86, %struct.storable_picture* %87, i16** %88, i32 %89, i32 %90, i32 %91)
  store i32 %call, i32* %mcost, align 4
  %92 = load i8**, i8*** @SearchState, align 8
  %93 = load i32, i32* %search_range_dynamic, align 4
  %idxprom86 = sext i32 %93 to i64
  %arrayidx87 = getelementptr inbounds i8*, i8** %92, i64 %idxprom86
  %94 = load i8*, i8** %arrayidx87, align 8
  %95 = load i32, i32* %search_range_dynamic, align 4
  %idxprom88 = sext i32 %95 to i64
  %arrayidx89 = getelementptr inbounds i8, i8* %94, i64 %idxprom88
  store i8 1, i8* %arrayidx89, align 1
  %96 = load i32, i32* %mcost, align 4
  %97 = load i32, i32* %min_mcost.addr, align 4
  %cmp90 = icmp slt i32 %96, %97
  br i1 %cmp90, label %if.then92, label %if.end93

if.then92:                                        ; preds = %if.then71
  %98 = load i32, i32* %mcost, align 4
  store i32 %98, i32* %min_mcost.addr, align 4
  %99 = load i32, i32* %cand_mv_x, align 4
  store i32 %99, i32* %currmv_x, align 4
  %100 = load i32, i32* %cand_mv_y, align 4
  store i32 %100, i32* %currmv_y, align 4
  br label %if.end93

if.end93:                                         ; preds = %if.then92, %if.then71
  br label %if.end101

if.else94:                                        ; preds = %if.end
  %101 = load i8**, i8*** @SearchState, align 8
  %102 = load i32, i32* %search_range_dynamic, align 4
  %idxprom95 = sext i32 %102 to i64
  %arrayidx96 = getelementptr inbounds i8*, i8** %101, i64 %idxprom95
  %103 = load i8*, i8** %arrayidx96, align 8
  %104 = load i32, i32* %search_range_dynamic, align 4
  %idxprom97 = sext i32 %104 to i64
  %arrayidx98 = getelementptr inbounds i8, i8* %103, i64 %idxprom97
  store i8 1, i8* %arrayidx98, align 1
  %105 = load i16*, i16** %mv_x.addr, align 8
  %106 = load i16, i16* %105, align 2
  %conv99 = sext i16 %106 to i32
  store i32 %conv99, i32* %currmv_x, align 4
  %107 = load i16*, i16** %mv_y.addr, align 8
  %108 = load i16, i16* %107, align 2
  %conv100 = sext i16 %108 to i32
  store i32 %conv100, i32* %currmv_y, align 4
  br label %if.end101

if.end101:                                        ; preds = %if.else94, %if.end93
  %109 = load i32, i32* %pred_frac_mv_x, align 4
  %cmp102 = icmp ne i32 %109, 0
  br i1 %cmp102, label %if.then106, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end101
  %110 = load i32, i32* %pred_frac_mv_y, align 4
  %cmp104 = icmp ne i32 %110, 0
  br i1 %cmp104, label %if.then106, label %if.end139

if.then106:                                       ; preds = %lor.lhs.false, %if.end101
  %111 = load i16*, i16** %mv_x.addr, align 8
  %112 = load i16, i16* %111, align 2
  %conv107 = sext i16 %112 to i32
  %113 = load i32, i32* %pred_frac_mv_x, align 4
  %add108 = add nsw i32 %conv107, %113
  store i32 %add108, i32* %cand_mv_x, align 4
  %114 = load i16*, i16** %mv_y.addr, align 8
  %115 = load i16, i16* %114, align 2
  %conv109 = sext i16 %115 to i32
  %116 = load i32, i32* %pred_frac_mv_y, align 4
  %add110 = add nsw i32 %conv109, %116
  store i32 %add110, i32* %cand_mv_y, align 4
  %117 = load i32, i32* %lambda_factor, align 4
  %118 = load i32*, i32** @mvbits, align 8
  %119 = load i32, i32* %cand_mv_x, align 4
  %120 = load i32, i32* %mv_shift, align 4
  %shl111 = shl i32 %119, %120
  %121 = load i16, i16* %pred_mv_x.addr, align 2
  %conv112 = sext i16 %121 to i32
  %sub113 = sub nsw i32 %shl111, %conv112
  %idxprom114 = sext i32 %sub113 to i64
  %arrayidx115 = getelementptr inbounds i32, i32* %118, i64 %idxprom114
  %122 = load i32, i32* %arrayidx115, align 4
  %123 = load i32*, i32** @mvbits, align 8
  %124 = load i32, i32* %cand_mv_y, align 4
  %125 = load i32, i32* %mv_shift, align 4
  %shl116 = shl i32 %124, %125
  %126 = load i16, i16* %pred_mv_y.addr, align 2
  %conv117 = sext i16 %126 to i32
  %sub118 = sub nsw i32 %shl116, %conv117
  %idxprom119 = sext i32 %sub118 to i64
  %arrayidx120 = getelementptr inbounds i32, i32* %123, i64 %idxprom119
  %127 = load i32, i32* %arrayidx120, align 4
  %add121 = add nsw i32 %122, %127
  %mul122 = mul nsw i32 %117, %add121
  %shr123 = ashr i32 %mul122, 16
  store i32 %shr123, i32* %mv_cost, align 4
  %128 = load i32, i32* %pic_pix_x.addr, align 4
  %129 = load i32, i32* %pic_pix_y.addr, align 4
  %130 = load i32, i32* %blocksize_x, align 4
  %131 = load i32, i32* %blocksize_y, align 4
  %132 = load i32, i32* %cand_mv_x, align 4
  %133 = load i32, i32* %cand_mv_y, align 4
  %134 = load %struct.storable_picture*, %struct.storable_picture** %ref_picture, align 8
  %135 = load i16**, i16*** %orig_pic.addr, align 8
  %136 = load i32, i32* %mv_cost, align 4
  %137 = load i32, i32* %min_mcost.addr, align 4
  %138 = load i32, i32* %useABT.addr, align 4
  %call124 = call i32 @AddUpSADQuarter(i32 %128, i32 %129, i32 %130, i32 %131, i32 %132, i32 %133, %struct.storable_picture* %134, i16** %135, i32 %136, i32 %137, i32 %138)
  store i32 %call124, i32* %mcost, align 4
  %139 = load i8**, i8*** @SearchState, align 8
  %140 = load i32, i32* %cand_mv_y, align 4
  %141 = load i16*, i16** %mv_y.addr, align 8
  %142 = load i16, i16* %141, align 2
  %conv125 = sext i16 %142 to i32
  %sub126 = sub nsw i32 %140, %conv125
  %143 = load i32, i32* %search_range_dynamic, align 4
  %add127 = add nsw i32 %sub126, %143
  %idxprom128 = sext i32 %add127 to i64
  %arrayidx129 = getelementptr inbounds i8*, i8** %139, i64 %idxprom128
  %144 = load i8*, i8** %arrayidx129, align 8
  %145 = load i32, i32* %cand_mv_x, align 4
  %146 = load i16*, i16** %mv_x.addr, align 8
  %147 = load i16, i16* %146, align 2
  %conv130 = sext i16 %147 to i32
  %sub131 = sub nsw i32 %145, %conv130
  %148 = load i32, i32* %search_range_dynamic, align 4
  %add132 = add nsw i32 %sub131, %148
  %idxprom133 = sext i32 %add132 to i64
  %arrayidx134 = getelementptr inbounds i8, i8* %144, i64 %idxprom133
  store i8 1, i8* %arrayidx134, align 1
  %149 = load i32, i32* %mcost, align 4
  %150 = load i32, i32* %min_mcost.addr, align 4
  %cmp135 = icmp slt i32 %149, %150
  br i1 %cmp135, label %if.then137, label %if.end138

if.then137:                                       ; preds = %if.then106
  %151 = load i32, i32* %mcost, align 4
  store i32 %151, i32* %min_mcost.addr, align 4
  %152 = load i32, i32* %cand_mv_x, align 4
  store i32 %152, i32* %currmv_x, align 4
  %153 = load i32, i32* %cand_mv_y, align 4
  store i32 %153, i32* %currmv_y, align 4
  br label %if.end138

if.end138:                                        ; preds = %if.then137, %if.then106
  br label %if.end139

if.end139:                                        ; preds = %if.end138, %lor.lhs.false
  %154 = load i32, i32* %currmv_x, align 4
  store i32 %154, i32* %iXMinNow, align 4
  %155 = load i32, i32* %currmv_y, align 4
  store i32 %155, i32* %iYMinNow, align 4
  %156 = load i32, i32* %search_range_dynamic, align 4
  %mul140 = mul nsw i32 2, %156
  %add141 = add nsw i32 %mul140, 1
  store i32 %add141, i32* %iCurrSearchRange, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc211, %if.end139
  %157 = load i32, i32* %i, align 4
  %158 = load i32, i32* %iCurrSearchRange, align 4
  %cmp142 = icmp slt i32 %157, %158
  br i1 %cmp142, label %for.body, label %for.end213

for.body:                                         ; preds = %for.cond
  store i32 1, i32* %abort_search, align 4
  store i32 65536, i32* %iSADLayer, align 4
  store i32 0, i32* %m, align 4
  br label %for.cond144

for.cond144:                                      ; preds = %for.inc, %for.body
  %159 = load i32, i32* %m, align 4
  %cmp145 = icmp slt i32 %159, 4
  br i1 %cmp145, label %for.body147, label %for.end

for.body147:                                      ; preds = %for.cond144
  %160 = load i32, i32* %iXMinNow, align 4
  %161 = load i32, i32* %m, align 4
  %idxprom148 = sext i32 %161 to i64
  %arrayidx149 = getelementptr inbounds [4 x i32], [4 x i32]* @FastSubPelBlockMotionSearch.Diamond_x, i64 0, i64 %idxprom148
  %162 = load i32, i32* %arrayidx149, align 4
  %add150 = add nsw i32 %160, %162
  store i32 %add150, i32* %cand_mv_x, align 4
  %163 = load i32, i32* %iYMinNow, align 4
  %164 = load i32, i32* %m, align 4
  %idxprom151 = sext i32 %164 to i64
  %arrayidx152 = getelementptr inbounds [4 x i32], [4 x i32]* @FastSubPelBlockMotionSearch.Diamond_y, i64 0, i64 %idxprom151
  %165 = load i32, i32* %arrayidx152, align 4
  %add153 = add nsw i32 %163, %165
  store i32 %add153, i32* %cand_mv_y, align 4
  %166 = load i32, i32* %cand_mv_x, align 4
  %167 = load i16*, i16** %mv_x.addr, align 8
  %168 = load i16, i16* %167, align 2
  %conv154 = sext i16 %168 to i32
  %sub155 = sub nsw i32 %166, %conv154
  %call156 = call i32 @abs(i32 %sub155) #6
  %169 = load i32, i32* %search_range_dynamic, align 4
  %cmp157 = icmp sle i32 %call156, %169
  br i1 %cmp157, label %land.lhs.true159, label %if.end207

land.lhs.true159:                                 ; preds = %for.body147
  %170 = load i32, i32* %cand_mv_y, align 4
  %171 = load i16*, i16** %mv_y.addr, align 8
  %172 = load i16, i16* %171, align 2
  %conv160 = sext i16 %172 to i32
  %sub161 = sub nsw i32 %170, %conv160
  %call162 = call i32 @abs(i32 %sub161) #6
  %173 = load i32, i32* %search_range_dynamic, align 4
  %cmp163 = icmp sle i32 %call162, %173
  br i1 %cmp163, label %if.then165, label %if.end207

if.then165:                                       ; preds = %land.lhs.true159
  %174 = load i8**, i8*** @SearchState, align 8
  %175 = load i32, i32* %cand_mv_y, align 4
  %176 = load i16*, i16** %mv_y.addr, align 8
  %177 = load i16, i16* %176, align 2
  %conv166 = sext i16 %177 to i32
  %sub167 = sub nsw i32 %175, %conv166
  %178 = load i32, i32* %search_range_dynamic, align 4
  %add168 = add nsw i32 %sub167, %178
  %idxprom169 = sext i32 %add168 to i64
  %arrayidx170 = getelementptr inbounds i8*, i8** %174, i64 %idxprom169
  %179 = load i8*, i8** %arrayidx170, align 8
  %180 = load i32, i32* %cand_mv_x, align 4
  %181 = load i16*, i16** %mv_x.addr, align 8
  %182 = load i16, i16* %181, align 2
  %conv171 = sext i16 %182 to i32
  %sub172 = sub nsw i32 %180, %conv171
  %183 = load i32, i32* %search_range_dynamic, align 4
  %add173 = add nsw i32 %sub172, %183
  %idxprom174 = sext i32 %add173 to i64
  %arrayidx175 = getelementptr inbounds i8, i8* %179, i64 %idxprom174
  %184 = load i8, i8* %arrayidx175, align 1
  %tobool176 = icmp ne i8 %184, 0
  br i1 %tobool176, label %if.end206, label %if.then177

if.then177:                                       ; preds = %if.then165
  %185 = load i32, i32* %lambda_factor, align 4
  %186 = load i32*, i32** @mvbits, align 8
  %187 = load i32, i32* %cand_mv_x, align 4
  %188 = load i32, i32* %mv_shift, align 4
  %shl178 = shl i32 %187, %188
  %189 = load i16, i16* %pred_mv_x.addr, align 2
  %conv179 = sext i16 %189 to i32
  %sub180 = sub nsw i32 %shl178, %conv179
  %idxprom181 = sext i32 %sub180 to i64
  %arrayidx182 = getelementptr inbounds i32, i32* %186, i64 %idxprom181
  %190 = load i32, i32* %arrayidx182, align 4
  %191 = load i32*, i32** @mvbits, align 8
  %192 = load i32, i32* %cand_mv_y, align 4
  %193 = load i32, i32* %mv_shift, align 4
  %shl183 = shl i32 %192, %193
  %194 = load i16, i16* %pred_mv_y.addr, align 2
  %conv184 = sext i16 %194 to i32
  %sub185 = sub nsw i32 %shl183, %conv184
  %idxprom186 = sext i32 %sub185 to i64
  %arrayidx187 = getelementptr inbounds i32, i32* %191, i64 %idxprom186
  %195 = load i32, i32* %arrayidx187, align 4
  %add188 = add nsw i32 %190, %195
  %mul189 = mul nsw i32 %185, %add188
  %shr190 = ashr i32 %mul189, 16
  store i32 %shr190, i32* %mv_cost, align 4
  %196 = load i32, i32* %pic_pix_x.addr, align 4
  %197 = load i32, i32* %pic_pix_y.addr, align 4
  %198 = load i32, i32* %blocksize_x, align 4
  %199 = load i32, i32* %blocksize_y, align 4
  %200 = load i32, i32* %cand_mv_x, align 4
  %201 = load i32, i32* %cand_mv_y, align 4
  %202 = load %struct.storable_picture*, %struct.storable_picture** %ref_picture, align 8
  %203 = load i16**, i16*** %orig_pic.addr, align 8
  %204 = load i32, i32* %mv_cost, align 4
  %205 = load i32, i32* %min_mcost.addr, align 4
  %206 = load i32, i32* %useABT.addr, align 4
  %call191 = call i32 @AddUpSADQuarter(i32 %196, i32 %197, i32 %198, i32 %199, i32 %200, i32 %201, %struct.storable_picture* %202, i16** %203, i32 %204, i32 %205, i32 %206)
  store i32 %call191, i32* %mcost, align 4
  %207 = load i8**, i8*** @SearchState, align 8
  %208 = load i32, i32* %cand_mv_y, align 4
  %209 = load i16*, i16** %mv_y.addr, align 8
  %210 = load i16, i16* %209, align 2
  %conv192 = sext i16 %210 to i32
  %sub193 = sub nsw i32 %208, %conv192
  %211 = load i32, i32* %search_range_dynamic, align 4
  %add194 = add nsw i32 %sub193, %211
  %idxprom195 = sext i32 %add194 to i64
  %arrayidx196 = getelementptr inbounds i8*, i8** %207, i64 %idxprom195
  %212 = load i8*, i8** %arrayidx196, align 8
  %213 = load i32, i32* %cand_mv_x, align 4
  %214 = load i16*, i16** %mv_x.addr, align 8
  %215 = load i16, i16* %214, align 2
  %conv197 = sext i16 %215 to i32
  %sub198 = sub nsw i32 %213, %conv197
  %216 = load i32, i32* %search_range_dynamic, align 4
  %add199 = add nsw i32 %sub198, %216
  %idxprom200 = sext i32 %add199 to i64
  %arrayidx201 = getelementptr inbounds i8, i8* %212, i64 %idxprom200
  store i8 1, i8* %arrayidx201, align 1
  %217 = load i32, i32* %mcost, align 4
  %218 = load i32, i32* %min_mcost.addr, align 4
  %cmp202 = icmp slt i32 %217, %218
  br i1 %cmp202, label %if.then204, label %if.end205

if.then204:                                       ; preds = %if.then177
  %219 = load i32, i32* %mcost, align 4
  store i32 %219, i32* %min_mcost.addr, align 4
  %220 = load i32, i32* %cand_mv_x, align 4
  store i32 %220, i32* %currmv_x, align 4
  %221 = load i32, i32* %cand_mv_y, align 4
  store i32 %221, i32* %currmv_y, align 4
  store i32 0, i32* %abort_search, align 4
  br label %if.end205

if.end205:                                        ; preds = %if.then204, %if.then177
  br label %if.end206

if.end206:                                        ; preds = %if.end205, %if.then165
  br label %if.end207

if.end207:                                        ; preds = %if.end206, %land.lhs.true159, %for.body147
  br label %for.inc

for.inc:                                          ; preds = %if.end207
  %222 = load i32, i32* %m, align 4
  %inc = add nsw i32 %222, 1
  store i32 %inc, i32* %m, align 4
  br label %for.cond144

for.end:                                          ; preds = %for.cond144
  %223 = load i32, i32* %currmv_x, align 4
  store i32 %223, i32* %iXMinNow, align 4
  %224 = load i32, i32* %currmv_y, align 4
  store i32 %224, i32* %iYMinNow, align 4
  %225 = load i32, i32* %abort_search, align 4
  %tobool208 = icmp ne i32 %225, 0
  br i1 %tobool208, label %if.then209, label %if.end210

if.then209:                                       ; preds = %for.end
  br label %for.end213

if.end210:                                        ; preds = %for.end
  br label %for.inc211

for.inc211:                                       ; preds = %if.end210
  %226 = load i32, i32* %i, align 4
  %inc212 = add nsw i32 %226, 1
  store i32 %inc212, i32* %i, align 4
  br label %for.cond

for.end213:                                       ; preds = %if.then209, %for.cond
  %227 = load i32, i32* %currmv_x, align 4
  %conv214 = trunc i32 %227 to i16
  %228 = load i16*, i16** %mv_x.addr, align 8
  store i16 %conv214, i16* %228, align 2
  %229 = load i32, i32* %currmv_y, align 4
  %conv215 = trunc i32 %229 to i16
  %230 = load i16*, i16** %mv_y.addr, align 8
  store i16 %conv215, i16* %230, align 2
  %231 = load i32, i32* %min_mcost.addr, align 4
  %232 = load i32, i32* %canary
  %233 = icmp eq i32 %232, 286547050
  br i1 %233, label %234, label %func_exit

234:                                              ; preds = %for.end213, %func_exit
  ret i32 %231

func_exit:                                        ; preds = %for.end213
  call void @detect_breach()
  br label %234
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @DefineThresholdMB.55() #0 {
entry:
  %gb_q_bits = alloca i32, align 4
  %gb_qp_per = alloca i32, align 4
  %canary = alloca i32
  store i32 2098586535, i32* %canary
  %gb_qp_const = alloca i32, align 4
  %Thresh4x4 = alloca i32, align 4
  %gb_qp_rem = alloca i32, align 4
  %0 = load %struct.InputParameters*, %struct.InputParameters** @input, align 8
  %qpN = getelementptr inbounds %struct.InputParameters, %struct.InputParameters* %0, i32 0, i32 4
  %1 = load i32, i32* %qpN, align 8
  %sub = sub nsw i32 %1, 0
  %div = sdiv i32 %sub, 6
  store i32 %div, i32* %gb_qp_per, align 4
  %2 = load %struct.InputParameters*, %struct.InputParameters** @input, align 8
  %qpN1 = getelementptr inbounds %struct.InputParameters, %struct.InputParameters* %2, i32 0, i32 4
  %3 = load i32, i32* %qpN1, align 8
  %sub2 = sub nsw i32 %3, 0
  %rem = srem i32 %sub2, 6
  store i32 %rem, i32* %gb_qp_rem, align 4
  %4 = load i32, i32* %gb_qp_per, align 4
  %add = add nsw i32 15, %4
  store i32 %add, i32* %gb_q_bits, align 4
  %5 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %type = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %5, i32 0, i32 6
  %6 = load i32, i32* %type, align 8
  %cmp = icmp eq i32 %6, 2
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %7 = load i32, i32* %gb_q_bits, align 4
  %shl = shl i32 1, %7
  %div3 = sdiv i32 %shl, 3
  store i32 %div3, i32* %gb_qp_const, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %8 = load i32, i32* %gb_q_bits, align 4
  %shl4 = shl i32 1, %8
  %div5 = sdiv i32 %shl4, 6
  store i32 %div5, i32* %gb_qp_const, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %gb_q_bits, align 4
  %shl6 = shl i32 1, %9
  %10 = load i32, i32* %gb_qp_const, align 4
  %sub7 = sub nsw i32 %shl6, %10
  %11 = load i32, i32* %gb_qp_rem, align 4
  %idxprom = sext i32 %11 to i64
  %arrayidx = getelementptr inbounds [6 x [4 x [4 x i32]]], [6 x [4 x [4 x i32]]]* @quant_coef, i64 0, i64 %idxprom
  %arrayidx8 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %arrayidx, i64 0, i64 0
  %arrayidx9 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx8, i64 0, i64 0
  %12 = load i32, i32* %arrayidx9, align 16
  %div10 = sdiv i32 %sub7, %12
  store i32 %div10, i32* %Thresh4x4, align 4
  %13 = load i32, i32* %Thresh4x4, align 4
  %conv = sitofp i32 %13 to float
  %div11 = fdiv float %conv, 0x403670A3E0000000
  store float %div11, float* @Quantize_step, align 4
  %14 = load float, float* @Quantize_step, align 4
  %mul = fmul float 2.560000e+02, %14
  store float %mul, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 7), align 4
  %15 = load float, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 7), align 4
  %mul12 = fmul float %15, 4.000000e+00
  store float %mul12, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 6), align 8
  %16 = load float, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 7), align 4
  %mul13 = fmul float %16, 4.000000e+00
  store float %mul13, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 5), align 4
  %17 = load float, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 5), align 4
  %mul14 = fmul float %17, 4.000000e+00
  store float %mul14, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 4), align 16
  %18 = load float, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 4), align 16
  %mul15 = fmul float %18, 4.000000e+00
  store float %mul15, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 3), align 4
  %19 = load float, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 4), align 16
  %mul16 = fmul float %19, 4.000000e+00
  store float %mul16, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 2), align 8
  %20 = load float, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 2), align 8
  %mul17 = fmul float %20, 4.000000e+00
  store float %mul17, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 1), align 4
  %21 = load i32, i32* %canary
  %22 = icmp eq i32 %21, 2098586535
  br i1 %22, label %23, label %func_exit

23:                                               ; preds = %if.end, %func_exit
  ret void

func_exit:                                        ; preds = %if.end
  call void @detect_breach()
  br label %23
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @FastIntegerPelBlockMotionSearch.56(i16** %orig_pic, i16 signext %ref, i32 %list, i32 %pic_pix_x, i32 %pic_pix_y, i32 %blocktype, i16 signext %pred_mv_x, i16 signext %pred_mv_y, i16* %mv_x, i16* %mv_y, i32 %search_range, i32 %min_mcost, double %lambda) #0 {
entry:
  %min_mcost.addr = alloca i32, align 4
  %pred_x = alloca i32, align 4
  %lambda.addr = alloca double, align 8
  %get_ref_line = alloca i16* (i32, i16*, i32, i32, i32, i32)*, align 8
  %mv_x.addr = alloca i16*, align 8
  %i = alloca i32, align 4
  %blocksize_y = alloca i32, align 4
  %list_offset = alloca i32, align 4
  %N_Bframe = alloca i32, align 4
  %blocktype.addr = alloca i32, align 4
  %search_step = alloca i32, align 4
  %pred_mv_x.addr = alloca i16, align 2
  %cand_y = alloca i32, align 4
  %pic_pix_y.addr = alloca i32, align 4
  %blocksize_x = alloca i32, align 4
  %ref_pic = alloca i16*, align 8
  %betaSec = alloca float, align 4
  %height = alloca i32, align 4
  %pred_mv_y.addr = alloca i16, align 2
  %list.addr = alloca i32, align 4
  %mcost = alloca i32, align 4
  %orig_pic.addr = alloca i16**, align 8
  %canary = alloca i32
  store i32 914577538, i32* %canary
  %betaThird = alloca float, align 4
  %iYMinNow = alloca i32, align 4
  %search_range.addr = alloca i32, align 4
  %pic_pix_x.addr = alloca i32, align 4
  %iAbort = alloca i32, align 4
  %mv_y.addr = alloca i16*, align 8
  %iXMinNow = alloca i32, align 4
  %best_x = alloca i32, align 4
  %cand_x = alloca i32, align 4
  %pos = alloca i32, align 4
  %best_y = alloca i32, align 4
  %blocksize_x4 = alloca i32, align 4
  %iSADLayer = alloca i32, align 4
  %lambda_factor = alloca i32, align 4
  %center_y = alloca i32, align 4
  %ref.addr = alloca i16, align 2
  %pred_y = alloca i32, align 4
  %center_x = alloca i32, align 4
  %m = alloca i32, align 4
  %mvshift = alloca i32, align 4
  store i16** %orig_pic, i16*** %orig_pic.addr, align 8
  store i16 %ref, i16* %ref.addr, align 2
  store i32 %list, i32* %list.addr, align 4
  store i32 %pic_pix_x, i32* %pic_pix_x.addr, align 4
  store i32 %pic_pix_y, i32* %pic_pix_y.addr, align 4
  store i32 %blocktype, i32* %blocktype.addr, align 4
  store i16 %pred_mv_x, i16* %pred_mv_x.addr, align 2
  store i16 %pred_mv_y, i16* %pred_mv_y.addr, align 2
  store i16* %mv_x, i16** %mv_x.addr, align 8
  store i16* %mv_y, i16** %mv_y.addr, align 8
  store i32 %search_range, i32* %search_range.addr, align 4
  store i32 %min_mcost, i32* %min_mcost.addr, align 4
  store double %lambda, double* %lambda.addr, align 8
  %0 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %MbaffFrameFlag = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %0, i32 0, i32 90
  %1 = load i32, i32* %MbaffFrameFlag, align 8
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %mb_data = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %2, i32 0, i32 51
  %3 = load %struct.macroblock*, %struct.macroblock** %mb_data, align 8
  %4 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %current_mb_nr = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %4, i32 0, i32 3
  %5 = load i32, i32* %current_mb_nr, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 %idxprom
  %mb_field = getelementptr inbounds %struct.macroblock, %struct.macroblock* %arrayidx, i32 0, i32 22
  %6 = load i32, i32* %mb_field, align 4
  %tobool1 = icmp ne i32 %6, 0
  br i1 %tobool1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %7 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %current_mb_nr2 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %7, i32 0, i32 3
  %8 = load i32, i32* %current_mb_nr2, align 4
  %rem = srem i32 %8, 2
  %tobool3 = icmp ne i32 %rem, 0
  %9 = zext i1 %tobool3 to i64
  %cond = select i1 %tobool3, i32 4, i32 2
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond4 = phi i32 [ %cond, %cond.true ], [ 0, %cond.false ]
  store i32 %cond4, i32* %list_offset, align 4
  %10 = load i32, i32* %list.addr, align 4
  %11 = load i32, i32* %list_offset, align 4
  %add = add nsw i32 %10, %11
  %idxprom5 = sext i32 %add to i64
  %arrayidx6 = getelementptr inbounds [6 x %struct.storable_picture**], [6 x %struct.storable_picture**]* @listX, i64 0, i64 %idxprom5
  %12 = load %struct.storable_picture**, %struct.storable_picture*** %arrayidx6, align 8
  %13 = load i16, i16* %ref.addr, align 2
  %idxprom7 = sext i16 %13 to i64
  %arrayidx8 = getelementptr inbounds %struct.storable_picture*, %struct.storable_picture** %12, i64 %idxprom7
  %14 = load %struct.storable_picture*, %struct.storable_picture** %arrayidx8, align 8
  %imgY_11 = getelementptr inbounds %struct.storable_picture, %struct.storable_picture* %14, i32 0, i32 26
  %15 = load i16*, i16** %imgY_11, align 8
  store i16* %15, i16** %ref_pic, align 8
  %16 = load double, double* %lambda.addr, align 8
  %mul = fmul double 6.553600e+04, %16
  %add9 = fadd double %mul, 5.000000e-01
  %conv = fptosi double %add9 to i32
  store i32 %conv, i32* %lambda_factor, align 4
  store i32 2, i32* %mvshift, align 4
  %17 = load %struct.InputParameters*, %struct.InputParameters** @input, align 8
  %blc_size = getelementptr inbounds %struct.InputParameters, %struct.InputParameters* %17, i32 0, i32 20
  %18 = load i32, i32* %blocktype.addr, align 4
  %idxprom10 = sext i32 %18 to i64
  %arrayidx11 = getelementptr inbounds [8 x [2 x i32]], [8 x [2 x i32]]* %blc_size, i64 0, i64 %idxprom10
  %arrayidx12 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx11, i64 0, i64 1
  %19 = load i32, i32* %arrayidx12, align 4
  store i32 %19, i32* %blocksize_y, align 4
  %20 = load %struct.InputParameters*, %struct.InputParameters** @input, align 8
  %blc_size13 = getelementptr inbounds %struct.InputParameters, %struct.InputParameters* %20, i32 0, i32 20
  %21 = load i32, i32* %blocktype.addr, align 4
  %idxprom14 = sext i32 %21 to i64
  %arrayidx15 = getelementptr inbounds [8 x [2 x i32]], [8 x [2 x i32]]* %blc_size13, i64 0, i64 %idxprom14
  %arrayidx16 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx15, i64 0, i64 0
  %22 = load i32, i32* %arrayidx16, align 8
  store i32 %22, i32* %blocksize_x, align 4
  %23 = load i32, i32* %blocksize_x, align 4
  %shr = ashr i32 %23, 2
  store i32 %shr, i32* %blocksize_x4, align 4
  %24 = load i32, i32* %pic_pix_x.addr, align 4
  %25 = load i32, i32* %mvshift, align 4
  %shl = shl i32 %24, %25
  %26 = load i16, i16* %pred_mv_x.addr, align 2
  %conv17 = sext i16 %26 to i32
  %add18 = add nsw i32 %shl, %conv17
  store i32 %add18, i32* %pred_x, align 4
  %27 = load i32, i32* %pic_pix_y.addr, align 4
  %28 = load i32, i32* %mvshift, align 4
  %shl19 = shl i32 %27, %28
  %29 = load i16, i16* %pred_mv_y.addr, align 2
  %conv20 = sext i16 %29 to i32
  %add21 = add nsw i32 %shl19, %conv20
  store i32 %add21, i32* %pred_y, align 4
  %30 = load i32, i32* %pic_pix_x.addr, align 4
  %31 = load i16*, i16** %mv_x.addr, align 8
  %32 = load i16, i16* %31, align 2
  %conv22 = sext i16 %32 to i32
  %add23 = add nsw i32 %30, %conv22
  store i32 %add23, i32* %center_x, align 4
  %33 = load i32, i32* %pic_pix_y.addr, align 4
  %34 = load i16*, i16** %mv_y.addr, align 8
  %35 = load i16, i16* %34, align 2
  %conv24 = sext i16 %35 to i32
  %add25 = add nsw i32 %33, %conv24
  store i32 %add25, i32* %center_y, align 4
  store i32 0, i32* %best_x, align 4
  store i32 0, i32* %best_y, align 4
  %36 = load %struct.InputParameters*, %struct.InputParameters** @input, align 8
  %successive_Bframe = getelementptr inbounds %struct.InputParameters, %struct.InputParameters* %36, i32 0, i32 34
  %37 = load i32, i32* %successive_Bframe, align 4
  store i32 %37, i32* %N_Bframe, align 4
  %38 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %MbaffFrameFlag26 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %38, i32 0, i32 90
  %39 = load i32, i32* %MbaffFrameFlag26, align 8
  %tobool27 = icmp ne i32 %39, 0
  br i1 %tobool27, label %land.lhs.true28, label %cond.false37

land.lhs.true28:                                  ; preds = %cond.end
  %40 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %mb_data29 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %40, i32 0, i32 51
  %41 = load %struct.macroblock*, %struct.macroblock** %mb_data29, align 8
  %42 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %current_mb_nr30 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %42, i32 0, i32 3
  %43 = load i32, i32* %current_mb_nr30, align 4
  %idxprom31 = sext i32 %43 to i64
  %arrayidx32 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %41, i64 %idxprom31
  %mb_field33 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %arrayidx32, i32 0, i32 22
  %44 = load i32, i32* %mb_field33, align 4
  %tobool34 = icmp ne i32 %44, 0
  br i1 %tobool34, label %cond.true35, label %cond.false37

cond.true35:                                      ; preds = %land.lhs.true28
  %45 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height36 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %45, i32 0, i32 15
  %46 = load i32, i32* %height36, align 4
  %div = sdiv i32 %46, 2
  br label %cond.end39

cond.false37:                                     ; preds = %land.lhs.true28, %cond.end
  %47 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height38 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %47, i32 0, i32 15
  %48 = load i32, i32* %height38, align 4
  br label %cond.end39

cond.end39:                                       ; preds = %cond.false37, %cond.true35
  %cond40 = phi i32 [ %div, %cond.true35 ], [ %48, %cond.false37 ]
  store i32 %cond40, i32* %height, align 4
  %49 = load i32, i32* %center_x, align 4
  %50 = load i32, i32* %search_range.addr, align 4
  %cmp = icmp sgt i32 %49, %50
  br i1 %cmp, label %land.lhs.true42, label %if.else

land.lhs.true42:                                  ; preds = %cond.end39
  %51 = load i32, i32* %center_x, align 4
  %52 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %width = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %52, i32 0, i32 13
  %53 = load i32, i32* %width, align 4
  %sub = sub nsw i32 %53, 1
  %54 = load i32, i32* %search_range.addr, align 4
  %sub43 = sub nsw i32 %sub, %54
  %55 = load i32, i32* %blocksize_x, align 4
  %sub44 = sub nsw i32 %sub43, %55
  %cmp45 = icmp slt i32 %51, %sub44
  br i1 %cmp45, label %land.lhs.true47, label %if.else

land.lhs.true47:                                  ; preds = %land.lhs.true42
  %56 = load i32, i32* %center_y, align 4
  %57 = load i32, i32* %search_range.addr, align 4
  %cmp48 = icmp sgt i32 %56, %57
  br i1 %cmp48, label %land.lhs.true50, label %if.else

land.lhs.true50:                                  ; preds = %land.lhs.true47
  %58 = load i32, i32* %center_y, align 4
  %59 = load i32, i32* %height, align 4
  %sub51 = sub nsw i32 %59, 1
  %60 = load i32, i32* %search_range.addr, align 4
  %sub52 = sub nsw i32 %sub51, %60
  %61 = load i32, i32* %blocksize_y, align 4
  %sub53 = sub nsw i32 %sub52, %61
  %cmp54 = icmp slt i32 %58, %sub53
  br i1 %cmp54, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true50
  store i16* (i32, i16*, i32, i32, i32, i32)* @FastLineX, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  br label %if.end

if.else:                                          ; preds = %land.lhs.true50, %land.lhs.true47, %land.lhs.true42, %cond.end39
  store i16* (i32, i16*, i32, i32, i32, i32)* @UMVLineX, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %62 = load i32**, i32*** @McostState, align 8
  %arrayidx56 = getelementptr inbounds i32*, i32** %62, i64 0
  %63 = load i32*, i32** %arrayidx56, align 8
  %64 = bitcast i32* %63 to i8*
  %65 = load i32, i32* %search_range.addr, align 4
  %mul57 = mul nsw i32 2, %65
  %add58 = add nsw i32 %mul57, 1
  %66 = load i32, i32* %search_range.addr, align 4
  %mul59 = mul nsw i32 2, %66
  %add60 = add nsw i32 %mul59, 1
  %mul61 = mul nsw i32 %add58, %add60
  %mul62 = mul nsw i32 %mul61, 4
  %conv63 = sext i32 %mul62 to i64
  call void @llvm.memset.p0i8.i64(i8* align 4 %64, i8 0, i64 %conv63, i1 false)
  %67 = load i16, i16* %ref.addr, align 2
  %conv64 = sext i16 %67 to i32
  %cmp65 = icmp sgt i32 %conv64, 0
  br i1 %cmp65, label %if.then67, label %if.else89

if.then67:                                        ; preds = %if.end
  %68 = load i32, i32* @pred_SAD_ref, align 4
  %cmp68 = icmp ne i32 %68, 0
  br i1 %cmp68, label %if.then70, label %if.else87

if.then70:                                        ; preds = %if.then67
  %69 = load i32, i32* %blocktype.addr, align 4
  %idxprom71 = sext i32 %69 to i64
  %arrayidx72 = getelementptr inbounds [8 x float], [8 x float]* @Bsize, i64 0, i64 %idxprom71
  %70 = load float, float* %arrayidx72, align 4
  %71 = load i32, i32* @pred_SAD_ref, align 4
  %72 = load i32, i32* @pred_SAD_ref, align 4
  %mul73 = mul nsw i32 %71, %72
  %conv74 = sitofp i32 %mul73 to float
  %div75 = fdiv float %70, %conv74
  %73 = load i32, i32* %blocktype.addr, align 4
  %idxprom76 = sext i32 %73 to i64
  %arrayidx77 = getelementptr inbounds [8 x float], [8 x float]* @AlphaSec, i64 0, i64 %idxprom76
  %74 = load float, float* %arrayidx77, align 4
  %sub78 = fsub float %div75, %74
  store float %sub78, float* %betaSec, align 4
  %75 = load i32, i32* %blocktype.addr, align 4
  %idxprom79 = sext i32 %75 to i64
  %arrayidx80 = getelementptr inbounds [8 x float], [8 x float]* @Bsize, i64 0, i64 %idxprom79
  %76 = load float, float* %arrayidx80, align 4
  %77 = load i32, i32* @pred_SAD_ref, align 4
  %78 = load i32, i32* @pred_SAD_ref, align 4
  %mul81 = mul nsw i32 %77, %78
  %conv82 = sitofp i32 %mul81 to float
  %div83 = fdiv float %76, %conv82
  %79 = load i32, i32* %blocktype.addr, align 4
  %idxprom84 = sext i32 %79 to i64
  %arrayidx85 = getelementptr inbounds [8 x float], [8 x float]* @AlphaThird, i64 0, i64 %idxprom84
  %80 = load float, float* %arrayidx85, align 4
  %sub86 = fsub float %div83, %80
  store float %sub86, float* %betaThird, align 4
  br label %if.end88

if.else87:                                        ; preds = %if.then67
  store float 0.000000e+00, float* %betaSec, align 4
  store float 0.000000e+00, float* %betaThird, align 4
  br label %if.end88

if.end88:                                         ; preds = %if.else87, %if.then70
  br label %if.end137

if.else89:                                        ; preds = %if.end
  %81 = load i32, i32* %blocktype.addr, align 4
  %cmp90 = icmp eq i32 %81, 1
  br i1 %cmp90, label %if.then92, label %if.else114

if.then92:                                        ; preds = %if.else89
  %82 = load i32, i32* @pred_SAD_space, align 4
  %cmp93 = icmp ne i32 %82, 0
  br i1 %cmp93, label %if.then95, label %if.else112

if.then95:                                        ; preds = %if.then92
  %83 = load i32, i32* %blocktype.addr, align 4
  %idxprom96 = sext i32 %83 to i64
  %arrayidx97 = getelementptr inbounds [8 x float], [8 x float]* @Bsize, i64 0, i64 %idxprom96
  %84 = load float, float* %arrayidx97, align 4
  %85 = load i32, i32* @pred_SAD_space, align 4
  %86 = load i32, i32* @pred_SAD_space, align 4
  %mul98 = mul nsw i32 %85, %86
  %conv99 = sitofp i32 %mul98 to float
  %div100 = fdiv float %84, %conv99
  %87 = load i32, i32* %blocktype.addr, align 4
  %idxprom101 = sext i32 %87 to i64
  %arrayidx102 = getelementptr inbounds [8 x float], [8 x float]* @AlphaSec, i64 0, i64 %idxprom101
  %88 = load float, float* %arrayidx102, align 4
  %sub103 = fsub float %div100, %88
  store float %sub103, float* %betaSec, align 4
  %89 = load i32, i32* %blocktype.addr, align 4
  %idxprom104 = sext i32 %89 to i64
  %arrayidx105 = getelementptr inbounds [8 x float], [8 x float]* @Bsize, i64 0, i64 %idxprom104
  %90 = load float, float* %arrayidx105, align 4
  %91 = load i32, i32* @pred_SAD_space, align 4
  %92 = load i32, i32* @pred_SAD_space, align 4
  %mul106 = mul nsw i32 %91, %92
  %conv107 = sitofp i32 %mul106 to float
  %div108 = fdiv float %90, %conv107
  %93 = load i32, i32* %blocktype.addr, align 4
  %idxprom109 = sext i32 %93 to i64
  %arrayidx110 = getelementptr inbounds [8 x float], [8 x float]* @AlphaThird, i64 0, i64 %idxprom109
  %94 = load float, float* %arrayidx110, align 4
  %sub111 = fsub float %div108, %94
  store float %sub111, float* %betaThird, align 4
  br label %if.end113

if.else112:                                       ; preds = %if.then92
  store float 0.000000e+00, float* %betaSec, align 4
  store float 0.000000e+00, float* %betaThird, align 4
  br label %if.end113

if.end113:                                        ; preds = %if.else112, %if.then95
  br label %if.end136

if.else114:                                       ; preds = %if.else89
  %95 = load i32, i32* @pred_SAD_uplayer, align 4
  %cmp115 = icmp ne i32 %95, 0
  br i1 %cmp115, label %if.then117, label %if.else134

if.then117:                                       ; preds = %if.else114
  %96 = load i32, i32* %blocktype.addr, align 4
  %idxprom118 = sext i32 %96 to i64
  %arrayidx119 = getelementptr inbounds [8 x float], [8 x float]* @Bsize, i64 0, i64 %idxprom118
  %97 = load float, float* %arrayidx119, align 4
  %98 = load i32, i32* @pred_SAD_uplayer, align 4
  %99 = load i32, i32* @pred_SAD_uplayer, align 4
  %mul120 = mul nsw i32 %98, %99
  %conv121 = sitofp i32 %mul120 to float
  %div122 = fdiv float %97, %conv121
  %100 = load i32, i32* %blocktype.addr, align 4
  %idxprom123 = sext i32 %100 to i64
  %arrayidx124 = getelementptr inbounds [8 x float], [8 x float]* @AlphaSec, i64 0, i64 %idxprom123
  %101 = load float, float* %arrayidx124, align 4
  %sub125 = fsub float %div122, %101
  store float %sub125, float* %betaSec, align 4
  %102 = load i32, i32* %blocktype.addr, align 4
  %idxprom126 = sext i32 %102 to i64
  %arrayidx127 = getelementptr inbounds [8 x float], [8 x float]* @Bsize, i64 0, i64 %idxprom126
  %103 = load float, float* %arrayidx127, align 4
  %104 = load i32, i32* @pred_SAD_uplayer, align 4
  %105 = load i32, i32* @pred_SAD_uplayer, align 4
  %mul128 = mul nsw i32 %104, %105
  %conv129 = sitofp i32 %mul128 to float
  %div130 = fdiv float %103, %conv129
  %106 = load i32, i32* %blocktype.addr, align 4
  %idxprom131 = sext i32 %106 to i64
  %arrayidx132 = getelementptr inbounds [8 x float], [8 x float]* @AlphaThird, i64 0, i64 %idxprom131
  %107 = load float, float* %arrayidx132, align 4
  %sub133 = fsub float %div130, %107
  store float %sub133, float* %betaThird, align 4
  br label %if.end135

if.else134:                                       ; preds = %if.else114
  store float 0.000000e+00, float* %betaSec, align 4
  store float 0.000000e+00, float* %betaThird, align 4
  br label %if.end135

if.end135:                                        ; preds = %if.else134, %if.then117
  br label %if.end136

if.end136:                                        ; preds = %if.end135, %if.end113
  br label %if.end137

if.end137:                                        ; preds = %if.end136, %if.end88
  %108 = load i32, i32* %center_x, align 4
  store i32 %108, i32* %cand_x, align 4
  %109 = load i32, i32* %center_y, align 4
  store i32 %109, i32* %cand_y, align 4
  %110 = load i32, i32* %lambda_factor, align 4
  %111 = load i32*, i32** @mvbits, align 8
  %112 = load i32, i32* %cand_x, align 4
  %113 = load i32, i32* %mvshift, align 4
  %shl138 = shl i32 %112, %113
  %114 = load i32, i32* %pred_x, align 4
  %sub139 = sub nsw i32 %shl138, %114
  %idxprom140 = sext i32 %sub139 to i64
  %arrayidx141 = getelementptr inbounds i32, i32* %111, i64 %idxprom140
  %115 = load i32, i32* %arrayidx141, align 4
  %116 = load i32*, i32** @mvbits, align 8
  %117 = load i32, i32* %cand_y, align 4
  %118 = load i32, i32* %mvshift, align 4
  %shl142 = shl i32 %117, %118
  %119 = load i32, i32* %pred_y, align 4
  %sub143 = sub nsw i32 %shl142, %119
  %idxprom144 = sext i32 %sub143 to i64
  %arrayidx145 = getelementptr inbounds i32, i32* %116, i64 %idxprom144
  %120 = load i32, i32* %arrayidx145, align 4
  %add146 = add nsw i32 %115, %120
  %mul147 = mul nsw i32 %110, %add146
  %shr148 = ashr i32 %mul147, 16
  store i32 %shr148, i32* %mcost, align 4
  %121 = load i16*, i16** %ref_pic, align 8
  %122 = load i16**, i16*** %orig_pic.addr, align 8
  %123 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %124 = load i32, i32* %blocksize_y, align 4
  %125 = load i32, i32* %blocksize_x, align 4
  %126 = load i32, i32* %blocksize_x4, align 4
  %127 = load i32, i32* %mcost, align 4
  %128 = load i32, i32* %min_mcost.addr, align 4
  %129 = load i32, i32* %cand_x, align 4
  %130 = load i32, i32* %cand_y, align 4
  %call = call i32 @PartCalMad(i16* %121, i16** %122, i16* (i32, i16*, i32, i32, i32, i32)* %123, i32 %124, i32 %125, i32 %126, i32 %127, i32 %128, i32 %129, i32 %130)
  store i32 %call, i32* %mcost, align 4
  %131 = load i32, i32* %mcost, align 4
  %132 = load i32**, i32*** @McostState, align 8
  %133 = load i32, i32* %search_range.addr, align 4
  %idxprom149 = sext i32 %133 to i64
  %arrayidx150 = getelementptr inbounds i32*, i32** %132, i64 %idxprom149
  %134 = load i32*, i32** %arrayidx150, align 8
  %135 = load i32, i32* %search_range.addr, align 4
  %idxprom151 = sext i32 %135 to i64
  %arrayidx152 = getelementptr inbounds i32, i32* %134, i64 %idxprom151
  store i32 %131, i32* %arrayidx152, align 4
  %136 = load i32, i32* %mcost, align 4
  %137 = load i32, i32* %min_mcost.addr, align 4
  %cmp153 = icmp slt i32 %136, %137
  br i1 %cmp153, label %if.then155, label %if.end156

if.then155:                                       ; preds = %if.end137
  %138 = load i32, i32* %mcost, align 4
  store i32 %138, i32* %min_mcost.addr, align 4
  %139 = load i32, i32* %cand_x, align 4
  store i32 %139, i32* %best_x, align 4
  %140 = load i32, i32* %cand_y, align 4
  store i32 %140, i32* %best_y, align 4
  br label %if.end156

if.end156:                                        ; preds = %if.then155, %if.end137
  %141 = load i32, i32* %best_x, align 4
  store i32 %141, i32* %iXMinNow, align 4
  %142 = load i32, i32* %best_y, align 4
  store i32 %142, i32* %iYMinNow, align 4
  store i32 0, i32* %m, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end156
  %143 = load i32, i32* %m, align 4
  %cmp157 = icmp slt i32 %143, 4
  br i1 %cmp157, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %144 = load i32, i32* %iXMinNow, align 4
  %145 = load i32, i32* %m, align 4
  %idxprom159 = sext i32 %145 to i64
  %arrayidx160 = getelementptr inbounds [4 x i32], [4 x i32]* @FastIntegerPelBlockMotionSearch.Diamond_x, i64 0, i64 %idxprom159
  %146 = load i32, i32* %arrayidx160, align 4
  %add161 = add nsw i32 %144, %146
  store i32 %add161, i32* %cand_x, align 4
  %147 = load i32, i32* %iYMinNow, align 4
  %148 = load i32, i32* %m, align 4
  %idxprom162 = sext i32 %148 to i64
  %arrayidx163 = getelementptr inbounds [4 x i32], [4 x i32]* @FastIntegerPelBlockMotionSearch.Diamond_y, i64 0, i64 %idxprom162
  %149 = load i32, i32* %arrayidx163, align 4
  %add164 = add nsw i32 %147, %149
  store i32 %add164, i32* %cand_y, align 4
  %150 = load i32, i32* %cand_x, align 4
  %151 = load i32, i32* %center_x, align 4
  %sub165 = sub nsw i32 %150, %151
  %call166 = call i32 @abs(i32 %sub165) #6
  %152 = load i32, i32* %search_range.addr, align 4
  %cmp167 = icmp sle i32 %call166, %152
  br i1 %cmp167, label %land.lhs.true169, label %if.end210

land.lhs.true169:                                 ; preds = %for.body
  %153 = load i32, i32* %cand_y, align 4
  %154 = load i32, i32* %center_y, align 4
  %sub170 = sub nsw i32 %153, %154
  %call171 = call i32 @abs(i32 %sub170) #6
  %155 = load i32, i32* %search_range.addr, align 4
  %cmp172 = icmp sle i32 %call171, %155
  br i1 %cmp172, label %if.then174, label %if.end210

if.then174:                                       ; preds = %land.lhs.true169
  %156 = load i32**, i32*** @McostState, align 8
  %157 = load i32, i32* %cand_y, align 4
  %158 = load i32, i32* %center_y, align 4
  %sub175 = sub nsw i32 %157, %158
  %159 = load i32, i32* %search_range.addr, align 4
  %add176 = add nsw i32 %sub175, %159
  %idxprom177 = sext i32 %add176 to i64
  %arrayidx178 = getelementptr inbounds i32*, i32** %156, i64 %idxprom177
  %160 = load i32*, i32** %arrayidx178, align 8
  %161 = load i32, i32* %cand_x, align 4
  %162 = load i32, i32* %center_x, align 4
  %sub179 = sub nsw i32 %161, %162
  %163 = load i32, i32* %search_range.addr, align 4
  %add180 = add nsw i32 %sub179, %163
  %idxprom181 = sext i32 %add180 to i64
  %arrayidx182 = getelementptr inbounds i32, i32* %160, i64 %idxprom181
  %164 = load i32, i32* %arrayidx182, align 4
  %tobool183 = icmp ne i32 %164, 0
  br i1 %tobool183, label %if.end209, label %if.then184

if.then184:                                       ; preds = %if.then174
  %165 = load i32, i32* %lambda_factor, align 4
  %166 = load i32*, i32** @mvbits, align 8
  %167 = load i32, i32* %cand_x, align 4
  %168 = load i32, i32* %mvshift, align 4
  %shl185 = shl i32 %167, %168
  %169 = load i32, i32* %pred_x, align 4
  %sub186 = sub nsw i32 %shl185, %169
  %idxprom187 = sext i32 %sub186 to i64
  %arrayidx188 = getelementptr inbounds i32, i32* %166, i64 %idxprom187
  %170 = load i32, i32* %arrayidx188, align 4
  %171 = load i32*, i32** @mvbits, align 8
  %172 = load i32, i32* %cand_y, align 4
  %173 = load i32, i32* %mvshift, align 4
  %shl189 = shl i32 %172, %173
  %174 = load i32, i32* %pred_y, align 4
  %sub190 = sub nsw i32 %shl189, %174
  %idxprom191 = sext i32 %sub190 to i64
  %arrayidx192 = getelementptr inbounds i32, i32* %171, i64 %idxprom191
  %175 = load i32, i32* %arrayidx192, align 4
  %add193 = add nsw i32 %170, %175
  %mul194 = mul nsw i32 %165, %add193
  %shr195 = ashr i32 %mul194, 16
  store i32 %shr195, i32* %mcost, align 4
  %176 = load i16*, i16** %ref_pic, align 8
  %177 = load i16**, i16*** %orig_pic.addr, align 8
  %178 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %179 = load i32, i32* %blocksize_y, align 4
  %180 = load i32, i32* %blocksize_x, align 4
  %181 = load i32, i32* %blocksize_x4, align 4
  %182 = load i32, i32* %mcost, align 4
  %183 = load i32, i32* %min_mcost.addr, align 4
  %184 = load i32, i32* %cand_x, align 4
  %185 = load i32, i32* %cand_y, align 4
  %call196 = call i32 @PartCalMad(i16* %176, i16** %177, i16* (i32, i16*, i32, i32, i32, i32)* %178, i32 %179, i32 %180, i32 %181, i32 %182, i32 %183, i32 %184, i32 %185)
  store i32 %call196, i32* %mcost, align 4
  %186 = load i32, i32* %mcost, align 4
  %187 = load i32**, i32*** @McostState, align 8
  %188 = load i32, i32* %cand_y, align 4
  %189 = load i32, i32* %center_y, align 4
  %sub197 = sub nsw i32 %188, %189
  %190 = load i32, i32* %search_range.addr, align 4
  %add198 = add nsw i32 %sub197, %190
  %idxprom199 = sext i32 %add198 to i64
  %arrayidx200 = getelementptr inbounds i32*, i32** %187, i64 %idxprom199
  %191 = load i32*, i32** %arrayidx200, align 8
  %192 = load i32, i32* %cand_x, align 4
  %193 = load i32, i32* %center_x, align 4
  %sub201 = sub nsw i32 %192, %193
  %194 = load i32, i32* %search_range.addr, align 4
  %add202 = add nsw i32 %sub201, %194
  %idxprom203 = sext i32 %add202 to i64
  %arrayidx204 = getelementptr inbounds i32, i32* %191, i64 %idxprom203
  store i32 %186, i32* %arrayidx204, align 4
  %195 = load i32, i32* %mcost, align 4
  %196 = load i32, i32* %min_mcost.addr, align 4
  %cmp205 = icmp slt i32 %195, %196
  br i1 %cmp205, label %if.then207, label %if.end208

if.then207:                                       ; preds = %if.then184
  %197 = load i32, i32* %cand_x, align 4
  store i32 %197, i32* %best_x, align 4
  %198 = load i32, i32* %cand_y, align 4
  store i32 %198, i32* %best_y, align 4
  %199 = load i32, i32* %mcost, align 4
  store i32 %199, i32* %min_mcost.addr, align 4
  br label %if.end208

if.end208:                                        ; preds = %if.then207, %if.then184
  br label %if.end209

if.end209:                                        ; preds = %if.end208, %if.then174
  br label %if.end210

if.end210:                                        ; preds = %if.end209, %land.lhs.true169, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end210
  %200 = load i32, i32* %m, align 4
  %inc = add nsw i32 %200, 1
  store i32 %inc, i32* %m, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %201 = load i32, i32* %center_x, align 4
  %202 = load i32, i32* %pic_pix_x.addr, align 4
  %cmp211 = icmp ne i32 %201, %202
  br i1 %cmp211, label %if.then215, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.end
  %203 = load i32, i32* %center_y, align 4
  %204 = load i32, i32* %pic_pix_y.addr, align 4
  %cmp213 = icmp ne i32 %203, %204
  br i1 %cmp213, label %if.then215, label %if.end321

if.then215:                                       ; preds = %lor.lhs.false, %for.end
  %205 = load i32, i32* %pic_pix_x.addr, align 4
  store i32 %205, i32* %cand_x, align 4
  %206 = load i32, i32* %pic_pix_y.addr, align 4
  store i32 %206, i32* %cand_y, align 4
  %207 = load i32, i32* %cand_x, align 4
  %208 = load i32, i32* %center_x, align 4
  %sub216 = sub nsw i32 %207, %208
  %call217 = call i32 @abs(i32 %sub216) #6
  %209 = load i32, i32* %search_range.addr, align 4
  %cmp218 = icmp sle i32 %call217, %209
  br i1 %cmp218, label %land.lhs.true220, label %if.end261

land.lhs.true220:                                 ; preds = %if.then215
  %210 = load i32, i32* %cand_y, align 4
  %211 = load i32, i32* %center_y, align 4
  %sub221 = sub nsw i32 %210, %211
  %call222 = call i32 @abs(i32 %sub221) #6
  %212 = load i32, i32* %search_range.addr, align 4
  %cmp223 = icmp sle i32 %call222, %212
  br i1 %cmp223, label %if.then225, label %if.end261

if.then225:                                       ; preds = %land.lhs.true220
  %213 = load i32**, i32*** @McostState, align 8
  %214 = load i32, i32* %cand_y, align 4
  %215 = load i32, i32* %center_y, align 4
  %sub226 = sub nsw i32 %214, %215
  %216 = load i32, i32* %search_range.addr, align 4
  %add227 = add nsw i32 %sub226, %216
  %idxprom228 = sext i32 %add227 to i64
  %arrayidx229 = getelementptr inbounds i32*, i32** %213, i64 %idxprom228
  %217 = load i32*, i32** %arrayidx229, align 8
  %218 = load i32, i32* %cand_x, align 4
  %219 = load i32, i32* %center_x, align 4
  %sub230 = sub nsw i32 %218, %219
  %220 = load i32, i32* %search_range.addr, align 4
  %add231 = add nsw i32 %sub230, %220
  %idxprom232 = sext i32 %add231 to i64
  %arrayidx233 = getelementptr inbounds i32, i32* %217, i64 %idxprom232
  %221 = load i32, i32* %arrayidx233, align 4
  %tobool234 = icmp ne i32 %221, 0
  br i1 %tobool234, label %if.end260, label %if.then235

if.then235:                                       ; preds = %if.then225
  %222 = load i32, i32* %lambda_factor, align 4
  %223 = load i32*, i32** @mvbits, align 8
  %224 = load i32, i32* %cand_x, align 4
  %225 = load i32, i32* %mvshift, align 4
  %shl236 = shl i32 %224, %225
  %226 = load i32, i32* %pred_x, align 4
  %sub237 = sub nsw i32 %shl236, %226
  %idxprom238 = sext i32 %sub237 to i64
  %arrayidx239 = getelementptr inbounds i32, i32* %223, i64 %idxprom238
  %227 = load i32, i32* %arrayidx239, align 4
  %228 = load i32*, i32** @mvbits, align 8
  %229 = load i32, i32* %cand_y, align 4
  %230 = load i32, i32* %mvshift, align 4
  %shl240 = shl i32 %229, %230
  %231 = load i32, i32* %pred_y, align 4
  %sub241 = sub nsw i32 %shl240, %231
  %idxprom242 = sext i32 %sub241 to i64
  %arrayidx243 = getelementptr inbounds i32, i32* %228, i64 %idxprom242
  %232 = load i32, i32* %arrayidx243, align 4
  %add244 = add nsw i32 %227, %232
  %mul245 = mul nsw i32 %222, %add244
  %shr246 = ashr i32 %mul245, 16
  store i32 %shr246, i32* %mcost, align 4
  %233 = load i16*, i16** %ref_pic, align 8
  %234 = load i16**, i16*** %orig_pic.addr, align 8
  %235 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %236 = load i32, i32* %blocksize_y, align 4
  %237 = load i32, i32* %blocksize_x, align 4
  %238 = load i32, i32* %blocksize_x4, align 4
  %239 = load i32, i32* %mcost, align 4
  %240 = load i32, i32* %min_mcost.addr, align 4
  %241 = load i32, i32* %cand_x, align 4
  %242 = load i32, i32* %cand_y, align 4
  %call247 = call i32 @PartCalMad(i16* %233, i16** %234, i16* (i32, i16*, i32, i32, i32, i32)* %235, i32 %236, i32 %237, i32 %238, i32 %239, i32 %240, i32 %241, i32 %242)
  store i32 %call247, i32* %mcost, align 4
  %243 = load i32, i32* %mcost, align 4
  %244 = load i32**, i32*** @McostState, align 8
  %245 = load i32, i32* %cand_y, align 4
  %246 = load i32, i32* %center_y, align 4
  %sub248 = sub nsw i32 %245, %246
  %247 = load i32, i32* %search_range.addr, align 4
  %add249 = add nsw i32 %sub248, %247
  %idxprom250 = sext i32 %add249 to i64
  %arrayidx251 = getelementptr inbounds i32*, i32** %244, i64 %idxprom250
  %248 = load i32*, i32** %arrayidx251, align 8
  %249 = load i32, i32* %cand_x, align 4
  %250 = load i32, i32* %center_x, align 4
  %sub252 = sub nsw i32 %249, %250
  %251 = load i32, i32* %search_range.addr, align 4
  %add253 = add nsw i32 %sub252, %251
  %idxprom254 = sext i32 %add253 to i64
  %arrayidx255 = getelementptr inbounds i32, i32* %248, i64 %idxprom254
  store i32 %243, i32* %arrayidx255, align 4
  %252 = load i32, i32* %mcost, align 4
  %253 = load i32, i32* %min_mcost.addr, align 4
  %cmp256 = icmp slt i32 %252, %253
  br i1 %cmp256, label %if.then258, label %if.end259

if.then258:                                       ; preds = %if.then235
  %254 = load i32, i32* %cand_x, align 4
  store i32 %254, i32* %best_x, align 4
  %255 = load i32, i32* %cand_y, align 4
  store i32 %255, i32* %best_y, align 4
  %256 = load i32, i32* %mcost, align 4
  store i32 %256, i32* %min_mcost.addr, align 4
  br label %if.end259

if.end259:                                        ; preds = %if.then258, %if.then235
  br label %if.end260

if.end260:                                        ; preds = %if.end259, %if.then225
  br label %if.end261

if.end261:                                        ; preds = %if.end260, %land.lhs.true220, %if.then215
  %257 = load i32, i32* %best_x, align 4
  store i32 %257, i32* %iXMinNow, align 4
  %258 = load i32, i32* %best_y, align 4
  store i32 %258, i32* %iYMinNow, align 4
  store i32 0, i32* %m, align 4
  br label %for.cond262

for.cond262:                                      ; preds = %for.inc318, %if.end261
  %259 = load i32, i32* %m, align 4
  %cmp263 = icmp slt i32 %259, 4
  br i1 %cmp263, label %for.body265, label %for.end320

for.body265:                                      ; preds = %for.cond262
  %260 = load i32, i32* %iXMinNow, align 4
  %261 = load i32, i32* %m, align 4
  %idxprom266 = sext i32 %261 to i64
  %arrayidx267 = getelementptr inbounds [4 x i32], [4 x i32]* @FastIntegerPelBlockMotionSearch.Diamond_x, i64 0, i64 %idxprom266
  %262 = load i32, i32* %arrayidx267, align 4
  %add268 = add nsw i32 %260, %262
  store i32 %add268, i32* %cand_x, align 4
  %263 = load i32, i32* %iYMinNow, align 4
  %264 = load i32, i32* %m, align 4
  %idxprom269 = sext i32 %264 to i64
  %arrayidx270 = getelementptr inbounds [4 x i32], [4 x i32]* @FastIntegerPelBlockMotionSearch.Diamond_y, i64 0, i64 %idxprom269
  %265 = load i32, i32* %arrayidx270, align 4
  %add271 = add nsw i32 %263, %265
  store i32 %add271, i32* %cand_y, align 4
  %266 = load i32, i32* %cand_x, align 4
  %267 = load i32, i32* %center_x, align 4
  %sub272 = sub nsw i32 %266, %267
  %call273 = call i32 @abs(i32 %sub272) #6
  %268 = load i32, i32* %search_range.addr, align 4
  %cmp274 = icmp sle i32 %call273, %268
  br i1 %cmp274, label %land.lhs.true276, label %if.end317

land.lhs.true276:                                 ; preds = %for.body265
  %269 = load i32, i32* %cand_y, align 4
  %270 = load i32, i32* %center_y, align 4
  %sub277 = sub nsw i32 %269, %270
  %call278 = call i32 @abs(i32 %sub277) #6
  %271 = load i32, i32* %search_range.addr, align 4
  %cmp279 = icmp sle i32 %call278, %271
  br i1 %cmp279, label %if.then281, label %if.end317

if.then281:                                       ; preds = %land.lhs.true276
  %272 = load i32**, i32*** @McostState, align 8
  %273 = load i32, i32* %cand_y, align 4
  %274 = load i32, i32* %center_y, align 4
  %sub282 = sub nsw i32 %273, %274
  %275 = load i32, i32* %search_range.addr, align 4
  %add283 = add nsw i32 %sub282, %275
  %idxprom284 = sext i32 %add283 to i64
  %arrayidx285 = getelementptr inbounds i32*, i32** %272, i64 %idxprom284
  %276 = load i32*, i32** %arrayidx285, align 8
  %277 = load i32, i32* %cand_x, align 4
  %278 = load i32, i32* %center_x, align 4
  %sub286 = sub nsw i32 %277, %278
  %279 = load i32, i32* %search_range.addr, align 4
  %add287 = add nsw i32 %sub286, %279
  %idxprom288 = sext i32 %add287 to i64
  %arrayidx289 = getelementptr inbounds i32, i32* %276, i64 %idxprom288
  %280 = load i32, i32* %arrayidx289, align 4
  %tobool290 = icmp ne i32 %280, 0
  br i1 %tobool290, label %if.end316, label %if.then291

if.then291:                                       ; preds = %if.then281
  %281 = load i32, i32* %lambda_factor, align 4
  %282 = load i32*, i32** @mvbits, align 8
  %283 = load i32, i32* %cand_x, align 4
  %284 = load i32, i32* %mvshift, align 4
  %shl292 = shl i32 %283, %284
  %285 = load i32, i32* %pred_x, align 4
  %sub293 = sub nsw i32 %shl292, %285
  %idxprom294 = sext i32 %sub293 to i64
  %arrayidx295 = getelementptr inbounds i32, i32* %282, i64 %idxprom294
  %286 = load i32, i32* %arrayidx295, align 4
  %287 = load i32*, i32** @mvbits, align 8
  %288 = load i32, i32* %cand_y, align 4
  %289 = load i32, i32* %mvshift, align 4
  %shl296 = shl i32 %288, %289
  %290 = load i32, i32* %pred_y, align 4
  %sub297 = sub nsw i32 %shl296, %290
  %idxprom298 = sext i32 %sub297 to i64
  %arrayidx299 = getelementptr inbounds i32, i32* %287, i64 %idxprom298
  %291 = load i32, i32* %arrayidx299, align 4
  %add300 = add nsw i32 %286, %291
  %mul301 = mul nsw i32 %281, %add300
  %shr302 = ashr i32 %mul301, 16
  store i32 %shr302, i32* %mcost, align 4
  %292 = load i16*, i16** %ref_pic, align 8
  %293 = load i16**, i16*** %orig_pic.addr, align 8
  %294 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %295 = load i32, i32* %blocksize_y, align 4
  %296 = load i32, i32* %blocksize_x, align 4
  %297 = load i32, i32* %blocksize_x4, align 4
  %298 = load i32, i32* %mcost, align 4
  %299 = load i32, i32* %min_mcost.addr, align 4
  %300 = load i32, i32* %cand_x, align 4
  %301 = load i32, i32* %cand_y, align 4
  %call303 = call i32 @PartCalMad(i16* %292, i16** %293, i16* (i32, i16*, i32, i32, i32, i32)* %294, i32 %295, i32 %296, i32 %297, i32 %298, i32 %299, i32 %300, i32 %301)
  store i32 %call303, i32* %mcost, align 4
  %302 = load i32, i32* %mcost, align 4
  %303 = load i32**, i32*** @McostState, align 8
  %304 = load i32, i32* %cand_y, align 4
  %305 = load i32, i32* %center_y, align 4
  %sub304 = sub nsw i32 %304, %305
  %306 = load i32, i32* %search_range.addr, align 4
  %add305 = add nsw i32 %sub304, %306
  %idxprom306 = sext i32 %add305 to i64
  %arrayidx307 = getelementptr inbounds i32*, i32** %303, i64 %idxprom306
  %307 = load i32*, i32** %arrayidx307, align 8
  %308 = load i32, i32* %cand_x, align 4
  %309 = load i32, i32* %center_x, align 4
  %sub308 = sub nsw i32 %308, %309
  %310 = load i32, i32* %search_range.addr, align 4
  %add309 = add nsw i32 %sub308, %310
  %idxprom310 = sext i32 %add309 to i64
  %arrayidx311 = getelementptr inbounds i32, i32* %307, i64 %idxprom310
  store i32 %302, i32* %arrayidx311, align 4
  %311 = load i32, i32* %mcost, align 4
  %312 = load i32, i32* %min_mcost.addr, align 4
  %cmp312 = icmp slt i32 %311, %312
  br i1 %cmp312, label %if.then314, label %if.end315

if.then314:                                       ; preds = %if.then291
  %313 = load i32, i32* %cand_x, align 4
  store i32 %313, i32* %best_x, align 4
  %314 = load i32, i32* %cand_y, align 4
  store i32 %314, i32* %best_y, align 4
  %315 = load i32, i32* %mcost, align 4
  store i32 %315, i32* %min_mcost.addr, align 4
  br label %if.end315

if.end315:                                        ; preds = %if.then314, %if.then291
  br label %if.end316

if.end316:                                        ; preds = %if.end315, %if.then281
  br label %if.end317

if.end317:                                        ; preds = %if.end316, %land.lhs.true276, %for.body265
  br label %for.inc318

for.inc318:                                       ; preds = %if.end317
  %316 = load i32, i32* %m, align 4
  %inc319 = add nsw i32 %316, 1
  store i32 %inc319, i32* %m, align 4
  br label %for.cond262

for.end320:                                       ; preds = %for.cond262
  br label %if.end321

if.end321:                                        ; preds = %for.end320, %lor.lhs.false
  %317 = load i32, i32* %blocktype.addr, align 4
  %cmp322 = icmp sgt i32 %317, 1
  br i1 %cmp322, label %if.then324, label %if.end392

if.then324:                                       ; preds = %if.end321
  %318 = load i32, i32* %pic_pix_x.addr, align 4
  %319 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @pred_MV_uplayer, i64 0, i64 0), align 4
  %div325 = sdiv i32 %319, 4
  %add326 = add nsw i32 %318, %div325
  store i32 %add326, i32* %cand_x, align 4
  %320 = load i32, i32* %pic_pix_y.addr, align 4
  %321 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @pred_MV_uplayer, i64 0, i64 1), align 4
  %div327 = sdiv i32 %321, 4
  %add328 = add nsw i32 %320, %div327
  store i32 %add328, i32* %cand_y, align 4
  %322 = load i32, i32* %cand_x, align 4
  %323 = load i32, i32* %center_x, align 4
  %sub329 = sub nsw i32 %322, %323
  %call330 = call i32 @abs(i32 %sub329) #6
  %324 = load i32, i32* %search_range.addr, align 4
  %cmp331 = icmp sle i32 %call330, %324
  br i1 %cmp331, label %land.lhs.true333, label %if.end374

land.lhs.true333:                                 ; preds = %if.then324
  %325 = load i32, i32* %cand_y, align 4
  %326 = load i32, i32* %center_y, align 4
  %sub334 = sub nsw i32 %325, %326
  %call335 = call i32 @abs(i32 %sub334) #6
  %327 = load i32, i32* %search_range.addr, align 4
  %cmp336 = icmp sle i32 %call335, %327
  br i1 %cmp336, label %if.then338, label %if.end374

if.then338:                                       ; preds = %land.lhs.true333
  %328 = load i32**, i32*** @McostState, align 8
  %329 = load i32, i32* %cand_y, align 4
  %330 = load i32, i32* %center_y, align 4
  %sub339 = sub nsw i32 %329, %330
  %331 = load i32, i32* %search_range.addr, align 4
  %add340 = add nsw i32 %sub339, %331
  %idxprom341 = sext i32 %add340 to i64
  %arrayidx342 = getelementptr inbounds i32*, i32** %328, i64 %idxprom341
  %332 = load i32*, i32** %arrayidx342, align 8
  %333 = load i32, i32* %cand_x, align 4
  %334 = load i32, i32* %center_x, align 4
  %sub343 = sub nsw i32 %333, %334
  %335 = load i32, i32* %search_range.addr, align 4
  %add344 = add nsw i32 %sub343, %335
  %idxprom345 = sext i32 %add344 to i64
  %arrayidx346 = getelementptr inbounds i32, i32* %332, i64 %idxprom345
  %336 = load i32, i32* %arrayidx346, align 4
  %tobool347 = icmp ne i32 %336, 0
  br i1 %tobool347, label %if.end373, label %if.then348

if.then348:                                       ; preds = %if.then338
  %337 = load i32, i32* %lambda_factor, align 4
  %338 = load i32*, i32** @mvbits, align 8
  %339 = load i32, i32* %cand_x, align 4
  %340 = load i32, i32* %mvshift, align 4
  %shl349 = shl i32 %339, %340
  %341 = load i32, i32* %pred_x, align 4
  %sub350 = sub nsw i32 %shl349, %341
  %idxprom351 = sext i32 %sub350 to i64
  %arrayidx352 = getelementptr inbounds i32, i32* %338, i64 %idxprom351
  %342 = load i32, i32* %arrayidx352, align 4
  %343 = load i32*, i32** @mvbits, align 8
  %344 = load i32, i32* %cand_y, align 4
  %345 = load i32, i32* %mvshift, align 4
  %shl353 = shl i32 %344, %345
  %346 = load i32, i32* %pred_y, align 4
  %sub354 = sub nsw i32 %shl353, %346
  %idxprom355 = sext i32 %sub354 to i64
  %arrayidx356 = getelementptr inbounds i32, i32* %343, i64 %idxprom355
  %347 = load i32, i32* %arrayidx356, align 4
  %add357 = add nsw i32 %342, %347
  %mul358 = mul nsw i32 %337, %add357
  %shr359 = ashr i32 %mul358, 16
  store i32 %shr359, i32* %mcost, align 4
  %348 = load i16*, i16** %ref_pic, align 8
  %349 = load i16**, i16*** %orig_pic.addr, align 8
  %350 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %351 = load i32, i32* %blocksize_y, align 4
  %352 = load i32, i32* %blocksize_x, align 4
  %353 = load i32, i32* %blocksize_x4, align 4
  %354 = load i32, i32* %mcost, align 4
  %355 = load i32, i32* %min_mcost.addr, align 4
  %356 = load i32, i32* %cand_x, align 4
  %357 = load i32, i32* %cand_y, align 4
  %call360 = call i32 @PartCalMad(i16* %348, i16** %349, i16* (i32, i16*, i32, i32, i32, i32)* %350, i32 %351, i32 %352, i32 %353, i32 %354, i32 %355, i32 %356, i32 %357)
  store i32 %call360, i32* %mcost, align 4
  %358 = load i32, i32* %mcost, align 4
  %359 = load i32**, i32*** @McostState, align 8
  %360 = load i32, i32* %cand_y, align 4
  %361 = load i32, i32* %center_y, align 4
  %sub361 = sub nsw i32 %360, %361
  %362 = load i32, i32* %search_range.addr, align 4
  %add362 = add nsw i32 %sub361, %362
  %idxprom363 = sext i32 %add362 to i64
  %arrayidx364 = getelementptr inbounds i32*, i32** %359, i64 %idxprom363
  %363 = load i32*, i32** %arrayidx364, align 8
  %364 = load i32, i32* %cand_x, align 4
  %365 = load i32, i32* %center_x, align 4
  %sub365 = sub nsw i32 %364, %365
  %366 = load i32, i32* %search_range.addr, align 4
  %add366 = add nsw i32 %sub365, %366
  %idxprom367 = sext i32 %add366 to i64
  %arrayidx368 = getelementptr inbounds i32, i32* %363, i64 %idxprom367
  store i32 %358, i32* %arrayidx368, align 4
  %367 = load i32, i32* %mcost, align 4
  %368 = load i32, i32* %min_mcost.addr, align 4
  %cmp369 = icmp slt i32 %367, %368
  br i1 %cmp369, label %if.then371, label %if.end372

if.then371:                                       ; preds = %if.then348
  %369 = load i32, i32* %cand_x, align 4
  store i32 %369, i32* %best_x, align 4
  %370 = load i32, i32* %cand_y, align 4
  store i32 %370, i32* %best_y, align 4
  %371 = load i32, i32* %mcost, align 4
  store i32 %371, i32* %min_mcost.addr, align 4
  br label %if.end372

if.end372:                                        ; preds = %if.then371, %if.then348
  br label %if.end373

if.end373:                                        ; preds = %if.end372, %if.then338
  br label %if.end374

if.end374:                                        ; preds = %if.end373, %land.lhs.true333, %if.then324
  %372 = load i32, i32* %min_mcost.addr, align 4
  %373 = load i32, i32* @pred_SAD_uplayer, align 4
  %sub375 = sub nsw i32 %372, %373
  %conv376 = sitofp i32 %sub375 to float
  %374 = load i32, i32* @pred_SAD_uplayer, align 4
  %conv377 = sitofp i32 %374 to float
  %375 = load float, float* %betaThird, align 4
  %mul378 = fmul float %conv377, %375
  %cmp379 = fcmp olt float %conv376, %mul378
  br i1 %cmp379, label %if.then381, label %if.else382

if.then381:                                       ; preds = %if.end374
  br label %third_step

if.else382:                                       ; preds = %if.end374
  %376 = load i32, i32* %min_mcost.addr, align 4
  %377 = load i32, i32* @pred_SAD_uplayer, align 4
  %sub383 = sub nsw i32 %376, %377
  %conv384 = sitofp i32 %sub383 to float
  %378 = load i32, i32* @pred_SAD_uplayer, align 4
  %conv385 = sitofp i32 %378 to float
  %379 = load float, float* %betaSec, align 4
  %mul386 = fmul float %conv385, %379
  %cmp387 = fcmp olt float %conv384, %mul386
  br i1 %cmp387, label %if.then389, label %if.end390

if.then389:                                       ; preds = %if.else382
  br label %sec_step

if.end390:                                        ; preds = %if.else382
  br label %if.end391

if.end391:                                        ; preds = %if.end390
  br label %if.end392

if.end392:                                        ; preds = %if.end391, %if.end321
  %380 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %number = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %380, i32 0, i32 0
  %381 = load i32, i32* %number, align 8
  %382 = load i16, i16* %ref.addr, align 2
  %conv393 = sext i16 %382 to i32
  %add394 = add nsw i32 1, %conv393
  %cmp395 = icmp sgt i32 %381, %add394
  br i1 %cmp395, label %land.lhs.true397, label %lor.lhs.false401

land.lhs.true397:                                 ; preds = %if.end392
  %383 = load i16, i16* %ref.addr, align 2
  %conv398 = sext i16 %383 to i32
  %cmp399 = icmp ne i32 %conv398, -1
  br i1 %cmp399, label %if.then408, label %lor.lhs.false401

lor.lhs.false401:                                 ; preds = %land.lhs.true397, %if.end392
  %384 = load i32, i32* %list.addr, align 4
  %cmp402 = icmp eq i32 %384, 1
  br i1 %cmp402, label %land.lhs.true404, label %if.end459

land.lhs.true404:                                 ; preds = %lor.lhs.false401
  %385 = load i32, i32* @Bframe_ctr, align 4
  %386 = load i32, i32* %N_Bframe, align 4
  %rem405 = srem i32 %385, %386
  %cmp406 = icmp sgt i32 %rem405, 1
  br i1 %cmp406, label %if.then408, label %if.end459

if.then408:                                       ; preds = %land.lhs.true404, %land.lhs.true397
  %387 = load i32, i32* %pic_pix_x.addr, align 4
  %388 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @pred_MV_time, i64 0, i64 0), align 4
  %div409 = sdiv i32 %388, 4
  %add410 = add nsw i32 %387, %div409
  store i32 %add410, i32* %cand_x, align 4
  %389 = load i32, i32* %pic_pix_y.addr, align 4
  %390 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @pred_MV_time, i64 0, i64 1), align 4
  %div411 = sdiv i32 %390, 4
  %add412 = add nsw i32 %389, %div411
  store i32 %add412, i32* %cand_y, align 4
  %391 = load i32, i32* %cand_x, align 4
  %392 = load i32, i32* %center_x, align 4
  %sub413 = sub nsw i32 %391, %392
  %call414 = call i32 @abs(i32 %sub413) #6
  %393 = load i32, i32* %search_range.addr, align 4
  %cmp415 = icmp sle i32 %call414, %393
  br i1 %cmp415, label %land.lhs.true417, label %if.end458

land.lhs.true417:                                 ; preds = %if.then408
  %394 = load i32, i32* %cand_y, align 4
  %395 = load i32, i32* %center_y, align 4
  %sub418 = sub nsw i32 %394, %395
  %call419 = call i32 @abs(i32 %sub418) #6
  %396 = load i32, i32* %search_range.addr, align 4
  %cmp420 = icmp sle i32 %call419, %396
  br i1 %cmp420, label %if.then422, label %if.end458

if.then422:                                       ; preds = %land.lhs.true417
  %397 = load i32**, i32*** @McostState, align 8
  %398 = load i32, i32* %cand_y, align 4
  %399 = load i32, i32* %center_y, align 4
  %sub423 = sub nsw i32 %398, %399
  %400 = load i32, i32* %search_range.addr, align 4
  %add424 = add nsw i32 %sub423, %400
  %idxprom425 = sext i32 %add424 to i64
  %arrayidx426 = getelementptr inbounds i32*, i32** %397, i64 %idxprom425
  %401 = load i32*, i32** %arrayidx426, align 8
  %402 = load i32, i32* %cand_x, align 4
  %403 = load i32, i32* %center_x, align 4
  %sub427 = sub nsw i32 %402, %403
  %404 = load i32, i32* %search_range.addr, align 4
  %add428 = add nsw i32 %sub427, %404
  %idxprom429 = sext i32 %add428 to i64
  %arrayidx430 = getelementptr inbounds i32, i32* %401, i64 %idxprom429
  %405 = load i32, i32* %arrayidx430, align 4
  %tobool431 = icmp ne i32 %405, 0
  br i1 %tobool431, label %if.end457, label %if.then432

if.then432:                                       ; preds = %if.then422
  %406 = load i32, i32* %lambda_factor, align 4
  %407 = load i32*, i32** @mvbits, align 8
  %408 = load i32, i32* %cand_x, align 4
  %409 = load i32, i32* %mvshift, align 4
  %shl433 = shl i32 %408, %409
  %410 = load i32, i32* %pred_x, align 4
  %sub434 = sub nsw i32 %shl433, %410
  %idxprom435 = sext i32 %sub434 to i64
  %arrayidx436 = getelementptr inbounds i32, i32* %407, i64 %idxprom435
  %411 = load i32, i32* %arrayidx436, align 4
  %412 = load i32*, i32** @mvbits, align 8
  %413 = load i32, i32* %cand_y, align 4
  %414 = load i32, i32* %mvshift, align 4
  %shl437 = shl i32 %413, %414
  %415 = load i32, i32* %pred_y, align 4
  %sub438 = sub nsw i32 %shl437, %415
  %idxprom439 = sext i32 %sub438 to i64
  %arrayidx440 = getelementptr inbounds i32, i32* %412, i64 %idxprom439
  %416 = load i32, i32* %arrayidx440, align 4
  %add441 = add nsw i32 %411, %416
  %mul442 = mul nsw i32 %406, %add441
  %shr443 = ashr i32 %mul442, 16
  store i32 %shr443, i32* %mcost, align 4
  %417 = load i16*, i16** %ref_pic, align 8
  %418 = load i16**, i16*** %orig_pic.addr, align 8
  %419 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %420 = load i32, i32* %blocksize_y, align 4
  %421 = load i32, i32* %blocksize_x, align 4
  %422 = load i32, i32* %blocksize_x4, align 4
  %423 = load i32, i32* %mcost, align 4
  %424 = load i32, i32* %min_mcost.addr, align 4
  %425 = load i32, i32* %cand_x, align 4
  %426 = load i32, i32* %cand_y, align 4
  %call444 = call i32 @PartCalMad(i16* %417, i16** %418, i16* (i32, i16*, i32, i32, i32, i32)* %419, i32 %420, i32 %421, i32 %422, i32 %423, i32 %424, i32 %425, i32 %426)
  store i32 %call444, i32* %mcost, align 4
  %427 = load i32, i32* %mcost, align 4
  %428 = load i32**, i32*** @McostState, align 8
  %429 = load i32, i32* %cand_y, align 4
  %430 = load i32, i32* %center_y, align 4
  %sub445 = sub nsw i32 %429, %430
  %431 = load i32, i32* %search_range.addr, align 4
  %add446 = add nsw i32 %sub445, %431
  %idxprom447 = sext i32 %add446 to i64
  %arrayidx448 = getelementptr inbounds i32*, i32** %428, i64 %idxprom447
  %432 = load i32*, i32** %arrayidx448, align 8
  %433 = load i32, i32* %cand_x, align 4
  %434 = load i32, i32* %center_x, align 4
  %sub449 = sub nsw i32 %433, %434
  %435 = load i32, i32* %search_range.addr, align 4
  %add450 = add nsw i32 %sub449, %435
  %idxprom451 = sext i32 %add450 to i64
  %arrayidx452 = getelementptr inbounds i32, i32* %432, i64 %idxprom451
  store i32 %427, i32* %arrayidx452, align 4
  %436 = load i32, i32* %mcost, align 4
  %437 = load i32, i32* %min_mcost.addr, align 4
  %cmp453 = icmp slt i32 %436, %437
  br i1 %cmp453, label %if.then455, label %if.end456

if.then455:                                       ; preds = %if.then432
  %438 = load i32, i32* %cand_x, align 4
  store i32 %438, i32* %best_x, align 4
  %439 = load i32, i32* %cand_y, align 4
  store i32 %439, i32* %best_y, align 4
  %440 = load i32, i32* %mcost, align 4
  store i32 %440, i32* %min_mcost.addr, align 4
  br label %if.end456

if.end456:                                        ; preds = %if.then455, %if.then432
  br label %if.end457

if.end457:                                        ; preds = %if.end456, %if.then422
  br label %if.end458

if.end458:                                        ; preds = %if.end457, %land.lhs.true417, %if.then408
  br label %if.end459

if.end459:                                        ; preds = %if.end458, %land.lhs.true404, %lor.lhs.false401
  %441 = load %struct.InputParameters*, %struct.InputParameters** @input, align 8
  %PicInterlace = getelementptr inbounds %struct.InputParameters, %struct.InputParameters* %441, i32 0, i32 91
  %442 = load i32, i32* %PicInterlace, align 8
  %cmp460 = icmp eq i32 %442, 1
  br i1 %cmp460, label %if.then462, label %if.else535

if.then462:                                       ; preds = %if.end459
  %443 = load i32, i32* %list.addr, align 4
  %cmp463 = icmp eq i32 %443, 0
  br i1 %cmp463, label %land.lhs.true465, label %lor.lhs.false469

land.lhs.true465:                                 ; preds = %if.then462
  %444 = load i16, i16* %ref.addr, align 2
  %conv466 = sext i16 %444 to i32
  %cmp467 = icmp sgt i32 %conv466, 0
  br i1 %cmp467, label %if.then483, label %lor.lhs.false469

lor.lhs.false469:                                 ; preds = %land.lhs.true465, %if.then462
  %445 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %type = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %445, i32 0, i32 6
  %446 = load i32, i32* %type, align 8
  %cmp470 = icmp eq i32 %446, 1
  br i1 %cmp470, label %land.lhs.true472, label %if.end534

land.lhs.true472:                                 ; preds = %lor.lhs.false469
  %447 = load i32, i32* %list.addr, align 4
  %cmp473 = icmp eq i32 %447, 0
  br i1 %cmp473, label %land.lhs.true475, label %if.end534

land.lhs.true475:                                 ; preds = %land.lhs.true472
  %448 = load i16, i16* %ref.addr, align 2
  %conv476 = sext i16 %448 to i32
  %cmp477 = icmp eq i32 %conv476, 0
  br i1 %cmp477, label %if.then483, label %lor.lhs.false479

lor.lhs.false479:                                 ; preds = %land.lhs.true475
  %449 = load i16, i16* %ref.addr, align 2
  %conv480 = sext i16 %449 to i32
  %cmp481 = icmp eq i32 %conv480, 2
  br i1 %cmp481, label %if.then483, label %if.end534

if.then483:                                       ; preds = %lor.lhs.false479, %land.lhs.true475, %land.lhs.true465
  %450 = load i32, i32* %pic_pix_x.addr, align 4
  %451 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @pred_MV_ref, i64 0, i64 0), align 4
  %div484 = sdiv i32 %451, 4
  %add485 = add nsw i32 %450, %div484
  store i32 %add485, i32* %cand_x, align 4
  %452 = load i32, i32* %pic_pix_y.addr, align 4
  %453 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @pred_MV_ref, i64 0, i64 1), align 4
  %div486 = sdiv i32 %453, 4
  %add487 = add nsw i32 %452, %div486
  store i32 %add487, i32* %cand_y, align 4
  %454 = load i32, i32* %cand_x, align 4
  %455 = load i32, i32* %center_x, align 4
  %sub488 = sub nsw i32 %454, %455
  %call489 = call i32 @abs(i32 %sub488) #6
  %456 = load i32, i32* %search_range.addr, align 4
  %cmp490 = icmp sle i32 %call489, %456
  br i1 %cmp490, label %land.lhs.true492, label %if.end533

land.lhs.true492:                                 ; preds = %if.then483
  %457 = load i32, i32* %cand_y, align 4
  %458 = load i32, i32* %center_y, align 4
  %sub493 = sub nsw i32 %457, %458
  %call494 = call i32 @abs(i32 %sub493) #6
  %459 = load i32, i32* %search_range.addr, align 4
  %cmp495 = icmp sle i32 %call494, %459
  br i1 %cmp495, label %if.then497, label %if.end533

if.then497:                                       ; preds = %land.lhs.true492
  %460 = load i32**, i32*** @McostState, align 8
  %461 = load i32, i32* %cand_y, align 4
  %462 = load i32, i32* %center_y, align 4
  %sub498 = sub nsw i32 %461, %462
  %463 = load i32, i32* %search_range.addr, align 4
  %add499 = add nsw i32 %sub498, %463
  %idxprom500 = sext i32 %add499 to i64
  %arrayidx501 = getelementptr inbounds i32*, i32** %460, i64 %idxprom500
  %464 = load i32*, i32** %arrayidx501, align 8
  %465 = load i32, i32* %cand_x, align 4
  %466 = load i32, i32* %center_x, align 4
  %sub502 = sub nsw i32 %465, %466
  %467 = load i32, i32* %search_range.addr, align 4
  %add503 = add nsw i32 %sub502, %467
  %idxprom504 = sext i32 %add503 to i64
  %arrayidx505 = getelementptr inbounds i32, i32* %464, i64 %idxprom504
  %468 = load i32, i32* %arrayidx505, align 4
  %tobool506 = icmp ne i32 %468, 0
  br i1 %tobool506, label %if.end532, label %if.then507

if.then507:                                       ; preds = %if.then497
  %469 = load i32, i32* %lambda_factor, align 4
  %470 = load i32*, i32** @mvbits, align 8
  %471 = load i32, i32* %cand_x, align 4
  %472 = load i32, i32* %mvshift, align 4
  %shl508 = shl i32 %471, %472
  %473 = load i32, i32* %pred_x, align 4
  %sub509 = sub nsw i32 %shl508, %473
  %idxprom510 = sext i32 %sub509 to i64
  %arrayidx511 = getelementptr inbounds i32, i32* %470, i64 %idxprom510
  %474 = load i32, i32* %arrayidx511, align 4
  %475 = load i32*, i32** @mvbits, align 8
  %476 = load i32, i32* %cand_y, align 4
  %477 = load i32, i32* %mvshift, align 4
  %shl512 = shl i32 %476, %477
  %478 = load i32, i32* %pred_y, align 4
  %sub513 = sub nsw i32 %shl512, %478
  %idxprom514 = sext i32 %sub513 to i64
  %arrayidx515 = getelementptr inbounds i32, i32* %475, i64 %idxprom514
  %479 = load i32, i32* %arrayidx515, align 4
  %add516 = add nsw i32 %474, %479
  %mul517 = mul nsw i32 %469, %add516
  %shr518 = ashr i32 %mul517, 16
  store i32 %shr518, i32* %mcost, align 4
  %480 = load i16*, i16** %ref_pic, align 8
  %481 = load i16**, i16*** %orig_pic.addr, align 8
  %482 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %483 = load i32, i32* %blocksize_y, align 4
  %484 = load i32, i32* %blocksize_x, align 4
  %485 = load i32, i32* %blocksize_x4, align 4
  %486 = load i32, i32* %mcost, align 4
  %487 = load i32, i32* %min_mcost.addr, align 4
  %488 = load i32, i32* %cand_x, align 4
  %489 = load i32, i32* %cand_y, align 4
  %call519 = call i32 @PartCalMad(i16* %480, i16** %481, i16* (i32, i16*, i32, i32, i32, i32)* %482, i32 %483, i32 %484, i32 %485, i32 %486, i32 %487, i32 %488, i32 %489)
  store i32 %call519, i32* %mcost, align 4
  %490 = load i32, i32* %mcost, align 4
  %491 = load i32**, i32*** @McostState, align 8
  %492 = load i32, i32* %cand_y, align 4
  %493 = load i32, i32* %center_y, align 4
  %sub520 = sub nsw i32 %492, %493
  %494 = load i32, i32* %search_range.addr, align 4
  %add521 = add nsw i32 %sub520, %494
  %idxprom522 = sext i32 %add521 to i64
  %arrayidx523 = getelementptr inbounds i32*, i32** %491, i64 %idxprom522
  %495 = load i32*, i32** %arrayidx523, align 8
  %496 = load i32, i32* %cand_x, align 4
  %497 = load i32, i32* %center_x, align 4
  %sub524 = sub nsw i32 %496, %497
  %498 = load i32, i32* %search_range.addr, align 4
  %add525 = add nsw i32 %sub524, %498
  %idxprom526 = sext i32 %add525 to i64
  %arrayidx527 = getelementptr inbounds i32, i32* %495, i64 %idxprom526
  store i32 %490, i32* %arrayidx527, align 4
  %499 = load i32, i32* %mcost, align 4
  %500 = load i32, i32* %min_mcost.addr, align 4
  %cmp528 = icmp slt i32 %499, %500
  br i1 %cmp528, label %if.then530, label %if.end531

if.then530:                                       ; preds = %if.then507
  %501 = load i32, i32* %cand_x, align 4
  store i32 %501, i32* %best_x, align 4
  %502 = load i32, i32* %cand_y, align 4
  store i32 %502, i32* %best_y, align 4
  %503 = load i32, i32* %mcost, align 4
  store i32 %503, i32* %min_mcost.addr, align 4
  br label %if.end531

if.end531:                                        ; preds = %if.then530, %if.then507
  br label %if.end532

if.end532:                                        ; preds = %if.end531, %if.then497
  br label %if.end533

if.end533:                                        ; preds = %if.end532, %land.lhs.true492, %if.then483
  br label %if.end534

if.end534:                                        ; preds = %if.end533, %lor.lhs.false479, %land.lhs.true472, %lor.lhs.false469
  br label %if.end605

if.else535:                                       ; preds = %if.end459
  %504 = load i32, i32* %list.addr, align 4
  %cmp536 = icmp eq i32 %504, 0
  br i1 %cmp536, label %land.lhs.true538, label %lor.lhs.false542

land.lhs.true538:                                 ; preds = %if.else535
  %505 = load i16, i16* %ref.addr, align 2
  %conv539 = sext i16 %505 to i32
  %cmp540 = icmp sgt i32 %conv539, 0
  br i1 %cmp540, label %if.then553, label %lor.lhs.false542

lor.lhs.false542:                                 ; preds = %land.lhs.true538, %if.else535
  %506 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %type543 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %506, i32 0, i32 6
  %507 = load i32, i32* %type543, align 8
  %cmp544 = icmp eq i32 %507, 1
  br i1 %cmp544, label %land.lhs.true546, label %if.end604

land.lhs.true546:                                 ; preds = %lor.lhs.false542
  %508 = load i32, i32* %list.addr, align 4
  %cmp547 = icmp eq i32 %508, 0
  br i1 %cmp547, label %land.lhs.true549, label %if.end604

land.lhs.true549:                                 ; preds = %land.lhs.true546
  %509 = load i16, i16* %ref.addr, align 2
  %conv550 = sext i16 %509 to i32
  %cmp551 = icmp eq i32 %conv550, 0
  br i1 %cmp551, label %if.then553, label %if.end604

if.then553:                                       ; preds = %land.lhs.true549, %land.lhs.true538
  %510 = load i32, i32* %pic_pix_x.addr, align 4
  %511 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @pred_MV_ref, i64 0, i64 0), align 4
  %div554 = sdiv i32 %511, 4
  %add555 = add nsw i32 %510, %div554
  store i32 %add555, i32* %cand_x, align 4
  %512 = load i32, i32* %pic_pix_y.addr, align 4
  %513 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @pred_MV_ref, i64 0, i64 1), align 4
  %div556 = sdiv i32 %513, 4
  %add557 = add nsw i32 %512, %div556
  store i32 %add557, i32* %cand_y, align 4
  %514 = load i32, i32* %cand_x, align 4
  %515 = load i32, i32* %center_x, align 4
  %sub558 = sub nsw i32 %514, %515
  %call559 = call i32 @abs(i32 %sub558) #6
  %516 = load i32, i32* %search_range.addr, align 4
  %cmp560 = icmp sle i32 %call559, %516
  br i1 %cmp560, label %land.lhs.true562, label %if.end603

land.lhs.true562:                                 ; preds = %if.then553
  %517 = load i32, i32* %cand_y, align 4
  %518 = load i32, i32* %center_y, align 4
  %sub563 = sub nsw i32 %517, %518
  %call564 = call i32 @abs(i32 %sub563) #6
  %519 = load i32, i32* %search_range.addr, align 4
  %cmp565 = icmp sle i32 %call564, %519
  br i1 %cmp565, label %if.then567, label %if.end603

if.then567:                                       ; preds = %land.lhs.true562
  %520 = load i32**, i32*** @McostState, align 8
  %521 = load i32, i32* %cand_y, align 4
  %522 = load i32, i32* %center_y, align 4
  %sub568 = sub nsw i32 %521, %522
  %523 = load i32, i32* %search_range.addr, align 4
  %add569 = add nsw i32 %sub568, %523
  %idxprom570 = sext i32 %add569 to i64
  %arrayidx571 = getelementptr inbounds i32*, i32** %520, i64 %idxprom570
  %524 = load i32*, i32** %arrayidx571, align 8
  %525 = load i32, i32* %cand_x, align 4
  %526 = load i32, i32* %center_x, align 4
  %sub572 = sub nsw i32 %525, %526
  %527 = load i32, i32* %search_range.addr, align 4
  %add573 = add nsw i32 %sub572, %527
  %idxprom574 = sext i32 %add573 to i64
  %arrayidx575 = getelementptr inbounds i32, i32* %524, i64 %idxprom574
  %528 = load i32, i32* %arrayidx575, align 4
  %tobool576 = icmp ne i32 %528, 0
  br i1 %tobool576, label %if.end602, label %if.then577

if.then577:                                       ; preds = %if.then567
  %529 = load i32, i32* %lambda_factor, align 4
  %530 = load i32*, i32** @mvbits, align 8
  %531 = load i32, i32* %cand_x, align 4
  %532 = load i32, i32* %mvshift, align 4
  %shl578 = shl i32 %531, %532
  %533 = load i32, i32* %pred_x, align 4
  %sub579 = sub nsw i32 %shl578, %533
  %idxprom580 = sext i32 %sub579 to i64
  %arrayidx581 = getelementptr inbounds i32, i32* %530, i64 %idxprom580
  %534 = load i32, i32* %arrayidx581, align 4
  %535 = load i32*, i32** @mvbits, align 8
  %536 = load i32, i32* %cand_y, align 4
  %537 = load i32, i32* %mvshift, align 4
  %shl582 = shl i32 %536, %537
  %538 = load i32, i32* %pred_y, align 4
  %sub583 = sub nsw i32 %shl582, %538
  %idxprom584 = sext i32 %sub583 to i64
  %arrayidx585 = getelementptr inbounds i32, i32* %535, i64 %idxprom584
  %539 = load i32, i32* %arrayidx585, align 4
  %add586 = add nsw i32 %534, %539
  %mul587 = mul nsw i32 %529, %add586
  %shr588 = ashr i32 %mul587, 16
  store i32 %shr588, i32* %mcost, align 4
  %540 = load i16*, i16** %ref_pic, align 8
  %541 = load i16**, i16*** %orig_pic.addr, align 8
  %542 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %543 = load i32, i32* %blocksize_y, align 4
  %544 = load i32, i32* %blocksize_x, align 4
  %545 = load i32, i32* %blocksize_x4, align 4
  %546 = load i32, i32* %mcost, align 4
  %547 = load i32, i32* %min_mcost.addr, align 4
  %548 = load i32, i32* %cand_x, align 4
  %549 = load i32, i32* %cand_y, align 4
  %call589 = call i32 @PartCalMad(i16* %540, i16** %541, i16* (i32, i16*, i32, i32, i32, i32)* %542, i32 %543, i32 %544, i32 %545, i32 %546, i32 %547, i32 %548, i32 %549)
  store i32 %call589, i32* %mcost, align 4
  %550 = load i32, i32* %mcost, align 4
  %551 = load i32**, i32*** @McostState, align 8
  %552 = load i32, i32* %cand_y, align 4
  %553 = load i32, i32* %center_y, align 4
  %sub590 = sub nsw i32 %552, %553
  %554 = load i32, i32* %search_range.addr, align 4
  %add591 = add nsw i32 %sub590, %554
  %idxprom592 = sext i32 %add591 to i64
  %arrayidx593 = getelementptr inbounds i32*, i32** %551, i64 %idxprom592
  %555 = load i32*, i32** %arrayidx593, align 8
  %556 = load i32, i32* %cand_x, align 4
  %557 = load i32, i32* %center_x, align 4
  %sub594 = sub nsw i32 %556, %557
  %558 = load i32, i32* %search_range.addr, align 4
  %add595 = add nsw i32 %sub594, %558
  %idxprom596 = sext i32 %add595 to i64
  %arrayidx597 = getelementptr inbounds i32, i32* %555, i64 %idxprom596
  store i32 %550, i32* %arrayidx597, align 4
  %559 = load i32, i32* %mcost, align 4
  %560 = load i32, i32* %min_mcost.addr, align 4
  %cmp598 = icmp slt i32 %559, %560
  br i1 %cmp598, label %if.then600, label %if.end601

if.then600:                                       ; preds = %if.then577
  %561 = load i32, i32* %cand_x, align 4
  store i32 %561, i32* %best_x, align 4
  %562 = load i32, i32* %cand_y, align 4
  store i32 %562, i32* %best_y, align 4
  %563 = load i32, i32* %mcost, align 4
  store i32 %563, i32* %min_mcost.addr, align 4
  br label %if.end601

if.end601:                                        ; preds = %if.then600, %if.then577
  br label %if.end602

if.end602:                                        ; preds = %if.end601, %if.then567
  br label %if.end603

if.end603:                                        ; preds = %if.end602, %land.lhs.true562, %if.then553
  br label %if.end604

if.end604:                                        ; preds = %if.end603, %land.lhs.true549, %land.lhs.true546, %lor.lhs.false542
  br label %if.end605

if.end605:                                        ; preds = %if.end604, %if.end534
  %564 = load i32, i32* %best_x, align 4
  store i32 %564, i32* %iXMinNow, align 4
  %565 = load i32, i32* %best_y, align 4
  store i32 %565, i32* %iYMinNow, align 4
  store i32 0, i32* %m, align 4
  br label %for.cond606

for.cond606:                                      ; preds = %for.inc662, %if.end605
  %566 = load i32, i32* %m, align 4
  %cmp607 = icmp slt i32 %566, 4
  br i1 %cmp607, label %for.body609, label %for.end664

for.body609:                                      ; preds = %for.cond606
  %567 = load i32, i32* %iXMinNow, align 4
  %568 = load i32, i32* %m, align 4
  %idxprom610 = sext i32 %568 to i64
  %arrayidx611 = getelementptr inbounds [4 x i32], [4 x i32]* @FastIntegerPelBlockMotionSearch.Diamond_x, i64 0, i64 %idxprom610
  %569 = load i32, i32* %arrayidx611, align 4
  %add612 = add nsw i32 %567, %569
  store i32 %add612, i32* %cand_x, align 4
  %570 = load i32, i32* %iYMinNow, align 4
  %571 = load i32, i32* %m, align 4
  %idxprom613 = sext i32 %571 to i64
  %arrayidx614 = getelementptr inbounds [4 x i32], [4 x i32]* @FastIntegerPelBlockMotionSearch.Diamond_y, i64 0, i64 %idxprom613
  %572 = load i32, i32* %arrayidx614, align 4
  %add615 = add nsw i32 %570, %572
  store i32 %add615, i32* %cand_y, align 4
  %573 = load i32, i32* %cand_x, align 4
  %574 = load i32, i32* %center_x, align 4
  %sub616 = sub nsw i32 %573, %574
  %call617 = call i32 @abs(i32 %sub616) #6
  %575 = load i32, i32* %search_range.addr, align 4
  %cmp618 = icmp sle i32 %call617, %575
  br i1 %cmp618, label %land.lhs.true620, label %if.end661

land.lhs.true620:                                 ; preds = %for.body609
  %576 = load i32, i32* %cand_y, align 4
  %577 = load i32, i32* %center_y, align 4
  %sub621 = sub nsw i32 %576, %577
  %call622 = call i32 @abs(i32 %sub621) #6
  %578 = load i32, i32* %search_range.addr, align 4
  %cmp623 = icmp sle i32 %call622, %578
  br i1 %cmp623, label %if.then625, label %if.end661

if.then625:                                       ; preds = %land.lhs.true620
  %579 = load i32**, i32*** @McostState, align 8
  %580 = load i32, i32* %cand_y, align 4
  %581 = load i32, i32* %center_y, align 4
  %sub626 = sub nsw i32 %580, %581
  %582 = load i32, i32* %search_range.addr, align 4
  %add627 = add nsw i32 %sub626, %582
  %idxprom628 = sext i32 %add627 to i64
  %arrayidx629 = getelementptr inbounds i32*, i32** %579, i64 %idxprom628
  %583 = load i32*, i32** %arrayidx629, align 8
  %584 = load i32, i32* %cand_x, align 4
  %585 = load i32, i32* %center_x, align 4
  %sub630 = sub nsw i32 %584, %585
  %586 = load i32, i32* %search_range.addr, align 4
  %add631 = add nsw i32 %sub630, %586
  %idxprom632 = sext i32 %add631 to i64
  %arrayidx633 = getelementptr inbounds i32, i32* %583, i64 %idxprom632
  %587 = load i32, i32* %arrayidx633, align 4
  %tobool634 = icmp ne i32 %587, 0
  br i1 %tobool634, label %if.end660, label %if.then635

if.then635:                                       ; preds = %if.then625
  %588 = load i32, i32* %lambda_factor, align 4
  %589 = load i32*, i32** @mvbits, align 8
  %590 = load i32, i32* %cand_x, align 4
  %591 = load i32, i32* %mvshift, align 4
  %shl636 = shl i32 %590, %591
  %592 = load i32, i32* %pred_x, align 4
  %sub637 = sub nsw i32 %shl636, %592
  %idxprom638 = sext i32 %sub637 to i64
  %arrayidx639 = getelementptr inbounds i32, i32* %589, i64 %idxprom638
  %593 = load i32, i32* %arrayidx639, align 4
  %594 = load i32*, i32** @mvbits, align 8
  %595 = load i32, i32* %cand_y, align 4
  %596 = load i32, i32* %mvshift, align 4
  %shl640 = shl i32 %595, %596
  %597 = load i32, i32* %pred_y, align 4
  %sub641 = sub nsw i32 %shl640, %597
  %idxprom642 = sext i32 %sub641 to i64
  %arrayidx643 = getelementptr inbounds i32, i32* %594, i64 %idxprom642
  %598 = load i32, i32* %arrayidx643, align 4
  %add644 = add nsw i32 %593, %598
  %mul645 = mul nsw i32 %588, %add644
  %shr646 = ashr i32 %mul645, 16
  store i32 %shr646, i32* %mcost, align 4
  %599 = load i16*, i16** %ref_pic, align 8
  %600 = load i16**, i16*** %orig_pic.addr, align 8
  %601 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %602 = load i32, i32* %blocksize_y, align 4
  %603 = load i32, i32* %blocksize_x, align 4
  %604 = load i32, i32* %blocksize_x4, align 4
  %605 = load i32, i32* %mcost, align 4
  %606 = load i32, i32* %min_mcost.addr, align 4
  %607 = load i32, i32* %cand_x, align 4
  %608 = load i32, i32* %cand_y, align 4
  %call647 = call i32 @PartCalMad(i16* %599, i16** %600, i16* (i32, i16*, i32, i32, i32, i32)* %601, i32 %602, i32 %603, i32 %604, i32 %605, i32 %606, i32 %607, i32 %608)
  store i32 %call647, i32* %mcost, align 4
  %609 = load i32, i32* %mcost, align 4
  %610 = load i32**, i32*** @McostState, align 8
  %611 = load i32, i32* %cand_y, align 4
  %612 = load i32, i32* %center_y, align 4
  %sub648 = sub nsw i32 %611, %612
  %613 = load i32, i32* %search_range.addr, align 4
  %add649 = add nsw i32 %sub648, %613
  %idxprom650 = sext i32 %add649 to i64
  %arrayidx651 = getelementptr inbounds i32*, i32** %610, i64 %idxprom650
  %614 = load i32*, i32** %arrayidx651, align 8
  %615 = load i32, i32* %cand_x, align 4
  %616 = load i32, i32* %center_x, align 4
  %sub652 = sub nsw i32 %615, %616
  %617 = load i32, i32* %search_range.addr, align 4
  %add653 = add nsw i32 %sub652, %617
  %idxprom654 = sext i32 %add653 to i64
  %arrayidx655 = getelementptr inbounds i32, i32* %614, i64 %idxprom654
  store i32 %609, i32* %arrayidx655, align 4
  %618 = load i32, i32* %mcost, align 4
  %619 = load i32, i32* %min_mcost.addr, align 4
  %cmp656 = icmp slt i32 %618, %619
  br i1 %cmp656, label %if.then658, label %if.end659

if.then658:                                       ; preds = %if.then635
  %620 = load i32, i32* %cand_x, align 4
  store i32 %620, i32* %best_x, align 4
  %621 = load i32, i32* %cand_y, align 4
  store i32 %621, i32* %best_y, align 4
  %622 = load i32, i32* %mcost, align 4
  store i32 %622, i32* %min_mcost.addr, align 4
  br label %if.end659

if.end659:                                        ; preds = %if.then658, %if.then635
  br label %if.end660

if.end660:                                        ; preds = %if.end659, %if.then625
  br label %if.end661

if.end661:                                        ; preds = %if.end660, %land.lhs.true620, %for.body609
  br label %for.inc662

for.inc662:                                       ; preds = %if.end661
  %623 = load i32, i32* %m, align 4
  %inc663 = add nsw i32 %623, 1
  store i32 %inc663, i32* %m, align 4
  br label %for.cond606

for.end664:                                       ; preds = %for.cond606
  %624 = load i16, i16* %ref.addr, align 2
  %conv665 = sext i16 %624 to i32
  %cmp666 = icmp sgt i32 %conv665, 0
  br i1 %cmp666, label %if.then668, label %if.else686

if.then668:                                       ; preds = %for.end664
  %625 = load i32, i32* %min_mcost.addr, align 4
  %626 = load i32, i32* @pred_SAD_ref, align 4
  %sub669 = sub nsw i32 %625, %626
  %conv670 = sitofp i32 %sub669 to float
  %627 = load i32, i32* @pred_SAD_ref, align 4
  %conv671 = sitofp i32 %627 to float
  %628 = load float, float* %betaThird, align 4
  %mul672 = fmul float %conv671, %628
  %cmp673 = fcmp olt float %conv670, %mul672
  br i1 %cmp673, label %if.then675, label %if.else676

if.then675:                                       ; preds = %if.then668
  br label %third_step

if.else676:                                       ; preds = %if.then668
  %629 = load i32, i32* %min_mcost.addr, align 4
  %630 = load i32, i32* @pred_SAD_ref, align 4
  %sub677 = sub nsw i32 %629, %630
  %conv678 = sitofp i32 %sub677 to float
  %631 = load i32, i32* @pred_SAD_ref, align 4
  %conv679 = sitofp i32 %631 to float
  %632 = load float, float* %betaSec, align 4
  %mul680 = fmul float %conv679, %632
  %cmp681 = fcmp olt float %conv678, %mul680
  br i1 %cmp681, label %if.then683, label %if.end684

if.then683:                                       ; preds = %if.else676
  br label %sec_step

if.end684:                                        ; preds = %if.else676
  br label %if.end685

if.end685:                                        ; preds = %if.end684
  br label %if.end726

if.else686:                                       ; preds = %for.end664
  %633 = load i32, i32* %blocktype.addr, align 4
  %cmp687 = icmp sgt i32 %633, 1
  br i1 %cmp687, label %if.then689, label %if.else707

if.then689:                                       ; preds = %if.else686
  %634 = load i32, i32* %min_mcost.addr, align 4
  %635 = load i32, i32* @pred_SAD_uplayer, align 4
  %sub690 = sub nsw i32 %634, %635
  %conv691 = sitofp i32 %sub690 to float
  %636 = load i32, i32* @pred_SAD_uplayer, align 4
  %conv692 = sitofp i32 %636 to float
  %637 = load float, float* %betaThird, align 4
  %mul693 = fmul float %conv692, %637
  %cmp694 = fcmp olt float %conv691, %mul693
  br i1 %cmp694, label %if.then696, label %if.else697

if.then696:                                       ; preds = %if.then689
  br label %third_step

if.else697:                                       ; preds = %if.then689
  %638 = load i32, i32* %min_mcost.addr, align 4
  %639 = load i32, i32* @pred_SAD_uplayer, align 4
  %sub698 = sub nsw i32 %638, %639
  %conv699 = sitofp i32 %sub698 to float
  %640 = load i32, i32* @pred_SAD_uplayer, align 4
  %conv700 = sitofp i32 %640 to float
  %641 = load float, float* %betaSec, align 4
  %mul701 = fmul float %conv700, %641
  %cmp702 = fcmp olt float %conv699, %mul701
  br i1 %cmp702, label %if.then704, label %if.end705

if.then704:                                       ; preds = %if.else697
  br label %sec_step

if.end705:                                        ; preds = %if.else697
  br label %if.end706

if.end706:                                        ; preds = %if.end705
  br label %if.end725

if.else707:                                       ; preds = %if.else686
  %642 = load i32, i32* %min_mcost.addr, align 4
  %643 = load i32, i32* @pred_SAD_space, align 4
  %sub708 = sub nsw i32 %642, %643
  %conv709 = sitofp i32 %sub708 to float
  %644 = load i32, i32* @pred_SAD_space, align 4
  %conv710 = sitofp i32 %644 to float
  %645 = load float, float* %betaThird, align 4
  %mul711 = fmul float %conv710, %645
  %cmp712 = fcmp olt float %conv709, %mul711
  br i1 %cmp712, label %if.then714, label %if.else715

if.then714:                                       ; preds = %if.else707
  br label %third_step

if.else715:                                       ; preds = %if.else707
  %646 = load i32, i32* %min_mcost.addr, align 4
  %647 = load i32, i32* @pred_SAD_space, align 4
  %sub716 = sub nsw i32 %646, %647
  %conv717 = sitofp i32 %sub716 to float
  %648 = load i32, i32* @pred_SAD_space, align 4
  %conv718 = sitofp i32 %648 to float
  %649 = load float, float* %betaSec, align 4
  %mul719 = fmul float %conv718, %649
  %cmp720 = fcmp olt float %conv717, %mul719
  br i1 %cmp720, label %if.then722, label %if.end723

if.then722:                                       ; preds = %if.else715
  br label %sec_step

if.end723:                                        ; preds = %if.else715
  br label %if.end724

if.end724:                                        ; preds = %if.end723
  br label %if.end725

if.end725:                                        ; preds = %if.end724, %if.end706
  br label %if.end726

if.end726:                                        ; preds = %if.end725, %if.end685
  %650 = load i32, i32* %blocktype.addr, align 4
  %cmp727 = icmp sgt i32 %650, 6
  br i1 %cmp727, label %if.then729, label %if.else730

if.then729:                                       ; preds = %if.end726
  br label %sec_step

if.else730:                                       ; preds = %if.end726
  br label %first_step

first_step:                                       ; preds = %if.else730
  %651 = load i32, i32* %best_x, align 4
  store i32 %651, i32* %iXMinNow, align 4
  %652 = load i32, i32* %best_y, align 4
  store i32 %652, i32* %iYMinNow, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond731

for.cond731:                                      ; preds = %for.inc832, %first_step
  %653 = load i32, i32* %i, align 4
  %654 = load i32, i32* %search_range.addr, align 4
  %div732 = sdiv i32 %654, 2
  %cmp733 = icmp sle i32 %653, %div732
  br i1 %cmp733, label %for.body735, label %for.end834

for.body735:                                      ; preds = %for.cond731
  %655 = load i32, i32* %i, align 4
  %mul736 = mul nsw i32 2, %655
  %sub737 = sub nsw i32 %mul736, 1
  store i32 %sub737, i32* %search_step, align 4
  %656 = load i32, i32* %iXMinNow, align 4
  %657 = load i32, i32* %search_step, align 4
  %add738 = add nsw i32 %656, %657
  store i32 %add738, i32* %cand_x, align 4
  %658 = load i32, i32* %iYMinNow, align 4
  store i32 %658, i32* %cand_y, align 4
  %659 = load i32, i32* %cand_x, align 4
  %660 = load i32, i32* %center_x, align 4
  %sub739 = sub nsw i32 %659, %660
  %call740 = call i32 @abs(i32 %sub739) #6
  %661 = load i32, i32* %search_range.addr, align 4
  %cmp741 = icmp sle i32 %call740, %661
  br i1 %cmp741, label %land.lhs.true743, label %if.end784

land.lhs.true743:                                 ; preds = %for.body735
  %662 = load i32, i32* %cand_y, align 4
  %663 = load i32, i32* %center_y, align 4
  %sub744 = sub nsw i32 %662, %663
  %call745 = call i32 @abs(i32 %sub744) #6
  %664 = load i32, i32* %search_range.addr, align 4
  %cmp746 = icmp sle i32 %call745, %664
  br i1 %cmp746, label %if.then748, label %if.end784

if.then748:                                       ; preds = %land.lhs.true743
  %665 = load i32**, i32*** @McostState, align 8
  %666 = load i32, i32* %cand_y, align 4
  %667 = load i32, i32* %center_y, align 4
  %sub749 = sub nsw i32 %666, %667
  %668 = load i32, i32* %search_range.addr, align 4
  %add750 = add nsw i32 %sub749, %668
  %idxprom751 = sext i32 %add750 to i64
  %arrayidx752 = getelementptr inbounds i32*, i32** %665, i64 %idxprom751
  %669 = load i32*, i32** %arrayidx752, align 8
  %670 = load i32, i32* %cand_x, align 4
  %671 = load i32, i32* %center_x, align 4
  %sub753 = sub nsw i32 %670, %671
  %672 = load i32, i32* %search_range.addr, align 4
  %add754 = add nsw i32 %sub753, %672
  %idxprom755 = sext i32 %add754 to i64
  %arrayidx756 = getelementptr inbounds i32, i32* %669, i64 %idxprom755
  %673 = load i32, i32* %arrayidx756, align 4
  %tobool757 = icmp ne i32 %673, 0
  br i1 %tobool757, label %if.end783, label %if.then758

if.then758:                                       ; preds = %if.then748
  %674 = load i32, i32* %lambda_factor, align 4
  %675 = load i32*, i32** @mvbits, align 8
  %676 = load i32, i32* %cand_x, align 4
  %677 = load i32, i32* %mvshift, align 4
  %shl759 = shl i32 %676, %677
  %678 = load i32, i32* %pred_x, align 4
  %sub760 = sub nsw i32 %shl759, %678
  %idxprom761 = sext i32 %sub760 to i64
  %arrayidx762 = getelementptr inbounds i32, i32* %675, i64 %idxprom761
  %679 = load i32, i32* %arrayidx762, align 4
  %680 = load i32*, i32** @mvbits, align 8
  %681 = load i32, i32* %cand_y, align 4
  %682 = load i32, i32* %mvshift, align 4
  %shl763 = shl i32 %681, %682
  %683 = load i32, i32* %pred_y, align 4
  %sub764 = sub nsw i32 %shl763, %683
  %idxprom765 = sext i32 %sub764 to i64
  %arrayidx766 = getelementptr inbounds i32, i32* %680, i64 %idxprom765
  %684 = load i32, i32* %arrayidx766, align 4
  %add767 = add nsw i32 %679, %684
  %mul768 = mul nsw i32 %674, %add767
  %shr769 = ashr i32 %mul768, 16
  store i32 %shr769, i32* %mcost, align 4
  %685 = load i16*, i16** %ref_pic, align 8
  %686 = load i16**, i16*** %orig_pic.addr, align 8
  %687 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %688 = load i32, i32* %blocksize_y, align 4
  %689 = load i32, i32* %blocksize_x, align 4
  %690 = load i32, i32* %blocksize_x4, align 4
  %691 = load i32, i32* %mcost, align 4
  %692 = load i32, i32* %min_mcost.addr, align 4
  %693 = load i32, i32* %cand_x, align 4
  %694 = load i32, i32* %cand_y, align 4
  %call770 = call i32 @PartCalMad(i16* %685, i16** %686, i16* (i32, i16*, i32, i32, i32, i32)* %687, i32 %688, i32 %689, i32 %690, i32 %691, i32 %692, i32 %693, i32 %694)
  store i32 %call770, i32* %mcost, align 4
  %695 = load i32, i32* %mcost, align 4
  %696 = load i32**, i32*** @McostState, align 8
  %697 = load i32, i32* %cand_y, align 4
  %698 = load i32, i32* %center_y, align 4
  %sub771 = sub nsw i32 %697, %698
  %699 = load i32, i32* %search_range.addr, align 4
  %add772 = add nsw i32 %sub771, %699
  %idxprom773 = sext i32 %add772 to i64
  %arrayidx774 = getelementptr inbounds i32*, i32** %696, i64 %idxprom773
  %700 = load i32*, i32** %arrayidx774, align 8
  %701 = load i32, i32* %cand_x, align 4
  %702 = load i32, i32* %center_x, align 4
  %sub775 = sub nsw i32 %701, %702
  %703 = load i32, i32* %search_range.addr, align 4
  %add776 = add nsw i32 %sub775, %703
  %idxprom777 = sext i32 %add776 to i64
  %arrayidx778 = getelementptr inbounds i32, i32* %700, i64 %idxprom777
  store i32 %695, i32* %arrayidx778, align 4
  %704 = load i32, i32* %mcost, align 4
  %705 = load i32, i32* %min_mcost.addr, align 4
  %cmp779 = icmp slt i32 %704, %705
  br i1 %cmp779, label %if.then781, label %if.end782

if.then781:                                       ; preds = %if.then758
  %706 = load i32, i32* %cand_x, align 4
  store i32 %706, i32* %best_x, align 4
  %707 = load i32, i32* %cand_y, align 4
  store i32 %707, i32* %best_y, align 4
  %708 = load i32, i32* %mcost, align 4
  store i32 %708, i32* %min_mcost.addr, align 4
  br label %if.end782

if.end782:                                        ; preds = %if.then781, %if.then758
  br label %if.end783

if.end783:                                        ; preds = %if.end782, %if.then748
  br label %if.end784

if.end784:                                        ; preds = %if.end783, %land.lhs.true743, %for.body735
  %709 = load i32, i32* %iXMinNow, align 4
  %710 = load i32, i32* %search_step, align 4
  %sub785 = sub nsw i32 %709, %710
  store i32 %sub785, i32* %cand_x, align 4
  %711 = load i32, i32* %iYMinNow, align 4
  store i32 %711, i32* %cand_y, align 4
  %712 = load i32, i32* %cand_x, align 4
  %713 = load i32, i32* %center_x, align 4
  %sub786 = sub nsw i32 %712, %713
  %call787 = call i32 @abs(i32 %sub786) #6
  %714 = load i32, i32* %search_range.addr, align 4
  %cmp788 = icmp sle i32 %call787, %714
  br i1 %cmp788, label %land.lhs.true790, label %if.end831

land.lhs.true790:                                 ; preds = %if.end784
  %715 = load i32, i32* %cand_y, align 4
  %716 = load i32, i32* %center_y, align 4
  %sub791 = sub nsw i32 %715, %716
  %call792 = call i32 @abs(i32 %sub791) #6
  %717 = load i32, i32* %search_range.addr, align 4
  %cmp793 = icmp sle i32 %call792, %717
  br i1 %cmp793, label %if.then795, label %if.end831

if.then795:                                       ; preds = %land.lhs.true790
  %718 = load i32**, i32*** @McostState, align 8
  %719 = load i32, i32* %cand_y, align 4
  %720 = load i32, i32* %center_y, align 4
  %sub796 = sub nsw i32 %719, %720
  %721 = load i32, i32* %search_range.addr, align 4
  %add797 = add nsw i32 %sub796, %721
  %idxprom798 = sext i32 %add797 to i64
  %arrayidx799 = getelementptr inbounds i32*, i32** %718, i64 %idxprom798
  %722 = load i32*, i32** %arrayidx799, align 8
  %723 = load i32, i32* %cand_x, align 4
  %724 = load i32, i32* %center_x, align 4
  %sub800 = sub nsw i32 %723, %724
  %725 = load i32, i32* %search_range.addr, align 4
  %add801 = add nsw i32 %sub800, %725
  %idxprom802 = sext i32 %add801 to i64
  %arrayidx803 = getelementptr inbounds i32, i32* %722, i64 %idxprom802
  %726 = load i32, i32* %arrayidx803, align 4
  %tobool804 = icmp ne i32 %726, 0
  br i1 %tobool804, label %if.end830, label %if.then805

if.then805:                                       ; preds = %if.then795
  %727 = load i32, i32* %lambda_factor, align 4
  %728 = load i32*, i32** @mvbits, align 8
  %729 = load i32, i32* %cand_x, align 4
  %730 = load i32, i32* %mvshift, align 4
  %shl806 = shl i32 %729, %730
  %731 = load i32, i32* %pred_x, align 4
  %sub807 = sub nsw i32 %shl806, %731
  %idxprom808 = sext i32 %sub807 to i64
  %arrayidx809 = getelementptr inbounds i32, i32* %728, i64 %idxprom808
  %732 = load i32, i32* %arrayidx809, align 4
  %733 = load i32*, i32** @mvbits, align 8
  %734 = load i32, i32* %cand_y, align 4
  %735 = load i32, i32* %mvshift, align 4
  %shl810 = shl i32 %734, %735
  %736 = load i32, i32* %pred_y, align 4
  %sub811 = sub nsw i32 %shl810, %736
  %idxprom812 = sext i32 %sub811 to i64
  %arrayidx813 = getelementptr inbounds i32, i32* %733, i64 %idxprom812
  %737 = load i32, i32* %arrayidx813, align 4
  %add814 = add nsw i32 %732, %737
  %mul815 = mul nsw i32 %727, %add814
  %shr816 = ashr i32 %mul815, 16
  store i32 %shr816, i32* %mcost, align 4
  %738 = load i16*, i16** %ref_pic, align 8
  %739 = load i16**, i16*** %orig_pic.addr, align 8
  %740 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %741 = load i32, i32* %blocksize_y, align 4
  %742 = load i32, i32* %blocksize_x, align 4
  %743 = load i32, i32* %blocksize_x4, align 4
  %744 = load i32, i32* %mcost, align 4
  %745 = load i32, i32* %min_mcost.addr, align 4
  %746 = load i32, i32* %cand_x, align 4
  %747 = load i32, i32* %cand_y, align 4
  %call817 = call i32 @PartCalMad(i16* %738, i16** %739, i16* (i32, i16*, i32, i32, i32, i32)* %740, i32 %741, i32 %742, i32 %743, i32 %744, i32 %745, i32 %746, i32 %747)
  store i32 %call817, i32* %mcost, align 4
  %748 = load i32, i32* %mcost, align 4
  %749 = load i32**, i32*** @McostState, align 8
  %750 = load i32, i32* %cand_y, align 4
  %751 = load i32, i32* %center_y, align 4
  %sub818 = sub nsw i32 %750, %751
  %752 = load i32, i32* %search_range.addr, align 4
  %add819 = add nsw i32 %sub818, %752
  %idxprom820 = sext i32 %add819 to i64
  %arrayidx821 = getelementptr inbounds i32*, i32** %749, i64 %idxprom820
  %753 = load i32*, i32** %arrayidx821, align 8
  %754 = load i32, i32* %cand_x, align 4
  %755 = load i32, i32* %center_x, align 4
  %sub822 = sub nsw i32 %754, %755
  %756 = load i32, i32* %search_range.addr, align 4
  %add823 = add nsw i32 %sub822, %756
  %idxprom824 = sext i32 %add823 to i64
  %arrayidx825 = getelementptr inbounds i32, i32* %753, i64 %idxprom824
  store i32 %748, i32* %arrayidx825, align 4
  %757 = load i32, i32* %mcost, align 4
  %758 = load i32, i32* %min_mcost.addr, align 4
  %cmp826 = icmp slt i32 %757, %758
  br i1 %cmp826, label %if.then828, label %if.end829

if.then828:                                       ; preds = %if.then805
  %759 = load i32, i32* %cand_x, align 4
  store i32 %759, i32* %best_x, align 4
  %760 = load i32, i32* %cand_y, align 4
  store i32 %760, i32* %best_y, align 4
  %761 = load i32, i32* %mcost, align 4
  store i32 %761, i32* %min_mcost.addr, align 4
  br label %if.end829

if.end829:                                        ; preds = %if.then828, %if.then805
  br label %if.end830

if.end830:                                        ; preds = %if.end829, %if.then795
  br label %if.end831

if.end831:                                        ; preds = %if.end830, %land.lhs.true790, %if.end784
  br label %for.inc832

for.inc832:                                       ; preds = %if.end831
  %762 = load i32, i32* %i, align 4
  %inc833 = add nsw i32 %762, 1
  store i32 %inc833, i32* %i, align 4
  br label %for.cond731

for.end834:                                       ; preds = %for.cond731
  store i32 1, i32* %i, align 4
  br label %for.cond835

for.cond835:                                      ; preds = %for.inc936, %for.end834
  %763 = load i32, i32* %i, align 4
  %764 = load i32, i32* %search_range.addr, align 4
  %div836 = sdiv i32 %764, 4
  %cmp837 = icmp sle i32 %763, %div836
  br i1 %cmp837, label %for.body839, label %for.end938

for.body839:                                      ; preds = %for.cond835
  %765 = load i32, i32* %i, align 4
  %mul840 = mul nsw i32 2, %765
  %sub841 = sub nsw i32 %mul840, 1
  store i32 %sub841, i32* %search_step, align 4
  %766 = load i32, i32* %iXMinNow, align 4
  store i32 %766, i32* %cand_x, align 4
  %767 = load i32, i32* %iYMinNow, align 4
  %768 = load i32, i32* %search_step, align 4
  %add842 = add nsw i32 %767, %768
  store i32 %add842, i32* %cand_y, align 4
  %769 = load i32, i32* %cand_x, align 4
  %770 = load i32, i32* %center_x, align 4
  %sub843 = sub nsw i32 %769, %770
  %call844 = call i32 @abs(i32 %sub843) #6
  %771 = load i32, i32* %search_range.addr, align 4
  %cmp845 = icmp sle i32 %call844, %771
  br i1 %cmp845, label %land.lhs.true847, label %if.end888

land.lhs.true847:                                 ; preds = %for.body839
  %772 = load i32, i32* %cand_y, align 4
  %773 = load i32, i32* %center_y, align 4
  %sub848 = sub nsw i32 %772, %773
  %call849 = call i32 @abs(i32 %sub848) #6
  %774 = load i32, i32* %search_range.addr, align 4
  %cmp850 = icmp sle i32 %call849, %774
  br i1 %cmp850, label %if.then852, label %if.end888

if.then852:                                       ; preds = %land.lhs.true847
  %775 = load i32**, i32*** @McostState, align 8
  %776 = load i32, i32* %cand_y, align 4
  %777 = load i32, i32* %center_y, align 4
  %sub853 = sub nsw i32 %776, %777
  %778 = load i32, i32* %search_range.addr, align 4
  %add854 = add nsw i32 %sub853, %778
  %idxprom855 = sext i32 %add854 to i64
  %arrayidx856 = getelementptr inbounds i32*, i32** %775, i64 %idxprom855
  %779 = load i32*, i32** %arrayidx856, align 8
  %780 = load i32, i32* %cand_x, align 4
  %781 = load i32, i32* %center_x, align 4
  %sub857 = sub nsw i32 %780, %781
  %782 = load i32, i32* %search_range.addr, align 4
  %add858 = add nsw i32 %sub857, %782
  %idxprom859 = sext i32 %add858 to i64
  %arrayidx860 = getelementptr inbounds i32, i32* %779, i64 %idxprom859
  %783 = load i32, i32* %arrayidx860, align 4
  %tobool861 = icmp ne i32 %783, 0
  br i1 %tobool861, label %if.end887, label %if.then862

if.then862:                                       ; preds = %if.then852
  %784 = load i32, i32* %lambda_factor, align 4
  %785 = load i32*, i32** @mvbits, align 8
  %786 = load i32, i32* %cand_x, align 4
  %787 = load i32, i32* %mvshift, align 4
  %shl863 = shl i32 %786, %787
  %788 = load i32, i32* %pred_x, align 4
  %sub864 = sub nsw i32 %shl863, %788
  %idxprom865 = sext i32 %sub864 to i64
  %arrayidx866 = getelementptr inbounds i32, i32* %785, i64 %idxprom865
  %789 = load i32, i32* %arrayidx866, align 4
  %790 = load i32*, i32** @mvbits, align 8
  %791 = load i32, i32* %cand_y, align 4
  %792 = load i32, i32* %mvshift, align 4
  %shl867 = shl i32 %791, %792
  %793 = load i32, i32* %pred_y, align 4
  %sub868 = sub nsw i32 %shl867, %793
  %idxprom869 = sext i32 %sub868 to i64
  %arrayidx870 = getelementptr inbounds i32, i32* %790, i64 %idxprom869
  %794 = load i32, i32* %arrayidx870, align 4
  %add871 = add nsw i32 %789, %794
  %mul872 = mul nsw i32 %784, %add871
  %shr873 = ashr i32 %mul872, 16
  store i32 %shr873, i32* %mcost, align 4
  %795 = load i16*, i16** %ref_pic, align 8
  %796 = load i16**, i16*** %orig_pic.addr, align 8
  %797 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %798 = load i32, i32* %blocksize_y, align 4
  %799 = load i32, i32* %blocksize_x, align 4
  %800 = load i32, i32* %blocksize_x4, align 4
  %801 = load i32, i32* %mcost, align 4
  %802 = load i32, i32* %min_mcost.addr, align 4
  %803 = load i32, i32* %cand_x, align 4
  %804 = load i32, i32* %cand_y, align 4
  %call874 = call i32 @PartCalMad(i16* %795, i16** %796, i16* (i32, i16*, i32, i32, i32, i32)* %797, i32 %798, i32 %799, i32 %800, i32 %801, i32 %802, i32 %803, i32 %804)
  store i32 %call874, i32* %mcost, align 4
  %805 = load i32, i32* %mcost, align 4
  %806 = load i32**, i32*** @McostState, align 8
  %807 = load i32, i32* %cand_y, align 4
  %808 = load i32, i32* %center_y, align 4
  %sub875 = sub nsw i32 %807, %808
  %809 = load i32, i32* %search_range.addr, align 4
  %add876 = add nsw i32 %sub875, %809
  %idxprom877 = sext i32 %add876 to i64
  %arrayidx878 = getelementptr inbounds i32*, i32** %806, i64 %idxprom877
  %810 = load i32*, i32** %arrayidx878, align 8
  %811 = load i32, i32* %cand_x, align 4
  %812 = load i32, i32* %center_x, align 4
  %sub879 = sub nsw i32 %811, %812
  %813 = load i32, i32* %search_range.addr, align 4
  %add880 = add nsw i32 %sub879, %813
  %idxprom881 = sext i32 %add880 to i64
  %arrayidx882 = getelementptr inbounds i32, i32* %810, i64 %idxprom881
  store i32 %805, i32* %arrayidx882, align 4
  %814 = load i32, i32* %mcost, align 4
  %815 = load i32, i32* %min_mcost.addr, align 4
  %cmp883 = icmp slt i32 %814, %815
  br i1 %cmp883, label %if.then885, label %if.end886

if.then885:                                       ; preds = %if.then862
  %816 = load i32, i32* %cand_x, align 4
  store i32 %816, i32* %best_x, align 4
  %817 = load i32, i32* %cand_y, align 4
  store i32 %817, i32* %best_y, align 4
  %818 = load i32, i32* %mcost, align 4
  store i32 %818, i32* %min_mcost.addr, align 4
  br label %if.end886

if.end886:                                        ; preds = %if.then885, %if.then862
  br label %if.end887

if.end887:                                        ; preds = %if.end886, %if.then852
  br label %if.end888

if.end888:                                        ; preds = %if.end887, %land.lhs.true847, %for.body839
  %819 = load i32, i32* %iXMinNow, align 4
  store i32 %819, i32* %cand_x, align 4
  %820 = load i32, i32* %iYMinNow, align 4
  %821 = load i32, i32* %search_step, align 4
  %sub889 = sub nsw i32 %820, %821
  store i32 %sub889, i32* %cand_y, align 4
  %822 = load i32, i32* %cand_x, align 4
  %823 = load i32, i32* %center_x, align 4
  %sub890 = sub nsw i32 %822, %823
  %call891 = call i32 @abs(i32 %sub890) #6
  %824 = load i32, i32* %search_range.addr, align 4
  %cmp892 = icmp sle i32 %call891, %824
  br i1 %cmp892, label %land.lhs.true894, label %if.end935

land.lhs.true894:                                 ; preds = %if.end888
  %825 = load i32, i32* %cand_y, align 4
  %826 = load i32, i32* %center_y, align 4
  %sub895 = sub nsw i32 %825, %826
  %call896 = call i32 @abs(i32 %sub895) #6
  %827 = load i32, i32* %search_range.addr, align 4
  %cmp897 = icmp sle i32 %call896, %827
  br i1 %cmp897, label %if.then899, label %if.end935

if.then899:                                       ; preds = %land.lhs.true894
  %828 = load i32**, i32*** @McostState, align 8
  %829 = load i32, i32* %cand_y, align 4
  %830 = load i32, i32* %center_y, align 4
  %sub900 = sub nsw i32 %829, %830
  %831 = load i32, i32* %search_range.addr, align 4
  %add901 = add nsw i32 %sub900, %831
  %idxprom902 = sext i32 %add901 to i64
  %arrayidx903 = getelementptr inbounds i32*, i32** %828, i64 %idxprom902
  %832 = load i32*, i32** %arrayidx903, align 8
  %833 = load i32, i32* %cand_x, align 4
  %834 = load i32, i32* %center_x, align 4
  %sub904 = sub nsw i32 %833, %834
  %835 = load i32, i32* %search_range.addr, align 4
  %add905 = add nsw i32 %sub904, %835
  %idxprom906 = sext i32 %add905 to i64
  %arrayidx907 = getelementptr inbounds i32, i32* %832, i64 %idxprom906
  %836 = load i32, i32* %arrayidx907, align 4
  %tobool908 = icmp ne i32 %836, 0
  br i1 %tobool908, label %if.end934, label %if.then909

if.then909:                                       ; preds = %if.then899
  %837 = load i32, i32* %lambda_factor, align 4
  %838 = load i32*, i32** @mvbits, align 8
  %839 = load i32, i32* %cand_x, align 4
  %840 = load i32, i32* %mvshift, align 4
  %shl910 = shl i32 %839, %840
  %841 = load i32, i32* %pred_x, align 4
  %sub911 = sub nsw i32 %shl910, %841
  %idxprom912 = sext i32 %sub911 to i64
  %arrayidx913 = getelementptr inbounds i32, i32* %838, i64 %idxprom912
  %842 = load i32, i32* %arrayidx913, align 4
  %843 = load i32*, i32** @mvbits, align 8
  %844 = load i32, i32* %cand_y, align 4
  %845 = load i32, i32* %mvshift, align 4
  %shl914 = shl i32 %844, %845
  %846 = load i32, i32* %pred_y, align 4
  %sub915 = sub nsw i32 %shl914, %846
  %idxprom916 = sext i32 %sub915 to i64
  %arrayidx917 = getelementptr inbounds i32, i32* %843, i64 %idxprom916
  %847 = load i32, i32* %arrayidx917, align 4
  %add918 = add nsw i32 %842, %847
  %mul919 = mul nsw i32 %837, %add918
  %shr920 = ashr i32 %mul919, 16
  store i32 %shr920, i32* %mcost, align 4
  %848 = load i16*, i16** %ref_pic, align 8
  %849 = load i16**, i16*** %orig_pic.addr, align 8
  %850 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %851 = load i32, i32* %blocksize_y, align 4
  %852 = load i32, i32* %blocksize_x, align 4
  %853 = load i32, i32* %blocksize_x4, align 4
  %854 = load i32, i32* %mcost, align 4
  %855 = load i32, i32* %min_mcost.addr, align 4
  %856 = load i32, i32* %cand_x, align 4
  %857 = load i32, i32* %cand_y, align 4
  %call921 = call i32 @PartCalMad(i16* %848, i16** %849, i16* (i32, i16*, i32, i32, i32, i32)* %850, i32 %851, i32 %852, i32 %853, i32 %854, i32 %855, i32 %856, i32 %857)
  store i32 %call921, i32* %mcost, align 4
  %858 = load i32, i32* %mcost, align 4
  %859 = load i32**, i32*** @McostState, align 8
  %860 = load i32, i32* %cand_y, align 4
  %861 = load i32, i32* %center_y, align 4
  %sub922 = sub nsw i32 %860, %861
  %862 = load i32, i32* %search_range.addr, align 4
  %add923 = add nsw i32 %sub922, %862
  %idxprom924 = sext i32 %add923 to i64
  %arrayidx925 = getelementptr inbounds i32*, i32** %859, i64 %idxprom924
  %863 = load i32*, i32** %arrayidx925, align 8
  %864 = load i32, i32* %cand_x, align 4
  %865 = load i32, i32* %center_x, align 4
  %sub926 = sub nsw i32 %864, %865
  %866 = load i32, i32* %search_range.addr, align 4
  %add927 = add nsw i32 %sub926, %866
  %idxprom928 = sext i32 %add927 to i64
  %arrayidx929 = getelementptr inbounds i32, i32* %863, i64 %idxprom928
  store i32 %858, i32* %arrayidx929, align 4
  %867 = load i32, i32* %mcost, align 4
  %868 = load i32, i32* %min_mcost.addr, align 4
  %cmp930 = icmp slt i32 %867, %868
  br i1 %cmp930, label %if.then932, label %if.end933

if.then932:                                       ; preds = %if.then909
  %869 = load i32, i32* %cand_x, align 4
  store i32 %869, i32* %best_x, align 4
  %870 = load i32, i32* %cand_y, align 4
  store i32 %870, i32* %best_y, align 4
  %871 = load i32, i32* %mcost, align 4
  store i32 %871, i32* %min_mcost.addr, align 4
  br label %if.end933

if.end933:                                        ; preds = %if.then932, %if.then909
  br label %if.end934

if.end934:                                        ; preds = %if.end933, %if.then899
  br label %if.end935

if.end935:                                        ; preds = %if.end934, %land.lhs.true894, %if.end888
  br label %for.inc936

for.inc936:                                       ; preds = %if.end935
  %872 = load i32, i32* %i, align 4
  %inc937 = add nsw i32 %872, 1
  store i32 %inc937, i32* %i, align 4
  br label %for.cond835

for.end938:                                       ; preds = %for.cond835
  %873 = load i16, i16* %ref.addr, align 2
  %conv939 = sext i16 %873 to i32
  %cmp940 = icmp sgt i32 %conv939, 0
  br i1 %cmp940, label %if.then942, label %if.else960

if.then942:                                       ; preds = %for.end938
  %874 = load i32, i32* %min_mcost.addr, align 4
  %875 = load i32, i32* @pred_SAD_ref, align 4
  %sub943 = sub nsw i32 %874, %875
  %conv944 = sitofp i32 %sub943 to float
  %876 = load i32, i32* @pred_SAD_ref, align 4
  %conv945 = sitofp i32 %876 to float
  %877 = load float, float* %betaThird, align 4
  %mul946 = fmul float %conv945, %877
  %cmp947 = fcmp olt float %conv944, %mul946
  br i1 %cmp947, label %if.then949, label %if.else950

if.then949:                                       ; preds = %if.then942
  br label %third_step

if.else950:                                       ; preds = %if.then942
  %878 = load i32, i32* %min_mcost.addr, align 4
  %879 = load i32, i32* @pred_SAD_ref, align 4
  %sub951 = sub nsw i32 %878, %879
  %conv952 = sitofp i32 %sub951 to float
  %880 = load i32, i32* @pred_SAD_ref, align 4
  %conv953 = sitofp i32 %880 to float
  %881 = load float, float* %betaSec, align 4
  %mul954 = fmul float %conv953, %881
  %cmp955 = fcmp olt float %conv952, %mul954
  br i1 %cmp955, label %if.then957, label %if.end958

if.then957:                                       ; preds = %if.else950
  br label %sec_step

if.end958:                                        ; preds = %if.else950
  br label %if.end959

if.end959:                                        ; preds = %if.end958
  br label %if.end1000

if.else960:                                       ; preds = %for.end938
  %882 = load i32, i32* %blocktype.addr, align 4
  %cmp961 = icmp sgt i32 %882, 1
  br i1 %cmp961, label %if.then963, label %if.else981

if.then963:                                       ; preds = %if.else960
  %883 = load i32, i32* %min_mcost.addr, align 4
  %884 = load i32, i32* @pred_SAD_uplayer, align 4
  %sub964 = sub nsw i32 %883, %884
  %conv965 = sitofp i32 %sub964 to float
  %885 = load i32, i32* @pred_SAD_uplayer, align 4
  %conv966 = sitofp i32 %885 to float
  %886 = load float, float* %betaThird, align 4
  %mul967 = fmul float %conv966, %886
  %cmp968 = fcmp olt float %conv965, %mul967
  br i1 %cmp968, label %if.then970, label %if.else971

if.then970:                                       ; preds = %if.then963
  br label %third_step

if.else971:                                       ; preds = %if.then963
  %887 = load i32, i32* %min_mcost.addr, align 4
  %888 = load i32, i32* @pred_SAD_uplayer, align 4
  %sub972 = sub nsw i32 %887, %888
  %conv973 = sitofp i32 %sub972 to float
  %889 = load i32, i32* @pred_SAD_uplayer, align 4
  %conv974 = sitofp i32 %889 to float
  %890 = load float, float* %betaSec, align 4
  %mul975 = fmul float %conv974, %890
  %cmp976 = fcmp olt float %conv973, %mul975
  br i1 %cmp976, label %if.then978, label %if.end979

if.then978:                                       ; preds = %if.else971
  br label %sec_step

if.end979:                                        ; preds = %if.else971
  br label %if.end980

if.end980:                                        ; preds = %if.end979
  br label %if.end999

if.else981:                                       ; preds = %if.else960
  %891 = load i32, i32* %min_mcost.addr, align 4
  %892 = load i32, i32* @pred_SAD_space, align 4
  %sub982 = sub nsw i32 %891, %892
  %conv983 = sitofp i32 %sub982 to float
  %893 = load i32, i32* @pred_SAD_space, align 4
  %conv984 = sitofp i32 %893 to float
  %894 = load float, float* %betaThird, align 4
  %mul985 = fmul float %conv984, %894
  %cmp986 = fcmp olt float %conv983, %mul985
  br i1 %cmp986, label %if.then988, label %if.else989

if.then988:                                       ; preds = %if.else981
  br label %third_step

if.else989:                                       ; preds = %if.else981
  %895 = load i32, i32* %min_mcost.addr, align 4
  %896 = load i32, i32* @pred_SAD_space, align 4
  %sub990 = sub nsw i32 %895, %896
  %conv991 = sitofp i32 %sub990 to float
  %897 = load i32, i32* @pred_SAD_space, align 4
  %conv992 = sitofp i32 %897 to float
  %898 = load float, float* %betaSec, align 4
  %mul993 = fmul float %conv992, %898
  %cmp994 = fcmp olt float %conv991, %mul993
  br i1 %cmp994, label %if.then996, label %if.end997

if.then996:                                       ; preds = %if.else989
  br label %sec_step

if.end997:                                        ; preds = %if.else989
  br label %if.end998

if.end998:                                        ; preds = %if.end997
  br label %if.end999

if.end999:                                        ; preds = %if.end998, %if.end980
  br label %if.end1000

if.end1000:                                       ; preds = %if.end999, %if.end959
  %899 = load i32, i32* %best_x, align 4
  store i32 %899, i32* %iXMinNow, align 4
  %900 = load i32, i32* %best_y, align 4
  store i32 %900, i32* %iYMinNow, align 4
  store i32 1, i32* %pos, align 4
  br label %for.cond1001

for.cond1001:                                     ; preds = %for.inc1057, %if.end1000
  %901 = load i32, i32* %pos, align 4
  %cmp1002 = icmp slt i32 %901, 25
  br i1 %cmp1002, label %for.body1004, label %for.end1059

for.body1004:                                     ; preds = %for.cond1001
  %902 = load i32, i32* %iXMinNow, align 4
  %903 = load i32*, i32** @spiral_search_x, align 8
  %904 = load i32, i32* %pos, align 4
  %idxprom1005 = sext i32 %904 to i64
  %arrayidx1006 = getelementptr inbounds i32, i32* %903, i64 %idxprom1005
  %905 = load i32, i32* %arrayidx1006, align 4
  %add1007 = add nsw i32 %902, %905
  store i32 %add1007, i32* %cand_x, align 4
  %906 = load i32, i32* %iYMinNow, align 4
  %907 = load i32*, i32** @spiral_search_y, align 8
  %908 = load i32, i32* %pos, align 4
  %idxprom1008 = sext i32 %908 to i64
  %arrayidx1009 = getelementptr inbounds i32, i32* %907, i64 %idxprom1008
  %909 = load i32, i32* %arrayidx1009, align 4
  %add1010 = add nsw i32 %906, %909
  store i32 %add1010, i32* %cand_y, align 4
  %910 = load i32, i32* %cand_x, align 4
  %911 = load i32, i32* %center_x, align 4
  %sub1011 = sub nsw i32 %910, %911
  %call1012 = call i32 @abs(i32 %sub1011) #6
  %912 = load i32, i32* %search_range.addr, align 4
  %cmp1013 = icmp sle i32 %call1012, %912
  br i1 %cmp1013, label %land.lhs.true1015, label %if.end1056

land.lhs.true1015:                                ; preds = %for.body1004
  %913 = load i32, i32* %cand_y, align 4
  %914 = load i32, i32* %center_y, align 4
  %sub1016 = sub nsw i32 %913, %914
  %call1017 = call i32 @abs(i32 %sub1016) #6
  %915 = load i32, i32* %search_range.addr, align 4
  %cmp1018 = icmp sle i32 %call1017, %915
  br i1 %cmp1018, label %if.then1020, label %if.end1056

if.then1020:                                      ; preds = %land.lhs.true1015
  %916 = load i32**, i32*** @McostState, align 8
  %917 = load i32, i32* %cand_y, align 4
  %918 = load i32, i32* %center_y, align 4
  %sub1021 = sub nsw i32 %917, %918
  %919 = load i32, i32* %search_range.addr, align 4
  %add1022 = add nsw i32 %sub1021, %919
  %idxprom1023 = sext i32 %add1022 to i64
  %arrayidx1024 = getelementptr inbounds i32*, i32** %916, i64 %idxprom1023
  %920 = load i32*, i32** %arrayidx1024, align 8
  %921 = load i32, i32* %cand_x, align 4
  %922 = load i32, i32* %center_x, align 4
  %sub1025 = sub nsw i32 %921, %922
  %923 = load i32, i32* %search_range.addr, align 4
  %add1026 = add nsw i32 %sub1025, %923
  %idxprom1027 = sext i32 %add1026 to i64
  %arrayidx1028 = getelementptr inbounds i32, i32* %920, i64 %idxprom1027
  %924 = load i32, i32* %arrayidx1028, align 4
  %tobool1029 = icmp ne i32 %924, 0
  br i1 %tobool1029, label %if.end1055, label %if.then1030

if.then1030:                                      ; preds = %if.then1020
  %925 = load i32, i32* %lambda_factor, align 4
  %926 = load i32*, i32** @mvbits, align 8
  %927 = load i32, i32* %cand_x, align 4
  %928 = load i32, i32* %mvshift, align 4
  %shl1031 = shl i32 %927, %928
  %929 = load i32, i32* %pred_x, align 4
  %sub1032 = sub nsw i32 %shl1031, %929
  %idxprom1033 = sext i32 %sub1032 to i64
  %arrayidx1034 = getelementptr inbounds i32, i32* %926, i64 %idxprom1033
  %930 = load i32, i32* %arrayidx1034, align 4
  %931 = load i32*, i32** @mvbits, align 8
  %932 = load i32, i32* %cand_y, align 4
  %933 = load i32, i32* %mvshift, align 4
  %shl1035 = shl i32 %932, %933
  %934 = load i32, i32* %pred_y, align 4
  %sub1036 = sub nsw i32 %shl1035, %934
  %idxprom1037 = sext i32 %sub1036 to i64
  %arrayidx1038 = getelementptr inbounds i32, i32* %931, i64 %idxprom1037
  %935 = load i32, i32* %arrayidx1038, align 4
  %add1039 = add nsw i32 %930, %935
  %mul1040 = mul nsw i32 %925, %add1039
  %shr1041 = ashr i32 %mul1040, 16
  store i32 %shr1041, i32* %mcost, align 4
  %936 = load i16*, i16** %ref_pic, align 8
  %937 = load i16**, i16*** %orig_pic.addr, align 8
  %938 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %939 = load i32, i32* %blocksize_y, align 4
  %940 = load i32, i32* %blocksize_x, align 4
  %941 = load i32, i32* %blocksize_x4, align 4
  %942 = load i32, i32* %mcost, align 4
  %943 = load i32, i32* %min_mcost.addr, align 4
  %944 = load i32, i32* %cand_x, align 4
  %945 = load i32, i32* %cand_y, align 4
  %call1042 = call i32 @PartCalMad(i16* %936, i16** %937, i16* (i32, i16*, i32, i32, i32, i32)* %938, i32 %939, i32 %940, i32 %941, i32 %942, i32 %943, i32 %944, i32 %945)
  store i32 %call1042, i32* %mcost, align 4
  %946 = load i32, i32* %mcost, align 4
  %947 = load i32**, i32*** @McostState, align 8
  %948 = load i32, i32* %cand_y, align 4
  %949 = load i32, i32* %center_y, align 4
  %sub1043 = sub nsw i32 %948, %949
  %950 = load i32, i32* %search_range.addr, align 4
  %add1044 = add nsw i32 %sub1043, %950
  %idxprom1045 = sext i32 %add1044 to i64
  %arrayidx1046 = getelementptr inbounds i32*, i32** %947, i64 %idxprom1045
  %951 = load i32*, i32** %arrayidx1046, align 8
  %952 = load i32, i32* %cand_x, align 4
  %953 = load i32, i32* %center_x, align 4
  %sub1047 = sub nsw i32 %952, %953
  %954 = load i32, i32* %search_range.addr, align 4
  %add1048 = add nsw i32 %sub1047, %954
  %idxprom1049 = sext i32 %add1048 to i64
  %arrayidx1050 = getelementptr inbounds i32, i32* %951, i64 %idxprom1049
  store i32 %946, i32* %arrayidx1050, align 4
  %955 = load i32, i32* %mcost, align 4
  %956 = load i32, i32* %min_mcost.addr, align 4
  %cmp1051 = icmp slt i32 %955, %956
  br i1 %cmp1051, label %if.then1053, label %if.end1054

if.then1053:                                      ; preds = %if.then1030
  %957 = load i32, i32* %cand_x, align 4
  store i32 %957, i32* %best_x, align 4
  %958 = load i32, i32* %cand_y, align 4
  store i32 %958, i32* %best_y, align 4
  %959 = load i32, i32* %mcost, align 4
  store i32 %959, i32* %min_mcost.addr, align 4
  br label %if.end1054

if.end1054:                                       ; preds = %if.then1053, %if.then1030
  br label %if.end1055

if.end1055:                                       ; preds = %if.end1054, %if.then1020
  br label %if.end1056

if.end1056:                                       ; preds = %if.end1055, %land.lhs.true1015, %for.body1004
  br label %for.inc1057

for.inc1057:                                      ; preds = %if.end1056
  %960 = load i32, i32* %pos, align 4
  %inc1058 = add nsw i32 %960, 1
  store i32 %inc1058, i32* %pos, align 4
  br label %for.cond1001

for.end1059:                                      ; preds = %for.cond1001
  %961 = load i16, i16* %ref.addr, align 2
  %conv1060 = sext i16 %961 to i32
  %cmp1061 = icmp sgt i32 %conv1060, 0
  br i1 %cmp1061, label %if.then1063, label %if.else1081

if.then1063:                                      ; preds = %for.end1059
  %962 = load i32, i32* %min_mcost.addr, align 4
  %963 = load i32, i32* @pred_SAD_ref, align 4
  %sub1064 = sub nsw i32 %962, %963
  %conv1065 = sitofp i32 %sub1064 to float
  %964 = load i32, i32* @pred_SAD_ref, align 4
  %conv1066 = sitofp i32 %964 to float
  %965 = load float, float* %betaThird, align 4
  %mul1067 = fmul float %conv1066, %965
  %cmp1068 = fcmp olt float %conv1065, %mul1067
  br i1 %cmp1068, label %if.then1070, label %if.else1071

if.then1070:                                      ; preds = %if.then1063
  br label %third_step

if.else1071:                                      ; preds = %if.then1063
  %966 = load i32, i32* %min_mcost.addr, align 4
  %967 = load i32, i32* @pred_SAD_ref, align 4
  %sub1072 = sub nsw i32 %966, %967
  %conv1073 = sitofp i32 %sub1072 to float
  %968 = load i32, i32* @pred_SAD_ref, align 4
  %conv1074 = sitofp i32 %968 to float
  %969 = load float, float* %betaSec, align 4
  %mul1075 = fmul float %conv1074, %969
  %cmp1076 = fcmp olt float %conv1073, %mul1075
  br i1 %cmp1076, label %if.then1078, label %if.end1079

if.then1078:                                      ; preds = %if.else1071
  br label %sec_step

if.end1079:                                       ; preds = %if.else1071
  br label %if.end1080

if.end1080:                                       ; preds = %if.end1079
  br label %if.end1121

if.else1081:                                      ; preds = %for.end1059
  %970 = load i32, i32* %blocktype.addr, align 4
  %cmp1082 = icmp sgt i32 %970, 1
  br i1 %cmp1082, label %if.then1084, label %if.else1102

if.then1084:                                      ; preds = %if.else1081
  %971 = load i32, i32* %min_mcost.addr, align 4
  %972 = load i32, i32* @pred_SAD_uplayer, align 4
  %sub1085 = sub nsw i32 %971, %972
  %conv1086 = sitofp i32 %sub1085 to float
  %973 = load i32, i32* @pred_SAD_uplayer, align 4
  %conv1087 = sitofp i32 %973 to float
  %974 = load float, float* %betaThird, align 4
  %mul1088 = fmul float %conv1087, %974
  %cmp1089 = fcmp olt float %conv1086, %mul1088
  br i1 %cmp1089, label %if.then1091, label %if.else1092

if.then1091:                                      ; preds = %if.then1084
  br label %third_step

if.else1092:                                      ; preds = %if.then1084
  %975 = load i32, i32* %min_mcost.addr, align 4
  %976 = load i32, i32* @pred_SAD_uplayer, align 4
  %sub1093 = sub nsw i32 %975, %976
  %conv1094 = sitofp i32 %sub1093 to float
  %977 = load i32, i32* @pred_SAD_uplayer, align 4
  %conv1095 = sitofp i32 %977 to float
  %978 = load float, float* %betaSec, align 4
  %mul1096 = fmul float %conv1095, %978
  %cmp1097 = fcmp olt float %conv1094, %mul1096
  br i1 %cmp1097, label %if.then1099, label %if.end1100

if.then1099:                                      ; preds = %if.else1092
  br label %sec_step

if.end1100:                                       ; preds = %if.else1092
  br label %if.end1101

if.end1101:                                       ; preds = %if.end1100
  br label %if.end1120

if.else1102:                                      ; preds = %if.else1081
  %979 = load i32, i32* %min_mcost.addr, align 4
  %980 = load i32, i32* @pred_SAD_space, align 4
  %sub1103 = sub nsw i32 %979, %980
  %conv1104 = sitofp i32 %sub1103 to float
  %981 = load i32, i32* @pred_SAD_space, align 4
  %conv1105 = sitofp i32 %981 to float
  %982 = load float, float* %betaThird, align 4
  %mul1106 = fmul float %conv1105, %982
  %cmp1107 = fcmp olt float %conv1104, %mul1106
  br i1 %cmp1107, label %if.then1109, label %if.else1110

if.then1109:                                      ; preds = %if.else1102
  br label %third_step

if.else1110:                                      ; preds = %if.else1102
  %983 = load i32, i32* %min_mcost.addr, align 4
  %984 = load i32, i32* @pred_SAD_space, align 4
  %sub1111 = sub nsw i32 %983, %984
  %conv1112 = sitofp i32 %sub1111 to float
  %985 = load i32, i32* @pred_SAD_space, align 4
  %conv1113 = sitofp i32 %985 to float
  %986 = load float, float* %betaSec, align 4
  %mul1114 = fmul float %conv1113, %986
  %cmp1115 = fcmp olt float %conv1112, %mul1114
  br i1 %cmp1115, label %if.then1117, label %if.end1118

if.then1117:                                      ; preds = %if.else1110
  br label %sec_step

if.end1118:                                       ; preds = %if.else1110
  br label %if.end1119

if.end1119:                                       ; preds = %if.end1118
  br label %if.end1120

if.end1120:                                       ; preds = %if.end1119, %if.end1101
  br label %if.end1121

if.end1121:                                       ; preds = %if.end1120, %if.end1080
  store i32 1, i32* %i, align 4
  br label %for.cond1122

for.cond1122:                                     ; preds = %for.inc1253, %if.end1121
  %987 = load i32, i32* %i, align 4
  %988 = load i32, i32* %search_range.addr, align 4
  %div1123 = sdiv i32 %988, 4
  %cmp1124 = icmp sle i32 %987, %div1123
  br i1 %cmp1124, label %for.body1126, label %for.end1255

for.body1126:                                     ; preds = %for.cond1122
  store i32 0, i32* %iAbort, align 4
  store i32 0, i32* %m, align 4
  br label %for.cond1127

for.cond1127:                                     ; preds = %for.inc1185, %for.body1126
  %989 = load i32, i32* %m, align 4
  %cmp1128 = icmp slt i32 %989, 16
  br i1 %cmp1128, label %for.body1130, label %for.end1187

for.body1130:                                     ; preds = %for.cond1127
  %990 = load i32, i32* %iXMinNow, align 4
  %991 = load i32, i32* %m, align 4
  %idxprom1131 = sext i32 %991 to i64
  %arrayidx1132 = getelementptr inbounds [16 x i32], [16 x i32]* @FastIntegerPelBlockMotionSearch.Big_Hexagon_x, i64 0, i64 %idxprom1131
  %992 = load i32, i32* %arrayidx1132, align 4
  %993 = load i32, i32* %i, align 4
  %mul1133 = mul nsw i32 %992, %993
  %add1134 = add nsw i32 %990, %mul1133
  store i32 %add1134, i32* %cand_x, align 4
  %994 = load i32, i32* %iYMinNow, align 4
  %995 = load i32, i32* %m, align 4
  %idxprom1135 = sext i32 %995 to i64
  %arrayidx1136 = getelementptr inbounds [16 x i32], [16 x i32]* @FastIntegerPelBlockMotionSearch.Big_Hexagon_y, i64 0, i64 %idxprom1135
  %996 = load i32, i32* %arrayidx1136, align 4
  %997 = load i32, i32* %i, align 4
  %mul1137 = mul nsw i32 %996, %997
  %add1138 = add nsw i32 %994, %mul1137
  store i32 %add1138, i32* %cand_y, align 4
  %998 = load i32, i32* %cand_x, align 4
  %999 = load i32, i32* %center_x, align 4
  %sub1139 = sub nsw i32 %998, %999
  %call1140 = call i32 @abs(i32 %sub1139) #6
  %1000 = load i32, i32* %search_range.addr, align 4
  %cmp1141 = icmp sle i32 %call1140, %1000
  br i1 %cmp1141, label %land.lhs.true1143, label %if.end1184

land.lhs.true1143:                                ; preds = %for.body1130
  %1001 = load i32, i32* %cand_y, align 4
  %1002 = load i32, i32* %center_y, align 4
  %sub1144 = sub nsw i32 %1001, %1002
  %call1145 = call i32 @abs(i32 %sub1144) #6
  %1003 = load i32, i32* %search_range.addr, align 4
  %cmp1146 = icmp sle i32 %call1145, %1003
  br i1 %cmp1146, label %if.then1148, label %if.end1184

if.then1148:                                      ; preds = %land.lhs.true1143
  %1004 = load i32**, i32*** @McostState, align 8
  %1005 = load i32, i32* %cand_y, align 4
  %1006 = load i32, i32* %center_y, align 4
  %sub1149 = sub nsw i32 %1005, %1006
  %1007 = load i32, i32* %search_range.addr, align 4
  %add1150 = add nsw i32 %sub1149, %1007
  %idxprom1151 = sext i32 %add1150 to i64
  %arrayidx1152 = getelementptr inbounds i32*, i32** %1004, i64 %idxprom1151
  %1008 = load i32*, i32** %arrayidx1152, align 8
  %1009 = load i32, i32* %cand_x, align 4
  %1010 = load i32, i32* %center_x, align 4
  %sub1153 = sub nsw i32 %1009, %1010
  %1011 = load i32, i32* %search_range.addr, align 4
  %add1154 = add nsw i32 %sub1153, %1011
  %idxprom1155 = sext i32 %add1154 to i64
  %arrayidx1156 = getelementptr inbounds i32, i32* %1008, i64 %idxprom1155
  %1012 = load i32, i32* %arrayidx1156, align 4
  %tobool1157 = icmp ne i32 %1012, 0
  br i1 %tobool1157, label %if.end1183, label %if.then1158

if.then1158:                                      ; preds = %if.then1148
  %1013 = load i32, i32* %lambda_factor, align 4
  %1014 = load i32*, i32** @mvbits, align 8
  %1015 = load i32, i32* %cand_x, align 4
  %1016 = load i32, i32* %mvshift, align 4
  %shl1159 = shl i32 %1015, %1016
  %1017 = load i32, i32* %pred_x, align 4
  %sub1160 = sub nsw i32 %shl1159, %1017
  %idxprom1161 = sext i32 %sub1160 to i64
  %arrayidx1162 = getelementptr inbounds i32, i32* %1014, i64 %idxprom1161
  %1018 = load i32, i32* %arrayidx1162, align 4
  %1019 = load i32*, i32** @mvbits, align 8
  %1020 = load i32, i32* %cand_y, align 4
  %1021 = load i32, i32* %mvshift, align 4
  %shl1163 = shl i32 %1020, %1021
  %1022 = load i32, i32* %pred_y, align 4
  %sub1164 = sub nsw i32 %shl1163, %1022
  %idxprom1165 = sext i32 %sub1164 to i64
  %arrayidx1166 = getelementptr inbounds i32, i32* %1019, i64 %idxprom1165
  %1023 = load i32, i32* %arrayidx1166, align 4
  %add1167 = add nsw i32 %1018, %1023
  %mul1168 = mul nsw i32 %1013, %add1167
  %shr1169 = ashr i32 %mul1168, 16
  store i32 %shr1169, i32* %mcost, align 4
  %1024 = load i16*, i16** %ref_pic, align 8
  %1025 = load i16**, i16*** %orig_pic.addr, align 8
  %1026 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %1027 = load i32, i32* %blocksize_y, align 4
  %1028 = load i32, i32* %blocksize_x, align 4
  %1029 = load i32, i32* %blocksize_x4, align 4
  %1030 = load i32, i32* %mcost, align 4
  %1031 = load i32, i32* %min_mcost.addr, align 4
  %1032 = load i32, i32* %cand_x, align 4
  %1033 = load i32, i32* %cand_y, align 4
  %call1170 = call i32 @PartCalMad(i16* %1024, i16** %1025, i16* (i32, i16*, i32, i32, i32, i32)* %1026, i32 %1027, i32 %1028, i32 %1029, i32 %1030, i32 %1031, i32 %1032, i32 %1033)
  store i32 %call1170, i32* %mcost, align 4
  %1034 = load i32, i32* %mcost, align 4
  %1035 = load i32**, i32*** @McostState, align 8
  %1036 = load i32, i32* %cand_y, align 4
  %1037 = load i32, i32* %center_y, align 4
  %sub1171 = sub nsw i32 %1036, %1037
  %1038 = load i32, i32* %search_range.addr, align 4
  %add1172 = add nsw i32 %sub1171, %1038
  %idxprom1173 = sext i32 %add1172 to i64
  %arrayidx1174 = getelementptr inbounds i32*, i32** %1035, i64 %idxprom1173
  %1039 = load i32*, i32** %arrayidx1174, align 8
  %1040 = load i32, i32* %cand_x, align 4
  %1041 = load i32, i32* %center_x, align 4
  %sub1175 = sub nsw i32 %1040, %1041
  %1042 = load i32, i32* %search_range.addr, align 4
  %add1176 = add nsw i32 %sub1175, %1042
  %idxprom1177 = sext i32 %add1176 to i64
  %arrayidx1178 = getelementptr inbounds i32, i32* %1039, i64 %idxprom1177
  store i32 %1034, i32* %arrayidx1178, align 4
  %1043 = load i32, i32* %mcost, align 4
  %1044 = load i32, i32* %min_mcost.addr, align 4
  %cmp1179 = icmp slt i32 %1043, %1044
  br i1 %cmp1179, label %if.then1181, label %if.end1182

if.then1181:                                      ; preds = %if.then1158
  %1045 = load i32, i32* %cand_x, align 4
  store i32 %1045, i32* %best_x, align 4
  %1046 = load i32, i32* %cand_y, align 4
  store i32 %1046, i32* %best_y, align 4
  %1047 = load i32, i32* %mcost, align 4
  store i32 %1047, i32* %min_mcost.addr, align 4
  store i32 1, i32* %iAbort, align 4
  br label %if.end1182

if.end1182:                                       ; preds = %if.then1181, %if.then1158
  br label %if.end1183

if.end1183:                                       ; preds = %if.end1182, %if.then1148
  br label %if.end1184

if.end1184:                                       ; preds = %if.end1183, %land.lhs.true1143, %for.body1130
  br label %for.inc1185

for.inc1185:                                      ; preds = %if.end1184
  %1048 = load i32, i32* %m, align 4
  %inc1186 = add nsw i32 %1048, 1
  store i32 %inc1186, i32* %m, align 4
  br label %for.cond1127

for.end1187:                                      ; preds = %for.cond1127
  %1049 = load i32, i32* %iAbort, align 4
  %tobool1188 = icmp ne i32 %1049, 0
  br i1 %tobool1188, label %if.then1189, label %if.end1252

if.then1189:                                      ; preds = %for.end1187
  %1050 = load i16, i16* %ref.addr, align 2
  %conv1190 = sext i16 %1050 to i32
  %cmp1191 = icmp sgt i32 %conv1190, 0
  br i1 %cmp1191, label %if.then1193, label %if.else1211

if.then1193:                                      ; preds = %if.then1189
  %1051 = load i32, i32* %min_mcost.addr, align 4
  %1052 = load i32, i32* @pred_SAD_ref, align 4
  %sub1194 = sub nsw i32 %1051, %1052
  %conv1195 = sitofp i32 %sub1194 to float
  %1053 = load i32, i32* @pred_SAD_ref, align 4
  %conv1196 = sitofp i32 %1053 to float
  %1054 = load float, float* %betaThird, align 4
  %mul1197 = fmul float %conv1196, %1054
  %cmp1198 = fcmp olt float %conv1195, %mul1197
  br i1 %cmp1198, label %if.then1200, label %if.else1201

if.then1200:                                      ; preds = %if.then1193
  br label %third_step

if.else1201:                                      ; preds = %if.then1193
  %1055 = load i32, i32* %min_mcost.addr, align 4
  %1056 = load i32, i32* @pred_SAD_ref, align 4
  %sub1202 = sub nsw i32 %1055, %1056
  %conv1203 = sitofp i32 %sub1202 to float
  %1057 = load i32, i32* @pred_SAD_ref, align 4
  %conv1204 = sitofp i32 %1057 to float
  %1058 = load float, float* %betaSec, align 4
  %mul1205 = fmul float %conv1204, %1058
  %cmp1206 = fcmp olt float %conv1203, %mul1205
  br i1 %cmp1206, label %if.then1208, label %if.end1209

if.then1208:                                      ; preds = %if.else1201
  br label %sec_step

if.end1209:                                       ; preds = %if.else1201
  br label %if.end1210

if.end1210:                                       ; preds = %if.end1209
  br label %if.end1251

if.else1211:                                      ; preds = %if.then1189
  %1059 = load i32, i32* %blocktype.addr, align 4
  %cmp1212 = icmp sgt i32 %1059, 1
  br i1 %cmp1212, label %if.then1214, label %if.else1232

if.then1214:                                      ; preds = %if.else1211
  %1060 = load i32, i32* %min_mcost.addr, align 4
  %1061 = load i32, i32* @pred_SAD_uplayer, align 4
  %sub1215 = sub nsw i32 %1060, %1061
  %conv1216 = sitofp i32 %sub1215 to float
  %1062 = load i32, i32* @pred_SAD_uplayer, align 4
  %conv1217 = sitofp i32 %1062 to float
  %1063 = load float, float* %betaThird, align 4
  %mul1218 = fmul float %conv1217, %1063
  %cmp1219 = fcmp olt float %conv1216, %mul1218
  br i1 %cmp1219, label %if.then1221, label %if.else1222

if.then1221:                                      ; preds = %if.then1214
  br label %third_step

if.else1222:                                      ; preds = %if.then1214
  %1064 = load i32, i32* %min_mcost.addr, align 4
  %1065 = load i32, i32* @pred_SAD_uplayer, align 4
  %sub1223 = sub nsw i32 %1064, %1065
  %conv1224 = sitofp i32 %sub1223 to float
  %1066 = load i32, i32* @pred_SAD_uplayer, align 4
  %conv1225 = sitofp i32 %1066 to float
  %1067 = load float, float* %betaSec, align 4
  %mul1226 = fmul float %conv1225, %1067
  %cmp1227 = fcmp olt float %conv1224, %mul1226
  br i1 %cmp1227, label %if.then1229, label %if.end1230

if.then1229:                                      ; preds = %if.else1222
  br label %sec_step

if.end1230:                                       ; preds = %if.else1222
  br label %if.end1231

if.end1231:                                       ; preds = %if.end1230
  br label %if.end1250

if.else1232:                                      ; preds = %if.else1211
  %1068 = load i32, i32* %min_mcost.addr, align 4
  %1069 = load i32, i32* @pred_SAD_space, align 4
  %sub1233 = sub nsw i32 %1068, %1069
  %conv1234 = sitofp i32 %sub1233 to float
  %1070 = load i32, i32* @pred_SAD_space, align 4
  %conv1235 = sitofp i32 %1070 to float
  %1071 = load float, float* %betaThird, align 4
  %mul1236 = fmul float %conv1235, %1071
  %cmp1237 = fcmp olt float %conv1234, %mul1236
  br i1 %cmp1237, label %if.then1239, label %if.else1240

if.then1239:                                      ; preds = %if.else1232
  br label %third_step

if.else1240:                                      ; preds = %if.else1232
  %1072 = load i32, i32* %min_mcost.addr, align 4
  %1073 = load i32, i32* @pred_SAD_space, align 4
  %sub1241 = sub nsw i32 %1072, %1073
  %conv1242 = sitofp i32 %sub1241 to float
  %1074 = load i32, i32* @pred_SAD_space, align 4
  %conv1243 = sitofp i32 %1074 to float
  %1075 = load float, float* %betaSec, align 4
  %mul1244 = fmul float %conv1243, %1075
  %cmp1245 = fcmp olt float %conv1242, %mul1244
  br i1 %cmp1245, label %if.then1247, label %if.end1248

if.then1247:                                      ; preds = %if.else1240
  br label %sec_step

if.end1248:                                       ; preds = %if.else1240
  br label %if.end1249

if.end1249:                                       ; preds = %if.end1248
  br label %if.end1250

if.end1250:                                       ; preds = %if.end1249, %if.end1231
  br label %if.end1251

if.end1251:                                       ; preds = %if.end1250, %if.end1210
  br label %if.end1252

if.end1252:                                       ; preds = %if.end1251, %for.end1187
  br label %for.inc1253

for.inc1253:                                      ; preds = %if.end1252
  %1076 = load i32, i32* %i, align 4
  %inc1254 = add nsw i32 %1076, 1
  store i32 %inc1254, i32* %i, align 4
  br label %for.cond1122

for.end1255:                                      ; preds = %for.cond1122
  br label %sec_step

sec_step:                                         ; preds = %for.end1255, %if.then1247, %if.then1229, %if.then1208, %if.then1117, %if.then1099, %if.then1078, %if.then996, %if.then978, %if.then957, %if.then729, %if.then722, %if.then704, %if.then683, %if.then389
  %1077 = load i32, i32* %best_x, align 4
  store i32 %1077, i32* %iXMinNow, align 4
  %1078 = load i32, i32* %best_y, align 4
  store i32 %1078, i32* %iYMinNow, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond1256

for.cond1256:                                     ; preds = %for.inc1322, %sec_step
  %1079 = load i32, i32* %i, align 4
  %1080 = load i32, i32* %search_range.addr, align 4
  %cmp1257 = icmp slt i32 %1079, %1080
  br i1 %cmp1257, label %for.body1259, label %for.end1324

for.body1259:                                     ; preds = %for.cond1256
  store i32 1, i32* %iAbort, align 4
  store i32 0, i32* %m, align 4
  br label %for.cond1260

for.cond1260:                                     ; preds = %for.inc1316, %for.body1259
  %1081 = load i32, i32* %m, align 4
  %cmp1261 = icmp slt i32 %1081, 6
  br i1 %cmp1261, label %for.body1263, label %for.end1318

for.body1263:                                     ; preds = %for.cond1260
  %1082 = load i32, i32* %iXMinNow, align 4
  %1083 = load i32, i32* %m, align 4
  %idxprom1264 = sext i32 %1083 to i64
  %arrayidx1265 = getelementptr inbounds [6 x i32], [6 x i32]* @FastIntegerPelBlockMotionSearch.Hexagon_x, i64 0, i64 %idxprom1264
  %1084 = load i32, i32* %arrayidx1265, align 4
  %add1266 = add nsw i32 %1082, %1084
  store i32 %add1266, i32* %cand_x, align 4
  %1085 = load i32, i32* %iYMinNow, align 4
  %1086 = load i32, i32* %m, align 4
  %idxprom1267 = sext i32 %1086 to i64
  %arrayidx1268 = getelementptr inbounds [6 x i32], [6 x i32]* @FastIntegerPelBlockMotionSearch.Hexagon_y, i64 0, i64 %idxprom1267
  %1087 = load i32, i32* %arrayidx1268, align 4
  %add1269 = add nsw i32 %1085, %1087
  store i32 %add1269, i32* %cand_y, align 4
  %1088 = load i32, i32* %cand_x, align 4
  %1089 = load i32, i32* %center_x, align 4
  %sub1270 = sub nsw i32 %1088, %1089
  %call1271 = call i32 @abs(i32 %sub1270) #6
  %1090 = load i32, i32* %search_range.addr, align 4
  %cmp1272 = icmp sle i32 %call1271, %1090
  br i1 %cmp1272, label %land.lhs.true1274, label %if.end1315

land.lhs.true1274:                                ; preds = %for.body1263
  %1091 = load i32, i32* %cand_y, align 4
  %1092 = load i32, i32* %center_y, align 4
  %sub1275 = sub nsw i32 %1091, %1092
  %call1276 = call i32 @abs(i32 %sub1275) #6
  %1093 = load i32, i32* %search_range.addr, align 4
  %cmp1277 = icmp sle i32 %call1276, %1093
  br i1 %cmp1277, label %if.then1279, label %if.end1315

if.then1279:                                      ; preds = %land.lhs.true1274
  %1094 = load i32**, i32*** @McostState, align 8
  %1095 = load i32, i32* %cand_y, align 4
  %1096 = load i32, i32* %center_y, align 4
  %sub1280 = sub nsw i32 %1095, %1096
  %1097 = load i32, i32* %search_range.addr, align 4
  %add1281 = add nsw i32 %sub1280, %1097
  %idxprom1282 = sext i32 %add1281 to i64
  %arrayidx1283 = getelementptr inbounds i32*, i32** %1094, i64 %idxprom1282
  %1098 = load i32*, i32** %arrayidx1283, align 8
  %1099 = load i32, i32* %cand_x, align 4
  %1100 = load i32, i32* %center_x, align 4
  %sub1284 = sub nsw i32 %1099, %1100
  %1101 = load i32, i32* %search_range.addr, align 4
  %add1285 = add nsw i32 %sub1284, %1101
  %idxprom1286 = sext i32 %add1285 to i64
  %arrayidx1287 = getelementptr inbounds i32, i32* %1098, i64 %idxprom1286
  %1102 = load i32, i32* %arrayidx1287, align 4
  %tobool1288 = icmp ne i32 %1102, 0
  br i1 %tobool1288, label %if.end1314, label %if.then1289

if.then1289:                                      ; preds = %if.then1279
  %1103 = load i32, i32* %lambda_factor, align 4
  %1104 = load i32*, i32** @mvbits, align 8
  %1105 = load i32, i32* %cand_x, align 4
  %1106 = load i32, i32* %mvshift, align 4
  %shl1290 = shl i32 %1105, %1106
  %1107 = load i32, i32* %pred_x, align 4
  %sub1291 = sub nsw i32 %shl1290, %1107
  %idxprom1292 = sext i32 %sub1291 to i64
  %arrayidx1293 = getelementptr inbounds i32, i32* %1104, i64 %idxprom1292
  %1108 = load i32, i32* %arrayidx1293, align 4
  %1109 = load i32*, i32** @mvbits, align 8
  %1110 = load i32, i32* %cand_y, align 4
  %1111 = load i32, i32* %mvshift, align 4
  %shl1294 = shl i32 %1110, %1111
  %1112 = load i32, i32* %pred_y, align 4
  %sub1295 = sub nsw i32 %shl1294, %1112
  %idxprom1296 = sext i32 %sub1295 to i64
  %arrayidx1297 = getelementptr inbounds i32, i32* %1109, i64 %idxprom1296
  %1113 = load i32, i32* %arrayidx1297, align 4
  %add1298 = add nsw i32 %1108, %1113
  %mul1299 = mul nsw i32 %1103, %add1298
  %shr1300 = ashr i32 %mul1299, 16
  store i32 %shr1300, i32* %mcost, align 4
  %1114 = load i16*, i16** %ref_pic, align 8
  %1115 = load i16**, i16*** %orig_pic.addr, align 8
  %1116 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %1117 = load i32, i32* %blocksize_y, align 4
  %1118 = load i32, i32* %blocksize_x, align 4
  %1119 = load i32, i32* %blocksize_x4, align 4
  %1120 = load i32, i32* %mcost, align 4
  %1121 = load i32, i32* %min_mcost.addr, align 4
  %1122 = load i32, i32* %cand_x, align 4
  %1123 = load i32, i32* %cand_y, align 4
  %call1301 = call i32 @PartCalMad(i16* %1114, i16** %1115, i16* (i32, i16*, i32, i32, i32, i32)* %1116, i32 %1117, i32 %1118, i32 %1119, i32 %1120, i32 %1121, i32 %1122, i32 %1123)
  store i32 %call1301, i32* %mcost, align 4
  %1124 = load i32, i32* %mcost, align 4
  %1125 = load i32**, i32*** @McostState, align 8
  %1126 = load i32, i32* %cand_y, align 4
  %1127 = load i32, i32* %center_y, align 4
  %sub1302 = sub nsw i32 %1126, %1127
  %1128 = load i32, i32* %search_range.addr, align 4
  %add1303 = add nsw i32 %sub1302, %1128
  %idxprom1304 = sext i32 %add1303 to i64
  %arrayidx1305 = getelementptr inbounds i32*, i32** %1125, i64 %idxprom1304
  %1129 = load i32*, i32** %arrayidx1305, align 8
  %1130 = load i32, i32* %cand_x, align 4
  %1131 = load i32, i32* %center_x, align 4
  %sub1306 = sub nsw i32 %1130, %1131
  %1132 = load i32, i32* %search_range.addr, align 4
  %add1307 = add nsw i32 %sub1306, %1132
  %idxprom1308 = sext i32 %add1307 to i64
  %arrayidx1309 = getelementptr inbounds i32, i32* %1129, i64 %idxprom1308
  store i32 %1124, i32* %arrayidx1309, align 4
  %1133 = load i32, i32* %mcost, align 4
  %1134 = load i32, i32* %min_mcost.addr, align 4
  %cmp1310 = icmp slt i32 %1133, %1134
  br i1 %cmp1310, label %if.then1312, label %if.end1313

if.then1312:                                      ; preds = %if.then1289
  %1135 = load i32, i32* %cand_x, align 4
  store i32 %1135, i32* %best_x, align 4
  %1136 = load i32, i32* %cand_y, align 4
  store i32 %1136, i32* %best_y, align 4
  %1137 = load i32, i32* %mcost, align 4
  store i32 %1137, i32* %min_mcost.addr, align 4
  store i32 0, i32* %iAbort, align 4
  br label %if.end1313

if.end1313:                                       ; preds = %if.then1312, %if.then1289
  br label %if.end1314

if.end1314:                                       ; preds = %if.end1313, %if.then1279
  br label %if.end1315

if.end1315:                                       ; preds = %if.end1314, %land.lhs.true1274, %for.body1263
  br label %for.inc1316

for.inc1316:                                      ; preds = %if.end1315
  %1138 = load i32, i32* %m, align 4
  %inc1317 = add nsw i32 %1138, 1
  store i32 %inc1317, i32* %m, align 4
  br label %for.cond1260

for.end1318:                                      ; preds = %for.cond1260
  %1139 = load i32, i32* %iAbort, align 4
  %tobool1319 = icmp ne i32 %1139, 0
  br i1 %tobool1319, label %if.then1320, label %if.end1321

if.then1320:                                      ; preds = %for.end1318
  br label %for.end1324

if.end1321:                                       ; preds = %for.end1318
  %1140 = load i32, i32* %best_x, align 4
  store i32 %1140, i32* %iXMinNow, align 4
  %1141 = load i32, i32* %best_y, align 4
  store i32 %1141, i32* %iYMinNow, align 4
  br label %for.inc1322

for.inc1322:                                      ; preds = %if.end1321
  %1142 = load i32, i32* %i, align 4
  %inc1323 = add nsw i32 %1142, 1
  store i32 %inc1323, i32* %i, align 4
  br label %for.cond1256

for.end1324:                                      ; preds = %if.then1320, %for.cond1256
  br label %third_step

third_step:                                       ; preds = %for.end1324, %if.then1239, %if.then1221, %if.then1200, %if.then1109, %if.then1091, %if.then1070, %if.then988, %if.then970, %if.then949, %if.then714, %if.then696, %if.then675, %if.then381
  %1143 = load i32, i32* %best_x, align 4
  store i32 %1143, i32* %iXMinNow, align 4
  %1144 = load i32, i32* %best_y, align 4
  store i32 %1144, i32* %iYMinNow, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond1325

for.cond1325:                                     ; preds = %for.inc1391, %third_step
  %1145 = load i32, i32* %i, align 4
  %1146 = load i32, i32* %search_range.addr, align 4
  %cmp1326 = icmp slt i32 %1145, %1146
  br i1 %cmp1326, label %for.body1328, label %for.end1393

for.body1328:                                     ; preds = %for.cond1325
  store i32 65536, i32* %iSADLayer, align 4
  store i32 1, i32* %iAbort, align 4
  store i32 0, i32* %m, align 4
  br label %for.cond1329

for.cond1329:                                     ; preds = %for.inc1385, %for.body1328
  %1147 = load i32, i32* %m, align 4
  %cmp1330 = icmp slt i32 %1147, 4
  br i1 %cmp1330, label %for.body1332, label %for.end1387

for.body1332:                                     ; preds = %for.cond1329
  %1148 = load i32, i32* %iXMinNow, align 4
  %1149 = load i32, i32* %m, align 4
  %idxprom1333 = sext i32 %1149 to i64
  %arrayidx1334 = getelementptr inbounds [4 x i32], [4 x i32]* @FastIntegerPelBlockMotionSearch.Diamond_x, i64 0, i64 %idxprom1333
  %1150 = load i32, i32* %arrayidx1334, align 4
  %add1335 = add nsw i32 %1148, %1150
  store i32 %add1335, i32* %cand_x, align 4
  %1151 = load i32, i32* %iYMinNow, align 4
  %1152 = load i32, i32* %m, align 4
  %idxprom1336 = sext i32 %1152 to i64
  %arrayidx1337 = getelementptr inbounds [4 x i32], [4 x i32]* @FastIntegerPelBlockMotionSearch.Diamond_y, i64 0, i64 %idxprom1336
  %1153 = load i32, i32* %arrayidx1337, align 4
  %add1338 = add nsw i32 %1151, %1153
  store i32 %add1338, i32* %cand_y, align 4
  %1154 = load i32, i32* %cand_x, align 4
  %1155 = load i32, i32* %center_x, align 4
  %sub1339 = sub nsw i32 %1154, %1155
  %call1340 = call i32 @abs(i32 %sub1339) #6
  %1156 = load i32, i32* %search_range.addr, align 4
  %cmp1341 = icmp sle i32 %call1340, %1156
  br i1 %cmp1341, label %land.lhs.true1343, label %if.end1384

land.lhs.true1343:                                ; preds = %for.body1332
  %1157 = load i32, i32* %cand_y, align 4
  %1158 = load i32, i32* %center_y, align 4
  %sub1344 = sub nsw i32 %1157, %1158
  %call1345 = call i32 @abs(i32 %sub1344) #6
  %1159 = load i32, i32* %search_range.addr, align 4
  %cmp1346 = icmp sle i32 %call1345, %1159
  br i1 %cmp1346, label %if.then1348, label %if.end1384

if.then1348:                                      ; preds = %land.lhs.true1343
  %1160 = load i32**, i32*** @McostState, align 8
  %1161 = load i32, i32* %cand_y, align 4
  %1162 = load i32, i32* %center_y, align 4
  %sub1349 = sub nsw i32 %1161, %1162
  %1163 = load i32, i32* %search_range.addr, align 4
  %add1350 = add nsw i32 %sub1349, %1163
  %idxprom1351 = sext i32 %add1350 to i64
  %arrayidx1352 = getelementptr inbounds i32*, i32** %1160, i64 %idxprom1351
  %1164 = load i32*, i32** %arrayidx1352, align 8
  %1165 = load i32, i32* %cand_x, align 4
  %1166 = load i32, i32* %center_x, align 4
  %sub1353 = sub nsw i32 %1165, %1166
  %1167 = load i32, i32* %search_range.addr, align 4
  %add1354 = add nsw i32 %sub1353, %1167
  %idxprom1355 = sext i32 %add1354 to i64
  %arrayidx1356 = getelementptr inbounds i32, i32* %1164, i64 %idxprom1355
  %1168 = load i32, i32* %arrayidx1356, align 4
  %tobool1357 = icmp ne i32 %1168, 0
  br i1 %tobool1357, label %if.end1383, label %if.then1358

if.then1358:                                      ; preds = %if.then1348
  %1169 = load i32, i32* %lambda_factor, align 4
  %1170 = load i32*, i32** @mvbits, align 8
  %1171 = load i32, i32* %cand_x, align 4
  %1172 = load i32, i32* %mvshift, align 4
  %shl1359 = shl i32 %1171, %1172
  %1173 = load i32, i32* %pred_x, align 4
  %sub1360 = sub nsw i32 %shl1359, %1173
  %idxprom1361 = sext i32 %sub1360 to i64
  %arrayidx1362 = getelementptr inbounds i32, i32* %1170, i64 %idxprom1361
  %1174 = load i32, i32* %arrayidx1362, align 4
  %1175 = load i32*, i32** @mvbits, align 8
  %1176 = load i32, i32* %cand_y, align 4
  %1177 = load i32, i32* %mvshift, align 4
  %shl1363 = shl i32 %1176, %1177
  %1178 = load i32, i32* %pred_y, align 4
  %sub1364 = sub nsw i32 %shl1363, %1178
  %idxprom1365 = sext i32 %sub1364 to i64
  %arrayidx1366 = getelementptr inbounds i32, i32* %1175, i64 %idxprom1365
  %1179 = load i32, i32* %arrayidx1366, align 4
  %add1367 = add nsw i32 %1174, %1179
  %mul1368 = mul nsw i32 %1169, %add1367
  %shr1369 = ashr i32 %mul1368, 16
  store i32 %shr1369, i32* %mcost, align 4
  %1180 = load i16*, i16** %ref_pic, align 8
  %1181 = load i16**, i16*** %orig_pic.addr, align 8
  %1182 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %1183 = load i32, i32* %blocksize_y, align 4
  %1184 = load i32, i32* %blocksize_x, align 4
  %1185 = load i32, i32* %blocksize_x4, align 4
  %1186 = load i32, i32* %mcost, align 4
  %1187 = load i32, i32* %min_mcost.addr, align 4
  %1188 = load i32, i32* %cand_x, align 4
  %1189 = load i32, i32* %cand_y, align 4
  %call1370 = call i32 @PartCalMad(i16* %1180, i16** %1181, i16* (i32, i16*, i32, i32, i32, i32)* %1182, i32 %1183, i32 %1184, i32 %1185, i32 %1186, i32 %1187, i32 %1188, i32 %1189)
  store i32 %call1370, i32* %mcost, align 4
  %1190 = load i32, i32* %mcost, align 4
  %1191 = load i32**, i32*** @McostState, align 8
  %1192 = load i32, i32* %cand_y, align 4
  %1193 = load i32, i32* %center_y, align 4
  %sub1371 = sub nsw i32 %1192, %1193
  %1194 = load i32, i32* %search_range.addr, align 4
  %add1372 = add nsw i32 %sub1371, %1194
  %idxprom1373 = sext i32 %add1372 to i64
  %arrayidx1374 = getelementptr inbounds i32*, i32** %1191, i64 %idxprom1373
  %1195 = load i32*, i32** %arrayidx1374, align 8
  %1196 = load i32, i32* %cand_x, align 4
  %1197 = load i32, i32* %center_x, align 4
  %sub1375 = sub nsw i32 %1196, %1197
  %1198 = load i32, i32* %search_range.addr, align 4
  %add1376 = add nsw i32 %sub1375, %1198
  %idxprom1377 = sext i32 %add1376 to i64
  %arrayidx1378 = getelementptr inbounds i32, i32* %1195, i64 %idxprom1377
  store i32 %1190, i32* %arrayidx1378, align 4
  %1199 = load i32, i32* %mcost, align 4
  %1200 = load i32, i32* %min_mcost.addr, align 4
  %cmp1379 = icmp slt i32 %1199, %1200
  br i1 %cmp1379, label %if.then1381, label %if.end1382

if.then1381:                                      ; preds = %if.then1358
  %1201 = load i32, i32* %cand_x, align 4
  store i32 %1201, i32* %best_x, align 4
  %1202 = load i32, i32* %cand_y, align 4
  store i32 %1202, i32* %best_y, align 4
  %1203 = load i32, i32* %mcost, align 4
  store i32 %1203, i32* %min_mcost.addr, align 4
  store i32 0, i32* %iAbort, align 4
  br label %if.end1382

if.end1382:                                       ; preds = %if.then1381, %if.then1358
  br label %if.end1383

if.end1383:                                       ; preds = %if.end1382, %if.then1348
  br label %if.end1384

if.end1384:                                       ; preds = %if.end1383, %land.lhs.true1343, %for.body1332
  br label %for.inc1385

for.inc1385:                                      ; preds = %if.end1384
  %1204 = load i32, i32* %m, align 4
  %inc1386 = add nsw i32 %1204, 1
  store i32 %inc1386, i32* %m, align 4
  br label %for.cond1329

for.end1387:                                      ; preds = %for.cond1329
  %1205 = load i32, i32* %iAbort, align 4
  %tobool1388 = icmp ne i32 %1205, 0
  br i1 %tobool1388, label %if.then1389, label %if.end1390

if.then1389:                                      ; preds = %for.end1387
  br label %for.end1393

if.end1390:                                       ; preds = %for.end1387
  %1206 = load i32, i32* %best_x, align 4
  store i32 %1206, i32* %iXMinNow, align 4
  %1207 = load i32, i32* %best_y, align 4
  store i32 %1207, i32* %iYMinNow, align 4
  br label %for.inc1391

for.inc1391:                                      ; preds = %if.end1390
  %1208 = load i32, i32* %i, align 4
  %inc1392 = add nsw i32 %1208, 1
  store i32 %inc1392, i32* %i, align 4
  br label %for.cond1325

for.end1393:                                      ; preds = %if.then1389, %for.cond1325
  %1209 = load i32, i32* %best_x, align 4
  %1210 = load i32, i32* %pic_pix_x.addr, align 4
  %sub1394 = sub nsw i32 %1209, %1210
  %conv1395 = trunc i32 %sub1394 to i16
  %1211 = load i16*, i16** %mv_x.addr, align 8
  store i16 %conv1395, i16* %1211, align 2
  %1212 = load i32, i32* %best_y, align 4
  %1213 = load i32, i32* %pic_pix_y.addr, align 4
  %sub1396 = sub nsw i32 %1212, %1213
  %conv1397 = trunc i32 %sub1396 to i16
  %1214 = load i16*, i16** %mv_y.addr, align 8
  store i16 %conv1397, i16* %1214, align 2
  %1215 = load i32, i32* %min_mcost.addr, align 4
  %1216 = load i32, i32* %canary
  %1217 = icmp eq i32 %1216, 914577538
  br i1 %1217, label %1218, label %func_exit

1218:                                             ; preds = %for.end1393, %func_exit
  ret i32 %1215

func_exit:                                        ; preds = %for.end1393
  call void @detect_breach()
  br label %1218
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @get_mem_bwmincost.57(i32****** %mv) #0 {
entry:
  %canary = alloca i32
  store i32 13460074, i32* %canary
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %mv.addr = alloca i32******, align 8
  %l = alloca i32, align 4
  store i32****** %mv, i32******* %mv.addr, align 8
  %0 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %width = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %0, i32 0, i32 13
  %1 = load i32, i32* %width, align 4
  %div = sdiv i32 %1, 4
  %conv = sext i32 %div to i64
  %call = call noalias i8* @calloc(i64 %conv, i64 8) #5
  %2 = bitcast i8* %call to i32*****
  %3 = load i32******, i32******* %mv.addr, align 8
  store i32***** %2, i32****** %3, align 8
  %cmp = icmp eq i32***** %2, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @no_mem_exit(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc68, %if.end
  %4 = load i32, i32* %i, align 4
  %5 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %width2 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %5, i32 0, i32 13
  %6 = load i32, i32* %width2, align 4
  %div3 = sdiv i32 %6, 4
  %cmp4 = icmp slt i32 %4, %div3
  br i1 %cmp4, label %for.body, label %for.end70

for.body:                                         ; preds = %for.cond
  %7 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %7, i32 0, i32 15
  %8 = load i32, i32* %height, align 4
  %div6 = sdiv i32 %8, 4
  %conv7 = sext i32 %div6 to i64
  %call8 = call noalias i8* @calloc(i64 %conv7, i64 8) #5
  %9 = bitcast i8* %call8 to i32****
  %10 = load i32******, i32******* %mv.addr, align 8
  %11 = load i32*****, i32****** %10, align 8
  %12 = load i32, i32* %i, align 4
  %idxprom = sext i32 %12 to i64
  %arrayidx = getelementptr inbounds i32****, i32***** %11, i64 %idxprom
  store i32**** %9, i32***** %arrayidx, align 8
  %cmp9 = icmp eq i32**** %9, null
  br i1 %cmp9, label %if.then11, label %if.end12

if.then11:                                        ; preds = %for.body
  call void @no_mem_exit(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %if.end12

if.end12:                                         ; preds = %if.then11, %for.body
  store i32 0, i32* %j, align 4
  br label %for.cond13

for.cond13:                                       ; preds = %for.inc65, %if.end12
  %13 = load i32, i32* %j, align 4
  %14 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height14 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %14, i32 0, i32 15
  %15 = load i32, i32* %height14, align 4
  %div15 = sdiv i32 %15, 4
  %cmp16 = icmp slt i32 %13, %div15
  br i1 %cmp16, label %for.body18, label %for.end67

for.body18:                                       ; preds = %for.cond13
  %16 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %max_num_references = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %16, i32 0, i32 9
  %17 = load i32, i32* %max_num_references, align 4
  %conv19 = sext i32 %17 to i64
  %call20 = call noalias i8* @calloc(i64 %conv19, i64 8) #5
  %18 = bitcast i8* %call20 to i32***
  %19 = load i32******, i32******* %mv.addr, align 8
  %20 = load i32*****, i32****** %19, align 8
  %21 = load i32, i32* %i, align 4
  %idxprom21 = sext i32 %21 to i64
  %arrayidx22 = getelementptr inbounds i32****, i32***** %20, i64 %idxprom21
  %22 = load i32****, i32***** %arrayidx22, align 8
  %23 = load i32, i32* %j, align 4
  %idxprom23 = sext i32 %23 to i64
  %arrayidx24 = getelementptr inbounds i32***, i32**** %22, i64 %idxprom23
  store i32*** %18, i32**** %arrayidx24, align 8
  %cmp25 = icmp eq i32*** %18, null
  br i1 %cmp25, label %if.then27, label %if.end28

if.then27:                                        ; preds = %for.body18
  call void @no_mem_exit(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %if.end28

if.end28:                                         ; preds = %if.then27, %for.body18
  store i32 0, i32* %k, align 4
  br label %for.cond29

for.cond29:                                       ; preds = %for.inc62, %if.end28
  %24 = load i32, i32* %k, align 4
  %25 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %max_num_references30 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %25, i32 0, i32 9
  %26 = load i32, i32* %max_num_references30, align 4
  %cmp31 = icmp slt i32 %24, %26
  br i1 %cmp31, label %for.body33, label %for.end64

for.body33:                                       ; preds = %for.cond29
  %call34 = call noalias i8* @calloc(i64 9, i64 8) #5
  %27 = bitcast i8* %call34 to i32**
  %28 = load i32******, i32******* %mv.addr, align 8
  %29 = load i32*****, i32****** %28, align 8
  %30 = load i32, i32* %i, align 4
  %idxprom35 = sext i32 %30 to i64
  %arrayidx36 = getelementptr inbounds i32****, i32***** %29, i64 %idxprom35
  %31 = load i32****, i32***** %arrayidx36, align 8
  %32 = load i32, i32* %j, align 4
  %idxprom37 = sext i32 %32 to i64
  %arrayidx38 = getelementptr inbounds i32***, i32**** %31, i64 %idxprom37
  %33 = load i32***, i32**** %arrayidx38, align 8
  %34 = load i32, i32* %k, align 4
  %idxprom39 = sext i32 %34 to i64
  %arrayidx40 = getelementptr inbounds i32**, i32*** %33, i64 %idxprom39
  store i32** %27, i32*** %arrayidx40, align 8
  %cmp41 = icmp eq i32** %27, null
  br i1 %cmp41, label %if.then43, label %if.end44

if.then43:                                        ; preds = %for.body33
  call void @no_mem_exit(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %if.end44

if.end44:                                         ; preds = %if.then43, %for.body33
  store i32 0, i32* %l, align 4
  br label %for.cond45

for.cond45:                                       ; preds = %for.inc, %if.end44
  %35 = load i32, i32* %l, align 4
  %cmp46 = icmp slt i32 %35, 9
  br i1 %cmp46, label %for.body48, label %for.end

for.body48:                                       ; preds = %for.cond45
  %call49 = call noalias i8* @calloc(i64 3, i64 4) #5
  %36 = bitcast i8* %call49 to i32*
  %37 = load i32******, i32******* %mv.addr, align 8
  %38 = load i32*****, i32****** %37, align 8
  %39 = load i32, i32* %i, align 4
  %idxprom50 = sext i32 %39 to i64
  %arrayidx51 = getelementptr inbounds i32****, i32***** %38, i64 %idxprom50
  %40 = load i32****, i32***** %arrayidx51, align 8
  %41 = load i32, i32* %j, align 4
  %idxprom52 = sext i32 %41 to i64
  %arrayidx53 = getelementptr inbounds i32***, i32**** %40, i64 %idxprom52
  %42 = load i32***, i32**** %arrayidx53, align 8
  %43 = load i32, i32* %k, align 4
  %idxprom54 = sext i32 %43 to i64
  %arrayidx55 = getelementptr inbounds i32**, i32*** %42, i64 %idxprom54
  %44 = load i32**, i32*** %arrayidx55, align 8
  %45 = load i32, i32* %l, align 4
  %idxprom56 = sext i32 %45 to i64
  %arrayidx57 = getelementptr inbounds i32*, i32** %44, i64 %idxprom56
  store i32* %36, i32** %arrayidx57, align 8
  %cmp58 = icmp eq i32* %36, null
  br i1 %cmp58, label %if.then60, label %if.end61

if.then60:                                        ; preds = %for.body48
  call void @no_mem_exit(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %if.end61

if.end61:                                         ; preds = %if.then60, %for.body48
  br label %for.inc

for.inc:                                          ; preds = %if.end61
  %46 = load i32, i32* %l, align 4
  %inc = add nsw i32 %46, 1
  store i32 %inc, i32* %l, align 4
  br label %for.cond45

for.end:                                          ; preds = %for.cond45
  br label %for.inc62

for.inc62:                                        ; preds = %for.end
  %47 = load i32, i32* %k, align 4
  %inc63 = add nsw i32 %47, 1
  store i32 %inc63, i32* %k, align 4
  br label %for.cond29

for.end64:                                        ; preds = %for.cond29
  br label %for.inc65

for.inc65:                                        ; preds = %for.end64
  %48 = load i32, i32* %j, align 4
  %inc66 = add nsw i32 %48, 1
  store i32 %inc66, i32* %j, align 4
  br label %for.cond13

for.end67:                                        ; preds = %for.cond13
  br label %for.inc68

for.inc68:                                        ; preds = %for.end67
  %49 = load i32, i32* %i, align 4
  %inc69 = add nsw i32 %49, 1
  store i32 %inc69, i32* %i, align 4
  br label %for.cond

for.end70:                                        ; preds = %for.cond
  %50 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %width71 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %50, i32 0, i32 13
  %51 = load i32, i32* %width71, align 4
  %div72 = sdiv i32 %51, 4
  %52 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height73 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %52, i32 0, i32 15
  %53 = load i32, i32* %height73, align 4
  %mul = mul nsw i32 %div72, %53
  %div74 = sdiv i32 %mul, 4
  %54 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %max_num_references75 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %54, i32 0, i32 9
  %55 = load i32, i32* %max_num_references75, align 4
  %mul76 = mul nsw i32 %div74, %55
  %mul77 = mul nsw i32 %mul76, 9
  %mul78 = mul nsw i32 %mul77, 3
  %conv79 = sext i32 %mul78 to i64
  %mul80 = mul i64 %conv79, 4
  %conv81 = trunc i64 %mul80 to i32
  %56 = load i32, i32* %canary
  %57 = icmp eq i32 %56, 13460074
  br i1 %57, label %58, label %func_exit

58:                                               ; preds = %for.end70, %func_exit
  ret i32 %conv81

func_exit:                                        ; preds = %for.end70
  call void @detect_breach()
  br label %58
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @free_mem_bwmincost.58(i32***** %mv) #0 {
entry:
  %k = alloca i32, align 4
  %canary = alloca i32
  store i32 1030792015, i32* %canary
  %j = alloca i32, align 4
  %mv.addr = alloca i32*****, align 8
  %l = alloca i32, align 4
  %i = alloca i32, align 4
  store i32***** %mv, i32****** %mv.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc35, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %width = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %1, i32 0, i32 13
  %2 = load i32, i32* %width, align 4
  %div = sdiv i32 %2, 4
  %cmp = icmp slt i32 %0, %div
  br i1 %cmp, label %for.body, label %for.end37

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc30, %for.body
  %3 = load i32, i32* %j, align 4
  %4 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %4, i32 0, i32 15
  %5 = load i32, i32* %height, align 4
  %div2 = sdiv i32 %5, 4
  %cmp3 = icmp slt i32 %3, %div2
  br i1 %cmp3, label %for.body4, label %for.end32

for.body4:                                        ; preds = %for.cond1
  store i32 0, i32* %k, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc23, %for.body4
  %6 = load i32, i32* %k, align 4
  %7 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %max_num_references = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %7, i32 0, i32 9
  %8 = load i32, i32* %max_num_references, align 4
  %cmp6 = icmp slt i32 %6, %8
  br i1 %cmp6, label %for.body7, label %for.end25

for.body7:                                        ; preds = %for.cond5
  store i32 0, i32* %l, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc, %for.body7
  %9 = load i32, i32* %l, align 4
  %cmp9 = icmp slt i32 %9, 9
  br i1 %cmp9, label %for.body10, label %for.end

for.body10:                                       ; preds = %for.cond8
  %10 = load i32*****, i32****** %mv.addr, align 8
  %11 = load i32, i32* %i, align 4
  %idxprom = sext i32 %11 to i64
  %arrayidx = getelementptr inbounds i32****, i32***** %10, i64 %idxprom
  %12 = load i32****, i32***** %arrayidx, align 8
  %13 = load i32, i32* %j, align 4
  %idxprom11 = sext i32 %13 to i64
  %arrayidx12 = getelementptr inbounds i32***, i32**** %12, i64 %idxprom11
  %14 = load i32***, i32**** %arrayidx12, align 8
  %15 = load i32, i32* %k, align 4
  %idxprom13 = sext i32 %15 to i64
  %arrayidx14 = getelementptr inbounds i32**, i32*** %14, i64 %idxprom13
  %16 = load i32**, i32*** %arrayidx14, align 8
  %17 = load i32, i32* %l, align 4
  %idxprom15 = sext i32 %17 to i64
  %arrayidx16 = getelementptr inbounds i32*, i32** %16, i64 %idxprom15
  %18 = load i32*, i32** %arrayidx16, align 8
  %19 = bitcast i32* %18 to i8*
  call void @free(i8* %19) #5
  br label %for.inc

for.inc:                                          ; preds = %for.body10
  %20 = load i32, i32* %l, align 4
  %inc = add nsw i32 %20, 1
  store i32 %inc, i32* %l, align 4
  br label %for.cond8

for.end:                                          ; preds = %for.cond8
  %21 = load i32*****, i32****** %mv.addr, align 8
  %22 = load i32, i32* %i, align 4
  %idxprom17 = sext i32 %22 to i64
  %arrayidx18 = getelementptr inbounds i32****, i32***** %21, i64 %idxprom17
  %23 = load i32****, i32***** %arrayidx18, align 8
  %24 = load i32, i32* %j, align 4
  %idxprom19 = sext i32 %24 to i64
  %arrayidx20 = getelementptr inbounds i32***, i32**** %23, i64 %idxprom19
  %25 = load i32***, i32**** %arrayidx20, align 8
  %26 = load i32, i32* %k, align 4
  %idxprom21 = sext i32 %26 to i64
  %arrayidx22 = getelementptr inbounds i32**, i32*** %25, i64 %idxprom21
  %27 = load i32**, i32*** %arrayidx22, align 8
  %28 = bitcast i32** %27 to i8*
  call void @free(i8* %28) #5
  br label %for.inc23

for.inc23:                                        ; preds = %for.end
  %29 = load i32, i32* %k, align 4
  %inc24 = add nsw i32 %29, 1
  store i32 %inc24, i32* %k, align 4
  br label %for.cond5

for.end25:                                        ; preds = %for.cond5
  %30 = load i32*****, i32****** %mv.addr, align 8
  %31 = load i32, i32* %i, align 4
  %idxprom26 = sext i32 %31 to i64
  %arrayidx27 = getelementptr inbounds i32****, i32***** %30, i64 %idxprom26
  %32 = load i32****, i32***** %arrayidx27, align 8
  %33 = load i32, i32* %j, align 4
  %idxprom28 = sext i32 %33 to i64
  %arrayidx29 = getelementptr inbounds i32***, i32**** %32, i64 %idxprom28
  %34 = load i32***, i32**** %arrayidx29, align 8
  %35 = bitcast i32*** %34 to i8*
  call void @free(i8* %35) #5
  br label %for.inc30

for.inc30:                                        ; preds = %for.end25
  %36 = load i32, i32* %j, align 4
  %inc31 = add nsw i32 %36, 1
  store i32 %inc31, i32* %j, align 4
  br label %for.cond1

for.end32:                                        ; preds = %for.cond1
  %37 = load i32*****, i32****** %mv.addr, align 8
  %38 = load i32, i32* %i, align 4
  %idxprom33 = sext i32 %38 to i64
  %arrayidx34 = getelementptr inbounds i32****, i32***** %37, i64 %idxprom33
  %39 = load i32****, i32***** %arrayidx34, align 8
  %40 = bitcast i32**** %39 to i8*
  call void @free(i8* %40) #5
  br label %for.inc35

for.inc35:                                        ; preds = %for.end32
  %41 = load i32, i32* %i, align 4
  %inc36 = add nsw i32 %41, 1
  store i32 %inc36, i32* %i, align 4
  br label %for.cond

for.end37:                                        ; preds = %for.cond
  %42 = load i32*****, i32****** %mv.addr, align 8
  %43 = bitcast i32***** %42 to i8*
  call void @free(i8* %43) #5
  %44 = load i32, i32* %canary
  %45 = icmp eq i32 %44, 1030792015
  br i1 %45, label %46, label %func_exit

46:                                               ; preds = %for.end37, %func_exit
  ret void

func_exit:                                        ; preds = %for.end37
  call void @detect_breach()
  br label %46
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @FastIntegerPelBlockMotionSearch.59(i16** %orig_pic, i16 signext %ref, i32 %list, i32 %pic_pix_x, i32 %pic_pix_y, i32 %blocktype, i16 signext %pred_mv_x, i16 signext %pred_mv_y, i16* %mv_x, i16* %mv_y, i32 %search_range, i32 %min_mcost, double %lambda) #0 {
entry:
  %ref_pic = alloca i16*, align 8
  %orig_pic.addr = alloca i16**, align 8
  %betaThird = alloca float, align 4
  %cand_y = alloca i32, align 4
  %betaSec = alloca float, align 4
  %list.addr = alloca i32, align 4
  %blocktype.addr = alloca i32, align 4
  %blocksize_x4 = alloca i32, align 4
  %iAbort = alloca i32, align 4
  %blocksize_y = alloca i32, align 4
  %pred_y = alloca i32, align 4
  %get_ref_line = alloca i16* (i32, i16*, i32, i32, i32, i32)*, align 8
  %canary = alloca i32
  store i32 177560480, i32* %canary
  %blocksize_x = alloca i32, align 4
  %center_x = alloca i32, align 4
  %i = alloca i32, align 4
  %iSADLayer = alloca i32, align 4
  %ref.addr = alloca i16, align 2
  %best_y = alloca i32, align 4
  %m = alloca i32, align 4
  %pos = alloca i32, align 4
  %lambda_factor = alloca i32, align 4
  %pred_x = alloca i32, align 4
  %N_Bframe = alloca i32, align 4
  %mv_y.addr = alloca i16*, align 8
  %pred_mv_y.addr = alloca i16, align 2
  %center_y = alloca i32, align 4
  %search_range.addr = alloca i32, align 4
  %mvshift = alloca i32, align 4
  %iXMinNow = alloca i32, align 4
  %mcost = alloca i32, align 4
  %height = alloca i32, align 4
  %iYMinNow = alloca i32, align 4
  %lambda.addr = alloca double, align 8
  %pic_pix_x.addr = alloca i32, align 4
  %pic_pix_y.addr = alloca i32, align 4
  %pred_mv_x.addr = alloca i16, align 2
  %cand_x = alloca i32, align 4
  %search_step = alloca i32, align 4
  %list_offset = alloca i32, align 4
  %best_x = alloca i32, align 4
  %mv_x.addr = alloca i16*, align 8
  %min_mcost.addr = alloca i32, align 4
  store i16** %orig_pic, i16*** %orig_pic.addr, align 8
  store i16 %ref, i16* %ref.addr, align 2
  store i32 %list, i32* %list.addr, align 4
  store i32 %pic_pix_x, i32* %pic_pix_x.addr, align 4
  store i32 %pic_pix_y, i32* %pic_pix_y.addr, align 4
  store i32 %blocktype, i32* %blocktype.addr, align 4
  store i16 %pred_mv_x, i16* %pred_mv_x.addr, align 2
  store i16 %pred_mv_y, i16* %pred_mv_y.addr, align 2
  store i16* %mv_x, i16** %mv_x.addr, align 8
  store i16* %mv_y, i16** %mv_y.addr, align 8
  store i32 %search_range, i32* %search_range.addr, align 4
  store i32 %min_mcost, i32* %min_mcost.addr, align 4
  store double %lambda, double* %lambda.addr, align 8
  %0 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %MbaffFrameFlag = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %0, i32 0, i32 90
  %1 = load i32, i32* %MbaffFrameFlag, align 8
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %mb_data = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %2, i32 0, i32 51
  %3 = load %struct.macroblock*, %struct.macroblock** %mb_data, align 8
  %4 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %current_mb_nr = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %4, i32 0, i32 3
  %5 = load i32, i32* %current_mb_nr, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 %idxprom
  %mb_field = getelementptr inbounds %struct.macroblock, %struct.macroblock* %arrayidx, i32 0, i32 22
  %6 = load i32, i32* %mb_field, align 4
  %tobool1 = icmp ne i32 %6, 0
  br i1 %tobool1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %7 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %current_mb_nr2 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %7, i32 0, i32 3
  %8 = load i32, i32* %current_mb_nr2, align 4
  %rem = srem i32 %8, 2
  %tobool3 = icmp ne i32 %rem, 0
  %9 = zext i1 %tobool3 to i64
  %cond = select i1 %tobool3, i32 4, i32 2
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond4 = phi i32 [ %cond, %cond.true ], [ 0, %cond.false ]
  store i32 %cond4, i32* %list_offset, align 4
  %10 = load i32, i32* %list.addr, align 4
  %11 = load i32, i32* %list_offset, align 4
  %add = add nsw i32 %10, %11
  %idxprom5 = sext i32 %add to i64
  %arrayidx6 = getelementptr inbounds [6 x %struct.storable_picture**], [6 x %struct.storable_picture**]* @listX, i64 0, i64 %idxprom5
  %12 = load %struct.storable_picture**, %struct.storable_picture*** %arrayidx6, align 8
  %13 = load i16, i16* %ref.addr, align 2
  %idxprom7 = sext i16 %13 to i64
  %arrayidx8 = getelementptr inbounds %struct.storable_picture*, %struct.storable_picture** %12, i64 %idxprom7
  %14 = load %struct.storable_picture*, %struct.storable_picture** %arrayidx8, align 8
  %imgY_11 = getelementptr inbounds %struct.storable_picture, %struct.storable_picture* %14, i32 0, i32 26
  %15 = load i16*, i16** %imgY_11, align 8
  store i16* %15, i16** %ref_pic, align 8
  %16 = load double, double* %lambda.addr, align 8
  %mul = fmul double 6.553600e+04, %16
  %add9 = fadd double %mul, 5.000000e-01
  %conv = fptosi double %add9 to i32
  store i32 %conv, i32* %lambda_factor, align 4
  store i32 2, i32* %mvshift, align 4
  %17 = load %struct.InputParameters*, %struct.InputParameters** @input, align 8
  %blc_size = getelementptr inbounds %struct.InputParameters, %struct.InputParameters* %17, i32 0, i32 20
  %18 = load i32, i32* %blocktype.addr, align 4
  %idxprom10 = sext i32 %18 to i64
  %arrayidx11 = getelementptr inbounds [8 x [2 x i32]], [8 x [2 x i32]]* %blc_size, i64 0, i64 %idxprom10
  %arrayidx12 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx11, i64 0, i64 1
  %19 = load i32, i32* %arrayidx12, align 4
  store i32 %19, i32* %blocksize_y, align 4
  %20 = load %struct.InputParameters*, %struct.InputParameters** @input, align 8
  %blc_size13 = getelementptr inbounds %struct.InputParameters, %struct.InputParameters* %20, i32 0, i32 20
  %21 = load i32, i32* %blocktype.addr, align 4
  %idxprom14 = sext i32 %21 to i64
  %arrayidx15 = getelementptr inbounds [8 x [2 x i32]], [8 x [2 x i32]]* %blc_size13, i64 0, i64 %idxprom14
  %arrayidx16 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx15, i64 0, i64 0
  %22 = load i32, i32* %arrayidx16, align 8
  store i32 %22, i32* %blocksize_x, align 4
  %23 = load i32, i32* %blocksize_x, align 4
  %shr = ashr i32 %23, 2
  store i32 %shr, i32* %blocksize_x4, align 4
  %24 = load i32, i32* %pic_pix_x.addr, align 4
  %25 = load i32, i32* %mvshift, align 4
  %shl = shl i32 %24, %25
  %26 = load i16, i16* %pred_mv_x.addr, align 2
  %conv17 = sext i16 %26 to i32
  %add18 = add nsw i32 %shl, %conv17
  store i32 %add18, i32* %pred_x, align 4
  %27 = load i32, i32* %pic_pix_y.addr, align 4
  %28 = load i32, i32* %mvshift, align 4
  %shl19 = shl i32 %27, %28
  %29 = load i16, i16* %pred_mv_y.addr, align 2
  %conv20 = sext i16 %29 to i32
  %add21 = add nsw i32 %shl19, %conv20
  store i32 %add21, i32* %pred_y, align 4
  %30 = load i32, i32* %pic_pix_x.addr, align 4
  %31 = load i16*, i16** %mv_x.addr, align 8
  %32 = load i16, i16* %31, align 2
  %conv22 = sext i16 %32 to i32
  %add23 = add nsw i32 %30, %conv22
  store i32 %add23, i32* %center_x, align 4
  %33 = load i32, i32* %pic_pix_y.addr, align 4
  %34 = load i16*, i16** %mv_y.addr, align 8
  %35 = load i16, i16* %34, align 2
  %conv24 = sext i16 %35 to i32
  %add25 = add nsw i32 %33, %conv24
  store i32 %add25, i32* %center_y, align 4
  store i32 0, i32* %best_x, align 4
  store i32 0, i32* %best_y, align 4
  %36 = load %struct.InputParameters*, %struct.InputParameters** @input, align 8
  %successive_Bframe = getelementptr inbounds %struct.InputParameters, %struct.InputParameters* %36, i32 0, i32 34
  %37 = load i32, i32* %successive_Bframe, align 4
  store i32 %37, i32* %N_Bframe, align 4
  %38 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %MbaffFrameFlag26 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %38, i32 0, i32 90
  %39 = load i32, i32* %MbaffFrameFlag26, align 8
  %tobool27 = icmp ne i32 %39, 0
  br i1 %tobool27, label %land.lhs.true28, label %cond.false37

land.lhs.true28:                                  ; preds = %cond.end
  %40 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %mb_data29 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %40, i32 0, i32 51
  %41 = load %struct.macroblock*, %struct.macroblock** %mb_data29, align 8
  %42 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %current_mb_nr30 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %42, i32 0, i32 3
  %43 = load i32, i32* %current_mb_nr30, align 4
  %idxprom31 = sext i32 %43 to i64
  %arrayidx32 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %41, i64 %idxprom31
  %mb_field33 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %arrayidx32, i32 0, i32 22
  %44 = load i32, i32* %mb_field33, align 4
  %tobool34 = icmp ne i32 %44, 0
  br i1 %tobool34, label %cond.true35, label %cond.false37

cond.true35:                                      ; preds = %land.lhs.true28
  %45 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height36 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %45, i32 0, i32 15
  %46 = load i32, i32* %height36, align 4
  %div = sdiv i32 %46, 2
  br label %cond.end39

cond.false37:                                     ; preds = %land.lhs.true28, %cond.end
  %47 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height38 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %47, i32 0, i32 15
  %48 = load i32, i32* %height38, align 4
  br label %cond.end39

cond.end39:                                       ; preds = %cond.false37, %cond.true35
  %cond40 = phi i32 [ %div, %cond.true35 ], [ %48, %cond.false37 ]
  store i32 %cond40, i32* %height, align 4
  %49 = load i32, i32* %center_x, align 4
  %50 = load i32, i32* %search_range.addr, align 4
  %cmp = icmp sgt i32 %49, %50
  br i1 %cmp, label %land.lhs.true42, label %if.else

land.lhs.true42:                                  ; preds = %cond.end39
  %51 = load i32, i32* %center_x, align 4
  %52 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %width = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %52, i32 0, i32 13
  %53 = load i32, i32* %width, align 4
  %sub = sub nsw i32 %53, 1
  %54 = load i32, i32* %search_range.addr, align 4
  %sub43 = sub nsw i32 %sub, %54
  %55 = load i32, i32* %blocksize_x, align 4
  %sub44 = sub nsw i32 %sub43, %55
  %cmp45 = icmp slt i32 %51, %sub44
  br i1 %cmp45, label %land.lhs.true47, label %if.else

land.lhs.true47:                                  ; preds = %land.lhs.true42
  %56 = load i32, i32* %center_y, align 4
  %57 = load i32, i32* %search_range.addr, align 4
  %cmp48 = icmp sgt i32 %56, %57
  br i1 %cmp48, label %land.lhs.true50, label %if.else

land.lhs.true50:                                  ; preds = %land.lhs.true47
  %58 = load i32, i32* %center_y, align 4
  %59 = load i32, i32* %height, align 4
  %sub51 = sub nsw i32 %59, 1
  %60 = load i32, i32* %search_range.addr, align 4
  %sub52 = sub nsw i32 %sub51, %60
  %61 = load i32, i32* %blocksize_y, align 4
  %sub53 = sub nsw i32 %sub52, %61
  %cmp54 = icmp slt i32 %58, %sub53
  br i1 %cmp54, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true50
  store i16* (i32, i16*, i32, i32, i32, i32)* @FastLineX, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  br label %if.end

if.else:                                          ; preds = %land.lhs.true50, %land.lhs.true47, %land.lhs.true42, %cond.end39
  store i16* (i32, i16*, i32, i32, i32, i32)* @UMVLineX, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %62 = load i32**, i32*** @McostState, align 8
  %arrayidx56 = getelementptr inbounds i32*, i32** %62, i64 0
  %63 = load i32*, i32** %arrayidx56, align 8
  %64 = bitcast i32* %63 to i8*
  %65 = load i32, i32* %search_range.addr, align 4
  %mul57 = mul nsw i32 2, %65
  %add58 = add nsw i32 %mul57, 1
  %66 = load i32, i32* %search_range.addr, align 4
  %mul59 = mul nsw i32 2, %66
  %add60 = add nsw i32 %mul59, 1
  %mul61 = mul nsw i32 %add58, %add60
  %mul62 = mul nsw i32 %mul61, 4
  %conv63 = sext i32 %mul62 to i64
  call void @llvm.memset.p0i8.i64(i8* align 4 %64, i8 0, i64 %conv63, i1 false)
  %67 = load i16, i16* %ref.addr, align 2
  %conv64 = sext i16 %67 to i32
  %cmp65 = icmp sgt i32 %conv64, 0
  br i1 %cmp65, label %if.then67, label %if.else89

if.then67:                                        ; preds = %if.end
  %68 = load i32, i32* @pred_SAD_ref, align 4
  %cmp68 = icmp ne i32 %68, 0
  br i1 %cmp68, label %if.then70, label %if.else87

if.then70:                                        ; preds = %if.then67
  %69 = load i32, i32* %blocktype.addr, align 4
  %idxprom71 = sext i32 %69 to i64
  %arrayidx72 = getelementptr inbounds [8 x float], [8 x float]* @Bsize, i64 0, i64 %idxprom71
  %70 = load float, float* %arrayidx72, align 4
  %71 = load i32, i32* @pred_SAD_ref, align 4
  %72 = load i32, i32* @pred_SAD_ref, align 4
  %mul73 = mul nsw i32 %71, %72
  %conv74 = sitofp i32 %mul73 to float
  %div75 = fdiv float %70, %conv74
  %73 = load i32, i32* %blocktype.addr, align 4
  %idxprom76 = sext i32 %73 to i64
  %arrayidx77 = getelementptr inbounds [8 x float], [8 x float]* @AlphaSec, i64 0, i64 %idxprom76
  %74 = load float, float* %arrayidx77, align 4
  %sub78 = fsub float %div75, %74
  store float %sub78, float* %betaSec, align 4
  %75 = load i32, i32* %blocktype.addr, align 4
  %idxprom79 = sext i32 %75 to i64
  %arrayidx80 = getelementptr inbounds [8 x float], [8 x float]* @Bsize, i64 0, i64 %idxprom79
  %76 = load float, float* %arrayidx80, align 4
  %77 = load i32, i32* @pred_SAD_ref, align 4
  %78 = load i32, i32* @pred_SAD_ref, align 4
  %mul81 = mul nsw i32 %77, %78
  %conv82 = sitofp i32 %mul81 to float
  %div83 = fdiv float %76, %conv82
  %79 = load i32, i32* %blocktype.addr, align 4
  %idxprom84 = sext i32 %79 to i64
  %arrayidx85 = getelementptr inbounds [8 x float], [8 x float]* @AlphaThird, i64 0, i64 %idxprom84
  %80 = load float, float* %arrayidx85, align 4
  %sub86 = fsub float %div83, %80
  store float %sub86, float* %betaThird, align 4
  br label %if.end88

if.else87:                                        ; preds = %if.then67
  store float 0.000000e+00, float* %betaSec, align 4
  store float 0.000000e+00, float* %betaThird, align 4
  br label %if.end88

if.end88:                                         ; preds = %if.else87, %if.then70
  br label %if.end137

if.else89:                                        ; preds = %if.end
  %81 = load i32, i32* %blocktype.addr, align 4
  %cmp90 = icmp eq i32 %81, 1
  br i1 %cmp90, label %if.then92, label %if.else114

if.then92:                                        ; preds = %if.else89
  %82 = load i32, i32* @pred_SAD_space, align 4
  %cmp93 = icmp ne i32 %82, 0
  br i1 %cmp93, label %if.then95, label %if.else112

if.then95:                                        ; preds = %if.then92
  %83 = load i32, i32* %blocktype.addr, align 4
  %idxprom96 = sext i32 %83 to i64
  %arrayidx97 = getelementptr inbounds [8 x float], [8 x float]* @Bsize, i64 0, i64 %idxprom96
  %84 = load float, float* %arrayidx97, align 4
  %85 = load i32, i32* @pred_SAD_space, align 4
  %86 = load i32, i32* @pred_SAD_space, align 4
  %mul98 = mul nsw i32 %85, %86
  %conv99 = sitofp i32 %mul98 to float
  %div100 = fdiv float %84, %conv99
  %87 = load i32, i32* %blocktype.addr, align 4
  %idxprom101 = sext i32 %87 to i64
  %arrayidx102 = getelementptr inbounds [8 x float], [8 x float]* @AlphaSec, i64 0, i64 %idxprom101
  %88 = load float, float* %arrayidx102, align 4
  %sub103 = fsub float %div100, %88
  store float %sub103, float* %betaSec, align 4
  %89 = load i32, i32* %blocktype.addr, align 4
  %idxprom104 = sext i32 %89 to i64
  %arrayidx105 = getelementptr inbounds [8 x float], [8 x float]* @Bsize, i64 0, i64 %idxprom104
  %90 = load float, float* %arrayidx105, align 4
  %91 = load i32, i32* @pred_SAD_space, align 4
  %92 = load i32, i32* @pred_SAD_space, align 4
  %mul106 = mul nsw i32 %91, %92
  %conv107 = sitofp i32 %mul106 to float
  %div108 = fdiv float %90, %conv107
  %93 = load i32, i32* %blocktype.addr, align 4
  %idxprom109 = sext i32 %93 to i64
  %arrayidx110 = getelementptr inbounds [8 x float], [8 x float]* @AlphaThird, i64 0, i64 %idxprom109
  %94 = load float, float* %arrayidx110, align 4
  %sub111 = fsub float %div108, %94
  store float %sub111, float* %betaThird, align 4
  br label %if.end113

if.else112:                                       ; preds = %if.then92
  store float 0.000000e+00, float* %betaSec, align 4
  store float 0.000000e+00, float* %betaThird, align 4
  br label %if.end113

if.end113:                                        ; preds = %if.else112, %if.then95
  br label %if.end136

if.else114:                                       ; preds = %if.else89
  %95 = load i32, i32* @pred_SAD_uplayer, align 4
  %cmp115 = icmp ne i32 %95, 0
  br i1 %cmp115, label %if.then117, label %if.else134

if.then117:                                       ; preds = %if.else114
  %96 = load i32, i32* %blocktype.addr, align 4
  %idxprom118 = sext i32 %96 to i64
  %arrayidx119 = getelementptr inbounds [8 x float], [8 x float]* @Bsize, i64 0, i64 %idxprom118
  %97 = load float, float* %arrayidx119, align 4
  %98 = load i32, i32* @pred_SAD_uplayer, align 4
  %99 = load i32, i32* @pred_SAD_uplayer, align 4
  %mul120 = mul nsw i32 %98, %99
  %conv121 = sitofp i32 %mul120 to float
  %div122 = fdiv float %97, %conv121
  %100 = load i32, i32* %blocktype.addr, align 4
  %idxprom123 = sext i32 %100 to i64
  %arrayidx124 = getelementptr inbounds [8 x float], [8 x float]* @AlphaSec, i64 0, i64 %idxprom123
  %101 = load float, float* %arrayidx124, align 4
  %sub125 = fsub float %div122, %101
  store float %sub125, float* %betaSec, align 4
  %102 = load i32, i32* %blocktype.addr, align 4
  %idxprom126 = sext i32 %102 to i64
  %arrayidx127 = getelementptr inbounds [8 x float], [8 x float]* @Bsize, i64 0, i64 %idxprom126
  %103 = load float, float* %arrayidx127, align 4
  %104 = load i32, i32* @pred_SAD_uplayer, align 4
  %105 = load i32, i32* @pred_SAD_uplayer, align 4
  %mul128 = mul nsw i32 %104, %105
  %conv129 = sitofp i32 %mul128 to float
  %div130 = fdiv float %103, %conv129
  %106 = load i32, i32* %blocktype.addr, align 4
  %idxprom131 = sext i32 %106 to i64
  %arrayidx132 = getelementptr inbounds [8 x float], [8 x float]* @AlphaThird, i64 0, i64 %idxprom131
  %107 = load float, float* %arrayidx132, align 4
  %sub133 = fsub float %div130, %107
  store float %sub133, float* %betaThird, align 4
  br label %if.end135

if.else134:                                       ; preds = %if.else114
  store float 0.000000e+00, float* %betaSec, align 4
  store float 0.000000e+00, float* %betaThird, align 4
  br label %if.end135

if.end135:                                        ; preds = %if.else134, %if.then117
  br label %if.end136

if.end136:                                        ; preds = %if.end135, %if.end113
  br label %if.end137

if.end137:                                        ; preds = %if.end136, %if.end88
  %108 = load i32, i32* %center_x, align 4
  store i32 %108, i32* %cand_x, align 4
  %109 = load i32, i32* %center_y, align 4
  store i32 %109, i32* %cand_y, align 4
  %110 = load i32, i32* %lambda_factor, align 4
  %111 = load i32*, i32** @mvbits, align 8
  %112 = load i32, i32* %cand_x, align 4
  %113 = load i32, i32* %mvshift, align 4
  %shl138 = shl i32 %112, %113
  %114 = load i32, i32* %pred_x, align 4
  %sub139 = sub nsw i32 %shl138, %114
  %idxprom140 = sext i32 %sub139 to i64
  %arrayidx141 = getelementptr inbounds i32, i32* %111, i64 %idxprom140
  %115 = load i32, i32* %arrayidx141, align 4
  %116 = load i32*, i32** @mvbits, align 8
  %117 = load i32, i32* %cand_y, align 4
  %118 = load i32, i32* %mvshift, align 4
  %shl142 = shl i32 %117, %118
  %119 = load i32, i32* %pred_y, align 4
  %sub143 = sub nsw i32 %shl142, %119
  %idxprom144 = sext i32 %sub143 to i64
  %arrayidx145 = getelementptr inbounds i32, i32* %116, i64 %idxprom144
  %120 = load i32, i32* %arrayidx145, align 4
  %add146 = add nsw i32 %115, %120
  %mul147 = mul nsw i32 %110, %add146
  %shr148 = ashr i32 %mul147, 16
  store i32 %shr148, i32* %mcost, align 4
  %121 = load i16*, i16** %ref_pic, align 8
  %122 = load i16**, i16*** %orig_pic.addr, align 8
  %123 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %124 = load i32, i32* %blocksize_y, align 4
  %125 = load i32, i32* %blocksize_x, align 4
  %126 = load i32, i32* %blocksize_x4, align 4
  %127 = load i32, i32* %mcost, align 4
  %128 = load i32, i32* %min_mcost.addr, align 4
  %129 = load i32, i32* %cand_x, align 4
  %130 = load i32, i32* %cand_y, align 4
  %call = call i32 @PartCalMad(i16* %121, i16** %122, i16* (i32, i16*, i32, i32, i32, i32)* %123, i32 %124, i32 %125, i32 %126, i32 %127, i32 %128, i32 %129, i32 %130)
  store i32 %call, i32* %mcost, align 4
  %131 = load i32, i32* %mcost, align 4
  %132 = load i32**, i32*** @McostState, align 8
  %133 = load i32, i32* %search_range.addr, align 4
  %idxprom149 = sext i32 %133 to i64
  %arrayidx150 = getelementptr inbounds i32*, i32** %132, i64 %idxprom149
  %134 = load i32*, i32** %arrayidx150, align 8
  %135 = load i32, i32* %search_range.addr, align 4
  %idxprom151 = sext i32 %135 to i64
  %arrayidx152 = getelementptr inbounds i32, i32* %134, i64 %idxprom151
  store i32 %131, i32* %arrayidx152, align 4
  %136 = load i32, i32* %mcost, align 4
  %137 = load i32, i32* %min_mcost.addr, align 4
  %cmp153 = icmp slt i32 %136, %137
  br i1 %cmp153, label %if.then155, label %if.end156

if.then155:                                       ; preds = %if.end137
  %138 = load i32, i32* %mcost, align 4
  store i32 %138, i32* %min_mcost.addr, align 4
  %139 = load i32, i32* %cand_x, align 4
  store i32 %139, i32* %best_x, align 4
  %140 = load i32, i32* %cand_y, align 4
  store i32 %140, i32* %best_y, align 4
  br label %if.end156

if.end156:                                        ; preds = %if.then155, %if.end137
  %141 = load i32, i32* %best_x, align 4
  store i32 %141, i32* %iXMinNow, align 4
  %142 = load i32, i32* %best_y, align 4
  store i32 %142, i32* %iYMinNow, align 4
  store i32 0, i32* %m, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end156
  %143 = load i32, i32* %m, align 4
  %cmp157 = icmp slt i32 %143, 4
  br i1 %cmp157, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %144 = load i32, i32* %iXMinNow, align 4
  %145 = load i32, i32* %m, align 4
  %idxprom159 = sext i32 %145 to i64
  %arrayidx160 = getelementptr inbounds [4 x i32], [4 x i32]* @FastIntegerPelBlockMotionSearch.Diamond_x, i64 0, i64 %idxprom159
  %146 = load i32, i32* %arrayidx160, align 4
  %add161 = add nsw i32 %144, %146
  store i32 %add161, i32* %cand_x, align 4
  %147 = load i32, i32* %iYMinNow, align 4
  %148 = load i32, i32* %m, align 4
  %idxprom162 = sext i32 %148 to i64
  %arrayidx163 = getelementptr inbounds [4 x i32], [4 x i32]* @FastIntegerPelBlockMotionSearch.Diamond_y, i64 0, i64 %idxprom162
  %149 = load i32, i32* %arrayidx163, align 4
  %add164 = add nsw i32 %147, %149
  store i32 %add164, i32* %cand_y, align 4
  %150 = load i32, i32* %cand_x, align 4
  %151 = load i32, i32* %center_x, align 4
  %sub165 = sub nsw i32 %150, %151
  %call166 = call i32 @abs(i32 %sub165) #6
  %152 = load i32, i32* %search_range.addr, align 4
  %cmp167 = icmp sle i32 %call166, %152
  br i1 %cmp167, label %land.lhs.true169, label %if.end210

land.lhs.true169:                                 ; preds = %for.body
  %153 = load i32, i32* %cand_y, align 4
  %154 = load i32, i32* %center_y, align 4
  %sub170 = sub nsw i32 %153, %154
  %call171 = call i32 @abs(i32 %sub170) #6
  %155 = load i32, i32* %search_range.addr, align 4
  %cmp172 = icmp sle i32 %call171, %155
  br i1 %cmp172, label %if.then174, label %if.end210

if.then174:                                       ; preds = %land.lhs.true169
  %156 = load i32**, i32*** @McostState, align 8
  %157 = load i32, i32* %cand_y, align 4
  %158 = load i32, i32* %center_y, align 4
  %sub175 = sub nsw i32 %157, %158
  %159 = load i32, i32* %search_range.addr, align 4
  %add176 = add nsw i32 %sub175, %159
  %idxprom177 = sext i32 %add176 to i64
  %arrayidx178 = getelementptr inbounds i32*, i32** %156, i64 %idxprom177
  %160 = load i32*, i32** %arrayidx178, align 8
  %161 = load i32, i32* %cand_x, align 4
  %162 = load i32, i32* %center_x, align 4
  %sub179 = sub nsw i32 %161, %162
  %163 = load i32, i32* %search_range.addr, align 4
  %add180 = add nsw i32 %sub179, %163
  %idxprom181 = sext i32 %add180 to i64
  %arrayidx182 = getelementptr inbounds i32, i32* %160, i64 %idxprom181
  %164 = load i32, i32* %arrayidx182, align 4
  %tobool183 = icmp ne i32 %164, 0
  br i1 %tobool183, label %if.end209, label %if.then184

if.then184:                                       ; preds = %if.then174
  %165 = load i32, i32* %lambda_factor, align 4
  %166 = load i32*, i32** @mvbits, align 8
  %167 = load i32, i32* %cand_x, align 4
  %168 = load i32, i32* %mvshift, align 4
  %shl185 = shl i32 %167, %168
  %169 = load i32, i32* %pred_x, align 4
  %sub186 = sub nsw i32 %shl185, %169
  %idxprom187 = sext i32 %sub186 to i64
  %arrayidx188 = getelementptr inbounds i32, i32* %166, i64 %idxprom187
  %170 = load i32, i32* %arrayidx188, align 4
  %171 = load i32*, i32** @mvbits, align 8
  %172 = load i32, i32* %cand_y, align 4
  %173 = load i32, i32* %mvshift, align 4
  %shl189 = shl i32 %172, %173
  %174 = load i32, i32* %pred_y, align 4
  %sub190 = sub nsw i32 %shl189, %174
  %idxprom191 = sext i32 %sub190 to i64
  %arrayidx192 = getelementptr inbounds i32, i32* %171, i64 %idxprom191
  %175 = load i32, i32* %arrayidx192, align 4
  %add193 = add nsw i32 %170, %175
  %mul194 = mul nsw i32 %165, %add193
  %shr195 = ashr i32 %mul194, 16
  store i32 %shr195, i32* %mcost, align 4
  %176 = load i16*, i16** %ref_pic, align 8
  %177 = load i16**, i16*** %orig_pic.addr, align 8
  %178 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %179 = load i32, i32* %blocksize_y, align 4
  %180 = load i32, i32* %blocksize_x, align 4
  %181 = load i32, i32* %blocksize_x4, align 4
  %182 = load i32, i32* %mcost, align 4
  %183 = load i32, i32* %min_mcost.addr, align 4
  %184 = load i32, i32* %cand_x, align 4
  %185 = load i32, i32* %cand_y, align 4
  %call196 = call i32 @PartCalMad(i16* %176, i16** %177, i16* (i32, i16*, i32, i32, i32, i32)* %178, i32 %179, i32 %180, i32 %181, i32 %182, i32 %183, i32 %184, i32 %185)
  store i32 %call196, i32* %mcost, align 4
  %186 = load i32, i32* %mcost, align 4
  %187 = load i32**, i32*** @McostState, align 8
  %188 = load i32, i32* %cand_y, align 4
  %189 = load i32, i32* %center_y, align 4
  %sub197 = sub nsw i32 %188, %189
  %190 = load i32, i32* %search_range.addr, align 4
  %add198 = add nsw i32 %sub197, %190
  %idxprom199 = sext i32 %add198 to i64
  %arrayidx200 = getelementptr inbounds i32*, i32** %187, i64 %idxprom199
  %191 = load i32*, i32** %arrayidx200, align 8
  %192 = load i32, i32* %cand_x, align 4
  %193 = load i32, i32* %center_x, align 4
  %sub201 = sub nsw i32 %192, %193
  %194 = load i32, i32* %search_range.addr, align 4
  %add202 = add nsw i32 %sub201, %194
  %idxprom203 = sext i32 %add202 to i64
  %arrayidx204 = getelementptr inbounds i32, i32* %191, i64 %idxprom203
  store i32 %186, i32* %arrayidx204, align 4
  %195 = load i32, i32* %mcost, align 4
  %196 = load i32, i32* %min_mcost.addr, align 4
  %cmp205 = icmp slt i32 %195, %196
  br i1 %cmp205, label %if.then207, label %if.end208

if.then207:                                       ; preds = %if.then184
  %197 = load i32, i32* %cand_x, align 4
  store i32 %197, i32* %best_x, align 4
  %198 = load i32, i32* %cand_y, align 4
  store i32 %198, i32* %best_y, align 4
  %199 = load i32, i32* %mcost, align 4
  store i32 %199, i32* %min_mcost.addr, align 4
  br label %if.end208

if.end208:                                        ; preds = %if.then207, %if.then184
  br label %if.end209

if.end209:                                        ; preds = %if.end208, %if.then174
  br label %if.end210

if.end210:                                        ; preds = %if.end209, %land.lhs.true169, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end210
  %200 = load i32, i32* %m, align 4
  %inc = add nsw i32 %200, 1
  store i32 %inc, i32* %m, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %201 = load i32, i32* %center_x, align 4
  %202 = load i32, i32* %pic_pix_x.addr, align 4
  %cmp211 = icmp ne i32 %201, %202
  br i1 %cmp211, label %if.then215, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.end
  %203 = load i32, i32* %center_y, align 4
  %204 = load i32, i32* %pic_pix_y.addr, align 4
  %cmp213 = icmp ne i32 %203, %204
  br i1 %cmp213, label %if.then215, label %if.end321

if.then215:                                       ; preds = %lor.lhs.false, %for.end
  %205 = load i32, i32* %pic_pix_x.addr, align 4
  store i32 %205, i32* %cand_x, align 4
  %206 = load i32, i32* %pic_pix_y.addr, align 4
  store i32 %206, i32* %cand_y, align 4
  %207 = load i32, i32* %cand_x, align 4
  %208 = load i32, i32* %center_x, align 4
  %sub216 = sub nsw i32 %207, %208
  %call217 = call i32 @abs(i32 %sub216) #6
  %209 = load i32, i32* %search_range.addr, align 4
  %cmp218 = icmp sle i32 %call217, %209
  br i1 %cmp218, label %land.lhs.true220, label %if.end261

land.lhs.true220:                                 ; preds = %if.then215
  %210 = load i32, i32* %cand_y, align 4
  %211 = load i32, i32* %center_y, align 4
  %sub221 = sub nsw i32 %210, %211
  %call222 = call i32 @abs(i32 %sub221) #6
  %212 = load i32, i32* %search_range.addr, align 4
  %cmp223 = icmp sle i32 %call222, %212
  br i1 %cmp223, label %if.then225, label %if.end261

if.then225:                                       ; preds = %land.lhs.true220
  %213 = load i32**, i32*** @McostState, align 8
  %214 = load i32, i32* %cand_y, align 4
  %215 = load i32, i32* %center_y, align 4
  %sub226 = sub nsw i32 %214, %215
  %216 = load i32, i32* %search_range.addr, align 4
  %add227 = add nsw i32 %sub226, %216
  %idxprom228 = sext i32 %add227 to i64
  %arrayidx229 = getelementptr inbounds i32*, i32** %213, i64 %idxprom228
  %217 = load i32*, i32** %arrayidx229, align 8
  %218 = load i32, i32* %cand_x, align 4
  %219 = load i32, i32* %center_x, align 4
  %sub230 = sub nsw i32 %218, %219
  %220 = load i32, i32* %search_range.addr, align 4
  %add231 = add nsw i32 %sub230, %220
  %idxprom232 = sext i32 %add231 to i64
  %arrayidx233 = getelementptr inbounds i32, i32* %217, i64 %idxprom232
  %221 = load i32, i32* %arrayidx233, align 4
  %tobool234 = icmp ne i32 %221, 0
  br i1 %tobool234, label %if.end260, label %if.then235

if.then235:                                       ; preds = %if.then225
  %222 = load i32, i32* %lambda_factor, align 4
  %223 = load i32*, i32** @mvbits, align 8
  %224 = load i32, i32* %cand_x, align 4
  %225 = load i32, i32* %mvshift, align 4
  %shl236 = shl i32 %224, %225
  %226 = load i32, i32* %pred_x, align 4
  %sub237 = sub nsw i32 %shl236, %226
  %idxprom238 = sext i32 %sub237 to i64
  %arrayidx239 = getelementptr inbounds i32, i32* %223, i64 %idxprom238
  %227 = load i32, i32* %arrayidx239, align 4
  %228 = load i32*, i32** @mvbits, align 8
  %229 = load i32, i32* %cand_y, align 4
  %230 = load i32, i32* %mvshift, align 4
  %shl240 = shl i32 %229, %230
  %231 = load i32, i32* %pred_y, align 4
  %sub241 = sub nsw i32 %shl240, %231
  %idxprom242 = sext i32 %sub241 to i64
  %arrayidx243 = getelementptr inbounds i32, i32* %228, i64 %idxprom242
  %232 = load i32, i32* %arrayidx243, align 4
  %add244 = add nsw i32 %227, %232
  %mul245 = mul nsw i32 %222, %add244
  %shr246 = ashr i32 %mul245, 16
  store i32 %shr246, i32* %mcost, align 4
  %233 = load i16*, i16** %ref_pic, align 8
  %234 = load i16**, i16*** %orig_pic.addr, align 8
  %235 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %236 = load i32, i32* %blocksize_y, align 4
  %237 = load i32, i32* %blocksize_x, align 4
  %238 = load i32, i32* %blocksize_x4, align 4
  %239 = load i32, i32* %mcost, align 4
  %240 = load i32, i32* %min_mcost.addr, align 4
  %241 = load i32, i32* %cand_x, align 4
  %242 = load i32, i32* %cand_y, align 4
  %call247 = call i32 @PartCalMad(i16* %233, i16** %234, i16* (i32, i16*, i32, i32, i32, i32)* %235, i32 %236, i32 %237, i32 %238, i32 %239, i32 %240, i32 %241, i32 %242)
  store i32 %call247, i32* %mcost, align 4
  %243 = load i32, i32* %mcost, align 4
  %244 = load i32**, i32*** @McostState, align 8
  %245 = load i32, i32* %cand_y, align 4
  %246 = load i32, i32* %center_y, align 4
  %sub248 = sub nsw i32 %245, %246
  %247 = load i32, i32* %search_range.addr, align 4
  %add249 = add nsw i32 %sub248, %247
  %idxprom250 = sext i32 %add249 to i64
  %arrayidx251 = getelementptr inbounds i32*, i32** %244, i64 %idxprom250
  %248 = load i32*, i32** %arrayidx251, align 8
  %249 = load i32, i32* %cand_x, align 4
  %250 = load i32, i32* %center_x, align 4
  %sub252 = sub nsw i32 %249, %250
  %251 = load i32, i32* %search_range.addr, align 4
  %add253 = add nsw i32 %sub252, %251
  %idxprom254 = sext i32 %add253 to i64
  %arrayidx255 = getelementptr inbounds i32, i32* %248, i64 %idxprom254
  store i32 %243, i32* %arrayidx255, align 4
  %252 = load i32, i32* %mcost, align 4
  %253 = load i32, i32* %min_mcost.addr, align 4
  %cmp256 = icmp slt i32 %252, %253
  br i1 %cmp256, label %if.then258, label %if.end259

if.then258:                                       ; preds = %if.then235
  %254 = load i32, i32* %cand_x, align 4
  store i32 %254, i32* %best_x, align 4
  %255 = load i32, i32* %cand_y, align 4
  store i32 %255, i32* %best_y, align 4
  %256 = load i32, i32* %mcost, align 4
  store i32 %256, i32* %min_mcost.addr, align 4
  br label %if.end259

if.end259:                                        ; preds = %if.then258, %if.then235
  br label %if.end260

if.end260:                                        ; preds = %if.end259, %if.then225
  br label %if.end261

if.end261:                                        ; preds = %if.end260, %land.lhs.true220, %if.then215
  %257 = load i32, i32* %best_x, align 4
  store i32 %257, i32* %iXMinNow, align 4
  %258 = load i32, i32* %best_y, align 4
  store i32 %258, i32* %iYMinNow, align 4
  store i32 0, i32* %m, align 4
  br label %for.cond262

for.cond262:                                      ; preds = %for.inc318, %if.end261
  %259 = load i32, i32* %m, align 4
  %cmp263 = icmp slt i32 %259, 4
  br i1 %cmp263, label %for.body265, label %for.end320

for.body265:                                      ; preds = %for.cond262
  %260 = load i32, i32* %iXMinNow, align 4
  %261 = load i32, i32* %m, align 4
  %idxprom266 = sext i32 %261 to i64
  %arrayidx267 = getelementptr inbounds [4 x i32], [4 x i32]* @FastIntegerPelBlockMotionSearch.Diamond_x, i64 0, i64 %idxprom266
  %262 = load i32, i32* %arrayidx267, align 4
  %add268 = add nsw i32 %260, %262
  store i32 %add268, i32* %cand_x, align 4
  %263 = load i32, i32* %iYMinNow, align 4
  %264 = load i32, i32* %m, align 4
  %idxprom269 = sext i32 %264 to i64
  %arrayidx270 = getelementptr inbounds [4 x i32], [4 x i32]* @FastIntegerPelBlockMotionSearch.Diamond_y, i64 0, i64 %idxprom269
  %265 = load i32, i32* %arrayidx270, align 4
  %add271 = add nsw i32 %263, %265
  store i32 %add271, i32* %cand_y, align 4
  %266 = load i32, i32* %cand_x, align 4
  %267 = load i32, i32* %center_x, align 4
  %sub272 = sub nsw i32 %266, %267
  %call273 = call i32 @abs(i32 %sub272) #6
  %268 = load i32, i32* %search_range.addr, align 4
  %cmp274 = icmp sle i32 %call273, %268
  br i1 %cmp274, label %land.lhs.true276, label %if.end317

land.lhs.true276:                                 ; preds = %for.body265
  %269 = load i32, i32* %cand_y, align 4
  %270 = load i32, i32* %center_y, align 4
  %sub277 = sub nsw i32 %269, %270
  %call278 = call i32 @abs(i32 %sub277) #6
  %271 = load i32, i32* %search_range.addr, align 4
  %cmp279 = icmp sle i32 %call278, %271
  br i1 %cmp279, label %if.then281, label %if.end317

if.then281:                                       ; preds = %land.lhs.true276
  %272 = load i32**, i32*** @McostState, align 8
  %273 = load i32, i32* %cand_y, align 4
  %274 = load i32, i32* %center_y, align 4
  %sub282 = sub nsw i32 %273, %274
  %275 = load i32, i32* %search_range.addr, align 4
  %add283 = add nsw i32 %sub282, %275
  %idxprom284 = sext i32 %add283 to i64
  %arrayidx285 = getelementptr inbounds i32*, i32** %272, i64 %idxprom284
  %276 = load i32*, i32** %arrayidx285, align 8
  %277 = load i32, i32* %cand_x, align 4
  %278 = load i32, i32* %center_x, align 4
  %sub286 = sub nsw i32 %277, %278
  %279 = load i32, i32* %search_range.addr, align 4
  %add287 = add nsw i32 %sub286, %279
  %idxprom288 = sext i32 %add287 to i64
  %arrayidx289 = getelementptr inbounds i32, i32* %276, i64 %idxprom288
  %280 = load i32, i32* %arrayidx289, align 4
  %tobool290 = icmp ne i32 %280, 0
  br i1 %tobool290, label %if.end316, label %if.then291

if.then291:                                       ; preds = %if.then281
  %281 = load i32, i32* %lambda_factor, align 4
  %282 = load i32*, i32** @mvbits, align 8
  %283 = load i32, i32* %cand_x, align 4
  %284 = load i32, i32* %mvshift, align 4
  %shl292 = shl i32 %283, %284
  %285 = load i32, i32* %pred_x, align 4
  %sub293 = sub nsw i32 %shl292, %285
  %idxprom294 = sext i32 %sub293 to i64
  %arrayidx295 = getelementptr inbounds i32, i32* %282, i64 %idxprom294
  %286 = load i32, i32* %arrayidx295, align 4
  %287 = load i32*, i32** @mvbits, align 8
  %288 = load i32, i32* %cand_y, align 4
  %289 = load i32, i32* %mvshift, align 4
  %shl296 = shl i32 %288, %289
  %290 = load i32, i32* %pred_y, align 4
  %sub297 = sub nsw i32 %shl296, %290
  %idxprom298 = sext i32 %sub297 to i64
  %arrayidx299 = getelementptr inbounds i32, i32* %287, i64 %idxprom298
  %291 = load i32, i32* %arrayidx299, align 4
  %add300 = add nsw i32 %286, %291
  %mul301 = mul nsw i32 %281, %add300
  %shr302 = ashr i32 %mul301, 16
  store i32 %shr302, i32* %mcost, align 4
  %292 = load i16*, i16** %ref_pic, align 8
  %293 = load i16**, i16*** %orig_pic.addr, align 8
  %294 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %295 = load i32, i32* %blocksize_y, align 4
  %296 = load i32, i32* %blocksize_x, align 4
  %297 = load i32, i32* %blocksize_x4, align 4
  %298 = load i32, i32* %mcost, align 4
  %299 = load i32, i32* %min_mcost.addr, align 4
  %300 = load i32, i32* %cand_x, align 4
  %301 = load i32, i32* %cand_y, align 4
  %call303 = call i32 @PartCalMad(i16* %292, i16** %293, i16* (i32, i16*, i32, i32, i32, i32)* %294, i32 %295, i32 %296, i32 %297, i32 %298, i32 %299, i32 %300, i32 %301)
  store i32 %call303, i32* %mcost, align 4
  %302 = load i32, i32* %mcost, align 4
  %303 = load i32**, i32*** @McostState, align 8
  %304 = load i32, i32* %cand_y, align 4
  %305 = load i32, i32* %center_y, align 4
  %sub304 = sub nsw i32 %304, %305
  %306 = load i32, i32* %search_range.addr, align 4
  %add305 = add nsw i32 %sub304, %306
  %idxprom306 = sext i32 %add305 to i64
  %arrayidx307 = getelementptr inbounds i32*, i32** %303, i64 %idxprom306
  %307 = load i32*, i32** %arrayidx307, align 8
  %308 = load i32, i32* %cand_x, align 4
  %309 = load i32, i32* %center_x, align 4
  %sub308 = sub nsw i32 %308, %309
  %310 = load i32, i32* %search_range.addr, align 4
  %add309 = add nsw i32 %sub308, %310
  %idxprom310 = sext i32 %add309 to i64
  %arrayidx311 = getelementptr inbounds i32, i32* %307, i64 %idxprom310
  store i32 %302, i32* %arrayidx311, align 4
  %311 = load i32, i32* %mcost, align 4
  %312 = load i32, i32* %min_mcost.addr, align 4
  %cmp312 = icmp slt i32 %311, %312
  br i1 %cmp312, label %if.then314, label %if.end315

if.then314:                                       ; preds = %if.then291
  %313 = load i32, i32* %cand_x, align 4
  store i32 %313, i32* %best_x, align 4
  %314 = load i32, i32* %cand_y, align 4
  store i32 %314, i32* %best_y, align 4
  %315 = load i32, i32* %mcost, align 4
  store i32 %315, i32* %min_mcost.addr, align 4
  br label %if.end315

if.end315:                                        ; preds = %if.then314, %if.then291
  br label %if.end316

if.end316:                                        ; preds = %if.end315, %if.then281
  br label %if.end317

if.end317:                                        ; preds = %if.end316, %land.lhs.true276, %for.body265
  br label %for.inc318

for.inc318:                                       ; preds = %if.end317
  %316 = load i32, i32* %m, align 4
  %inc319 = add nsw i32 %316, 1
  store i32 %inc319, i32* %m, align 4
  br label %for.cond262

for.end320:                                       ; preds = %for.cond262
  br label %if.end321

if.end321:                                        ; preds = %for.end320, %lor.lhs.false
  %317 = load i32, i32* %blocktype.addr, align 4
  %cmp322 = icmp sgt i32 %317, 1
  br i1 %cmp322, label %if.then324, label %if.end392

if.then324:                                       ; preds = %if.end321
  %318 = load i32, i32* %pic_pix_x.addr, align 4
  %319 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @pred_MV_uplayer, i64 0, i64 0), align 4
  %div325 = sdiv i32 %319, 4
  %add326 = add nsw i32 %318, %div325
  store i32 %add326, i32* %cand_x, align 4
  %320 = load i32, i32* %pic_pix_y.addr, align 4
  %321 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @pred_MV_uplayer, i64 0, i64 1), align 4
  %div327 = sdiv i32 %321, 4
  %add328 = add nsw i32 %320, %div327
  store i32 %add328, i32* %cand_y, align 4
  %322 = load i32, i32* %cand_x, align 4
  %323 = load i32, i32* %center_x, align 4
  %sub329 = sub nsw i32 %322, %323
  %call330 = call i32 @abs(i32 %sub329) #6
  %324 = load i32, i32* %search_range.addr, align 4
  %cmp331 = icmp sle i32 %call330, %324
  br i1 %cmp331, label %land.lhs.true333, label %if.end374

land.lhs.true333:                                 ; preds = %if.then324
  %325 = load i32, i32* %cand_y, align 4
  %326 = load i32, i32* %center_y, align 4
  %sub334 = sub nsw i32 %325, %326
  %call335 = call i32 @abs(i32 %sub334) #6
  %327 = load i32, i32* %search_range.addr, align 4
  %cmp336 = icmp sle i32 %call335, %327
  br i1 %cmp336, label %if.then338, label %if.end374

if.then338:                                       ; preds = %land.lhs.true333
  %328 = load i32**, i32*** @McostState, align 8
  %329 = load i32, i32* %cand_y, align 4
  %330 = load i32, i32* %center_y, align 4
  %sub339 = sub nsw i32 %329, %330
  %331 = load i32, i32* %search_range.addr, align 4
  %add340 = add nsw i32 %sub339, %331
  %idxprom341 = sext i32 %add340 to i64
  %arrayidx342 = getelementptr inbounds i32*, i32** %328, i64 %idxprom341
  %332 = load i32*, i32** %arrayidx342, align 8
  %333 = load i32, i32* %cand_x, align 4
  %334 = load i32, i32* %center_x, align 4
  %sub343 = sub nsw i32 %333, %334
  %335 = load i32, i32* %search_range.addr, align 4
  %add344 = add nsw i32 %sub343, %335
  %idxprom345 = sext i32 %add344 to i64
  %arrayidx346 = getelementptr inbounds i32, i32* %332, i64 %idxprom345
  %336 = load i32, i32* %arrayidx346, align 4
  %tobool347 = icmp ne i32 %336, 0
  br i1 %tobool347, label %if.end373, label %if.then348

if.then348:                                       ; preds = %if.then338
  %337 = load i32, i32* %lambda_factor, align 4
  %338 = load i32*, i32** @mvbits, align 8
  %339 = load i32, i32* %cand_x, align 4
  %340 = load i32, i32* %mvshift, align 4
  %shl349 = shl i32 %339, %340
  %341 = load i32, i32* %pred_x, align 4
  %sub350 = sub nsw i32 %shl349, %341
  %idxprom351 = sext i32 %sub350 to i64
  %arrayidx352 = getelementptr inbounds i32, i32* %338, i64 %idxprom351
  %342 = load i32, i32* %arrayidx352, align 4
  %343 = load i32*, i32** @mvbits, align 8
  %344 = load i32, i32* %cand_y, align 4
  %345 = load i32, i32* %mvshift, align 4
  %shl353 = shl i32 %344, %345
  %346 = load i32, i32* %pred_y, align 4
  %sub354 = sub nsw i32 %shl353, %346
  %idxprom355 = sext i32 %sub354 to i64
  %arrayidx356 = getelementptr inbounds i32, i32* %343, i64 %idxprom355
  %347 = load i32, i32* %arrayidx356, align 4
  %add357 = add nsw i32 %342, %347
  %mul358 = mul nsw i32 %337, %add357
  %shr359 = ashr i32 %mul358, 16
  store i32 %shr359, i32* %mcost, align 4
  %348 = load i16*, i16** %ref_pic, align 8
  %349 = load i16**, i16*** %orig_pic.addr, align 8
  %350 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %351 = load i32, i32* %blocksize_y, align 4
  %352 = load i32, i32* %blocksize_x, align 4
  %353 = load i32, i32* %blocksize_x4, align 4
  %354 = load i32, i32* %mcost, align 4
  %355 = load i32, i32* %min_mcost.addr, align 4
  %356 = load i32, i32* %cand_x, align 4
  %357 = load i32, i32* %cand_y, align 4
  %call360 = call i32 @PartCalMad(i16* %348, i16** %349, i16* (i32, i16*, i32, i32, i32, i32)* %350, i32 %351, i32 %352, i32 %353, i32 %354, i32 %355, i32 %356, i32 %357)
  store i32 %call360, i32* %mcost, align 4
  %358 = load i32, i32* %mcost, align 4
  %359 = load i32**, i32*** @McostState, align 8
  %360 = load i32, i32* %cand_y, align 4
  %361 = load i32, i32* %center_y, align 4
  %sub361 = sub nsw i32 %360, %361
  %362 = load i32, i32* %search_range.addr, align 4
  %add362 = add nsw i32 %sub361, %362
  %idxprom363 = sext i32 %add362 to i64
  %arrayidx364 = getelementptr inbounds i32*, i32** %359, i64 %idxprom363
  %363 = load i32*, i32** %arrayidx364, align 8
  %364 = load i32, i32* %cand_x, align 4
  %365 = load i32, i32* %center_x, align 4
  %sub365 = sub nsw i32 %364, %365
  %366 = load i32, i32* %search_range.addr, align 4
  %add366 = add nsw i32 %sub365, %366
  %idxprom367 = sext i32 %add366 to i64
  %arrayidx368 = getelementptr inbounds i32, i32* %363, i64 %idxprom367
  store i32 %358, i32* %arrayidx368, align 4
  %367 = load i32, i32* %mcost, align 4
  %368 = load i32, i32* %min_mcost.addr, align 4
  %cmp369 = icmp slt i32 %367, %368
  br i1 %cmp369, label %if.then371, label %if.end372

if.then371:                                       ; preds = %if.then348
  %369 = load i32, i32* %cand_x, align 4
  store i32 %369, i32* %best_x, align 4
  %370 = load i32, i32* %cand_y, align 4
  store i32 %370, i32* %best_y, align 4
  %371 = load i32, i32* %mcost, align 4
  store i32 %371, i32* %min_mcost.addr, align 4
  br label %if.end372

if.end372:                                        ; preds = %if.then371, %if.then348
  br label %if.end373

if.end373:                                        ; preds = %if.end372, %if.then338
  br label %if.end374

if.end374:                                        ; preds = %if.end373, %land.lhs.true333, %if.then324
  %372 = load i32, i32* %min_mcost.addr, align 4
  %373 = load i32, i32* @pred_SAD_uplayer, align 4
  %sub375 = sub nsw i32 %372, %373
  %conv376 = sitofp i32 %sub375 to float
  %374 = load i32, i32* @pred_SAD_uplayer, align 4
  %conv377 = sitofp i32 %374 to float
  %375 = load float, float* %betaThird, align 4
  %mul378 = fmul float %conv377, %375
  %cmp379 = fcmp olt float %conv376, %mul378
  br i1 %cmp379, label %if.then381, label %if.else382

if.then381:                                       ; preds = %if.end374
  br label %third_step

if.else382:                                       ; preds = %if.end374
  %376 = load i32, i32* %min_mcost.addr, align 4
  %377 = load i32, i32* @pred_SAD_uplayer, align 4
  %sub383 = sub nsw i32 %376, %377
  %conv384 = sitofp i32 %sub383 to float
  %378 = load i32, i32* @pred_SAD_uplayer, align 4
  %conv385 = sitofp i32 %378 to float
  %379 = load float, float* %betaSec, align 4
  %mul386 = fmul float %conv385, %379
  %cmp387 = fcmp olt float %conv384, %mul386
  br i1 %cmp387, label %if.then389, label %if.end390

if.then389:                                       ; preds = %if.else382
  br label %sec_step

if.end390:                                        ; preds = %if.else382
  br label %if.end391

if.end391:                                        ; preds = %if.end390
  br label %if.end392

if.end392:                                        ; preds = %if.end391, %if.end321
  %380 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %number = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %380, i32 0, i32 0
  %381 = load i32, i32* %number, align 8
  %382 = load i16, i16* %ref.addr, align 2
  %conv393 = sext i16 %382 to i32
  %add394 = add nsw i32 1, %conv393
  %cmp395 = icmp sgt i32 %381, %add394
  br i1 %cmp395, label %land.lhs.true397, label %lor.lhs.false401

land.lhs.true397:                                 ; preds = %if.end392
  %383 = load i16, i16* %ref.addr, align 2
  %conv398 = sext i16 %383 to i32
  %cmp399 = icmp ne i32 %conv398, -1
  br i1 %cmp399, label %if.then408, label %lor.lhs.false401

lor.lhs.false401:                                 ; preds = %land.lhs.true397, %if.end392
  %384 = load i32, i32* %list.addr, align 4
  %cmp402 = icmp eq i32 %384, 1
  br i1 %cmp402, label %land.lhs.true404, label %if.end459

land.lhs.true404:                                 ; preds = %lor.lhs.false401
  %385 = load i32, i32* @Bframe_ctr, align 4
  %386 = load i32, i32* %N_Bframe, align 4
  %rem405 = srem i32 %385, %386
  %cmp406 = icmp sgt i32 %rem405, 1
  br i1 %cmp406, label %if.then408, label %if.end459

if.then408:                                       ; preds = %land.lhs.true404, %land.lhs.true397
  %387 = load i32, i32* %pic_pix_x.addr, align 4
  %388 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @pred_MV_time, i64 0, i64 0), align 4
  %div409 = sdiv i32 %388, 4
  %add410 = add nsw i32 %387, %div409
  store i32 %add410, i32* %cand_x, align 4
  %389 = load i32, i32* %pic_pix_y.addr, align 4
  %390 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @pred_MV_time, i64 0, i64 1), align 4
  %div411 = sdiv i32 %390, 4
  %add412 = add nsw i32 %389, %div411
  store i32 %add412, i32* %cand_y, align 4
  %391 = load i32, i32* %cand_x, align 4
  %392 = load i32, i32* %center_x, align 4
  %sub413 = sub nsw i32 %391, %392
  %call414 = call i32 @abs(i32 %sub413) #6
  %393 = load i32, i32* %search_range.addr, align 4
  %cmp415 = icmp sle i32 %call414, %393
  br i1 %cmp415, label %land.lhs.true417, label %if.end458

land.lhs.true417:                                 ; preds = %if.then408
  %394 = load i32, i32* %cand_y, align 4
  %395 = load i32, i32* %center_y, align 4
  %sub418 = sub nsw i32 %394, %395
  %call419 = call i32 @abs(i32 %sub418) #6
  %396 = load i32, i32* %search_range.addr, align 4
  %cmp420 = icmp sle i32 %call419, %396
  br i1 %cmp420, label %if.then422, label %if.end458

if.then422:                                       ; preds = %land.lhs.true417
  %397 = load i32**, i32*** @McostState, align 8
  %398 = load i32, i32* %cand_y, align 4
  %399 = load i32, i32* %center_y, align 4
  %sub423 = sub nsw i32 %398, %399
  %400 = load i32, i32* %search_range.addr, align 4
  %add424 = add nsw i32 %sub423, %400
  %idxprom425 = sext i32 %add424 to i64
  %arrayidx426 = getelementptr inbounds i32*, i32** %397, i64 %idxprom425
  %401 = load i32*, i32** %arrayidx426, align 8
  %402 = load i32, i32* %cand_x, align 4
  %403 = load i32, i32* %center_x, align 4
  %sub427 = sub nsw i32 %402, %403
  %404 = load i32, i32* %search_range.addr, align 4
  %add428 = add nsw i32 %sub427, %404
  %idxprom429 = sext i32 %add428 to i64
  %arrayidx430 = getelementptr inbounds i32, i32* %401, i64 %idxprom429
  %405 = load i32, i32* %arrayidx430, align 4
  %tobool431 = icmp ne i32 %405, 0
  br i1 %tobool431, label %if.end457, label %if.then432

if.then432:                                       ; preds = %if.then422
  %406 = load i32, i32* %lambda_factor, align 4
  %407 = load i32*, i32** @mvbits, align 8
  %408 = load i32, i32* %cand_x, align 4
  %409 = load i32, i32* %mvshift, align 4
  %shl433 = shl i32 %408, %409
  %410 = load i32, i32* %pred_x, align 4
  %sub434 = sub nsw i32 %shl433, %410
  %idxprom435 = sext i32 %sub434 to i64
  %arrayidx436 = getelementptr inbounds i32, i32* %407, i64 %idxprom435
  %411 = load i32, i32* %arrayidx436, align 4
  %412 = load i32*, i32** @mvbits, align 8
  %413 = load i32, i32* %cand_y, align 4
  %414 = load i32, i32* %mvshift, align 4
  %shl437 = shl i32 %413, %414
  %415 = load i32, i32* %pred_y, align 4
  %sub438 = sub nsw i32 %shl437, %415
  %idxprom439 = sext i32 %sub438 to i64
  %arrayidx440 = getelementptr inbounds i32, i32* %412, i64 %idxprom439
  %416 = load i32, i32* %arrayidx440, align 4
  %add441 = add nsw i32 %411, %416
  %mul442 = mul nsw i32 %406, %add441
  %shr443 = ashr i32 %mul442, 16
  store i32 %shr443, i32* %mcost, align 4
  %417 = load i16*, i16** %ref_pic, align 8
  %418 = load i16**, i16*** %orig_pic.addr, align 8
  %419 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %420 = load i32, i32* %blocksize_y, align 4
  %421 = load i32, i32* %blocksize_x, align 4
  %422 = load i32, i32* %blocksize_x4, align 4
  %423 = load i32, i32* %mcost, align 4
  %424 = load i32, i32* %min_mcost.addr, align 4
  %425 = load i32, i32* %cand_x, align 4
  %426 = load i32, i32* %cand_y, align 4
  %call444 = call i32 @PartCalMad(i16* %417, i16** %418, i16* (i32, i16*, i32, i32, i32, i32)* %419, i32 %420, i32 %421, i32 %422, i32 %423, i32 %424, i32 %425, i32 %426)
  store i32 %call444, i32* %mcost, align 4
  %427 = load i32, i32* %mcost, align 4
  %428 = load i32**, i32*** @McostState, align 8
  %429 = load i32, i32* %cand_y, align 4
  %430 = load i32, i32* %center_y, align 4
  %sub445 = sub nsw i32 %429, %430
  %431 = load i32, i32* %search_range.addr, align 4
  %add446 = add nsw i32 %sub445, %431
  %idxprom447 = sext i32 %add446 to i64
  %arrayidx448 = getelementptr inbounds i32*, i32** %428, i64 %idxprom447
  %432 = load i32*, i32** %arrayidx448, align 8
  %433 = load i32, i32* %cand_x, align 4
  %434 = load i32, i32* %center_x, align 4
  %sub449 = sub nsw i32 %433, %434
  %435 = load i32, i32* %search_range.addr, align 4
  %add450 = add nsw i32 %sub449, %435
  %idxprom451 = sext i32 %add450 to i64
  %arrayidx452 = getelementptr inbounds i32, i32* %432, i64 %idxprom451
  store i32 %427, i32* %arrayidx452, align 4
  %436 = load i32, i32* %mcost, align 4
  %437 = load i32, i32* %min_mcost.addr, align 4
  %cmp453 = icmp slt i32 %436, %437
  br i1 %cmp453, label %if.then455, label %if.end456

if.then455:                                       ; preds = %if.then432
  %438 = load i32, i32* %cand_x, align 4
  store i32 %438, i32* %best_x, align 4
  %439 = load i32, i32* %cand_y, align 4
  store i32 %439, i32* %best_y, align 4
  %440 = load i32, i32* %mcost, align 4
  store i32 %440, i32* %min_mcost.addr, align 4
  br label %if.end456

if.end456:                                        ; preds = %if.then455, %if.then432
  br label %if.end457

if.end457:                                        ; preds = %if.end456, %if.then422
  br label %if.end458

if.end458:                                        ; preds = %if.end457, %land.lhs.true417, %if.then408
  br label %if.end459

if.end459:                                        ; preds = %if.end458, %land.lhs.true404, %lor.lhs.false401
  %441 = load %struct.InputParameters*, %struct.InputParameters** @input, align 8
  %PicInterlace = getelementptr inbounds %struct.InputParameters, %struct.InputParameters* %441, i32 0, i32 91
  %442 = load i32, i32* %PicInterlace, align 8
  %cmp460 = icmp eq i32 %442, 1
  br i1 %cmp460, label %if.then462, label %if.else535

if.then462:                                       ; preds = %if.end459
  %443 = load i32, i32* %list.addr, align 4
  %cmp463 = icmp eq i32 %443, 0
  br i1 %cmp463, label %land.lhs.true465, label %lor.lhs.false469

land.lhs.true465:                                 ; preds = %if.then462
  %444 = load i16, i16* %ref.addr, align 2
  %conv466 = sext i16 %444 to i32
  %cmp467 = icmp sgt i32 %conv466, 0
  br i1 %cmp467, label %if.then483, label %lor.lhs.false469

lor.lhs.false469:                                 ; preds = %land.lhs.true465, %if.then462
  %445 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %type = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %445, i32 0, i32 6
  %446 = load i32, i32* %type, align 8
  %cmp470 = icmp eq i32 %446, 1
  br i1 %cmp470, label %land.lhs.true472, label %if.end534

land.lhs.true472:                                 ; preds = %lor.lhs.false469
  %447 = load i32, i32* %list.addr, align 4
  %cmp473 = icmp eq i32 %447, 0
  br i1 %cmp473, label %land.lhs.true475, label %if.end534

land.lhs.true475:                                 ; preds = %land.lhs.true472
  %448 = load i16, i16* %ref.addr, align 2
  %conv476 = sext i16 %448 to i32
  %cmp477 = icmp eq i32 %conv476, 0
  br i1 %cmp477, label %if.then483, label %lor.lhs.false479

lor.lhs.false479:                                 ; preds = %land.lhs.true475
  %449 = load i16, i16* %ref.addr, align 2
  %conv480 = sext i16 %449 to i32
  %cmp481 = icmp eq i32 %conv480, 2
  br i1 %cmp481, label %if.then483, label %if.end534

if.then483:                                       ; preds = %lor.lhs.false479, %land.lhs.true475, %land.lhs.true465
  %450 = load i32, i32* %pic_pix_x.addr, align 4
  %451 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @pred_MV_ref, i64 0, i64 0), align 4
  %div484 = sdiv i32 %451, 4
  %add485 = add nsw i32 %450, %div484
  store i32 %add485, i32* %cand_x, align 4
  %452 = load i32, i32* %pic_pix_y.addr, align 4
  %453 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @pred_MV_ref, i64 0, i64 1), align 4
  %div486 = sdiv i32 %453, 4
  %add487 = add nsw i32 %452, %div486
  store i32 %add487, i32* %cand_y, align 4
  %454 = load i32, i32* %cand_x, align 4
  %455 = load i32, i32* %center_x, align 4
  %sub488 = sub nsw i32 %454, %455
  %call489 = call i32 @abs(i32 %sub488) #6
  %456 = load i32, i32* %search_range.addr, align 4
  %cmp490 = icmp sle i32 %call489, %456
  br i1 %cmp490, label %land.lhs.true492, label %if.end533

land.lhs.true492:                                 ; preds = %if.then483
  %457 = load i32, i32* %cand_y, align 4
  %458 = load i32, i32* %center_y, align 4
  %sub493 = sub nsw i32 %457, %458
  %call494 = call i32 @abs(i32 %sub493) #6
  %459 = load i32, i32* %search_range.addr, align 4
  %cmp495 = icmp sle i32 %call494, %459
  br i1 %cmp495, label %if.then497, label %if.end533

if.then497:                                       ; preds = %land.lhs.true492
  %460 = load i32**, i32*** @McostState, align 8
  %461 = load i32, i32* %cand_y, align 4
  %462 = load i32, i32* %center_y, align 4
  %sub498 = sub nsw i32 %461, %462
  %463 = load i32, i32* %search_range.addr, align 4
  %add499 = add nsw i32 %sub498, %463
  %idxprom500 = sext i32 %add499 to i64
  %arrayidx501 = getelementptr inbounds i32*, i32** %460, i64 %idxprom500
  %464 = load i32*, i32** %arrayidx501, align 8
  %465 = load i32, i32* %cand_x, align 4
  %466 = load i32, i32* %center_x, align 4
  %sub502 = sub nsw i32 %465, %466
  %467 = load i32, i32* %search_range.addr, align 4
  %add503 = add nsw i32 %sub502, %467
  %idxprom504 = sext i32 %add503 to i64
  %arrayidx505 = getelementptr inbounds i32, i32* %464, i64 %idxprom504
  %468 = load i32, i32* %arrayidx505, align 4
  %tobool506 = icmp ne i32 %468, 0
  br i1 %tobool506, label %if.end532, label %if.then507

if.then507:                                       ; preds = %if.then497
  %469 = load i32, i32* %lambda_factor, align 4
  %470 = load i32*, i32** @mvbits, align 8
  %471 = load i32, i32* %cand_x, align 4
  %472 = load i32, i32* %mvshift, align 4
  %shl508 = shl i32 %471, %472
  %473 = load i32, i32* %pred_x, align 4
  %sub509 = sub nsw i32 %shl508, %473
  %idxprom510 = sext i32 %sub509 to i64
  %arrayidx511 = getelementptr inbounds i32, i32* %470, i64 %idxprom510
  %474 = load i32, i32* %arrayidx511, align 4
  %475 = load i32*, i32** @mvbits, align 8
  %476 = load i32, i32* %cand_y, align 4
  %477 = load i32, i32* %mvshift, align 4
  %shl512 = shl i32 %476, %477
  %478 = load i32, i32* %pred_y, align 4
  %sub513 = sub nsw i32 %shl512, %478
  %idxprom514 = sext i32 %sub513 to i64
  %arrayidx515 = getelementptr inbounds i32, i32* %475, i64 %idxprom514
  %479 = load i32, i32* %arrayidx515, align 4
  %add516 = add nsw i32 %474, %479
  %mul517 = mul nsw i32 %469, %add516
  %shr518 = ashr i32 %mul517, 16
  store i32 %shr518, i32* %mcost, align 4
  %480 = load i16*, i16** %ref_pic, align 8
  %481 = load i16**, i16*** %orig_pic.addr, align 8
  %482 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %483 = load i32, i32* %blocksize_y, align 4
  %484 = load i32, i32* %blocksize_x, align 4
  %485 = load i32, i32* %blocksize_x4, align 4
  %486 = load i32, i32* %mcost, align 4
  %487 = load i32, i32* %min_mcost.addr, align 4
  %488 = load i32, i32* %cand_x, align 4
  %489 = load i32, i32* %cand_y, align 4
  %call519 = call i32 @PartCalMad(i16* %480, i16** %481, i16* (i32, i16*, i32, i32, i32, i32)* %482, i32 %483, i32 %484, i32 %485, i32 %486, i32 %487, i32 %488, i32 %489)
  store i32 %call519, i32* %mcost, align 4
  %490 = load i32, i32* %mcost, align 4
  %491 = load i32**, i32*** @McostState, align 8
  %492 = load i32, i32* %cand_y, align 4
  %493 = load i32, i32* %center_y, align 4
  %sub520 = sub nsw i32 %492, %493
  %494 = load i32, i32* %search_range.addr, align 4
  %add521 = add nsw i32 %sub520, %494
  %idxprom522 = sext i32 %add521 to i64
  %arrayidx523 = getelementptr inbounds i32*, i32** %491, i64 %idxprom522
  %495 = load i32*, i32** %arrayidx523, align 8
  %496 = load i32, i32* %cand_x, align 4
  %497 = load i32, i32* %center_x, align 4
  %sub524 = sub nsw i32 %496, %497
  %498 = load i32, i32* %search_range.addr, align 4
  %add525 = add nsw i32 %sub524, %498
  %idxprom526 = sext i32 %add525 to i64
  %arrayidx527 = getelementptr inbounds i32, i32* %495, i64 %idxprom526
  store i32 %490, i32* %arrayidx527, align 4
  %499 = load i32, i32* %mcost, align 4
  %500 = load i32, i32* %min_mcost.addr, align 4
  %cmp528 = icmp slt i32 %499, %500
  br i1 %cmp528, label %if.then530, label %if.end531

if.then530:                                       ; preds = %if.then507
  %501 = load i32, i32* %cand_x, align 4
  store i32 %501, i32* %best_x, align 4
  %502 = load i32, i32* %cand_y, align 4
  store i32 %502, i32* %best_y, align 4
  %503 = load i32, i32* %mcost, align 4
  store i32 %503, i32* %min_mcost.addr, align 4
  br label %if.end531

if.end531:                                        ; preds = %if.then530, %if.then507
  br label %if.end532

if.end532:                                        ; preds = %if.end531, %if.then497
  br label %if.end533

if.end533:                                        ; preds = %if.end532, %land.lhs.true492, %if.then483
  br label %if.end534

if.end534:                                        ; preds = %if.end533, %lor.lhs.false479, %land.lhs.true472, %lor.lhs.false469
  br label %if.end605

if.else535:                                       ; preds = %if.end459
  %504 = load i32, i32* %list.addr, align 4
  %cmp536 = icmp eq i32 %504, 0
  br i1 %cmp536, label %land.lhs.true538, label %lor.lhs.false542

land.lhs.true538:                                 ; preds = %if.else535
  %505 = load i16, i16* %ref.addr, align 2
  %conv539 = sext i16 %505 to i32
  %cmp540 = icmp sgt i32 %conv539, 0
  br i1 %cmp540, label %if.then553, label %lor.lhs.false542

lor.lhs.false542:                                 ; preds = %land.lhs.true538, %if.else535
  %506 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %type543 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %506, i32 0, i32 6
  %507 = load i32, i32* %type543, align 8
  %cmp544 = icmp eq i32 %507, 1
  br i1 %cmp544, label %land.lhs.true546, label %if.end604

land.lhs.true546:                                 ; preds = %lor.lhs.false542
  %508 = load i32, i32* %list.addr, align 4
  %cmp547 = icmp eq i32 %508, 0
  br i1 %cmp547, label %land.lhs.true549, label %if.end604

land.lhs.true549:                                 ; preds = %land.lhs.true546
  %509 = load i16, i16* %ref.addr, align 2
  %conv550 = sext i16 %509 to i32
  %cmp551 = icmp eq i32 %conv550, 0
  br i1 %cmp551, label %if.then553, label %if.end604

if.then553:                                       ; preds = %land.lhs.true549, %land.lhs.true538
  %510 = load i32, i32* %pic_pix_x.addr, align 4
  %511 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @pred_MV_ref, i64 0, i64 0), align 4
  %div554 = sdiv i32 %511, 4
  %add555 = add nsw i32 %510, %div554
  store i32 %add555, i32* %cand_x, align 4
  %512 = load i32, i32* %pic_pix_y.addr, align 4
  %513 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @pred_MV_ref, i64 0, i64 1), align 4
  %div556 = sdiv i32 %513, 4
  %add557 = add nsw i32 %512, %div556
  store i32 %add557, i32* %cand_y, align 4
  %514 = load i32, i32* %cand_x, align 4
  %515 = load i32, i32* %center_x, align 4
  %sub558 = sub nsw i32 %514, %515
  %call559 = call i32 @abs(i32 %sub558) #6
  %516 = load i32, i32* %search_range.addr, align 4
  %cmp560 = icmp sle i32 %call559, %516
  br i1 %cmp560, label %land.lhs.true562, label %if.end603

land.lhs.true562:                                 ; preds = %if.then553
  %517 = load i32, i32* %cand_y, align 4
  %518 = load i32, i32* %center_y, align 4
  %sub563 = sub nsw i32 %517, %518
  %call564 = call i32 @abs(i32 %sub563) #6
  %519 = load i32, i32* %search_range.addr, align 4
  %cmp565 = icmp sle i32 %call564, %519
  br i1 %cmp565, label %if.then567, label %if.end603

if.then567:                                       ; preds = %land.lhs.true562
  %520 = load i32**, i32*** @McostState, align 8
  %521 = load i32, i32* %cand_y, align 4
  %522 = load i32, i32* %center_y, align 4
  %sub568 = sub nsw i32 %521, %522
  %523 = load i32, i32* %search_range.addr, align 4
  %add569 = add nsw i32 %sub568, %523
  %idxprom570 = sext i32 %add569 to i64
  %arrayidx571 = getelementptr inbounds i32*, i32** %520, i64 %idxprom570
  %524 = load i32*, i32** %arrayidx571, align 8
  %525 = load i32, i32* %cand_x, align 4
  %526 = load i32, i32* %center_x, align 4
  %sub572 = sub nsw i32 %525, %526
  %527 = load i32, i32* %search_range.addr, align 4
  %add573 = add nsw i32 %sub572, %527
  %idxprom574 = sext i32 %add573 to i64
  %arrayidx575 = getelementptr inbounds i32, i32* %524, i64 %idxprom574
  %528 = load i32, i32* %arrayidx575, align 4
  %tobool576 = icmp ne i32 %528, 0
  br i1 %tobool576, label %if.end602, label %if.then577

if.then577:                                       ; preds = %if.then567
  %529 = load i32, i32* %lambda_factor, align 4
  %530 = load i32*, i32** @mvbits, align 8
  %531 = load i32, i32* %cand_x, align 4
  %532 = load i32, i32* %mvshift, align 4
  %shl578 = shl i32 %531, %532
  %533 = load i32, i32* %pred_x, align 4
  %sub579 = sub nsw i32 %shl578, %533
  %idxprom580 = sext i32 %sub579 to i64
  %arrayidx581 = getelementptr inbounds i32, i32* %530, i64 %idxprom580
  %534 = load i32, i32* %arrayidx581, align 4
  %535 = load i32*, i32** @mvbits, align 8
  %536 = load i32, i32* %cand_y, align 4
  %537 = load i32, i32* %mvshift, align 4
  %shl582 = shl i32 %536, %537
  %538 = load i32, i32* %pred_y, align 4
  %sub583 = sub nsw i32 %shl582, %538
  %idxprom584 = sext i32 %sub583 to i64
  %arrayidx585 = getelementptr inbounds i32, i32* %535, i64 %idxprom584
  %539 = load i32, i32* %arrayidx585, align 4
  %add586 = add nsw i32 %534, %539
  %mul587 = mul nsw i32 %529, %add586
  %shr588 = ashr i32 %mul587, 16
  store i32 %shr588, i32* %mcost, align 4
  %540 = load i16*, i16** %ref_pic, align 8
  %541 = load i16**, i16*** %orig_pic.addr, align 8
  %542 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %543 = load i32, i32* %blocksize_y, align 4
  %544 = load i32, i32* %blocksize_x, align 4
  %545 = load i32, i32* %blocksize_x4, align 4
  %546 = load i32, i32* %mcost, align 4
  %547 = load i32, i32* %min_mcost.addr, align 4
  %548 = load i32, i32* %cand_x, align 4
  %549 = load i32, i32* %cand_y, align 4
  %call589 = call i32 @PartCalMad(i16* %540, i16** %541, i16* (i32, i16*, i32, i32, i32, i32)* %542, i32 %543, i32 %544, i32 %545, i32 %546, i32 %547, i32 %548, i32 %549)
  store i32 %call589, i32* %mcost, align 4
  %550 = load i32, i32* %mcost, align 4
  %551 = load i32**, i32*** @McostState, align 8
  %552 = load i32, i32* %cand_y, align 4
  %553 = load i32, i32* %center_y, align 4
  %sub590 = sub nsw i32 %552, %553
  %554 = load i32, i32* %search_range.addr, align 4
  %add591 = add nsw i32 %sub590, %554
  %idxprom592 = sext i32 %add591 to i64
  %arrayidx593 = getelementptr inbounds i32*, i32** %551, i64 %idxprom592
  %555 = load i32*, i32** %arrayidx593, align 8
  %556 = load i32, i32* %cand_x, align 4
  %557 = load i32, i32* %center_x, align 4
  %sub594 = sub nsw i32 %556, %557
  %558 = load i32, i32* %search_range.addr, align 4
  %add595 = add nsw i32 %sub594, %558
  %idxprom596 = sext i32 %add595 to i64
  %arrayidx597 = getelementptr inbounds i32, i32* %555, i64 %idxprom596
  store i32 %550, i32* %arrayidx597, align 4
  %559 = load i32, i32* %mcost, align 4
  %560 = load i32, i32* %min_mcost.addr, align 4
  %cmp598 = icmp slt i32 %559, %560
  br i1 %cmp598, label %if.then600, label %if.end601

if.then600:                                       ; preds = %if.then577
  %561 = load i32, i32* %cand_x, align 4
  store i32 %561, i32* %best_x, align 4
  %562 = load i32, i32* %cand_y, align 4
  store i32 %562, i32* %best_y, align 4
  %563 = load i32, i32* %mcost, align 4
  store i32 %563, i32* %min_mcost.addr, align 4
  br label %if.end601

if.end601:                                        ; preds = %if.then600, %if.then577
  br label %if.end602

if.end602:                                        ; preds = %if.end601, %if.then567
  br label %if.end603

if.end603:                                        ; preds = %if.end602, %land.lhs.true562, %if.then553
  br label %if.end604

if.end604:                                        ; preds = %if.end603, %land.lhs.true549, %land.lhs.true546, %lor.lhs.false542
  br label %if.end605

if.end605:                                        ; preds = %if.end604, %if.end534
  %564 = load i32, i32* %best_x, align 4
  store i32 %564, i32* %iXMinNow, align 4
  %565 = load i32, i32* %best_y, align 4
  store i32 %565, i32* %iYMinNow, align 4
  store i32 0, i32* %m, align 4
  br label %for.cond606

for.cond606:                                      ; preds = %for.inc662, %if.end605
  %566 = load i32, i32* %m, align 4
  %cmp607 = icmp slt i32 %566, 4
  br i1 %cmp607, label %for.body609, label %for.end664

for.body609:                                      ; preds = %for.cond606
  %567 = load i32, i32* %iXMinNow, align 4
  %568 = load i32, i32* %m, align 4
  %idxprom610 = sext i32 %568 to i64
  %arrayidx611 = getelementptr inbounds [4 x i32], [4 x i32]* @FastIntegerPelBlockMotionSearch.Diamond_x, i64 0, i64 %idxprom610
  %569 = load i32, i32* %arrayidx611, align 4
  %add612 = add nsw i32 %567, %569
  store i32 %add612, i32* %cand_x, align 4
  %570 = load i32, i32* %iYMinNow, align 4
  %571 = load i32, i32* %m, align 4
  %idxprom613 = sext i32 %571 to i64
  %arrayidx614 = getelementptr inbounds [4 x i32], [4 x i32]* @FastIntegerPelBlockMotionSearch.Diamond_y, i64 0, i64 %idxprom613
  %572 = load i32, i32* %arrayidx614, align 4
  %add615 = add nsw i32 %570, %572
  store i32 %add615, i32* %cand_y, align 4
  %573 = load i32, i32* %cand_x, align 4
  %574 = load i32, i32* %center_x, align 4
  %sub616 = sub nsw i32 %573, %574
  %call617 = call i32 @abs(i32 %sub616) #6
  %575 = load i32, i32* %search_range.addr, align 4
  %cmp618 = icmp sle i32 %call617, %575
  br i1 %cmp618, label %land.lhs.true620, label %if.end661

land.lhs.true620:                                 ; preds = %for.body609
  %576 = load i32, i32* %cand_y, align 4
  %577 = load i32, i32* %center_y, align 4
  %sub621 = sub nsw i32 %576, %577
  %call622 = call i32 @abs(i32 %sub621) #6
  %578 = load i32, i32* %search_range.addr, align 4
  %cmp623 = icmp sle i32 %call622, %578
  br i1 %cmp623, label %if.then625, label %if.end661

if.then625:                                       ; preds = %land.lhs.true620
  %579 = load i32**, i32*** @McostState, align 8
  %580 = load i32, i32* %cand_y, align 4
  %581 = load i32, i32* %center_y, align 4
  %sub626 = sub nsw i32 %580, %581
  %582 = load i32, i32* %search_range.addr, align 4
  %add627 = add nsw i32 %sub626, %582
  %idxprom628 = sext i32 %add627 to i64
  %arrayidx629 = getelementptr inbounds i32*, i32** %579, i64 %idxprom628
  %583 = load i32*, i32** %arrayidx629, align 8
  %584 = load i32, i32* %cand_x, align 4
  %585 = load i32, i32* %center_x, align 4
  %sub630 = sub nsw i32 %584, %585
  %586 = load i32, i32* %search_range.addr, align 4
  %add631 = add nsw i32 %sub630, %586
  %idxprom632 = sext i32 %add631 to i64
  %arrayidx633 = getelementptr inbounds i32, i32* %583, i64 %idxprom632
  %587 = load i32, i32* %arrayidx633, align 4
  %tobool634 = icmp ne i32 %587, 0
  br i1 %tobool634, label %if.end660, label %if.then635

if.then635:                                       ; preds = %if.then625
  %588 = load i32, i32* %lambda_factor, align 4
  %589 = load i32*, i32** @mvbits, align 8
  %590 = load i32, i32* %cand_x, align 4
  %591 = load i32, i32* %mvshift, align 4
  %shl636 = shl i32 %590, %591
  %592 = load i32, i32* %pred_x, align 4
  %sub637 = sub nsw i32 %shl636, %592
  %idxprom638 = sext i32 %sub637 to i64
  %arrayidx639 = getelementptr inbounds i32, i32* %589, i64 %idxprom638
  %593 = load i32, i32* %arrayidx639, align 4
  %594 = load i32*, i32** @mvbits, align 8
  %595 = load i32, i32* %cand_y, align 4
  %596 = load i32, i32* %mvshift, align 4
  %shl640 = shl i32 %595, %596
  %597 = load i32, i32* %pred_y, align 4
  %sub641 = sub nsw i32 %shl640, %597
  %idxprom642 = sext i32 %sub641 to i64
  %arrayidx643 = getelementptr inbounds i32, i32* %594, i64 %idxprom642
  %598 = load i32, i32* %arrayidx643, align 4
  %add644 = add nsw i32 %593, %598
  %mul645 = mul nsw i32 %588, %add644
  %shr646 = ashr i32 %mul645, 16
  store i32 %shr646, i32* %mcost, align 4
  %599 = load i16*, i16** %ref_pic, align 8
  %600 = load i16**, i16*** %orig_pic.addr, align 8
  %601 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %602 = load i32, i32* %blocksize_y, align 4
  %603 = load i32, i32* %blocksize_x, align 4
  %604 = load i32, i32* %blocksize_x4, align 4
  %605 = load i32, i32* %mcost, align 4
  %606 = load i32, i32* %min_mcost.addr, align 4
  %607 = load i32, i32* %cand_x, align 4
  %608 = load i32, i32* %cand_y, align 4
  %call647 = call i32 @PartCalMad(i16* %599, i16** %600, i16* (i32, i16*, i32, i32, i32, i32)* %601, i32 %602, i32 %603, i32 %604, i32 %605, i32 %606, i32 %607, i32 %608)
  store i32 %call647, i32* %mcost, align 4
  %609 = load i32, i32* %mcost, align 4
  %610 = load i32**, i32*** @McostState, align 8
  %611 = load i32, i32* %cand_y, align 4
  %612 = load i32, i32* %center_y, align 4
  %sub648 = sub nsw i32 %611, %612
  %613 = load i32, i32* %search_range.addr, align 4
  %add649 = add nsw i32 %sub648, %613
  %idxprom650 = sext i32 %add649 to i64
  %arrayidx651 = getelementptr inbounds i32*, i32** %610, i64 %idxprom650
  %614 = load i32*, i32** %arrayidx651, align 8
  %615 = load i32, i32* %cand_x, align 4
  %616 = load i32, i32* %center_x, align 4
  %sub652 = sub nsw i32 %615, %616
  %617 = load i32, i32* %search_range.addr, align 4
  %add653 = add nsw i32 %sub652, %617
  %idxprom654 = sext i32 %add653 to i64
  %arrayidx655 = getelementptr inbounds i32, i32* %614, i64 %idxprom654
  store i32 %609, i32* %arrayidx655, align 4
  %618 = load i32, i32* %mcost, align 4
  %619 = load i32, i32* %min_mcost.addr, align 4
  %cmp656 = icmp slt i32 %618, %619
  br i1 %cmp656, label %if.then658, label %if.end659

if.then658:                                       ; preds = %if.then635
  %620 = load i32, i32* %cand_x, align 4
  store i32 %620, i32* %best_x, align 4
  %621 = load i32, i32* %cand_y, align 4
  store i32 %621, i32* %best_y, align 4
  %622 = load i32, i32* %mcost, align 4
  store i32 %622, i32* %min_mcost.addr, align 4
  br label %if.end659

if.end659:                                        ; preds = %if.then658, %if.then635
  br label %if.end660

if.end660:                                        ; preds = %if.end659, %if.then625
  br label %if.end661

if.end661:                                        ; preds = %if.end660, %land.lhs.true620, %for.body609
  br label %for.inc662

for.inc662:                                       ; preds = %if.end661
  %623 = load i32, i32* %m, align 4
  %inc663 = add nsw i32 %623, 1
  store i32 %inc663, i32* %m, align 4
  br label %for.cond606

for.end664:                                       ; preds = %for.cond606
  %624 = load i16, i16* %ref.addr, align 2
  %conv665 = sext i16 %624 to i32
  %cmp666 = icmp sgt i32 %conv665, 0
  br i1 %cmp666, label %if.then668, label %if.else686

if.then668:                                       ; preds = %for.end664
  %625 = load i32, i32* %min_mcost.addr, align 4
  %626 = load i32, i32* @pred_SAD_ref, align 4
  %sub669 = sub nsw i32 %625, %626
  %conv670 = sitofp i32 %sub669 to float
  %627 = load i32, i32* @pred_SAD_ref, align 4
  %conv671 = sitofp i32 %627 to float
  %628 = load float, float* %betaThird, align 4
  %mul672 = fmul float %conv671, %628
  %cmp673 = fcmp olt float %conv670, %mul672
  br i1 %cmp673, label %if.then675, label %if.else676

if.then675:                                       ; preds = %if.then668
  br label %third_step

if.else676:                                       ; preds = %if.then668
  %629 = load i32, i32* %min_mcost.addr, align 4
  %630 = load i32, i32* @pred_SAD_ref, align 4
  %sub677 = sub nsw i32 %629, %630
  %conv678 = sitofp i32 %sub677 to float
  %631 = load i32, i32* @pred_SAD_ref, align 4
  %conv679 = sitofp i32 %631 to float
  %632 = load float, float* %betaSec, align 4
  %mul680 = fmul float %conv679, %632
  %cmp681 = fcmp olt float %conv678, %mul680
  br i1 %cmp681, label %if.then683, label %if.end684

if.then683:                                       ; preds = %if.else676
  br label %sec_step

if.end684:                                        ; preds = %if.else676
  br label %if.end685

if.end685:                                        ; preds = %if.end684
  br label %if.end726

if.else686:                                       ; preds = %for.end664
  %633 = load i32, i32* %blocktype.addr, align 4
  %cmp687 = icmp sgt i32 %633, 1
  br i1 %cmp687, label %if.then689, label %if.else707

if.then689:                                       ; preds = %if.else686
  %634 = load i32, i32* %min_mcost.addr, align 4
  %635 = load i32, i32* @pred_SAD_uplayer, align 4
  %sub690 = sub nsw i32 %634, %635
  %conv691 = sitofp i32 %sub690 to float
  %636 = load i32, i32* @pred_SAD_uplayer, align 4
  %conv692 = sitofp i32 %636 to float
  %637 = load float, float* %betaThird, align 4
  %mul693 = fmul float %conv692, %637
  %cmp694 = fcmp olt float %conv691, %mul693
  br i1 %cmp694, label %if.then696, label %if.else697

if.then696:                                       ; preds = %if.then689
  br label %third_step

if.else697:                                       ; preds = %if.then689
  %638 = load i32, i32* %min_mcost.addr, align 4
  %639 = load i32, i32* @pred_SAD_uplayer, align 4
  %sub698 = sub nsw i32 %638, %639
  %conv699 = sitofp i32 %sub698 to float
  %640 = load i32, i32* @pred_SAD_uplayer, align 4
  %conv700 = sitofp i32 %640 to float
  %641 = load float, float* %betaSec, align 4
  %mul701 = fmul float %conv700, %641
  %cmp702 = fcmp olt float %conv699, %mul701
  br i1 %cmp702, label %if.then704, label %if.end705

if.then704:                                       ; preds = %if.else697
  br label %sec_step

if.end705:                                        ; preds = %if.else697
  br label %if.end706

if.end706:                                        ; preds = %if.end705
  br label %if.end725

if.else707:                                       ; preds = %if.else686
  %642 = load i32, i32* %min_mcost.addr, align 4
  %643 = load i32, i32* @pred_SAD_space, align 4
  %sub708 = sub nsw i32 %642, %643
  %conv709 = sitofp i32 %sub708 to float
  %644 = load i32, i32* @pred_SAD_space, align 4
  %conv710 = sitofp i32 %644 to float
  %645 = load float, float* %betaThird, align 4
  %mul711 = fmul float %conv710, %645
  %cmp712 = fcmp olt float %conv709, %mul711
  br i1 %cmp712, label %if.then714, label %if.else715

if.then714:                                       ; preds = %if.else707
  br label %third_step

if.else715:                                       ; preds = %if.else707
  %646 = load i32, i32* %min_mcost.addr, align 4
  %647 = load i32, i32* @pred_SAD_space, align 4
  %sub716 = sub nsw i32 %646, %647
  %conv717 = sitofp i32 %sub716 to float
  %648 = load i32, i32* @pred_SAD_space, align 4
  %conv718 = sitofp i32 %648 to float
  %649 = load float, float* %betaSec, align 4
  %mul719 = fmul float %conv718, %649
  %cmp720 = fcmp olt float %conv717, %mul719
  br i1 %cmp720, label %if.then722, label %if.end723

if.then722:                                       ; preds = %if.else715
  br label %sec_step

if.end723:                                        ; preds = %if.else715
  br label %if.end724

if.end724:                                        ; preds = %if.end723
  br label %if.end725

if.end725:                                        ; preds = %if.end724, %if.end706
  br label %if.end726

if.end726:                                        ; preds = %if.end725, %if.end685
  %650 = load i32, i32* %blocktype.addr, align 4
  %cmp727 = icmp sgt i32 %650, 6
  br i1 %cmp727, label %if.then729, label %if.else730

if.then729:                                       ; preds = %if.end726
  br label %sec_step

if.else730:                                       ; preds = %if.end726
  br label %first_step

first_step:                                       ; preds = %if.else730
  %651 = load i32, i32* %best_x, align 4
  store i32 %651, i32* %iXMinNow, align 4
  %652 = load i32, i32* %best_y, align 4
  store i32 %652, i32* %iYMinNow, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond731

for.cond731:                                      ; preds = %for.inc832, %first_step
  %653 = load i32, i32* %i, align 4
  %654 = load i32, i32* %search_range.addr, align 4
  %div732 = sdiv i32 %654, 2
  %cmp733 = icmp sle i32 %653, %div732
  br i1 %cmp733, label %for.body735, label %for.end834

for.body735:                                      ; preds = %for.cond731
  %655 = load i32, i32* %i, align 4
  %mul736 = mul nsw i32 2, %655
  %sub737 = sub nsw i32 %mul736, 1
  store i32 %sub737, i32* %search_step, align 4
  %656 = load i32, i32* %iXMinNow, align 4
  %657 = load i32, i32* %search_step, align 4
  %add738 = add nsw i32 %656, %657
  store i32 %add738, i32* %cand_x, align 4
  %658 = load i32, i32* %iYMinNow, align 4
  store i32 %658, i32* %cand_y, align 4
  %659 = load i32, i32* %cand_x, align 4
  %660 = load i32, i32* %center_x, align 4
  %sub739 = sub nsw i32 %659, %660
  %call740 = call i32 @abs(i32 %sub739) #6
  %661 = load i32, i32* %search_range.addr, align 4
  %cmp741 = icmp sle i32 %call740, %661
  br i1 %cmp741, label %land.lhs.true743, label %if.end784

land.lhs.true743:                                 ; preds = %for.body735
  %662 = load i32, i32* %cand_y, align 4
  %663 = load i32, i32* %center_y, align 4
  %sub744 = sub nsw i32 %662, %663
  %call745 = call i32 @abs(i32 %sub744) #6
  %664 = load i32, i32* %search_range.addr, align 4
  %cmp746 = icmp sle i32 %call745, %664
  br i1 %cmp746, label %if.then748, label %if.end784

if.then748:                                       ; preds = %land.lhs.true743
  %665 = load i32**, i32*** @McostState, align 8
  %666 = load i32, i32* %cand_y, align 4
  %667 = load i32, i32* %center_y, align 4
  %sub749 = sub nsw i32 %666, %667
  %668 = load i32, i32* %search_range.addr, align 4
  %add750 = add nsw i32 %sub749, %668
  %idxprom751 = sext i32 %add750 to i64
  %arrayidx752 = getelementptr inbounds i32*, i32** %665, i64 %idxprom751
  %669 = load i32*, i32** %arrayidx752, align 8
  %670 = load i32, i32* %cand_x, align 4
  %671 = load i32, i32* %center_x, align 4
  %sub753 = sub nsw i32 %670, %671
  %672 = load i32, i32* %search_range.addr, align 4
  %add754 = add nsw i32 %sub753, %672
  %idxprom755 = sext i32 %add754 to i64
  %arrayidx756 = getelementptr inbounds i32, i32* %669, i64 %idxprom755
  %673 = load i32, i32* %arrayidx756, align 4
  %tobool757 = icmp ne i32 %673, 0
  br i1 %tobool757, label %if.end783, label %if.then758

if.then758:                                       ; preds = %if.then748
  %674 = load i32, i32* %lambda_factor, align 4
  %675 = load i32*, i32** @mvbits, align 8
  %676 = load i32, i32* %cand_x, align 4
  %677 = load i32, i32* %mvshift, align 4
  %shl759 = shl i32 %676, %677
  %678 = load i32, i32* %pred_x, align 4
  %sub760 = sub nsw i32 %shl759, %678
  %idxprom761 = sext i32 %sub760 to i64
  %arrayidx762 = getelementptr inbounds i32, i32* %675, i64 %idxprom761
  %679 = load i32, i32* %arrayidx762, align 4
  %680 = load i32*, i32** @mvbits, align 8
  %681 = load i32, i32* %cand_y, align 4
  %682 = load i32, i32* %mvshift, align 4
  %shl763 = shl i32 %681, %682
  %683 = load i32, i32* %pred_y, align 4
  %sub764 = sub nsw i32 %shl763, %683
  %idxprom765 = sext i32 %sub764 to i64
  %arrayidx766 = getelementptr inbounds i32, i32* %680, i64 %idxprom765
  %684 = load i32, i32* %arrayidx766, align 4
  %add767 = add nsw i32 %679, %684
  %mul768 = mul nsw i32 %674, %add767
  %shr769 = ashr i32 %mul768, 16
  store i32 %shr769, i32* %mcost, align 4
  %685 = load i16*, i16** %ref_pic, align 8
  %686 = load i16**, i16*** %orig_pic.addr, align 8
  %687 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %688 = load i32, i32* %blocksize_y, align 4
  %689 = load i32, i32* %blocksize_x, align 4
  %690 = load i32, i32* %blocksize_x4, align 4
  %691 = load i32, i32* %mcost, align 4
  %692 = load i32, i32* %min_mcost.addr, align 4
  %693 = load i32, i32* %cand_x, align 4
  %694 = load i32, i32* %cand_y, align 4
  %call770 = call i32 @PartCalMad(i16* %685, i16** %686, i16* (i32, i16*, i32, i32, i32, i32)* %687, i32 %688, i32 %689, i32 %690, i32 %691, i32 %692, i32 %693, i32 %694)
  store i32 %call770, i32* %mcost, align 4
  %695 = load i32, i32* %mcost, align 4
  %696 = load i32**, i32*** @McostState, align 8
  %697 = load i32, i32* %cand_y, align 4
  %698 = load i32, i32* %center_y, align 4
  %sub771 = sub nsw i32 %697, %698
  %699 = load i32, i32* %search_range.addr, align 4
  %add772 = add nsw i32 %sub771, %699
  %idxprom773 = sext i32 %add772 to i64
  %arrayidx774 = getelementptr inbounds i32*, i32** %696, i64 %idxprom773
  %700 = load i32*, i32** %arrayidx774, align 8
  %701 = load i32, i32* %cand_x, align 4
  %702 = load i32, i32* %center_x, align 4
  %sub775 = sub nsw i32 %701, %702
  %703 = load i32, i32* %search_range.addr, align 4
  %add776 = add nsw i32 %sub775, %703
  %idxprom777 = sext i32 %add776 to i64
  %arrayidx778 = getelementptr inbounds i32, i32* %700, i64 %idxprom777
  store i32 %695, i32* %arrayidx778, align 4
  %704 = load i32, i32* %mcost, align 4
  %705 = load i32, i32* %min_mcost.addr, align 4
  %cmp779 = icmp slt i32 %704, %705
  br i1 %cmp779, label %if.then781, label %if.end782

if.then781:                                       ; preds = %if.then758
  %706 = load i32, i32* %cand_x, align 4
  store i32 %706, i32* %best_x, align 4
  %707 = load i32, i32* %cand_y, align 4
  store i32 %707, i32* %best_y, align 4
  %708 = load i32, i32* %mcost, align 4
  store i32 %708, i32* %min_mcost.addr, align 4
  br label %if.end782

if.end782:                                        ; preds = %if.then781, %if.then758
  br label %if.end783

if.end783:                                        ; preds = %if.end782, %if.then748
  br label %if.end784

if.end784:                                        ; preds = %if.end783, %land.lhs.true743, %for.body735
  %709 = load i32, i32* %iXMinNow, align 4
  %710 = load i32, i32* %search_step, align 4
  %sub785 = sub nsw i32 %709, %710
  store i32 %sub785, i32* %cand_x, align 4
  %711 = load i32, i32* %iYMinNow, align 4
  store i32 %711, i32* %cand_y, align 4
  %712 = load i32, i32* %cand_x, align 4
  %713 = load i32, i32* %center_x, align 4
  %sub786 = sub nsw i32 %712, %713
  %call787 = call i32 @abs(i32 %sub786) #6
  %714 = load i32, i32* %search_range.addr, align 4
  %cmp788 = icmp sle i32 %call787, %714
  br i1 %cmp788, label %land.lhs.true790, label %if.end831

land.lhs.true790:                                 ; preds = %if.end784
  %715 = load i32, i32* %cand_y, align 4
  %716 = load i32, i32* %center_y, align 4
  %sub791 = sub nsw i32 %715, %716
  %call792 = call i32 @abs(i32 %sub791) #6
  %717 = load i32, i32* %search_range.addr, align 4
  %cmp793 = icmp sle i32 %call792, %717
  br i1 %cmp793, label %if.then795, label %if.end831

if.then795:                                       ; preds = %land.lhs.true790
  %718 = load i32**, i32*** @McostState, align 8
  %719 = load i32, i32* %cand_y, align 4
  %720 = load i32, i32* %center_y, align 4
  %sub796 = sub nsw i32 %719, %720
  %721 = load i32, i32* %search_range.addr, align 4
  %add797 = add nsw i32 %sub796, %721
  %idxprom798 = sext i32 %add797 to i64
  %arrayidx799 = getelementptr inbounds i32*, i32** %718, i64 %idxprom798
  %722 = load i32*, i32** %arrayidx799, align 8
  %723 = load i32, i32* %cand_x, align 4
  %724 = load i32, i32* %center_x, align 4
  %sub800 = sub nsw i32 %723, %724
  %725 = load i32, i32* %search_range.addr, align 4
  %add801 = add nsw i32 %sub800, %725
  %idxprom802 = sext i32 %add801 to i64
  %arrayidx803 = getelementptr inbounds i32, i32* %722, i64 %idxprom802
  %726 = load i32, i32* %arrayidx803, align 4
  %tobool804 = icmp ne i32 %726, 0
  br i1 %tobool804, label %if.end830, label %if.then805

if.then805:                                       ; preds = %if.then795
  %727 = load i32, i32* %lambda_factor, align 4
  %728 = load i32*, i32** @mvbits, align 8
  %729 = load i32, i32* %cand_x, align 4
  %730 = load i32, i32* %mvshift, align 4
  %shl806 = shl i32 %729, %730
  %731 = load i32, i32* %pred_x, align 4
  %sub807 = sub nsw i32 %shl806, %731
  %idxprom808 = sext i32 %sub807 to i64
  %arrayidx809 = getelementptr inbounds i32, i32* %728, i64 %idxprom808
  %732 = load i32, i32* %arrayidx809, align 4
  %733 = load i32*, i32** @mvbits, align 8
  %734 = load i32, i32* %cand_y, align 4
  %735 = load i32, i32* %mvshift, align 4
  %shl810 = shl i32 %734, %735
  %736 = load i32, i32* %pred_y, align 4
  %sub811 = sub nsw i32 %shl810, %736
  %idxprom812 = sext i32 %sub811 to i64
  %arrayidx813 = getelementptr inbounds i32, i32* %733, i64 %idxprom812
  %737 = load i32, i32* %arrayidx813, align 4
  %add814 = add nsw i32 %732, %737
  %mul815 = mul nsw i32 %727, %add814
  %shr816 = ashr i32 %mul815, 16
  store i32 %shr816, i32* %mcost, align 4
  %738 = load i16*, i16** %ref_pic, align 8
  %739 = load i16**, i16*** %orig_pic.addr, align 8
  %740 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %741 = load i32, i32* %blocksize_y, align 4
  %742 = load i32, i32* %blocksize_x, align 4
  %743 = load i32, i32* %blocksize_x4, align 4
  %744 = load i32, i32* %mcost, align 4
  %745 = load i32, i32* %min_mcost.addr, align 4
  %746 = load i32, i32* %cand_x, align 4
  %747 = load i32, i32* %cand_y, align 4
  %call817 = call i32 @PartCalMad(i16* %738, i16** %739, i16* (i32, i16*, i32, i32, i32, i32)* %740, i32 %741, i32 %742, i32 %743, i32 %744, i32 %745, i32 %746, i32 %747)
  store i32 %call817, i32* %mcost, align 4
  %748 = load i32, i32* %mcost, align 4
  %749 = load i32**, i32*** @McostState, align 8
  %750 = load i32, i32* %cand_y, align 4
  %751 = load i32, i32* %center_y, align 4
  %sub818 = sub nsw i32 %750, %751
  %752 = load i32, i32* %search_range.addr, align 4
  %add819 = add nsw i32 %sub818, %752
  %idxprom820 = sext i32 %add819 to i64
  %arrayidx821 = getelementptr inbounds i32*, i32** %749, i64 %idxprom820
  %753 = load i32*, i32** %arrayidx821, align 8
  %754 = load i32, i32* %cand_x, align 4
  %755 = load i32, i32* %center_x, align 4
  %sub822 = sub nsw i32 %754, %755
  %756 = load i32, i32* %search_range.addr, align 4
  %add823 = add nsw i32 %sub822, %756
  %idxprom824 = sext i32 %add823 to i64
  %arrayidx825 = getelementptr inbounds i32, i32* %753, i64 %idxprom824
  store i32 %748, i32* %arrayidx825, align 4
  %757 = load i32, i32* %mcost, align 4
  %758 = load i32, i32* %min_mcost.addr, align 4
  %cmp826 = icmp slt i32 %757, %758
  br i1 %cmp826, label %if.then828, label %if.end829

if.then828:                                       ; preds = %if.then805
  %759 = load i32, i32* %cand_x, align 4
  store i32 %759, i32* %best_x, align 4
  %760 = load i32, i32* %cand_y, align 4
  store i32 %760, i32* %best_y, align 4
  %761 = load i32, i32* %mcost, align 4
  store i32 %761, i32* %min_mcost.addr, align 4
  br label %if.end829

if.end829:                                        ; preds = %if.then828, %if.then805
  br label %if.end830

if.end830:                                        ; preds = %if.end829, %if.then795
  br label %if.end831

if.end831:                                        ; preds = %if.end830, %land.lhs.true790, %if.end784
  br label %for.inc832

for.inc832:                                       ; preds = %if.end831
  %762 = load i32, i32* %i, align 4
  %inc833 = add nsw i32 %762, 1
  store i32 %inc833, i32* %i, align 4
  br label %for.cond731

for.end834:                                       ; preds = %for.cond731
  store i32 1, i32* %i, align 4
  br label %for.cond835

for.cond835:                                      ; preds = %for.inc936, %for.end834
  %763 = load i32, i32* %i, align 4
  %764 = load i32, i32* %search_range.addr, align 4
  %div836 = sdiv i32 %764, 4
  %cmp837 = icmp sle i32 %763, %div836
  br i1 %cmp837, label %for.body839, label %for.end938

for.body839:                                      ; preds = %for.cond835
  %765 = load i32, i32* %i, align 4
  %mul840 = mul nsw i32 2, %765
  %sub841 = sub nsw i32 %mul840, 1
  store i32 %sub841, i32* %search_step, align 4
  %766 = load i32, i32* %iXMinNow, align 4
  store i32 %766, i32* %cand_x, align 4
  %767 = load i32, i32* %iYMinNow, align 4
  %768 = load i32, i32* %search_step, align 4
  %add842 = add nsw i32 %767, %768
  store i32 %add842, i32* %cand_y, align 4
  %769 = load i32, i32* %cand_x, align 4
  %770 = load i32, i32* %center_x, align 4
  %sub843 = sub nsw i32 %769, %770
  %call844 = call i32 @abs(i32 %sub843) #6
  %771 = load i32, i32* %search_range.addr, align 4
  %cmp845 = icmp sle i32 %call844, %771
  br i1 %cmp845, label %land.lhs.true847, label %if.end888

land.lhs.true847:                                 ; preds = %for.body839
  %772 = load i32, i32* %cand_y, align 4
  %773 = load i32, i32* %center_y, align 4
  %sub848 = sub nsw i32 %772, %773
  %call849 = call i32 @abs(i32 %sub848) #6
  %774 = load i32, i32* %search_range.addr, align 4
  %cmp850 = icmp sle i32 %call849, %774
  br i1 %cmp850, label %if.then852, label %if.end888

if.then852:                                       ; preds = %land.lhs.true847
  %775 = load i32**, i32*** @McostState, align 8
  %776 = load i32, i32* %cand_y, align 4
  %777 = load i32, i32* %center_y, align 4
  %sub853 = sub nsw i32 %776, %777
  %778 = load i32, i32* %search_range.addr, align 4
  %add854 = add nsw i32 %sub853, %778
  %idxprom855 = sext i32 %add854 to i64
  %arrayidx856 = getelementptr inbounds i32*, i32** %775, i64 %idxprom855
  %779 = load i32*, i32** %arrayidx856, align 8
  %780 = load i32, i32* %cand_x, align 4
  %781 = load i32, i32* %center_x, align 4
  %sub857 = sub nsw i32 %780, %781
  %782 = load i32, i32* %search_range.addr, align 4
  %add858 = add nsw i32 %sub857, %782
  %idxprom859 = sext i32 %add858 to i64
  %arrayidx860 = getelementptr inbounds i32, i32* %779, i64 %idxprom859
  %783 = load i32, i32* %arrayidx860, align 4
  %tobool861 = icmp ne i32 %783, 0
  br i1 %tobool861, label %if.end887, label %if.then862

if.then862:                                       ; preds = %if.then852
  %784 = load i32, i32* %lambda_factor, align 4
  %785 = load i32*, i32** @mvbits, align 8
  %786 = load i32, i32* %cand_x, align 4
  %787 = load i32, i32* %mvshift, align 4
  %shl863 = shl i32 %786, %787
  %788 = load i32, i32* %pred_x, align 4
  %sub864 = sub nsw i32 %shl863, %788
  %idxprom865 = sext i32 %sub864 to i64
  %arrayidx866 = getelementptr inbounds i32, i32* %785, i64 %idxprom865
  %789 = load i32, i32* %arrayidx866, align 4
  %790 = load i32*, i32** @mvbits, align 8
  %791 = load i32, i32* %cand_y, align 4
  %792 = load i32, i32* %mvshift, align 4
  %shl867 = shl i32 %791, %792
  %793 = load i32, i32* %pred_y, align 4
  %sub868 = sub nsw i32 %shl867, %793
  %idxprom869 = sext i32 %sub868 to i64
  %arrayidx870 = getelementptr inbounds i32, i32* %790, i64 %idxprom869
  %794 = load i32, i32* %arrayidx870, align 4
  %add871 = add nsw i32 %789, %794
  %mul872 = mul nsw i32 %784, %add871
  %shr873 = ashr i32 %mul872, 16
  store i32 %shr873, i32* %mcost, align 4
  %795 = load i16*, i16** %ref_pic, align 8
  %796 = load i16**, i16*** %orig_pic.addr, align 8
  %797 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %798 = load i32, i32* %blocksize_y, align 4
  %799 = load i32, i32* %blocksize_x, align 4
  %800 = load i32, i32* %blocksize_x4, align 4
  %801 = load i32, i32* %mcost, align 4
  %802 = load i32, i32* %min_mcost.addr, align 4
  %803 = load i32, i32* %cand_x, align 4
  %804 = load i32, i32* %cand_y, align 4
  %call874 = call i32 @PartCalMad(i16* %795, i16** %796, i16* (i32, i16*, i32, i32, i32, i32)* %797, i32 %798, i32 %799, i32 %800, i32 %801, i32 %802, i32 %803, i32 %804)
  store i32 %call874, i32* %mcost, align 4
  %805 = load i32, i32* %mcost, align 4
  %806 = load i32**, i32*** @McostState, align 8
  %807 = load i32, i32* %cand_y, align 4
  %808 = load i32, i32* %center_y, align 4
  %sub875 = sub nsw i32 %807, %808
  %809 = load i32, i32* %search_range.addr, align 4
  %add876 = add nsw i32 %sub875, %809
  %idxprom877 = sext i32 %add876 to i64
  %arrayidx878 = getelementptr inbounds i32*, i32** %806, i64 %idxprom877
  %810 = load i32*, i32** %arrayidx878, align 8
  %811 = load i32, i32* %cand_x, align 4
  %812 = load i32, i32* %center_x, align 4
  %sub879 = sub nsw i32 %811, %812
  %813 = load i32, i32* %search_range.addr, align 4
  %add880 = add nsw i32 %sub879, %813
  %idxprom881 = sext i32 %add880 to i64
  %arrayidx882 = getelementptr inbounds i32, i32* %810, i64 %idxprom881
  store i32 %805, i32* %arrayidx882, align 4
  %814 = load i32, i32* %mcost, align 4
  %815 = load i32, i32* %min_mcost.addr, align 4
  %cmp883 = icmp slt i32 %814, %815
  br i1 %cmp883, label %if.then885, label %if.end886

if.then885:                                       ; preds = %if.then862
  %816 = load i32, i32* %cand_x, align 4
  store i32 %816, i32* %best_x, align 4
  %817 = load i32, i32* %cand_y, align 4
  store i32 %817, i32* %best_y, align 4
  %818 = load i32, i32* %mcost, align 4
  store i32 %818, i32* %min_mcost.addr, align 4
  br label %if.end886

if.end886:                                        ; preds = %if.then885, %if.then862
  br label %if.end887

if.end887:                                        ; preds = %if.end886, %if.then852
  br label %if.end888

if.end888:                                        ; preds = %if.end887, %land.lhs.true847, %for.body839
  %819 = load i32, i32* %iXMinNow, align 4
  store i32 %819, i32* %cand_x, align 4
  %820 = load i32, i32* %iYMinNow, align 4
  %821 = load i32, i32* %search_step, align 4
  %sub889 = sub nsw i32 %820, %821
  store i32 %sub889, i32* %cand_y, align 4
  %822 = load i32, i32* %cand_x, align 4
  %823 = load i32, i32* %center_x, align 4
  %sub890 = sub nsw i32 %822, %823
  %call891 = call i32 @abs(i32 %sub890) #6
  %824 = load i32, i32* %search_range.addr, align 4
  %cmp892 = icmp sle i32 %call891, %824
  br i1 %cmp892, label %land.lhs.true894, label %if.end935

land.lhs.true894:                                 ; preds = %if.end888
  %825 = load i32, i32* %cand_y, align 4
  %826 = load i32, i32* %center_y, align 4
  %sub895 = sub nsw i32 %825, %826
  %call896 = call i32 @abs(i32 %sub895) #6
  %827 = load i32, i32* %search_range.addr, align 4
  %cmp897 = icmp sle i32 %call896, %827
  br i1 %cmp897, label %if.then899, label %if.end935

if.then899:                                       ; preds = %land.lhs.true894
  %828 = load i32**, i32*** @McostState, align 8
  %829 = load i32, i32* %cand_y, align 4
  %830 = load i32, i32* %center_y, align 4
  %sub900 = sub nsw i32 %829, %830
  %831 = load i32, i32* %search_range.addr, align 4
  %add901 = add nsw i32 %sub900, %831
  %idxprom902 = sext i32 %add901 to i64
  %arrayidx903 = getelementptr inbounds i32*, i32** %828, i64 %idxprom902
  %832 = load i32*, i32** %arrayidx903, align 8
  %833 = load i32, i32* %cand_x, align 4
  %834 = load i32, i32* %center_x, align 4
  %sub904 = sub nsw i32 %833, %834
  %835 = load i32, i32* %search_range.addr, align 4
  %add905 = add nsw i32 %sub904, %835
  %idxprom906 = sext i32 %add905 to i64
  %arrayidx907 = getelementptr inbounds i32, i32* %832, i64 %idxprom906
  %836 = load i32, i32* %arrayidx907, align 4
  %tobool908 = icmp ne i32 %836, 0
  br i1 %tobool908, label %if.end934, label %if.then909

if.then909:                                       ; preds = %if.then899
  %837 = load i32, i32* %lambda_factor, align 4
  %838 = load i32*, i32** @mvbits, align 8
  %839 = load i32, i32* %cand_x, align 4
  %840 = load i32, i32* %mvshift, align 4
  %shl910 = shl i32 %839, %840
  %841 = load i32, i32* %pred_x, align 4
  %sub911 = sub nsw i32 %shl910, %841
  %idxprom912 = sext i32 %sub911 to i64
  %arrayidx913 = getelementptr inbounds i32, i32* %838, i64 %idxprom912
  %842 = load i32, i32* %arrayidx913, align 4
  %843 = load i32*, i32** @mvbits, align 8
  %844 = load i32, i32* %cand_y, align 4
  %845 = load i32, i32* %mvshift, align 4
  %shl914 = shl i32 %844, %845
  %846 = load i32, i32* %pred_y, align 4
  %sub915 = sub nsw i32 %shl914, %846
  %idxprom916 = sext i32 %sub915 to i64
  %arrayidx917 = getelementptr inbounds i32, i32* %843, i64 %idxprom916
  %847 = load i32, i32* %arrayidx917, align 4
  %add918 = add nsw i32 %842, %847
  %mul919 = mul nsw i32 %837, %add918
  %shr920 = ashr i32 %mul919, 16
  store i32 %shr920, i32* %mcost, align 4
  %848 = load i16*, i16** %ref_pic, align 8
  %849 = load i16**, i16*** %orig_pic.addr, align 8
  %850 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %851 = load i32, i32* %blocksize_y, align 4
  %852 = load i32, i32* %blocksize_x, align 4
  %853 = load i32, i32* %blocksize_x4, align 4
  %854 = load i32, i32* %mcost, align 4
  %855 = load i32, i32* %min_mcost.addr, align 4
  %856 = load i32, i32* %cand_x, align 4
  %857 = load i32, i32* %cand_y, align 4
  %call921 = call i32 @PartCalMad(i16* %848, i16** %849, i16* (i32, i16*, i32, i32, i32, i32)* %850, i32 %851, i32 %852, i32 %853, i32 %854, i32 %855, i32 %856, i32 %857)
  store i32 %call921, i32* %mcost, align 4
  %858 = load i32, i32* %mcost, align 4
  %859 = load i32**, i32*** @McostState, align 8
  %860 = load i32, i32* %cand_y, align 4
  %861 = load i32, i32* %center_y, align 4
  %sub922 = sub nsw i32 %860, %861
  %862 = load i32, i32* %search_range.addr, align 4
  %add923 = add nsw i32 %sub922, %862
  %idxprom924 = sext i32 %add923 to i64
  %arrayidx925 = getelementptr inbounds i32*, i32** %859, i64 %idxprom924
  %863 = load i32*, i32** %arrayidx925, align 8
  %864 = load i32, i32* %cand_x, align 4
  %865 = load i32, i32* %center_x, align 4
  %sub926 = sub nsw i32 %864, %865
  %866 = load i32, i32* %search_range.addr, align 4
  %add927 = add nsw i32 %sub926, %866
  %idxprom928 = sext i32 %add927 to i64
  %arrayidx929 = getelementptr inbounds i32, i32* %863, i64 %idxprom928
  store i32 %858, i32* %arrayidx929, align 4
  %867 = load i32, i32* %mcost, align 4
  %868 = load i32, i32* %min_mcost.addr, align 4
  %cmp930 = icmp slt i32 %867, %868
  br i1 %cmp930, label %if.then932, label %if.end933

if.then932:                                       ; preds = %if.then909
  %869 = load i32, i32* %cand_x, align 4
  store i32 %869, i32* %best_x, align 4
  %870 = load i32, i32* %cand_y, align 4
  store i32 %870, i32* %best_y, align 4
  %871 = load i32, i32* %mcost, align 4
  store i32 %871, i32* %min_mcost.addr, align 4
  br label %if.end933

if.end933:                                        ; preds = %if.then932, %if.then909
  br label %if.end934

if.end934:                                        ; preds = %if.end933, %if.then899
  br label %if.end935

if.end935:                                        ; preds = %if.end934, %land.lhs.true894, %if.end888
  br label %for.inc936

for.inc936:                                       ; preds = %if.end935
  %872 = load i32, i32* %i, align 4
  %inc937 = add nsw i32 %872, 1
  store i32 %inc937, i32* %i, align 4
  br label %for.cond835

for.end938:                                       ; preds = %for.cond835
  %873 = load i16, i16* %ref.addr, align 2
  %conv939 = sext i16 %873 to i32
  %cmp940 = icmp sgt i32 %conv939, 0
  br i1 %cmp940, label %if.then942, label %if.else960

if.then942:                                       ; preds = %for.end938
  %874 = load i32, i32* %min_mcost.addr, align 4
  %875 = load i32, i32* @pred_SAD_ref, align 4
  %sub943 = sub nsw i32 %874, %875
  %conv944 = sitofp i32 %sub943 to float
  %876 = load i32, i32* @pred_SAD_ref, align 4
  %conv945 = sitofp i32 %876 to float
  %877 = load float, float* %betaThird, align 4
  %mul946 = fmul float %conv945, %877
  %cmp947 = fcmp olt float %conv944, %mul946
  br i1 %cmp947, label %if.then949, label %if.else950

if.then949:                                       ; preds = %if.then942
  br label %third_step

if.else950:                                       ; preds = %if.then942
  %878 = load i32, i32* %min_mcost.addr, align 4
  %879 = load i32, i32* @pred_SAD_ref, align 4
  %sub951 = sub nsw i32 %878, %879
  %conv952 = sitofp i32 %sub951 to float
  %880 = load i32, i32* @pred_SAD_ref, align 4
  %conv953 = sitofp i32 %880 to float
  %881 = load float, float* %betaSec, align 4
  %mul954 = fmul float %conv953, %881
  %cmp955 = fcmp olt float %conv952, %mul954
  br i1 %cmp955, label %if.then957, label %if.end958

if.then957:                                       ; preds = %if.else950
  br label %sec_step

if.end958:                                        ; preds = %if.else950
  br label %if.end959

if.end959:                                        ; preds = %if.end958
  br label %if.end1000

if.else960:                                       ; preds = %for.end938
  %882 = load i32, i32* %blocktype.addr, align 4
  %cmp961 = icmp sgt i32 %882, 1
  br i1 %cmp961, label %if.then963, label %if.else981

if.then963:                                       ; preds = %if.else960
  %883 = load i32, i32* %min_mcost.addr, align 4
  %884 = load i32, i32* @pred_SAD_uplayer, align 4
  %sub964 = sub nsw i32 %883, %884
  %conv965 = sitofp i32 %sub964 to float
  %885 = load i32, i32* @pred_SAD_uplayer, align 4
  %conv966 = sitofp i32 %885 to float
  %886 = load float, float* %betaThird, align 4
  %mul967 = fmul float %conv966, %886
  %cmp968 = fcmp olt float %conv965, %mul967
  br i1 %cmp968, label %if.then970, label %if.else971

if.then970:                                       ; preds = %if.then963
  br label %third_step

if.else971:                                       ; preds = %if.then963
  %887 = load i32, i32* %min_mcost.addr, align 4
  %888 = load i32, i32* @pred_SAD_uplayer, align 4
  %sub972 = sub nsw i32 %887, %888
  %conv973 = sitofp i32 %sub972 to float
  %889 = load i32, i32* @pred_SAD_uplayer, align 4
  %conv974 = sitofp i32 %889 to float
  %890 = load float, float* %betaSec, align 4
  %mul975 = fmul float %conv974, %890
  %cmp976 = fcmp olt float %conv973, %mul975
  br i1 %cmp976, label %if.then978, label %if.end979

if.then978:                                       ; preds = %if.else971
  br label %sec_step

if.end979:                                        ; preds = %if.else971
  br label %if.end980

if.end980:                                        ; preds = %if.end979
  br label %if.end999

if.else981:                                       ; preds = %if.else960
  %891 = load i32, i32* %min_mcost.addr, align 4
  %892 = load i32, i32* @pred_SAD_space, align 4
  %sub982 = sub nsw i32 %891, %892
  %conv983 = sitofp i32 %sub982 to float
  %893 = load i32, i32* @pred_SAD_space, align 4
  %conv984 = sitofp i32 %893 to float
  %894 = load float, float* %betaThird, align 4
  %mul985 = fmul float %conv984, %894
  %cmp986 = fcmp olt float %conv983, %mul985
  br i1 %cmp986, label %if.then988, label %if.else989

if.then988:                                       ; preds = %if.else981
  br label %third_step

if.else989:                                       ; preds = %if.else981
  %895 = load i32, i32* %min_mcost.addr, align 4
  %896 = load i32, i32* @pred_SAD_space, align 4
  %sub990 = sub nsw i32 %895, %896
  %conv991 = sitofp i32 %sub990 to float
  %897 = load i32, i32* @pred_SAD_space, align 4
  %conv992 = sitofp i32 %897 to float
  %898 = load float, float* %betaSec, align 4
  %mul993 = fmul float %conv992, %898
  %cmp994 = fcmp olt float %conv991, %mul993
  br i1 %cmp994, label %if.then996, label %if.end997

if.then996:                                       ; preds = %if.else989
  br label %sec_step

if.end997:                                        ; preds = %if.else989
  br label %if.end998

if.end998:                                        ; preds = %if.end997
  br label %if.end999

if.end999:                                        ; preds = %if.end998, %if.end980
  br label %if.end1000

if.end1000:                                       ; preds = %if.end999, %if.end959
  %899 = load i32, i32* %best_x, align 4
  store i32 %899, i32* %iXMinNow, align 4
  %900 = load i32, i32* %best_y, align 4
  store i32 %900, i32* %iYMinNow, align 4
  store i32 1, i32* %pos, align 4
  br label %for.cond1001

for.cond1001:                                     ; preds = %for.inc1057, %if.end1000
  %901 = load i32, i32* %pos, align 4
  %cmp1002 = icmp slt i32 %901, 25
  br i1 %cmp1002, label %for.body1004, label %for.end1059

for.body1004:                                     ; preds = %for.cond1001
  %902 = load i32, i32* %iXMinNow, align 4
  %903 = load i32*, i32** @spiral_search_x, align 8
  %904 = load i32, i32* %pos, align 4
  %idxprom1005 = sext i32 %904 to i64
  %arrayidx1006 = getelementptr inbounds i32, i32* %903, i64 %idxprom1005
  %905 = load i32, i32* %arrayidx1006, align 4
  %add1007 = add nsw i32 %902, %905
  store i32 %add1007, i32* %cand_x, align 4
  %906 = load i32, i32* %iYMinNow, align 4
  %907 = load i32*, i32** @spiral_search_y, align 8
  %908 = load i32, i32* %pos, align 4
  %idxprom1008 = sext i32 %908 to i64
  %arrayidx1009 = getelementptr inbounds i32, i32* %907, i64 %idxprom1008
  %909 = load i32, i32* %arrayidx1009, align 4
  %add1010 = add nsw i32 %906, %909
  store i32 %add1010, i32* %cand_y, align 4
  %910 = load i32, i32* %cand_x, align 4
  %911 = load i32, i32* %center_x, align 4
  %sub1011 = sub nsw i32 %910, %911
  %call1012 = call i32 @abs(i32 %sub1011) #6
  %912 = load i32, i32* %search_range.addr, align 4
  %cmp1013 = icmp sle i32 %call1012, %912
  br i1 %cmp1013, label %land.lhs.true1015, label %if.end1056

land.lhs.true1015:                                ; preds = %for.body1004
  %913 = load i32, i32* %cand_y, align 4
  %914 = load i32, i32* %center_y, align 4
  %sub1016 = sub nsw i32 %913, %914
  %call1017 = call i32 @abs(i32 %sub1016) #6
  %915 = load i32, i32* %search_range.addr, align 4
  %cmp1018 = icmp sle i32 %call1017, %915
  br i1 %cmp1018, label %if.then1020, label %if.end1056

if.then1020:                                      ; preds = %land.lhs.true1015
  %916 = load i32**, i32*** @McostState, align 8
  %917 = load i32, i32* %cand_y, align 4
  %918 = load i32, i32* %center_y, align 4
  %sub1021 = sub nsw i32 %917, %918
  %919 = load i32, i32* %search_range.addr, align 4
  %add1022 = add nsw i32 %sub1021, %919
  %idxprom1023 = sext i32 %add1022 to i64
  %arrayidx1024 = getelementptr inbounds i32*, i32** %916, i64 %idxprom1023
  %920 = load i32*, i32** %arrayidx1024, align 8
  %921 = load i32, i32* %cand_x, align 4
  %922 = load i32, i32* %center_x, align 4
  %sub1025 = sub nsw i32 %921, %922
  %923 = load i32, i32* %search_range.addr, align 4
  %add1026 = add nsw i32 %sub1025, %923
  %idxprom1027 = sext i32 %add1026 to i64
  %arrayidx1028 = getelementptr inbounds i32, i32* %920, i64 %idxprom1027
  %924 = load i32, i32* %arrayidx1028, align 4
  %tobool1029 = icmp ne i32 %924, 0
  br i1 %tobool1029, label %if.end1055, label %if.then1030

if.then1030:                                      ; preds = %if.then1020
  %925 = load i32, i32* %lambda_factor, align 4
  %926 = load i32*, i32** @mvbits, align 8
  %927 = load i32, i32* %cand_x, align 4
  %928 = load i32, i32* %mvshift, align 4
  %shl1031 = shl i32 %927, %928
  %929 = load i32, i32* %pred_x, align 4
  %sub1032 = sub nsw i32 %shl1031, %929
  %idxprom1033 = sext i32 %sub1032 to i64
  %arrayidx1034 = getelementptr inbounds i32, i32* %926, i64 %idxprom1033
  %930 = load i32, i32* %arrayidx1034, align 4
  %931 = load i32*, i32** @mvbits, align 8
  %932 = load i32, i32* %cand_y, align 4
  %933 = load i32, i32* %mvshift, align 4
  %shl1035 = shl i32 %932, %933
  %934 = load i32, i32* %pred_y, align 4
  %sub1036 = sub nsw i32 %shl1035, %934
  %idxprom1037 = sext i32 %sub1036 to i64
  %arrayidx1038 = getelementptr inbounds i32, i32* %931, i64 %idxprom1037
  %935 = load i32, i32* %arrayidx1038, align 4
  %add1039 = add nsw i32 %930, %935
  %mul1040 = mul nsw i32 %925, %add1039
  %shr1041 = ashr i32 %mul1040, 16
  store i32 %shr1041, i32* %mcost, align 4
  %936 = load i16*, i16** %ref_pic, align 8
  %937 = load i16**, i16*** %orig_pic.addr, align 8
  %938 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %939 = load i32, i32* %blocksize_y, align 4
  %940 = load i32, i32* %blocksize_x, align 4
  %941 = load i32, i32* %blocksize_x4, align 4
  %942 = load i32, i32* %mcost, align 4
  %943 = load i32, i32* %min_mcost.addr, align 4
  %944 = load i32, i32* %cand_x, align 4
  %945 = load i32, i32* %cand_y, align 4
  %call1042 = call i32 @PartCalMad(i16* %936, i16** %937, i16* (i32, i16*, i32, i32, i32, i32)* %938, i32 %939, i32 %940, i32 %941, i32 %942, i32 %943, i32 %944, i32 %945)
  store i32 %call1042, i32* %mcost, align 4
  %946 = load i32, i32* %mcost, align 4
  %947 = load i32**, i32*** @McostState, align 8
  %948 = load i32, i32* %cand_y, align 4
  %949 = load i32, i32* %center_y, align 4
  %sub1043 = sub nsw i32 %948, %949
  %950 = load i32, i32* %search_range.addr, align 4
  %add1044 = add nsw i32 %sub1043, %950
  %idxprom1045 = sext i32 %add1044 to i64
  %arrayidx1046 = getelementptr inbounds i32*, i32** %947, i64 %idxprom1045
  %951 = load i32*, i32** %arrayidx1046, align 8
  %952 = load i32, i32* %cand_x, align 4
  %953 = load i32, i32* %center_x, align 4
  %sub1047 = sub nsw i32 %952, %953
  %954 = load i32, i32* %search_range.addr, align 4
  %add1048 = add nsw i32 %sub1047, %954
  %idxprom1049 = sext i32 %add1048 to i64
  %arrayidx1050 = getelementptr inbounds i32, i32* %951, i64 %idxprom1049
  store i32 %946, i32* %arrayidx1050, align 4
  %955 = load i32, i32* %mcost, align 4
  %956 = load i32, i32* %min_mcost.addr, align 4
  %cmp1051 = icmp slt i32 %955, %956
  br i1 %cmp1051, label %if.then1053, label %if.end1054

if.then1053:                                      ; preds = %if.then1030
  %957 = load i32, i32* %cand_x, align 4
  store i32 %957, i32* %best_x, align 4
  %958 = load i32, i32* %cand_y, align 4
  store i32 %958, i32* %best_y, align 4
  %959 = load i32, i32* %mcost, align 4
  store i32 %959, i32* %min_mcost.addr, align 4
  br label %if.end1054

if.end1054:                                       ; preds = %if.then1053, %if.then1030
  br label %if.end1055

if.end1055:                                       ; preds = %if.end1054, %if.then1020
  br label %if.end1056

if.end1056:                                       ; preds = %if.end1055, %land.lhs.true1015, %for.body1004
  br label %for.inc1057

for.inc1057:                                      ; preds = %if.end1056
  %960 = load i32, i32* %pos, align 4
  %inc1058 = add nsw i32 %960, 1
  store i32 %inc1058, i32* %pos, align 4
  br label %for.cond1001

for.end1059:                                      ; preds = %for.cond1001
  %961 = load i16, i16* %ref.addr, align 2
  %conv1060 = sext i16 %961 to i32
  %cmp1061 = icmp sgt i32 %conv1060, 0
  br i1 %cmp1061, label %if.then1063, label %if.else1081

if.then1063:                                      ; preds = %for.end1059
  %962 = load i32, i32* %min_mcost.addr, align 4
  %963 = load i32, i32* @pred_SAD_ref, align 4
  %sub1064 = sub nsw i32 %962, %963
  %conv1065 = sitofp i32 %sub1064 to float
  %964 = load i32, i32* @pred_SAD_ref, align 4
  %conv1066 = sitofp i32 %964 to float
  %965 = load float, float* %betaThird, align 4
  %mul1067 = fmul float %conv1066, %965
  %cmp1068 = fcmp olt float %conv1065, %mul1067
  br i1 %cmp1068, label %if.then1070, label %if.else1071

if.then1070:                                      ; preds = %if.then1063
  br label %third_step

if.else1071:                                      ; preds = %if.then1063
  %966 = load i32, i32* %min_mcost.addr, align 4
  %967 = load i32, i32* @pred_SAD_ref, align 4
  %sub1072 = sub nsw i32 %966, %967
  %conv1073 = sitofp i32 %sub1072 to float
  %968 = load i32, i32* @pred_SAD_ref, align 4
  %conv1074 = sitofp i32 %968 to float
  %969 = load float, float* %betaSec, align 4
  %mul1075 = fmul float %conv1074, %969
  %cmp1076 = fcmp olt float %conv1073, %mul1075
  br i1 %cmp1076, label %if.then1078, label %if.end1079

if.then1078:                                      ; preds = %if.else1071
  br label %sec_step

if.end1079:                                       ; preds = %if.else1071
  br label %if.end1080

if.end1080:                                       ; preds = %if.end1079
  br label %if.end1121

if.else1081:                                      ; preds = %for.end1059
  %970 = load i32, i32* %blocktype.addr, align 4
  %cmp1082 = icmp sgt i32 %970, 1
  br i1 %cmp1082, label %if.then1084, label %if.else1102

if.then1084:                                      ; preds = %if.else1081
  %971 = load i32, i32* %min_mcost.addr, align 4
  %972 = load i32, i32* @pred_SAD_uplayer, align 4
  %sub1085 = sub nsw i32 %971, %972
  %conv1086 = sitofp i32 %sub1085 to float
  %973 = load i32, i32* @pred_SAD_uplayer, align 4
  %conv1087 = sitofp i32 %973 to float
  %974 = load float, float* %betaThird, align 4
  %mul1088 = fmul float %conv1087, %974
  %cmp1089 = fcmp olt float %conv1086, %mul1088
  br i1 %cmp1089, label %if.then1091, label %if.else1092

if.then1091:                                      ; preds = %if.then1084
  br label %third_step

if.else1092:                                      ; preds = %if.then1084
  %975 = load i32, i32* %min_mcost.addr, align 4
  %976 = load i32, i32* @pred_SAD_uplayer, align 4
  %sub1093 = sub nsw i32 %975, %976
  %conv1094 = sitofp i32 %sub1093 to float
  %977 = load i32, i32* @pred_SAD_uplayer, align 4
  %conv1095 = sitofp i32 %977 to float
  %978 = load float, float* %betaSec, align 4
  %mul1096 = fmul float %conv1095, %978
  %cmp1097 = fcmp olt float %conv1094, %mul1096
  br i1 %cmp1097, label %if.then1099, label %if.end1100

if.then1099:                                      ; preds = %if.else1092
  br label %sec_step

if.end1100:                                       ; preds = %if.else1092
  br label %if.end1101

if.end1101:                                       ; preds = %if.end1100
  br label %if.end1120

if.else1102:                                      ; preds = %if.else1081
  %979 = load i32, i32* %min_mcost.addr, align 4
  %980 = load i32, i32* @pred_SAD_space, align 4
  %sub1103 = sub nsw i32 %979, %980
  %conv1104 = sitofp i32 %sub1103 to float
  %981 = load i32, i32* @pred_SAD_space, align 4
  %conv1105 = sitofp i32 %981 to float
  %982 = load float, float* %betaThird, align 4
  %mul1106 = fmul float %conv1105, %982
  %cmp1107 = fcmp olt float %conv1104, %mul1106
  br i1 %cmp1107, label %if.then1109, label %if.else1110

if.then1109:                                      ; preds = %if.else1102
  br label %third_step

if.else1110:                                      ; preds = %if.else1102
  %983 = load i32, i32* %min_mcost.addr, align 4
  %984 = load i32, i32* @pred_SAD_space, align 4
  %sub1111 = sub nsw i32 %983, %984
  %conv1112 = sitofp i32 %sub1111 to float
  %985 = load i32, i32* @pred_SAD_space, align 4
  %conv1113 = sitofp i32 %985 to float
  %986 = load float, float* %betaSec, align 4
  %mul1114 = fmul float %conv1113, %986
  %cmp1115 = fcmp olt float %conv1112, %mul1114
  br i1 %cmp1115, label %if.then1117, label %if.end1118

if.then1117:                                      ; preds = %if.else1110
  br label %sec_step

if.end1118:                                       ; preds = %if.else1110
  br label %if.end1119

if.end1119:                                       ; preds = %if.end1118
  br label %if.end1120

if.end1120:                                       ; preds = %if.end1119, %if.end1101
  br label %if.end1121

if.end1121:                                       ; preds = %if.end1120, %if.end1080
  store i32 1, i32* %i, align 4
  br label %for.cond1122

for.cond1122:                                     ; preds = %for.inc1253, %if.end1121
  %987 = load i32, i32* %i, align 4
  %988 = load i32, i32* %search_range.addr, align 4
  %div1123 = sdiv i32 %988, 4
  %cmp1124 = icmp sle i32 %987, %div1123
  br i1 %cmp1124, label %for.body1126, label %for.end1255

for.body1126:                                     ; preds = %for.cond1122
  store i32 0, i32* %iAbort, align 4
  store i32 0, i32* %m, align 4
  br label %for.cond1127

for.cond1127:                                     ; preds = %for.inc1185, %for.body1126
  %989 = load i32, i32* %m, align 4
  %cmp1128 = icmp slt i32 %989, 16
  br i1 %cmp1128, label %for.body1130, label %for.end1187

for.body1130:                                     ; preds = %for.cond1127
  %990 = load i32, i32* %iXMinNow, align 4
  %991 = load i32, i32* %m, align 4
  %idxprom1131 = sext i32 %991 to i64
  %arrayidx1132 = getelementptr inbounds [16 x i32], [16 x i32]* @FastIntegerPelBlockMotionSearch.Big_Hexagon_x, i64 0, i64 %idxprom1131
  %992 = load i32, i32* %arrayidx1132, align 4
  %993 = load i32, i32* %i, align 4
  %mul1133 = mul nsw i32 %992, %993
  %add1134 = add nsw i32 %990, %mul1133
  store i32 %add1134, i32* %cand_x, align 4
  %994 = load i32, i32* %iYMinNow, align 4
  %995 = load i32, i32* %m, align 4
  %idxprom1135 = sext i32 %995 to i64
  %arrayidx1136 = getelementptr inbounds [16 x i32], [16 x i32]* @FastIntegerPelBlockMotionSearch.Big_Hexagon_y, i64 0, i64 %idxprom1135
  %996 = load i32, i32* %arrayidx1136, align 4
  %997 = load i32, i32* %i, align 4
  %mul1137 = mul nsw i32 %996, %997
  %add1138 = add nsw i32 %994, %mul1137
  store i32 %add1138, i32* %cand_y, align 4
  %998 = load i32, i32* %cand_x, align 4
  %999 = load i32, i32* %center_x, align 4
  %sub1139 = sub nsw i32 %998, %999
  %call1140 = call i32 @abs(i32 %sub1139) #6
  %1000 = load i32, i32* %search_range.addr, align 4
  %cmp1141 = icmp sle i32 %call1140, %1000
  br i1 %cmp1141, label %land.lhs.true1143, label %if.end1184

land.lhs.true1143:                                ; preds = %for.body1130
  %1001 = load i32, i32* %cand_y, align 4
  %1002 = load i32, i32* %center_y, align 4
  %sub1144 = sub nsw i32 %1001, %1002
  %call1145 = call i32 @abs(i32 %sub1144) #6
  %1003 = load i32, i32* %search_range.addr, align 4
  %cmp1146 = icmp sle i32 %call1145, %1003
  br i1 %cmp1146, label %if.then1148, label %if.end1184

if.then1148:                                      ; preds = %land.lhs.true1143
  %1004 = load i32**, i32*** @McostState, align 8
  %1005 = load i32, i32* %cand_y, align 4
  %1006 = load i32, i32* %center_y, align 4
  %sub1149 = sub nsw i32 %1005, %1006
  %1007 = load i32, i32* %search_range.addr, align 4
  %add1150 = add nsw i32 %sub1149, %1007
  %idxprom1151 = sext i32 %add1150 to i64
  %arrayidx1152 = getelementptr inbounds i32*, i32** %1004, i64 %idxprom1151
  %1008 = load i32*, i32** %arrayidx1152, align 8
  %1009 = load i32, i32* %cand_x, align 4
  %1010 = load i32, i32* %center_x, align 4
  %sub1153 = sub nsw i32 %1009, %1010
  %1011 = load i32, i32* %search_range.addr, align 4
  %add1154 = add nsw i32 %sub1153, %1011
  %idxprom1155 = sext i32 %add1154 to i64
  %arrayidx1156 = getelementptr inbounds i32, i32* %1008, i64 %idxprom1155
  %1012 = load i32, i32* %arrayidx1156, align 4
  %tobool1157 = icmp ne i32 %1012, 0
  br i1 %tobool1157, label %if.end1183, label %if.then1158

if.then1158:                                      ; preds = %if.then1148
  %1013 = load i32, i32* %lambda_factor, align 4
  %1014 = load i32*, i32** @mvbits, align 8
  %1015 = load i32, i32* %cand_x, align 4
  %1016 = load i32, i32* %mvshift, align 4
  %shl1159 = shl i32 %1015, %1016
  %1017 = load i32, i32* %pred_x, align 4
  %sub1160 = sub nsw i32 %shl1159, %1017
  %idxprom1161 = sext i32 %sub1160 to i64
  %arrayidx1162 = getelementptr inbounds i32, i32* %1014, i64 %idxprom1161
  %1018 = load i32, i32* %arrayidx1162, align 4
  %1019 = load i32*, i32** @mvbits, align 8
  %1020 = load i32, i32* %cand_y, align 4
  %1021 = load i32, i32* %mvshift, align 4
  %shl1163 = shl i32 %1020, %1021
  %1022 = load i32, i32* %pred_y, align 4
  %sub1164 = sub nsw i32 %shl1163, %1022
  %idxprom1165 = sext i32 %sub1164 to i64
  %arrayidx1166 = getelementptr inbounds i32, i32* %1019, i64 %idxprom1165
  %1023 = load i32, i32* %arrayidx1166, align 4
  %add1167 = add nsw i32 %1018, %1023
  %mul1168 = mul nsw i32 %1013, %add1167
  %shr1169 = ashr i32 %mul1168, 16
  store i32 %shr1169, i32* %mcost, align 4
  %1024 = load i16*, i16** %ref_pic, align 8
  %1025 = load i16**, i16*** %orig_pic.addr, align 8
  %1026 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %1027 = load i32, i32* %blocksize_y, align 4
  %1028 = load i32, i32* %blocksize_x, align 4
  %1029 = load i32, i32* %blocksize_x4, align 4
  %1030 = load i32, i32* %mcost, align 4
  %1031 = load i32, i32* %min_mcost.addr, align 4
  %1032 = load i32, i32* %cand_x, align 4
  %1033 = load i32, i32* %cand_y, align 4
  %call1170 = call i32 @PartCalMad(i16* %1024, i16** %1025, i16* (i32, i16*, i32, i32, i32, i32)* %1026, i32 %1027, i32 %1028, i32 %1029, i32 %1030, i32 %1031, i32 %1032, i32 %1033)
  store i32 %call1170, i32* %mcost, align 4
  %1034 = load i32, i32* %mcost, align 4
  %1035 = load i32**, i32*** @McostState, align 8
  %1036 = load i32, i32* %cand_y, align 4
  %1037 = load i32, i32* %center_y, align 4
  %sub1171 = sub nsw i32 %1036, %1037
  %1038 = load i32, i32* %search_range.addr, align 4
  %add1172 = add nsw i32 %sub1171, %1038
  %idxprom1173 = sext i32 %add1172 to i64
  %arrayidx1174 = getelementptr inbounds i32*, i32** %1035, i64 %idxprom1173
  %1039 = load i32*, i32** %arrayidx1174, align 8
  %1040 = load i32, i32* %cand_x, align 4
  %1041 = load i32, i32* %center_x, align 4
  %sub1175 = sub nsw i32 %1040, %1041
  %1042 = load i32, i32* %search_range.addr, align 4
  %add1176 = add nsw i32 %sub1175, %1042
  %idxprom1177 = sext i32 %add1176 to i64
  %arrayidx1178 = getelementptr inbounds i32, i32* %1039, i64 %idxprom1177
  store i32 %1034, i32* %arrayidx1178, align 4
  %1043 = load i32, i32* %mcost, align 4
  %1044 = load i32, i32* %min_mcost.addr, align 4
  %cmp1179 = icmp slt i32 %1043, %1044
  br i1 %cmp1179, label %if.then1181, label %if.end1182

if.then1181:                                      ; preds = %if.then1158
  %1045 = load i32, i32* %cand_x, align 4
  store i32 %1045, i32* %best_x, align 4
  %1046 = load i32, i32* %cand_y, align 4
  store i32 %1046, i32* %best_y, align 4
  %1047 = load i32, i32* %mcost, align 4
  store i32 %1047, i32* %min_mcost.addr, align 4
  store i32 1, i32* %iAbort, align 4
  br label %if.end1182

if.end1182:                                       ; preds = %if.then1181, %if.then1158
  br label %if.end1183

if.end1183:                                       ; preds = %if.end1182, %if.then1148
  br label %if.end1184

if.end1184:                                       ; preds = %if.end1183, %land.lhs.true1143, %for.body1130
  br label %for.inc1185

for.inc1185:                                      ; preds = %if.end1184
  %1048 = load i32, i32* %m, align 4
  %inc1186 = add nsw i32 %1048, 1
  store i32 %inc1186, i32* %m, align 4
  br label %for.cond1127

for.end1187:                                      ; preds = %for.cond1127
  %1049 = load i32, i32* %iAbort, align 4
  %tobool1188 = icmp ne i32 %1049, 0
  br i1 %tobool1188, label %if.then1189, label %if.end1252

if.then1189:                                      ; preds = %for.end1187
  %1050 = load i16, i16* %ref.addr, align 2
  %conv1190 = sext i16 %1050 to i32
  %cmp1191 = icmp sgt i32 %conv1190, 0
  br i1 %cmp1191, label %if.then1193, label %if.else1211

if.then1193:                                      ; preds = %if.then1189
  %1051 = load i32, i32* %min_mcost.addr, align 4
  %1052 = load i32, i32* @pred_SAD_ref, align 4
  %sub1194 = sub nsw i32 %1051, %1052
  %conv1195 = sitofp i32 %sub1194 to float
  %1053 = load i32, i32* @pred_SAD_ref, align 4
  %conv1196 = sitofp i32 %1053 to float
  %1054 = load float, float* %betaThird, align 4
  %mul1197 = fmul float %conv1196, %1054
  %cmp1198 = fcmp olt float %conv1195, %mul1197
  br i1 %cmp1198, label %if.then1200, label %if.else1201

if.then1200:                                      ; preds = %if.then1193
  br label %third_step

if.else1201:                                      ; preds = %if.then1193
  %1055 = load i32, i32* %min_mcost.addr, align 4
  %1056 = load i32, i32* @pred_SAD_ref, align 4
  %sub1202 = sub nsw i32 %1055, %1056
  %conv1203 = sitofp i32 %sub1202 to float
  %1057 = load i32, i32* @pred_SAD_ref, align 4
  %conv1204 = sitofp i32 %1057 to float
  %1058 = load float, float* %betaSec, align 4
  %mul1205 = fmul float %conv1204, %1058
  %cmp1206 = fcmp olt float %conv1203, %mul1205
  br i1 %cmp1206, label %if.then1208, label %if.end1209

if.then1208:                                      ; preds = %if.else1201
  br label %sec_step

if.end1209:                                       ; preds = %if.else1201
  br label %if.end1210

if.end1210:                                       ; preds = %if.end1209
  br label %if.end1251

if.else1211:                                      ; preds = %if.then1189
  %1059 = load i32, i32* %blocktype.addr, align 4
  %cmp1212 = icmp sgt i32 %1059, 1
  br i1 %cmp1212, label %if.then1214, label %if.else1232

if.then1214:                                      ; preds = %if.else1211
  %1060 = load i32, i32* %min_mcost.addr, align 4
  %1061 = load i32, i32* @pred_SAD_uplayer, align 4
  %sub1215 = sub nsw i32 %1060, %1061
  %conv1216 = sitofp i32 %sub1215 to float
  %1062 = load i32, i32* @pred_SAD_uplayer, align 4
  %conv1217 = sitofp i32 %1062 to float
  %1063 = load float, float* %betaThird, align 4
  %mul1218 = fmul float %conv1217, %1063
  %cmp1219 = fcmp olt float %conv1216, %mul1218
  br i1 %cmp1219, label %if.then1221, label %if.else1222

if.then1221:                                      ; preds = %if.then1214
  br label %third_step

if.else1222:                                      ; preds = %if.then1214
  %1064 = load i32, i32* %min_mcost.addr, align 4
  %1065 = load i32, i32* @pred_SAD_uplayer, align 4
  %sub1223 = sub nsw i32 %1064, %1065
  %conv1224 = sitofp i32 %sub1223 to float
  %1066 = load i32, i32* @pred_SAD_uplayer, align 4
  %conv1225 = sitofp i32 %1066 to float
  %1067 = load float, float* %betaSec, align 4
  %mul1226 = fmul float %conv1225, %1067
  %cmp1227 = fcmp olt float %conv1224, %mul1226
  br i1 %cmp1227, label %if.then1229, label %if.end1230

if.then1229:                                      ; preds = %if.else1222
  br label %sec_step

if.end1230:                                       ; preds = %if.else1222
  br label %if.end1231

if.end1231:                                       ; preds = %if.end1230
  br label %if.end1250

if.else1232:                                      ; preds = %if.else1211
  %1068 = load i32, i32* %min_mcost.addr, align 4
  %1069 = load i32, i32* @pred_SAD_space, align 4
  %sub1233 = sub nsw i32 %1068, %1069
  %conv1234 = sitofp i32 %sub1233 to float
  %1070 = load i32, i32* @pred_SAD_space, align 4
  %conv1235 = sitofp i32 %1070 to float
  %1071 = load float, float* %betaThird, align 4
  %mul1236 = fmul float %conv1235, %1071
  %cmp1237 = fcmp olt float %conv1234, %mul1236
  br i1 %cmp1237, label %if.then1239, label %if.else1240

if.then1239:                                      ; preds = %if.else1232
  br label %third_step

if.else1240:                                      ; preds = %if.else1232
  %1072 = load i32, i32* %min_mcost.addr, align 4
  %1073 = load i32, i32* @pred_SAD_space, align 4
  %sub1241 = sub nsw i32 %1072, %1073
  %conv1242 = sitofp i32 %sub1241 to float
  %1074 = load i32, i32* @pred_SAD_space, align 4
  %conv1243 = sitofp i32 %1074 to float
  %1075 = load float, float* %betaSec, align 4
  %mul1244 = fmul float %conv1243, %1075
  %cmp1245 = fcmp olt float %conv1242, %mul1244
  br i1 %cmp1245, label %if.then1247, label %if.end1248

if.then1247:                                      ; preds = %if.else1240
  br label %sec_step

if.end1248:                                       ; preds = %if.else1240
  br label %if.end1249

if.end1249:                                       ; preds = %if.end1248
  br label %if.end1250

if.end1250:                                       ; preds = %if.end1249, %if.end1231
  br label %if.end1251

if.end1251:                                       ; preds = %if.end1250, %if.end1210
  br label %if.end1252

if.end1252:                                       ; preds = %if.end1251, %for.end1187
  br label %for.inc1253

for.inc1253:                                      ; preds = %if.end1252
  %1076 = load i32, i32* %i, align 4
  %inc1254 = add nsw i32 %1076, 1
  store i32 %inc1254, i32* %i, align 4
  br label %for.cond1122

for.end1255:                                      ; preds = %for.cond1122
  br label %sec_step

sec_step:                                         ; preds = %for.end1255, %if.then1247, %if.then1229, %if.then1208, %if.then1117, %if.then1099, %if.then1078, %if.then996, %if.then978, %if.then957, %if.then729, %if.then722, %if.then704, %if.then683, %if.then389
  %1077 = load i32, i32* %best_x, align 4
  store i32 %1077, i32* %iXMinNow, align 4
  %1078 = load i32, i32* %best_y, align 4
  store i32 %1078, i32* %iYMinNow, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond1256

for.cond1256:                                     ; preds = %for.inc1322, %sec_step
  %1079 = load i32, i32* %i, align 4
  %1080 = load i32, i32* %search_range.addr, align 4
  %cmp1257 = icmp slt i32 %1079, %1080
  br i1 %cmp1257, label %for.body1259, label %for.end1324

for.body1259:                                     ; preds = %for.cond1256
  store i32 1, i32* %iAbort, align 4
  store i32 0, i32* %m, align 4
  br label %for.cond1260

for.cond1260:                                     ; preds = %for.inc1316, %for.body1259
  %1081 = load i32, i32* %m, align 4
  %cmp1261 = icmp slt i32 %1081, 6
  br i1 %cmp1261, label %for.body1263, label %for.end1318

for.body1263:                                     ; preds = %for.cond1260
  %1082 = load i32, i32* %iXMinNow, align 4
  %1083 = load i32, i32* %m, align 4
  %idxprom1264 = sext i32 %1083 to i64
  %arrayidx1265 = getelementptr inbounds [6 x i32], [6 x i32]* @FastIntegerPelBlockMotionSearch.Hexagon_x, i64 0, i64 %idxprom1264
  %1084 = load i32, i32* %arrayidx1265, align 4
  %add1266 = add nsw i32 %1082, %1084
  store i32 %add1266, i32* %cand_x, align 4
  %1085 = load i32, i32* %iYMinNow, align 4
  %1086 = load i32, i32* %m, align 4
  %idxprom1267 = sext i32 %1086 to i64
  %arrayidx1268 = getelementptr inbounds [6 x i32], [6 x i32]* @FastIntegerPelBlockMotionSearch.Hexagon_y, i64 0, i64 %idxprom1267
  %1087 = load i32, i32* %arrayidx1268, align 4
  %add1269 = add nsw i32 %1085, %1087
  store i32 %add1269, i32* %cand_y, align 4
  %1088 = load i32, i32* %cand_x, align 4
  %1089 = load i32, i32* %center_x, align 4
  %sub1270 = sub nsw i32 %1088, %1089
  %call1271 = call i32 @abs(i32 %sub1270) #6
  %1090 = load i32, i32* %search_range.addr, align 4
  %cmp1272 = icmp sle i32 %call1271, %1090
  br i1 %cmp1272, label %land.lhs.true1274, label %if.end1315

land.lhs.true1274:                                ; preds = %for.body1263
  %1091 = load i32, i32* %cand_y, align 4
  %1092 = load i32, i32* %center_y, align 4
  %sub1275 = sub nsw i32 %1091, %1092
  %call1276 = call i32 @abs(i32 %sub1275) #6
  %1093 = load i32, i32* %search_range.addr, align 4
  %cmp1277 = icmp sle i32 %call1276, %1093
  br i1 %cmp1277, label %if.then1279, label %if.end1315

if.then1279:                                      ; preds = %land.lhs.true1274
  %1094 = load i32**, i32*** @McostState, align 8
  %1095 = load i32, i32* %cand_y, align 4
  %1096 = load i32, i32* %center_y, align 4
  %sub1280 = sub nsw i32 %1095, %1096
  %1097 = load i32, i32* %search_range.addr, align 4
  %add1281 = add nsw i32 %sub1280, %1097
  %idxprom1282 = sext i32 %add1281 to i64
  %arrayidx1283 = getelementptr inbounds i32*, i32** %1094, i64 %idxprom1282
  %1098 = load i32*, i32** %arrayidx1283, align 8
  %1099 = load i32, i32* %cand_x, align 4
  %1100 = load i32, i32* %center_x, align 4
  %sub1284 = sub nsw i32 %1099, %1100
  %1101 = load i32, i32* %search_range.addr, align 4
  %add1285 = add nsw i32 %sub1284, %1101
  %idxprom1286 = sext i32 %add1285 to i64
  %arrayidx1287 = getelementptr inbounds i32, i32* %1098, i64 %idxprom1286
  %1102 = load i32, i32* %arrayidx1287, align 4
  %tobool1288 = icmp ne i32 %1102, 0
  br i1 %tobool1288, label %if.end1314, label %if.then1289

if.then1289:                                      ; preds = %if.then1279
  %1103 = load i32, i32* %lambda_factor, align 4
  %1104 = load i32*, i32** @mvbits, align 8
  %1105 = load i32, i32* %cand_x, align 4
  %1106 = load i32, i32* %mvshift, align 4
  %shl1290 = shl i32 %1105, %1106
  %1107 = load i32, i32* %pred_x, align 4
  %sub1291 = sub nsw i32 %shl1290, %1107
  %idxprom1292 = sext i32 %sub1291 to i64
  %arrayidx1293 = getelementptr inbounds i32, i32* %1104, i64 %idxprom1292
  %1108 = load i32, i32* %arrayidx1293, align 4
  %1109 = load i32*, i32** @mvbits, align 8
  %1110 = load i32, i32* %cand_y, align 4
  %1111 = load i32, i32* %mvshift, align 4
  %shl1294 = shl i32 %1110, %1111
  %1112 = load i32, i32* %pred_y, align 4
  %sub1295 = sub nsw i32 %shl1294, %1112
  %idxprom1296 = sext i32 %sub1295 to i64
  %arrayidx1297 = getelementptr inbounds i32, i32* %1109, i64 %idxprom1296
  %1113 = load i32, i32* %arrayidx1297, align 4
  %add1298 = add nsw i32 %1108, %1113
  %mul1299 = mul nsw i32 %1103, %add1298
  %shr1300 = ashr i32 %mul1299, 16
  store i32 %shr1300, i32* %mcost, align 4
  %1114 = load i16*, i16** %ref_pic, align 8
  %1115 = load i16**, i16*** %orig_pic.addr, align 8
  %1116 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %1117 = load i32, i32* %blocksize_y, align 4
  %1118 = load i32, i32* %blocksize_x, align 4
  %1119 = load i32, i32* %blocksize_x4, align 4
  %1120 = load i32, i32* %mcost, align 4
  %1121 = load i32, i32* %min_mcost.addr, align 4
  %1122 = load i32, i32* %cand_x, align 4
  %1123 = load i32, i32* %cand_y, align 4
  %call1301 = call i32 @PartCalMad(i16* %1114, i16** %1115, i16* (i32, i16*, i32, i32, i32, i32)* %1116, i32 %1117, i32 %1118, i32 %1119, i32 %1120, i32 %1121, i32 %1122, i32 %1123)
  store i32 %call1301, i32* %mcost, align 4
  %1124 = load i32, i32* %mcost, align 4
  %1125 = load i32**, i32*** @McostState, align 8
  %1126 = load i32, i32* %cand_y, align 4
  %1127 = load i32, i32* %center_y, align 4
  %sub1302 = sub nsw i32 %1126, %1127
  %1128 = load i32, i32* %search_range.addr, align 4
  %add1303 = add nsw i32 %sub1302, %1128
  %idxprom1304 = sext i32 %add1303 to i64
  %arrayidx1305 = getelementptr inbounds i32*, i32** %1125, i64 %idxprom1304
  %1129 = load i32*, i32** %arrayidx1305, align 8
  %1130 = load i32, i32* %cand_x, align 4
  %1131 = load i32, i32* %center_x, align 4
  %sub1306 = sub nsw i32 %1130, %1131
  %1132 = load i32, i32* %search_range.addr, align 4
  %add1307 = add nsw i32 %sub1306, %1132
  %idxprom1308 = sext i32 %add1307 to i64
  %arrayidx1309 = getelementptr inbounds i32, i32* %1129, i64 %idxprom1308
  store i32 %1124, i32* %arrayidx1309, align 4
  %1133 = load i32, i32* %mcost, align 4
  %1134 = load i32, i32* %min_mcost.addr, align 4
  %cmp1310 = icmp slt i32 %1133, %1134
  br i1 %cmp1310, label %if.then1312, label %if.end1313

if.then1312:                                      ; preds = %if.then1289
  %1135 = load i32, i32* %cand_x, align 4
  store i32 %1135, i32* %best_x, align 4
  %1136 = load i32, i32* %cand_y, align 4
  store i32 %1136, i32* %best_y, align 4
  %1137 = load i32, i32* %mcost, align 4
  store i32 %1137, i32* %min_mcost.addr, align 4
  store i32 0, i32* %iAbort, align 4
  br label %if.end1313

if.end1313:                                       ; preds = %if.then1312, %if.then1289
  br label %if.end1314

if.end1314:                                       ; preds = %if.end1313, %if.then1279
  br label %if.end1315

if.end1315:                                       ; preds = %if.end1314, %land.lhs.true1274, %for.body1263
  br label %for.inc1316

for.inc1316:                                      ; preds = %if.end1315
  %1138 = load i32, i32* %m, align 4
  %inc1317 = add nsw i32 %1138, 1
  store i32 %inc1317, i32* %m, align 4
  br label %for.cond1260

for.end1318:                                      ; preds = %for.cond1260
  %1139 = load i32, i32* %iAbort, align 4
  %tobool1319 = icmp ne i32 %1139, 0
  br i1 %tobool1319, label %if.then1320, label %if.end1321

if.then1320:                                      ; preds = %for.end1318
  br label %for.end1324

if.end1321:                                       ; preds = %for.end1318
  %1140 = load i32, i32* %best_x, align 4
  store i32 %1140, i32* %iXMinNow, align 4
  %1141 = load i32, i32* %best_y, align 4
  store i32 %1141, i32* %iYMinNow, align 4
  br label %for.inc1322

for.inc1322:                                      ; preds = %if.end1321
  %1142 = load i32, i32* %i, align 4
  %inc1323 = add nsw i32 %1142, 1
  store i32 %inc1323, i32* %i, align 4
  br label %for.cond1256

for.end1324:                                      ; preds = %if.then1320, %for.cond1256
  br label %third_step

third_step:                                       ; preds = %for.end1324, %if.then1239, %if.then1221, %if.then1200, %if.then1109, %if.then1091, %if.then1070, %if.then988, %if.then970, %if.then949, %if.then714, %if.then696, %if.then675, %if.then381
  %1143 = load i32, i32* %best_x, align 4
  store i32 %1143, i32* %iXMinNow, align 4
  %1144 = load i32, i32* %best_y, align 4
  store i32 %1144, i32* %iYMinNow, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond1325

for.cond1325:                                     ; preds = %for.inc1391, %third_step
  %1145 = load i32, i32* %i, align 4
  %1146 = load i32, i32* %search_range.addr, align 4
  %cmp1326 = icmp slt i32 %1145, %1146
  br i1 %cmp1326, label %for.body1328, label %for.end1393

for.body1328:                                     ; preds = %for.cond1325
  store i32 65536, i32* %iSADLayer, align 4
  store i32 1, i32* %iAbort, align 4
  store i32 0, i32* %m, align 4
  br label %for.cond1329

for.cond1329:                                     ; preds = %for.inc1385, %for.body1328
  %1147 = load i32, i32* %m, align 4
  %cmp1330 = icmp slt i32 %1147, 4
  br i1 %cmp1330, label %for.body1332, label %for.end1387

for.body1332:                                     ; preds = %for.cond1329
  %1148 = load i32, i32* %iXMinNow, align 4
  %1149 = load i32, i32* %m, align 4
  %idxprom1333 = sext i32 %1149 to i64
  %arrayidx1334 = getelementptr inbounds [4 x i32], [4 x i32]* @FastIntegerPelBlockMotionSearch.Diamond_x, i64 0, i64 %idxprom1333
  %1150 = load i32, i32* %arrayidx1334, align 4
  %add1335 = add nsw i32 %1148, %1150
  store i32 %add1335, i32* %cand_x, align 4
  %1151 = load i32, i32* %iYMinNow, align 4
  %1152 = load i32, i32* %m, align 4
  %idxprom1336 = sext i32 %1152 to i64
  %arrayidx1337 = getelementptr inbounds [4 x i32], [4 x i32]* @FastIntegerPelBlockMotionSearch.Diamond_y, i64 0, i64 %idxprom1336
  %1153 = load i32, i32* %arrayidx1337, align 4
  %add1338 = add nsw i32 %1151, %1153
  store i32 %add1338, i32* %cand_y, align 4
  %1154 = load i32, i32* %cand_x, align 4
  %1155 = load i32, i32* %center_x, align 4
  %sub1339 = sub nsw i32 %1154, %1155
  %call1340 = call i32 @abs(i32 %sub1339) #6
  %1156 = load i32, i32* %search_range.addr, align 4
  %cmp1341 = icmp sle i32 %call1340, %1156
  br i1 %cmp1341, label %land.lhs.true1343, label %if.end1384

land.lhs.true1343:                                ; preds = %for.body1332
  %1157 = load i32, i32* %cand_y, align 4
  %1158 = load i32, i32* %center_y, align 4
  %sub1344 = sub nsw i32 %1157, %1158
  %call1345 = call i32 @abs(i32 %sub1344) #6
  %1159 = load i32, i32* %search_range.addr, align 4
  %cmp1346 = icmp sle i32 %call1345, %1159
  br i1 %cmp1346, label %if.then1348, label %if.end1384

if.then1348:                                      ; preds = %land.lhs.true1343
  %1160 = load i32**, i32*** @McostState, align 8
  %1161 = load i32, i32* %cand_y, align 4
  %1162 = load i32, i32* %center_y, align 4
  %sub1349 = sub nsw i32 %1161, %1162
  %1163 = load i32, i32* %search_range.addr, align 4
  %add1350 = add nsw i32 %sub1349, %1163
  %idxprom1351 = sext i32 %add1350 to i64
  %arrayidx1352 = getelementptr inbounds i32*, i32** %1160, i64 %idxprom1351
  %1164 = load i32*, i32** %arrayidx1352, align 8
  %1165 = load i32, i32* %cand_x, align 4
  %1166 = load i32, i32* %center_x, align 4
  %sub1353 = sub nsw i32 %1165, %1166
  %1167 = load i32, i32* %search_range.addr, align 4
  %add1354 = add nsw i32 %sub1353, %1167
  %idxprom1355 = sext i32 %add1354 to i64
  %arrayidx1356 = getelementptr inbounds i32, i32* %1164, i64 %idxprom1355
  %1168 = load i32, i32* %arrayidx1356, align 4
  %tobool1357 = icmp ne i32 %1168, 0
  br i1 %tobool1357, label %if.end1383, label %if.then1358

if.then1358:                                      ; preds = %if.then1348
  %1169 = load i32, i32* %lambda_factor, align 4
  %1170 = load i32*, i32** @mvbits, align 8
  %1171 = load i32, i32* %cand_x, align 4
  %1172 = load i32, i32* %mvshift, align 4
  %shl1359 = shl i32 %1171, %1172
  %1173 = load i32, i32* %pred_x, align 4
  %sub1360 = sub nsw i32 %shl1359, %1173
  %idxprom1361 = sext i32 %sub1360 to i64
  %arrayidx1362 = getelementptr inbounds i32, i32* %1170, i64 %idxprom1361
  %1174 = load i32, i32* %arrayidx1362, align 4
  %1175 = load i32*, i32** @mvbits, align 8
  %1176 = load i32, i32* %cand_y, align 4
  %1177 = load i32, i32* %mvshift, align 4
  %shl1363 = shl i32 %1176, %1177
  %1178 = load i32, i32* %pred_y, align 4
  %sub1364 = sub nsw i32 %shl1363, %1178
  %idxprom1365 = sext i32 %sub1364 to i64
  %arrayidx1366 = getelementptr inbounds i32, i32* %1175, i64 %idxprom1365
  %1179 = load i32, i32* %arrayidx1366, align 4
  %add1367 = add nsw i32 %1174, %1179
  %mul1368 = mul nsw i32 %1169, %add1367
  %shr1369 = ashr i32 %mul1368, 16
  store i32 %shr1369, i32* %mcost, align 4
  %1180 = load i16*, i16** %ref_pic, align 8
  %1181 = load i16**, i16*** %orig_pic.addr, align 8
  %1182 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %1183 = load i32, i32* %blocksize_y, align 4
  %1184 = load i32, i32* %blocksize_x, align 4
  %1185 = load i32, i32* %blocksize_x4, align 4
  %1186 = load i32, i32* %mcost, align 4
  %1187 = load i32, i32* %min_mcost.addr, align 4
  %1188 = load i32, i32* %cand_x, align 4
  %1189 = load i32, i32* %cand_y, align 4
  %call1370 = call i32 @PartCalMad(i16* %1180, i16** %1181, i16* (i32, i16*, i32, i32, i32, i32)* %1182, i32 %1183, i32 %1184, i32 %1185, i32 %1186, i32 %1187, i32 %1188, i32 %1189)
  store i32 %call1370, i32* %mcost, align 4
  %1190 = load i32, i32* %mcost, align 4
  %1191 = load i32**, i32*** @McostState, align 8
  %1192 = load i32, i32* %cand_y, align 4
  %1193 = load i32, i32* %center_y, align 4
  %sub1371 = sub nsw i32 %1192, %1193
  %1194 = load i32, i32* %search_range.addr, align 4
  %add1372 = add nsw i32 %sub1371, %1194
  %idxprom1373 = sext i32 %add1372 to i64
  %arrayidx1374 = getelementptr inbounds i32*, i32** %1191, i64 %idxprom1373
  %1195 = load i32*, i32** %arrayidx1374, align 8
  %1196 = load i32, i32* %cand_x, align 4
  %1197 = load i32, i32* %center_x, align 4
  %sub1375 = sub nsw i32 %1196, %1197
  %1198 = load i32, i32* %search_range.addr, align 4
  %add1376 = add nsw i32 %sub1375, %1198
  %idxprom1377 = sext i32 %add1376 to i64
  %arrayidx1378 = getelementptr inbounds i32, i32* %1195, i64 %idxprom1377
  store i32 %1190, i32* %arrayidx1378, align 4
  %1199 = load i32, i32* %mcost, align 4
  %1200 = load i32, i32* %min_mcost.addr, align 4
  %cmp1379 = icmp slt i32 %1199, %1200
  br i1 %cmp1379, label %if.then1381, label %if.end1382

if.then1381:                                      ; preds = %if.then1358
  %1201 = load i32, i32* %cand_x, align 4
  store i32 %1201, i32* %best_x, align 4
  %1202 = load i32, i32* %cand_y, align 4
  store i32 %1202, i32* %best_y, align 4
  %1203 = load i32, i32* %mcost, align 4
  store i32 %1203, i32* %min_mcost.addr, align 4
  store i32 0, i32* %iAbort, align 4
  br label %if.end1382

if.end1382:                                       ; preds = %if.then1381, %if.then1358
  br label %if.end1383

if.end1383:                                       ; preds = %if.end1382, %if.then1348
  br label %if.end1384

if.end1384:                                       ; preds = %if.end1383, %land.lhs.true1343, %for.body1332
  br label %for.inc1385

for.inc1385:                                      ; preds = %if.end1384
  %1204 = load i32, i32* %m, align 4
  %inc1386 = add nsw i32 %1204, 1
  store i32 %inc1386, i32* %m, align 4
  br label %for.cond1329

for.end1387:                                      ; preds = %for.cond1329
  %1205 = load i32, i32* %iAbort, align 4
  %tobool1388 = icmp ne i32 %1205, 0
  br i1 %tobool1388, label %if.then1389, label %if.end1390

if.then1389:                                      ; preds = %for.end1387
  br label %for.end1393

if.end1390:                                       ; preds = %for.end1387
  %1206 = load i32, i32* %best_x, align 4
  store i32 %1206, i32* %iXMinNow, align 4
  %1207 = load i32, i32* %best_y, align 4
  store i32 %1207, i32* %iYMinNow, align 4
  br label %for.inc1391

for.inc1391:                                      ; preds = %if.end1390
  %1208 = load i32, i32* %i, align 4
  %inc1392 = add nsw i32 %1208, 1
  store i32 %inc1392, i32* %i, align 4
  br label %for.cond1325

for.end1393:                                      ; preds = %if.then1389, %for.cond1325
  %1209 = load i32, i32* %best_x, align 4
  %1210 = load i32, i32* %pic_pix_x.addr, align 4
  %sub1394 = sub nsw i32 %1209, %1210
  %conv1395 = trunc i32 %sub1394 to i16
  %1211 = load i16*, i16** %mv_x.addr, align 8
  store i16 %conv1395, i16* %1211, align 2
  %1212 = load i32, i32* %best_y, align 4
  %1213 = load i32, i32* %pic_pix_y.addr, align 4
  %sub1396 = sub nsw i32 %1212, %1213
  %conv1397 = trunc i32 %sub1396 to i16
  %1214 = load i16*, i16** %mv_y.addr, align 8
  store i16 %conv1397, i16* %1214, align 2
  %1215 = load i32, i32* %min_mcost.addr, align 4
  %1216 = load i32, i32* %canary
  %1217 = icmp eq i32 %1216, 177560480
  br i1 %1217, label %1218, label %func_exit

1218:                                             ; preds = %for.end1393, %func_exit
  ret i32 %1215

func_exit:                                        ; preds = %for.end1393
  call void @detect_breach()
  br label %1218
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @FastSubPelBlockMotionSearch.60(i16** %orig_pic, i16 signext %ref, i32 %list, i32 %pic_pix_x, i32 %pic_pix_y, i32 %blocktype, i16 signext %pred_mv_x, i16 signext %pred_mv_y, i16* %mv_x, i16* %mv_y, i32 %search_pos2, i32 %search_pos4, i32 %min_mcost, double %lambda, i32 %useABT) #0 {
entry:
  %currmv_x = alloca i32, align 4
  %pred_frac_mv_x = alloca i32, align 4
  %mcost = alloca i32, align 4
  %cand_mv_x = alloca i32, align 4
  %ref.addr = alloca i16, align 2
  %blocksize_y = alloca i32, align 4
  %min_mcost.addr = alloca i32, align 4
  %orig_pic.addr = alloca i16**, align 8
  %pic4_pix_y = alloca i32, align 4
  %list.addr = alloca i32, align 4
  %iSADLayer = alloca i32, align 4
  %mv_shift = alloca i32, align 4
  %pic_pix_x.addr = alloca i32, align 4
  %currmv_y = alloca i32, align 4
  %max_pos_y4 = alloca i32, align 4
  %mv_y.addr = alloca i16*, align 8
  %pred_frac_up_mv_y = alloca i32, align 4
  %pic_pix_y.addr = alloca i32, align 4
  %pred_frac_mv_y = alloca i32, align 4
  %i = alloca i32, align 4
  %search_range_dynamic = alloca i32, align 4
  %iCurrSearchRange = alloca i32, align 4
  %pred_mv_x.addr = alloca i16, align 2
  %m = alloca i32, align 4
  %search_pos2.addr = alloca i32, align 4
  %iYMinNow = alloca i32, align 4
  %abort_search = alloca i32, align 4
  %iXMinNow = alloca i32, align 4
  %mv_x.addr = alloca i16*, align 8
  %useABT.addr = alloca i32, align 4
  %pic4_pix_x = alloca i32, align 4
  %blocksize_x = alloca i32, align 4
  %pred_frac_up_mv_x = alloca i32, align 4
  %pred_mv_y.addr = alloca i16, align 2
  %ref_picture = alloca %struct.storable_picture*, align 8
  %list_offset = alloca i32, align 4
  %canary = alloca i32
  store i32 1525543839, i32* %canary
  %max_pos_x4 = alloca i32, align 4
  %lambda_factor = alloca i32, align 4
  %blocktype.addr = alloca i32, align 4
  %mv_cost = alloca i32, align 4
  %lambda.addr = alloca double, align 8
  %cand_mv_y = alloca i32, align 4
  %search_pos4.addr = alloca i32, align 4
  store i16** %orig_pic, i16*** %orig_pic.addr, align 8
  store i16 %ref, i16* %ref.addr, align 2
  store i32 %list, i32* %list.addr, align 4
  store i32 %pic_pix_x, i32* %pic_pix_x.addr, align 4
  store i32 %pic_pix_y, i32* %pic_pix_y.addr, align 4
  store i32 %blocktype, i32* %blocktype.addr, align 4
  store i16 %pred_mv_x, i16* %pred_mv_x.addr, align 2
  store i16 %pred_mv_y, i16* %pred_mv_y.addr, align 2
  store i16* %mv_x, i16** %mv_x.addr, align 8
  store i16* %mv_y, i16** %mv_y.addr, align 8
  store i32 %search_pos2, i32* %search_pos2.addr, align 4
  store i32 %search_pos4, i32* %search_pos4.addr, align 4
  store i32 %min_mcost, i32* %min_mcost.addr, align 4
  store double %lambda, double* %lambda.addr, align 8
  store i32 %useABT, i32* %useABT.addr, align 4
  %0 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %MbaffFrameFlag = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %0, i32 0, i32 90
  %1 = load i32, i32* %MbaffFrameFlag, align 8
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %mb_data = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %2, i32 0, i32 51
  %3 = load %struct.macroblock*, %struct.macroblock** %mb_data, align 8
  %4 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %current_mb_nr = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %4, i32 0, i32 3
  %5 = load i32, i32* %current_mb_nr, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 %idxprom
  %mb_field = getelementptr inbounds %struct.macroblock, %struct.macroblock* %arrayidx, i32 0, i32 22
  %6 = load i32, i32* %mb_field, align 4
  %tobool1 = icmp ne i32 %6, 0
  br i1 %tobool1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %7 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %current_mb_nr2 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %7, i32 0, i32 3
  %8 = load i32, i32* %current_mb_nr2, align 4
  %rem = srem i32 %8, 2
  %tobool3 = icmp ne i32 %rem, 0
  %9 = zext i1 %tobool3 to i64
  %cond = select i1 %tobool3, i32 4, i32 2
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond4 = phi i32 [ %cond, %cond.true ], [ 0, %cond.false ]
  store i32 %cond4, i32* %list_offset, align 4
  %10 = load i32, i32* %list.addr, align 4
  %11 = load i32, i32* %list_offset, align 4
  %add = add nsw i32 %10, %11
  %idxprom5 = sext i32 %add to i64
  %arrayidx6 = getelementptr inbounds [6 x %struct.storable_picture**], [6 x %struct.storable_picture**]* @listX, i64 0, i64 %idxprom5
  %12 = load %struct.storable_picture**, %struct.storable_picture*** %arrayidx6, align 8
  %13 = load i16, i16* %ref.addr, align 2
  %idxprom7 = sext i16 %13 to i64
  %arrayidx8 = getelementptr inbounds %struct.storable_picture*, %struct.storable_picture** %12, i64 %idxprom7
  %14 = load %struct.storable_picture*, %struct.storable_picture** %arrayidx8, align 8
  store %struct.storable_picture* %14, %struct.storable_picture** %ref_picture, align 8
  %15 = load double, double* %lambda.addr, align 8
  %mul = fmul double 6.553600e+04, %15
  %add9 = fadd double %mul, 5.000000e-01
  %conv = fptosi double %add9 to i32
  store i32 %conv, i32* %lambda_factor, align 4
  store i32 0, i32* %mv_shift, align 4
  %16 = load %struct.InputParameters*, %struct.InputParameters** @input, align 8
  %blc_size = getelementptr inbounds %struct.InputParameters, %struct.InputParameters* %16, i32 0, i32 20
  %17 = load i32, i32* %blocktype.addr, align 4
  %idxprom10 = sext i32 %17 to i64
  %arrayidx11 = getelementptr inbounds [8 x [2 x i32]], [8 x [2 x i32]]* %blc_size, i64 0, i64 %idxprom10
  %arrayidx12 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx11, i64 0, i64 0
  %18 = load i32, i32* %arrayidx12, align 8
  store i32 %18, i32* %blocksize_x, align 4
  %19 = load %struct.InputParameters*, %struct.InputParameters** @input, align 8
  %blc_size13 = getelementptr inbounds %struct.InputParameters, %struct.InputParameters* %19, i32 0, i32 20
  %20 = load i32, i32* %blocktype.addr, align 4
  %idxprom14 = sext i32 %20 to i64
  %arrayidx15 = getelementptr inbounds [8 x [2 x i32]], [8 x [2 x i32]]* %blc_size13, i64 0, i64 %idxprom14
  %arrayidx16 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx15, i64 0, i64 1
  %21 = load i32, i32* %arrayidx16, align 4
  store i32 %21, i32* %blocksize_y, align 4
  %22 = load i32, i32* %pic_pix_x.addr, align 4
  %shl = shl i32 %22, 2
  store i32 %shl, i32* %pic4_pix_x, align 4
  %23 = load i32, i32* %pic_pix_y.addr, align 4
  %shl17 = shl i32 %23, 2
  store i32 %shl17, i32* %pic4_pix_y, align 4
  %24 = load %struct.storable_picture*, %struct.storable_picture** %ref_picture, align 8
  %size_x = getelementptr inbounds %struct.storable_picture, %struct.storable_picture* %24, i32 0, i32 18
  %25 = load i32, i32* %size_x, align 8
  %26 = load i32, i32* %blocksize_x, align 4
  %sub = sub nsw i32 %25, %26
  %add18 = add nsw i32 %sub, 1
  %shl19 = shl i32 %add18, 2
  store i32 %shl19, i32* %max_pos_x4, align 4
  %27 = load %struct.storable_picture*, %struct.storable_picture** %ref_picture, align 8
  %size_y = getelementptr inbounds %struct.storable_picture, %struct.storable_picture* %27, i32 0, i32 19
  %28 = load i32, i32* %size_y, align 4
  %29 = load i32, i32* %blocksize_y, align 4
  %sub20 = sub nsw i32 %28, %29
  %add21 = add nsw i32 %sub20, 1
  %shl22 = shl i32 %add21, 2
  store i32 %shl22, i32* %max_pos_y4, align 4
  store i32 0, i32* %currmv_x, align 4
  store i32 0, i32* %currmv_y, align 4
  %30 = load i16*, i16** %mv_x.addr, align 8
  %31 = load i16, i16* %30, align 2
  %conv23 = sext i16 %31 to i32
  %shl24 = shl i32 %conv23, 2
  %conv25 = trunc i32 %shl24 to i16
  store i16 %conv25, i16* %30, align 2
  %32 = load i16*, i16** %mv_y.addr, align 8
  %33 = load i16, i16* %32, align 2
  %conv26 = sext i16 %33 to i32
  %shl27 = shl i32 %conv26, 2
  %conv28 = trunc i32 %shl27 to i16
  store i16 %conv28, i16* %32, align 2
  %34 = load i32, i32* %pic4_pix_x, align 4
  %35 = load i16*, i16** %mv_x.addr, align 8
  %36 = load i16, i16* %35, align 2
  %conv29 = sext i16 %36 to i32
  %add30 = add nsw i32 %34, %conv29
  %cmp = icmp sgt i32 %add30, 1
  br i1 %cmp, label %land.lhs.true32, label %if.else

land.lhs.true32:                                  ; preds = %cond.end
  %37 = load i32, i32* %pic4_pix_x, align 4
  %38 = load i16*, i16** %mv_x.addr, align 8
  %39 = load i16, i16* %38, align 2
  %conv33 = sext i16 %39 to i32
  %add34 = add nsw i32 %37, %conv33
  %40 = load i32, i32* %max_pos_x4, align 4
  %sub35 = sub nsw i32 %40, 2
  %cmp36 = icmp slt i32 %add34, %sub35
  br i1 %cmp36, label %land.lhs.true38, label %if.else

land.lhs.true38:                                  ; preds = %land.lhs.true32
  %41 = load i32, i32* %pic4_pix_y, align 4
  %42 = load i16*, i16** %mv_y.addr, align 8
  %43 = load i16, i16* %42, align 2
  %conv39 = sext i16 %43 to i32
  %add40 = add nsw i32 %41, %conv39
  %cmp41 = icmp sgt i32 %add40, 1
  br i1 %cmp41, label %land.lhs.true43, label %if.else

land.lhs.true43:                                  ; preds = %land.lhs.true38
  %44 = load i32, i32* %pic4_pix_y, align 4
  %45 = load i16*, i16** %mv_y.addr, align 8
  %46 = load i16, i16* %45, align 2
  %conv44 = sext i16 %46 to i32
  %add45 = add nsw i32 %44, %conv44
  %47 = load i32, i32* %max_pos_y4, align 4
  %sub46 = sub nsw i32 %47, 2
  %cmp47 = icmp slt i32 %add45, %sub46
  br i1 %cmp47, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true43
  store i16 (i16**, i32, i32, i32, i32)* @FastPelY_14, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  br label %if.end

if.else:                                          ; preds = %land.lhs.true43, %land.lhs.true38, %land.lhs.true32, %cond.end
  store i16 (i16**, i32, i32, i32, i32)* @UMVPelY_14, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  store i32 3, i32* %search_range_dynamic, align 4
  %48 = load i16, i16* %pred_mv_x.addr, align 2
  %conv49 = sext i16 %48 to i32
  %49 = load i16*, i16** %mv_x.addr, align 8
  %50 = load i16, i16* %49, align 2
  %conv50 = sext i16 %50 to i32
  %sub51 = sub nsw i32 %conv49, %conv50
  %rem52 = srem i32 %sub51, 4
  store i32 %rem52, i32* %pred_frac_mv_x, align 4
  %51 = load i16, i16* %pred_mv_y.addr, align 2
  %conv53 = sext i16 %51 to i32
  %52 = load i16*, i16** %mv_y.addr, align 8
  %53 = load i16, i16* %52, align 2
  %conv54 = sext i16 %53 to i32
  %sub55 = sub nsw i32 %conv53, %conv54
  %rem56 = srem i32 %sub55, 4
  store i32 %rem56, i32* %pred_frac_mv_y, align 4
  %54 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @pred_MV_uplayer, i64 0, i64 0), align 4
  %55 = load i16*, i16** %mv_x.addr, align 8
  %56 = load i16, i16* %55, align 2
  %conv57 = sext i16 %56 to i32
  %sub58 = sub nsw i32 %54, %conv57
  %rem59 = srem i32 %sub58, 4
  store i32 %rem59, i32* %pred_frac_up_mv_x, align 4
  %57 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @pred_MV_uplayer, i64 0, i64 1), align 4
  %58 = load i16*, i16** %mv_y.addr, align 8
  %59 = load i16, i16* %58, align 2
  %conv60 = sext i16 %59 to i32
  %sub61 = sub nsw i32 %57, %conv60
  %rem62 = srem i32 %sub61, 4
  store i32 %rem62, i32* %pred_frac_up_mv_y, align 4
  %60 = load i8**, i8*** @SearchState, align 8
  %arrayidx63 = getelementptr inbounds i8*, i8** %60, i64 0
  %61 = load i8*, i8** %arrayidx63, align 8
  %62 = load i32, i32* %search_range_dynamic, align 4
  %mul64 = mul nsw i32 2, %62
  %add65 = add nsw i32 %mul64, 1
  %63 = load i32, i32* %search_range_dynamic, align 4
  %mul66 = mul nsw i32 2, %63
  %add67 = add nsw i32 %mul66, 1
  %mul68 = mul nsw i32 %add65, %add67
  %conv69 = sext i32 %mul68 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %61, i8 0, i64 %conv69, i1 false)
  %64 = load %struct.InputParameters*, %struct.InputParameters** @input, align 8
  %hadamard = getelementptr inbounds %struct.InputParameters, %struct.InputParameters* %64, i32 0, i32 6
  %65 = load i32, i32* %hadamard, align 8
  %tobool70 = icmp ne i32 %65, 0
  br i1 %tobool70, label %if.then71, label %if.else94

if.then71:                                        ; preds = %if.end
  %66 = load i16*, i16** %mv_x.addr, align 8
  %67 = load i16, i16* %66, align 2
  %conv72 = sext i16 %67 to i32
  store i32 %conv72, i32* %cand_mv_x, align 4
  %68 = load i16*, i16** %mv_y.addr, align 8
  %69 = load i16, i16* %68, align 2
  %conv73 = sext i16 %69 to i32
  store i32 %conv73, i32* %cand_mv_y, align 4
  %70 = load i32, i32* %lambda_factor, align 4
  %71 = load i32*, i32** @mvbits, align 8
  %72 = load i32, i32* %cand_mv_x, align 4
  %73 = load i32, i32* %mv_shift, align 4
  %shl74 = shl i32 %72, %73
  %74 = load i16, i16* %pred_mv_x.addr, align 2
  %conv75 = sext i16 %74 to i32
  %sub76 = sub nsw i32 %shl74, %conv75
  %idxprom77 = sext i32 %sub76 to i64
  %arrayidx78 = getelementptr inbounds i32, i32* %71, i64 %idxprom77
  %75 = load i32, i32* %arrayidx78, align 4
  %76 = load i32*, i32** @mvbits, align 8
  %77 = load i32, i32* %cand_mv_y, align 4
  %78 = load i32, i32* %mv_shift, align 4
  %shl79 = shl i32 %77, %78
  %79 = load i16, i16* %pred_mv_y.addr, align 2
  %conv80 = sext i16 %79 to i32
  %sub81 = sub nsw i32 %shl79, %conv80
  %idxprom82 = sext i32 %sub81 to i64
  %arrayidx83 = getelementptr inbounds i32, i32* %76, i64 %idxprom82
  %80 = load i32, i32* %arrayidx83, align 4
  %add84 = add nsw i32 %75, %80
  %mul85 = mul nsw i32 %70, %add84
  %shr = ashr i32 %mul85, 16
  store i32 %shr, i32* %mv_cost, align 4
  %81 = load i32, i32* %pic_pix_x.addr, align 4
  %82 = load i32, i32* %pic_pix_y.addr, align 4
  %83 = load i32, i32* %blocksize_x, align 4
  %84 = load i32, i32* %blocksize_y, align 4
  %85 = load i32, i32* %cand_mv_x, align 4
  %86 = load i32, i32* %cand_mv_y, align 4
  %87 = load %struct.storable_picture*, %struct.storable_picture** %ref_picture, align 8
  %88 = load i16**, i16*** %orig_pic.addr, align 8
  %89 = load i32, i32* %mv_cost, align 4
  %90 = load i32, i32* %min_mcost.addr, align 4
  %91 = load i32, i32* %useABT.addr, align 4
  %call = call i32 @AddUpSADQuarter(i32 %81, i32 %82, i32 %83, i32 %84, i32 %85, i32 %86, %struct.storable_picture* %87, i16** %88, i32 %89, i32 %90, i32 %91)
  store i32 %call, i32* %mcost, align 4
  %92 = load i8**, i8*** @SearchState, align 8
  %93 = load i32, i32* %search_range_dynamic, align 4
  %idxprom86 = sext i32 %93 to i64
  %arrayidx87 = getelementptr inbounds i8*, i8** %92, i64 %idxprom86
  %94 = load i8*, i8** %arrayidx87, align 8
  %95 = load i32, i32* %search_range_dynamic, align 4
  %idxprom88 = sext i32 %95 to i64
  %arrayidx89 = getelementptr inbounds i8, i8* %94, i64 %idxprom88
  store i8 1, i8* %arrayidx89, align 1
  %96 = load i32, i32* %mcost, align 4
  %97 = load i32, i32* %min_mcost.addr, align 4
  %cmp90 = icmp slt i32 %96, %97
  br i1 %cmp90, label %if.then92, label %if.end93

if.then92:                                        ; preds = %if.then71
  %98 = load i32, i32* %mcost, align 4
  store i32 %98, i32* %min_mcost.addr, align 4
  %99 = load i32, i32* %cand_mv_x, align 4
  store i32 %99, i32* %currmv_x, align 4
  %100 = load i32, i32* %cand_mv_y, align 4
  store i32 %100, i32* %currmv_y, align 4
  br label %if.end93

if.end93:                                         ; preds = %if.then92, %if.then71
  br label %if.end101

if.else94:                                        ; preds = %if.end
  %101 = load i8**, i8*** @SearchState, align 8
  %102 = load i32, i32* %search_range_dynamic, align 4
  %idxprom95 = sext i32 %102 to i64
  %arrayidx96 = getelementptr inbounds i8*, i8** %101, i64 %idxprom95
  %103 = load i8*, i8** %arrayidx96, align 8
  %104 = load i32, i32* %search_range_dynamic, align 4
  %idxprom97 = sext i32 %104 to i64
  %arrayidx98 = getelementptr inbounds i8, i8* %103, i64 %idxprom97
  store i8 1, i8* %arrayidx98, align 1
  %105 = load i16*, i16** %mv_x.addr, align 8
  %106 = load i16, i16* %105, align 2
  %conv99 = sext i16 %106 to i32
  store i32 %conv99, i32* %currmv_x, align 4
  %107 = load i16*, i16** %mv_y.addr, align 8
  %108 = load i16, i16* %107, align 2
  %conv100 = sext i16 %108 to i32
  store i32 %conv100, i32* %currmv_y, align 4
  br label %if.end101

if.end101:                                        ; preds = %if.else94, %if.end93
  %109 = load i32, i32* %pred_frac_mv_x, align 4
  %cmp102 = icmp ne i32 %109, 0
  br i1 %cmp102, label %if.then106, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end101
  %110 = load i32, i32* %pred_frac_mv_y, align 4
  %cmp104 = icmp ne i32 %110, 0
  br i1 %cmp104, label %if.then106, label %if.end139

if.then106:                                       ; preds = %lor.lhs.false, %if.end101
  %111 = load i16*, i16** %mv_x.addr, align 8
  %112 = load i16, i16* %111, align 2
  %conv107 = sext i16 %112 to i32
  %113 = load i32, i32* %pred_frac_mv_x, align 4
  %add108 = add nsw i32 %conv107, %113
  store i32 %add108, i32* %cand_mv_x, align 4
  %114 = load i16*, i16** %mv_y.addr, align 8
  %115 = load i16, i16* %114, align 2
  %conv109 = sext i16 %115 to i32
  %116 = load i32, i32* %pred_frac_mv_y, align 4
  %add110 = add nsw i32 %conv109, %116
  store i32 %add110, i32* %cand_mv_y, align 4
  %117 = load i32, i32* %lambda_factor, align 4
  %118 = load i32*, i32** @mvbits, align 8
  %119 = load i32, i32* %cand_mv_x, align 4
  %120 = load i32, i32* %mv_shift, align 4
  %shl111 = shl i32 %119, %120
  %121 = load i16, i16* %pred_mv_x.addr, align 2
  %conv112 = sext i16 %121 to i32
  %sub113 = sub nsw i32 %shl111, %conv112
  %idxprom114 = sext i32 %sub113 to i64
  %arrayidx115 = getelementptr inbounds i32, i32* %118, i64 %idxprom114
  %122 = load i32, i32* %arrayidx115, align 4
  %123 = load i32*, i32** @mvbits, align 8
  %124 = load i32, i32* %cand_mv_y, align 4
  %125 = load i32, i32* %mv_shift, align 4
  %shl116 = shl i32 %124, %125
  %126 = load i16, i16* %pred_mv_y.addr, align 2
  %conv117 = sext i16 %126 to i32
  %sub118 = sub nsw i32 %shl116, %conv117
  %idxprom119 = sext i32 %sub118 to i64
  %arrayidx120 = getelementptr inbounds i32, i32* %123, i64 %idxprom119
  %127 = load i32, i32* %arrayidx120, align 4
  %add121 = add nsw i32 %122, %127
  %mul122 = mul nsw i32 %117, %add121
  %shr123 = ashr i32 %mul122, 16
  store i32 %shr123, i32* %mv_cost, align 4
  %128 = load i32, i32* %pic_pix_x.addr, align 4
  %129 = load i32, i32* %pic_pix_y.addr, align 4
  %130 = load i32, i32* %blocksize_x, align 4
  %131 = load i32, i32* %blocksize_y, align 4
  %132 = load i32, i32* %cand_mv_x, align 4
  %133 = load i32, i32* %cand_mv_y, align 4
  %134 = load %struct.storable_picture*, %struct.storable_picture** %ref_picture, align 8
  %135 = load i16**, i16*** %orig_pic.addr, align 8
  %136 = load i32, i32* %mv_cost, align 4
  %137 = load i32, i32* %min_mcost.addr, align 4
  %138 = load i32, i32* %useABT.addr, align 4
  %call124 = call i32 @AddUpSADQuarter(i32 %128, i32 %129, i32 %130, i32 %131, i32 %132, i32 %133, %struct.storable_picture* %134, i16** %135, i32 %136, i32 %137, i32 %138)
  store i32 %call124, i32* %mcost, align 4
  %139 = load i8**, i8*** @SearchState, align 8
  %140 = load i32, i32* %cand_mv_y, align 4
  %141 = load i16*, i16** %mv_y.addr, align 8
  %142 = load i16, i16* %141, align 2
  %conv125 = sext i16 %142 to i32
  %sub126 = sub nsw i32 %140, %conv125
  %143 = load i32, i32* %search_range_dynamic, align 4
  %add127 = add nsw i32 %sub126, %143
  %idxprom128 = sext i32 %add127 to i64
  %arrayidx129 = getelementptr inbounds i8*, i8** %139, i64 %idxprom128
  %144 = load i8*, i8** %arrayidx129, align 8
  %145 = load i32, i32* %cand_mv_x, align 4
  %146 = load i16*, i16** %mv_x.addr, align 8
  %147 = load i16, i16* %146, align 2
  %conv130 = sext i16 %147 to i32
  %sub131 = sub nsw i32 %145, %conv130
  %148 = load i32, i32* %search_range_dynamic, align 4
  %add132 = add nsw i32 %sub131, %148
  %idxprom133 = sext i32 %add132 to i64
  %arrayidx134 = getelementptr inbounds i8, i8* %144, i64 %idxprom133
  store i8 1, i8* %arrayidx134, align 1
  %149 = load i32, i32* %mcost, align 4
  %150 = load i32, i32* %min_mcost.addr, align 4
  %cmp135 = icmp slt i32 %149, %150
  br i1 %cmp135, label %if.then137, label %if.end138

if.then137:                                       ; preds = %if.then106
  %151 = load i32, i32* %mcost, align 4
  store i32 %151, i32* %min_mcost.addr, align 4
  %152 = load i32, i32* %cand_mv_x, align 4
  store i32 %152, i32* %currmv_x, align 4
  %153 = load i32, i32* %cand_mv_y, align 4
  store i32 %153, i32* %currmv_y, align 4
  br label %if.end138

if.end138:                                        ; preds = %if.then137, %if.then106
  br label %if.end139

if.end139:                                        ; preds = %if.end138, %lor.lhs.false
  %154 = load i32, i32* %currmv_x, align 4
  store i32 %154, i32* %iXMinNow, align 4
  %155 = load i32, i32* %currmv_y, align 4
  store i32 %155, i32* %iYMinNow, align 4
  %156 = load i32, i32* %search_range_dynamic, align 4
  %mul140 = mul nsw i32 2, %156
  %add141 = add nsw i32 %mul140, 1
  store i32 %add141, i32* %iCurrSearchRange, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc211, %if.end139
  %157 = load i32, i32* %i, align 4
  %158 = load i32, i32* %iCurrSearchRange, align 4
  %cmp142 = icmp slt i32 %157, %158
  br i1 %cmp142, label %for.body, label %for.end213

for.body:                                         ; preds = %for.cond
  store i32 1, i32* %abort_search, align 4
  store i32 65536, i32* %iSADLayer, align 4
  store i32 0, i32* %m, align 4
  br label %for.cond144

for.cond144:                                      ; preds = %for.inc, %for.body
  %159 = load i32, i32* %m, align 4
  %cmp145 = icmp slt i32 %159, 4
  br i1 %cmp145, label %for.body147, label %for.end

for.body147:                                      ; preds = %for.cond144
  %160 = load i32, i32* %iXMinNow, align 4
  %161 = load i32, i32* %m, align 4
  %idxprom148 = sext i32 %161 to i64
  %arrayidx149 = getelementptr inbounds [4 x i32], [4 x i32]* @FastSubPelBlockMotionSearch.Diamond_x, i64 0, i64 %idxprom148
  %162 = load i32, i32* %arrayidx149, align 4
  %add150 = add nsw i32 %160, %162
  store i32 %add150, i32* %cand_mv_x, align 4
  %163 = load i32, i32* %iYMinNow, align 4
  %164 = load i32, i32* %m, align 4
  %idxprom151 = sext i32 %164 to i64
  %arrayidx152 = getelementptr inbounds [4 x i32], [4 x i32]* @FastSubPelBlockMotionSearch.Diamond_y, i64 0, i64 %idxprom151
  %165 = load i32, i32* %arrayidx152, align 4
  %add153 = add nsw i32 %163, %165
  store i32 %add153, i32* %cand_mv_y, align 4
  %166 = load i32, i32* %cand_mv_x, align 4
  %167 = load i16*, i16** %mv_x.addr, align 8
  %168 = load i16, i16* %167, align 2
  %conv154 = sext i16 %168 to i32
  %sub155 = sub nsw i32 %166, %conv154
  %call156 = call i32 @abs(i32 %sub155) #6
  %169 = load i32, i32* %search_range_dynamic, align 4
  %cmp157 = icmp sle i32 %call156, %169
  br i1 %cmp157, label %land.lhs.true159, label %if.end207

land.lhs.true159:                                 ; preds = %for.body147
  %170 = load i32, i32* %cand_mv_y, align 4
  %171 = load i16*, i16** %mv_y.addr, align 8
  %172 = load i16, i16* %171, align 2
  %conv160 = sext i16 %172 to i32
  %sub161 = sub nsw i32 %170, %conv160
  %call162 = call i32 @abs(i32 %sub161) #6
  %173 = load i32, i32* %search_range_dynamic, align 4
  %cmp163 = icmp sle i32 %call162, %173
  br i1 %cmp163, label %if.then165, label %if.end207

if.then165:                                       ; preds = %land.lhs.true159
  %174 = load i8**, i8*** @SearchState, align 8
  %175 = load i32, i32* %cand_mv_y, align 4
  %176 = load i16*, i16** %mv_y.addr, align 8
  %177 = load i16, i16* %176, align 2
  %conv166 = sext i16 %177 to i32
  %sub167 = sub nsw i32 %175, %conv166
  %178 = load i32, i32* %search_range_dynamic, align 4
  %add168 = add nsw i32 %sub167, %178
  %idxprom169 = sext i32 %add168 to i64
  %arrayidx170 = getelementptr inbounds i8*, i8** %174, i64 %idxprom169
  %179 = load i8*, i8** %arrayidx170, align 8
  %180 = load i32, i32* %cand_mv_x, align 4
  %181 = load i16*, i16** %mv_x.addr, align 8
  %182 = load i16, i16* %181, align 2
  %conv171 = sext i16 %182 to i32
  %sub172 = sub nsw i32 %180, %conv171
  %183 = load i32, i32* %search_range_dynamic, align 4
  %add173 = add nsw i32 %sub172, %183
  %idxprom174 = sext i32 %add173 to i64
  %arrayidx175 = getelementptr inbounds i8, i8* %179, i64 %idxprom174
  %184 = load i8, i8* %arrayidx175, align 1
  %tobool176 = icmp ne i8 %184, 0
  br i1 %tobool176, label %if.end206, label %if.then177

if.then177:                                       ; preds = %if.then165
  %185 = load i32, i32* %lambda_factor, align 4
  %186 = load i32*, i32** @mvbits, align 8
  %187 = load i32, i32* %cand_mv_x, align 4
  %188 = load i32, i32* %mv_shift, align 4
  %shl178 = shl i32 %187, %188
  %189 = load i16, i16* %pred_mv_x.addr, align 2
  %conv179 = sext i16 %189 to i32
  %sub180 = sub nsw i32 %shl178, %conv179
  %idxprom181 = sext i32 %sub180 to i64
  %arrayidx182 = getelementptr inbounds i32, i32* %186, i64 %idxprom181
  %190 = load i32, i32* %arrayidx182, align 4
  %191 = load i32*, i32** @mvbits, align 8
  %192 = load i32, i32* %cand_mv_y, align 4
  %193 = load i32, i32* %mv_shift, align 4
  %shl183 = shl i32 %192, %193
  %194 = load i16, i16* %pred_mv_y.addr, align 2
  %conv184 = sext i16 %194 to i32
  %sub185 = sub nsw i32 %shl183, %conv184
  %idxprom186 = sext i32 %sub185 to i64
  %arrayidx187 = getelementptr inbounds i32, i32* %191, i64 %idxprom186
  %195 = load i32, i32* %arrayidx187, align 4
  %add188 = add nsw i32 %190, %195
  %mul189 = mul nsw i32 %185, %add188
  %shr190 = ashr i32 %mul189, 16
  store i32 %shr190, i32* %mv_cost, align 4
  %196 = load i32, i32* %pic_pix_x.addr, align 4
  %197 = load i32, i32* %pic_pix_y.addr, align 4
  %198 = load i32, i32* %blocksize_x, align 4
  %199 = load i32, i32* %blocksize_y, align 4
  %200 = load i32, i32* %cand_mv_x, align 4
  %201 = load i32, i32* %cand_mv_y, align 4
  %202 = load %struct.storable_picture*, %struct.storable_picture** %ref_picture, align 8
  %203 = load i16**, i16*** %orig_pic.addr, align 8
  %204 = load i32, i32* %mv_cost, align 4
  %205 = load i32, i32* %min_mcost.addr, align 4
  %206 = load i32, i32* %useABT.addr, align 4
  %call191 = call i32 @AddUpSADQuarter(i32 %196, i32 %197, i32 %198, i32 %199, i32 %200, i32 %201, %struct.storable_picture* %202, i16** %203, i32 %204, i32 %205, i32 %206)
  store i32 %call191, i32* %mcost, align 4
  %207 = load i8**, i8*** @SearchState, align 8
  %208 = load i32, i32* %cand_mv_y, align 4
  %209 = load i16*, i16** %mv_y.addr, align 8
  %210 = load i16, i16* %209, align 2
  %conv192 = sext i16 %210 to i32
  %sub193 = sub nsw i32 %208, %conv192
  %211 = load i32, i32* %search_range_dynamic, align 4
  %add194 = add nsw i32 %sub193, %211
  %idxprom195 = sext i32 %add194 to i64
  %arrayidx196 = getelementptr inbounds i8*, i8** %207, i64 %idxprom195
  %212 = load i8*, i8** %arrayidx196, align 8
  %213 = load i32, i32* %cand_mv_x, align 4
  %214 = load i16*, i16** %mv_x.addr, align 8
  %215 = load i16, i16* %214, align 2
  %conv197 = sext i16 %215 to i32
  %sub198 = sub nsw i32 %213, %conv197
  %216 = load i32, i32* %search_range_dynamic, align 4
  %add199 = add nsw i32 %sub198, %216
  %idxprom200 = sext i32 %add199 to i64
  %arrayidx201 = getelementptr inbounds i8, i8* %212, i64 %idxprom200
  store i8 1, i8* %arrayidx201, align 1
  %217 = load i32, i32* %mcost, align 4
  %218 = load i32, i32* %min_mcost.addr, align 4
  %cmp202 = icmp slt i32 %217, %218
  br i1 %cmp202, label %if.then204, label %if.end205

if.then204:                                       ; preds = %if.then177
  %219 = load i32, i32* %mcost, align 4
  store i32 %219, i32* %min_mcost.addr, align 4
  %220 = load i32, i32* %cand_mv_x, align 4
  store i32 %220, i32* %currmv_x, align 4
  %221 = load i32, i32* %cand_mv_y, align 4
  store i32 %221, i32* %currmv_y, align 4
  store i32 0, i32* %abort_search, align 4
  br label %if.end205

if.end205:                                        ; preds = %if.then204, %if.then177
  br label %if.end206

if.end206:                                        ; preds = %if.end205, %if.then165
  br label %if.end207

if.end207:                                        ; preds = %if.end206, %land.lhs.true159, %for.body147
  br label %for.inc

for.inc:                                          ; preds = %if.end207
  %222 = load i32, i32* %m, align 4
  %inc = add nsw i32 %222, 1
  store i32 %inc, i32* %m, align 4
  br label %for.cond144

for.end:                                          ; preds = %for.cond144
  %223 = load i32, i32* %currmv_x, align 4
  store i32 %223, i32* %iXMinNow, align 4
  %224 = load i32, i32* %currmv_y, align 4
  store i32 %224, i32* %iYMinNow, align 4
  %225 = load i32, i32* %abort_search, align 4
  %tobool208 = icmp ne i32 %225, 0
  br i1 %tobool208, label %if.then209, label %if.end210

if.then209:                                       ; preds = %for.end
  br label %for.end213

if.end210:                                        ; preds = %for.end
  br label %for.inc211

for.inc211:                                       ; preds = %if.end210
  %226 = load i32, i32* %i, align 4
  %inc212 = add nsw i32 %226, 1
  store i32 %inc212, i32* %i, align 4
  br label %for.cond

for.end213:                                       ; preds = %if.then209, %for.cond
  %227 = load i32, i32* %currmv_x, align 4
  %conv214 = trunc i32 %227 to i16
  %228 = load i16*, i16** %mv_x.addr, align 8
  store i16 %conv214, i16* %228, align 2
  %229 = load i32, i32* %currmv_y, align 4
  %conv215 = trunc i32 %229 to i16
  %230 = load i16*, i16** %mv_y.addr, align 8
  store i16 %conv215, i16* %230, align 2
  %231 = load i32, i32* %min_mcost.addr, align 4
  %232 = load i32, i32* %canary
  %233 = icmp eq i32 %232, 1525543839
  br i1 %233, label %234, label %func_exit

234:                                              ; preds = %for.end213, %func_exit
  ret i32 %231

func_exit:                                        ; preds = %for.end213
  call void @detect_breach()
  br label %234
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @FastIntegerPelBlockMotionSearch.61(i16** %orig_pic, i16 signext %ref, i32 %list, i32 %pic_pix_x, i32 %pic_pix_y, i32 %blocktype, i16 signext %pred_mv_x, i16 signext %pred_mv_y, i16* %mv_x, i16* %mv_y, i32 %search_range, i32 %min_mcost, double %lambda) #0 {
entry:
  %search_range.addr = alloca i32, align 4
  %canary = alloca i32
  store i32 319419337, i32* %canary
  %list_offset = alloca i32, align 4
  %best_x = alloca i32, align 4
  %min_mcost.addr = alloca i32, align 4
  %ref_pic = alloca i16*, align 8
  %iYMinNow = alloca i32, align 4
  %betaSec = alloca float, align 4
  %N_Bframe = alloca i32, align 4
  %cand_y = alloca i32, align 4
  %blocktype.addr = alloca i32, align 4
  %search_step = alloca i32, align 4
  %pic_pix_y.addr = alloca i32, align 4
  %get_ref_line = alloca i16* (i32, i16*, i32, i32, i32, i32)*, align 8
  %mv_x.addr = alloca i16*, align 8
  %m = alloca i32, align 4
  %iSADLayer = alloca i32, align 4
  %mv_y.addr = alloca i16*, align 8
  %lambda.addr = alloca double, align 8
  %i = alloca i32, align 4
  %lambda_factor = alloca i32, align 4
  %pred_mv_y.addr = alloca i16, align 2
  %best_y = alloca i32, align 4
  %pred_x = alloca i32, align 4
  %cand_x = alloca i32, align 4
  %iAbort = alloca i32, align 4
  %ref.addr = alloca i16, align 2
  %pred_mv_x.addr = alloca i16, align 2
  %iXMinNow = alloca i32, align 4
  %pic_pix_x.addr = alloca i32, align 4
  %mcost = alloca i32, align 4
  %betaThird = alloca float, align 4
  %center_x = alloca i32, align 4
  %orig_pic.addr = alloca i16**, align 8
  %pos = alloca i32, align 4
  %pred_y = alloca i32, align 4
  %height = alloca i32, align 4
  %mvshift = alloca i32, align 4
  %center_y = alloca i32, align 4
  %list.addr = alloca i32, align 4
  %blocksize_x4 = alloca i32, align 4
  %blocksize_x = alloca i32, align 4
  %blocksize_y = alloca i32, align 4
  store i16** %orig_pic, i16*** %orig_pic.addr, align 8
  store i16 %ref, i16* %ref.addr, align 2
  store i32 %list, i32* %list.addr, align 4
  store i32 %pic_pix_x, i32* %pic_pix_x.addr, align 4
  store i32 %pic_pix_y, i32* %pic_pix_y.addr, align 4
  store i32 %blocktype, i32* %blocktype.addr, align 4
  store i16 %pred_mv_x, i16* %pred_mv_x.addr, align 2
  store i16 %pred_mv_y, i16* %pred_mv_y.addr, align 2
  store i16* %mv_x, i16** %mv_x.addr, align 8
  store i16* %mv_y, i16** %mv_y.addr, align 8
  store i32 %search_range, i32* %search_range.addr, align 4
  store i32 %min_mcost, i32* %min_mcost.addr, align 4
  store double %lambda, double* %lambda.addr, align 8
  %0 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %MbaffFrameFlag = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %0, i32 0, i32 90
  %1 = load i32, i32* %MbaffFrameFlag, align 8
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %mb_data = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %2, i32 0, i32 51
  %3 = load %struct.macroblock*, %struct.macroblock** %mb_data, align 8
  %4 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %current_mb_nr = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %4, i32 0, i32 3
  %5 = load i32, i32* %current_mb_nr, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 %idxprom
  %mb_field = getelementptr inbounds %struct.macroblock, %struct.macroblock* %arrayidx, i32 0, i32 22
  %6 = load i32, i32* %mb_field, align 4
  %tobool1 = icmp ne i32 %6, 0
  br i1 %tobool1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %7 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %current_mb_nr2 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %7, i32 0, i32 3
  %8 = load i32, i32* %current_mb_nr2, align 4
  %rem = srem i32 %8, 2
  %tobool3 = icmp ne i32 %rem, 0
  %9 = zext i1 %tobool3 to i64
  %cond = select i1 %tobool3, i32 4, i32 2
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond4 = phi i32 [ %cond, %cond.true ], [ 0, %cond.false ]
  store i32 %cond4, i32* %list_offset, align 4
  %10 = load i32, i32* %list.addr, align 4
  %11 = load i32, i32* %list_offset, align 4
  %add = add nsw i32 %10, %11
  %idxprom5 = sext i32 %add to i64
  %arrayidx6 = getelementptr inbounds [6 x %struct.storable_picture**], [6 x %struct.storable_picture**]* @listX, i64 0, i64 %idxprom5
  %12 = load %struct.storable_picture**, %struct.storable_picture*** %arrayidx6, align 8
  %13 = load i16, i16* %ref.addr, align 2
  %idxprom7 = sext i16 %13 to i64
  %arrayidx8 = getelementptr inbounds %struct.storable_picture*, %struct.storable_picture** %12, i64 %idxprom7
  %14 = load %struct.storable_picture*, %struct.storable_picture** %arrayidx8, align 8
  %imgY_11 = getelementptr inbounds %struct.storable_picture, %struct.storable_picture* %14, i32 0, i32 26
  %15 = load i16*, i16** %imgY_11, align 8
  store i16* %15, i16** %ref_pic, align 8
  %16 = load double, double* %lambda.addr, align 8
  %mul = fmul double 6.553600e+04, %16
  %add9 = fadd double %mul, 5.000000e-01
  %conv = fptosi double %add9 to i32
  store i32 %conv, i32* %lambda_factor, align 4
  store i32 2, i32* %mvshift, align 4
  %17 = load %struct.InputParameters*, %struct.InputParameters** @input, align 8
  %blc_size = getelementptr inbounds %struct.InputParameters, %struct.InputParameters* %17, i32 0, i32 20
  %18 = load i32, i32* %blocktype.addr, align 4
  %idxprom10 = sext i32 %18 to i64
  %arrayidx11 = getelementptr inbounds [8 x [2 x i32]], [8 x [2 x i32]]* %blc_size, i64 0, i64 %idxprom10
  %arrayidx12 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx11, i64 0, i64 1
  %19 = load i32, i32* %arrayidx12, align 4
  store i32 %19, i32* %blocksize_y, align 4
  %20 = load %struct.InputParameters*, %struct.InputParameters** @input, align 8
  %blc_size13 = getelementptr inbounds %struct.InputParameters, %struct.InputParameters* %20, i32 0, i32 20
  %21 = load i32, i32* %blocktype.addr, align 4
  %idxprom14 = sext i32 %21 to i64
  %arrayidx15 = getelementptr inbounds [8 x [2 x i32]], [8 x [2 x i32]]* %blc_size13, i64 0, i64 %idxprom14
  %arrayidx16 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx15, i64 0, i64 0
  %22 = load i32, i32* %arrayidx16, align 8
  store i32 %22, i32* %blocksize_x, align 4
  %23 = load i32, i32* %blocksize_x, align 4
  %shr = ashr i32 %23, 2
  store i32 %shr, i32* %blocksize_x4, align 4
  %24 = load i32, i32* %pic_pix_x.addr, align 4
  %25 = load i32, i32* %mvshift, align 4
  %shl = shl i32 %24, %25
  %26 = load i16, i16* %pred_mv_x.addr, align 2
  %conv17 = sext i16 %26 to i32
  %add18 = add nsw i32 %shl, %conv17
  store i32 %add18, i32* %pred_x, align 4
  %27 = load i32, i32* %pic_pix_y.addr, align 4
  %28 = load i32, i32* %mvshift, align 4
  %shl19 = shl i32 %27, %28
  %29 = load i16, i16* %pred_mv_y.addr, align 2
  %conv20 = sext i16 %29 to i32
  %add21 = add nsw i32 %shl19, %conv20
  store i32 %add21, i32* %pred_y, align 4
  %30 = load i32, i32* %pic_pix_x.addr, align 4
  %31 = load i16*, i16** %mv_x.addr, align 8
  %32 = load i16, i16* %31, align 2
  %conv22 = sext i16 %32 to i32
  %add23 = add nsw i32 %30, %conv22
  store i32 %add23, i32* %center_x, align 4
  %33 = load i32, i32* %pic_pix_y.addr, align 4
  %34 = load i16*, i16** %mv_y.addr, align 8
  %35 = load i16, i16* %34, align 2
  %conv24 = sext i16 %35 to i32
  %add25 = add nsw i32 %33, %conv24
  store i32 %add25, i32* %center_y, align 4
  store i32 0, i32* %best_x, align 4
  store i32 0, i32* %best_y, align 4
  %36 = load %struct.InputParameters*, %struct.InputParameters** @input, align 8
  %successive_Bframe = getelementptr inbounds %struct.InputParameters, %struct.InputParameters* %36, i32 0, i32 34
  %37 = load i32, i32* %successive_Bframe, align 4
  store i32 %37, i32* %N_Bframe, align 4
  %38 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %MbaffFrameFlag26 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %38, i32 0, i32 90
  %39 = load i32, i32* %MbaffFrameFlag26, align 8
  %tobool27 = icmp ne i32 %39, 0
  br i1 %tobool27, label %land.lhs.true28, label %cond.false37

land.lhs.true28:                                  ; preds = %cond.end
  %40 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %mb_data29 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %40, i32 0, i32 51
  %41 = load %struct.macroblock*, %struct.macroblock** %mb_data29, align 8
  %42 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %current_mb_nr30 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %42, i32 0, i32 3
  %43 = load i32, i32* %current_mb_nr30, align 4
  %idxprom31 = sext i32 %43 to i64
  %arrayidx32 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %41, i64 %idxprom31
  %mb_field33 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %arrayidx32, i32 0, i32 22
  %44 = load i32, i32* %mb_field33, align 4
  %tobool34 = icmp ne i32 %44, 0
  br i1 %tobool34, label %cond.true35, label %cond.false37

cond.true35:                                      ; preds = %land.lhs.true28
  %45 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height36 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %45, i32 0, i32 15
  %46 = load i32, i32* %height36, align 4
  %div = sdiv i32 %46, 2
  br label %cond.end39

cond.false37:                                     ; preds = %land.lhs.true28, %cond.end
  %47 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height38 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %47, i32 0, i32 15
  %48 = load i32, i32* %height38, align 4
  br label %cond.end39

cond.end39:                                       ; preds = %cond.false37, %cond.true35
  %cond40 = phi i32 [ %div, %cond.true35 ], [ %48, %cond.false37 ]
  store i32 %cond40, i32* %height, align 4
  %49 = load i32, i32* %center_x, align 4
  %50 = load i32, i32* %search_range.addr, align 4
  %cmp = icmp sgt i32 %49, %50
  br i1 %cmp, label %land.lhs.true42, label %if.else

land.lhs.true42:                                  ; preds = %cond.end39
  %51 = load i32, i32* %center_x, align 4
  %52 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %width = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %52, i32 0, i32 13
  %53 = load i32, i32* %width, align 4
  %sub = sub nsw i32 %53, 1
  %54 = load i32, i32* %search_range.addr, align 4
  %sub43 = sub nsw i32 %sub, %54
  %55 = load i32, i32* %blocksize_x, align 4
  %sub44 = sub nsw i32 %sub43, %55
  %cmp45 = icmp slt i32 %51, %sub44
  br i1 %cmp45, label %land.lhs.true47, label %if.else

land.lhs.true47:                                  ; preds = %land.lhs.true42
  %56 = load i32, i32* %center_y, align 4
  %57 = load i32, i32* %search_range.addr, align 4
  %cmp48 = icmp sgt i32 %56, %57
  br i1 %cmp48, label %land.lhs.true50, label %if.else

land.lhs.true50:                                  ; preds = %land.lhs.true47
  %58 = load i32, i32* %center_y, align 4
  %59 = load i32, i32* %height, align 4
  %sub51 = sub nsw i32 %59, 1
  %60 = load i32, i32* %search_range.addr, align 4
  %sub52 = sub nsw i32 %sub51, %60
  %61 = load i32, i32* %blocksize_y, align 4
  %sub53 = sub nsw i32 %sub52, %61
  %cmp54 = icmp slt i32 %58, %sub53
  br i1 %cmp54, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true50
  store i16* (i32, i16*, i32, i32, i32, i32)* @FastLineX, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  br label %if.end

if.else:                                          ; preds = %land.lhs.true50, %land.lhs.true47, %land.lhs.true42, %cond.end39
  store i16* (i32, i16*, i32, i32, i32, i32)* @UMVLineX, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %62 = load i32**, i32*** @McostState, align 8
  %arrayidx56 = getelementptr inbounds i32*, i32** %62, i64 0
  %63 = load i32*, i32** %arrayidx56, align 8
  %64 = bitcast i32* %63 to i8*
  %65 = load i32, i32* %search_range.addr, align 4
  %mul57 = mul nsw i32 2, %65
  %add58 = add nsw i32 %mul57, 1
  %66 = load i32, i32* %search_range.addr, align 4
  %mul59 = mul nsw i32 2, %66
  %add60 = add nsw i32 %mul59, 1
  %mul61 = mul nsw i32 %add58, %add60
  %mul62 = mul nsw i32 %mul61, 4
  %conv63 = sext i32 %mul62 to i64
  call void @llvm.memset.p0i8.i64(i8* align 4 %64, i8 0, i64 %conv63, i1 false)
  %67 = load i16, i16* %ref.addr, align 2
  %conv64 = sext i16 %67 to i32
  %cmp65 = icmp sgt i32 %conv64, 0
  br i1 %cmp65, label %if.then67, label %if.else89

if.then67:                                        ; preds = %if.end
  %68 = load i32, i32* @pred_SAD_ref, align 4
  %cmp68 = icmp ne i32 %68, 0
  br i1 %cmp68, label %if.then70, label %if.else87

if.then70:                                        ; preds = %if.then67
  %69 = load i32, i32* %blocktype.addr, align 4
  %idxprom71 = sext i32 %69 to i64
  %arrayidx72 = getelementptr inbounds [8 x float], [8 x float]* @Bsize, i64 0, i64 %idxprom71
  %70 = load float, float* %arrayidx72, align 4
  %71 = load i32, i32* @pred_SAD_ref, align 4
  %72 = load i32, i32* @pred_SAD_ref, align 4
  %mul73 = mul nsw i32 %71, %72
  %conv74 = sitofp i32 %mul73 to float
  %div75 = fdiv float %70, %conv74
  %73 = load i32, i32* %blocktype.addr, align 4
  %idxprom76 = sext i32 %73 to i64
  %arrayidx77 = getelementptr inbounds [8 x float], [8 x float]* @AlphaSec, i64 0, i64 %idxprom76
  %74 = load float, float* %arrayidx77, align 4
  %sub78 = fsub float %div75, %74
  store float %sub78, float* %betaSec, align 4
  %75 = load i32, i32* %blocktype.addr, align 4
  %idxprom79 = sext i32 %75 to i64
  %arrayidx80 = getelementptr inbounds [8 x float], [8 x float]* @Bsize, i64 0, i64 %idxprom79
  %76 = load float, float* %arrayidx80, align 4
  %77 = load i32, i32* @pred_SAD_ref, align 4
  %78 = load i32, i32* @pred_SAD_ref, align 4
  %mul81 = mul nsw i32 %77, %78
  %conv82 = sitofp i32 %mul81 to float
  %div83 = fdiv float %76, %conv82
  %79 = load i32, i32* %blocktype.addr, align 4
  %idxprom84 = sext i32 %79 to i64
  %arrayidx85 = getelementptr inbounds [8 x float], [8 x float]* @AlphaThird, i64 0, i64 %idxprom84
  %80 = load float, float* %arrayidx85, align 4
  %sub86 = fsub float %div83, %80
  store float %sub86, float* %betaThird, align 4
  br label %if.end88

if.else87:                                        ; preds = %if.then67
  store float 0.000000e+00, float* %betaSec, align 4
  store float 0.000000e+00, float* %betaThird, align 4
  br label %if.end88

if.end88:                                         ; preds = %if.else87, %if.then70
  br label %if.end137

if.else89:                                        ; preds = %if.end
  %81 = load i32, i32* %blocktype.addr, align 4
  %cmp90 = icmp eq i32 %81, 1
  br i1 %cmp90, label %if.then92, label %if.else114

if.then92:                                        ; preds = %if.else89
  %82 = load i32, i32* @pred_SAD_space, align 4
  %cmp93 = icmp ne i32 %82, 0
  br i1 %cmp93, label %if.then95, label %if.else112

if.then95:                                        ; preds = %if.then92
  %83 = load i32, i32* %blocktype.addr, align 4
  %idxprom96 = sext i32 %83 to i64
  %arrayidx97 = getelementptr inbounds [8 x float], [8 x float]* @Bsize, i64 0, i64 %idxprom96
  %84 = load float, float* %arrayidx97, align 4
  %85 = load i32, i32* @pred_SAD_space, align 4
  %86 = load i32, i32* @pred_SAD_space, align 4
  %mul98 = mul nsw i32 %85, %86
  %conv99 = sitofp i32 %mul98 to float
  %div100 = fdiv float %84, %conv99
  %87 = load i32, i32* %blocktype.addr, align 4
  %idxprom101 = sext i32 %87 to i64
  %arrayidx102 = getelementptr inbounds [8 x float], [8 x float]* @AlphaSec, i64 0, i64 %idxprom101
  %88 = load float, float* %arrayidx102, align 4
  %sub103 = fsub float %div100, %88
  store float %sub103, float* %betaSec, align 4
  %89 = load i32, i32* %blocktype.addr, align 4
  %idxprom104 = sext i32 %89 to i64
  %arrayidx105 = getelementptr inbounds [8 x float], [8 x float]* @Bsize, i64 0, i64 %idxprom104
  %90 = load float, float* %arrayidx105, align 4
  %91 = load i32, i32* @pred_SAD_space, align 4
  %92 = load i32, i32* @pred_SAD_space, align 4
  %mul106 = mul nsw i32 %91, %92
  %conv107 = sitofp i32 %mul106 to float
  %div108 = fdiv float %90, %conv107
  %93 = load i32, i32* %blocktype.addr, align 4
  %idxprom109 = sext i32 %93 to i64
  %arrayidx110 = getelementptr inbounds [8 x float], [8 x float]* @AlphaThird, i64 0, i64 %idxprom109
  %94 = load float, float* %arrayidx110, align 4
  %sub111 = fsub float %div108, %94
  store float %sub111, float* %betaThird, align 4
  br label %if.end113

if.else112:                                       ; preds = %if.then92
  store float 0.000000e+00, float* %betaSec, align 4
  store float 0.000000e+00, float* %betaThird, align 4
  br label %if.end113

if.end113:                                        ; preds = %if.else112, %if.then95
  br label %if.end136

if.else114:                                       ; preds = %if.else89
  %95 = load i32, i32* @pred_SAD_uplayer, align 4
  %cmp115 = icmp ne i32 %95, 0
  br i1 %cmp115, label %if.then117, label %if.else134

if.then117:                                       ; preds = %if.else114
  %96 = load i32, i32* %blocktype.addr, align 4
  %idxprom118 = sext i32 %96 to i64
  %arrayidx119 = getelementptr inbounds [8 x float], [8 x float]* @Bsize, i64 0, i64 %idxprom118
  %97 = load float, float* %arrayidx119, align 4
  %98 = load i32, i32* @pred_SAD_uplayer, align 4
  %99 = load i32, i32* @pred_SAD_uplayer, align 4
  %mul120 = mul nsw i32 %98, %99
  %conv121 = sitofp i32 %mul120 to float
  %div122 = fdiv float %97, %conv121
  %100 = load i32, i32* %blocktype.addr, align 4
  %idxprom123 = sext i32 %100 to i64
  %arrayidx124 = getelementptr inbounds [8 x float], [8 x float]* @AlphaSec, i64 0, i64 %idxprom123
  %101 = load float, float* %arrayidx124, align 4
  %sub125 = fsub float %div122, %101
  store float %sub125, float* %betaSec, align 4
  %102 = load i32, i32* %blocktype.addr, align 4
  %idxprom126 = sext i32 %102 to i64
  %arrayidx127 = getelementptr inbounds [8 x float], [8 x float]* @Bsize, i64 0, i64 %idxprom126
  %103 = load float, float* %arrayidx127, align 4
  %104 = load i32, i32* @pred_SAD_uplayer, align 4
  %105 = load i32, i32* @pred_SAD_uplayer, align 4
  %mul128 = mul nsw i32 %104, %105
  %conv129 = sitofp i32 %mul128 to float
  %div130 = fdiv float %103, %conv129
  %106 = load i32, i32* %blocktype.addr, align 4
  %idxprom131 = sext i32 %106 to i64
  %arrayidx132 = getelementptr inbounds [8 x float], [8 x float]* @AlphaThird, i64 0, i64 %idxprom131
  %107 = load float, float* %arrayidx132, align 4
  %sub133 = fsub float %div130, %107
  store float %sub133, float* %betaThird, align 4
  br label %if.end135

if.else134:                                       ; preds = %if.else114
  store float 0.000000e+00, float* %betaSec, align 4
  store float 0.000000e+00, float* %betaThird, align 4
  br label %if.end135

if.end135:                                        ; preds = %if.else134, %if.then117
  br label %if.end136

if.end136:                                        ; preds = %if.end135, %if.end113
  br label %if.end137

if.end137:                                        ; preds = %if.end136, %if.end88
  %108 = load i32, i32* %center_x, align 4
  store i32 %108, i32* %cand_x, align 4
  %109 = load i32, i32* %center_y, align 4
  store i32 %109, i32* %cand_y, align 4
  %110 = load i32, i32* %lambda_factor, align 4
  %111 = load i32*, i32** @mvbits, align 8
  %112 = load i32, i32* %cand_x, align 4
  %113 = load i32, i32* %mvshift, align 4
  %shl138 = shl i32 %112, %113
  %114 = load i32, i32* %pred_x, align 4
  %sub139 = sub nsw i32 %shl138, %114
  %idxprom140 = sext i32 %sub139 to i64
  %arrayidx141 = getelementptr inbounds i32, i32* %111, i64 %idxprom140
  %115 = load i32, i32* %arrayidx141, align 4
  %116 = load i32*, i32** @mvbits, align 8
  %117 = load i32, i32* %cand_y, align 4
  %118 = load i32, i32* %mvshift, align 4
  %shl142 = shl i32 %117, %118
  %119 = load i32, i32* %pred_y, align 4
  %sub143 = sub nsw i32 %shl142, %119
  %idxprom144 = sext i32 %sub143 to i64
  %arrayidx145 = getelementptr inbounds i32, i32* %116, i64 %idxprom144
  %120 = load i32, i32* %arrayidx145, align 4
  %add146 = add nsw i32 %115, %120
  %mul147 = mul nsw i32 %110, %add146
  %shr148 = ashr i32 %mul147, 16
  store i32 %shr148, i32* %mcost, align 4
  %121 = load i16*, i16** %ref_pic, align 8
  %122 = load i16**, i16*** %orig_pic.addr, align 8
  %123 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %124 = load i32, i32* %blocksize_y, align 4
  %125 = load i32, i32* %blocksize_x, align 4
  %126 = load i32, i32* %blocksize_x4, align 4
  %127 = load i32, i32* %mcost, align 4
  %128 = load i32, i32* %min_mcost.addr, align 4
  %129 = load i32, i32* %cand_x, align 4
  %130 = load i32, i32* %cand_y, align 4
  %call = call i32 @PartCalMad(i16* %121, i16** %122, i16* (i32, i16*, i32, i32, i32, i32)* %123, i32 %124, i32 %125, i32 %126, i32 %127, i32 %128, i32 %129, i32 %130)
  store i32 %call, i32* %mcost, align 4
  %131 = load i32, i32* %mcost, align 4
  %132 = load i32**, i32*** @McostState, align 8
  %133 = load i32, i32* %search_range.addr, align 4
  %idxprom149 = sext i32 %133 to i64
  %arrayidx150 = getelementptr inbounds i32*, i32** %132, i64 %idxprom149
  %134 = load i32*, i32** %arrayidx150, align 8
  %135 = load i32, i32* %search_range.addr, align 4
  %idxprom151 = sext i32 %135 to i64
  %arrayidx152 = getelementptr inbounds i32, i32* %134, i64 %idxprom151
  store i32 %131, i32* %arrayidx152, align 4
  %136 = load i32, i32* %mcost, align 4
  %137 = load i32, i32* %min_mcost.addr, align 4
  %cmp153 = icmp slt i32 %136, %137
  br i1 %cmp153, label %if.then155, label %if.end156

if.then155:                                       ; preds = %if.end137
  %138 = load i32, i32* %mcost, align 4
  store i32 %138, i32* %min_mcost.addr, align 4
  %139 = load i32, i32* %cand_x, align 4
  store i32 %139, i32* %best_x, align 4
  %140 = load i32, i32* %cand_y, align 4
  store i32 %140, i32* %best_y, align 4
  br label %if.end156

if.end156:                                        ; preds = %if.then155, %if.end137
  %141 = load i32, i32* %best_x, align 4
  store i32 %141, i32* %iXMinNow, align 4
  %142 = load i32, i32* %best_y, align 4
  store i32 %142, i32* %iYMinNow, align 4
  store i32 0, i32* %m, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end156
  %143 = load i32, i32* %m, align 4
  %cmp157 = icmp slt i32 %143, 4
  br i1 %cmp157, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %144 = load i32, i32* %iXMinNow, align 4
  %145 = load i32, i32* %m, align 4
  %idxprom159 = sext i32 %145 to i64
  %arrayidx160 = getelementptr inbounds [4 x i32], [4 x i32]* @FastIntegerPelBlockMotionSearch.Diamond_x, i64 0, i64 %idxprom159
  %146 = load i32, i32* %arrayidx160, align 4
  %add161 = add nsw i32 %144, %146
  store i32 %add161, i32* %cand_x, align 4
  %147 = load i32, i32* %iYMinNow, align 4
  %148 = load i32, i32* %m, align 4
  %idxprom162 = sext i32 %148 to i64
  %arrayidx163 = getelementptr inbounds [4 x i32], [4 x i32]* @FastIntegerPelBlockMotionSearch.Diamond_y, i64 0, i64 %idxprom162
  %149 = load i32, i32* %arrayidx163, align 4
  %add164 = add nsw i32 %147, %149
  store i32 %add164, i32* %cand_y, align 4
  %150 = load i32, i32* %cand_x, align 4
  %151 = load i32, i32* %center_x, align 4
  %sub165 = sub nsw i32 %150, %151
  %call166 = call i32 @abs(i32 %sub165) #6
  %152 = load i32, i32* %search_range.addr, align 4
  %cmp167 = icmp sle i32 %call166, %152
  br i1 %cmp167, label %land.lhs.true169, label %if.end210

land.lhs.true169:                                 ; preds = %for.body
  %153 = load i32, i32* %cand_y, align 4
  %154 = load i32, i32* %center_y, align 4
  %sub170 = sub nsw i32 %153, %154
  %call171 = call i32 @abs(i32 %sub170) #6
  %155 = load i32, i32* %search_range.addr, align 4
  %cmp172 = icmp sle i32 %call171, %155
  br i1 %cmp172, label %if.then174, label %if.end210

if.then174:                                       ; preds = %land.lhs.true169
  %156 = load i32**, i32*** @McostState, align 8
  %157 = load i32, i32* %cand_y, align 4
  %158 = load i32, i32* %center_y, align 4
  %sub175 = sub nsw i32 %157, %158
  %159 = load i32, i32* %search_range.addr, align 4
  %add176 = add nsw i32 %sub175, %159
  %idxprom177 = sext i32 %add176 to i64
  %arrayidx178 = getelementptr inbounds i32*, i32** %156, i64 %idxprom177
  %160 = load i32*, i32** %arrayidx178, align 8
  %161 = load i32, i32* %cand_x, align 4
  %162 = load i32, i32* %center_x, align 4
  %sub179 = sub nsw i32 %161, %162
  %163 = load i32, i32* %search_range.addr, align 4
  %add180 = add nsw i32 %sub179, %163
  %idxprom181 = sext i32 %add180 to i64
  %arrayidx182 = getelementptr inbounds i32, i32* %160, i64 %idxprom181
  %164 = load i32, i32* %arrayidx182, align 4
  %tobool183 = icmp ne i32 %164, 0
  br i1 %tobool183, label %if.end209, label %if.then184

if.then184:                                       ; preds = %if.then174
  %165 = load i32, i32* %lambda_factor, align 4
  %166 = load i32*, i32** @mvbits, align 8
  %167 = load i32, i32* %cand_x, align 4
  %168 = load i32, i32* %mvshift, align 4
  %shl185 = shl i32 %167, %168
  %169 = load i32, i32* %pred_x, align 4
  %sub186 = sub nsw i32 %shl185, %169
  %idxprom187 = sext i32 %sub186 to i64
  %arrayidx188 = getelementptr inbounds i32, i32* %166, i64 %idxprom187
  %170 = load i32, i32* %arrayidx188, align 4
  %171 = load i32*, i32** @mvbits, align 8
  %172 = load i32, i32* %cand_y, align 4
  %173 = load i32, i32* %mvshift, align 4
  %shl189 = shl i32 %172, %173
  %174 = load i32, i32* %pred_y, align 4
  %sub190 = sub nsw i32 %shl189, %174
  %idxprom191 = sext i32 %sub190 to i64
  %arrayidx192 = getelementptr inbounds i32, i32* %171, i64 %idxprom191
  %175 = load i32, i32* %arrayidx192, align 4
  %add193 = add nsw i32 %170, %175
  %mul194 = mul nsw i32 %165, %add193
  %shr195 = ashr i32 %mul194, 16
  store i32 %shr195, i32* %mcost, align 4
  %176 = load i16*, i16** %ref_pic, align 8
  %177 = load i16**, i16*** %orig_pic.addr, align 8
  %178 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %179 = load i32, i32* %blocksize_y, align 4
  %180 = load i32, i32* %blocksize_x, align 4
  %181 = load i32, i32* %blocksize_x4, align 4
  %182 = load i32, i32* %mcost, align 4
  %183 = load i32, i32* %min_mcost.addr, align 4
  %184 = load i32, i32* %cand_x, align 4
  %185 = load i32, i32* %cand_y, align 4
  %call196 = call i32 @PartCalMad(i16* %176, i16** %177, i16* (i32, i16*, i32, i32, i32, i32)* %178, i32 %179, i32 %180, i32 %181, i32 %182, i32 %183, i32 %184, i32 %185)
  store i32 %call196, i32* %mcost, align 4
  %186 = load i32, i32* %mcost, align 4
  %187 = load i32**, i32*** @McostState, align 8
  %188 = load i32, i32* %cand_y, align 4
  %189 = load i32, i32* %center_y, align 4
  %sub197 = sub nsw i32 %188, %189
  %190 = load i32, i32* %search_range.addr, align 4
  %add198 = add nsw i32 %sub197, %190
  %idxprom199 = sext i32 %add198 to i64
  %arrayidx200 = getelementptr inbounds i32*, i32** %187, i64 %idxprom199
  %191 = load i32*, i32** %arrayidx200, align 8
  %192 = load i32, i32* %cand_x, align 4
  %193 = load i32, i32* %center_x, align 4
  %sub201 = sub nsw i32 %192, %193
  %194 = load i32, i32* %search_range.addr, align 4
  %add202 = add nsw i32 %sub201, %194
  %idxprom203 = sext i32 %add202 to i64
  %arrayidx204 = getelementptr inbounds i32, i32* %191, i64 %idxprom203
  store i32 %186, i32* %arrayidx204, align 4
  %195 = load i32, i32* %mcost, align 4
  %196 = load i32, i32* %min_mcost.addr, align 4
  %cmp205 = icmp slt i32 %195, %196
  br i1 %cmp205, label %if.then207, label %if.end208

if.then207:                                       ; preds = %if.then184
  %197 = load i32, i32* %cand_x, align 4
  store i32 %197, i32* %best_x, align 4
  %198 = load i32, i32* %cand_y, align 4
  store i32 %198, i32* %best_y, align 4
  %199 = load i32, i32* %mcost, align 4
  store i32 %199, i32* %min_mcost.addr, align 4
  br label %if.end208

if.end208:                                        ; preds = %if.then207, %if.then184
  br label %if.end209

if.end209:                                        ; preds = %if.end208, %if.then174
  br label %if.end210

if.end210:                                        ; preds = %if.end209, %land.lhs.true169, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end210
  %200 = load i32, i32* %m, align 4
  %inc = add nsw i32 %200, 1
  store i32 %inc, i32* %m, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %201 = load i32, i32* %center_x, align 4
  %202 = load i32, i32* %pic_pix_x.addr, align 4
  %cmp211 = icmp ne i32 %201, %202
  br i1 %cmp211, label %if.then215, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.end
  %203 = load i32, i32* %center_y, align 4
  %204 = load i32, i32* %pic_pix_y.addr, align 4
  %cmp213 = icmp ne i32 %203, %204
  br i1 %cmp213, label %if.then215, label %if.end321

if.then215:                                       ; preds = %lor.lhs.false, %for.end
  %205 = load i32, i32* %pic_pix_x.addr, align 4
  store i32 %205, i32* %cand_x, align 4
  %206 = load i32, i32* %pic_pix_y.addr, align 4
  store i32 %206, i32* %cand_y, align 4
  %207 = load i32, i32* %cand_x, align 4
  %208 = load i32, i32* %center_x, align 4
  %sub216 = sub nsw i32 %207, %208
  %call217 = call i32 @abs(i32 %sub216) #6
  %209 = load i32, i32* %search_range.addr, align 4
  %cmp218 = icmp sle i32 %call217, %209
  br i1 %cmp218, label %land.lhs.true220, label %if.end261

land.lhs.true220:                                 ; preds = %if.then215
  %210 = load i32, i32* %cand_y, align 4
  %211 = load i32, i32* %center_y, align 4
  %sub221 = sub nsw i32 %210, %211
  %call222 = call i32 @abs(i32 %sub221) #6
  %212 = load i32, i32* %search_range.addr, align 4
  %cmp223 = icmp sle i32 %call222, %212
  br i1 %cmp223, label %if.then225, label %if.end261

if.then225:                                       ; preds = %land.lhs.true220
  %213 = load i32**, i32*** @McostState, align 8
  %214 = load i32, i32* %cand_y, align 4
  %215 = load i32, i32* %center_y, align 4
  %sub226 = sub nsw i32 %214, %215
  %216 = load i32, i32* %search_range.addr, align 4
  %add227 = add nsw i32 %sub226, %216
  %idxprom228 = sext i32 %add227 to i64
  %arrayidx229 = getelementptr inbounds i32*, i32** %213, i64 %idxprom228
  %217 = load i32*, i32** %arrayidx229, align 8
  %218 = load i32, i32* %cand_x, align 4
  %219 = load i32, i32* %center_x, align 4
  %sub230 = sub nsw i32 %218, %219
  %220 = load i32, i32* %search_range.addr, align 4
  %add231 = add nsw i32 %sub230, %220
  %idxprom232 = sext i32 %add231 to i64
  %arrayidx233 = getelementptr inbounds i32, i32* %217, i64 %idxprom232
  %221 = load i32, i32* %arrayidx233, align 4
  %tobool234 = icmp ne i32 %221, 0
  br i1 %tobool234, label %if.end260, label %if.then235

if.then235:                                       ; preds = %if.then225
  %222 = load i32, i32* %lambda_factor, align 4
  %223 = load i32*, i32** @mvbits, align 8
  %224 = load i32, i32* %cand_x, align 4
  %225 = load i32, i32* %mvshift, align 4
  %shl236 = shl i32 %224, %225
  %226 = load i32, i32* %pred_x, align 4
  %sub237 = sub nsw i32 %shl236, %226
  %idxprom238 = sext i32 %sub237 to i64
  %arrayidx239 = getelementptr inbounds i32, i32* %223, i64 %idxprom238
  %227 = load i32, i32* %arrayidx239, align 4
  %228 = load i32*, i32** @mvbits, align 8
  %229 = load i32, i32* %cand_y, align 4
  %230 = load i32, i32* %mvshift, align 4
  %shl240 = shl i32 %229, %230
  %231 = load i32, i32* %pred_y, align 4
  %sub241 = sub nsw i32 %shl240, %231
  %idxprom242 = sext i32 %sub241 to i64
  %arrayidx243 = getelementptr inbounds i32, i32* %228, i64 %idxprom242
  %232 = load i32, i32* %arrayidx243, align 4
  %add244 = add nsw i32 %227, %232
  %mul245 = mul nsw i32 %222, %add244
  %shr246 = ashr i32 %mul245, 16
  store i32 %shr246, i32* %mcost, align 4
  %233 = load i16*, i16** %ref_pic, align 8
  %234 = load i16**, i16*** %orig_pic.addr, align 8
  %235 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %236 = load i32, i32* %blocksize_y, align 4
  %237 = load i32, i32* %blocksize_x, align 4
  %238 = load i32, i32* %blocksize_x4, align 4
  %239 = load i32, i32* %mcost, align 4
  %240 = load i32, i32* %min_mcost.addr, align 4
  %241 = load i32, i32* %cand_x, align 4
  %242 = load i32, i32* %cand_y, align 4
  %call247 = call i32 @PartCalMad(i16* %233, i16** %234, i16* (i32, i16*, i32, i32, i32, i32)* %235, i32 %236, i32 %237, i32 %238, i32 %239, i32 %240, i32 %241, i32 %242)
  store i32 %call247, i32* %mcost, align 4
  %243 = load i32, i32* %mcost, align 4
  %244 = load i32**, i32*** @McostState, align 8
  %245 = load i32, i32* %cand_y, align 4
  %246 = load i32, i32* %center_y, align 4
  %sub248 = sub nsw i32 %245, %246
  %247 = load i32, i32* %search_range.addr, align 4
  %add249 = add nsw i32 %sub248, %247
  %idxprom250 = sext i32 %add249 to i64
  %arrayidx251 = getelementptr inbounds i32*, i32** %244, i64 %idxprom250
  %248 = load i32*, i32** %arrayidx251, align 8
  %249 = load i32, i32* %cand_x, align 4
  %250 = load i32, i32* %center_x, align 4
  %sub252 = sub nsw i32 %249, %250
  %251 = load i32, i32* %search_range.addr, align 4
  %add253 = add nsw i32 %sub252, %251
  %idxprom254 = sext i32 %add253 to i64
  %arrayidx255 = getelementptr inbounds i32, i32* %248, i64 %idxprom254
  store i32 %243, i32* %arrayidx255, align 4
  %252 = load i32, i32* %mcost, align 4
  %253 = load i32, i32* %min_mcost.addr, align 4
  %cmp256 = icmp slt i32 %252, %253
  br i1 %cmp256, label %if.then258, label %if.end259

if.then258:                                       ; preds = %if.then235
  %254 = load i32, i32* %cand_x, align 4
  store i32 %254, i32* %best_x, align 4
  %255 = load i32, i32* %cand_y, align 4
  store i32 %255, i32* %best_y, align 4
  %256 = load i32, i32* %mcost, align 4
  store i32 %256, i32* %min_mcost.addr, align 4
  br label %if.end259

if.end259:                                        ; preds = %if.then258, %if.then235
  br label %if.end260

if.end260:                                        ; preds = %if.end259, %if.then225
  br label %if.end261

if.end261:                                        ; preds = %if.end260, %land.lhs.true220, %if.then215
  %257 = load i32, i32* %best_x, align 4
  store i32 %257, i32* %iXMinNow, align 4
  %258 = load i32, i32* %best_y, align 4
  store i32 %258, i32* %iYMinNow, align 4
  store i32 0, i32* %m, align 4
  br label %for.cond262

for.cond262:                                      ; preds = %for.inc318, %if.end261
  %259 = load i32, i32* %m, align 4
  %cmp263 = icmp slt i32 %259, 4
  br i1 %cmp263, label %for.body265, label %for.end320

for.body265:                                      ; preds = %for.cond262
  %260 = load i32, i32* %iXMinNow, align 4
  %261 = load i32, i32* %m, align 4
  %idxprom266 = sext i32 %261 to i64
  %arrayidx267 = getelementptr inbounds [4 x i32], [4 x i32]* @FastIntegerPelBlockMotionSearch.Diamond_x, i64 0, i64 %idxprom266
  %262 = load i32, i32* %arrayidx267, align 4
  %add268 = add nsw i32 %260, %262
  store i32 %add268, i32* %cand_x, align 4
  %263 = load i32, i32* %iYMinNow, align 4
  %264 = load i32, i32* %m, align 4
  %idxprom269 = sext i32 %264 to i64
  %arrayidx270 = getelementptr inbounds [4 x i32], [4 x i32]* @FastIntegerPelBlockMotionSearch.Diamond_y, i64 0, i64 %idxprom269
  %265 = load i32, i32* %arrayidx270, align 4
  %add271 = add nsw i32 %263, %265
  store i32 %add271, i32* %cand_y, align 4
  %266 = load i32, i32* %cand_x, align 4
  %267 = load i32, i32* %center_x, align 4
  %sub272 = sub nsw i32 %266, %267
  %call273 = call i32 @abs(i32 %sub272) #6
  %268 = load i32, i32* %search_range.addr, align 4
  %cmp274 = icmp sle i32 %call273, %268
  br i1 %cmp274, label %land.lhs.true276, label %if.end317

land.lhs.true276:                                 ; preds = %for.body265
  %269 = load i32, i32* %cand_y, align 4
  %270 = load i32, i32* %center_y, align 4
  %sub277 = sub nsw i32 %269, %270
  %call278 = call i32 @abs(i32 %sub277) #6
  %271 = load i32, i32* %search_range.addr, align 4
  %cmp279 = icmp sle i32 %call278, %271
  br i1 %cmp279, label %if.then281, label %if.end317

if.then281:                                       ; preds = %land.lhs.true276
  %272 = load i32**, i32*** @McostState, align 8
  %273 = load i32, i32* %cand_y, align 4
  %274 = load i32, i32* %center_y, align 4
  %sub282 = sub nsw i32 %273, %274
  %275 = load i32, i32* %search_range.addr, align 4
  %add283 = add nsw i32 %sub282, %275
  %idxprom284 = sext i32 %add283 to i64
  %arrayidx285 = getelementptr inbounds i32*, i32** %272, i64 %idxprom284
  %276 = load i32*, i32** %arrayidx285, align 8
  %277 = load i32, i32* %cand_x, align 4
  %278 = load i32, i32* %center_x, align 4
  %sub286 = sub nsw i32 %277, %278
  %279 = load i32, i32* %search_range.addr, align 4
  %add287 = add nsw i32 %sub286, %279
  %idxprom288 = sext i32 %add287 to i64
  %arrayidx289 = getelementptr inbounds i32, i32* %276, i64 %idxprom288
  %280 = load i32, i32* %arrayidx289, align 4
  %tobool290 = icmp ne i32 %280, 0
  br i1 %tobool290, label %if.end316, label %if.then291

if.then291:                                       ; preds = %if.then281
  %281 = load i32, i32* %lambda_factor, align 4
  %282 = load i32*, i32** @mvbits, align 8
  %283 = load i32, i32* %cand_x, align 4
  %284 = load i32, i32* %mvshift, align 4
  %shl292 = shl i32 %283, %284
  %285 = load i32, i32* %pred_x, align 4
  %sub293 = sub nsw i32 %shl292, %285
  %idxprom294 = sext i32 %sub293 to i64
  %arrayidx295 = getelementptr inbounds i32, i32* %282, i64 %idxprom294
  %286 = load i32, i32* %arrayidx295, align 4
  %287 = load i32*, i32** @mvbits, align 8
  %288 = load i32, i32* %cand_y, align 4
  %289 = load i32, i32* %mvshift, align 4
  %shl296 = shl i32 %288, %289
  %290 = load i32, i32* %pred_y, align 4
  %sub297 = sub nsw i32 %shl296, %290
  %idxprom298 = sext i32 %sub297 to i64
  %arrayidx299 = getelementptr inbounds i32, i32* %287, i64 %idxprom298
  %291 = load i32, i32* %arrayidx299, align 4
  %add300 = add nsw i32 %286, %291
  %mul301 = mul nsw i32 %281, %add300
  %shr302 = ashr i32 %mul301, 16
  store i32 %shr302, i32* %mcost, align 4
  %292 = load i16*, i16** %ref_pic, align 8
  %293 = load i16**, i16*** %orig_pic.addr, align 8
  %294 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %295 = load i32, i32* %blocksize_y, align 4
  %296 = load i32, i32* %blocksize_x, align 4
  %297 = load i32, i32* %blocksize_x4, align 4
  %298 = load i32, i32* %mcost, align 4
  %299 = load i32, i32* %min_mcost.addr, align 4
  %300 = load i32, i32* %cand_x, align 4
  %301 = load i32, i32* %cand_y, align 4
  %call303 = call i32 @PartCalMad(i16* %292, i16** %293, i16* (i32, i16*, i32, i32, i32, i32)* %294, i32 %295, i32 %296, i32 %297, i32 %298, i32 %299, i32 %300, i32 %301)
  store i32 %call303, i32* %mcost, align 4
  %302 = load i32, i32* %mcost, align 4
  %303 = load i32**, i32*** @McostState, align 8
  %304 = load i32, i32* %cand_y, align 4
  %305 = load i32, i32* %center_y, align 4
  %sub304 = sub nsw i32 %304, %305
  %306 = load i32, i32* %search_range.addr, align 4
  %add305 = add nsw i32 %sub304, %306
  %idxprom306 = sext i32 %add305 to i64
  %arrayidx307 = getelementptr inbounds i32*, i32** %303, i64 %idxprom306
  %307 = load i32*, i32** %arrayidx307, align 8
  %308 = load i32, i32* %cand_x, align 4
  %309 = load i32, i32* %center_x, align 4
  %sub308 = sub nsw i32 %308, %309
  %310 = load i32, i32* %search_range.addr, align 4
  %add309 = add nsw i32 %sub308, %310
  %idxprom310 = sext i32 %add309 to i64
  %arrayidx311 = getelementptr inbounds i32, i32* %307, i64 %idxprom310
  store i32 %302, i32* %arrayidx311, align 4
  %311 = load i32, i32* %mcost, align 4
  %312 = load i32, i32* %min_mcost.addr, align 4
  %cmp312 = icmp slt i32 %311, %312
  br i1 %cmp312, label %if.then314, label %if.end315

if.then314:                                       ; preds = %if.then291
  %313 = load i32, i32* %cand_x, align 4
  store i32 %313, i32* %best_x, align 4
  %314 = load i32, i32* %cand_y, align 4
  store i32 %314, i32* %best_y, align 4
  %315 = load i32, i32* %mcost, align 4
  store i32 %315, i32* %min_mcost.addr, align 4
  br label %if.end315

if.end315:                                        ; preds = %if.then314, %if.then291
  br label %if.end316

if.end316:                                        ; preds = %if.end315, %if.then281
  br label %if.end317

if.end317:                                        ; preds = %if.end316, %land.lhs.true276, %for.body265
  br label %for.inc318

for.inc318:                                       ; preds = %if.end317
  %316 = load i32, i32* %m, align 4
  %inc319 = add nsw i32 %316, 1
  store i32 %inc319, i32* %m, align 4
  br label %for.cond262

for.end320:                                       ; preds = %for.cond262
  br label %if.end321

if.end321:                                        ; preds = %for.end320, %lor.lhs.false
  %317 = load i32, i32* %blocktype.addr, align 4
  %cmp322 = icmp sgt i32 %317, 1
  br i1 %cmp322, label %if.then324, label %if.end392

if.then324:                                       ; preds = %if.end321
  %318 = load i32, i32* %pic_pix_x.addr, align 4
  %319 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @pred_MV_uplayer, i64 0, i64 0), align 4
  %div325 = sdiv i32 %319, 4
  %add326 = add nsw i32 %318, %div325
  store i32 %add326, i32* %cand_x, align 4
  %320 = load i32, i32* %pic_pix_y.addr, align 4
  %321 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @pred_MV_uplayer, i64 0, i64 1), align 4
  %div327 = sdiv i32 %321, 4
  %add328 = add nsw i32 %320, %div327
  store i32 %add328, i32* %cand_y, align 4
  %322 = load i32, i32* %cand_x, align 4
  %323 = load i32, i32* %center_x, align 4
  %sub329 = sub nsw i32 %322, %323
  %call330 = call i32 @abs(i32 %sub329) #6
  %324 = load i32, i32* %search_range.addr, align 4
  %cmp331 = icmp sle i32 %call330, %324
  br i1 %cmp331, label %land.lhs.true333, label %if.end374

land.lhs.true333:                                 ; preds = %if.then324
  %325 = load i32, i32* %cand_y, align 4
  %326 = load i32, i32* %center_y, align 4
  %sub334 = sub nsw i32 %325, %326
  %call335 = call i32 @abs(i32 %sub334) #6
  %327 = load i32, i32* %search_range.addr, align 4
  %cmp336 = icmp sle i32 %call335, %327
  br i1 %cmp336, label %if.then338, label %if.end374

if.then338:                                       ; preds = %land.lhs.true333
  %328 = load i32**, i32*** @McostState, align 8
  %329 = load i32, i32* %cand_y, align 4
  %330 = load i32, i32* %center_y, align 4
  %sub339 = sub nsw i32 %329, %330
  %331 = load i32, i32* %search_range.addr, align 4
  %add340 = add nsw i32 %sub339, %331
  %idxprom341 = sext i32 %add340 to i64
  %arrayidx342 = getelementptr inbounds i32*, i32** %328, i64 %idxprom341
  %332 = load i32*, i32** %arrayidx342, align 8
  %333 = load i32, i32* %cand_x, align 4
  %334 = load i32, i32* %center_x, align 4
  %sub343 = sub nsw i32 %333, %334
  %335 = load i32, i32* %search_range.addr, align 4
  %add344 = add nsw i32 %sub343, %335
  %idxprom345 = sext i32 %add344 to i64
  %arrayidx346 = getelementptr inbounds i32, i32* %332, i64 %idxprom345
  %336 = load i32, i32* %arrayidx346, align 4
  %tobool347 = icmp ne i32 %336, 0
  br i1 %tobool347, label %if.end373, label %if.then348

if.then348:                                       ; preds = %if.then338
  %337 = load i32, i32* %lambda_factor, align 4
  %338 = load i32*, i32** @mvbits, align 8
  %339 = load i32, i32* %cand_x, align 4
  %340 = load i32, i32* %mvshift, align 4
  %shl349 = shl i32 %339, %340
  %341 = load i32, i32* %pred_x, align 4
  %sub350 = sub nsw i32 %shl349, %341
  %idxprom351 = sext i32 %sub350 to i64
  %arrayidx352 = getelementptr inbounds i32, i32* %338, i64 %idxprom351
  %342 = load i32, i32* %arrayidx352, align 4
  %343 = load i32*, i32** @mvbits, align 8
  %344 = load i32, i32* %cand_y, align 4
  %345 = load i32, i32* %mvshift, align 4
  %shl353 = shl i32 %344, %345
  %346 = load i32, i32* %pred_y, align 4
  %sub354 = sub nsw i32 %shl353, %346
  %idxprom355 = sext i32 %sub354 to i64
  %arrayidx356 = getelementptr inbounds i32, i32* %343, i64 %idxprom355
  %347 = load i32, i32* %arrayidx356, align 4
  %add357 = add nsw i32 %342, %347
  %mul358 = mul nsw i32 %337, %add357
  %shr359 = ashr i32 %mul358, 16
  store i32 %shr359, i32* %mcost, align 4
  %348 = load i16*, i16** %ref_pic, align 8
  %349 = load i16**, i16*** %orig_pic.addr, align 8
  %350 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %351 = load i32, i32* %blocksize_y, align 4
  %352 = load i32, i32* %blocksize_x, align 4
  %353 = load i32, i32* %blocksize_x4, align 4
  %354 = load i32, i32* %mcost, align 4
  %355 = load i32, i32* %min_mcost.addr, align 4
  %356 = load i32, i32* %cand_x, align 4
  %357 = load i32, i32* %cand_y, align 4
  %call360 = call i32 @PartCalMad(i16* %348, i16** %349, i16* (i32, i16*, i32, i32, i32, i32)* %350, i32 %351, i32 %352, i32 %353, i32 %354, i32 %355, i32 %356, i32 %357)
  store i32 %call360, i32* %mcost, align 4
  %358 = load i32, i32* %mcost, align 4
  %359 = load i32**, i32*** @McostState, align 8
  %360 = load i32, i32* %cand_y, align 4
  %361 = load i32, i32* %center_y, align 4
  %sub361 = sub nsw i32 %360, %361
  %362 = load i32, i32* %search_range.addr, align 4
  %add362 = add nsw i32 %sub361, %362
  %idxprom363 = sext i32 %add362 to i64
  %arrayidx364 = getelementptr inbounds i32*, i32** %359, i64 %idxprom363
  %363 = load i32*, i32** %arrayidx364, align 8
  %364 = load i32, i32* %cand_x, align 4
  %365 = load i32, i32* %center_x, align 4
  %sub365 = sub nsw i32 %364, %365
  %366 = load i32, i32* %search_range.addr, align 4
  %add366 = add nsw i32 %sub365, %366
  %idxprom367 = sext i32 %add366 to i64
  %arrayidx368 = getelementptr inbounds i32, i32* %363, i64 %idxprom367
  store i32 %358, i32* %arrayidx368, align 4
  %367 = load i32, i32* %mcost, align 4
  %368 = load i32, i32* %min_mcost.addr, align 4
  %cmp369 = icmp slt i32 %367, %368
  br i1 %cmp369, label %if.then371, label %if.end372

if.then371:                                       ; preds = %if.then348
  %369 = load i32, i32* %cand_x, align 4
  store i32 %369, i32* %best_x, align 4
  %370 = load i32, i32* %cand_y, align 4
  store i32 %370, i32* %best_y, align 4
  %371 = load i32, i32* %mcost, align 4
  store i32 %371, i32* %min_mcost.addr, align 4
  br label %if.end372

if.end372:                                        ; preds = %if.then371, %if.then348
  br label %if.end373

if.end373:                                        ; preds = %if.end372, %if.then338
  br label %if.end374

if.end374:                                        ; preds = %if.end373, %land.lhs.true333, %if.then324
  %372 = load i32, i32* %min_mcost.addr, align 4
  %373 = load i32, i32* @pred_SAD_uplayer, align 4
  %sub375 = sub nsw i32 %372, %373
  %conv376 = sitofp i32 %sub375 to float
  %374 = load i32, i32* @pred_SAD_uplayer, align 4
  %conv377 = sitofp i32 %374 to float
  %375 = load float, float* %betaThird, align 4
  %mul378 = fmul float %conv377, %375
  %cmp379 = fcmp olt float %conv376, %mul378
  br i1 %cmp379, label %if.then381, label %if.else382

if.then381:                                       ; preds = %if.end374
  br label %third_step

if.else382:                                       ; preds = %if.end374
  %376 = load i32, i32* %min_mcost.addr, align 4
  %377 = load i32, i32* @pred_SAD_uplayer, align 4
  %sub383 = sub nsw i32 %376, %377
  %conv384 = sitofp i32 %sub383 to float
  %378 = load i32, i32* @pred_SAD_uplayer, align 4
  %conv385 = sitofp i32 %378 to float
  %379 = load float, float* %betaSec, align 4
  %mul386 = fmul float %conv385, %379
  %cmp387 = fcmp olt float %conv384, %mul386
  br i1 %cmp387, label %if.then389, label %if.end390

if.then389:                                       ; preds = %if.else382
  br label %sec_step

if.end390:                                        ; preds = %if.else382
  br label %if.end391

if.end391:                                        ; preds = %if.end390
  br label %if.end392

if.end392:                                        ; preds = %if.end391, %if.end321
  %380 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %number = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %380, i32 0, i32 0
  %381 = load i32, i32* %number, align 8
  %382 = load i16, i16* %ref.addr, align 2
  %conv393 = sext i16 %382 to i32
  %add394 = add nsw i32 1, %conv393
  %cmp395 = icmp sgt i32 %381, %add394
  br i1 %cmp395, label %land.lhs.true397, label %lor.lhs.false401

land.lhs.true397:                                 ; preds = %if.end392
  %383 = load i16, i16* %ref.addr, align 2
  %conv398 = sext i16 %383 to i32
  %cmp399 = icmp ne i32 %conv398, -1
  br i1 %cmp399, label %if.then408, label %lor.lhs.false401

lor.lhs.false401:                                 ; preds = %land.lhs.true397, %if.end392
  %384 = load i32, i32* %list.addr, align 4
  %cmp402 = icmp eq i32 %384, 1
  br i1 %cmp402, label %land.lhs.true404, label %if.end459

land.lhs.true404:                                 ; preds = %lor.lhs.false401
  %385 = load i32, i32* @Bframe_ctr, align 4
  %386 = load i32, i32* %N_Bframe, align 4
  %rem405 = srem i32 %385, %386
  %cmp406 = icmp sgt i32 %rem405, 1
  br i1 %cmp406, label %if.then408, label %if.end459

if.then408:                                       ; preds = %land.lhs.true404, %land.lhs.true397
  %387 = load i32, i32* %pic_pix_x.addr, align 4
  %388 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @pred_MV_time, i64 0, i64 0), align 4
  %div409 = sdiv i32 %388, 4
  %add410 = add nsw i32 %387, %div409
  store i32 %add410, i32* %cand_x, align 4
  %389 = load i32, i32* %pic_pix_y.addr, align 4
  %390 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @pred_MV_time, i64 0, i64 1), align 4
  %div411 = sdiv i32 %390, 4
  %add412 = add nsw i32 %389, %div411
  store i32 %add412, i32* %cand_y, align 4
  %391 = load i32, i32* %cand_x, align 4
  %392 = load i32, i32* %center_x, align 4
  %sub413 = sub nsw i32 %391, %392
  %call414 = call i32 @abs(i32 %sub413) #6
  %393 = load i32, i32* %search_range.addr, align 4
  %cmp415 = icmp sle i32 %call414, %393
  br i1 %cmp415, label %land.lhs.true417, label %if.end458

land.lhs.true417:                                 ; preds = %if.then408
  %394 = load i32, i32* %cand_y, align 4
  %395 = load i32, i32* %center_y, align 4
  %sub418 = sub nsw i32 %394, %395
  %call419 = call i32 @abs(i32 %sub418) #6
  %396 = load i32, i32* %search_range.addr, align 4
  %cmp420 = icmp sle i32 %call419, %396
  br i1 %cmp420, label %if.then422, label %if.end458

if.then422:                                       ; preds = %land.lhs.true417
  %397 = load i32**, i32*** @McostState, align 8
  %398 = load i32, i32* %cand_y, align 4
  %399 = load i32, i32* %center_y, align 4
  %sub423 = sub nsw i32 %398, %399
  %400 = load i32, i32* %search_range.addr, align 4
  %add424 = add nsw i32 %sub423, %400
  %idxprom425 = sext i32 %add424 to i64
  %arrayidx426 = getelementptr inbounds i32*, i32** %397, i64 %idxprom425
  %401 = load i32*, i32** %arrayidx426, align 8
  %402 = load i32, i32* %cand_x, align 4
  %403 = load i32, i32* %center_x, align 4
  %sub427 = sub nsw i32 %402, %403
  %404 = load i32, i32* %search_range.addr, align 4
  %add428 = add nsw i32 %sub427, %404
  %idxprom429 = sext i32 %add428 to i64
  %arrayidx430 = getelementptr inbounds i32, i32* %401, i64 %idxprom429
  %405 = load i32, i32* %arrayidx430, align 4
  %tobool431 = icmp ne i32 %405, 0
  br i1 %tobool431, label %if.end457, label %if.then432

if.then432:                                       ; preds = %if.then422
  %406 = load i32, i32* %lambda_factor, align 4
  %407 = load i32*, i32** @mvbits, align 8
  %408 = load i32, i32* %cand_x, align 4
  %409 = load i32, i32* %mvshift, align 4
  %shl433 = shl i32 %408, %409
  %410 = load i32, i32* %pred_x, align 4
  %sub434 = sub nsw i32 %shl433, %410
  %idxprom435 = sext i32 %sub434 to i64
  %arrayidx436 = getelementptr inbounds i32, i32* %407, i64 %idxprom435
  %411 = load i32, i32* %arrayidx436, align 4
  %412 = load i32*, i32** @mvbits, align 8
  %413 = load i32, i32* %cand_y, align 4
  %414 = load i32, i32* %mvshift, align 4
  %shl437 = shl i32 %413, %414
  %415 = load i32, i32* %pred_y, align 4
  %sub438 = sub nsw i32 %shl437, %415
  %idxprom439 = sext i32 %sub438 to i64
  %arrayidx440 = getelementptr inbounds i32, i32* %412, i64 %idxprom439
  %416 = load i32, i32* %arrayidx440, align 4
  %add441 = add nsw i32 %411, %416
  %mul442 = mul nsw i32 %406, %add441
  %shr443 = ashr i32 %mul442, 16
  store i32 %shr443, i32* %mcost, align 4
  %417 = load i16*, i16** %ref_pic, align 8
  %418 = load i16**, i16*** %orig_pic.addr, align 8
  %419 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %420 = load i32, i32* %blocksize_y, align 4
  %421 = load i32, i32* %blocksize_x, align 4
  %422 = load i32, i32* %blocksize_x4, align 4
  %423 = load i32, i32* %mcost, align 4
  %424 = load i32, i32* %min_mcost.addr, align 4
  %425 = load i32, i32* %cand_x, align 4
  %426 = load i32, i32* %cand_y, align 4
  %call444 = call i32 @PartCalMad(i16* %417, i16** %418, i16* (i32, i16*, i32, i32, i32, i32)* %419, i32 %420, i32 %421, i32 %422, i32 %423, i32 %424, i32 %425, i32 %426)
  store i32 %call444, i32* %mcost, align 4
  %427 = load i32, i32* %mcost, align 4
  %428 = load i32**, i32*** @McostState, align 8
  %429 = load i32, i32* %cand_y, align 4
  %430 = load i32, i32* %center_y, align 4
  %sub445 = sub nsw i32 %429, %430
  %431 = load i32, i32* %search_range.addr, align 4
  %add446 = add nsw i32 %sub445, %431
  %idxprom447 = sext i32 %add446 to i64
  %arrayidx448 = getelementptr inbounds i32*, i32** %428, i64 %idxprom447
  %432 = load i32*, i32** %arrayidx448, align 8
  %433 = load i32, i32* %cand_x, align 4
  %434 = load i32, i32* %center_x, align 4
  %sub449 = sub nsw i32 %433, %434
  %435 = load i32, i32* %search_range.addr, align 4
  %add450 = add nsw i32 %sub449, %435
  %idxprom451 = sext i32 %add450 to i64
  %arrayidx452 = getelementptr inbounds i32, i32* %432, i64 %idxprom451
  store i32 %427, i32* %arrayidx452, align 4
  %436 = load i32, i32* %mcost, align 4
  %437 = load i32, i32* %min_mcost.addr, align 4
  %cmp453 = icmp slt i32 %436, %437
  br i1 %cmp453, label %if.then455, label %if.end456

if.then455:                                       ; preds = %if.then432
  %438 = load i32, i32* %cand_x, align 4
  store i32 %438, i32* %best_x, align 4
  %439 = load i32, i32* %cand_y, align 4
  store i32 %439, i32* %best_y, align 4
  %440 = load i32, i32* %mcost, align 4
  store i32 %440, i32* %min_mcost.addr, align 4
  br label %if.end456

if.end456:                                        ; preds = %if.then455, %if.then432
  br label %if.end457

if.end457:                                        ; preds = %if.end456, %if.then422
  br label %if.end458

if.end458:                                        ; preds = %if.end457, %land.lhs.true417, %if.then408
  br label %if.end459

if.end459:                                        ; preds = %if.end458, %land.lhs.true404, %lor.lhs.false401
  %441 = load %struct.InputParameters*, %struct.InputParameters** @input, align 8
  %PicInterlace = getelementptr inbounds %struct.InputParameters, %struct.InputParameters* %441, i32 0, i32 91
  %442 = load i32, i32* %PicInterlace, align 8
  %cmp460 = icmp eq i32 %442, 1
  br i1 %cmp460, label %if.then462, label %if.else535

if.then462:                                       ; preds = %if.end459
  %443 = load i32, i32* %list.addr, align 4
  %cmp463 = icmp eq i32 %443, 0
  br i1 %cmp463, label %land.lhs.true465, label %lor.lhs.false469

land.lhs.true465:                                 ; preds = %if.then462
  %444 = load i16, i16* %ref.addr, align 2
  %conv466 = sext i16 %444 to i32
  %cmp467 = icmp sgt i32 %conv466, 0
  br i1 %cmp467, label %if.then483, label %lor.lhs.false469

lor.lhs.false469:                                 ; preds = %land.lhs.true465, %if.then462
  %445 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %type = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %445, i32 0, i32 6
  %446 = load i32, i32* %type, align 8
  %cmp470 = icmp eq i32 %446, 1
  br i1 %cmp470, label %land.lhs.true472, label %if.end534

land.lhs.true472:                                 ; preds = %lor.lhs.false469
  %447 = load i32, i32* %list.addr, align 4
  %cmp473 = icmp eq i32 %447, 0
  br i1 %cmp473, label %land.lhs.true475, label %if.end534

land.lhs.true475:                                 ; preds = %land.lhs.true472
  %448 = load i16, i16* %ref.addr, align 2
  %conv476 = sext i16 %448 to i32
  %cmp477 = icmp eq i32 %conv476, 0
  br i1 %cmp477, label %if.then483, label %lor.lhs.false479

lor.lhs.false479:                                 ; preds = %land.lhs.true475
  %449 = load i16, i16* %ref.addr, align 2
  %conv480 = sext i16 %449 to i32
  %cmp481 = icmp eq i32 %conv480, 2
  br i1 %cmp481, label %if.then483, label %if.end534

if.then483:                                       ; preds = %lor.lhs.false479, %land.lhs.true475, %land.lhs.true465
  %450 = load i32, i32* %pic_pix_x.addr, align 4
  %451 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @pred_MV_ref, i64 0, i64 0), align 4
  %div484 = sdiv i32 %451, 4
  %add485 = add nsw i32 %450, %div484
  store i32 %add485, i32* %cand_x, align 4
  %452 = load i32, i32* %pic_pix_y.addr, align 4
  %453 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @pred_MV_ref, i64 0, i64 1), align 4
  %div486 = sdiv i32 %453, 4
  %add487 = add nsw i32 %452, %div486
  store i32 %add487, i32* %cand_y, align 4
  %454 = load i32, i32* %cand_x, align 4
  %455 = load i32, i32* %center_x, align 4
  %sub488 = sub nsw i32 %454, %455
  %call489 = call i32 @abs(i32 %sub488) #6
  %456 = load i32, i32* %search_range.addr, align 4
  %cmp490 = icmp sle i32 %call489, %456
  br i1 %cmp490, label %land.lhs.true492, label %if.end533

land.lhs.true492:                                 ; preds = %if.then483
  %457 = load i32, i32* %cand_y, align 4
  %458 = load i32, i32* %center_y, align 4
  %sub493 = sub nsw i32 %457, %458
  %call494 = call i32 @abs(i32 %sub493) #6
  %459 = load i32, i32* %search_range.addr, align 4
  %cmp495 = icmp sle i32 %call494, %459
  br i1 %cmp495, label %if.then497, label %if.end533

if.then497:                                       ; preds = %land.lhs.true492
  %460 = load i32**, i32*** @McostState, align 8
  %461 = load i32, i32* %cand_y, align 4
  %462 = load i32, i32* %center_y, align 4
  %sub498 = sub nsw i32 %461, %462
  %463 = load i32, i32* %search_range.addr, align 4
  %add499 = add nsw i32 %sub498, %463
  %idxprom500 = sext i32 %add499 to i64
  %arrayidx501 = getelementptr inbounds i32*, i32** %460, i64 %idxprom500
  %464 = load i32*, i32** %arrayidx501, align 8
  %465 = load i32, i32* %cand_x, align 4
  %466 = load i32, i32* %center_x, align 4
  %sub502 = sub nsw i32 %465, %466
  %467 = load i32, i32* %search_range.addr, align 4
  %add503 = add nsw i32 %sub502, %467
  %idxprom504 = sext i32 %add503 to i64
  %arrayidx505 = getelementptr inbounds i32, i32* %464, i64 %idxprom504
  %468 = load i32, i32* %arrayidx505, align 4
  %tobool506 = icmp ne i32 %468, 0
  br i1 %tobool506, label %if.end532, label %if.then507

if.then507:                                       ; preds = %if.then497
  %469 = load i32, i32* %lambda_factor, align 4
  %470 = load i32*, i32** @mvbits, align 8
  %471 = load i32, i32* %cand_x, align 4
  %472 = load i32, i32* %mvshift, align 4
  %shl508 = shl i32 %471, %472
  %473 = load i32, i32* %pred_x, align 4
  %sub509 = sub nsw i32 %shl508, %473
  %idxprom510 = sext i32 %sub509 to i64
  %arrayidx511 = getelementptr inbounds i32, i32* %470, i64 %idxprom510
  %474 = load i32, i32* %arrayidx511, align 4
  %475 = load i32*, i32** @mvbits, align 8
  %476 = load i32, i32* %cand_y, align 4
  %477 = load i32, i32* %mvshift, align 4
  %shl512 = shl i32 %476, %477
  %478 = load i32, i32* %pred_y, align 4
  %sub513 = sub nsw i32 %shl512, %478
  %idxprom514 = sext i32 %sub513 to i64
  %arrayidx515 = getelementptr inbounds i32, i32* %475, i64 %idxprom514
  %479 = load i32, i32* %arrayidx515, align 4
  %add516 = add nsw i32 %474, %479
  %mul517 = mul nsw i32 %469, %add516
  %shr518 = ashr i32 %mul517, 16
  store i32 %shr518, i32* %mcost, align 4
  %480 = load i16*, i16** %ref_pic, align 8
  %481 = load i16**, i16*** %orig_pic.addr, align 8
  %482 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %483 = load i32, i32* %blocksize_y, align 4
  %484 = load i32, i32* %blocksize_x, align 4
  %485 = load i32, i32* %blocksize_x4, align 4
  %486 = load i32, i32* %mcost, align 4
  %487 = load i32, i32* %min_mcost.addr, align 4
  %488 = load i32, i32* %cand_x, align 4
  %489 = load i32, i32* %cand_y, align 4
  %call519 = call i32 @PartCalMad(i16* %480, i16** %481, i16* (i32, i16*, i32, i32, i32, i32)* %482, i32 %483, i32 %484, i32 %485, i32 %486, i32 %487, i32 %488, i32 %489)
  store i32 %call519, i32* %mcost, align 4
  %490 = load i32, i32* %mcost, align 4
  %491 = load i32**, i32*** @McostState, align 8
  %492 = load i32, i32* %cand_y, align 4
  %493 = load i32, i32* %center_y, align 4
  %sub520 = sub nsw i32 %492, %493
  %494 = load i32, i32* %search_range.addr, align 4
  %add521 = add nsw i32 %sub520, %494
  %idxprom522 = sext i32 %add521 to i64
  %arrayidx523 = getelementptr inbounds i32*, i32** %491, i64 %idxprom522
  %495 = load i32*, i32** %arrayidx523, align 8
  %496 = load i32, i32* %cand_x, align 4
  %497 = load i32, i32* %center_x, align 4
  %sub524 = sub nsw i32 %496, %497
  %498 = load i32, i32* %search_range.addr, align 4
  %add525 = add nsw i32 %sub524, %498
  %idxprom526 = sext i32 %add525 to i64
  %arrayidx527 = getelementptr inbounds i32, i32* %495, i64 %idxprom526
  store i32 %490, i32* %arrayidx527, align 4
  %499 = load i32, i32* %mcost, align 4
  %500 = load i32, i32* %min_mcost.addr, align 4
  %cmp528 = icmp slt i32 %499, %500
  br i1 %cmp528, label %if.then530, label %if.end531

if.then530:                                       ; preds = %if.then507
  %501 = load i32, i32* %cand_x, align 4
  store i32 %501, i32* %best_x, align 4
  %502 = load i32, i32* %cand_y, align 4
  store i32 %502, i32* %best_y, align 4
  %503 = load i32, i32* %mcost, align 4
  store i32 %503, i32* %min_mcost.addr, align 4
  br label %if.end531

if.end531:                                        ; preds = %if.then530, %if.then507
  br label %if.end532

if.end532:                                        ; preds = %if.end531, %if.then497
  br label %if.end533

if.end533:                                        ; preds = %if.end532, %land.lhs.true492, %if.then483
  br label %if.end534

if.end534:                                        ; preds = %if.end533, %lor.lhs.false479, %land.lhs.true472, %lor.lhs.false469
  br label %if.end605

if.else535:                                       ; preds = %if.end459
  %504 = load i32, i32* %list.addr, align 4
  %cmp536 = icmp eq i32 %504, 0
  br i1 %cmp536, label %land.lhs.true538, label %lor.lhs.false542

land.lhs.true538:                                 ; preds = %if.else535
  %505 = load i16, i16* %ref.addr, align 2
  %conv539 = sext i16 %505 to i32
  %cmp540 = icmp sgt i32 %conv539, 0
  br i1 %cmp540, label %if.then553, label %lor.lhs.false542

lor.lhs.false542:                                 ; preds = %land.lhs.true538, %if.else535
  %506 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %type543 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %506, i32 0, i32 6
  %507 = load i32, i32* %type543, align 8
  %cmp544 = icmp eq i32 %507, 1
  br i1 %cmp544, label %land.lhs.true546, label %if.end604

land.lhs.true546:                                 ; preds = %lor.lhs.false542
  %508 = load i32, i32* %list.addr, align 4
  %cmp547 = icmp eq i32 %508, 0
  br i1 %cmp547, label %land.lhs.true549, label %if.end604

land.lhs.true549:                                 ; preds = %land.lhs.true546
  %509 = load i16, i16* %ref.addr, align 2
  %conv550 = sext i16 %509 to i32
  %cmp551 = icmp eq i32 %conv550, 0
  br i1 %cmp551, label %if.then553, label %if.end604

if.then553:                                       ; preds = %land.lhs.true549, %land.lhs.true538
  %510 = load i32, i32* %pic_pix_x.addr, align 4
  %511 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @pred_MV_ref, i64 0, i64 0), align 4
  %div554 = sdiv i32 %511, 4
  %add555 = add nsw i32 %510, %div554
  store i32 %add555, i32* %cand_x, align 4
  %512 = load i32, i32* %pic_pix_y.addr, align 4
  %513 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @pred_MV_ref, i64 0, i64 1), align 4
  %div556 = sdiv i32 %513, 4
  %add557 = add nsw i32 %512, %div556
  store i32 %add557, i32* %cand_y, align 4
  %514 = load i32, i32* %cand_x, align 4
  %515 = load i32, i32* %center_x, align 4
  %sub558 = sub nsw i32 %514, %515
  %call559 = call i32 @abs(i32 %sub558) #6
  %516 = load i32, i32* %search_range.addr, align 4
  %cmp560 = icmp sle i32 %call559, %516
  br i1 %cmp560, label %land.lhs.true562, label %if.end603

land.lhs.true562:                                 ; preds = %if.then553
  %517 = load i32, i32* %cand_y, align 4
  %518 = load i32, i32* %center_y, align 4
  %sub563 = sub nsw i32 %517, %518
  %call564 = call i32 @abs(i32 %sub563) #6
  %519 = load i32, i32* %search_range.addr, align 4
  %cmp565 = icmp sle i32 %call564, %519
  br i1 %cmp565, label %if.then567, label %if.end603

if.then567:                                       ; preds = %land.lhs.true562
  %520 = load i32**, i32*** @McostState, align 8
  %521 = load i32, i32* %cand_y, align 4
  %522 = load i32, i32* %center_y, align 4
  %sub568 = sub nsw i32 %521, %522
  %523 = load i32, i32* %search_range.addr, align 4
  %add569 = add nsw i32 %sub568, %523
  %idxprom570 = sext i32 %add569 to i64
  %arrayidx571 = getelementptr inbounds i32*, i32** %520, i64 %idxprom570
  %524 = load i32*, i32** %arrayidx571, align 8
  %525 = load i32, i32* %cand_x, align 4
  %526 = load i32, i32* %center_x, align 4
  %sub572 = sub nsw i32 %525, %526
  %527 = load i32, i32* %search_range.addr, align 4
  %add573 = add nsw i32 %sub572, %527
  %idxprom574 = sext i32 %add573 to i64
  %arrayidx575 = getelementptr inbounds i32, i32* %524, i64 %idxprom574
  %528 = load i32, i32* %arrayidx575, align 4
  %tobool576 = icmp ne i32 %528, 0
  br i1 %tobool576, label %if.end602, label %if.then577

if.then577:                                       ; preds = %if.then567
  %529 = load i32, i32* %lambda_factor, align 4
  %530 = load i32*, i32** @mvbits, align 8
  %531 = load i32, i32* %cand_x, align 4
  %532 = load i32, i32* %mvshift, align 4
  %shl578 = shl i32 %531, %532
  %533 = load i32, i32* %pred_x, align 4
  %sub579 = sub nsw i32 %shl578, %533
  %idxprom580 = sext i32 %sub579 to i64
  %arrayidx581 = getelementptr inbounds i32, i32* %530, i64 %idxprom580
  %534 = load i32, i32* %arrayidx581, align 4
  %535 = load i32*, i32** @mvbits, align 8
  %536 = load i32, i32* %cand_y, align 4
  %537 = load i32, i32* %mvshift, align 4
  %shl582 = shl i32 %536, %537
  %538 = load i32, i32* %pred_y, align 4
  %sub583 = sub nsw i32 %shl582, %538
  %idxprom584 = sext i32 %sub583 to i64
  %arrayidx585 = getelementptr inbounds i32, i32* %535, i64 %idxprom584
  %539 = load i32, i32* %arrayidx585, align 4
  %add586 = add nsw i32 %534, %539
  %mul587 = mul nsw i32 %529, %add586
  %shr588 = ashr i32 %mul587, 16
  store i32 %shr588, i32* %mcost, align 4
  %540 = load i16*, i16** %ref_pic, align 8
  %541 = load i16**, i16*** %orig_pic.addr, align 8
  %542 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %543 = load i32, i32* %blocksize_y, align 4
  %544 = load i32, i32* %blocksize_x, align 4
  %545 = load i32, i32* %blocksize_x4, align 4
  %546 = load i32, i32* %mcost, align 4
  %547 = load i32, i32* %min_mcost.addr, align 4
  %548 = load i32, i32* %cand_x, align 4
  %549 = load i32, i32* %cand_y, align 4
  %call589 = call i32 @PartCalMad(i16* %540, i16** %541, i16* (i32, i16*, i32, i32, i32, i32)* %542, i32 %543, i32 %544, i32 %545, i32 %546, i32 %547, i32 %548, i32 %549)
  store i32 %call589, i32* %mcost, align 4
  %550 = load i32, i32* %mcost, align 4
  %551 = load i32**, i32*** @McostState, align 8
  %552 = load i32, i32* %cand_y, align 4
  %553 = load i32, i32* %center_y, align 4
  %sub590 = sub nsw i32 %552, %553
  %554 = load i32, i32* %search_range.addr, align 4
  %add591 = add nsw i32 %sub590, %554
  %idxprom592 = sext i32 %add591 to i64
  %arrayidx593 = getelementptr inbounds i32*, i32** %551, i64 %idxprom592
  %555 = load i32*, i32** %arrayidx593, align 8
  %556 = load i32, i32* %cand_x, align 4
  %557 = load i32, i32* %center_x, align 4
  %sub594 = sub nsw i32 %556, %557
  %558 = load i32, i32* %search_range.addr, align 4
  %add595 = add nsw i32 %sub594, %558
  %idxprom596 = sext i32 %add595 to i64
  %arrayidx597 = getelementptr inbounds i32, i32* %555, i64 %idxprom596
  store i32 %550, i32* %arrayidx597, align 4
  %559 = load i32, i32* %mcost, align 4
  %560 = load i32, i32* %min_mcost.addr, align 4
  %cmp598 = icmp slt i32 %559, %560
  br i1 %cmp598, label %if.then600, label %if.end601

if.then600:                                       ; preds = %if.then577
  %561 = load i32, i32* %cand_x, align 4
  store i32 %561, i32* %best_x, align 4
  %562 = load i32, i32* %cand_y, align 4
  store i32 %562, i32* %best_y, align 4
  %563 = load i32, i32* %mcost, align 4
  store i32 %563, i32* %min_mcost.addr, align 4
  br label %if.end601

if.end601:                                        ; preds = %if.then600, %if.then577
  br label %if.end602

if.end602:                                        ; preds = %if.end601, %if.then567
  br label %if.end603

if.end603:                                        ; preds = %if.end602, %land.lhs.true562, %if.then553
  br label %if.end604

if.end604:                                        ; preds = %if.end603, %land.lhs.true549, %land.lhs.true546, %lor.lhs.false542
  br label %if.end605

if.end605:                                        ; preds = %if.end604, %if.end534
  %564 = load i32, i32* %best_x, align 4
  store i32 %564, i32* %iXMinNow, align 4
  %565 = load i32, i32* %best_y, align 4
  store i32 %565, i32* %iYMinNow, align 4
  store i32 0, i32* %m, align 4
  br label %for.cond606

for.cond606:                                      ; preds = %for.inc662, %if.end605
  %566 = load i32, i32* %m, align 4
  %cmp607 = icmp slt i32 %566, 4
  br i1 %cmp607, label %for.body609, label %for.end664

for.body609:                                      ; preds = %for.cond606
  %567 = load i32, i32* %iXMinNow, align 4
  %568 = load i32, i32* %m, align 4
  %idxprom610 = sext i32 %568 to i64
  %arrayidx611 = getelementptr inbounds [4 x i32], [4 x i32]* @FastIntegerPelBlockMotionSearch.Diamond_x, i64 0, i64 %idxprom610
  %569 = load i32, i32* %arrayidx611, align 4
  %add612 = add nsw i32 %567, %569
  store i32 %add612, i32* %cand_x, align 4
  %570 = load i32, i32* %iYMinNow, align 4
  %571 = load i32, i32* %m, align 4
  %idxprom613 = sext i32 %571 to i64
  %arrayidx614 = getelementptr inbounds [4 x i32], [4 x i32]* @FastIntegerPelBlockMotionSearch.Diamond_y, i64 0, i64 %idxprom613
  %572 = load i32, i32* %arrayidx614, align 4
  %add615 = add nsw i32 %570, %572
  store i32 %add615, i32* %cand_y, align 4
  %573 = load i32, i32* %cand_x, align 4
  %574 = load i32, i32* %center_x, align 4
  %sub616 = sub nsw i32 %573, %574
  %call617 = call i32 @abs(i32 %sub616) #6
  %575 = load i32, i32* %search_range.addr, align 4
  %cmp618 = icmp sle i32 %call617, %575
  br i1 %cmp618, label %land.lhs.true620, label %if.end661

land.lhs.true620:                                 ; preds = %for.body609
  %576 = load i32, i32* %cand_y, align 4
  %577 = load i32, i32* %center_y, align 4
  %sub621 = sub nsw i32 %576, %577
  %call622 = call i32 @abs(i32 %sub621) #6
  %578 = load i32, i32* %search_range.addr, align 4
  %cmp623 = icmp sle i32 %call622, %578
  br i1 %cmp623, label %if.then625, label %if.end661

if.then625:                                       ; preds = %land.lhs.true620
  %579 = load i32**, i32*** @McostState, align 8
  %580 = load i32, i32* %cand_y, align 4
  %581 = load i32, i32* %center_y, align 4
  %sub626 = sub nsw i32 %580, %581
  %582 = load i32, i32* %search_range.addr, align 4
  %add627 = add nsw i32 %sub626, %582
  %idxprom628 = sext i32 %add627 to i64
  %arrayidx629 = getelementptr inbounds i32*, i32** %579, i64 %idxprom628
  %583 = load i32*, i32** %arrayidx629, align 8
  %584 = load i32, i32* %cand_x, align 4
  %585 = load i32, i32* %center_x, align 4
  %sub630 = sub nsw i32 %584, %585
  %586 = load i32, i32* %search_range.addr, align 4
  %add631 = add nsw i32 %sub630, %586
  %idxprom632 = sext i32 %add631 to i64
  %arrayidx633 = getelementptr inbounds i32, i32* %583, i64 %idxprom632
  %587 = load i32, i32* %arrayidx633, align 4
  %tobool634 = icmp ne i32 %587, 0
  br i1 %tobool634, label %if.end660, label %if.then635

if.then635:                                       ; preds = %if.then625
  %588 = load i32, i32* %lambda_factor, align 4
  %589 = load i32*, i32** @mvbits, align 8
  %590 = load i32, i32* %cand_x, align 4
  %591 = load i32, i32* %mvshift, align 4
  %shl636 = shl i32 %590, %591
  %592 = load i32, i32* %pred_x, align 4
  %sub637 = sub nsw i32 %shl636, %592
  %idxprom638 = sext i32 %sub637 to i64
  %arrayidx639 = getelementptr inbounds i32, i32* %589, i64 %idxprom638
  %593 = load i32, i32* %arrayidx639, align 4
  %594 = load i32*, i32** @mvbits, align 8
  %595 = load i32, i32* %cand_y, align 4
  %596 = load i32, i32* %mvshift, align 4
  %shl640 = shl i32 %595, %596
  %597 = load i32, i32* %pred_y, align 4
  %sub641 = sub nsw i32 %shl640, %597
  %idxprom642 = sext i32 %sub641 to i64
  %arrayidx643 = getelementptr inbounds i32, i32* %594, i64 %idxprom642
  %598 = load i32, i32* %arrayidx643, align 4
  %add644 = add nsw i32 %593, %598
  %mul645 = mul nsw i32 %588, %add644
  %shr646 = ashr i32 %mul645, 16
  store i32 %shr646, i32* %mcost, align 4
  %599 = load i16*, i16** %ref_pic, align 8
  %600 = load i16**, i16*** %orig_pic.addr, align 8
  %601 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %602 = load i32, i32* %blocksize_y, align 4
  %603 = load i32, i32* %blocksize_x, align 4
  %604 = load i32, i32* %blocksize_x4, align 4
  %605 = load i32, i32* %mcost, align 4
  %606 = load i32, i32* %min_mcost.addr, align 4
  %607 = load i32, i32* %cand_x, align 4
  %608 = load i32, i32* %cand_y, align 4
  %call647 = call i32 @PartCalMad(i16* %599, i16** %600, i16* (i32, i16*, i32, i32, i32, i32)* %601, i32 %602, i32 %603, i32 %604, i32 %605, i32 %606, i32 %607, i32 %608)
  store i32 %call647, i32* %mcost, align 4
  %609 = load i32, i32* %mcost, align 4
  %610 = load i32**, i32*** @McostState, align 8
  %611 = load i32, i32* %cand_y, align 4
  %612 = load i32, i32* %center_y, align 4
  %sub648 = sub nsw i32 %611, %612
  %613 = load i32, i32* %search_range.addr, align 4
  %add649 = add nsw i32 %sub648, %613
  %idxprom650 = sext i32 %add649 to i64
  %arrayidx651 = getelementptr inbounds i32*, i32** %610, i64 %idxprom650
  %614 = load i32*, i32** %arrayidx651, align 8
  %615 = load i32, i32* %cand_x, align 4
  %616 = load i32, i32* %center_x, align 4
  %sub652 = sub nsw i32 %615, %616
  %617 = load i32, i32* %search_range.addr, align 4
  %add653 = add nsw i32 %sub652, %617
  %idxprom654 = sext i32 %add653 to i64
  %arrayidx655 = getelementptr inbounds i32, i32* %614, i64 %idxprom654
  store i32 %609, i32* %arrayidx655, align 4
  %618 = load i32, i32* %mcost, align 4
  %619 = load i32, i32* %min_mcost.addr, align 4
  %cmp656 = icmp slt i32 %618, %619
  br i1 %cmp656, label %if.then658, label %if.end659

if.then658:                                       ; preds = %if.then635
  %620 = load i32, i32* %cand_x, align 4
  store i32 %620, i32* %best_x, align 4
  %621 = load i32, i32* %cand_y, align 4
  store i32 %621, i32* %best_y, align 4
  %622 = load i32, i32* %mcost, align 4
  store i32 %622, i32* %min_mcost.addr, align 4
  br label %if.end659

if.end659:                                        ; preds = %if.then658, %if.then635
  br label %if.end660

if.end660:                                        ; preds = %if.end659, %if.then625
  br label %if.end661

if.end661:                                        ; preds = %if.end660, %land.lhs.true620, %for.body609
  br label %for.inc662

for.inc662:                                       ; preds = %if.end661
  %623 = load i32, i32* %m, align 4
  %inc663 = add nsw i32 %623, 1
  store i32 %inc663, i32* %m, align 4
  br label %for.cond606

for.end664:                                       ; preds = %for.cond606
  %624 = load i16, i16* %ref.addr, align 2
  %conv665 = sext i16 %624 to i32
  %cmp666 = icmp sgt i32 %conv665, 0
  br i1 %cmp666, label %if.then668, label %if.else686

if.then668:                                       ; preds = %for.end664
  %625 = load i32, i32* %min_mcost.addr, align 4
  %626 = load i32, i32* @pred_SAD_ref, align 4
  %sub669 = sub nsw i32 %625, %626
  %conv670 = sitofp i32 %sub669 to float
  %627 = load i32, i32* @pred_SAD_ref, align 4
  %conv671 = sitofp i32 %627 to float
  %628 = load float, float* %betaThird, align 4
  %mul672 = fmul float %conv671, %628
  %cmp673 = fcmp olt float %conv670, %mul672
  br i1 %cmp673, label %if.then675, label %if.else676

if.then675:                                       ; preds = %if.then668
  br label %third_step

if.else676:                                       ; preds = %if.then668
  %629 = load i32, i32* %min_mcost.addr, align 4
  %630 = load i32, i32* @pred_SAD_ref, align 4
  %sub677 = sub nsw i32 %629, %630
  %conv678 = sitofp i32 %sub677 to float
  %631 = load i32, i32* @pred_SAD_ref, align 4
  %conv679 = sitofp i32 %631 to float
  %632 = load float, float* %betaSec, align 4
  %mul680 = fmul float %conv679, %632
  %cmp681 = fcmp olt float %conv678, %mul680
  br i1 %cmp681, label %if.then683, label %if.end684

if.then683:                                       ; preds = %if.else676
  br label %sec_step

if.end684:                                        ; preds = %if.else676
  br label %if.end685

if.end685:                                        ; preds = %if.end684
  br label %if.end726

if.else686:                                       ; preds = %for.end664
  %633 = load i32, i32* %blocktype.addr, align 4
  %cmp687 = icmp sgt i32 %633, 1
  br i1 %cmp687, label %if.then689, label %if.else707

if.then689:                                       ; preds = %if.else686
  %634 = load i32, i32* %min_mcost.addr, align 4
  %635 = load i32, i32* @pred_SAD_uplayer, align 4
  %sub690 = sub nsw i32 %634, %635
  %conv691 = sitofp i32 %sub690 to float
  %636 = load i32, i32* @pred_SAD_uplayer, align 4
  %conv692 = sitofp i32 %636 to float
  %637 = load float, float* %betaThird, align 4
  %mul693 = fmul float %conv692, %637
  %cmp694 = fcmp olt float %conv691, %mul693
  br i1 %cmp694, label %if.then696, label %if.else697

if.then696:                                       ; preds = %if.then689
  br label %third_step

if.else697:                                       ; preds = %if.then689
  %638 = load i32, i32* %min_mcost.addr, align 4
  %639 = load i32, i32* @pred_SAD_uplayer, align 4
  %sub698 = sub nsw i32 %638, %639
  %conv699 = sitofp i32 %sub698 to float
  %640 = load i32, i32* @pred_SAD_uplayer, align 4
  %conv700 = sitofp i32 %640 to float
  %641 = load float, float* %betaSec, align 4
  %mul701 = fmul float %conv700, %641
  %cmp702 = fcmp olt float %conv699, %mul701
  br i1 %cmp702, label %if.then704, label %if.end705

if.then704:                                       ; preds = %if.else697
  br label %sec_step

if.end705:                                        ; preds = %if.else697
  br label %if.end706

if.end706:                                        ; preds = %if.end705
  br label %if.end725

if.else707:                                       ; preds = %if.else686
  %642 = load i32, i32* %min_mcost.addr, align 4
  %643 = load i32, i32* @pred_SAD_space, align 4
  %sub708 = sub nsw i32 %642, %643
  %conv709 = sitofp i32 %sub708 to float
  %644 = load i32, i32* @pred_SAD_space, align 4
  %conv710 = sitofp i32 %644 to float
  %645 = load float, float* %betaThird, align 4
  %mul711 = fmul float %conv710, %645
  %cmp712 = fcmp olt float %conv709, %mul711
  br i1 %cmp712, label %if.then714, label %if.else715

if.then714:                                       ; preds = %if.else707
  br label %third_step

if.else715:                                       ; preds = %if.else707
  %646 = load i32, i32* %min_mcost.addr, align 4
  %647 = load i32, i32* @pred_SAD_space, align 4
  %sub716 = sub nsw i32 %646, %647
  %conv717 = sitofp i32 %sub716 to float
  %648 = load i32, i32* @pred_SAD_space, align 4
  %conv718 = sitofp i32 %648 to float
  %649 = load float, float* %betaSec, align 4
  %mul719 = fmul float %conv718, %649
  %cmp720 = fcmp olt float %conv717, %mul719
  br i1 %cmp720, label %if.then722, label %if.end723

if.then722:                                       ; preds = %if.else715
  br label %sec_step

if.end723:                                        ; preds = %if.else715
  br label %if.end724

if.end724:                                        ; preds = %if.end723
  br label %if.end725

if.end725:                                        ; preds = %if.end724, %if.end706
  br label %if.end726

if.end726:                                        ; preds = %if.end725, %if.end685
  %650 = load i32, i32* %blocktype.addr, align 4
  %cmp727 = icmp sgt i32 %650, 6
  br i1 %cmp727, label %if.then729, label %if.else730

if.then729:                                       ; preds = %if.end726
  br label %sec_step

if.else730:                                       ; preds = %if.end726
  br label %first_step

first_step:                                       ; preds = %if.else730
  %651 = load i32, i32* %best_x, align 4
  store i32 %651, i32* %iXMinNow, align 4
  %652 = load i32, i32* %best_y, align 4
  store i32 %652, i32* %iYMinNow, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond731

for.cond731:                                      ; preds = %for.inc832, %first_step
  %653 = load i32, i32* %i, align 4
  %654 = load i32, i32* %search_range.addr, align 4
  %div732 = sdiv i32 %654, 2
  %cmp733 = icmp sle i32 %653, %div732
  br i1 %cmp733, label %for.body735, label %for.end834

for.body735:                                      ; preds = %for.cond731
  %655 = load i32, i32* %i, align 4
  %mul736 = mul nsw i32 2, %655
  %sub737 = sub nsw i32 %mul736, 1
  store i32 %sub737, i32* %search_step, align 4
  %656 = load i32, i32* %iXMinNow, align 4
  %657 = load i32, i32* %search_step, align 4
  %add738 = add nsw i32 %656, %657
  store i32 %add738, i32* %cand_x, align 4
  %658 = load i32, i32* %iYMinNow, align 4
  store i32 %658, i32* %cand_y, align 4
  %659 = load i32, i32* %cand_x, align 4
  %660 = load i32, i32* %center_x, align 4
  %sub739 = sub nsw i32 %659, %660
  %call740 = call i32 @abs(i32 %sub739) #6
  %661 = load i32, i32* %search_range.addr, align 4
  %cmp741 = icmp sle i32 %call740, %661
  br i1 %cmp741, label %land.lhs.true743, label %if.end784

land.lhs.true743:                                 ; preds = %for.body735
  %662 = load i32, i32* %cand_y, align 4
  %663 = load i32, i32* %center_y, align 4
  %sub744 = sub nsw i32 %662, %663
  %call745 = call i32 @abs(i32 %sub744) #6
  %664 = load i32, i32* %search_range.addr, align 4
  %cmp746 = icmp sle i32 %call745, %664
  br i1 %cmp746, label %if.then748, label %if.end784

if.then748:                                       ; preds = %land.lhs.true743
  %665 = load i32**, i32*** @McostState, align 8
  %666 = load i32, i32* %cand_y, align 4
  %667 = load i32, i32* %center_y, align 4
  %sub749 = sub nsw i32 %666, %667
  %668 = load i32, i32* %search_range.addr, align 4
  %add750 = add nsw i32 %sub749, %668
  %idxprom751 = sext i32 %add750 to i64
  %arrayidx752 = getelementptr inbounds i32*, i32** %665, i64 %idxprom751
  %669 = load i32*, i32** %arrayidx752, align 8
  %670 = load i32, i32* %cand_x, align 4
  %671 = load i32, i32* %center_x, align 4
  %sub753 = sub nsw i32 %670, %671
  %672 = load i32, i32* %search_range.addr, align 4
  %add754 = add nsw i32 %sub753, %672
  %idxprom755 = sext i32 %add754 to i64
  %arrayidx756 = getelementptr inbounds i32, i32* %669, i64 %idxprom755
  %673 = load i32, i32* %arrayidx756, align 4
  %tobool757 = icmp ne i32 %673, 0
  br i1 %tobool757, label %if.end783, label %if.then758

if.then758:                                       ; preds = %if.then748
  %674 = load i32, i32* %lambda_factor, align 4
  %675 = load i32*, i32** @mvbits, align 8
  %676 = load i32, i32* %cand_x, align 4
  %677 = load i32, i32* %mvshift, align 4
  %shl759 = shl i32 %676, %677
  %678 = load i32, i32* %pred_x, align 4
  %sub760 = sub nsw i32 %shl759, %678
  %idxprom761 = sext i32 %sub760 to i64
  %arrayidx762 = getelementptr inbounds i32, i32* %675, i64 %idxprom761
  %679 = load i32, i32* %arrayidx762, align 4
  %680 = load i32*, i32** @mvbits, align 8
  %681 = load i32, i32* %cand_y, align 4
  %682 = load i32, i32* %mvshift, align 4
  %shl763 = shl i32 %681, %682
  %683 = load i32, i32* %pred_y, align 4
  %sub764 = sub nsw i32 %shl763, %683
  %idxprom765 = sext i32 %sub764 to i64
  %arrayidx766 = getelementptr inbounds i32, i32* %680, i64 %idxprom765
  %684 = load i32, i32* %arrayidx766, align 4
  %add767 = add nsw i32 %679, %684
  %mul768 = mul nsw i32 %674, %add767
  %shr769 = ashr i32 %mul768, 16
  store i32 %shr769, i32* %mcost, align 4
  %685 = load i16*, i16** %ref_pic, align 8
  %686 = load i16**, i16*** %orig_pic.addr, align 8
  %687 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %688 = load i32, i32* %blocksize_y, align 4
  %689 = load i32, i32* %blocksize_x, align 4
  %690 = load i32, i32* %blocksize_x4, align 4
  %691 = load i32, i32* %mcost, align 4
  %692 = load i32, i32* %min_mcost.addr, align 4
  %693 = load i32, i32* %cand_x, align 4
  %694 = load i32, i32* %cand_y, align 4
  %call770 = call i32 @PartCalMad(i16* %685, i16** %686, i16* (i32, i16*, i32, i32, i32, i32)* %687, i32 %688, i32 %689, i32 %690, i32 %691, i32 %692, i32 %693, i32 %694)
  store i32 %call770, i32* %mcost, align 4
  %695 = load i32, i32* %mcost, align 4
  %696 = load i32**, i32*** @McostState, align 8
  %697 = load i32, i32* %cand_y, align 4
  %698 = load i32, i32* %center_y, align 4
  %sub771 = sub nsw i32 %697, %698
  %699 = load i32, i32* %search_range.addr, align 4
  %add772 = add nsw i32 %sub771, %699
  %idxprom773 = sext i32 %add772 to i64
  %arrayidx774 = getelementptr inbounds i32*, i32** %696, i64 %idxprom773
  %700 = load i32*, i32** %arrayidx774, align 8
  %701 = load i32, i32* %cand_x, align 4
  %702 = load i32, i32* %center_x, align 4
  %sub775 = sub nsw i32 %701, %702
  %703 = load i32, i32* %search_range.addr, align 4
  %add776 = add nsw i32 %sub775, %703
  %idxprom777 = sext i32 %add776 to i64
  %arrayidx778 = getelementptr inbounds i32, i32* %700, i64 %idxprom777
  store i32 %695, i32* %arrayidx778, align 4
  %704 = load i32, i32* %mcost, align 4
  %705 = load i32, i32* %min_mcost.addr, align 4
  %cmp779 = icmp slt i32 %704, %705
  br i1 %cmp779, label %if.then781, label %if.end782

if.then781:                                       ; preds = %if.then758
  %706 = load i32, i32* %cand_x, align 4
  store i32 %706, i32* %best_x, align 4
  %707 = load i32, i32* %cand_y, align 4
  store i32 %707, i32* %best_y, align 4
  %708 = load i32, i32* %mcost, align 4
  store i32 %708, i32* %min_mcost.addr, align 4
  br label %if.end782

if.end782:                                        ; preds = %if.then781, %if.then758
  br label %if.end783

if.end783:                                        ; preds = %if.end782, %if.then748
  br label %if.end784

if.end784:                                        ; preds = %if.end783, %land.lhs.true743, %for.body735
  %709 = load i32, i32* %iXMinNow, align 4
  %710 = load i32, i32* %search_step, align 4
  %sub785 = sub nsw i32 %709, %710
  store i32 %sub785, i32* %cand_x, align 4
  %711 = load i32, i32* %iYMinNow, align 4
  store i32 %711, i32* %cand_y, align 4
  %712 = load i32, i32* %cand_x, align 4
  %713 = load i32, i32* %center_x, align 4
  %sub786 = sub nsw i32 %712, %713
  %call787 = call i32 @abs(i32 %sub786) #6
  %714 = load i32, i32* %search_range.addr, align 4
  %cmp788 = icmp sle i32 %call787, %714
  br i1 %cmp788, label %land.lhs.true790, label %if.end831

land.lhs.true790:                                 ; preds = %if.end784
  %715 = load i32, i32* %cand_y, align 4
  %716 = load i32, i32* %center_y, align 4
  %sub791 = sub nsw i32 %715, %716
  %call792 = call i32 @abs(i32 %sub791) #6
  %717 = load i32, i32* %search_range.addr, align 4
  %cmp793 = icmp sle i32 %call792, %717
  br i1 %cmp793, label %if.then795, label %if.end831

if.then795:                                       ; preds = %land.lhs.true790
  %718 = load i32**, i32*** @McostState, align 8
  %719 = load i32, i32* %cand_y, align 4
  %720 = load i32, i32* %center_y, align 4
  %sub796 = sub nsw i32 %719, %720
  %721 = load i32, i32* %search_range.addr, align 4
  %add797 = add nsw i32 %sub796, %721
  %idxprom798 = sext i32 %add797 to i64
  %arrayidx799 = getelementptr inbounds i32*, i32** %718, i64 %idxprom798
  %722 = load i32*, i32** %arrayidx799, align 8
  %723 = load i32, i32* %cand_x, align 4
  %724 = load i32, i32* %center_x, align 4
  %sub800 = sub nsw i32 %723, %724
  %725 = load i32, i32* %search_range.addr, align 4
  %add801 = add nsw i32 %sub800, %725
  %idxprom802 = sext i32 %add801 to i64
  %arrayidx803 = getelementptr inbounds i32, i32* %722, i64 %idxprom802
  %726 = load i32, i32* %arrayidx803, align 4
  %tobool804 = icmp ne i32 %726, 0
  br i1 %tobool804, label %if.end830, label %if.then805

if.then805:                                       ; preds = %if.then795
  %727 = load i32, i32* %lambda_factor, align 4
  %728 = load i32*, i32** @mvbits, align 8
  %729 = load i32, i32* %cand_x, align 4
  %730 = load i32, i32* %mvshift, align 4
  %shl806 = shl i32 %729, %730
  %731 = load i32, i32* %pred_x, align 4
  %sub807 = sub nsw i32 %shl806, %731
  %idxprom808 = sext i32 %sub807 to i64
  %arrayidx809 = getelementptr inbounds i32, i32* %728, i64 %idxprom808
  %732 = load i32, i32* %arrayidx809, align 4
  %733 = load i32*, i32** @mvbits, align 8
  %734 = load i32, i32* %cand_y, align 4
  %735 = load i32, i32* %mvshift, align 4
  %shl810 = shl i32 %734, %735
  %736 = load i32, i32* %pred_y, align 4
  %sub811 = sub nsw i32 %shl810, %736
  %idxprom812 = sext i32 %sub811 to i64
  %arrayidx813 = getelementptr inbounds i32, i32* %733, i64 %idxprom812
  %737 = load i32, i32* %arrayidx813, align 4
  %add814 = add nsw i32 %732, %737
  %mul815 = mul nsw i32 %727, %add814
  %shr816 = ashr i32 %mul815, 16
  store i32 %shr816, i32* %mcost, align 4
  %738 = load i16*, i16** %ref_pic, align 8
  %739 = load i16**, i16*** %orig_pic.addr, align 8
  %740 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %741 = load i32, i32* %blocksize_y, align 4
  %742 = load i32, i32* %blocksize_x, align 4
  %743 = load i32, i32* %blocksize_x4, align 4
  %744 = load i32, i32* %mcost, align 4
  %745 = load i32, i32* %min_mcost.addr, align 4
  %746 = load i32, i32* %cand_x, align 4
  %747 = load i32, i32* %cand_y, align 4
  %call817 = call i32 @PartCalMad(i16* %738, i16** %739, i16* (i32, i16*, i32, i32, i32, i32)* %740, i32 %741, i32 %742, i32 %743, i32 %744, i32 %745, i32 %746, i32 %747)
  store i32 %call817, i32* %mcost, align 4
  %748 = load i32, i32* %mcost, align 4
  %749 = load i32**, i32*** @McostState, align 8
  %750 = load i32, i32* %cand_y, align 4
  %751 = load i32, i32* %center_y, align 4
  %sub818 = sub nsw i32 %750, %751
  %752 = load i32, i32* %search_range.addr, align 4
  %add819 = add nsw i32 %sub818, %752
  %idxprom820 = sext i32 %add819 to i64
  %arrayidx821 = getelementptr inbounds i32*, i32** %749, i64 %idxprom820
  %753 = load i32*, i32** %arrayidx821, align 8
  %754 = load i32, i32* %cand_x, align 4
  %755 = load i32, i32* %center_x, align 4
  %sub822 = sub nsw i32 %754, %755
  %756 = load i32, i32* %search_range.addr, align 4
  %add823 = add nsw i32 %sub822, %756
  %idxprom824 = sext i32 %add823 to i64
  %arrayidx825 = getelementptr inbounds i32, i32* %753, i64 %idxprom824
  store i32 %748, i32* %arrayidx825, align 4
  %757 = load i32, i32* %mcost, align 4
  %758 = load i32, i32* %min_mcost.addr, align 4
  %cmp826 = icmp slt i32 %757, %758
  br i1 %cmp826, label %if.then828, label %if.end829

if.then828:                                       ; preds = %if.then805
  %759 = load i32, i32* %cand_x, align 4
  store i32 %759, i32* %best_x, align 4
  %760 = load i32, i32* %cand_y, align 4
  store i32 %760, i32* %best_y, align 4
  %761 = load i32, i32* %mcost, align 4
  store i32 %761, i32* %min_mcost.addr, align 4
  br label %if.end829

if.end829:                                        ; preds = %if.then828, %if.then805
  br label %if.end830

if.end830:                                        ; preds = %if.end829, %if.then795
  br label %if.end831

if.end831:                                        ; preds = %if.end830, %land.lhs.true790, %if.end784
  br label %for.inc832

for.inc832:                                       ; preds = %if.end831
  %762 = load i32, i32* %i, align 4
  %inc833 = add nsw i32 %762, 1
  store i32 %inc833, i32* %i, align 4
  br label %for.cond731

for.end834:                                       ; preds = %for.cond731
  store i32 1, i32* %i, align 4
  br label %for.cond835

for.cond835:                                      ; preds = %for.inc936, %for.end834
  %763 = load i32, i32* %i, align 4
  %764 = load i32, i32* %search_range.addr, align 4
  %div836 = sdiv i32 %764, 4
  %cmp837 = icmp sle i32 %763, %div836
  br i1 %cmp837, label %for.body839, label %for.end938

for.body839:                                      ; preds = %for.cond835
  %765 = load i32, i32* %i, align 4
  %mul840 = mul nsw i32 2, %765
  %sub841 = sub nsw i32 %mul840, 1
  store i32 %sub841, i32* %search_step, align 4
  %766 = load i32, i32* %iXMinNow, align 4
  store i32 %766, i32* %cand_x, align 4
  %767 = load i32, i32* %iYMinNow, align 4
  %768 = load i32, i32* %search_step, align 4
  %add842 = add nsw i32 %767, %768
  store i32 %add842, i32* %cand_y, align 4
  %769 = load i32, i32* %cand_x, align 4
  %770 = load i32, i32* %center_x, align 4
  %sub843 = sub nsw i32 %769, %770
  %call844 = call i32 @abs(i32 %sub843) #6
  %771 = load i32, i32* %search_range.addr, align 4
  %cmp845 = icmp sle i32 %call844, %771
  br i1 %cmp845, label %land.lhs.true847, label %if.end888

land.lhs.true847:                                 ; preds = %for.body839
  %772 = load i32, i32* %cand_y, align 4
  %773 = load i32, i32* %center_y, align 4
  %sub848 = sub nsw i32 %772, %773
  %call849 = call i32 @abs(i32 %sub848) #6
  %774 = load i32, i32* %search_range.addr, align 4
  %cmp850 = icmp sle i32 %call849, %774
  br i1 %cmp850, label %if.then852, label %if.end888

if.then852:                                       ; preds = %land.lhs.true847
  %775 = load i32**, i32*** @McostState, align 8
  %776 = load i32, i32* %cand_y, align 4
  %777 = load i32, i32* %center_y, align 4
  %sub853 = sub nsw i32 %776, %777
  %778 = load i32, i32* %search_range.addr, align 4
  %add854 = add nsw i32 %sub853, %778
  %idxprom855 = sext i32 %add854 to i64
  %arrayidx856 = getelementptr inbounds i32*, i32** %775, i64 %idxprom855
  %779 = load i32*, i32** %arrayidx856, align 8
  %780 = load i32, i32* %cand_x, align 4
  %781 = load i32, i32* %center_x, align 4
  %sub857 = sub nsw i32 %780, %781
  %782 = load i32, i32* %search_range.addr, align 4
  %add858 = add nsw i32 %sub857, %782
  %idxprom859 = sext i32 %add858 to i64
  %arrayidx860 = getelementptr inbounds i32, i32* %779, i64 %idxprom859
  %783 = load i32, i32* %arrayidx860, align 4
  %tobool861 = icmp ne i32 %783, 0
  br i1 %tobool861, label %if.end887, label %if.then862

if.then862:                                       ; preds = %if.then852
  %784 = load i32, i32* %lambda_factor, align 4
  %785 = load i32*, i32** @mvbits, align 8
  %786 = load i32, i32* %cand_x, align 4
  %787 = load i32, i32* %mvshift, align 4
  %shl863 = shl i32 %786, %787
  %788 = load i32, i32* %pred_x, align 4
  %sub864 = sub nsw i32 %shl863, %788
  %idxprom865 = sext i32 %sub864 to i64
  %arrayidx866 = getelementptr inbounds i32, i32* %785, i64 %idxprom865
  %789 = load i32, i32* %arrayidx866, align 4
  %790 = load i32*, i32** @mvbits, align 8
  %791 = load i32, i32* %cand_y, align 4
  %792 = load i32, i32* %mvshift, align 4
  %shl867 = shl i32 %791, %792
  %793 = load i32, i32* %pred_y, align 4
  %sub868 = sub nsw i32 %shl867, %793
  %idxprom869 = sext i32 %sub868 to i64
  %arrayidx870 = getelementptr inbounds i32, i32* %790, i64 %idxprom869
  %794 = load i32, i32* %arrayidx870, align 4
  %add871 = add nsw i32 %789, %794
  %mul872 = mul nsw i32 %784, %add871
  %shr873 = ashr i32 %mul872, 16
  store i32 %shr873, i32* %mcost, align 4
  %795 = load i16*, i16** %ref_pic, align 8
  %796 = load i16**, i16*** %orig_pic.addr, align 8
  %797 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %798 = load i32, i32* %blocksize_y, align 4
  %799 = load i32, i32* %blocksize_x, align 4
  %800 = load i32, i32* %blocksize_x4, align 4
  %801 = load i32, i32* %mcost, align 4
  %802 = load i32, i32* %min_mcost.addr, align 4
  %803 = load i32, i32* %cand_x, align 4
  %804 = load i32, i32* %cand_y, align 4
  %call874 = call i32 @PartCalMad(i16* %795, i16** %796, i16* (i32, i16*, i32, i32, i32, i32)* %797, i32 %798, i32 %799, i32 %800, i32 %801, i32 %802, i32 %803, i32 %804)
  store i32 %call874, i32* %mcost, align 4
  %805 = load i32, i32* %mcost, align 4
  %806 = load i32**, i32*** @McostState, align 8
  %807 = load i32, i32* %cand_y, align 4
  %808 = load i32, i32* %center_y, align 4
  %sub875 = sub nsw i32 %807, %808
  %809 = load i32, i32* %search_range.addr, align 4
  %add876 = add nsw i32 %sub875, %809
  %idxprom877 = sext i32 %add876 to i64
  %arrayidx878 = getelementptr inbounds i32*, i32** %806, i64 %idxprom877
  %810 = load i32*, i32** %arrayidx878, align 8
  %811 = load i32, i32* %cand_x, align 4
  %812 = load i32, i32* %center_x, align 4
  %sub879 = sub nsw i32 %811, %812
  %813 = load i32, i32* %search_range.addr, align 4
  %add880 = add nsw i32 %sub879, %813
  %idxprom881 = sext i32 %add880 to i64
  %arrayidx882 = getelementptr inbounds i32, i32* %810, i64 %idxprom881
  store i32 %805, i32* %arrayidx882, align 4
  %814 = load i32, i32* %mcost, align 4
  %815 = load i32, i32* %min_mcost.addr, align 4
  %cmp883 = icmp slt i32 %814, %815
  br i1 %cmp883, label %if.then885, label %if.end886

if.then885:                                       ; preds = %if.then862
  %816 = load i32, i32* %cand_x, align 4
  store i32 %816, i32* %best_x, align 4
  %817 = load i32, i32* %cand_y, align 4
  store i32 %817, i32* %best_y, align 4
  %818 = load i32, i32* %mcost, align 4
  store i32 %818, i32* %min_mcost.addr, align 4
  br label %if.end886

if.end886:                                        ; preds = %if.then885, %if.then862
  br label %if.end887

if.end887:                                        ; preds = %if.end886, %if.then852
  br label %if.end888

if.end888:                                        ; preds = %if.end887, %land.lhs.true847, %for.body839
  %819 = load i32, i32* %iXMinNow, align 4
  store i32 %819, i32* %cand_x, align 4
  %820 = load i32, i32* %iYMinNow, align 4
  %821 = load i32, i32* %search_step, align 4
  %sub889 = sub nsw i32 %820, %821
  store i32 %sub889, i32* %cand_y, align 4
  %822 = load i32, i32* %cand_x, align 4
  %823 = load i32, i32* %center_x, align 4
  %sub890 = sub nsw i32 %822, %823
  %call891 = call i32 @abs(i32 %sub890) #6
  %824 = load i32, i32* %search_range.addr, align 4
  %cmp892 = icmp sle i32 %call891, %824
  br i1 %cmp892, label %land.lhs.true894, label %if.end935

land.lhs.true894:                                 ; preds = %if.end888
  %825 = load i32, i32* %cand_y, align 4
  %826 = load i32, i32* %center_y, align 4
  %sub895 = sub nsw i32 %825, %826
  %call896 = call i32 @abs(i32 %sub895) #6
  %827 = load i32, i32* %search_range.addr, align 4
  %cmp897 = icmp sle i32 %call896, %827
  br i1 %cmp897, label %if.then899, label %if.end935

if.then899:                                       ; preds = %land.lhs.true894
  %828 = load i32**, i32*** @McostState, align 8
  %829 = load i32, i32* %cand_y, align 4
  %830 = load i32, i32* %center_y, align 4
  %sub900 = sub nsw i32 %829, %830
  %831 = load i32, i32* %search_range.addr, align 4
  %add901 = add nsw i32 %sub900, %831
  %idxprom902 = sext i32 %add901 to i64
  %arrayidx903 = getelementptr inbounds i32*, i32** %828, i64 %idxprom902
  %832 = load i32*, i32** %arrayidx903, align 8
  %833 = load i32, i32* %cand_x, align 4
  %834 = load i32, i32* %center_x, align 4
  %sub904 = sub nsw i32 %833, %834
  %835 = load i32, i32* %search_range.addr, align 4
  %add905 = add nsw i32 %sub904, %835
  %idxprom906 = sext i32 %add905 to i64
  %arrayidx907 = getelementptr inbounds i32, i32* %832, i64 %idxprom906
  %836 = load i32, i32* %arrayidx907, align 4
  %tobool908 = icmp ne i32 %836, 0
  br i1 %tobool908, label %if.end934, label %if.then909

if.then909:                                       ; preds = %if.then899
  %837 = load i32, i32* %lambda_factor, align 4
  %838 = load i32*, i32** @mvbits, align 8
  %839 = load i32, i32* %cand_x, align 4
  %840 = load i32, i32* %mvshift, align 4
  %shl910 = shl i32 %839, %840
  %841 = load i32, i32* %pred_x, align 4
  %sub911 = sub nsw i32 %shl910, %841
  %idxprom912 = sext i32 %sub911 to i64
  %arrayidx913 = getelementptr inbounds i32, i32* %838, i64 %idxprom912
  %842 = load i32, i32* %arrayidx913, align 4
  %843 = load i32*, i32** @mvbits, align 8
  %844 = load i32, i32* %cand_y, align 4
  %845 = load i32, i32* %mvshift, align 4
  %shl914 = shl i32 %844, %845
  %846 = load i32, i32* %pred_y, align 4
  %sub915 = sub nsw i32 %shl914, %846
  %idxprom916 = sext i32 %sub915 to i64
  %arrayidx917 = getelementptr inbounds i32, i32* %843, i64 %idxprom916
  %847 = load i32, i32* %arrayidx917, align 4
  %add918 = add nsw i32 %842, %847
  %mul919 = mul nsw i32 %837, %add918
  %shr920 = ashr i32 %mul919, 16
  store i32 %shr920, i32* %mcost, align 4
  %848 = load i16*, i16** %ref_pic, align 8
  %849 = load i16**, i16*** %orig_pic.addr, align 8
  %850 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %851 = load i32, i32* %blocksize_y, align 4
  %852 = load i32, i32* %blocksize_x, align 4
  %853 = load i32, i32* %blocksize_x4, align 4
  %854 = load i32, i32* %mcost, align 4
  %855 = load i32, i32* %min_mcost.addr, align 4
  %856 = load i32, i32* %cand_x, align 4
  %857 = load i32, i32* %cand_y, align 4
  %call921 = call i32 @PartCalMad(i16* %848, i16** %849, i16* (i32, i16*, i32, i32, i32, i32)* %850, i32 %851, i32 %852, i32 %853, i32 %854, i32 %855, i32 %856, i32 %857)
  store i32 %call921, i32* %mcost, align 4
  %858 = load i32, i32* %mcost, align 4
  %859 = load i32**, i32*** @McostState, align 8
  %860 = load i32, i32* %cand_y, align 4
  %861 = load i32, i32* %center_y, align 4
  %sub922 = sub nsw i32 %860, %861
  %862 = load i32, i32* %search_range.addr, align 4
  %add923 = add nsw i32 %sub922, %862
  %idxprom924 = sext i32 %add923 to i64
  %arrayidx925 = getelementptr inbounds i32*, i32** %859, i64 %idxprom924
  %863 = load i32*, i32** %arrayidx925, align 8
  %864 = load i32, i32* %cand_x, align 4
  %865 = load i32, i32* %center_x, align 4
  %sub926 = sub nsw i32 %864, %865
  %866 = load i32, i32* %search_range.addr, align 4
  %add927 = add nsw i32 %sub926, %866
  %idxprom928 = sext i32 %add927 to i64
  %arrayidx929 = getelementptr inbounds i32, i32* %863, i64 %idxprom928
  store i32 %858, i32* %arrayidx929, align 4
  %867 = load i32, i32* %mcost, align 4
  %868 = load i32, i32* %min_mcost.addr, align 4
  %cmp930 = icmp slt i32 %867, %868
  br i1 %cmp930, label %if.then932, label %if.end933

if.then932:                                       ; preds = %if.then909
  %869 = load i32, i32* %cand_x, align 4
  store i32 %869, i32* %best_x, align 4
  %870 = load i32, i32* %cand_y, align 4
  store i32 %870, i32* %best_y, align 4
  %871 = load i32, i32* %mcost, align 4
  store i32 %871, i32* %min_mcost.addr, align 4
  br label %if.end933

if.end933:                                        ; preds = %if.then932, %if.then909
  br label %if.end934

if.end934:                                        ; preds = %if.end933, %if.then899
  br label %if.end935

if.end935:                                        ; preds = %if.end934, %land.lhs.true894, %if.end888
  br label %for.inc936

for.inc936:                                       ; preds = %if.end935
  %872 = load i32, i32* %i, align 4
  %inc937 = add nsw i32 %872, 1
  store i32 %inc937, i32* %i, align 4
  br label %for.cond835

for.end938:                                       ; preds = %for.cond835
  %873 = load i16, i16* %ref.addr, align 2
  %conv939 = sext i16 %873 to i32
  %cmp940 = icmp sgt i32 %conv939, 0
  br i1 %cmp940, label %if.then942, label %if.else960

if.then942:                                       ; preds = %for.end938
  %874 = load i32, i32* %min_mcost.addr, align 4
  %875 = load i32, i32* @pred_SAD_ref, align 4
  %sub943 = sub nsw i32 %874, %875
  %conv944 = sitofp i32 %sub943 to float
  %876 = load i32, i32* @pred_SAD_ref, align 4
  %conv945 = sitofp i32 %876 to float
  %877 = load float, float* %betaThird, align 4
  %mul946 = fmul float %conv945, %877
  %cmp947 = fcmp olt float %conv944, %mul946
  br i1 %cmp947, label %if.then949, label %if.else950

if.then949:                                       ; preds = %if.then942
  br label %third_step

if.else950:                                       ; preds = %if.then942
  %878 = load i32, i32* %min_mcost.addr, align 4
  %879 = load i32, i32* @pred_SAD_ref, align 4
  %sub951 = sub nsw i32 %878, %879
  %conv952 = sitofp i32 %sub951 to float
  %880 = load i32, i32* @pred_SAD_ref, align 4
  %conv953 = sitofp i32 %880 to float
  %881 = load float, float* %betaSec, align 4
  %mul954 = fmul float %conv953, %881
  %cmp955 = fcmp olt float %conv952, %mul954
  br i1 %cmp955, label %if.then957, label %if.end958

if.then957:                                       ; preds = %if.else950
  br label %sec_step

if.end958:                                        ; preds = %if.else950
  br label %if.end959

if.end959:                                        ; preds = %if.end958
  br label %if.end1000

if.else960:                                       ; preds = %for.end938
  %882 = load i32, i32* %blocktype.addr, align 4
  %cmp961 = icmp sgt i32 %882, 1
  br i1 %cmp961, label %if.then963, label %if.else981

if.then963:                                       ; preds = %if.else960
  %883 = load i32, i32* %min_mcost.addr, align 4
  %884 = load i32, i32* @pred_SAD_uplayer, align 4
  %sub964 = sub nsw i32 %883, %884
  %conv965 = sitofp i32 %sub964 to float
  %885 = load i32, i32* @pred_SAD_uplayer, align 4
  %conv966 = sitofp i32 %885 to float
  %886 = load float, float* %betaThird, align 4
  %mul967 = fmul float %conv966, %886
  %cmp968 = fcmp olt float %conv965, %mul967
  br i1 %cmp968, label %if.then970, label %if.else971

if.then970:                                       ; preds = %if.then963
  br label %third_step

if.else971:                                       ; preds = %if.then963
  %887 = load i32, i32* %min_mcost.addr, align 4
  %888 = load i32, i32* @pred_SAD_uplayer, align 4
  %sub972 = sub nsw i32 %887, %888
  %conv973 = sitofp i32 %sub972 to float
  %889 = load i32, i32* @pred_SAD_uplayer, align 4
  %conv974 = sitofp i32 %889 to float
  %890 = load float, float* %betaSec, align 4
  %mul975 = fmul float %conv974, %890
  %cmp976 = fcmp olt float %conv973, %mul975
  br i1 %cmp976, label %if.then978, label %if.end979

if.then978:                                       ; preds = %if.else971
  br label %sec_step

if.end979:                                        ; preds = %if.else971
  br label %if.end980

if.end980:                                        ; preds = %if.end979
  br label %if.end999

if.else981:                                       ; preds = %if.else960
  %891 = load i32, i32* %min_mcost.addr, align 4
  %892 = load i32, i32* @pred_SAD_space, align 4
  %sub982 = sub nsw i32 %891, %892
  %conv983 = sitofp i32 %sub982 to float
  %893 = load i32, i32* @pred_SAD_space, align 4
  %conv984 = sitofp i32 %893 to float
  %894 = load float, float* %betaThird, align 4
  %mul985 = fmul float %conv984, %894
  %cmp986 = fcmp olt float %conv983, %mul985
  br i1 %cmp986, label %if.then988, label %if.else989

if.then988:                                       ; preds = %if.else981
  br label %third_step

if.else989:                                       ; preds = %if.else981
  %895 = load i32, i32* %min_mcost.addr, align 4
  %896 = load i32, i32* @pred_SAD_space, align 4
  %sub990 = sub nsw i32 %895, %896
  %conv991 = sitofp i32 %sub990 to float
  %897 = load i32, i32* @pred_SAD_space, align 4
  %conv992 = sitofp i32 %897 to float
  %898 = load float, float* %betaSec, align 4
  %mul993 = fmul float %conv992, %898
  %cmp994 = fcmp olt float %conv991, %mul993
  br i1 %cmp994, label %if.then996, label %if.end997

if.then996:                                       ; preds = %if.else989
  br label %sec_step

if.end997:                                        ; preds = %if.else989
  br label %if.end998

if.end998:                                        ; preds = %if.end997
  br label %if.end999

if.end999:                                        ; preds = %if.end998, %if.end980
  br label %if.end1000

if.end1000:                                       ; preds = %if.end999, %if.end959
  %899 = load i32, i32* %best_x, align 4
  store i32 %899, i32* %iXMinNow, align 4
  %900 = load i32, i32* %best_y, align 4
  store i32 %900, i32* %iYMinNow, align 4
  store i32 1, i32* %pos, align 4
  br label %for.cond1001

for.cond1001:                                     ; preds = %for.inc1057, %if.end1000
  %901 = load i32, i32* %pos, align 4
  %cmp1002 = icmp slt i32 %901, 25
  br i1 %cmp1002, label %for.body1004, label %for.end1059

for.body1004:                                     ; preds = %for.cond1001
  %902 = load i32, i32* %iXMinNow, align 4
  %903 = load i32*, i32** @spiral_search_x, align 8
  %904 = load i32, i32* %pos, align 4
  %idxprom1005 = sext i32 %904 to i64
  %arrayidx1006 = getelementptr inbounds i32, i32* %903, i64 %idxprom1005
  %905 = load i32, i32* %arrayidx1006, align 4
  %add1007 = add nsw i32 %902, %905
  store i32 %add1007, i32* %cand_x, align 4
  %906 = load i32, i32* %iYMinNow, align 4
  %907 = load i32*, i32** @spiral_search_y, align 8
  %908 = load i32, i32* %pos, align 4
  %idxprom1008 = sext i32 %908 to i64
  %arrayidx1009 = getelementptr inbounds i32, i32* %907, i64 %idxprom1008
  %909 = load i32, i32* %arrayidx1009, align 4
  %add1010 = add nsw i32 %906, %909
  store i32 %add1010, i32* %cand_y, align 4
  %910 = load i32, i32* %cand_x, align 4
  %911 = load i32, i32* %center_x, align 4
  %sub1011 = sub nsw i32 %910, %911
  %call1012 = call i32 @abs(i32 %sub1011) #6
  %912 = load i32, i32* %search_range.addr, align 4
  %cmp1013 = icmp sle i32 %call1012, %912
  br i1 %cmp1013, label %land.lhs.true1015, label %if.end1056

land.lhs.true1015:                                ; preds = %for.body1004
  %913 = load i32, i32* %cand_y, align 4
  %914 = load i32, i32* %center_y, align 4
  %sub1016 = sub nsw i32 %913, %914
  %call1017 = call i32 @abs(i32 %sub1016) #6
  %915 = load i32, i32* %search_range.addr, align 4
  %cmp1018 = icmp sle i32 %call1017, %915
  br i1 %cmp1018, label %if.then1020, label %if.end1056

if.then1020:                                      ; preds = %land.lhs.true1015
  %916 = load i32**, i32*** @McostState, align 8
  %917 = load i32, i32* %cand_y, align 4
  %918 = load i32, i32* %center_y, align 4
  %sub1021 = sub nsw i32 %917, %918
  %919 = load i32, i32* %search_range.addr, align 4
  %add1022 = add nsw i32 %sub1021, %919
  %idxprom1023 = sext i32 %add1022 to i64
  %arrayidx1024 = getelementptr inbounds i32*, i32** %916, i64 %idxprom1023
  %920 = load i32*, i32** %arrayidx1024, align 8
  %921 = load i32, i32* %cand_x, align 4
  %922 = load i32, i32* %center_x, align 4
  %sub1025 = sub nsw i32 %921, %922
  %923 = load i32, i32* %search_range.addr, align 4
  %add1026 = add nsw i32 %sub1025, %923
  %idxprom1027 = sext i32 %add1026 to i64
  %arrayidx1028 = getelementptr inbounds i32, i32* %920, i64 %idxprom1027
  %924 = load i32, i32* %arrayidx1028, align 4
  %tobool1029 = icmp ne i32 %924, 0
  br i1 %tobool1029, label %if.end1055, label %if.then1030

if.then1030:                                      ; preds = %if.then1020
  %925 = load i32, i32* %lambda_factor, align 4
  %926 = load i32*, i32** @mvbits, align 8
  %927 = load i32, i32* %cand_x, align 4
  %928 = load i32, i32* %mvshift, align 4
  %shl1031 = shl i32 %927, %928
  %929 = load i32, i32* %pred_x, align 4
  %sub1032 = sub nsw i32 %shl1031, %929
  %idxprom1033 = sext i32 %sub1032 to i64
  %arrayidx1034 = getelementptr inbounds i32, i32* %926, i64 %idxprom1033
  %930 = load i32, i32* %arrayidx1034, align 4
  %931 = load i32*, i32** @mvbits, align 8
  %932 = load i32, i32* %cand_y, align 4
  %933 = load i32, i32* %mvshift, align 4
  %shl1035 = shl i32 %932, %933
  %934 = load i32, i32* %pred_y, align 4
  %sub1036 = sub nsw i32 %shl1035, %934
  %idxprom1037 = sext i32 %sub1036 to i64
  %arrayidx1038 = getelementptr inbounds i32, i32* %931, i64 %idxprom1037
  %935 = load i32, i32* %arrayidx1038, align 4
  %add1039 = add nsw i32 %930, %935
  %mul1040 = mul nsw i32 %925, %add1039
  %shr1041 = ashr i32 %mul1040, 16
  store i32 %shr1041, i32* %mcost, align 4
  %936 = load i16*, i16** %ref_pic, align 8
  %937 = load i16**, i16*** %orig_pic.addr, align 8
  %938 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %939 = load i32, i32* %blocksize_y, align 4
  %940 = load i32, i32* %blocksize_x, align 4
  %941 = load i32, i32* %blocksize_x4, align 4
  %942 = load i32, i32* %mcost, align 4
  %943 = load i32, i32* %min_mcost.addr, align 4
  %944 = load i32, i32* %cand_x, align 4
  %945 = load i32, i32* %cand_y, align 4
  %call1042 = call i32 @PartCalMad(i16* %936, i16** %937, i16* (i32, i16*, i32, i32, i32, i32)* %938, i32 %939, i32 %940, i32 %941, i32 %942, i32 %943, i32 %944, i32 %945)
  store i32 %call1042, i32* %mcost, align 4
  %946 = load i32, i32* %mcost, align 4
  %947 = load i32**, i32*** @McostState, align 8
  %948 = load i32, i32* %cand_y, align 4
  %949 = load i32, i32* %center_y, align 4
  %sub1043 = sub nsw i32 %948, %949
  %950 = load i32, i32* %search_range.addr, align 4
  %add1044 = add nsw i32 %sub1043, %950
  %idxprom1045 = sext i32 %add1044 to i64
  %arrayidx1046 = getelementptr inbounds i32*, i32** %947, i64 %idxprom1045
  %951 = load i32*, i32** %arrayidx1046, align 8
  %952 = load i32, i32* %cand_x, align 4
  %953 = load i32, i32* %center_x, align 4
  %sub1047 = sub nsw i32 %952, %953
  %954 = load i32, i32* %search_range.addr, align 4
  %add1048 = add nsw i32 %sub1047, %954
  %idxprom1049 = sext i32 %add1048 to i64
  %arrayidx1050 = getelementptr inbounds i32, i32* %951, i64 %idxprom1049
  store i32 %946, i32* %arrayidx1050, align 4
  %955 = load i32, i32* %mcost, align 4
  %956 = load i32, i32* %min_mcost.addr, align 4
  %cmp1051 = icmp slt i32 %955, %956
  br i1 %cmp1051, label %if.then1053, label %if.end1054

if.then1053:                                      ; preds = %if.then1030
  %957 = load i32, i32* %cand_x, align 4
  store i32 %957, i32* %best_x, align 4
  %958 = load i32, i32* %cand_y, align 4
  store i32 %958, i32* %best_y, align 4
  %959 = load i32, i32* %mcost, align 4
  store i32 %959, i32* %min_mcost.addr, align 4
  br label %if.end1054

if.end1054:                                       ; preds = %if.then1053, %if.then1030
  br label %if.end1055

if.end1055:                                       ; preds = %if.end1054, %if.then1020
  br label %if.end1056

if.end1056:                                       ; preds = %if.end1055, %land.lhs.true1015, %for.body1004
  br label %for.inc1057

for.inc1057:                                      ; preds = %if.end1056
  %960 = load i32, i32* %pos, align 4
  %inc1058 = add nsw i32 %960, 1
  store i32 %inc1058, i32* %pos, align 4
  br label %for.cond1001

for.end1059:                                      ; preds = %for.cond1001
  %961 = load i16, i16* %ref.addr, align 2
  %conv1060 = sext i16 %961 to i32
  %cmp1061 = icmp sgt i32 %conv1060, 0
  br i1 %cmp1061, label %if.then1063, label %if.else1081

if.then1063:                                      ; preds = %for.end1059
  %962 = load i32, i32* %min_mcost.addr, align 4
  %963 = load i32, i32* @pred_SAD_ref, align 4
  %sub1064 = sub nsw i32 %962, %963
  %conv1065 = sitofp i32 %sub1064 to float
  %964 = load i32, i32* @pred_SAD_ref, align 4
  %conv1066 = sitofp i32 %964 to float
  %965 = load float, float* %betaThird, align 4
  %mul1067 = fmul float %conv1066, %965
  %cmp1068 = fcmp olt float %conv1065, %mul1067
  br i1 %cmp1068, label %if.then1070, label %if.else1071

if.then1070:                                      ; preds = %if.then1063
  br label %third_step

if.else1071:                                      ; preds = %if.then1063
  %966 = load i32, i32* %min_mcost.addr, align 4
  %967 = load i32, i32* @pred_SAD_ref, align 4
  %sub1072 = sub nsw i32 %966, %967
  %conv1073 = sitofp i32 %sub1072 to float
  %968 = load i32, i32* @pred_SAD_ref, align 4
  %conv1074 = sitofp i32 %968 to float
  %969 = load float, float* %betaSec, align 4
  %mul1075 = fmul float %conv1074, %969
  %cmp1076 = fcmp olt float %conv1073, %mul1075
  br i1 %cmp1076, label %if.then1078, label %if.end1079

if.then1078:                                      ; preds = %if.else1071
  br label %sec_step

if.end1079:                                       ; preds = %if.else1071
  br label %if.end1080

if.end1080:                                       ; preds = %if.end1079
  br label %if.end1121

if.else1081:                                      ; preds = %for.end1059
  %970 = load i32, i32* %blocktype.addr, align 4
  %cmp1082 = icmp sgt i32 %970, 1
  br i1 %cmp1082, label %if.then1084, label %if.else1102

if.then1084:                                      ; preds = %if.else1081
  %971 = load i32, i32* %min_mcost.addr, align 4
  %972 = load i32, i32* @pred_SAD_uplayer, align 4
  %sub1085 = sub nsw i32 %971, %972
  %conv1086 = sitofp i32 %sub1085 to float
  %973 = load i32, i32* @pred_SAD_uplayer, align 4
  %conv1087 = sitofp i32 %973 to float
  %974 = load float, float* %betaThird, align 4
  %mul1088 = fmul float %conv1087, %974
  %cmp1089 = fcmp olt float %conv1086, %mul1088
  br i1 %cmp1089, label %if.then1091, label %if.else1092

if.then1091:                                      ; preds = %if.then1084
  br label %third_step

if.else1092:                                      ; preds = %if.then1084
  %975 = load i32, i32* %min_mcost.addr, align 4
  %976 = load i32, i32* @pred_SAD_uplayer, align 4
  %sub1093 = sub nsw i32 %975, %976
  %conv1094 = sitofp i32 %sub1093 to float
  %977 = load i32, i32* @pred_SAD_uplayer, align 4
  %conv1095 = sitofp i32 %977 to float
  %978 = load float, float* %betaSec, align 4
  %mul1096 = fmul float %conv1095, %978
  %cmp1097 = fcmp olt float %conv1094, %mul1096
  br i1 %cmp1097, label %if.then1099, label %if.end1100

if.then1099:                                      ; preds = %if.else1092
  br label %sec_step

if.end1100:                                       ; preds = %if.else1092
  br label %if.end1101

if.end1101:                                       ; preds = %if.end1100
  br label %if.end1120

if.else1102:                                      ; preds = %if.else1081
  %979 = load i32, i32* %min_mcost.addr, align 4
  %980 = load i32, i32* @pred_SAD_space, align 4
  %sub1103 = sub nsw i32 %979, %980
  %conv1104 = sitofp i32 %sub1103 to float
  %981 = load i32, i32* @pred_SAD_space, align 4
  %conv1105 = sitofp i32 %981 to float
  %982 = load float, float* %betaThird, align 4
  %mul1106 = fmul float %conv1105, %982
  %cmp1107 = fcmp olt float %conv1104, %mul1106
  br i1 %cmp1107, label %if.then1109, label %if.else1110

if.then1109:                                      ; preds = %if.else1102
  br label %third_step

if.else1110:                                      ; preds = %if.else1102
  %983 = load i32, i32* %min_mcost.addr, align 4
  %984 = load i32, i32* @pred_SAD_space, align 4
  %sub1111 = sub nsw i32 %983, %984
  %conv1112 = sitofp i32 %sub1111 to float
  %985 = load i32, i32* @pred_SAD_space, align 4
  %conv1113 = sitofp i32 %985 to float
  %986 = load float, float* %betaSec, align 4
  %mul1114 = fmul float %conv1113, %986
  %cmp1115 = fcmp olt float %conv1112, %mul1114
  br i1 %cmp1115, label %if.then1117, label %if.end1118

if.then1117:                                      ; preds = %if.else1110
  br label %sec_step

if.end1118:                                       ; preds = %if.else1110
  br label %if.end1119

if.end1119:                                       ; preds = %if.end1118
  br label %if.end1120

if.end1120:                                       ; preds = %if.end1119, %if.end1101
  br label %if.end1121

if.end1121:                                       ; preds = %if.end1120, %if.end1080
  store i32 1, i32* %i, align 4
  br label %for.cond1122

for.cond1122:                                     ; preds = %for.inc1253, %if.end1121
  %987 = load i32, i32* %i, align 4
  %988 = load i32, i32* %search_range.addr, align 4
  %div1123 = sdiv i32 %988, 4
  %cmp1124 = icmp sle i32 %987, %div1123
  br i1 %cmp1124, label %for.body1126, label %for.end1255

for.body1126:                                     ; preds = %for.cond1122
  store i32 0, i32* %iAbort, align 4
  store i32 0, i32* %m, align 4
  br label %for.cond1127

for.cond1127:                                     ; preds = %for.inc1185, %for.body1126
  %989 = load i32, i32* %m, align 4
  %cmp1128 = icmp slt i32 %989, 16
  br i1 %cmp1128, label %for.body1130, label %for.end1187

for.body1130:                                     ; preds = %for.cond1127
  %990 = load i32, i32* %iXMinNow, align 4
  %991 = load i32, i32* %m, align 4
  %idxprom1131 = sext i32 %991 to i64
  %arrayidx1132 = getelementptr inbounds [16 x i32], [16 x i32]* @FastIntegerPelBlockMotionSearch.Big_Hexagon_x, i64 0, i64 %idxprom1131
  %992 = load i32, i32* %arrayidx1132, align 4
  %993 = load i32, i32* %i, align 4
  %mul1133 = mul nsw i32 %992, %993
  %add1134 = add nsw i32 %990, %mul1133
  store i32 %add1134, i32* %cand_x, align 4
  %994 = load i32, i32* %iYMinNow, align 4
  %995 = load i32, i32* %m, align 4
  %idxprom1135 = sext i32 %995 to i64
  %arrayidx1136 = getelementptr inbounds [16 x i32], [16 x i32]* @FastIntegerPelBlockMotionSearch.Big_Hexagon_y, i64 0, i64 %idxprom1135
  %996 = load i32, i32* %arrayidx1136, align 4
  %997 = load i32, i32* %i, align 4
  %mul1137 = mul nsw i32 %996, %997
  %add1138 = add nsw i32 %994, %mul1137
  store i32 %add1138, i32* %cand_y, align 4
  %998 = load i32, i32* %cand_x, align 4
  %999 = load i32, i32* %center_x, align 4
  %sub1139 = sub nsw i32 %998, %999
  %call1140 = call i32 @abs(i32 %sub1139) #6
  %1000 = load i32, i32* %search_range.addr, align 4
  %cmp1141 = icmp sle i32 %call1140, %1000
  br i1 %cmp1141, label %land.lhs.true1143, label %if.end1184

land.lhs.true1143:                                ; preds = %for.body1130
  %1001 = load i32, i32* %cand_y, align 4
  %1002 = load i32, i32* %center_y, align 4
  %sub1144 = sub nsw i32 %1001, %1002
  %call1145 = call i32 @abs(i32 %sub1144) #6
  %1003 = load i32, i32* %search_range.addr, align 4
  %cmp1146 = icmp sle i32 %call1145, %1003
  br i1 %cmp1146, label %if.then1148, label %if.end1184

if.then1148:                                      ; preds = %land.lhs.true1143
  %1004 = load i32**, i32*** @McostState, align 8
  %1005 = load i32, i32* %cand_y, align 4
  %1006 = load i32, i32* %center_y, align 4
  %sub1149 = sub nsw i32 %1005, %1006
  %1007 = load i32, i32* %search_range.addr, align 4
  %add1150 = add nsw i32 %sub1149, %1007
  %idxprom1151 = sext i32 %add1150 to i64
  %arrayidx1152 = getelementptr inbounds i32*, i32** %1004, i64 %idxprom1151
  %1008 = load i32*, i32** %arrayidx1152, align 8
  %1009 = load i32, i32* %cand_x, align 4
  %1010 = load i32, i32* %center_x, align 4
  %sub1153 = sub nsw i32 %1009, %1010
  %1011 = load i32, i32* %search_range.addr, align 4
  %add1154 = add nsw i32 %sub1153, %1011
  %idxprom1155 = sext i32 %add1154 to i64
  %arrayidx1156 = getelementptr inbounds i32, i32* %1008, i64 %idxprom1155
  %1012 = load i32, i32* %arrayidx1156, align 4
  %tobool1157 = icmp ne i32 %1012, 0
  br i1 %tobool1157, label %if.end1183, label %if.then1158

if.then1158:                                      ; preds = %if.then1148
  %1013 = load i32, i32* %lambda_factor, align 4
  %1014 = load i32*, i32** @mvbits, align 8
  %1015 = load i32, i32* %cand_x, align 4
  %1016 = load i32, i32* %mvshift, align 4
  %shl1159 = shl i32 %1015, %1016
  %1017 = load i32, i32* %pred_x, align 4
  %sub1160 = sub nsw i32 %shl1159, %1017
  %idxprom1161 = sext i32 %sub1160 to i64
  %arrayidx1162 = getelementptr inbounds i32, i32* %1014, i64 %idxprom1161
  %1018 = load i32, i32* %arrayidx1162, align 4
  %1019 = load i32*, i32** @mvbits, align 8
  %1020 = load i32, i32* %cand_y, align 4
  %1021 = load i32, i32* %mvshift, align 4
  %shl1163 = shl i32 %1020, %1021
  %1022 = load i32, i32* %pred_y, align 4
  %sub1164 = sub nsw i32 %shl1163, %1022
  %idxprom1165 = sext i32 %sub1164 to i64
  %arrayidx1166 = getelementptr inbounds i32, i32* %1019, i64 %idxprom1165
  %1023 = load i32, i32* %arrayidx1166, align 4
  %add1167 = add nsw i32 %1018, %1023
  %mul1168 = mul nsw i32 %1013, %add1167
  %shr1169 = ashr i32 %mul1168, 16
  store i32 %shr1169, i32* %mcost, align 4
  %1024 = load i16*, i16** %ref_pic, align 8
  %1025 = load i16**, i16*** %orig_pic.addr, align 8
  %1026 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %1027 = load i32, i32* %blocksize_y, align 4
  %1028 = load i32, i32* %blocksize_x, align 4
  %1029 = load i32, i32* %blocksize_x4, align 4
  %1030 = load i32, i32* %mcost, align 4
  %1031 = load i32, i32* %min_mcost.addr, align 4
  %1032 = load i32, i32* %cand_x, align 4
  %1033 = load i32, i32* %cand_y, align 4
  %call1170 = call i32 @PartCalMad(i16* %1024, i16** %1025, i16* (i32, i16*, i32, i32, i32, i32)* %1026, i32 %1027, i32 %1028, i32 %1029, i32 %1030, i32 %1031, i32 %1032, i32 %1033)
  store i32 %call1170, i32* %mcost, align 4
  %1034 = load i32, i32* %mcost, align 4
  %1035 = load i32**, i32*** @McostState, align 8
  %1036 = load i32, i32* %cand_y, align 4
  %1037 = load i32, i32* %center_y, align 4
  %sub1171 = sub nsw i32 %1036, %1037
  %1038 = load i32, i32* %search_range.addr, align 4
  %add1172 = add nsw i32 %sub1171, %1038
  %idxprom1173 = sext i32 %add1172 to i64
  %arrayidx1174 = getelementptr inbounds i32*, i32** %1035, i64 %idxprom1173
  %1039 = load i32*, i32** %arrayidx1174, align 8
  %1040 = load i32, i32* %cand_x, align 4
  %1041 = load i32, i32* %center_x, align 4
  %sub1175 = sub nsw i32 %1040, %1041
  %1042 = load i32, i32* %search_range.addr, align 4
  %add1176 = add nsw i32 %sub1175, %1042
  %idxprom1177 = sext i32 %add1176 to i64
  %arrayidx1178 = getelementptr inbounds i32, i32* %1039, i64 %idxprom1177
  store i32 %1034, i32* %arrayidx1178, align 4
  %1043 = load i32, i32* %mcost, align 4
  %1044 = load i32, i32* %min_mcost.addr, align 4
  %cmp1179 = icmp slt i32 %1043, %1044
  br i1 %cmp1179, label %if.then1181, label %if.end1182

if.then1181:                                      ; preds = %if.then1158
  %1045 = load i32, i32* %cand_x, align 4
  store i32 %1045, i32* %best_x, align 4
  %1046 = load i32, i32* %cand_y, align 4
  store i32 %1046, i32* %best_y, align 4
  %1047 = load i32, i32* %mcost, align 4
  store i32 %1047, i32* %min_mcost.addr, align 4
  store i32 1, i32* %iAbort, align 4
  br label %if.end1182

if.end1182:                                       ; preds = %if.then1181, %if.then1158
  br label %if.end1183

if.end1183:                                       ; preds = %if.end1182, %if.then1148
  br label %if.end1184

if.end1184:                                       ; preds = %if.end1183, %land.lhs.true1143, %for.body1130
  br label %for.inc1185

for.inc1185:                                      ; preds = %if.end1184
  %1048 = load i32, i32* %m, align 4
  %inc1186 = add nsw i32 %1048, 1
  store i32 %inc1186, i32* %m, align 4
  br label %for.cond1127

for.end1187:                                      ; preds = %for.cond1127
  %1049 = load i32, i32* %iAbort, align 4
  %tobool1188 = icmp ne i32 %1049, 0
  br i1 %tobool1188, label %if.then1189, label %if.end1252

if.then1189:                                      ; preds = %for.end1187
  %1050 = load i16, i16* %ref.addr, align 2
  %conv1190 = sext i16 %1050 to i32
  %cmp1191 = icmp sgt i32 %conv1190, 0
  br i1 %cmp1191, label %if.then1193, label %if.else1211

if.then1193:                                      ; preds = %if.then1189
  %1051 = load i32, i32* %min_mcost.addr, align 4
  %1052 = load i32, i32* @pred_SAD_ref, align 4
  %sub1194 = sub nsw i32 %1051, %1052
  %conv1195 = sitofp i32 %sub1194 to float
  %1053 = load i32, i32* @pred_SAD_ref, align 4
  %conv1196 = sitofp i32 %1053 to float
  %1054 = load float, float* %betaThird, align 4
  %mul1197 = fmul float %conv1196, %1054
  %cmp1198 = fcmp olt float %conv1195, %mul1197
  br i1 %cmp1198, label %if.then1200, label %if.else1201

if.then1200:                                      ; preds = %if.then1193
  br label %third_step

if.else1201:                                      ; preds = %if.then1193
  %1055 = load i32, i32* %min_mcost.addr, align 4
  %1056 = load i32, i32* @pred_SAD_ref, align 4
  %sub1202 = sub nsw i32 %1055, %1056
  %conv1203 = sitofp i32 %sub1202 to float
  %1057 = load i32, i32* @pred_SAD_ref, align 4
  %conv1204 = sitofp i32 %1057 to float
  %1058 = load float, float* %betaSec, align 4
  %mul1205 = fmul float %conv1204, %1058
  %cmp1206 = fcmp olt float %conv1203, %mul1205
  br i1 %cmp1206, label %if.then1208, label %if.end1209

if.then1208:                                      ; preds = %if.else1201
  br label %sec_step

if.end1209:                                       ; preds = %if.else1201
  br label %if.end1210

if.end1210:                                       ; preds = %if.end1209
  br label %if.end1251

if.else1211:                                      ; preds = %if.then1189
  %1059 = load i32, i32* %blocktype.addr, align 4
  %cmp1212 = icmp sgt i32 %1059, 1
  br i1 %cmp1212, label %if.then1214, label %if.else1232

if.then1214:                                      ; preds = %if.else1211
  %1060 = load i32, i32* %min_mcost.addr, align 4
  %1061 = load i32, i32* @pred_SAD_uplayer, align 4
  %sub1215 = sub nsw i32 %1060, %1061
  %conv1216 = sitofp i32 %sub1215 to float
  %1062 = load i32, i32* @pred_SAD_uplayer, align 4
  %conv1217 = sitofp i32 %1062 to float
  %1063 = load float, float* %betaThird, align 4
  %mul1218 = fmul float %conv1217, %1063
  %cmp1219 = fcmp olt float %conv1216, %mul1218
  br i1 %cmp1219, label %if.then1221, label %if.else1222

if.then1221:                                      ; preds = %if.then1214
  br label %third_step

if.else1222:                                      ; preds = %if.then1214
  %1064 = load i32, i32* %min_mcost.addr, align 4
  %1065 = load i32, i32* @pred_SAD_uplayer, align 4
  %sub1223 = sub nsw i32 %1064, %1065
  %conv1224 = sitofp i32 %sub1223 to float
  %1066 = load i32, i32* @pred_SAD_uplayer, align 4
  %conv1225 = sitofp i32 %1066 to float
  %1067 = load float, float* %betaSec, align 4
  %mul1226 = fmul float %conv1225, %1067
  %cmp1227 = fcmp olt float %conv1224, %mul1226
  br i1 %cmp1227, label %if.then1229, label %if.end1230

if.then1229:                                      ; preds = %if.else1222
  br label %sec_step

if.end1230:                                       ; preds = %if.else1222
  br label %if.end1231

if.end1231:                                       ; preds = %if.end1230
  br label %if.end1250

if.else1232:                                      ; preds = %if.else1211
  %1068 = load i32, i32* %min_mcost.addr, align 4
  %1069 = load i32, i32* @pred_SAD_space, align 4
  %sub1233 = sub nsw i32 %1068, %1069
  %conv1234 = sitofp i32 %sub1233 to float
  %1070 = load i32, i32* @pred_SAD_space, align 4
  %conv1235 = sitofp i32 %1070 to float
  %1071 = load float, float* %betaThird, align 4
  %mul1236 = fmul float %conv1235, %1071
  %cmp1237 = fcmp olt float %conv1234, %mul1236
  br i1 %cmp1237, label %if.then1239, label %if.else1240

if.then1239:                                      ; preds = %if.else1232
  br label %third_step

if.else1240:                                      ; preds = %if.else1232
  %1072 = load i32, i32* %min_mcost.addr, align 4
  %1073 = load i32, i32* @pred_SAD_space, align 4
  %sub1241 = sub nsw i32 %1072, %1073
  %conv1242 = sitofp i32 %sub1241 to float
  %1074 = load i32, i32* @pred_SAD_space, align 4
  %conv1243 = sitofp i32 %1074 to float
  %1075 = load float, float* %betaSec, align 4
  %mul1244 = fmul float %conv1243, %1075
  %cmp1245 = fcmp olt float %conv1242, %mul1244
  br i1 %cmp1245, label %if.then1247, label %if.end1248

if.then1247:                                      ; preds = %if.else1240
  br label %sec_step

if.end1248:                                       ; preds = %if.else1240
  br label %if.end1249

if.end1249:                                       ; preds = %if.end1248
  br label %if.end1250

if.end1250:                                       ; preds = %if.end1249, %if.end1231
  br label %if.end1251

if.end1251:                                       ; preds = %if.end1250, %if.end1210
  br label %if.end1252

if.end1252:                                       ; preds = %if.end1251, %for.end1187
  br label %for.inc1253

for.inc1253:                                      ; preds = %if.end1252
  %1076 = load i32, i32* %i, align 4
  %inc1254 = add nsw i32 %1076, 1
  store i32 %inc1254, i32* %i, align 4
  br label %for.cond1122

for.end1255:                                      ; preds = %for.cond1122
  br label %sec_step

sec_step:                                         ; preds = %for.end1255, %if.then1247, %if.then1229, %if.then1208, %if.then1117, %if.then1099, %if.then1078, %if.then996, %if.then978, %if.then957, %if.then729, %if.then722, %if.then704, %if.then683, %if.then389
  %1077 = load i32, i32* %best_x, align 4
  store i32 %1077, i32* %iXMinNow, align 4
  %1078 = load i32, i32* %best_y, align 4
  store i32 %1078, i32* %iYMinNow, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond1256

for.cond1256:                                     ; preds = %for.inc1322, %sec_step
  %1079 = load i32, i32* %i, align 4
  %1080 = load i32, i32* %search_range.addr, align 4
  %cmp1257 = icmp slt i32 %1079, %1080
  br i1 %cmp1257, label %for.body1259, label %for.end1324

for.body1259:                                     ; preds = %for.cond1256
  store i32 1, i32* %iAbort, align 4
  store i32 0, i32* %m, align 4
  br label %for.cond1260

for.cond1260:                                     ; preds = %for.inc1316, %for.body1259
  %1081 = load i32, i32* %m, align 4
  %cmp1261 = icmp slt i32 %1081, 6
  br i1 %cmp1261, label %for.body1263, label %for.end1318

for.body1263:                                     ; preds = %for.cond1260
  %1082 = load i32, i32* %iXMinNow, align 4
  %1083 = load i32, i32* %m, align 4
  %idxprom1264 = sext i32 %1083 to i64
  %arrayidx1265 = getelementptr inbounds [6 x i32], [6 x i32]* @FastIntegerPelBlockMotionSearch.Hexagon_x, i64 0, i64 %idxprom1264
  %1084 = load i32, i32* %arrayidx1265, align 4
  %add1266 = add nsw i32 %1082, %1084
  store i32 %add1266, i32* %cand_x, align 4
  %1085 = load i32, i32* %iYMinNow, align 4
  %1086 = load i32, i32* %m, align 4
  %idxprom1267 = sext i32 %1086 to i64
  %arrayidx1268 = getelementptr inbounds [6 x i32], [6 x i32]* @FastIntegerPelBlockMotionSearch.Hexagon_y, i64 0, i64 %idxprom1267
  %1087 = load i32, i32* %arrayidx1268, align 4
  %add1269 = add nsw i32 %1085, %1087
  store i32 %add1269, i32* %cand_y, align 4
  %1088 = load i32, i32* %cand_x, align 4
  %1089 = load i32, i32* %center_x, align 4
  %sub1270 = sub nsw i32 %1088, %1089
  %call1271 = call i32 @abs(i32 %sub1270) #6
  %1090 = load i32, i32* %search_range.addr, align 4
  %cmp1272 = icmp sle i32 %call1271, %1090
  br i1 %cmp1272, label %land.lhs.true1274, label %if.end1315

land.lhs.true1274:                                ; preds = %for.body1263
  %1091 = load i32, i32* %cand_y, align 4
  %1092 = load i32, i32* %center_y, align 4
  %sub1275 = sub nsw i32 %1091, %1092
  %call1276 = call i32 @abs(i32 %sub1275) #6
  %1093 = load i32, i32* %search_range.addr, align 4
  %cmp1277 = icmp sle i32 %call1276, %1093
  br i1 %cmp1277, label %if.then1279, label %if.end1315

if.then1279:                                      ; preds = %land.lhs.true1274
  %1094 = load i32**, i32*** @McostState, align 8
  %1095 = load i32, i32* %cand_y, align 4
  %1096 = load i32, i32* %center_y, align 4
  %sub1280 = sub nsw i32 %1095, %1096
  %1097 = load i32, i32* %search_range.addr, align 4
  %add1281 = add nsw i32 %sub1280, %1097
  %idxprom1282 = sext i32 %add1281 to i64
  %arrayidx1283 = getelementptr inbounds i32*, i32** %1094, i64 %idxprom1282
  %1098 = load i32*, i32** %arrayidx1283, align 8
  %1099 = load i32, i32* %cand_x, align 4
  %1100 = load i32, i32* %center_x, align 4
  %sub1284 = sub nsw i32 %1099, %1100
  %1101 = load i32, i32* %search_range.addr, align 4
  %add1285 = add nsw i32 %sub1284, %1101
  %idxprom1286 = sext i32 %add1285 to i64
  %arrayidx1287 = getelementptr inbounds i32, i32* %1098, i64 %idxprom1286
  %1102 = load i32, i32* %arrayidx1287, align 4
  %tobool1288 = icmp ne i32 %1102, 0
  br i1 %tobool1288, label %if.end1314, label %if.then1289

if.then1289:                                      ; preds = %if.then1279
  %1103 = load i32, i32* %lambda_factor, align 4
  %1104 = load i32*, i32** @mvbits, align 8
  %1105 = load i32, i32* %cand_x, align 4
  %1106 = load i32, i32* %mvshift, align 4
  %shl1290 = shl i32 %1105, %1106
  %1107 = load i32, i32* %pred_x, align 4
  %sub1291 = sub nsw i32 %shl1290, %1107
  %idxprom1292 = sext i32 %sub1291 to i64
  %arrayidx1293 = getelementptr inbounds i32, i32* %1104, i64 %idxprom1292
  %1108 = load i32, i32* %arrayidx1293, align 4
  %1109 = load i32*, i32** @mvbits, align 8
  %1110 = load i32, i32* %cand_y, align 4
  %1111 = load i32, i32* %mvshift, align 4
  %shl1294 = shl i32 %1110, %1111
  %1112 = load i32, i32* %pred_y, align 4
  %sub1295 = sub nsw i32 %shl1294, %1112
  %idxprom1296 = sext i32 %sub1295 to i64
  %arrayidx1297 = getelementptr inbounds i32, i32* %1109, i64 %idxprom1296
  %1113 = load i32, i32* %arrayidx1297, align 4
  %add1298 = add nsw i32 %1108, %1113
  %mul1299 = mul nsw i32 %1103, %add1298
  %shr1300 = ashr i32 %mul1299, 16
  store i32 %shr1300, i32* %mcost, align 4
  %1114 = load i16*, i16** %ref_pic, align 8
  %1115 = load i16**, i16*** %orig_pic.addr, align 8
  %1116 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %1117 = load i32, i32* %blocksize_y, align 4
  %1118 = load i32, i32* %blocksize_x, align 4
  %1119 = load i32, i32* %blocksize_x4, align 4
  %1120 = load i32, i32* %mcost, align 4
  %1121 = load i32, i32* %min_mcost.addr, align 4
  %1122 = load i32, i32* %cand_x, align 4
  %1123 = load i32, i32* %cand_y, align 4
  %call1301 = call i32 @PartCalMad(i16* %1114, i16** %1115, i16* (i32, i16*, i32, i32, i32, i32)* %1116, i32 %1117, i32 %1118, i32 %1119, i32 %1120, i32 %1121, i32 %1122, i32 %1123)
  store i32 %call1301, i32* %mcost, align 4
  %1124 = load i32, i32* %mcost, align 4
  %1125 = load i32**, i32*** @McostState, align 8
  %1126 = load i32, i32* %cand_y, align 4
  %1127 = load i32, i32* %center_y, align 4
  %sub1302 = sub nsw i32 %1126, %1127
  %1128 = load i32, i32* %search_range.addr, align 4
  %add1303 = add nsw i32 %sub1302, %1128
  %idxprom1304 = sext i32 %add1303 to i64
  %arrayidx1305 = getelementptr inbounds i32*, i32** %1125, i64 %idxprom1304
  %1129 = load i32*, i32** %arrayidx1305, align 8
  %1130 = load i32, i32* %cand_x, align 4
  %1131 = load i32, i32* %center_x, align 4
  %sub1306 = sub nsw i32 %1130, %1131
  %1132 = load i32, i32* %search_range.addr, align 4
  %add1307 = add nsw i32 %sub1306, %1132
  %idxprom1308 = sext i32 %add1307 to i64
  %arrayidx1309 = getelementptr inbounds i32, i32* %1129, i64 %idxprom1308
  store i32 %1124, i32* %arrayidx1309, align 4
  %1133 = load i32, i32* %mcost, align 4
  %1134 = load i32, i32* %min_mcost.addr, align 4
  %cmp1310 = icmp slt i32 %1133, %1134
  br i1 %cmp1310, label %if.then1312, label %if.end1313

if.then1312:                                      ; preds = %if.then1289
  %1135 = load i32, i32* %cand_x, align 4
  store i32 %1135, i32* %best_x, align 4
  %1136 = load i32, i32* %cand_y, align 4
  store i32 %1136, i32* %best_y, align 4
  %1137 = load i32, i32* %mcost, align 4
  store i32 %1137, i32* %min_mcost.addr, align 4
  store i32 0, i32* %iAbort, align 4
  br label %if.end1313

if.end1313:                                       ; preds = %if.then1312, %if.then1289
  br label %if.end1314

if.end1314:                                       ; preds = %if.end1313, %if.then1279
  br label %if.end1315

if.end1315:                                       ; preds = %if.end1314, %land.lhs.true1274, %for.body1263
  br label %for.inc1316

for.inc1316:                                      ; preds = %if.end1315
  %1138 = load i32, i32* %m, align 4
  %inc1317 = add nsw i32 %1138, 1
  store i32 %inc1317, i32* %m, align 4
  br label %for.cond1260

for.end1318:                                      ; preds = %for.cond1260
  %1139 = load i32, i32* %iAbort, align 4
  %tobool1319 = icmp ne i32 %1139, 0
  br i1 %tobool1319, label %if.then1320, label %if.end1321

if.then1320:                                      ; preds = %for.end1318
  br label %for.end1324

if.end1321:                                       ; preds = %for.end1318
  %1140 = load i32, i32* %best_x, align 4
  store i32 %1140, i32* %iXMinNow, align 4
  %1141 = load i32, i32* %best_y, align 4
  store i32 %1141, i32* %iYMinNow, align 4
  br label %for.inc1322

for.inc1322:                                      ; preds = %if.end1321
  %1142 = load i32, i32* %i, align 4
  %inc1323 = add nsw i32 %1142, 1
  store i32 %inc1323, i32* %i, align 4
  br label %for.cond1256

for.end1324:                                      ; preds = %if.then1320, %for.cond1256
  br label %third_step

third_step:                                       ; preds = %for.end1324, %if.then1239, %if.then1221, %if.then1200, %if.then1109, %if.then1091, %if.then1070, %if.then988, %if.then970, %if.then949, %if.then714, %if.then696, %if.then675, %if.then381
  %1143 = load i32, i32* %best_x, align 4
  store i32 %1143, i32* %iXMinNow, align 4
  %1144 = load i32, i32* %best_y, align 4
  store i32 %1144, i32* %iYMinNow, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond1325

for.cond1325:                                     ; preds = %for.inc1391, %third_step
  %1145 = load i32, i32* %i, align 4
  %1146 = load i32, i32* %search_range.addr, align 4
  %cmp1326 = icmp slt i32 %1145, %1146
  br i1 %cmp1326, label %for.body1328, label %for.end1393

for.body1328:                                     ; preds = %for.cond1325
  store i32 65536, i32* %iSADLayer, align 4
  store i32 1, i32* %iAbort, align 4
  store i32 0, i32* %m, align 4
  br label %for.cond1329

for.cond1329:                                     ; preds = %for.inc1385, %for.body1328
  %1147 = load i32, i32* %m, align 4
  %cmp1330 = icmp slt i32 %1147, 4
  br i1 %cmp1330, label %for.body1332, label %for.end1387

for.body1332:                                     ; preds = %for.cond1329
  %1148 = load i32, i32* %iXMinNow, align 4
  %1149 = load i32, i32* %m, align 4
  %idxprom1333 = sext i32 %1149 to i64
  %arrayidx1334 = getelementptr inbounds [4 x i32], [4 x i32]* @FastIntegerPelBlockMotionSearch.Diamond_x, i64 0, i64 %idxprom1333
  %1150 = load i32, i32* %arrayidx1334, align 4
  %add1335 = add nsw i32 %1148, %1150
  store i32 %add1335, i32* %cand_x, align 4
  %1151 = load i32, i32* %iYMinNow, align 4
  %1152 = load i32, i32* %m, align 4
  %idxprom1336 = sext i32 %1152 to i64
  %arrayidx1337 = getelementptr inbounds [4 x i32], [4 x i32]* @FastIntegerPelBlockMotionSearch.Diamond_y, i64 0, i64 %idxprom1336
  %1153 = load i32, i32* %arrayidx1337, align 4
  %add1338 = add nsw i32 %1151, %1153
  store i32 %add1338, i32* %cand_y, align 4
  %1154 = load i32, i32* %cand_x, align 4
  %1155 = load i32, i32* %center_x, align 4
  %sub1339 = sub nsw i32 %1154, %1155
  %call1340 = call i32 @abs(i32 %sub1339) #6
  %1156 = load i32, i32* %search_range.addr, align 4
  %cmp1341 = icmp sle i32 %call1340, %1156
  br i1 %cmp1341, label %land.lhs.true1343, label %if.end1384

land.lhs.true1343:                                ; preds = %for.body1332
  %1157 = load i32, i32* %cand_y, align 4
  %1158 = load i32, i32* %center_y, align 4
  %sub1344 = sub nsw i32 %1157, %1158
  %call1345 = call i32 @abs(i32 %sub1344) #6
  %1159 = load i32, i32* %search_range.addr, align 4
  %cmp1346 = icmp sle i32 %call1345, %1159
  br i1 %cmp1346, label %if.then1348, label %if.end1384

if.then1348:                                      ; preds = %land.lhs.true1343
  %1160 = load i32**, i32*** @McostState, align 8
  %1161 = load i32, i32* %cand_y, align 4
  %1162 = load i32, i32* %center_y, align 4
  %sub1349 = sub nsw i32 %1161, %1162
  %1163 = load i32, i32* %search_range.addr, align 4
  %add1350 = add nsw i32 %sub1349, %1163
  %idxprom1351 = sext i32 %add1350 to i64
  %arrayidx1352 = getelementptr inbounds i32*, i32** %1160, i64 %idxprom1351
  %1164 = load i32*, i32** %arrayidx1352, align 8
  %1165 = load i32, i32* %cand_x, align 4
  %1166 = load i32, i32* %center_x, align 4
  %sub1353 = sub nsw i32 %1165, %1166
  %1167 = load i32, i32* %search_range.addr, align 4
  %add1354 = add nsw i32 %sub1353, %1167
  %idxprom1355 = sext i32 %add1354 to i64
  %arrayidx1356 = getelementptr inbounds i32, i32* %1164, i64 %idxprom1355
  %1168 = load i32, i32* %arrayidx1356, align 4
  %tobool1357 = icmp ne i32 %1168, 0
  br i1 %tobool1357, label %if.end1383, label %if.then1358

if.then1358:                                      ; preds = %if.then1348
  %1169 = load i32, i32* %lambda_factor, align 4
  %1170 = load i32*, i32** @mvbits, align 8
  %1171 = load i32, i32* %cand_x, align 4
  %1172 = load i32, i32* %mvshift, align 4
  %shl1359 = shl i32 %1171, %1172
  %1173 = load i32, i32* %pred_x, align 4
  %sub1360 = sub nsw i32 %shl1359, %1173
  %idxprom1361 = sext i32 %sub1360 to i64
  %arrayidx1362 = getelementptr inbounds i32, i32* %1170, i64 %idxprom1361
  %1174 = load i32, i32* %arrayidx1362, align 4
  %1175 = load i32*, i32** @mvbits, align 8
  %1176 = load i32, i32* %cand_y, align 4
  %1177 = load i32, i32* %mvshift, align 4
  %shl1363 = shl i32 %1176, %1177
  %1178 = load i32, i32* %pred_y, align 4
  %sub1364 = sub nsw i32 %shl1363, %1178
  %idxprom1365 = sext i32 %sub1364 to i64
  %arrayidx1366 = getelementptr inbounds i32, i32* %1175, i64 %idxprom1365
  %1179 = load i32, i32* %arrayidx1366, align 4
  %add1367 = add nsw i32 %1174, %1179
  %mul1368 = mul nsw i32 %1169, %add1367
  %shr1369 = ashr i32 %mul1368, 16
  store i32 %shr1369, i32* %mcost, align 4
  %1180 = load i16*, i16** %ref_pic, align 8
  %1181 = load i16**, i16*** %orig_pic.addr, align 8
  %1182 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %1183 = load i32, i32* %blocksize_y, align 4
  %1184 = load i32, i32* %blocksize_x, align 4
  %1185 = load i32, i32* %blocksize_x4, align 4
  %1186 = load i32, i32* %mcost, align 4
  %1187 = load i32, i32* %min_mcost.addr, align 4
  %1188 = load i32, i32* %cand_x, align 4
  %1189 = load i32, i32* %cand_y, align 4
  %call1370 = call i32 @PartCalMad(i16* %1180, i16** %1181, i16* (i32, i16*, i32, i32, i32, i32)* %1182, i32 %1183, i32 %1184, i32 %1185, i32 %1186, i32 %1187, i32 %1188, i32 %1189)
  store i32 %call1370, i32* %mcost, align 4
  %1190 = load i32, i32* %mcost, align 4
  %1191 = load i32**, i32*** @McostState, align 8
  %1192 = load i32, i32* %cand_y, align 4
  %1193 = load i32, i32* %center_y, align 4
  %sub1371 = sub nsw i32 %1192, %1193
  %1194 = load i32, i32* %search_range.addr, align 4
  %add1372 = add nsw i32 %sub1371, %1194
  %idxprom1373 = sext i32 %add1372 to i64
  %arrayidx1374 = getelementptr inbounds i32*, i32** %1191, i64 %idxprom1373
  %1195 = load i32*, i32** %arrayidx1374, align 8
  %1196 = load i32, i32* %cand_x, align 4
  %1197 = load i32, i32* %center_x, align 4
  %sub1375 = sub nsw i32 %1196, %1197
  %1198 = load i32, i32* %search_range.addr, align 4
  %add1376 = add nsw i32 %sub1375, %1198
  %idxprom1377 = sext i32 %add1376 to i64
  %arrayidx1378 = getelementptr inbounds i32, i32* %1195, i64 %idxprom1377
  store i32 %1190, i32* %arrayidx1378, align 4
  %1199 = load i32, i32* %mcost, align 4
  %1200 = load i32, i32* %min_mcost.addr, align 4
  %cmp1379 = icmp slt i32 %1199, %1200
  br i1 %cmp1379, label %if.then1381, label %if.end1382

if.then1381:                                      ; preds = %if.then1358
  %1201 = load i32, i32* %cand_x, align 4
  store i32 %1201, i32* %best_x, align 4
  %1202 = load i32, i32* %cand_y, align 4
  store i32 %1202, i32* %best_y, align 4
  %1203 = load i32, i32* %mcost, align 4
  store i32 %1203, i32* %min_mcost.addr, align 4
  store i32 0, i32* %iAbort, align 4
  br label %if.end1382

if.end1382:                                       ; preds = %if.then1381, %if.then1358
  br label %if.end1383

if.end1383:                                       ; preds = %if.end1382, %if.then1348
  br label %if.end1384

if.end1384:                                       ; preds = %if.end1383, %land.lhs.true1343, %for.body1332
  br label %for.inc1385

for.inc1385:                                      ; preds = %if.end1384
  %1204 = load i32, i32* %m, align 4
  %inc1386 = add nsw i32 %1204, 1
  store i32 %inc1386, i32* %m, align 4
  br label %for.cond1329

for.end1387:                                      ; preds = %for.cond1329
  %1205 = load i32, i32* %iAbort, align 4
  %tobool1388 = icmp ne i32 %1205, 0
  br i1 %tobool1388, label %if.then1389, label %if.end1390

if.then1389:                                      ; preds = %for.end1387
  br label %for.end1393

if.end1390:                                       ; preds = %for.end1387
  %1206 = load i32, i32* %best_x, align 4
  store i32 %1206, i32* %iXMinNow, align 4
  %1207 = load i32, i32* %best_y, align 4
  store i32 %1207, i32* %iYMinNow, align 4
  br label %for.inc1391

for.inc1391:                                      ; preds = %if.end1390
  %1208 = load i32, i32* %i, align 4
  %inc1392 = add nsw i32 %1208, 1
  store i32 %inc1392, i32* %i, align 4
  br label %for.cond1325

for.end1393:                                      ; preds = %if.then1389, %for.cond1325
  %1209 = load i32, i32* %best_x, align 4
  %1210 = load i32, i32* %pic_pix_x.addr, align 4
  %sub1394 = sub nsw i32 %1209, %1210
  %conv1395 = trunc i32 %sub1394 to i16
  %1211 = load i16*, i16** %mv_x.addr, align 8
  store i16 %conv1395, i16* %1211, align 2
  %1212 = load i32, i32* %best_y, align 4
  %1213 = load i32, i32* %pic_pix_y.addr, align 4
  %sub1396 = sub nsw i32 %1212, %1213
  %conv1397 = trunc i32 %sub1396 to i16
  %1214 = load i16*, i16** %mv_y.addr, align 8
  store i16 %conv1397, i16* %1214, align 2
  %1215 = load i32, i32* %min_mcost.addr, align 4
  %1216 = load i32, i32* %canary
  %1217 = icmp eq i32 %1216, 319419337
  br i1 %1217, label %1218, label %func_exit

1218:                                             ; preds = %for.end1393, %func_exit
  ret i32 %1215

func_exit:                                        ; preds = %for.end1393
  call void @detect_breach()
  br label %1218
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @get_mem_bwmincost.62(i32****** %mv) #0 {
entry:
  %k = alloca i32, align 4
  %i = alloca i32, align 4
  %canary = alloca i32
  store i32 2124900253, i32* %canary
  %l = alloca i32, align 4
  %j = alloca i32, align 4
  %mv.addr = alloca i32******, align 8
  store i32****** %mv, i32******* %mv.addr, align 8
  %0 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %width = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %0, i32 0, i32 13
  %1 = load i32, i32* %width, align 4
  %div = sdiv i32 %1, 4
  %conv = sext i32 %div to i64
  %call = call noalias i8* @calloc(i64 %conv, i64 8) #5
  %2 = bitcast i8* %call to i32*****
  %3 = load i32******, i32******* %mv.addr, align 8
  store i32***** %2, i32****** %3, align 8
  %cmp = icmp eq i32***** %2, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @no_mem_exit(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc68, %if.end
  %4 = load i32, i32* %i, align 4
  %5 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %width2 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %5, i32 0, i32 13
  %6 = load i32, i32* %width2, align 4
  %div3 = sdiv i32 %6, 4
  %cmp4 = icmp slt i32 %4, %div3
  br i1 %cmp4, label %for.body, label %for.end70

for.body:                                         ; preds = %for.cond
  %7 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %7, i32 0, i32 15
  %8 = load i32, i32* %height, align 4
  %div6 = sdiv i32 %8, 4
  %conv7 = sext i32 %div6 to i64
  %call8 = call noalias i8* @calloc(i64 %conv7, i64 8) #5
  %9 = bitcast i8* %call8 to i32****
  %10 = load i32******, i32******* %mv.addr, align 8
  %11 = load i32*****, i32****** %10, align 8
  %12 = load i32, i32* %i, align 4
  %idxprom = sext i32 %12 to i64
  %arrayidx = getelementptr inbounds i32****, i32***** %11, i64 %idxprom
  store i32**** %9, i32***** %arrayidx, align 8
  %cmp9 = icmp eq i32**** %9, null
  br i1 %cmp9, label %if.then11, label %if.end12

if.then11:                                        ; preds = %for.body
  call void @no_mem_exit(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %if.end12

if.end12:                                         ; preds = %if.then11, %for.body
  store i32 0, i32* %j, align 4
  br label %for.cond13

for.cond13:                                       ; preds = %for.inc65, %if.end12
  %13 = load i32, i32* %j, align 4
  %14 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height14 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %14, i32 0, i32 15
  %15 = load i32, i32* %height14, align 4
  %div15 = sdiv i32 %15, 4
  %cmp16 = icmp slt i32 %13, %div15
  br i1 %cmp16, label %for.body18, label %for.end67

for.body18:                                       ; preds = %for.cond13
  %16 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %max_num_references = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %16, i32 0, i32 9
  %17 = load i32, i32* %max_num_references, align 4
  %conv19 = sext i32 %17 to i64
  %call20 = call noalias i8* @calloc(i64 %conv19, i64 8) #5
  %18 = bitcast i8* %call20 to i32***
  %19 = load i32******, i32******* %mv.addr, align 8
  %20 = load i32*****, i32****** %19, align 8
  %21 = load i32, i32* %i, align 4
  %idxprom21 = sext i32 %21 to i64
  %arrayidx22 = getelementptr inbounds i32****, i32***** %20, i64 %idxprom21
  %22 = load i32****, i32***** %arrayidx22, align 8
  %23 = load i32, i32* %j, align 4
  %idxprom23 = sext i32 %23 to i64
  %arrayidx24 = getelementptr inbounds i32***, i32**** %22, i64 %idxprom23
  store i32*** %18, i32**** %arrayidx24, align 8
  %cmp25 = icmp eq i32*** %18, null
  br i1 %cmp25, label %if.then27, label %if.end28

if.then27:                                        ; preds = %for.body18
  call void @no_mem_exit(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %if.end28

if.end28:                                         ; preds = %if.then27, %for.body18
  store i32 0, i32* %k, align 4
  br label %for.cond29

for.cond29:                                       ; preds = %for.inc62, %if.end28
  %24 = load i32, i32* %k, align 4
  %25 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %max_num_references30 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %25, i32 0, i32 9
  %26 = load i32, i32* %max_num_references30, align 4
  %cmp31 = icmp slt i32 %24, %26
  br i1 %cmp31, label %for.body33, label %for.end64

for.body33:                                       ; preds = %for.cond29
  %call34 = call noalias i8* @calloc(i64 9, i64 8) #5
  %27 = bitcast i8* %call34 to i32**
  %28 = load i32******, i32******* %mv.addr, align 8
  %29 = load i32*****, i32****** %28, align 8
  %30 = load i32, i32* %i, align 4
  %idxprom35 = sext i32 %30 to i64
  %arrayidx36 = getelementptr inbounds i32****, i32***** %29, i64 %idxprom35
  %31 = load i32****, i32***** %arrayidx36, align 8
  %32 = load i32, i32* %j, align 4
  %idxprom37 = sext i32 %32 to i64
  %arrayidx38 = getelementptr inbounds i32***, i32**** %31, i64 %idxprom37
  %33 = load i32***, i32**** %arrayidx38, align 8
  %34 = load i32, i32* %k, align 4
  %idxprom39 = sext i32 %34 to i64
  %arrayidx40 = getelementptr inbounds i32**, i32*** %33, i64 %idxprom39
  store i32** %27, i32*** %arrayidx40, align 8
  %cmp41 = icmp eq i32** %27, null
  br i1 %cmp41, label %if.then43, label %if.end44

if.then43:                                        ; preds = %for.body33
  call void @no_mem_exit(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %if.end44

if.end44:                                         ; preds = %if.then43, %for.body33
  store i32 0, i32* %l, align 4
  br label %for.cond45

for.cond45:                                       ; preds = %for.inc, %if.end44
  %35 = load i32, i32* %l, align 4
  %cmp46 = icmp slt i32 %35, 9
  br i1 %cmp46, label %for.body48, label %for.end

for.body48:                                       ; preds = %for.cond45
  %call49 = call noalias i8* @calloc(i64 3, i64 4) #5
  %36 = bitcast i8* %call49 to i32*
  %37 = load i32******, i32******* %mv.addr, align 8
  %38 = load i32*****, i32****** %37, align 8
  %39 = load i32, i32* %i, align 4
  %idxprom50 = sext i32 %39 to i64
  %arrayidx51 = getelementptr inbounds i32****, i32***** %38, i64 %idxprom50
  %40 = load i32****, i32***** %arrayidx51, align 8
  %41 = load i32, i32* %j, align 4
  %idxprom52 = sext i32 %41 to i64
  %arrayidx53 = getelementptr inbounds i32***, i32**** %40, i64 %idxprom52
  %42 = load i32***, i32**** %arrayidx53, align 8
  %43 = load i32, i32* %k, align 4
  %idxprom54 = sext i32 %43 to i64
  %arrayidx55 = getelementptr inbounds i32**, i32*** %42, i64 %idxprom54
  %44 = load i32**, i32*** %arrayidx55, align 8
  %45 = load i32, i32* %l, align 4
  %idxprom56 = sext i32 %45 to i64
  %arrayidx57 = getelementptr inbounds i32*, i32** %44, i64 %idxprom56
  store i32* %36, i32** %arrayidx57, align 8
  %cmp58 = icmp eq i32* %36, null
  br i1 %cmp58, label %if.then60, label %if.end61

if.then60:                                        ; preds = %for.body48
  call void @no_mem_exit(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %if.end61

if.end61:                                         ; preds = %if.then60, %for.body48
  br label %for.inc

for.inc:                                          ; preds = %if.end61
  %46 = load i32, i32* %l, align 4
  %inc = add nsw i32 %46, 1
  store i32 %inc, i32* %l, align 4
  br label %for.cond45

for.end:                                          ; preds = %for.cond45
  br label %for.inc62

for.inc62:                                        ; preds = %for.end
  %47 = load i32, i32* %k, align 4
  %inc63 = add nsw i32 %47, 1
  store i32 %inc63, i32* %k, align 4
  br label %for.cond29

for.end64:                                        ; preds = %for.cond29
  br label %for.inc65

for.inc65:                                        ; preds = %for.end64
  %48 = load i32, i32* %j, align 4
  %inc66 = add nsw i32 %48, 1
  store i32 %inc66, i32* %j, align 4
  br label %for.cond13

for.end67:                                        ; preds = %for.cond13
  br label %for.inc68

for.inc68:                                        ; preds = %for.end67
  %49 = load i32, i32* %i, align 4
  %inc69 = add nsw i32 %49, 1
  store i32 %inc69, i32* %i, align 4
  br label %for.cond

for.end70:                                        ; preds = %for.cond
  %50 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %width71 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %50, i32 0, i32 13
  %51 = load i32, i32* %width71, align 4
  %div72 = sdiv i32 %51, 4
  %52 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height73 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %52, i32 0, i32 15
  %53 = load i32, i32* %height73, align 4
  %mul = mul nsw i32 %div72, %53
  %div74 = sdiv i32 %mul, 4
  %54 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %max_num_references75 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %54, i32 0, i32 9
  %55 = load i32, i32* %max_num_references75, align 4
  %mul76 = mul nsw i32 %div74, %55
  %mul77 = mul nsw i32 %mul76, 9
  %mul78 = mul nsw i32 %mul77, 3
  %conv79 = sext i32 %mul78 to i64
  %mul80 = mul i64 %conv79, 4
  %conv81 = trunc i64 %mul80 to i32
  %56 = load i32, i32* %canary
  %57 = icmp eq i32 %56, 2124900253
  br i1 %57, label %58, label %func_exit

58:                                               ; preds = %for.end70, %func_exit
  ret i32 %conv81

func_exit:                                        ; preds = %for.end70
  call void @detect_breach()
  br label %58
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @get_mem_bwmincost.63(i32****** %mv) #0 {
entry:
  %mv.addr = alloca i32******, align 8
  %i = alloca i32, align 4
  %canary = alloca i32
  store i32 1393625787, i32* %canary
  %k = alloca i32, align 4
  %l = alloca i32, align 4
  %j = alloca i32, align 4
  store i32****** %mv, i32******* %mv.addr, align 8
  %0 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %width = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %0, i32 0, i32 13
  %1 = load i32, i32* %width, align 4
  %div = sdiv i32 %1, 4
  %conv = sext i32 %div to i64
  %call = call noalias i8* @calloc(i64 %conv, i64 8) #5
  %2 = bitcast i8* %call to i32*****
  %3 = load i32******, i32******* %mv.addr, align 8
  store i32***** %2, i32****** %3, align 8
  %cmp = icmp eq i32***** %2, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @no_mem_exit(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc68, %if.end
  %4 = load i32, i32* %i, align 4
  %5 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %width2 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %5, i32 0, i32 13
  %6 = load i32, i32* %width2, align 4
  %div3 = sdiv i32 %6, 4
  %cmp4 = icmp slt i32 %4, %div3
  br i1 %cmp4, label %for.body, label %for.end70

for.body:                                         ; preds = %for.cond
  %7 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %7, i32 0, i32 15
  %8 = load i32, i32* %height, align 4
  %div6 = sdiv i32 %8, 4
  %conv7 = sext i32 %div6 to i64
  %call8 = call noalias i8* @calloc(i64 %conv7, i64 8) #5
  %9 = bitcast i8* %call8 to i32****
  %10 = load i32******, i32******* %mv.addr, align 8
  %11 = load i32*****, i32****** %10, align 8
  %12 = load i32, i32* %i, align 4
  %idxprom = sext i32 %12 to i64
  %arrayidx = getelementptr inbounds i32****, i32***** %11, i64 %idxprom
  store i32**** %9, i32***** %arrayidx, align 8
  %cmp9 = icmp eq i32**** %9, null
  br i1 %cmp9, label %if.then11, label %if.end12

if.then11:                                        ; preds = %for.body
  call void @no_mem_exit(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %if.end12

if.end12:                                         ; preds = %if.then11, %for.body
  store i32 0, i32* %j, align 4
  br label %for.cond13

for.cond13:                                       ; preds = %for.inc65, %if.end12
  %13 = load i32, i32* %j, align 4
  %14 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height14 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %14, i32 0, i32 15
  %15 = load i32, i32* %height14, align 4
  %div15 = sdiv i32 %15, 4
  %cmp16 = icmp slt i32 %13, %div15
  br i1 %cmp16, label %for.body18, label %for.end67

for.body18:                                       ; preds = %for.cond13
  %16 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %max_num_references = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %16, i32 0, i32 9
  %17 = load i32, i32* %max_num_references, align 4
  %conv19 = sext i32 %17 to i64
  %call20 = call noalias i8* @calloc(i64 %conv19, i64 8) #5
  %18 = bitcast i8* %call20 to i32***
  %19 = load i32******, i32******* %mv.addr, align 8
  %20 = load i32*****, i32****** %19, align 8
  %21 = load i32, i32* %i, align 4
  %idxprom21 = sext i32 %21 to i64
  %arrayidx22 = getelementptr inbounds i32****, i32***** %20, i64 %idxprom21
  %22 = load i32****, i32***** %arrayidx22, align 8
  %23 = load i32, i32* %j, align 4
  %idxprom23 = sext i32 %23 to i64
  %arrayidx24 = getelementptr inbounds i32***, i32**** %22, i64 %idxprom23
  store i32*** %18, i32**** %arrayidx24, align 8
  %cmp25 = icmp eq i32*** %18, null
  br i1 %cmp25, label %if.then27, label %if.end28

if.then27:                                        ; preds = %for.body18
  call void @no_mem_exit(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %if.end28

if.end28:                                         ; preds = %if.then27, %for.body18
  store i32 0, i32* %k, align 4
  br label %for.cond29

for.cond29:                                       ; preds = %for.inc62, %if.end28
  %24 = load i32, i32* %k, align 4
  %25 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %max_num_references30 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %25, i32 0, i32 9
  %26 = load i32, i32* %max_num_references30, align 4
  %cmp31 = icmp slt i32 %24, %26
  br i1 %cmp31, label %for.body33, label %for.end64

for.body33:                                       ; preds = %for.cond29
  %call34 = call noalias i8* @calloc(i64 9, i64 8) #5
  %27 = bitcast i8* %call34 to i32**
  %28 = load i32******, i32******* %mv.addr, align 8
  %29 = load i32*****, i32****** %28, align 8
  %30 = load i32, i32* %i, align 4
  %idxprom35 = sext i32 %30 to i64
  %arrayidx36 = getelementptr inbounds i32****, i32***** %29, i64 %idxprom35
  %31 = load i32****, i32***** %arrayidx36, align 8
  %32 = load i32, i32* %j, align 4
  %idxprom37 = sext i32 %32 to i64
  %arrayidx38 = getelementptr inbounds i32***, i32**** %31, i64 %idxprom37
  %33 = load i32***, i32**** %arrayidx38, align 8
  %34 = load i32, i32* %k, align 4
  %idxprom39 = sext i32 %34 to i64
  %arrayidx40 = getelementptr inbounds i32**, i32*** %33, i64 %idxprom39
  store i32** %27, i32*** %arrayidx40, align 8
  %cmp41 = icmp eq i32** %27, null
  br i1 %cmp41, label %if.then43, label %if.end44

if.then43:                                        ; preds = %for.body33
  call void @no_mem_exit(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %if.end44

if.end44:                                         ; preds = %if.then43, %for.body33
  store i32 0, i32* %l, align 4
  br label %for.cond45

for.cond45:                                       ; preds = %for.inc, %if.end44
  %35 = load i32, i32* %l, align 4
  %cmp46 = icmp slt i32 %35, 9
  br i1 %cmp46, label %for.body48, label %for.end

for.body48:                                       ; preds = %for.cond45
  %call49 = call noalias i8* @calloc(i64 3, i64 4) #5
  %36 = bitcast i8* %call49 to i32*
  %37 = load i32******, i32******* %mv.addr, align 8
  %38 = load i32*****, i32****** %37, align 8
  %39 = load i32, i32* %i, align 4
  %idxprom50 = sext i32 %39 to i64
  %arrayidx51 = getelementptr inbounds i32****, i32***** %38, i64 %idxprom50
  %40 = load i32****, i32***** %arrayidx51, align 8
  %41 = load i32, i32* %j, align 4
  %idxprom52 = sext i32 %41 to i64
  %arrayidx53 = getelementptr inbounds i32***, i32**** %40, i64 %idxprom52
  %42 = load i32***, i32**** %arrayidx53, align 8
  %43 = load i32, i32* %k, align 4
  %idxprom54 = sext i32 %43 to i64
  %arrayidx55 = getelementptr inbounds i32**, i32*** %42, i64 %idxprom54
  %44 = load i32**, i32*** %arrayidx55, align 8
  %45 = load i32, i32* %l, align 4
  %idxprom56 = sext i32 %45 to i64
  %arrayidx57 = getelementptr inbounds i32*, i32** %44, i64 %idxprom56
  store i32* %36, i32** %arrayidx57, align 8
  %cmp58 = icmp eq i32* %36, null
  br i1 %cmp58, label %if.then60, label %if.end61

if.then60:                                        ; preds = %for.body48
  call void @no_mem_exit(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %if.end61

if.end61:                                         ; preds = %if.then60, %for.body48
  br label %for.inc

for.inc:                                          ; preds = %if.end61
  %46 = load i32, i32* %l, align 4
  %inc = add nsw i32 %46, 1
  store i32 %inc, i32* %l, align 4
  br label %for.cond45

for.end:                                          ; preds = %for.cond45
  br label %for.inc62

for.inc62:                                        ; preds = %for.end
  %47 = load i32, i32* %k, align 4
  %inc63 = add nsw i32 %47, 1
  store i32 %inc63, i32* %k, align 4
  br label %for.cond29

for.end64:                                        ; preds = %for.cond29
  br label %for.inc65

for.inc65:                                        ; preds = %for.end64
  %48 = load i32, i32* %j, align 4
  %inc66 = add nsw i32 %48, 1
  store i32 %inc66, i32* %j, align 4
  br label %for.cond13

for.end67:                                        ; preds = %for.cond13
  br label %for.inc68

for.inc68:                                        ; preds = %for.end67
  %49 = load i32, i32* %i, align 4
  %inc69 = add nsw i32 %49, 1
  store i32 %inc69, i32* %i, align 4
  br label %for.cond

for.end70:                                        ; preds = %for.cond
  %50 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %width71 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %50, i32 0, i32 13
  %51 = load i32, i32* %width71, align 4
  %div72 = sdiv i32 %51, 4
  %52 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height73 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %52, i32 0, i32 15
  %53 = load i32, i32* %height73, align 4
  %mul = mul nsw i32 %div72, %53
  %div74 = sdiv i32 %mul, 4
  %54 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %max_num_references75 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %54, i32 0, i32 9
  %55 = load i32, i32* %max_num_references75, align 4
  %mul76 = mul nsw i32 %div74, %55
  %mul77 = mul nsw i32 %mul76, 9
  %mul78 = mul nsw i32 %mul77, 3
  %conv79 = sext i32 %mul78 to i64
  %mul80 = mul i64 %conv79, 4
  %conv81 = trunc i64 %mul80 to i32
  %56 = load i32, i32* %canary
  %57 = icmp eq i32 %56, 1393625787
  br i1 %57, label %58, label %func_exit

58:                                               ; preds = %for.end70, %func_exit
  ret i32 %conv81

func_exit:                                        ; preds = %for.end70
  call void @detect_breach()
  br label %58
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @FastIntegerPelBlockMotionSearch.64(i16** %orig_pic, i16 signext %ref, i32 %list, i32 %pic_pix_x, i32 %pic_pix_y, i32 %blocktype, i16 signext %pred_mv_x, i16 signext %pred_mv_y, i16* %mv_x, i16* %mv_y, i32 %search_range, i32 %min_mcost, double %lambda) #0 {
entry:
  %get_ref_line = alloca i16* (i32, i16*, i32, i32, i32, i32)*, align 8
  %ref.addr = alloca i16, align 2
  %center_y = alloca i32, align 4
  %betaSec = alloca float, align 4
  %blocktype.addr = alloca i32, align 4
  %pred_mv_x.addr = alloca i16, align 2
  %pred_mv_y.addr = alloca i16, align 2
  %betaThird = alloca float, align 4
  %height = alloca i32, align 4
  %iYMinNow = alloca i32, align 4
  %mcost = alloca i32, align 4
  %center_x = alloca i32, align 4
  %min_mcost.addr = alloca i32, align 4
  %iSADLayer = alloca i32, align 4
  %ref_pic = alloca i16*, align 8
  %lambda_factor = alloca i32, align 4
  %pos = alloca i32, align 4
  %pic_pix_x.addr = alloca i32, align 4
  %mv_y.addr = alloca i16*, align 8
  %cand_x = alloca i32, align 4
  %canary = alloca i32
  store i32 1316213295, i32* %canary
  %list_offset = alloca i32, align 4
  %mv_x.addr = alloca i16*, align 8
  %blocksize_x = alloca i32, align 4
  %best_x = alloca i32, align 4
  %blocksize_y = alloca i32, align 4
  %search_step = alloca i32, align 4
  %lambda.addr = alloca double, align 8
  %N_Bframe = alloca i32, align 4
  %pred_x = alloca i32, align 4
  %best_y = alloca i32, align 4
  %iAbort = alloca i32, align 4
  %i = alloca i32, align 4
  %iXMinNow = alloca i32, align 4
  %blocksize_x4 = alloca i32, align 4
  %mvshift = alloca i32, align 4
  %m = alloca i32, align 4
  %orig_pic.addr = alloca i16**, align 8
  %search_range.addr = alloca i32, align 4
  %pic_pix_y.addr = alloca i32, align 4
  %list.addr = alloca i32, align 4
  %pred_y = alloca i32, align 4
  %cand_y = alloca i32, align 4
  store i16** %orig_pic, i16*** %orig_pic.addr, align 8
  store i16 %ref, i16* %ref.addr, align 2
  store i32 %list, i32* %list.addr, align 4
  store i32 %pic_pix_x, i32* %pic_pix_x.addr, align 4
  store i32 %pic_pix_y, i32* %pic_pix_y.addr, align 4
  store i32 %blocktype, i32* %blocktype.addr, align 4
  store i16 %pred_mv_x, i16* %pred_mv_x.addr, align 2
  store i16 %pred_mv_y, i16* %pred_mv_y.addr, align 2
  store i16* %mv_x, i16** %mv_x.addr, align 8
  store i16* %mv_y, i16** %mv_y.addr, align 8
  store i32 %search_range, i32* %search_range.addr, align 4
  store i32 %min_mcost, i32* %min_mcost.addr, align 4
  store double %lambda, double* %lambda.addr, align 8
  %0 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %MbaffFrameFlag = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %0, i32 0, i32 90
  %1 = load i32, i32* %MbaffFrameFlag, align 8
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %mb_data = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %2, i32 0, i32 51
  %3 = load %struct.macroblock*, %struct.macroblock** %mb_data, align 8
  %4 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %current_mb_nr = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %4, i32 0, i32 3
  %5 = load i32, i32* %current_mb_nr, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 %idxprom
  %mb_field = getelementptr inbounds %struct.macroblock, %struct.macroblock* %arrayidx, i32 0, i32 22
  %6 = load i32, i32* %mb_field, align 4
  %tobool1 = icmp ne i32 %6, 0
  br i1 %tobool1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %7 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %current_mb_nr2 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %7, i32 0, i32 3
  %8 = load i32, i32* %current_mb_nr2, align 4
  %rem = srem i32 %8, 2
  %tobool3 = icmp ne i32 %rem, 0
  %9 = zext i1 %tobool3 to i64
  %cond = select i1 %tobool3, i32 4, i32 2
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond4 = phi i32 [ %cond, %cond.true ], [ 0, %cond.false ]
  store i32 %cond4, i32* %list_offset, align 4
  %10 = load i32, i32* %list.addr, align 4
  %11 = load i32, i32* %list_offset, align 4
  %add = add nsw i32 %10, %11
  %idxprom5 = sext i32 %add to i64
  %arrayidx6 = getelementptr inbounds [6 x %struct.storable_picture**], [6 x %struct.storable_picture**]* @listX, i64 0, i64 %idxprom5
  %12 = load %struct.storable_picture**, %struct.storable_picture*** %arrayidx6, align 8
  %13 = load i16, i16* %ref.addr, align 2
  %idxprom7 = sext i16 %13 to i64
  %arrayidx8 = getelementptr inbounds %struct.storable_picture*, %struct.storable_picture** %12, i64 %idxprom7
  %14 = load %struct.storable_picture*, %struct.storable_picture** %arrayidx8, align 8
  %imgY_11 = getelementptr inbounds %struct.storable_picture, %struct.storable_picture* %14, i32 0, i32 26
  %15 = load i16*, i16** %imgY_11, align 8
  store i16* %15, i16** %ref_pic, align 8
  %16 = load double, double* %lambda.addr, align 8
  %mul = fmul double 6.553600e+04, %16
  %add9 = fadd double %mul, 5.000000e-01
  %conv = fptosi double %add9 to i32
  store i32 %conv, i32* %lambda_factor, align 4
  store i32 2, i32* %mvshift, align 4
  %17 = load %struct.InputParameters*, %struct.InputParameters** @input, align 8
  %blc_size = getelementptr inbounds %struct.InputParameters, %struct.InputParameters* %17, i32 0, i32 20
  %18 = load i32, i32* %blocktype.addr, align 4
  %idxprom10 = sext i32 %18 to i64
  %arrayidx11 = getelementptr inbounds [8 x [2 x i32]], [8 x [2 x i32]]* %blc_size, i64 0, i64 %idxprom10
  %arrayidx12 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx11, i64 0, i64 1
  %19 = load i32, i32* %arrayidx12, align 4
  store i32 %19, i32* %blocksize_y, align 4
  %20 = load %struct.InputParameters*, %struct.InputParameters** @input, align 8
  %blc_size13 = getelementptr inbounds %struct.InputParameters, %struct.InputParameters* %20, i32 0, i32 20
  %21 = load i32, i32* %blocktype.addr, align 4
  %idxprom14 = sext i32 %21 to i64
  %arrayidx15 = getelementptr inbounds [8 x [2 x i32]], [8 x [2 x i32]]* %blc_size13, i64 0, i64 %idxprom14
  %arrayidx16 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx15, i64 0, i64 0
  %22 = load i32, i32* %arrayidx16, align 8
  store i32 %22, i32* %blocksize_x, align 4
  %23 = load i32, i32* %blocksize_x, align 4
  %shr = ashr i32 %23, 2
  store i32 %shr, i32* %blocksize_x4, align 4
  %24 = load i32, i32* %pic_pix_x.addr, align 4
  %25 = load i32, i32* %mvshift, align 4
  %shl = shl i32 %24, %25
  %26 = load i16, i16* %pred_mv_x.addr, align 2
  %conv17 = sext i16 %26 to i32
  %add18 = add nsw i32 %shl, %conv17
  store i32 %add18, i32* %pred_x, align 4
  %27 = load i32, i32* %pic_pix_y.addr, align 4
  %28 = load i32, i32* %mvshift, align 4
  %shl19 = shl i32 %27, %28
  %29 = load i16, i16* %pred_mv_y.addr, align 2
  %conv20 = sext i16 %29 to i32
  %add21 = add nsw i32 %shl19, %conv20
  store i32 %add21, i32* %pred_y, align 4
  %30 = load i32, i32* %pic_pix_x.addr, align 4
  %31 = load i16*, i16** %mv_x.addr, align 8
  %32 = load i16, i16* %31, align 2
  %conv22 = sext i16 %32 to i32
  %add23 = add nsw i32 %30, %conv22
  store i32 %add23, i32* %center_x, align 4
  %33 = load i32, i32* %pic_pix_y.addr, align 4
  %34 = load i16*, i16** %mv_y.addr, align 8
  %35 = load i16, i16* %34, align 2
  %conv24 = sext i16 %35 to i32
  %add25 = add nsw i32 %33, %conv24
  store i32 %add25, i32* %center_y, align 4
  store i32 0, i32* %best_x, align 4
  store i32 0, i32* %best_y, align 4
  %36 = load %struct.InputParameters*, %struct.InputParameters** @input, align 8
  %successive_Bframe = getelementptr inbounds %struct.InputParameters, %struct.InputParameters* %36, i32 0, i32 34
  %37 = load i32, i32* %successive_Bframe, align 4
  store i32 %37, i32* %N_Bframe, align 4
  %38 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %MbaffFrameFlag26 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %38, i32 0, i32 90
  %39 = load i32, i32* %MbaffFrameFlag26, align 8
  %tobool27 = icmp ne i32 %39, 0
  br i1 %tobool27, label %land.lhs.true28, label %cond.false37

land.lhs.true28:                                  ; preds = %cond.end
  %40 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %mb_data29 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %40, i32 0, i32 51
  %41 = load %struct.macroblock*, %struct.macroblock** %mb_data29, align 8
  %42 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %current_mb_nr30 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %42, i32 0, i32 3
  %43 = load i32, i32* %current_mb_nr30, align 4
  %idxprom31 = sext i32 %43 to i64
  %arrayidx32 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %41, i64 %idxprom31
  %mb_field33 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %arrayidx32, i32 0, i32 22
  %44 = load i32, i32* %mb_field33, align 4
  %tobool34 = icmp ne i32 %44, 0
  br i1 %tobool34, label %cond.true35, label %cond.false37

cond.true35:                                      ; preds = %land.lhs.true28
  %45 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height36 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %45, i32 0, i32 15
  %46 = load i32, i32* %height36, align 4
  %div = sdiv i32 %46, 2
  br label %cond.end39

cond.false37:                                     ; preds = %land.lhs.true28, %cond.end
  %47 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height38 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %47, i32 0, i32 15
  %48 = load i32, i32* %height38, align 4
  br label %cond.end39

cond.end39:                                       ; preds = %cond.false37, %cond.true35
  %cond40 = phi i32 [ %div, %cond.true35 ], [ %48, %cond.false37 ]
  store i32 %cond40, i32* %height, align 4
  %49 = load i32, i32* %center_x, align 4
  %50 = load i32, i32* %search_range.addr, align 4
  %cmp = icmp sgt i32 %49, %50
  br i1 %cmp, label %land.lhs.true42, label %if.else

land.lhs.true42:                                  ; preds = %cond.end39
  %51 = load i32, i32* %center_x, align 4
  %52 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %width = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %52, i32 0, i32 13
  %53 = load i32, i32* %width, align 4
  %sub = sub nsw i32 %53, 1
  %54 = load i32, i32* %search_range.addr, align 4
  %sub43 = sub nsw i32 %sub, %54
  %55 = load i32, i32* %blocksize_x, align 4
  %sub44 = sub nsw i32 %sub43, %55
  %cmp45 = icmp slt i32 %51, %sub44
  br i1 %cmp45, label %land.lhs.true47, label %if.else

land.lhs.true47:                                  ; preds = %land.lhs.true42
  %56 = load i32, i32* %center_y, align 4
  %57 = load i32, i32* %search_range.addr, align 4
  %cmp48 = icmp sgt i32 %56, %57
  br i1 %cmp48, label %land.lhs.true50, label %if.else

land.lhs.true50:                                  ; preds = %land.lhs.true47
  %58 = load i32, i32* %center_y, align 4
  %59 = load i32, i32* %height, align 4
  %sub51 = sub nsw i32 %59, 1
  %60 = load i32, i32* %search_range.addr, align 4
  %sub52 = sub nsw i32 %sub51, %60
  %61 = load i32, i32* %blocksize_y, align 4
  %sub53 = sub nsw i32 %sub52, %61
  %cmp54 = icmp slt i32 %58, %sub53
  br i1 %cmp54, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true50
  store i16* (i32, i16*, i32, i32, i32, i32)* @FastLineX, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  br label %if.end

if.else:                                          ; preds = %land.lhs.true50, %land.lhs.true47, %land.lhs.true42, %cond.end39
  store i16* (i32, i16*, i32, i32, i32, i32)* @UMVLineX, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %62 = load i32**, i32*** @McostState, align 8
  %arrayidx56 = getelementptr inbounds i32*, i32** %62, i64 0
  %63 = load i32*, i32** %arrayidx56, align 8
  %64 = bitcast i32* %63 to i8*
  %65 = load i32, i32* %search_range.addr, align 4
  %mul57 = mul nsw i32 2, %65
  %add58 = add nsw i32 %mul57, 1
  %66 = load i32, i32* %search_range.addr, align 4
  %mul59 = mul nsw i32 2, %66
  %add60 = add nsw i32 %mul59, 1
  %mul61 = mul nsw i32 %add58, %add60
  %mul62 = mul nsw i32 %mul61, 4
  %conv63 = sext i32 %mul62 to i64
  call void @llvm.memset.p0i8.i64(i8* align 4 %64, i8 0, i64 %conv63, i1 false)
  %67 = load i16, i16* %ref.addr, align 2
  %conv64 = sext i16 %67 to i32
  %cmp65 = icmp sgt i32 %conv64, 0
  br i1 %cmp65, label %if.then67, label %if.else89

if.then67:                                        ; preds = %if.end
  %68 = load i32, i32* @pred_SAD_ref, align 4
  %cmp68 = icmp ne i32 %68, 0
  br i1 %cmp68, label %if.then70, label %if.else87

if.then70:                                        ; preds = %if.then67
  %69 = load i32, i32* %blocktype.addr, align 4
  %idxprom71 = sext i32 %69 to i64
  %arrayidx72 = getelementptr inbounds [8 x float], [8 x float]* @Bsize, i64 0, i64 %idxprom71
  %70 = load float, float* %arrayidx72, align 4
  %71 = load i32, i32* @pred_SAD_ref, align 4
  %72 = load i32, i32* @pred_SAD_ref, align 4
  %mul73 = mul nsw i32 %71, %72
  %conv74 = sitofp i32 %mul73 to float
  %div75 = fdiv float %70, %conv74
  %73 = load i32, i32* %blocktype.addr, align 4
  %idxprom76 = sext i32 %73 to i64
  %arrayidx77 = getelementptr inbounds [8 x float], [8 x float]* @AlphaSec, i64 0, i64 %idxprom76
  %74 = load float, float* %arrayidx77, align 4
  %sub78 = fsub float %div75, %74
  store float %sub78, float* %betaSec, align 4
  %75 = load i32, i32* %blocktype.addr, align 4
  %idxprom79 = sext i32 %75 to i64
  %arrayidx80 = getelementptr inbounds [8 x float], [8 x float]* @Bsize, i64 0, i64 %idxprom79
  %76 = load float, float* %arrayidx80, align 4
  %77 = load i32, i32* @pred_SAD_ref, align 4
  %78 = load i32, i32* @pred_SAD_ref, align 4
  %mul81 = mul nsw i32 %77, %78
  %conv82 = sitofp i32 %mul81 to float
  %div83 = fdiv float %76, %conv82
  %79 = load i32, i32* %blocktype.addr, align 4
  %idxprom84 = sext i32 %79 to i64
  %arrayidx85 = getelementptr inbounds [8 x float], [8 x float]* @AlphaThird, i64 0, i64 %idxprom84
  %80 = load float, float* %arrayidx85, align 4
  %sub86 = fsub float %div83, %80
  store float %sub86, float* %betaThird, align 4
  br label %if.end88

if.else87:                                        ; preds = %if.then67
  store float 0.000000e+00, float* %betaSec, align 4
  store float 0.000000e+00, float* %betaThird, align 4
  br label %if.end88

if.end88:                                         ; preds = %if.else87, %if.then70
  br label %if.end137

if.else89:                                        ; preds = %if.end
  %81 = load i32, i32* %blocktype.addr, align 4
  %cmp90 = icmp eq i32 %81, 1
  br i1 %cmp90, label %if.then92, label %if.else114

if.then92:                                        ; preds = %if.else89
  %82 = load i32, i32* @pred_SAD_space, align 4
  %cmp93 = icmp ne i32 %82, 0
  br i1 %cmp93, label %if.then95, label %if.else112

if.then95:                                        ; preds = %if.then92
  %83 = load i32, i32* %blocktype.addr, align 4
  %idxprom96 = sext i32 %83 to i64
  %arrayidx97 = getelementptr inbounds [8 x float], [8 x float]* @Bsize, i64 0, i64 %idxprom96
  %84 = load float, float* %arrayidx97, align 4
  %85 = load i32, i32* @pred_SAD_space, align 4
  %86 = load i32, i32* @pred_SAD_space, align 4
  %mul98 = mul nsw i32 %85, %86
  %conv99 = sitofp i32 %mul98 to float
  %div100 = fdiv float %84, %conv99
  %87 = load i32, i32* %blocktype.addr, align 4
  %idxprom101 = sext i32 %87 to i64
  %arrayidx102 = getelementptr inbounds [8 x float], [8 x float]* @AlphaSec, i64 0, i64 %idxprom101
  %88 = load float, float* %arrayidx102, align 4
  %sub103 = fsub float %div100, %88
  store float %sub103, float* %betaSec, align 4
  %89 = load i32, i32* %blocktype.addr, align 4
  %idxprom104 = sext i32 %89 to i64
  %arrayidx105 = getelementptr inbounds [8 x float], [8 x float]* @Bsize, i64 0, i64 %idxprom104
  %90 = load float, float* %arrayidx105, align 4
  %91 = load i32, i32* @pred_SAD_space, align 4
  %92 = load i32, i32* @pred_SAD_space, align 4
  %mul106 = mul nsw i32 %91, %92
  %conv107 = sitofp i32 %mul106 to float
  %div108 = fdiv float %90, %conv107
  %93 = load i32, i32* %blocktype.addr, align 4
  %idxprom109 = sext i32 %93 to i64
  %arrayidx110 = getelementptr inbounds [8 x float], [8 x float]* @AlphaThird, i64 0, i64 %idxprom109
  %94 = load float, float* %arrayidx110, align 4
  %sub111 = fsub float %div108, %94
  store float %sub111, float* %betaThird, align 4
  br label %if.end113

if.else112:                                       ; preds = %if.then92
  store float 0.000000e+00, float* %betaSec, align 4
  store float 0.000000e+00, float* %betaThird, align 4
  br label %if.end113

if.end113:                                        ; preds = %if.else112, %if.then95
  br label %if.end136

if.else114:                                       ; preds = %if.else89
  %95 = load i32, i32* @pred_SAD_uplayer, align 4
  %cmp115 = icmp ne i32 %95, 0
  br i1 %cmp115, label %if.then117, label %if.else134

if.then117:                                       ; preds = %if.else114
  %96 = load i32, i32* %blocktype.addr, align 4
  %idxprom118 = sext i32 %96 to i64
  %arrayidx119 = getelementptr inbounds [8 x float], [8 x float]* @Bsize, i64 0, i64 %idxprom118
  %97 = load float, float* %arrayidx119, align 4
  %98 = load i32, i32* @pred_SAD_uplayer, align 4
  %99 = load i32, i32* @pred_SAD_uplayer, align 4
  %mul120 = mul nsw i32 %98, %99
  %conv121 = sitofp i32 %mul120 to float
  %div122 = fdiv float %97, %conv121
  %100 = load i32, i32* %blocktype.addr, align 4
  %idxprom123 = sext i32 %100 to i64
  %arrayidx124 = getelementptr inbounds [8 x float], [8 x float]* @AlphaSec, i64 0, i64 %idxprom123
  %101 = load float, float* %arrayidx124, align 4
  %sub125 = fsub float %div122, %101
  store float %sub125, float* %betaSec, align 4
  %102 = load i32, i32* %blocktype.addr, align 4
  %idxprom126 = sext i32 %102 to i64
  %arrayidx127 = getelementptr inbounds [8 x float], [8 x float]* @Bsize, i64 0, i64 %idxprom126
  %103 = load float, float* %arrayidx127, align 4
  %104 = load i32, i32* @pred_SAD_uplayer, align 4
  %105 = load i32, i32* @pred_SAD_uplayer, align 4
  %mul128 = mul nsw i32 %104, %105
  %conv129 = sitofp i32 %mul128 to float
  %div130 = fdiv float %103, %conv129
  %106 = load i32, i32* %blocktype.addr, align 4
  %idxprom131 = sext i32 %106 to i64
  %arrayidx132 = getelementptr inbounds [8 x float], [8 x float]* @AlphaThird, i64 0, i64 %idxprom131
  %107 = load float, float* %arrayidx132, align 4
  %sub133 = fsub float %div130, %107
  store float %sub133, float* %betaThird, align 4
  br label %if.end135

if.else134:                                       ; preds = %if.else114
  store float 0.000000e+00, float* %betaSec, align 4
  store float 0.000000e+00, float* %betaThird, align 4
  br label %if.end135

if.end135:                                        ; preds = %if.else134, %if.then117
  br label %if.end136

if.end136:                                        ; preds = %if.end135, %if.end113
  br label %if.end137

if.end137:                                        ; preds = %if.end136, %if.end88
  %108 = load i32, i32* %center_x, align 4
  store i32 %108, i32* %cand_x, align 4
  %109 = load i32, i32* %center_y, align 4
  store i32 %109, i32* %cand_y, align 4
  %110 = load i32, i32* %lambda_factor, align 4
  %111 = load i32*, i32** @mvbits, align 8
  %112 = load i32, i32* %cand_x, align 4
  %113 = load i32, i32* %mvshift, align 4
  %shl138 = shl i32 %112, %113
  %114 = load i32, i32* %pred_x, align 4
  %sub139 = sub nsw i32 %shl138, %114
  %idxprom140 = sext i32 %sub139 to i64
  %arrayidx141 = getelementptr inbounds i32, i32* %111, i64 %idxprom140
  %115 = load i32, i32* %arrayidx141, align 4
  %116 = load i32*, i32** @mvbits, align 8
  %117 = load i32, i32* %cand_y, align 4
  %118 = load i32, i32* %mvshift, align 4
  %shl142 = shl i32 %117, %118
  %119 = load i32, i32* %pred_y, align 4
  %sub143 = sub nsw i32 %shl142, %119
  %idxprom144 = sext i32 %sub143 to i64
  %arrayidx145 = getelementptr inbounds i32, i32* %116, i64 %idxprom144
  %120 = load i32, i32* %arrayidx145, align 4
  %add146 = add nsw i32 %115, %120
  %mul147 = mul nsw i32 %110, %add146
  %shr148 = ashr i32 %mul147, 16
  store i32 %shr148, i32* %mcost, align 4
  %121 = load i16*, i16** %ref_pic, align 8
  %122 = load i16**, i16*** %orig_pic.addr, align 8
  %123 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %124 = load i32, i32* %blocksize_y, align 4
  %125 = load i32, i32* %blocksize_x, align 4
  %126 = load i32, i32* %blocksize_x4, align 4
  %127 = load i32, i32* %mcost, align 4
  %128 = load i32, i32* %min_mcost.addr, align 4
  %129 = load i32, i32* %cand_x, align 4
  %130 = load i32, i32* %cand_y, align 4
  %call = call i32 @PartCalMad(i16* %121, i16** %122, i16* (i32, i16*, i32, i32, i32, i32)* %123, i32 %124, i32 %125, i32 %126, i32 %127, i32 %128, i32 %129, i32 %130)
  store i32 %call, i32* %mcost, align 4
  %131 = load i32, i32* %mcost, align 4
  %132 = load i32**, i32*** @McostState, align 8
  %133 = load i32, i32* %search_range.addr, align 4
  %idxprom149 = sext i32 %133 to i64
  %arrayidx150 = getelementptr inbounds i32*, i32** %132, i64 %idxprom149
  %134 = load i32*, i32** %arrayidx150, align 8
  %135 = load i32, i32* %search_range.addr, align 4
  %idxprom151 = sext i32 %135 to i64
  %arrayidx152 = getelementptr inbounds i32, i32* %134, i64 %idxprom151
  store i32 %131, i32* %arrayidx152, align 4
  %136 = load i32, i32* %mcost, align 4
  %137 = load i32, i32* %min_mcost.addr, align 4
  %cmp153 = icmp slt i32 %136, %137
  br i1 %cmp153, label %if.then155, label %if.end156

if.then155:                                       ; preds = %if.end137
  %138 = load i32, i32* %mcost, align 4
  store i32 %138, i32* %min_mcost.addr, align 4
  %139 = load i32, i32* %cand_x, align 4
  store i32 %139, i32* %best_x, align 4
  %140 = load i32, i32* %cand_y, align 4
  store i32 %140, i32* %best_y, align 4
  br label %if.end156

if.end156:                                        ; preds = %if.then155, %if.end137
  %141 = load i32, i32* %best_x, align 4
  store i32 %141, i32* %iXMinNow, align 4
  %142 = load i32, i32* %best_y, align 4
  store i32 %142, i32* %iYMinNow, align 4
  store i32 0, i32* %m, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end156
  %143 = load i32, i32* %m, align 4
  %cmp157 = icmp slt i32 %143, 4
  br i1 %cmp157, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %144 = load i32, i32* %iXMinNow, align 4
  %145 = load i32, i32* %m, align 4
  %idxprom159 = sext i32 %145 to i64
  %arrayidx160 = getelementptr inbounds [4 x i32], [4 x i32]* @FastIntegerPelBlockMotionSearch.Diamond_x, i64 0, i64 %idxprom159
  %146 = load i32, i32* %arrayidx160, align 4
  %add161 = add nsw i32 %144, %146
  store i32 %add161, i32* %cand_x, align 4
  %147 = load i32, i32* %iYMinNow, align 4
  %148 = load i32, i32* %m, align 4
  %idxprom162 = sext i32 %148 to i64
  %arrayidx163 = getelementptr inbounds [4 x i32], [4 x i32]* @FastIntegerPelBlockMotionSearch.Diamond_y, i64 0, i64 %idxprom162
  %149 = load i32, i32* %arrayidx163, align 4
  %add164 = add nsw i32 %147, %149
  store i32 %add164, i32* %cand_y, align 4
  %150 = load i32, i32* %cand_x, align 4
  %151 = load i32, i32* %center_x, align 4
  %sub165 = sub nsw i32 %150, %151
  %call166 = call i32 @abs(i32 %sub165) #6
  %152 = load i32, i32* %search_range.addr, align 4
  %cmp167 = icmp sle i32 %call166, %152
  br i1 %cmp167, label %land.lhs.true169, label %if.end210

land.lhs.true169:                                 ; preds = %for.body
  %153 = load i32, i32* %cand_y, align 4
  %154 = load i32, i32* %center_y, align 4
  %sub170 = sub nsw i32 %153, %154
  %call171 = call i32 @abs(i32 %sub170) #6
  %155 = load i32, i32* %search_range.addr, align 4
  %cmp172 = icmp sle i32 %call171, %155
  br i1 %cmp172, label %if.then174, label %if.end210

if.then174:                                       ; preds = %land.lhs.true169
  %156 = load i32**, i32*** @McostState, align 8
  %157 = load i32, i32* %cand_y, align 4
  %158 = load i32, i32* %center_y, align 4
  %sub175 = sub nsw i32 %157, %158
  %159 = load i32, i32* %search_range.addr, align 4
  %add176 = add nsw i32 %sub175, %159
  %idxprom177 = sext i32 %add176 to i64
  %arrayidx178 = getelementptr inbounds i32*, i32** %156, i64 %idxprom177
  %160 = load i32*, i32** %arrayidx178, align 8
  %161 = load i32, i32* %cand_x, align 4
  %162 = load i32, i32* %center_x, align 4
  %sub179 = sub nsw i32 %161, %162
  %163 = load i32, i32* %search_range.addr, align 4
  %add180 = add nsw i32 %sub179, %163
  %idxprom181 = sext i32 %add180 to i64
  %arrayidx182 = getelementptr inbounds i32, i32* %160, i64 %idxprom181
  %164 = load i32, i32* %arrayidx182, align 4
  %tobool183 = icmp ne i32 %164, 0
  br i1 %tobool183, label %if.end209, label %if.then184

if.then184:                                       ; preds = %if.then174
  %165 = load i32, i32* %lambda_factor, align 4
  %166 = load i32*, i32** @mvbits, align 8
  %167 = load i32, i32* %cand_x, align 4
  %168 = load i32, i32* %mvshift, align 4
  %shl185 = shl i32 %167, %168
  %169 = load i32, i32* %pred_x, align 4
  %sub186 = sub nsw i32 %shl185, %169
  %idxprom187 = sext i32 %sub186 to i64
  %arrayidx188 = getelementptr inbounds i32, i32* %166, i64 %idxprom187
  %170 = load i32, i32* %arrayidx188, align 4
  %171 = load i32*, i32** @mvbits, align 8
  %172 = load i32, i32* %cand_y, align 4
  %173 = load i32, i32* %mvshift, align 4
  %shl189 = shl i32 %172, %173
  %174 = load i32, i32* %pred_y, align 4
  %sub190 = sub nsw i32 %shl189, %174
  %idxprom191 = sext i32 %sub190 to i64
  %arrayidx192 = getelementptr inbounds i32, i32* %171, i64 %idxprom191
  %175 = load i32, i32* %arrayidx192, align 4
  %add193 = add nsw i32 %170, %175
  %mul194 = mul nsw i32 %165, %add193
  %shr195 = ashr i32 %mul194, 16
  store i32 %shr195, i32* %mcost, align 4
  %176 = load i16*, i16** %ref_pic, align 8
  %177 = load i16**, i16*** %orig_pic.addr, align 8
  %178 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %179 = load i32, i32* %blocksize_y, align 4
  %180 = load i32, i32* %blocksize_x, align 4
  %181 = load i32, i32* %blocksize_x4, align 4
  %182 = load i32, i32* %mcost, align 4
  %183 = load i32, i32* %min_mcost.addr, align 4
  %184 = load i32, i32* %cand_x, align 4
  %185 = load i32, i32* %cand_y, align 4
  %call196 = call i32 @PartCalMad(i16* %176, i16** %177, i16* (i32, i16*, i32, i32, i32, i32)* %178, i32 %179, i32 %180, i32 %181, i32 %182, i32 %183, i32 %184, i32 %185)
  store i32 %call196, i32* %mcost, align 4
  %186 = load i32, i32* %mcost, align 4
  %187 = load i32**, i32*** @McostState, align 8
  %188 = load i32, i32* %cand_y, align 4
  %189 = load i32, i32* %center_y, align 4
  %sub197 = sub nsw i32 %188, %189
  %190 = load i32, i32* %search_range.addr, align 4
  %add198 = add nsw i32 %sub197, %190
  %idxprom199 = sext i32 %add198 to i64
  %arrayidx200 = getelementptr inbounds i32*, i32** %187, i64 %idxprom199
  %191 = load i32*, i32** %arrayidx200, align 8
  %192 = load i32, i32* %cand_x, align 4
  %193 = load i32, i32* %center_x, align 4
  %sub201 = sub nsw i32 %192, %193
  %194 = load i32, i32* %search_range.addr, align 4
  %add202 = add nsw i32 %sub201, %194
  %idxprom203 = sext i32 %add202 to i64
  %arrayidx204 = getelementptr inbounds i32, i32* %191, i64 %idxprom203
  store i32 %186, i32* %arrayidx204, align 4
  %195 = load i32, i32* %mcost, align 4
  %196 = load i32, i32* %min_mcost.addr, align 4
  %cmp205 = icmp slt i32 %195, %196
  br i1 %cmp205, label %if.then207, label %if.end208

if.then207:                                       ; preds = %if.then184
  %197 = load i32, i32* %cand_x, align 4
  store i32 %197, i32* %best_x, align 4
  %198 = load i32, i32* %cand_y, align 4
  store i32 %198, i32* %best_y, align 4
  %199 = load i32, i32* %mcost, align 4
  store i32 %199, i32* %min_mcost.addr, align 4
  br label %if.end208

if.end208:                                        ; preds = %if.then207, %if.then184
  br label %if.end209

if.end209:                                        ; preds = %if.end208, %if.then174
  br label %if.end210

if.end210:                                        ; preds = %if.end209, %land.lhs.true169, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end210
  %200 = load i32, i32* %m, align 4
  %inc = add nsw i32 %200, 1
  store i32 %inc, i32* %m, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %201 = load i32, i32* %center_x, align 4
  %202 = load i32, i32* %pic_pix_x.addr, align 4
  %cmp211 = icmp ne i32 %201, %202
  br i1 %cmp211, label %if.then215, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.end
  %203 = load i32, i32* %center_y, align 4
  %204 = load i32, i32* %pic_pix_y.addr, align 4
  %cmp213 = icmp ne i32 %203, %204
  br i1 %cmp213, label %if.then215, label %if.end321

if.then215:                                       ; preds = %lor.lhs.false, %for.end
  %205 = load i32, i32* %pic_pix_x.addr, align 4
  store i32 %205, i32* %cand_x, align 4
  %206 = load i32, i32* %pic_pix_y.addr, align 4
  store i32 %206, i32* %cand_y, align 4
  %207 = load i32, i32* %cand_x, align 4
  %208 = load i32, i32* %center_x, align 4
  %sub216 = sub nsw i32 %207, %208
  %call217 = call i32 @abs(i32 %sub216) #6
  %209 = load i32, i32* %search_range.addr, align 4
  %cmp218 = icmp sle i32 %call217, %209
  br i1 %cmp218, label %land.lhs.true220, label %if.end261

land.lhs.true220:                                 ; preds = %if.then215
  %210 = load i32, i32* %cand_y, align 4
  %211 = load i32, i32* %center_y, align 4
  %sub221 = sub nsw i32 %210, %211
  %call222 = call i32 @abs(i32 %sub221) #6
  %212 = load i32, i32* %search_range.addr, align 4
  %cmp223 = icmp sle i32 %call222, %212
  br i1 %cmp223, label %if.then225, label %if.end261

if.then225:                                       ; preds = %land.lhs.true220
  %213 = load i32**, i32*** @McostState, align 8
  %214 = load i32, i32* %cand_y, align 4
  %215 = load i32, i32* %center_y, align 4
  %sub226 = sub nsw i32 %214, %215
  %216 = load i32, i32* %search_range.addr, align 4
  %add227 = add nsw i32 %sub226, %216
  %idxprom228 = sext i32 %add227 to i64
  %arrayidx229 = getelementptr inbounds i32*, i32** %213, i64 %idxprom228
  %217 = load i32*, i32** %arrayidx229, align 8
  %218 = load i32, i32* %cand_x, align 4
  %219 = load i32, i32* %center_x, align 4
  %sub230 = sub nsw i32 %218, %219
  %220 = load i32, i32* %search_range.addr, align 4
  %add231 = add nsw i32 %sub230, %220
  %idxprom232 = sext i32 %add231 to i64
  %arrayidx233 = getelementptr inbounds i32, i32* %217, i64 %idxprom232
  %221 = load i32, i32* %arrayidx233, align 4
  %tobool234 = icmp ne i32 %221, 0
  br i1 %tobool234, label %if.end260, label %if.then235

if.then235:                                       ; preds = %if.then225
  %222 = load i32, i32* %lambda_factor, align 4
  %223 = load i32*, i32** @mvbits, align 8
  %224 = load i32, i32* %cand_x, align 4
  %225 = load i32, i32* %mvshift, align 4
  %shl236 = shl i32 %224, %225
  %226 = load i32, i32* %pred_x, align 4
  %sub237 = sub nsw i32 %shl236, %226
  %idxprom238 = sext i32 %sub237 to i64
  %arrayidx239 = getelementptr inbounds i32, i32* %223, i64 %idxprom238
  %227 = load i32, i32* %arrayidx239, align 4
  %228 = load i32*, i32** @mvbits, align 8
  %229 = load i32, i32* %cand_y, align 4
  %230 = load i32, i32* %mvshift, align 4
  %shl240 = shl i32 %229, %230
  %231 = load i32, i32* %pred_y, align 4
  %sub241 = sub nsw i32 %shl240, %231
  %idxprom242 = sext i32 %sub241 to i64
  %arrayidx243 = getelementptr inbounds i32, i32* %228, i64 %idxprom242
  %232 = load i32, i32* %arrayidx243, align 4
  %add244 = add nsw i32 %227, %232
  %mul245 = mul nsw i32 %222, %add244
  %shr246 = ashr i32 %mul245, 16
  store i32 %shr246, i32* %mcost, align 4
  %233 = load i16*, i16** %ref_pic, align 8
  %234 = load i16**, i16*** %orig_pic.addr, align 8
  %235 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %236 = load i32, i32* %blocksize_y, align 4
  %237 = load i32, i32* %blocksize_x, align 4
  %238 = load i32, i32* %blocksize_x4, align 4
  %239 = load i32, i32* %mcost, align 4
  %240 = load i32, i32* %min_mcost.addr, align 4
  %241 = load i32, i32* %cand_x, align 4
  %242 = load i32, i32* %cand_y, align 4
  %call247 = call i32 @PartCalMad(i16* %233, i16** %234, i16* (i32, i16*, i32, i32, i32, i32)* %235, i32 %236, i32 %237, i32 %238, i32 %239, i32 %240, i32 %241, i32 %242)
  store i32 %call247, i32* %mcost, align 4
  %243 = load i32, i32* %mcost, align 4
  %244 = load i32**, i32*** @McostState, align 8
  %245 = load i32, i32* %cand_y, align 4
  %246 = load i32, i32* %center_y, align 4
  %sub248 = sub nsw i32 %245, %246
  %247 = load i32, i32* %search_range.addr, align 4
  %add249 = add nsw i32 %sub248, %247
  %idxprom250 = sext i32 %add249 to i64
  %arrayidx251 = getelementptr inbounds i32*, i32** %244, i64 %idxprom250
  %248 = load i32*, i32** %arrayidx251, align 8
  %249 = load i32, i32* %cand_x, align 4
  %250 = load i32, i32* %center_x, align 4
  %sub252 = sub nsw i32 %249, %250
  %251 = load i32, i32* %search_range.addr, align 4
  %add253 = add nsw i32 %sub252, %251
  %idxprom254 = sext i32 %add253 to i64
  %arrayidx255 = getelementptr inbounds i32, i32* %248, i64 %idxprom254
  store i32 %243, i32* %arrayidx255, align 4
  %252 = load i32, i32* %mcost, align 4
  %253 = load i32, i32* %min_mcost.addr, align 4
  %cmp256 = icmp slt i32 %252, %253
  br i1 %cmp256, label %if.then258, label %if.end259

if.then258:                                       ; preds = %if.then235
  %254 = load i32, i32* %cand_x, align 4
  store i32 %254, i32* %best_x, align 4
  %255 = load i32, i32* %cand_y, align 4
  store i32 %255, i32* %best_y, align 4
  %256 = load i32, i32* %mcost, align 4
  store i32 %256, i32* %min_mcost.addr, align 4
  br label %if.end259

if.end259:                                        ; preds = %if.then258, %if.then235
  br label %if.end260

if.end260:                                        ; preds = %if.end259, %if.then225
  br label %if.end261

if.end261:                                        ; preds = %if.end260, %land.lhs.true220, %if.then215
  %257 = load i32, i32* %best_x, align 4
  store i32 %257, i32* %iXMinNow, align 4
  %258 = load i32, i32* %best_y, align 4
  store i32 %258, i32* %iYMinNow, align 4
  store i32 0, i32* %m, align 4
  br label %for.cond262

for.cond262:                                      ; preds = %for.inc318, %if.end261
  %259 = load i32, i32* %m, align 4
  %cmp263 = icmp slt i32 %259, 4
  br i1 %cmp263, label %for.body265, label %for.end320

for.body265:                                      ; preds = %for.cond262
  %260 = load i32, i32* %iXMinNow, align 4
  %261 = load i32, i32* %m, align 4
  %idxprom266 = sext i32 %261 to i64
  %arrayidx267 = getelementptr inbounds [4 x i32], [4 x i32]* @FastIntegerPelBlockMotionSearch.Diamond_x, i64 0, i64 %idxprom266
  %262 = load i32, i32* %arrayidx267, align 4
  %add268 = add nsw i32 %260, %262
  store i32 %add268, i32* %cand_x, align 4
  %263 = load i32, i32* %iYMinNow, align 4
  %264 = load i32, i32* %m, align 4
  %idxprom269 = sext i32 %264 to i64
  %arrayidx270 = getelementptr inbounds [4 x i32], [4 x i32]* @FastIntegerPelBlockMotionSearch.Diamond_y, i64 0, i64 %idxprom269
  %265 = load i32, i32* %arrayidx270, align 4
  %add271 = add nsw i32 %263, %265
  store i32 %add271, i32* %cand_y, align 4
  %266 = load i32, i32* %cand_x, align 4
  %267 = load i32, i32* %center_x, align 4
  %sub272 = sub nsw i32 %266, %267
  %call273 = call i32 @abs(i32 %sub272) #6
  %268 = load i32, i32* %search_range.addr, align 4
  %cmp274 = icmp sle i32 %call273, %268
  br i1 %cmp274, label %land.lhs.true276, label %if.end317

land.lhs.true276:                                 ; preds = %for.body265
  %269 = load i32, i32* %cand_y, align 4
  %270 = load i32, i32* %center_y, align 4
  %sub277 = sub nsw i32 %269, %270
  %call278 = call i32 @abs(i32 %sub277) #6
  %271 = load i32, i32* %search_range.addr, align 4
  %cmp279 = icmp sle i32 %call278, %271
  br i1 %cmp279, label %if.then281, label %if.end317

if.then281:                                       ; preds = %land.lhs.true276
  %272 = load i32**, i32*** @McostState, align 8
  %273 = load i32, i32* %cand_y, align 4
  %274 = load i32, i32* %center_y, align 4
  %sub282 = sub nsw i32 %273, %274
  %275 = load i32, i32* %search_range.addr, align 4
  %add283 = add nsw i32 %sub282, %275
  %idxprom284 = sext i32 %add283 to i64
  %arrayidx285 = getelementptr inbounds i32*, i32** %272, i64 %idxprom284
  %276 = load i32*, i32** %arrayidx285, align 8
  %277 = load i32, i32* %cand_x, align 4
  %278 = load i32, i32* %center_x, align 4
  %sub286 = sub nsw i32 %277, %278
  %279 = load i32, i32* %search_range.addr, align 4
  %add287 = add nsw i32 %sub286, %279
  %idxprom288 = sext i32 %add287 to i64
  %arrayidx289 = getelementptr inbounds i32, i32* %276, i64 %idxprom288
  %280 = load i32, i32* %arrayidx289, align 4
  %tobool290 = icmp ne i32 %280, 0
  br i1 %tobool290, label %if.end316, label %if.then291

if.then291:                                       ; preds = %if.then281
  %281 = load i32, i32* %lambda_factor, align 4
  %282 = load i32*, i32** @mvbits, align 8
  %283 = load i32, i32* %cand_x, align 4
  %284 = load i32, i32* %mvshift, align 4
  %shl292 = shl i32 %283, %284
  %285 = load i32, i32* %pred_x, align 4
  %sub293 = sub nsw i32 %shl292, %285
  %idxprom294 = sext i32 %sub293 to i64
  %arrayidx295 = getelementptr inbounds i32, i32* %282, i64 %idxprom294
  %286 = load i32, i32* %arrayidx295, align 4
  %287 = load i32*, i32** @mvbits, align 8
  %288 = load i32, i32* %cand_y, align 4
  %289 = load i32, i32* %mvshift, align 4
  %shl296 = shl i32 %288, %289
  %290 = load i32, i32* %pred_y, align 4
  %sub297 = sub nsw i32 %shl296, %290
  %idxprom298 = sext i32 %sub297 to i64
  %arrayidx299 = getelementptr inbounds i32, i32* %287, i64 %idxprom298
  %291 = load i32, i32* %arrayidx299, align 4
  %add300 = add nsw i32 %286, %291
  %mul301 = mul nsw i32 %281, %add300
  %shr302 = ashr i32 %mul301, 16
  store i32 %shr302, i32* %mcost, align 4
  %292 = load i16*, i16** %ref_pic, align 8
  %293 = load i16**, i16*** %orig_pic.addr, align 8
  %294 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %295 = load i32, i32* %blocksize_y, align 4
  %296 = load i32, i32* %blocksize_x, align 4
  %297 = load i32, i32* %blocksize_x4, align 4
  %298 = load i32, i32* %mcost, align 4
  %299 = load i32, i32* %min_mcost.addr, align 4
  %300 = load i32, i32* %cand_x, align 4
  %301 = load i32, i32* %cand_y, align 4
  %call303 = call i32 @PartCalMad(i16* %292, i16** %293, i16* (i32, i16*, i32, i32, i32, i32)* %294, i32 %295, i32 %296, i32 %297, i32 %298, i32 %299, i32 %300, i32 %301)
  store i32 %call303, i32* %mcost, align 4
  %302 = load i32, i32* %mcost, align 4
  %303 = load i32**, i32*** @McostState, align 8
  %304 = load i32, i32* %cand_y, align 4
  %305 = load i32, i32* %center_y, align 4
  %sub304 = sub nsw i32 %304, %305
  %306 = load i32, i32* %search_range.addr, align 4
  %add305 = add nsw i32 %sub304, %306
  %idxprom306 = sext i32 %add305 to i64
  %arrayidx307 = getelementptr inbounds i32*, i32** %303, i64 %idxprom306
  %307 = load i32*, i32** %arrayidx307, align 8
  %308 = load i32, i32* %cand_x, align 4
  %309 = load i32, i32* %center_x, align 4
  %sub308 = sub nsw i32 %308, %309
  %310 = load i32, i32* %search_range.addr, align 4
  %add309 = add nsw i32 %sub308, %310
  %idxprom310 = sext i32 %add309 to i64
  %arrayidx311 = getelementptr inbounds i32, i32* %307, i64 %idxprom310
  store i32 %302, i32* %arrayidx311, align 4
  %311 = load i32, i32* %mcost, align 4
  %312 = load i32, i32* %min_mcost.addr, align 4
  %cmp312 = icmp slt i32 %311, %312
  br i1 %cmp312, label %if.then314, label %if.end315

if.then314:                                       ; preds = %if.then291
  %313 = load i32, i32* %cand_x, align 4
  store i32 %313, i32* %best_x, align 4
  %314 = load i32, i32* %cand_y, align 4
  store i32 %314, i32* %best_y, align 4
  %315 = load i32, i32* %mcost, align 4
  store i32 %315, i32* %min_mcost.addr, align 4
  br label %if.end315

if.end315:                                        ; preds = %if.then314, %if.then291
  br label %if.end316

if.end316:                                        ; preds = %if.end315, %if.then281
  br label %if.end317

if.end317:                                        ; preds = %if.end316, %land.lhs.true276, %for.body265
  br label %for.inc318

for.inc318:                                       ; preds = %if.end317
  %316 = load i32, i32* %m, align 4
  %inc319 = add nsw i32 %316, 1
  store i32 %inc319, i32* %m, align 4
  br label %for.cond262

for.end320:                                       ; preds = %for.cond262
  br label %if.end321

if.end321:                                        ; preds = %for.end320, %lor.lhs.false
  %317 = load i32, i32* %blocktype.addr, align 4
  %cmp322 = icmp sgt i32 %317, 1
  br i1 %cmp322, label %if.then324, label %if.end392

if.then324:                                       ; preds = %if.end321
  %318 = load i32, i32* %pic_pix_x.addr, align 4
  %319 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @pred_MV_uplayer, i64 0, i64 0), align 4
  %div325 = sdiv i32 %319, 4
  %add326 = add nsw i32 %318, %div325
  store i32 %add326, i32* %cand_x, align 4
  %320 = load i32, i32* %pic_pix_y.addr, align 4
  %321 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @pred_MV_uplayer, i64 0, i64 1), align 4
  %div327 = sdiv i32 %321, 4
  %add328 = add nsw i32 %320, %div327
  store i32 %add328, i32* %cand_y, align 4
  %322 = load i32, i32* %cand_x, align 4
  %323 = load i32, i32* %center_x, align 4
  %sub329 = sub nsw i32 %322, %323
  %call330 = call i32 @abs(i32 %sub329) #6
  %324 = load i32, i32* %search_range.addr, align 4
  %cmp331 = icmp sle i32 %call330, %324
  br i1 %cmp331, label %land.lhs.true333, label %if.end374

land.lhs.true333:                                 ; preds = %if.then324
  %325 = load i32, i32* %cand_y, align 4
  %326 = load i32, i32* %center_y, align 4
  %sub334 = sub nsw i32 %325, %326
  %call335 = call i32 @abs(i32 %sub334) #6
  %327 = load i32, i32* %search_range.addr, align 4
  %cmp336 = icmp sle i32 %call335, %327
  br i1 %cmp336, label %if.then338, label %if.end374

if.then338:                                       ; preds = %land.lhs.true333
  %328 = load i32**, i32*** @McostState, align 8
  %329 = load i32, i32* %cand_y, align 4
  %330 = load i32, i32* %center_y, align 4
  %sub339 = sub nsw i32 %329, %330
  %331 = load i32, i32* %search_range.addr, align 4
  %add340 = add nsw i32 %sub339, %331
  %idxprom341 = sext i32 %add340 to i64
  %arrayidx342 = getelementptr inbounds i32*, i32** %328, i64 %idxprom341
  %332 = load i32*, i32** %arrayidx342, align 8
  %333 = load i32, i32* %cand_x, align 4
  %334 = load i32, i32* %center_x, align 4
  %sub343 = sub nsw i32 %333, %334
  %335 = load i32, i32* %search_range.addr, align 4
  %add344 = add nsw i32 %sub343, %335
  %idxprom345 = sext i32 %add344 to i64
  %arrayidx346 = getelementptr inbounds i32, i32* %332, i64 %idxprom345
  %336 = load i32, i32* %arrayidx346, align 4
  %tobool347 = icmp ne i32 %336, 0
  br i1 %tobool347, label %if.end373, label %if.then348

if.then348:                                       ; preds = %if.then338
  %337 = load i32, i32* %lambda_factor, align 4
  %338 = load i32*, i32** @mvbits, align 8
  %339 = load i32, i32* %cand_x, align 4
  %340 = load i32, i32* %mvshift, align 4
  %shl349 = shl i32 %339, %340
  %341 = load i32, i32* %pred_x, align 4
  %sub350 = sub nsw i32 %shl349, %341
  %idxprom351 = sext i32 %sub350 to i64
  %arrayidx352 = getelementptr inbounds i32, i32* %338, i64 %idxprom351
  %342 = load i32, i32* %arrayidx352, align 4
  %343 = load i32*, i32** @mvbits, align 8
  %344 = load i32, i32* %cand_y, align 4
  %345 = load i32, i32* %mvshift, align 4
  %shl353 = shl i32 %344, %345
  %346 = load i32, i32* %pred_y, align 4
  %sub354 = sub nsw i32 %shl353, %346
  %idxprom355 = sext i32 %sub354 to i64
  %arrayidx356 = getelementptr inbounds i32, i32* %343, i64 %idxprom355
  %347 = load i32, i32* %arrayidx356, align 4
  %add357 = add nsw i32 %342, %347
  %mul358 = mul nsw i32 %337, %add357
  %shr359 = ashr i32 %mul358, 16
  store i32 %shr359, i32* %mcost, align 4
  %348 = load i16*, i16** %ref_pic, align 8
  %349 = load i16**, i16*** %orig_pic.addr, align 8
  %350 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %351 = load i32, i32* %blocksize_y, align 4
  %352 = load i32, i32* %blocksize_x, align 4
  %353 = load i32, i32* %blocksize_x4, align 4
  %354 = load i32, i32* %mcost, align 4
  %355 = load i32, i32* %min_mcost.addr, align 4
  %356 = load i32, i32* %cand_x, align 4
  %357 = load i32, i32* %cand_y, align 4
  %call360 = call i32 @PartCalMad(i16* %348, i16** %349, i16* (i32, i16*, i32, i32, i32, i32)* %350, i32 %351, i32 %352, i32 %353, i32 %354, i32 %355, i32 %356, i32 %357)
  store i32 %call360, i32* %mcost, align 4
  %358 = load i32, i32* %mcost, align 4
  %359 = load i32**, i32*** @McostState, align 8
  %360 = load i32, i32* %cand_y, align 4
  %361 = load i32, i32* %center_y, align 4
  %sub361 = sub nsw i32 %360, %361
  %362 = load i32, i32* %search_range.addr, align 4
  %add362 = add nsw i32 %sub361, %362
  %idxprom363 = sext i32 %add362 to i64
  %arrayidx364 = getelementptr inbounds i32*, i32** %359, i64 %idxprom363
  %363 = load i32*, i32** %arrayidx364, align 8
  %364 = load i32, i32* %cand_x, align 4
  %365 = load i32, i32* %center_x, align 4
  %sub365 = sub nsw i32 %364, %365
  %366 = load i32, i32* %search_range.addr, align 4
  %add366 = add nsw i32 %sub365, %366
  %idxprom367 = sext i32 %add366 to i64
  %arrayidx368 = getelementptr inbounds i32, i32* %363, i64 %idxprom367
  store i32 %358, i32* %arrayidx368, align 4
  %367 = load i32, i32* %mcost, align 4
  %368 = load i32, i32* %min_mcost.addr, align 4
  %cmp369 = icmp slt i32 %367, %368
  br i1 %cmp369, label %if.then371, label %if.end372

if.then371:                                       ; preds = %if.then348
  %369 = load i32, i32* %cand_x, align 4
  store i32 %369, i32* %best_x, align 4
  %370 = load i32, i32* %cand_y, align 4
  store i32 %370, i32* %best_y, align 4
  %371 = load i32, i32* %mcost, align 4
  store i32 %371, i32* %min_mcost.addr, align 4
  br label %if.end372

if.end372:                                        ; preds = %if.then371, %if.then348
  br label %if.end373

if.end373:                                        ; preds = %if.end372, %if.then338
  br label %if.end374

if.end374:                                        ; preds = %if.end373, %land.lhs.true333, %if.then324
  %372 = load i32, i32* %min_mcost.addr, align 4
  %373 = load i32, i32* @pred_SAD_uplayer, align 4
  %sub375 = sub nsw i32 %372, %373
  %conv376 = sitofp i32 %sub375 to float
  %374 = load i32, i32* @pred_SAD_uplayer, align 4
  %conv377 = sitofp i32 %374 to float
  %375 = load float, float* %betaThird, align 4
  %mul378 = fmul float %conv377, %375
  %cmp379 = fcmp olt float %conv376, %mul378
  br i1 %cmp379, label %if.then381, label %if.else382

if.then381:                                       ; preds = %if.end374
  br label %third_step

if.else382:                                       ; preds = %if.end374
  %376 = load i32, i32* %min_mcost.addr, align 4
  %377 = load i32, i32* @pred_SAD_uplayer, align 4
  %sub383 = sub nsw i32 %376, %377
  %conv384 = sitofp i32 %sub383 to float
  %378 = load i32, i32* @pred_SAD_uplayer, align 4
  %conv385 = sitofp i32 %378 to float
  %379 = load float, float* %betaSec, align 4
  %mul386 = fmul float %conv385, %379
  %cmp387 = fcmp olt float %conv384, %mul386
  br i1 %cmp387, label %if.then389, label %if.end390

if.then389:                                       ; preds = %if.else382
  br label %sec_step

if.end390:                                        ; preds = %if.else382
  br label %if.end391

if.end391:                                        ; preds = %if.end390
  br label %if.end392

if.end392:                                        ; preds = %if.end391, %if.end321
  %380 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %number = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %380, i32 0, i32 0
  %381 = load i32, i32* %number, align 8
  %382 = load i16, i16* %ref.addr, align 2
  %conv393 = sext i16 %382 to i32
  %add394 = add nsw i32 1, %conv393
  %cmp395 = icmp sgt i32 %381, %add394
  br i1 %cmp395, label %land.lhs.true397, label %lor.lhs.false401

land.lhs.true397:                                 ; preds = %if.end392
  %383 = load i16, i16* %ref.addr, align 2
  %conv398 = sext i16 %383 to i32
  %cmp399 = icmp ne i32 %conv398, -1
  br i1 %cmp399, label %if.then408, label %lor.lhs.false401

lor.lhs.false401:                                 ; preds = %land.lhs.true397, %if.end392
  %384 = load i32, i32* %list.addr, align 4
  %cmp402 = icmp eq i32 %384, 1
  br i1 %cmp402, label %land.lhs.true404, label %if.end459

land.lhs.true404:                                 ; preds = %lor.lhs.false401
  %385 = load i32, i32* @Bframe_ctr, align 4
  %386 = load i32, i32* %N_Bframe, align 4
  %rem405 = srem i32 %385, %386
  %cmp406 = icmp sgt i32 %rem405, 1
  br i1 %cmp406, label %if.then408, label %if.end459

if.then408:                                       ; preds = %land.lhs.true404, %land.lhs.true397
  %387 = load i32, i32* %pic_pix_x.addr, align 4
  %388 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @pred_MV_time, i64 0, i64 0), align 4
  %div409 = sdiv i32 %388, 4
  %add410 = add nsw i32 %387, %div409
  store i32 %add410, i32* %cand_x, align 4
  %389 = load i32, i32* %pic_pix_y.addr, align 4
  %390 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @pred_MV_time, i64 0, i64 1), align 4
  %div411 = sdiv i32 %390, 4
  %add412 = add nsw i32 %389, %div411
  store i32 %add412, i32* %cand_y, align 4
  %391 = load i32, i32* %cand_x, align 4
  %392 = load i32, i32* %center_x, align 4
  %sub413 = sub nsw i32 %391, %392
  %call414 = call i32 @abs(i32 %sub413) #6
  %393 = load i32, i32* %search_range.addr, align 4
  %cmp415 = icmp sle i32 %call414, %393
  br i1 %cmp415, label %land.lhs.true417, label %if.end458

land.lhs.true417:                                 ; preds = %if.then408
  %394 = load i32, i32* %cand_y, align 4
  %395 = load i32, i32* %center_y, align 4
  %sub418 = sub nsw i32 %394, %395
  %call419 = call i32 @abs(i32 %sub418) #6
  %396 = load i32, i32* %search_range.addr, align 4
  %cmp420 = icmp sle i32 %call419, %396
  br i1 %cmp420, label %if.then422, label %if.end458

if.then422:                                       ; preds = %land.lhs.true417
  %397 = load i32**, i32*** @McostState, align 8
  %398 = load i32, i32* %cand_y, align 4
  %399 = load i32, i32* %center_y, align 4
  %sub423 = sub nsw i32 %398, %399
  %400 = load i32, i32* %search_range.addr, align 4
  %add424 = add nsw i32 %sub423, %400
  %idxprom425 = sext i32 %add424 to i64
  %arrayidx426 = getelementptr inbounds i32*, i32** %397, i64 %idxprom425
  %401 = load i32*, i32** %arrayidx426, align 8
  %402 = load i32, i32* %cand_x, align 4
  %403 = load i32, i32* %center_x, align 4
  %sub427 = sub nsw i32 %402, %403
  %404 = load i32, i32* %search_range.addr, align 4
  %add428 = add nsw i32 %sub427, %404
  %idxprom429 = sext i32 %add428 to i64
  %arrayidx430 = getelementptr inbounds i32, i32* %401, i64 %idxprom429
  %405 = load i32, i32* %arrayidx430, align 4
  %tobool431 = icmp ne i32 %405, 0
  br i1 %tobool431, label %if.end457, label %if.then432

if.then432:                                       ; preds = %if.then422
  %406 = load i32, i32* %lambda_factor, align 4
  %407 = load i32*, i32** @mvbits, align 8
  %408 = load i32, i32* %cand_x, align 4
  %409 = load i32, i32* %mvshift, align 4
  %shl433 = shl i32 %408, %409
  %410 = load i32, i32* %pred_x, align 4
  %sub434 = sub nsw i32 %shl433, %410
  %idxprom435 = sext i32 %sub434 to i64
  %arrayidx436 = getelementptr inbounds i32, i32* %407, i64 %idxprom435
  %411 = load i32, i32* %arrayidx436, align 4
  %412 = load i32*, i32** @mvbits, align 8
  %413 = load i32, i32* %cand_y, align 4
  %414 = load i32, i32* %mvshift, align 4
  %shl437 = shl i32 %413, %414
  %415 = load i32, i32* %pred_y, align 4
  %sub438 = sub nsw i32 %shl437, %415
  %idxprom439 = sext i32 %sub438 to i64
  %arrayidx440 = getelementptr inbounds i32, i32* %412, i64 %idxprom439
  %416 = load i32, i32* %arrayidx440, align 4
  %add441 = add nsw i32 %411, %416
  %mul442 = mul nsw i32 %406, %add441
  %shr443 = ashr i32 %mul442, 16
  store i32 %shr443, i32* %mcost, align 4
  %417 = load i16*, i16** %ref_pic, align 8
  %418 = load i16**, i16*** %orig_pic.addr, align 8
  %419 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %420 = load i32, i32* %blocksize_y, align 4
  %421 = load i32, i32* %blocksize_x, align 4
  %422 = load i32, i32* %blocksize_x4, align 4
  %423 = load i32, i32* %mcost, align 4
  %424 = load i32, i32* %min_mcost.addr, align 4
  %425 = load i32, i32* %cand_x, align 4
  %426 = load i32, i32* %cand_y, align 4
  %call444 = call i32 @PartCalMad(i16* %417, i16** %418, i16* (i32, i16*, i32, i32, i32, i32)* %419, i32 %420, i32 %421, i32 %422, i32 %423, i32 %424, i32 %425, i32 %426)
  store i32 %call444, i32* %mcost, align 4
  %427 = load i32, i32* %mcost, align 4
  %428 = load i32**, i32*** @McostState, align 8
  %429 = load i32, i32* %cand_y, align 4
  %430 = load i32, i32* %center_y, align 4
  %sub445 = sub nsw i32 %429, %430
  %431 = load i32, i32* %search_range.addr, align 4
  %add446 = add nsw i32 %sub445, %431
  %idxprom447 = sext i32 %add446 to i64
  %arrayidx448 = getelementptr inbounds i32*, i32** %428, i64 %idxprom447
  %432 = load i32*, i32** %arrayidx448, align 8
  %433 = load i32, i32* %cand_x, align 4
  %434 = load i32, i32* %center_x, align 4
  %sub449 = sub nsw i32 %433, %434
  %435 = load i32, i32* %search_range.addr, align 4
  %add450 = add nsw i32 %sub449, %435
  %idxprom451 = sext i32 %add450 to i64
  %arrayidx452 = getelementptr inbounds i32, i32* %432, i64 %idxprom451
  store i32 %427, i32* %arrayidx452, align 4
  %436 = load i32, i32* %mcost, align 4
  %437 = load i32, i32* %min_mcost.addr, align 4
  %cmp453 = icmp slt i32 %436, %437
  br i1 %cmp453, label %if.then455, label %if.end456

if.then455:                                       ; preds = %if.then432
  %438 = load i32, i32* %cand_x, align 4
  store i32 %438, i32* %best_x, align 4
  %439 = load i32, i32* %cand_y, align 4
  store i32 %439, i32* %best_y, align 4
  %440 = load i32, i32* %mcost, align 4
  store i32 %440, i32* %min_mcost.addr, align 4
  br label %if.end456

if.end456:                                        ; preds = %if.then455, %if.then432
  br label %if.end457

if.end457:                                        ; preds = %if.end456, %if.then422
  br label %if.end458

if.end458:                                        ; preds = %if.end457, %land.lhs.true417, %if.then408
  br label %if.end459

if.end459:                                        ; preds = %if.end458, %land.lhs.true404, %lor.lhs.false401
  %441 = load %struct.InputParameters*, %struct.InputParameters** @input, align 8
  %PicInterlace = getelementptr inbounds %struct.InputParameters, %struct.InputParameters* %441, i32 0, i32 91
  %442 = load i32, i32* %PicInterlace, align 8
  %cmp460 = icmp eq i32 %442, 1
  br i1 %cmp460, label %if.then462, label %if.else535

if.then462:                                       ; preds = %if.end459
  %443 = load i32, i32* %list.addr, align 4
  %cmp463 = icmp eq i32 %443, 0
  br i1 %cmp463, label %land.lhs.true465, label %lor.lhs.false469

land.lhs.true465:                                 ; preds = %if.then462
  %444 = load i16, i16* %ref.addr, align 2
  %conv466 = sext i16 %444 to i32
  %cmp467 = icmp sgt i32 %conv466, 0
  br i1 %cmp467, label %if.then483, label %lor.lhs.false469

lor.lhs.false469:                                 ; preds = %land.lhs.true465, %if.then462
  %445 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %type = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %445, i32 0, i32 6
  %446 = load i32, i32* %type, align 8
  %cmp470 = icmp eq i32 %446, 1
  br i1 %cmp470, label %land.lhs.true472, label %if.end534

land.lhs.true472:                                 ; preds = %lor.lhs.false469
  %447 = load i32, i32* %list.addr, align 4
  %cmp473 = icmp eq i32 %447, 0
  br i1 %cmp473, label %land.lhs.true475, label %if.end534

land.lhs.true475:                                 ; preds = %land.lhs.true472
  %448 = load i16, i16* %ref.addr, align 2
  %conv476 = sext i16 %448 to i32
  %cmp477 = icmp eq i32 %conv476, 0
  br i1 %cmp477, label %if.then483, label %lor.lhs.false479

lor.lhs.false479:                                 ; preds = %land.lhs.true475
  %449 = load i16, i16* %ref.addr, align 2
  %conv480 = sext i16 %449 to i32
  %cmp481 = icmp eq i32 %conv480, 2
  br i1 %cmp481, label %if.then483, label %if.end534

if.then483:                                       ; preds = %lor.lhs.false479, %land.lhs.true475, %land.lhs.true465
  %450 = load i32, i32* %pic_pix_x.addr, align 4
  %451 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @pred_MV_ref, i64 0, i64 0), align 4
  %div484 = sdiv i32 %451, 4
  %add485 = add nsw i32 %450, %div484
  store i32 %add485, i32* %cand_x, align 4
  %452 = load i32, i32* %pic_pix_y.addr, align 4
  %453 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @pred_MV_ref, i64 0, i64 1), align 4
  %div486 = sdiv i32 %453, 4
  %add487 = add nsw i32 %452, %div486
  store i32 %add487, i32* %cand_y, align 4
  %454 = load i32, i32* %cand_x, align 4
  %455 = load i32, i32* %center_x, align 4
  %sub488 = sub nsw i32 %454, %455
  %call489 = call i32 @abs(i32 %sub488) #6
  %456 = load i32, i32* %search_range.addr, align 4
  %cmp490 = icmp sle i32 %call489, %456
  br i1 %cmp490, label %land.lhs.true492, label %if.end533

land.lhs.true492:                                 ; preds = %if.then483
  %457 = load i32, i32* %cand_y, align 4
  %458 = load i32, i32* %center_y, align 4
  %sub493 = sub nsw i32 %457, %458
  %call494 = call i32 @abs(i32 %sub493) #6
  %459 = load i32, i32* %search_range.addr, align 4
  %cmp495 = icmp sle i32 %call494, %459
  br i1 %cmp495, label %if.then497, label %if.end533

if.then497:                                       ; preds = %land.lhs.true492
  %460 = load i32**, i32*** @McostState, align 8
  %461 = load i32, i32* %cand_y, align 4
  %462 = load i32, i32* %center_y, align 4
  %sub498 = sub nsw i32 %461, %462
  %463 = load i32, i32* %search_range.addr, align 4
  %add499 = add nsw i32 %sub498, %463
  %idxprom500 = sext i32 %add499 to i64
  %arrayidx501 = getelementptr inbounds i32*, i32** %460, i64 %idxprom500
  %464 = load i32*, i32** %arrayidx501, align 8
  %465 = load i32, i32* %cand_x, align 4
  %466 = load i32, i32* %center_x, align 4
  %sub502 = sub nsw i32 %465, %466
  %467 = load i32, i32* %search_range.addr, align 4
  %add503 = add nsw i32 %sub502, %467
  %idxprom504 = sext i32 %add503 to i64
  %arrayidx505 = getelementptr inbounds i32, i32* %464, i64 %idxprom504
  %468 = load i32, i32* %arrayidx505, align 4
  %tobool506 = icmp ne i32 %468, 0
  br i1 %tobool506, label %if.end532, label %if.then507

if.then507:                                       ; preds = %if.then497
  %469 = load i32, i32* %lambda_factor, align 4
  %470 = load i32*, i32** @mvbits, align 8
  %471 = load i32, i32* %cand_x, align 4
  %472 = load i32, i32* %mvshift, align 4
  %shl508 = shl i32 %471, %472
  %473 = load i32, i32* %pred_x, align 4
  %sub509 = sub nsw i32 %shl508, %473
  %idxprom510 = sext i32 %sub509 to i64
  %arrayidx511 = getelementptr inbounds i32, i32* %470, i64 %idxprom510
  %474 = load i32, i32* %arrayidx511, align 4
  %475 = load i32*, i32** @mvbits, align 8
  %476 = load i32, i32* %cand_y, align 4
  %477 = load i32, i32* %mvshift, align 4
  %shl512 = shl i32 %476, %477
  %478 = load i32, i32* %pred_y, align 4
  %sub513 = sub nsw i32 %shl512, %478
  %idxprom514 = sext i32 %sub513 to i64
  %arrayidx515 = getelementptr inbounds i32, i32* %475, i64 %idxprom514
  %479 = load i32, i32* %arrayidx515, align 4
  %add516 = add nsw i32 %474, %479
  %mul517 = mul nsw i32 %469, %add516
  %shr518 = ashr i32 %mul517, 16
  store i32 %shr518, i32* %mcost, align 4
  %480 = load i16*, i16** %ref_pic, align 8
  %481 = load i16**, i16*** %orig_pic.addr, align 8
  %482 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %483 = load i32, i32* %blocksize_y, align 4
  %484 = load i32, i32* %blocksize_x, align 4
  %485 = load i32, i32* %blocksize_x4, align 4
  %486 = load i32, i32* %mcost, align 4
  %487 = load i32, i32* %min_mcost.addr, align 4
  %488 = load i32, i32* %cand_x, align 4
  %489 = load i32, i32* %cand_y, align 4
  %call519 = call i32 @PartCalMad(i16* %480, i16** %481, i16* (i32, i16*, i32, i32, i32, i32)* %482, i32 %483, i32 %484, i32 %485, i32 %486, i32 %487, i32 %488, i32 %489)
  store i32 %call519, i32* %mcost, align 4
  %490 = load i32, i32* %mcost, align 4
  %491 = load i32**, i32*** @McostState, align 8
  %492 = load i32, i32* %cand_y, align 4
  %493 = load i32, i32* %center_y, align 4
  %sub520 = sub nsw i32 %492, %493
  %494 = load i32, i32* %search_range.addr, align 4
  %add521 = add nsw i32 %sub520, %494
  %idxprom522 = sext i32 %add521 to i64
  %arrayidx523 = getelementptr inbounds i32*, i32** %491, i64 %idxprom522
  %495 = load i32*, i32** %arrayidx523, align 8
  %496 = load i32, i32* %cand_x, align 4
  %497 = load i32, i32* %center_x, align 4
  %sub524 = sub nsw i32 %496, %497
  %498 = load i32, i32* %search_range.addr, align 4
  %add525 = add nsw i32 %sub524, %498
  %idxprom526 = sext i32 %add525 to i64
  %arrayidx527 = getelementptr inbounds i32, i32* %495, i64 %idxprom526
  store i32 %490, i32* %arrayidx527, align 4
  %499 = load i32, i32* %mcost, align 4
  %500 = load i32, i32* %min_mcost.addr, align 4
  %cmp528 = icmp slt i32 %499, %500
  br i1 %cmp528, label %if.then530, label %if.end531

if.then530:                                       ; preds = %if.then507
  %501 = load i32, i32* %cand_x, align 4
  store i32 %501, i32* %best_x, align 4
  %502 = load i32, i32* %cand_y, align 4
  store i32 %502, i32* %best_y, align 4
  %503 = load i32, i32* %mcost, align 4
  store i32 %503, i32* %min_mcost.addr, align 4
  br label %if.end531

if.end531:                                        ; preds = %if.then530, %if.then507
  br label %if.end532

if.end532:                                        ; preds = %if.end531, %if.then497
  br label %if.end533

if.end533:                                        ; preds = %if.end532, %land.lhs.true492, %if.then483
  br label %if.end534

if.end534:                                        ; preds = %if.end533, %lor.lhs.false479, %land.lhs.true472, %lor.lhs.false469
  br label %if.end605

if.else535:                                       ; preds = %if.end459
  %504 = load i32, i32* %list.addr, align 4
  %cmp536 = icmp eq i32 %504, 0
  br i1 %cmp536, label %land.lhs.true538, label %lor.lhs.false542

land.lhs.true538:                                 ; preds = %if.else535
  %505 = load i16, i16* %ref.addr, align 2
  %conv539 = sext i16 %505 to i32
  %cmp540 = icmp sgt i32 %conv539, 0
  br i1 %cmp540, label %if.then553, label %lor.lhs.false542

lor.lhs.false542:                                 ; preds = %land.lhs.true538, %if.else535
  %506 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %type543 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %506, i32 0, i32 6
  %507 = load i32, i32* %type543, align 8
  %cmp544 = icmp eq i32 %507, 1
  br i1 %cmp544, label %land.lhs.true546, label %if.end604

land.lhs.true546:                                 ; preds = %lor.lhs.false542
  %508 = load i32, i32* %list.addr, align 4
  %cmp547 = icmp eq i32 %508, 0
  br i1 %cmp547, label %land.lhs.true549, label %if.end604

land.lhs.true549:                                 ; preds = %land.lhs.true546
  %509 = load i16, i16* %ref.addr, align 2
  %conv550 = sext i16 %509 to i32
  %cmp551 = icmp eq i32 %conv550, 0
  br i1 %cmp551, label %if.then553, label %if.end604

if.then553:                                       ; preds = %land.lhs.true549, %land.lhs.true538
  %510 = load i32, i32* %pic_pix_x.addr, align 4
  %511 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @pred_MV_ref, i64 0, i64 0), align 4
  %div554 = sdiv i32 %511, 4
  %add555 = add nsw i32 %510, %div554
  store i32 %add555, i32* %cand_x, align 4
  %512 = load i32, i32* %pic_pix_y.addr, align 4
  %513 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @pred_MV_ref, i64 0, i64 1), align 4
  %div556 = sdiv i32 %513, 4
  %add557 = add nsw i32 %512, %div556
  store i32 %add557, i32* %cand_y, align 4
  %514 = load i32, i32* %cand_x, align 4
  %515 = load i32, i32* %center_x, align 4
  %sub558 = sub nsw i32 %514, %515
  %call559 = call i32 @abs(i32 %sub558) #6
  %516 = load i32, i32* %search_range.addr, align 4
  %cmp560 = icmp sle i32 %call559, %516
  br i1 %cmp560, label %land.lhs.true562, label %if.end603

land.lhs.true562:                                 ; preds = %if.then553
  %517 = load i32, i32* %cand_y, align 4
  %518 = load i32, i32* %center_y, align 4
  %sub563 = sub nsw i32 %517, %518
  %call564 = call i32 @abs(i32 %sub563) #6
  %519 = load i32, i32* %search_range.addr, align 4
  %cmp565 = icmp sle i32 %call564, %519
  br i1 %cmp565, label %if.then567, label %if.end603

if.then567:                                       ; preds = %land.lhs.true562
  %520 = load i32**, i32*** @McostState, align 8
  %521 = load i32, i32* %cand_y, align 4
  %522 = load i32, i32* %center_y, align 4
  %sub568 = sub nsw i32 %521, %522
  %523 = load i32, i32* %search_range.addr, align 4
  %add569 = add nsw i32 %sub568, %523
  %idxprom570 = sext i32 %add569 to i64
  %arrayidx571 = getelementptr inbounds i32*, i32** %520, i64 %idxprom570
  %524 = load i32*, i32** %arrayidx571, align 8
  %525 = load i32, i32* %cand_x, align 4
  %526 = load i32, i32* %center_x, align 4
  %sub572 = sub nsw i32 %525, %526
  %527 = load i32, i32* %search_range.addr, align 4
  %add573 = add nsw i32 %sub572, %527
  %idxprom574 = sext i32 %add573 to i64
  %arrayidx575 = getelementptr inbounds i32, i32* %524, i64 %idxprom574
  %528 = load i32, i32* %arrayidx575, align 4
  %tobool576 = icmp ne i32 %528, 0
  br i1 %tobool576, label %if.end602, label %if.then577

if.then577:                                       ; preds = %if.then567
  %529 = load i32, i32* %lambda_factor, align 4
  %530 = load i32*, i32** @mvbits, align 8
  %531 = load i32, i32* %cand_x, align 4
  %532 = load i32, i32* %mvshift, align 4
  %shl578 = shl i32 %531, %532
  %533 = load i32, i32* %pred_x, align 4
  %sub579 = sub nsw i32 %shl578, %533
  %idxprom580 = sext i32 %sub579 to i64
  %arrayidx581 = getelementptr inbounds i32, i32* %530, i64 %idxprom580
  %534 = load i32, i32* %arrayidx581, align 4
  %535 = load i32*, i32** @mvbits, align 8
  %536 = load i32, i32* %cand_y, align 4
  %537 = load i32, i32* %mvshift, align 4
  %shl582 = shl i32 %536, %537
  %538 = load i32, i32* %pred_y, align 4
  %sub583 = sub nsw i32 %shl582, %538
  %idxprom584 = sext i32 %sub583 to i64
  %arrayidx585 = getelementptr inbounds i32, i32* %535, i64 %idxprom584
  %539 = load i32, i32* %arrayidx585, align 4
  %add586 = add nsw i32 %534, %539
  %mul587 = mul nsw i32 %529, %add586
  %shr588 = ashr i32 %mul587, 16
  store i32 %shr588, i32* %mcost, align 4
  %540 = load i16*, i16** %ref_pic, align 8
  %541 = load i16**, i16*** %orig_pic.addr, align 8
  %542 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %543 = load i32, i32* %blocksize_y, align 4
  %544 = load i32, i32* %blocksize_x, align 4
  %545 = load i32, i32* %blocksize_x4, align 4
  %546 = load i32, i32* %mcost, align 4
  %547 = load i32, i32* %min_mcost.addr, align 4
  %548 = load i32, i32* %cand_x, align 4
  %549 = load i32, i32* %cand_y, align 4
  %call589 = call i32 @PartCalMad(i16* %540, i16** %541, i16* (i32, i16*, i32, i32, i32, i32)* %542, i32 %543, i32 %544, i32 %545, i32 %546, i32 %547, i32 %548, i32 %549)
  store i32 %call589, i32* %mcost, align 4
  %550 = load i32, i32* %mcost, align 4
  %551 = load i32**, i32*** @McostState, align 8
  %552 = load i32, i32* %cand_y, align 4
  %553 = load i32, i32* %center_y, align 4
  %sub590 = sub nsw i32 %552, %553
  %554 = load i32, i32* %search_range.addr, align 4
  %add591 = add nsw i32 %sub590, %554
  %idxprom592 = sext i32 %add591 to i64
  %arrayidx593 = getelementptr inbounds i32*, i32** %551, i64 %idxprom592
  %555 = load i32*, i32** %arrayidx593, align 8
  %556 = load i32, i32* %cand_x, align 4
  %557 = load i32, i32* %center_x, align 4
  %sub594 = sub nsw i32 %556, %557
  %558 = load i32, i32* %search_range.addr, align 4
  %add595 = add nsw i32 %sub594, %558
  %idxprom596 = sext i32 %add595 to i64
  %arrayidx597 = getelementptr inbounds i32, i32* %555, i64 %idxprom596
  store i32 %550, i32* %arrayidx597, align 4
  %559 = load i32, i32* %mcost, align 4
  %560 = load i32, i32* %min_mcost.addr, align 4
  %cmp598 = icmp slt i32 %559, %560
  br i1 %cmp598, label %if.then600, label %if.end601

if.then600:                                       ; preds = %if.then577
  %561 = load i32, i32* %cand_x, align 4
  store i32 %561, i32* %best_x, align 4
  %562 = load i32, i32* %cand_y, align 4
  store i32 %562, i32* %best_y, align 4
  %563 = load i32, i32* %mcost, align 4
  store i32 %563, i32* %min_mcost.addr, align 4
  br label %if.end601

if.end601:                                        ; preds = %if.then600, %if.then577
  br label %if.end602

if.end602:                                        ; preds = %if.end601, %if.then567
  br label %if.end603

if.end603:                                        ; preds = %if.end602, %land.lhs.true562, %if.then553
  br label %if.end604

if.end604:                                        ; preds = %if.end603, %land.lhs.true549, %land.lhs.true546, %lor.lhs.false542
  br label %if.end605

if.end605:                                        ; preds = %if.end604, %if.end534
  %564 = load i32, i32* %best_x, align 4
  store i32 %564, i32* %iXMinNow, align 4
  %565 = load i32, i32* %best_y, align 4
  store i32 %565, i32* %iYMinNow, align 4
  store i32 0, i32* %m, align 4
  br label %for.cond606

for.cond606:                                      ; preds = %for.inc662, %if.end605
  %566 = load i32, i32* %m, align 4
  %cmp607 = icmp slt i32 %566, 4
  br i1 %cmp607, label %for.body609, label %for.end664

for.body609:                                      ; preds = %for.cond606
  %567 = load i32, i32* %iXMinNow, align 4
  %568 = load i32, i32* %m, align 4
  %idxprom610 = sext i32 %568 to i64
  %arrayidx611 = getelementptr inbounds [4 x i32], [4 x i32]* @FastIntegerPelBlockMotionSearch.Diamond_x, i64 0, i64 %idxprom610
  %569 = load i32, i32* %arrayidx611, align 4
  %add612 = add nsw i32 %567, %569
  store i32 %add612, i32* %cand_x, align 4
  %570 = load i32, i32* %iYMinNow, align 4
  %571 = load i32, i32* %m, align 4
  %idxprom613 = sext i32 %571 to i64
  %arrayidx614 = getelementptr inbounds [4 x i32], [4 x i32]* @FastIntegerPelBlockMotionSearch.Diamond_y, i64 0, i64 %idxprom613
  %572 = load i32, i32* %arrayidx614, align 4
  %add615 = add nsw i32 %570, %572
  store i32 %add615, i32* %cand_y, align 4
  %573 = load i32, i32* %cand_x, align 4
  %574 = load i32, i32* %center_x, align 4
  %sub616 = sub nsw i32 %573, %574
  %call617 = call i32 @abs(i32 %sub616) #6
  %575 = load i32, i32* %search_range.addr, align 4
  %cmp618 = icmp sle i32 %call617, %575
  br i1 %cmp618, label %land.lhs.true620, label %if.end661

land.lhs.true620:                                 ; preds = %for.body609
  %576 = load i32, i32* %cand_y, align 4
  %577 = load i32, i32* %center_y, align 4
  %sub621 = sub nsw i32 %576, %577
  %call622 = call i32 @abs(i32 %sub621) #6
  %578 = load i32, i32* %search_range.addr, align 4
  %cmp623 = icmp sle i32 %call622, %578
  br i1 %cmp623, label %if.then625, label %if.end661

if.then625:                                       ; preds = %land.lhs.true620
  %579 = load i32**, i32*** @McostState, align 8
  %580 = load i32, i32* %cand_y, align 4
  %581 = load i32, i32* %center_y, align 4
  %sub626 = sub nsw i32 %580, %581
  %582 = load i32, i32* %search_range.addr, align 4
  %add627 = add nsw i32 %sub626, %582
  %idxprom628 = sext i32 %add627 to i64
  %arrayidx629 = getelementptr inbounds i32*, i32** %579, i64 %idxprom628
  %583 = load i32*, i32** %arrayidx629, align 8
  %584 = load i32, i32* %cand_x, align 4
  %585 = load i32, i32* %center_x, align 4
  %sub630 = sub nsw i32 %584, %585
  %586 = load i32, i32* %search_range.addr, align 4
  %add631 = add nsw i32 %sub630, %586
  %idxprom632 = sext i32 %add631 to i64
  %arrayidx633 = getelementptr inbounds i32, i32* %583, i64 %idxprom632
  %587 = load i32, i32* %arrayidx633, align 4
  %tobool634 = icmp ne i32 %587, 0
  br i1 %tobool634, label %if.end660, label %if.then635

if.then635:                                       ; preds = %if.then625
  %588 = load i32, i32* %lambda_factor, align 4
  %589 = load i32*, i32** @mvbits, align 8
  %590 = load i32, i32* %cand_x, align 4
  %591 = load i32, i32* %mvshift, align 4
  %shl636 = shl i32 %590, %591
  %592 = load i32, i32* %pred_x, align 4
  %sub637 = sub nsw i32 %shl636, %592
  %idxprom638 = sext i32 %sub637 to i64
  %arrayidx639 = getelementptr inbounds i32, i32* %589, i64 %idxprom638
  %593 = load i32, i32* %arrayidx639, align 4
  %594 = load i32*, i32** @mvbits, align 8
  %595 = load i32, i32* %cand_y, align 4
  %596 = load i32, i32* %mvshift, align 4
  %shl640 = shl i32 %595, %596
  %597 = load i32, i32* %pred_y, align 4
  %sub641 = sub nsw i32 %shl640, %597
  %idxprom642 = sext i32 %sub641 to i64
  %arrayidx643 = getelementptr inbounds i32, i32* %594, i64 %idxprom642
  %598 = load i32, i32* %arrayidx643, align 4
  %add644 = add nsw i32 %593, %598
  %mul645 = mul nsw i32 %588, %add644
  %shr646 = ashr i32 %mul645, 16
  store i32 %shr646, i32* %mcost, align 4
  %599 = load i16*, i16** %ref_pic, align 8
  %600 = load i16**, i16*** %orig_pic.addr, align 8
  %601 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %602 = load i32, i32* %blocksize_y, align 4
  %603 = load i32, i32* %blocksize_x, align 4
  %604 = load i32, i32* %blocksize_x4, align 4
  %605 = load i32, i32* %mcost, align 4
  %606 = load i32, i32* %min_mcost.addr, align 4
  %607 = load i32, i32* %cand_x, align 4
  %608 = load i32, i32* %cand_y, align 4
  %call647 = call i32 @PartCalMad(i16* %599, i16** %600, i16* (i32, i16*, i32, i32, i32, i32)* %601, i32 %602, i32 %603, i32 %604, i32 %605, i32 %606, i32 %607, i32 %608)
  store i32 %call647, i32* %mcost, align 4
  %609 = load i32, i32* %mcost, align 4
  %610 = load i32**, i32*** @McostState, align 8
  %611 = load i32, i32* %cand_y, align 4
  %612 = load i32, i32* %center_y, align 4
  %sub648 = sub nsw i32 %611, %612
  %613 = load i32, i32* %search_range.addr, align 4
  %add649 = add nsw i32 %sub648, %613
  %idxprom650 = sext i32 %add649 to i64
  %arrayidx651 = getelementptr inbounds i32*, i32** %610, i64 %idxprom650
  %614 = load i32*, i32** %arrayidx651, align 8
  %615 = load i32, i32* %cand_x, align 4
  %616 = load i32, i32* %center_x, align 4
  %sub652 = sub nsw i32 %615, %616
  %617 = load i32, i32* %search_range.addr, align 4
  %add653 = add nsw i32 %sub652, %617
  %idxprom654 = sext i32 %add653 to i64
  %arrayidx655 = getelementptr inbounds i32, i32* %614, i64 %idxprom654
  store i32 %609, i32* %arrayidx655, align 4
  %618 = load i32, i32* %mcost, align 4
  %619 = load i32, i32* %min_mcost.addr, align 4
  %cmp656 = icmp slt i32 %618, %619
  br i1 %cmp656, label %if.then658, label %if.end659

if.then658:                                       ; preds = %if.then635
  %620 = load i32, i32* %cand_x, align 4
  store i32 %620, i32* %best_x, align 4
  %621 = load i32, i32* %cand_y, align 4
  store i32 %621, i32* %best_y, align 4
  %622 = load i32, i32* %mcost, align 4
  store i32 %622, i32* %min_mcost.addr, align 4
  br label %if.end659

if.end659:                                        ; preds = %if.then658, %if.then635
  br label %if.end660

if.end660:                                        ; preds = %if.end659, %if.then625
  br label %if.end661

if.end661:                                        ; preds = %if.end660, %land.lhs.true620, %for.body609
  br label %for.inc662

for.inc662:                                       ; preds = %if.end661
  %623 = load i32, i32* %m, align 4
  %inc663 = add nsw i32 %623, 1
  store i32 %inc663, i32* %m, align 4
  br label %for.cond606

for.end664:                                       ; preds = %for.cond606
  %624 = load i16, i16* %ref.addr, align 2
  %conv665 = sext i16 %624 to i32
  %cmp666 = icmp sgt i32 %conv665, 0
  br i1 %cmp666, label %if.then668, label %if.else686

if.then668:                                       ; preds = %for.end664
  %625 = load i32, i32* %min_mcost.addr, align 4
  %626 = load i32, i32* @pred_SAD_ref, align 4
  %sub669 = sub nsw i32 %625, %626
  %conv670 = sitofp i32 %sub669 to float
  %627 = load i32, i32* @pred_SAD_ref, align 4
  %conv671 = sitofp i32 %627 to float
  %628 = load float, float* %betaThird, align 4
  %mul672 = fmul float %conv671, %628
  %cmp673 = fcmp olt float %conv670, %mul672
  br i1 %cmp673, label %if.then675, label %if.else676

if.then675:                                       ; preds = %if.then668
  br label %third_step

if.else676:                                       ; preds = %if.then668
  %629 = load i32, i32* %min_mcost.addr, align 4
  %630 = load i32, i32* @pred_SAD_ref, align 4
  %sub677 = sub nsw i32 %629, %630
  %conv678 = sitofp i32 %sub677 to float
  %631 = load i32, i32* @pred_SAD_ref, align 4
  %conv679 = sitofp i32 %631 to float
  %632 = load float, float* %betaSec, align 4
  %mul680 = fmul float %conv679, %632
  %cmp681 = fcmp olt float %conv678, %mul680
  br i1 %cmp681, label %if.then683, label %if.end684

if.then683:                                       ; preds = %if.else676
  br label %sec_step

if.end684:                                        ; preds = %if.else676
  br label %if.end685

if.end685:                                        ; preds = %if.end684
  br label %if.end726

if.else686:                                       ; preds = %for.end664
  %633 = load i32, i32* %blocktype.addr, align 4
  %cmp687 = icmp sgt i32 %633, 1
  br i1 %cmp687, label %if.then689, label %if.else707

if.then689:                                       ; preds = %if.else686
  %634 = load i32, i32* %min_mcost.addr, align 4
  %635 = load i32, i32* @pred_SAD_uplayer, align 4
  %sub690 = sub nsw i32 %634, %635
  %conv691 = sitofp i32 %sub690 to float
  %636 = load i32, i32* @pred_SAD_uplayer, align 4
  %conv692 = sitofp i32 %636 to float
  %637 = load float, float* %betaThird, align 4
  %mul693 = fmul float %conv692, %637
  %cmp694 = fcmp olt float %conv691, %mul693
  br i1 %cmp694, label %if.then696, label %if.else697

if.then696:                                       ; preds = %if.then689
  br label %third_step

if.else697:                                       ; preds = %if.then689
  %638 = load i32, i32* %min_mcost.addr, align 4
  %639 = load i32, i32* @pred_SAD_uplayer, align 4
  %sub698 = sub nsw i32 %638, %639
  %conv699 = sitofp i32 %sub698 to float
  %640 = load i32, i32* @pred_SAD_uplayer, align 4
  %conv700 = sitofp i32 %640 to float
  %641 = load float, float* %betaSec, align 4
  %mul701 = fmul float %conv700, %641
  %cmp702 = fcmp olt float %conv699, %mul701
  br i1 %cmp702, label %if.then704, label %if.end705

if.then704:                                       ; preds = %if.else697
  br label %sec_step

if.end705:                                        ; preds = %if.else697
  br label %if.end706

if.end706:                                        ; preds = %if.end705
  br label %if.end725

if.else707:                                       ; preds = %if.else686
  %642 = load i32, i32* %min_mcost.addr, align 4
  %643 = load i32, i32* @pred_SAD_space, align 4
  %sub708 = sub nsw i32 %642, %643
  %conv709 = sitofp i32 %sub708 to float
  %644 = load i32, i32* @pred_SAD_space, align 4
  %conv710 = sitofp i32 %644 to float
  %645 = load float, float* %betaThird, align 4
  %mul711 = fmul float %conv710, %645
  %cmp712 = fcmp olt float %conv709, %mul711
  br i1 %cmp712, label %if.then714, label %if.else715

if.then714:                                       ; preds = %if.else707
  br label %third_step

if.else715:                                       ; preds = %if.else707
  %646 = load i32, i32* %min_mcost.addr, align 4
  %647 = load i32, i32* @pred_SAD_space, align 4
  %sub716 = sub nsw i32 %646, %647
  %conv717 = sitofp i32 %sub716 to float
  %648 = load i32, i32* @pred_SAD_space, align 4
  %conv718 = sitofp i32 %648 to float
  %649 = load float, float* %betaSec, align 4
  %mul719 = fmul float %conv718, %649
  %cmp720 = fcmp olt float %conv717, %mul719
  br i1 %cmp720, label %if.then722, label %if.end723

if.then722:                                       ; preds = %if.else715
  br label %sec_step

if.end723:                                        ; preds = %if.else715
  br label %if.end724

if.end724:                                        ; preds = %if.end723
  br label %if.end725

if.end725:                                        ; preds = %if.end724, %if.end706
  br label %if.end726

if.end726:                                        ; preds = %if.end725, %if.end685
  %650 = load i32, i32* %blocktype.addr, align 4
  %cmp727 = icmp sgt i32 %650, 6
  br i1 %cmp727, label %if.then729, label %if.else730

if.then729:                                       ; preds = %if.end726
  br label %sec_step

if.else730:                                       ; preds = %if.end726
  br label %first_step

first_step:                                       ; preds = %if.else730
  %651 = load i32, i32* %best_x, align 4
  store i32 %651, i32* %iXMinNow, align 4
  %652 = load i32, i32* %best_y, align 4
  store i32 %652, i32* %iYMinNow, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond731

for.cond731:                                      ; preds = %for.inc832, %first_step
  %653 = load i32, i32* %i, align 4
  %654 = load i32, i32* %search_range.addr, align 4
  %div732 = sdiv i32 %654, 2
  %cmp733 = icmp sle i32 %653, %div732
  br i1 %cmp733, label %for.body735, label %for.end834

for.body735:                                      ; preds = %for.cond731
  %655 = load i32, i32* %i, align 4
  %mul736 = mul nsw i32 2, %655
  %sub737 = sub nsw i32 %mul736, 1
  store i32 %sub737, i32* %search_step, align 4
  %656 = load i32, i32* %iXMinNow, align 4
  %657 = load i32, i32* %search_step, align 4
  %add738 = add nsw i32 %656, %657
  store i32 %add738, i32* %cand_x, align 4
  %658 = load i32, i32* %iYMinNow, align 4
  store i32 %658, i32* %cand_y, align 4
  %659 = load i32, i32* %cand_x, align 4
  %660 = load i32, i32* %center_x, align 4
  %sub739 = sub nsw i32 %659, %660
  %call740 = call i32 @abs(i32 %sub739) #6
  %661 = load i32, i32* %search_range.addr, align 4
  %cmp741 = icmp sle i32 %call740, %661
  br i1 %cmp741, label %land.lhs.true743, label %if.end784

land.lhs.true743:                                 ; preds = %for.body735
  %662 = load i32, i32* %cand_y, align 4
  %663 = load i32, i32* %center_y, align 4
  %sub744 = sub nsw i32 %662, %663
  %call745 = call i32 @abs(i32 %sub744) #6
  %664 = load i32, i32* %search_range.addr, align 4
  %cmp746 = icmp sle i32 %call745, %664
  br i1 %cmp746, label %if.then748, label %if.end784

if.then748:                                       ; preds = %land.lhs.true743
  %665 = load i32**, i32*** @McostState, align 8
  %666 = load i32, i32* %cand_y, align 4
  %667 = load i32, i32* %center_y, align 4
  %sub749 = sub nsw i32 %666, %667
  %668 = load i32, i32* %search_range.addr, align 4
  %add750 = add nsw i32 %sub749, %668
  %idxprom751 = sext i32 %add750 to i64
  %arrayidx752 = getelementptr inbounds i32*, i32** %665, i64 %idxprom751
  %669 = load i32*, i32** %arrayidx752, align 8
  %670 = load i32, i32* %cand_x, align 4
  %671 = load i32, i32* %center_x, align 4
  %sub753 = sub nsw i32 %670, %671
  %672 = load i32, i32* %search_range.addr, align 4
  %add754 = add nsw i32 %sub753, %672
  %idxprom755 = sext i32 %add754 to i64
  %arrayidx756 = getelementptr inbounds i32, i32* %669, i64 %idxprom755
  %673 = load i32, i32* %arrayidx756, align 4
  %tobool757 = icmp ne i32 %673, 0
  br i1 %tobool757, label %if.end783, label %if.then758

if.then758:                                       ; preds = %if.then748
  %674 = load i32, i32* %lambda_factor, align 4
  %675 = load i32*, i32** @mvbits, align 8
  %676 = load i32, i32* %cand_x, align 4
  %677 = load i32, i32* %mvshift, align 4
  %shl759 = shl i32 %676, %677
  %678 = load i32, i32* %pred_x, align 4
  %sub760 = sub nsw i32 %shl759, %678
  %idxprom761 = sext i32 %sub760 to i64
  %arrayidx762 = getelementptr inbounds i32, i32* %675, i64 %idxprom761
  %679 = load i32, i32* %arrayidx762, align 4
  %680 = load i32*, i32** @mvbits, align 8
  %681 = load i32, i32* %cand_y, align 4
  %682 = load i32, i32* %mvshift, align 4
  %shl763 = shl i32 %681, %682
  %683 = load i32, i32* %pred_y, align 4
  %sub764 = sub nsw i32 %shl763, %683
  %idxprom765 = sext i32 %sub764 to i64
  %arrayidx766 = getelementptr inbounds i32, i32* %680, i64 %idxprom765
  %684 = load i32, i32* %arrayidx766, align 4
  %add767 = add nsw i32 %679, %684
  %mul768 = mul nsw i32 %674, %add767
  %shr769 = ashr i32 %mul768, 16
  store i32 %shr769, i32* %mcost, align 4
  %685 = load i16*, i16** %ref_pic, align 8
  %686 = load i16**, i16*** %orig_pic.addr, align 8
  %687 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %688 = load i32, i32* %blocksize_y, align 4
  %689 = load i32, i32* %blocksize_x, align 4
  %690 = load i32, i32* %blocksize_x4, align 4
  %691 = load i32, i32* %mcost, align 4
  %692 = load i32, i32* %min_mcost.addr, align 4
  %693 = load i32, i32* %cand_x, align 4
  %694 = load i32, i32* %cand_y, align 4
  %call770 = call i32 @PartCalMad(i16* %685, i16** %686, i16* (i32, i16*, i32, i32, i32, i32)* %687, i32 %688, i32 %689, i32 %690, i32 %691, i32 %692, i32 %693, i32 %694)
  store i32 %call770, i32* %mcost, align 4
  %695 = load i32, i32* %mcost, align 4
  %696 = load i32**, i32*** @McostState, align 8
  %697 = load i32, i32* %cand_y, align 4
  %698 = load i32, i32* %center_y, align 4
  %sub771 = sub nsw i32 %697, %698
  %699 = load i32, i32* %search_range.addr, align 4
  %add772 = add nsw i32 %sub771, %699
  %idxprom773 = sext i32 %add772 to i64
  %arrayidx774 = getelementptr inbounds i32*, i32** %696, i64 %idxprom773
  %700 = load i32*, i32** %arrayidx774, align 8
  %701 = load i32, i32* %cand_x, align 4
  %702 = load i32, i32* %center_x, align 4
  %sub775 = sub nsw i32 %701, %702
  %703 = load i32, i32* %search_range.addr, align 4
  %add776 = add nsw i32 %sub775, %703
  %idxprom777 = sext i32 %add776 to i64
  %arrayidx778 = getelementptr inbounds i32, i32* %700, i64 %idxprom777
  store i32 %695, i32* %arrayidx778, align 4
  %704 = load i32, i32* %mcost, align 4
  %705 = load i32, i32* %min_mcost.addr, align 4
  %cmp779 = icmp slt i32 %704, %705
  br i1 %cmp779, label %if.then781, label %if.end782

if.then781:                                       ; preds = %if.then758
  %706 = load i32, i32* %cand_x, align 4
  store i32 %706, i32* %best_x, align 4
  %707 = load i32, i32* %cand_y, align 4
  store i32 %707, i32* %best_y, align 4
  %708 = load i32, i32* %mcost, align 4
  store i32 %708, i32* %min_mcost.addr, align 4
  br label %if.end782

if.end782:                                        ; preds = %if.then781, %if.then758
  br label %if.end783

if.end783:                                        ; preds = %if.end782, %if.then748
  br label %if.end784

if.end784:                                        ; preds = %if.end783, %land.lhs.true743, %for.body735
  %709 = load i32, i32* %iXMinNow, align 4
  %710 = load i32, i32* %search_step, align 4
  %sub785 = sub nsw i32 %709, %710
  store i32 %sub785, i32* %cand_x, align 4
  %711 = load i32, i32* %iYMinNow, align 4
  store i32 %711, i32* %cand_y, align 4
  %712 = load i32, i32* %cand_x, align 4
  %713 = load i32, i32* %center_x, align 4
  %sub786 = sub nsw i32 %712, %713
  %call787 = call i32 @abs(i32 %sub786) #6
  %714 = load i32, i32* %search_range.addr, align 4
  %cmp788 = icmp sle i32 %call787, %714
  br i1 %cmp788, label %land.lhs.true790, label %if.end831

land.lhs.true790:                                 ; preds = %if.end784
  %715 = load i32, i32* %cand_y, align 4
  %716 = load i32, i32* %center_y, align 4
  %sub791 = sub nsw i32 %715, %716
  %call792 = call i32 @abs(i32 %sub791) #6
  %717 = load i32, i32* %search_range.addr, align 4
  %cmp793 = icmp sle i32 %call792, %717
  br i1 %cmp793, label %if.then795, label %if.end831

if.then795:                                       ; preds = %land.lhs.true790
  %718 = load i32**, i32*** @McostState, align 8
  %719 = load i32, i32* %cand_y, align 4
  %720 = load i32, i32* %center_y, align 4
  %sub796 = sub nsw i32 %719, %720
  %721 = load i32, i32* %search_range.addr, align 4
  %add797 = add nsw i32 %sub796, %721
  %idxprom798 = sext i32 %add797 to i64
  %arrayidx799 = getelementptr inbounds i32*, i32** %718, i64 %idxprom798
  %722 = load i32*, i32** %arrayidx799, align 8
  %723 = load i32, i32* %cand_x, align 4
  %724 = load i32, i32* %center_x, align 4
  %sub800 = sub nsw i32 %723, %724
  %725 = load i32, i32* %search_range.addr, align 4
  %add801 = add nsw i32 %sub800, %725
  %idxprom802 = sext i32 %add801 to i64
  %arrayidx803 = getelementptr inbounds i32, i32* %722, i64 %idxprom802
  %726 = load i32, i32* %arrayidx803, align 4
  %tobool804 = icmp ne i32 %726, 0
  br i1 %tobool804, label %if.end830, label %if.then805

if.then805:                                       ; preds = %if.then795
  %727 = load i32, i32* %lambda_factor, align 4
  %728 = load i32*, i32** @mvbits, align 8
  %729 = load i32, i32* %cand_x, align 4
  %730 = load i32, i32* %mvshift, align 4
  %shl806 = shl i32 %729, %730
  %731 = load i32, i32* %pred_x, align 4
  %sub807 = sub nsw i32 %shl806, %731
  %idxprom808 = sext i32 %sub807 to i64
  %arrayidx809 = getelementptr inbounds i32, i32* %728, i64 %idxprom808
  %732 = load i32, i32* %arrayidx809, align 4
  %733 = load i32*, i32** @mvbits, align 8
  %734 = load i32, i32* %cand_y, align 4
  %735 = load i32, i32* %mvshift, align 4
  %shl810 = shl i32 %734, %735
  %736 = load i32, i32* %pred_y, align 4
  %sub811 = sub nsw i32 %shl810, %736
  %idxprom812 = sext i32 %sub811 to i64
  %arrayidx813 = getelementptr inbounds i32, i32* %733, i64 %idxprom812
  %737 = load i32, i32* %arrayidx813, align 4
  %add814 = add nsw i32 %732, %737
  %mul815 = mul nsw i32 %727, %add814
  %shr816 = ashr i32 %mul815, 16
  store i32 %shr816, i32* %mcost, align 4
  %738 = load i16*, i16** %ref_pic, align 8
  %739 = load i16**, i16*** %orig_pic.addr, align 8
  %740 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %741 = load i32, i32* %blocksize_y, align 4
  %742 = load i32, i32* %blocksize_x, align 4
  %743 = load i32, i32* %blocksize_x4, align 4
  %744 = load i32, i32* %mcost, align 4
  %745 = load i32, i32* %min_mcost.addr, align 4
  %746 = load i32, i32* %cand_x, align 4
  %747 = load i32, i32* %cand_y, align 4
  %call817 = call i32 @PartCalMad(i16* %738, i16** %739, i16* (i32, i16*, i32, i32, i32, i32)* %740, i32 %741, i32 %742, i32 %743, i32 %744, i32 %745, i32 %746, i32 %747)
  store i32 %call817, i32* %mcost, align 4
  %748 = load i32, i32* %mcost, align 4
  %749 = load i32**, i32*** @McostState, align 8
  %750 = load i32, i32* %cand_y, align 4
  %751 = load i32, i32* %center_y, align 4
  %sub818 = sub nsw i32 %750, %751
  %752 = load i32, i32* %search_range.addr, align 4
  %add819 = add nsw i32 %sub818, %752
  %idxprom820 = sext i32 %add819 to i64
  %arrayidx821 = getelementptr inbounds i32*, i32** %749, i64 %idxprom820
  %753 = load i32*, i32** %arrayidx821, align 8
  %754 = load i32, i32* %cand_x, align 4
  %755 = load i32, i32* %center_x, align 4
  %sub822 = sub nsw i32 %754, %755
  %756 = load i32, i32* %search_range.addr, align 4
  %add823 = add nsw i32 %sub822, %756
  %idxprom824 = sext i32 %add823 to i64
  %arrayidx825 = getelementptr inbounds i32, i32* %753, i64 %idxprom824
  store i32 %748, i32* %arrayidx825, align 4
  %757 = load i32, i32* %mcost, align 4
  %758 = load i32, i32* %min_mcost.addr, align 4
  %cmp826 = icmp slt i32 %757, %758
  br i1 %cmp826, label %if.then828, label %if.end829

if.then828:                                       ; preds = %if.then805
  %759 = load i32, i32* %cand_x, align 4
  store i32 %759, i32* %best_x, align 4
  %760 = load i32, i32* %cand_y, align 4
  store i32 %760, i32* %best_y, align 4
  %761 = load i32, i32* %mcost, align 4
  store i32 %761, i32* %min_mcost.addr, align 4
  br label %if.end829

if.end829:                                        ; preds = %if.then828, %if.then805
  br label %if.end830

if.end830:                                        ; preds = %if.end829, %if.then795
  br label %if.end831

if.end831:                                        ; preds = %if.end830, %land.lhs.true790, %if.end784
  br label %for.inc832

for.inc832:                                       ; preds = %if.end831
  %762 = load i32, i32* %i, align 4
  %inc833 = add nsw i32 %762, 1
  store i32 %inc833, i32* %i, align 4
  br label %for.cond731

for.end834:                                       ; preds = %for.cond731
  store i32 1, i32* %i, align 4
  br label %for.cond835

for.cond835:                                      ; preds = %for.inc936, %for.end834
  %763 = load i32, i32* %i, align 4
  %764 = load i32, i32* %search_range.addr, align 4
  %div836 = sdiv i32 %764, 4
  %cmp837 = icmp sle i32 %763, %div836
  br i1 %cmp837, label %for.body839, label %for.end938

for.body839:                                      ; preds = %for.cond835
  %765 = load i32, i32* %i, align 4
  %mul840 = mul nsw i32 2, %765
  %sub841 = sub nsw i32 %mul840, 1
  store i32 %sub841, i32* %search_step, align 4
  %766 = load i32, i32* %iXMinNow, align 4
  store i32 %766, i32* %cand_x, align 4
  %767 = load i32, i32* %iYMinNow, align 4
  %768 = load i32, i32* %search_step, align 4
  %add842 = add nsw i32 %767, %768
  store i32 %add842, i32* %cand_y, align 4
  %769 = load i32, i32* %cand_x, align 4
  %770 = load i32, i32* %center_x, align 4
  %sub843 = sub nsw i32 %769, %770
  %call844 = call i32 @abs(i32 %sub843) #6
  %771 = load i32, i32* %search_range.addr, align 4
  %cmp845 = icmp sle i32 %call844, %771
  br i1 %cmp845, label %land.lhs.true847, label %if.end888

land.lhs.true847:                                 ; preds = %for.body839
  %772 = load i32, i32* %cand_y, align 4
  %773 = load i32, i32* %center_y, align 4
  %sub848 = sub nsw i32 %772, %773
  %call849 = call i32 @abs(i32 %sub848) #6
  %774 = load i32, i32* %search_range.addr, align 4
  %cmp850 = icmp sle i32 %call849, %774
  br i1 %cmp850, label %if.then852, label %if.end888

if.then852:                                       ; preds = %land.lhs.true847
  %775 = load i32**, i32*** @McostState, align 8
  %776 = load i32, i32* %cand_y, align 4
  %777 = load i32, i32* %center_y, align 4
  %sub853 = sub nsw i32 %776, %777
  %778 = load i32, i32* %search_range.addr, align 4
  %add854 = add nsw i32 %sub853, %778
  %idxprom855 = sext i32 %add854 to i64
  %arrayidx856 = getelementptr inbounds i32*, i32** %775, i64 %idxprom855
  %779 = load i32*, i32** %arrayidx856, align 8
  %780 = load i32, i32* %cand_x, align 4
  %781 = load i32, i32* %center_x, align 4
  %sub857 = sub nsw i32 %780, %781
  %782 = load i32, i32* %search_range.addr, align 4
  %add858 = add nsw i32 %sub857, %782
  %idxprom859 = sext i32 %add858 to i64
  %arrayidx860 = getelementptr inbounds i32, i32* %779, i64 %idxprom859
  %783 = load i32, i32* %arrayidx860, align 4
  %tobool861 = icmp ne i32 %783, 0
  br i1 %tobool861, label %if.end887, label %if.then862

if.then862:                                       ; preds = %if.then852
  %784 = load i32, i32* %lambda_factor, align 4
  %785 = load i32*, i32** @mvbits, align 8
  %786 = load i32, i32* %cand_x, align 4
  %787 = load i32, i32* %mvshift, align 4
  %shl863 = shl i32 %786, %787
  %788 = load i32, i32* %pred_x, align 4
  %sub864 = sub nsw i32 %shl863, %788
  %idxprom865 = sext i32 %sub864 to i64
  %arrayidx866 = getelementptr inbounds i32, i32* %785, i64 %idxprom865
  %789 = load i32, i32* %arrayidx866, align 4
  %790 = load i32*, i32** @mvbits, align 8
  %791 = load i32, i32* %cand_y, align 4
  %792 = load i32, i32* %mvshift, align 4
  %shl867 = shl i32 %791, %792
  %793 = load i32, i32* %pred_y, align 4
  %sub868 = sub nsw i32 %shl867, %793
  %idxprom869 = sext i32 %sub868 to i64
  %arrayidx870 = getelementptr inbounds i32, i32* %790, i64 %idxprom869
  %794 = load i32, i32* %arrayidx870, align 4
  %add871 = add nsw i32 %789, %794
  %mul872 = mul nsw i32 %784, %add871
  %shr873 = ashr i32 %mul872, 16
  store i32 %shr873, i32* %mcost, align 4
  %795 = load i16*, i16** %ref_pic, align 8
  %796 = load i16**, i16*** %orig_pic.addr, align 8
  %797 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %798 = load i32, i32* %blocksize_y, align 4
  %799 = load i32, i32* %blocksize_x, align 4
  %800 = load i32, i32* %blocksize_x4, align 4
  %801 = load i32, i32* %mcost, align 4
  %802 = load i32, i32* %min_mcost.addr, align 4
  %803 = load i32, i32* %cand_x, align 4
  %804 = load i32, i32* %cand_y, align 4
  %call874 = call i32 @PartCalMad(i16* %795, i16** %796, i16* (i32, i16*, i32, i32, i32, i32)* %797, i32 %798, i32 %799, i32 %800, i32 %801, i32 %802, i32 %803, i32 %804)
  store i32 %call874, i32* %mcost, align 4
  %805 = load i32, i32* %mcost, align 4
  %806 = load i32**, i32*** @McostState, align 8
  %807 = load i32, i32* %cand_y, align 4
  %808 = load i32, i32* %center_y, align 4
  %sub875 = sub nsw i32 %807, %808
  %809 = load i32, i32* %search_range.addr, align 4
  %add876 = add nsw i32 %sub875, %809
  %idxprom877 = sext i32 %add876 to i64
  %arrayidx878 = getelementptr inbounds i32*, i32** %806, i64 %idxprom877
  %810 = load i32*, i32** %arrayidx878, align 8
  %811 = load i32, i32* %cand_x, align 4
  %812 = load i32, i32* %center_x, align 4
  %sub879 = sub nsw i32 %811, %812
  %813 = load i32, i32* %search_range.addr, align 4
  %add880 = add nsw i32 %sub879, %813
  %idxprom881 = sext i32 %add880 to i64
  %arrayidx882 = getelementptr inbounds i32, i32* %810, i64 %idxprom881
  store i32 %805, i32* %arrayidx882, align 4
  %814 = load i32, i32* %mcost, align 4
  %815 = load i32, i32* %min_mcost.addr, align 4
  %cmp883 = icmp slt i32 %814, %815
  br i1 %cmp883, label %if.then885, label %if.end886

if.then885:                                       ; preds = %if.then862
  %816 = load i32, i32* %cand_x, align 4
  store i32 %816, i32* %best_x, align 4
  %817 = load i32, i32* %cand_y, align 4
  store i32 %817, i32* %best_y, align 4
  %818 = load i32, i32* %mcost, align 4
  store i32 %818, i32* %min_mcost.addr, align 4
  br label %if.end886

if.end886:                                        ; preds = %if.then885, %if.then862
  br label %if.end887

if.end887:                                        ; preds = %if.end886, %if.then852
  br label %if.end888

if.end888:                                        ; preds = %if.end887, %land.lhs.true847, %for.body839
  %819 = load i32, i32* %iXMinNow, align 4
  store i32 %819, i32* %cand_x, align 4
  %820 = load i32, i32* %iYMinNow, align 4
  %821 = load i32, i32* %search_step, align 4
  %sub889 = sub nsw i32 %820, %821
  store i32 %sub889, i32* %cand_y, align 4
  %822 = load i32, i32* %cand_x, align 4
  %823 = load i32, i32* %center_x, align 4
  %sub890 = sub nsw i32 %822, %823
  %call891 = call i32 @abs(i32 %sub890) #6
  %824 = load i32, i32* %search_range.addr, align 4
  %cmp892 = icmp sle i32 %call891, %824
  br i1 %cmp892, label %land.lhs.true894, label %if.end935

land.lhs.true894:                                 ; preds = %if.end888
  %825 = load i32, i32* %cand_y, align 4
  %826 = load i32, i32* %center_y, align 4
  %sub895 = sub nsw i32 %825, %826
  %call896 = call i32 @abs(i32 %sub895) #6
  %827 = load i32, i32* %search_range.addr, align 4
  %cmp897 = icmp sle i32 %call896, %827
  br i1 %cmp897, label %if.then899, label %if.end935

if.then899:                                       ; preds = %land.lhs.true894
  %828 = load i32**, i32*** @McostState, align 8
  %829 = load i32, i32* %cand_y, align 4
  %830 = load i32, i32* %center_y, align 4
  %sub900 = sub nsw i32 %829, %830
  %831 = load i32, i32* %search_range.addr, align 4
  %add901 = add nsw i32 %sub900, %831
  %idxprom902 = sext i32 %add901 to i64
  %arrayidx903 = getelementptr inbounds i32*, i32** %828, i64 %idxprom902
  %832 = load i32*, i32** %arrayidx903, align 8
  %833 = load i32, i32* %cand_x, align 4
  %834 = load i32, i32* %center_x, align 4
  %sub904 = sub nsw i32 %833, %834
  %835 = load i32, i32* %search_range.addr, align 4
  %add905 = add nsw i32 %sub904, %835
  %idxprom906 = sext i32 %add905 to i64
  %arrayidx907 = getelementptr inbounds i32, i32* %832, i64 %idxprom906
  %836 = load i32, i32* %arrayidx907, align 4
  %tobool908 = icmp ne i32 %836, 0
  br i1 %tobool908, label %if.end934, label %if.then909

if.then909:                                       ; preds = %if.then899
  %837 = load i32, i32* %lambda_factor, align 4
  %838 = load i32*, i32** @mvbits, align 8
  %839 = load i32, i32* %cand_x, align 4
  %840 = load i32, i32* %mvshift, align 4
  %shl910 = shl i32 %839, %840
  %841 = load i32, i32* %pred_x, align 4
  %sub911 = sub nsw i32 %shl910, %841
  %idxprom912 = sext i32 %sub911 to i64
  %arrayidx913 = getelementptr inbounds i32, i32* %838, i64 %idxprom912
  %842 = load i32, i32* %arrayidx913, align 4
  %843 = load i32*, i32** @mvbits, align 8
  %844 = load i32, i32* %cand_y, align 4
  %845 = load i32, i32* %mvshift, align 4
  %shl914 = shl i32 %844, %845
  %846 = load i32, i32* %pred_y, align 4
  %sub915 = sub nsw i32 %shl914, %846
  %idxprom916 = sext i32 %sub915 to i64
  %arrayidx917 = getelementptr inbounds i32, i32* %843, i64 %idxprom916
  %847 = load i32, i32* %arrayidx917, align 4
  %add918 = add nsw i32 %842, %847
  %mul919 = mul nsw i32 %837, %add918
  %shr920 = ashr i32 %mul919, 16
  store i32 %shr920, i32* %mcost, align 4
  %848 = load i16*, i16** %ref_pic, align 8
  %849 = load i16**, i16*** %orig_pic.addr, align 8
  %850 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %851 = load i32, i32* %blocksize_y, align 4
  %852 = load i32, i32* %blocksize_x, align 4
  %853 = load i32, i32* %blocksize_x4, align 4
  %854 = load i32, i32* %mcost, align 4
  %855 = load i32, i32* %min_mcost.addr, align 4
  %856 = load i32, i32* %cand_x, align 4
  %857 = load i32, i32* %cand_y, align 4
  %call921 = call i32 @PartCalMad(i16* %848, i16** %849, i16* (i32, i16*, i32, i32, i32, i32)* %850, i32 %851, i32 %852, i32 %853, i32 %854, i32 %855, i32 %856, i32 %857)
  store i32 %call921, i32* %mcost, align 4
  %858 = load i32, i32* %mcost, align 4
  %859 = load i32**, i32*** @McostState, align 8
  %860 = load i32, i32* %cand_y, align 4
  %861 = load i32, i32* %center_y, align 4
  %sub922 = sub nsw i32 %860, %861
  %862 = load i32, i32* %search_range.addr, align 4
  %add923 = add nsw i32 %sub922, %862
  %idxprom924 = sext i32 %add923 to i64
  %arrayidx925 = getelementptr inbounds i32*, i32** %859, i64 %idxprom924
  %863 = load i32*, i32** %arrayidx925, align 8
  %864 = load i32, i32* %cand_x, align 4
  %865 = load i32, i32* %center_x, align 4
  %sub926 = sub nsw i32 %864, %865
  %866 = load i32, i32* %search_range.addr, align 4
  %add927 = add nsw i32 %sub926, %866
  %idxprom928 = sext i32 %add927 to i64
  %arrayidx929 = getelementptr inbounds i32, i32* %863, i64 %idxprom928
  store i32 %858, i32* %arrayidx929, align 4
  %867 = load i32, i32* %mcost, align 4
  %868 = load i32, i32* %min_mcost.addr, align 4
  %cmp930 = icmp slt i32 %867, %868
  br i1 %cmp930, label %if.then932, label %if.end933

if.then932:                                       ; preds = %if.then909
  %869 = load i32, i32* %cand_x, align 4
  store i32 %869, i32* %best_x, align 4
  %870 = load i32, i32* %cand_y, align 4
  store i32 %870, i32* %best_y, align 4
  %871 = load i32, i32* %mcost, align 4
  store i32 %871, i32* %min_mcost.addr, align 4
  br label %if.end933

if.end933:                                        ; preds = %if.then932, %if.then909
  br label %if.end934

if.end934:                                        ; preds = %if.end933, %if.then899
  br label %if.end935

if.end935:                                        ; preds = %if.end934, %land.lhs.true894, %if.end888
  br label %for.inc936

for.inc936:                                       ; preds = %if.end935
  %872 = load i32, i32* %i, align 4
  %inc937 = add nsw i32 %872, 1
  store i32 %inc937, i32* %i, align 4
  br label %for.cond835

for.end938:                                       ; preds = %for.cond835
  %873 = load i16, i16* %ref.addr, align 2
  %conv939 = sext i16 %873 to i32
  %cmp940 = icmp sgt i32 %conv939, 0
  br i1 %cmp940, label %if.then942, label %if.else960

if.then942:                                       ; preds = %for.end938
  %874 = load i32, i32* %min_mcost.addr, align 4
  %875 = load i32, i32* @pred_SAD_ref, align 4
  %sub943 = sub nsw i32 %874, %875
  %conv944 = sitofp i32 %sub943 to float
  %876 = load i32, i32* @pred_SAD_ref, align 4
  %conv945 = sitofp i32 %876 to float
  %877 = load float, float* %betaThird, align 4
  %mul946 = fmul float %conv945, %877
  %cmp947 = fcmp olt float %conv944, %mul946
  br i1 %cmp947, label %if.then949, label %if.else950

if.then949:                                       ; preds = %if.then942
  br label %third_step

if.else950:                                       ; preds = %if.then942
  %878 = load i32, i32* %min_mcost.addr, align 4
  %879 = load i32, i32* @pred_SAD_ref, align 4
  %sub951 = sub nsw i32 %878, %879
  %conv952 = sitofp i32 %sub951 to float
  %880 = load i32, i32* @pred_SAD_ref, align 4
  %conv953 = sitofp i32 %880 to float
  %881 = load float, float* %betaSec, align 4
  %mul954 = fmul float %conv953, %881
  %cmp955 = fcmp olt float %conv952, %mul954
  br i1 %cmp955, label %if.then957, label %if.end958

if.then957:                                       ; preds = %if.else950
  br label %sec_step

if.end958:                                        ; preds = %if.else950
  br label %if.end959

if.end959:                                        ; preds = %if.end958
  br label %if.end1000

if.else960:                                       ; preds = %for.end938
  %882 = load i32, i32* %blocktype.addr, align 4
  %cmp961 = icmp sgt i32 %882, 1
  br i1 %cmp961, label %if.then963, label %if.else981

if.then963:                                       ; preds = %if.else960
  %883 = load i32, i32* %min_mcost.addr, align 4
  %884 = load i32, i32* @pred_SAD_uplayer, align 4
  %sub964 = sub nsw i32 %883, %884
  %conv965 = sitofp i32 %sub964 to float
  %885 = load i32, i32* @pred_SAD_uplayer, align 4
  %conv966 = sitofp i32 %885 to float
  %886 = load float, float* %betaThird, align 4
  %mul967 = fmul float %conv966, %886
  %cmp968 = fcmp olt float %conv965, %mul967
  br i1 %cmp968, label %if.then970, label %if.else971

if.then970:                                       ; preds = %if.then963
  br label %third_step

if.else971:                                       ; preds = %if.then963
  %887 = load i32, i32* %min_mcost.addr, align 4
  %888 = load i32, i32* @pred_SAD_uplayer, align 4
  %sub972 = sub nsw i32 %887, %888
  %conv973 = sitofp i32 %sub972 to float
  %889 = load i32, i32* @pred_SAD_uplayer, align 4
  %conv974 = sitofp i32 %889 to float
  %890 = load float, float* %betaSec, align 4
  %mul975 = fmul float %conv974, %890
  %cmp976 = fcmp olt float %conv973, %mul975
  br i1 %cmp976, label %if.then978, label %if.end979

if.then978:                                       ; preds = %if.else971
  br label %sec_step

if.end979:                                        ; preds = %if.else971
  br label %if.end980

if.end980:                                        ; preds = %if.end979
  br label %if.end999

if.else981:                                       ; preds = %if.else960
  %891 = load i32, i32* %min_mcost.addr, align 4
  %892 = load i32, i32* @pred_SAD_space, align 4
  %sub982 = sub nsw i32 %891, %892
  %conv983 = sitofp i32 %sub982 to float
  %893 = load i32, i32* @pred_SAD_space, align 4
  %conv984 = sitofp i32 %893 to float
  %894 = load float, float* %betaThird, align 4
  %mul985 = fmul float %conv984, %894
  %cmp986 = fcmp olt float %conv983, %mul985
  br i1 %cmp986, label %if.then988, label %if.else989

if.then988:                                       ; preds = %if.else981
  br label %third_step

if.else989:                                       ; preds = %if.else981
  %895 = load i32, i32* %min_mcost.addr, align 4
  %896 = load i32, i32* @pred_SAD_space, align 4
  %sub990 = sub nsw i32 %895, %896
  %conv991 = sitofp i32 %sub990 to float
  %897 = load i32, i32* @pred_SAD_space, align 4
  %conv992 = sitofp i32 %897 to float
  %898 = load float, float* %betaSec, align 4
  %mul993 = fmul float %conv992, %898
  %cmp994 = fcmp olt float %conv991, %mul993
  br i1 %cmp994, label %if.then996, label %if.end997

if.then996:                                       ; preds = %if.else989
  br label %sec_step

if.end997:                                        ; preds = %if.else989
  br label %if.end998

if.end998:                                        ; preds = %if.end997
  br label %if.end999

if.end999:                                        ; preds = %if.end998, %if.end980
  br label %if.end1000

if.end1000:                                       ; preds = %if.end999, %if.end959
  %899 = load i32, i32* %best_x, align 4
  store i32 %899, i32* %iXMinNow, align 4
  %900 = load i32, i32* %best_y, align 4
  store i32 %900, i32* %iYMinNow, align 4
  store i32 1, i32* %pos, align 4
  br label %for.cond1001

for.cond1001:                                     ; preds = %for.inc1057, %if.end1000
  %901 = load i32, i32* %pos, align 4
  %cmp1002 = icmp slt i32 %901, 25
  br i1 %cmp1002, label %for.body1004, label %for.end1059

for.body1004:                                     ; preds = %for.cond1001
  %902 = load i32, i32* %iXMinNow, align 4
  %903 = load i32*, i32** @spiral_search_x, align 8
  %904 = load i32, i32* %pos, align 4
  %idxprom1005 = sext i32 %904 to i64
  %arrayidx1006 = getelementptr inbounds i32, i32* %903, i64 %idxprom1005
  %905 = load i32, i32* %arrayidx1006, align 4
  %add1007 = add nsw i32 %902, %905
  store i32 %add1007, i32* %cand_x, align 4
  %906 = load i32, i32* %iYMinNow, align 4
  %907 = load i32*, i32** @spiral_search_y, align 8
  %908 = load i32, i32* %pos, align 4
  %idxprom1008 = sext i32 %908 to i64
  %arrayidx1009 = getelementptr inbounds i32, i32* %907, i64 %idxprom1008
  %909 = load i32, i32* %arrayidx1009, align 4
  %add1010 = add nsw i32 %906, %909
  store i32 %add1010, i32* %cand_y, align 4
  %910 = load i32, i32* %cand_x, align 4
  %911 = load i32, i32* %center_x, align 4
  %sub1011 = sub nsw i32 %910, %911
  %call1012 = call i32 @abs(i32 %sub1011) #6
  %912 = load i32, i32* %search_range.addr, align 4
  %cmp1013 = icmp sle i32 %call1012, %912
  br i1 %cmp1013, label %land.lhs.true1015, label %if.end1056

land.lhs.true1015:                                ; preds = %for.body1004
  %913 = load i32, i32* %cand_y, align 4
  %914 = load i32, i32* %center_y, align 4
  %sub1016 = sub nsw i32 %913, %914
  %call1017 = call i32 @abs(i32 %sub1016) #6
  %915 = load i32, i32* %search_range.addr, align 4
  %cmp1018 = icmp sle i32 %call1017, %915
  br i1 %cmp1018, label %if.then1020, label %if.end1056

if.then1020:                                      ; preds = %land.lhs.true1015
  %916 = load i32**, i32*** @McostState, align 8
  %917 = load i32, i32* %cand_y, align 4
  %918 = load i32, i32* %center_y, align 4
  %sub1021 = sub nsw i32 %917, %918
  %919 = load i32, i32* %search_range.addr, align 4
  %add1022 = add nsw i32 %sub1021, %919
  %idxprom1023 = sext i32 %add1022 to i64
  %arrayidx1024 = getelementptr inbounds i32*, i32** %916, i64 %idxprom1023
  %920 = load i32*, i32** %arrayidx1024, align 8
  %921 = load i32, i32* %cand_x, align 4
  %922 = load i32, i32* %center_x, align 4
  %sub1025 = sub nsw i32 %921, %922
  %923 = load i32, i32* %search_range.addr, align 4
  %add1026 = add nsw i32 %sub1025, %923
  %idxprom1027 = sext i32 %add1026 to i64
  %arrayidx1028 = getelementptr inbounds i32, i32* %920, i64 %idxprom1027
  %924 = load i32, i32* %arrayidx1028, align 4
  %tobool1029 = icmp ne i32 %924, 0
  br i1 %tobool1029, label %if.end1055, label %if.then1030

if.then1030:                                      ; preds = %if.then1020
  %925 = load i32, i32* %lambda_factor, align 4
  %926 = load i32*, i32** @mvbits, align 8
  %927 = load i32, i32* %cand_x, align 4
  %928 = load i32, i32* %mvshift, align 4
  %shl1031 = shl i32 %927, %928
  %929 = load i32, i32* %pred_x, align 4
  %sub1032 = sub nsw i32 %shl1031, %929
  %idxprom1033 = sext i32 %sub1032 to i64
  %arrayidx1034 = getelementptr inbounds i32, i32* %926, i64 %idxprom1033
  %930 = load i32, i32* %arrayidx1034, align 4
  %931 = load i32*, i32** @mvbits, align 8
  %932 = load i32, i32* %cand_y, align 4
  %933 = load i32, i32* %mvshift, align 4
  %shl1035 = shl i32 %932, %933
  %934 = load i32, i32* %pred_y, align 4
  %sub1036 = sub nsw i32 %shl1035, %934
  %idxprom1037 = sext i32 %sub1036 to i64
  %arrayidx1038 = getelementptr inbounds i32, i32* %931, i64 %idxprom1037
  %935 = load i32, i32* %arrayidx1038, align 4
  %add1039 = add nsw i32 %930, %935
  %mul1040 = mul nsw i32 %925, %add1039
  %shr1041 = ashr i32 %mul1040, 16
  store i32 %shr1041, i32* %mcost, align 4
  %936 = load i16*, i16** %ref_pic, align 8
  %937 = load i16**, i16*** %orig_pic.addr, align 8
  %938 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %939 = load i32, i32* %blocksize_y, align 4
  %940 = load i32, i32* %blocksize_x, align 4
  %941 = load i32, i32* %blocksize_x4, align 4
  %942 = load i32, i32* %mcost, align 4
  %943 = load i32, i32* %min_mcost.addr, align 4
  %944 = load i32, i32* %cand_x, align 4
  %945 = load i32, i32* %cand_y, align 4
  %call1042 = call i32 @PartCalMad(i16* %936, i16** %937, i16* (i32, i16*, i32, i32, i32, i32)* %938, i32 %939, i32 %940, i32 %941, i32 %942, i32 %943, i32 %944, i32 %945)
  store i32 %call1042, i32* %mcost, align 4
  %946 = load i32, i32* %mcost, align 4
  %947 = load i32**, i32*** @McostState, align 8
  %948 = load i32, i32* %cand_y, align 4
  %949 = load i32, i32* %center_y, align 4
  %sub1043 = sub nsw i32 %948, %949
  %950 = load i32, i32* %search_range.addr, align 4
  %add1044 = add nsw i32 %sub1043, %950
  %idxprom1045 = sext i32 %add1044 to i64
  %arrayidx1046 = getelementptr inbounds i32*, i32** %947, i64 %idxprom1045
  %951 = load i32*, i32** %arrayidx1046, align 8
  %952 = load i32, i32* %cand_x, align 4
  %953 = load i32, i32* %center_x, align 4
  %sub1047 = sub nsw i32 %952, %953
  %954 = load i32, i32* %search_range.addr, align 4
  %add1048 = add nsw i32 %sub1047, %954
  %idxprom1049 = sext i32 %add1048 to i64
  %arrayidx1050 = getelementptr inbounds i32, i32* %951, i64 %idxprom1049
  store i32 %946, i32* %arrayidx1050, align 4
  %955 = load i32, i32* %mcost, align 4
  %956 = load i32, i32* %min_mcost.addr, align 4
  %cmp1051 = icmp slt i32 %955, %956
  br i1 %cmp1051, label %if.then1053, label %if.end1054

if.then1053:                                      ; preds = %if.then1030
  %957 = load i32, i32* %cand_x, align 4
  store i32 %957, i32* %best_x, align 4
  %958 = load i32, i32* %cand_y, align 4
  store i32 %958, i32* %best_y, align 4
  %959 = load i32, i32* %mcost, align 4
  store i32 %959, i32* %min_mcost.addr, align 4
  br label %if.end1054

if.end1054:                                       ; preds = %if.then1053, %if.then1030
  br label %if.end1055

if.end1055:                                       ; preds = %if.end1054, %if.then1020
  br label %if.end1056

if.end1056:                                       ; preds = %if.end1055, %land.lhs.true1015, %for.body1004
  br label %for.inc1057

for.inc1057:                                      ; preds = %if.end1056
  %960 = load i32, i32* %pos, align 4
  %inc1058 = add nsw i32 %960, 1
  store i32 %inc1058, i32* %pos, align 4
  br label %for.cond1001

for.end1059:                                      ; preds = %for.cond1001
  %961 = load i16, i16* %ref.addr, align 2
  %conv1060 = sext i16 %961 to i32
  %cmp1061 = icmp sgt i32 %conv1060, 0
  br i1 %cmp1061, label %if.then1063, label %if.else1081

if.then1063:                                      ; preds = %for.end1059
  %962 = load i32, i32* %min_mcost.addr, align 4
  %963 = load i32, i32* @pred_SAD_ref, align 4
  %sub1064 = sub nsw i32 %962, %963
  %conv1065 = sitofp i32 %sub1064 to float
  %964 = load i32, i32* @pred_SAD_ref, align 4
  %conv1066 = sitofp i32 %964 to float
  %965 = load float, float* %betaThird, align 4
  %mul1067 = fmul float %conv1066, %965
  %cmp1068 = fcmp olt float %conv1065, %mul1067
  br i1 %cmp1068, label %if.then1070, label %if.else1071

if.then1070:                                      ; preds = %if.then1063
  br label %third_step

if.else1071:                                      ; preds = %if.then1063
  %966 = load i32, i32* %min_mcost.addr, align 4
  %967 = load i32, i32* @pred_SAD_ref, align 4
  %sub1072 = sub nsw i32 %966, %967
  %conv1073 = sitofp i32 %sub1072 to float
  %968 = load i32, i32* @pred_SAD_ref, align 4
  %conv1074 = sitofp i32 %968 to float
  %969 = load float, float* %betaSec, align 4
  %mul1075 = fmul float %conv1074, %969
  %cmp1076 = fcmp olt float %conv1073, %mul1075
  br i1 %cmp1076, label %if.then1078, label %if.end1079

if.then1078:                                      ; preds = %if.else1071
  br label %sec_step

if.end1079:                                       ; preds = %if.else1071
  br label %if.end1080

if.end1080:                                       ; preds = %if.end1079
  br label %if.end1121

if.else1081:                                      ; preds = %for.end1059
  %970 = load i32, i32* %blocktype.addr, align 4
  %cmp1082 = icmp sgt i32 %970, 1
  br i1 %cmp1082, label %if.then1084, label %if.else1102

if.then1084:                                      ; preds = %if.else1081
  %971 = load i32, i32* %min_mcost.addr, align 4
  %972 = load i32, i32* @pred_SAD_uplayer, align 4
  %sub1085 = sub nsw i32 %971, %972
  %conv1086 = sitofp i32 %sub1085 to float
  %973 = load i32, i32* @pred_SAD_uplayer, align 4
  %conv1087 = sitofp i32 %973 to float
  %974 = load float, float* %betaThird, align 4
  %mul1088 = fmul float %conv1087, %974
  %cmp1089 = fcmp olt float %conv1086, %mul1088
  br i1 %cmp1089, label %if.then1091, label %if.else1092

if.then1091:                                      ; preds = %if.then1084
  br label %third_step

if.else1092:                                      ; preds = %if.then1084
  %975 = load i32, i32* %min_mcost.addr, align 4
  %976 = load i32, i32* @pred_SAD_uplayer, align 4
  %sub1093 = sub nsw i32 %975, %976
  %conv1094 = sitofp i32 %sub1093 to float
  %977 = load i32, i32* @pred_SAD_uplayer, align 4
  %conv1095 = sitofp i32 %977 to float
  %978 = load float, float* %betaSec, align 4
  %mul1096 = fmul float %conv1095, %978
  %cmp1097 = fcmp olt float %conv1094, %mul1096
  br i1 %cmp1097, label %if.then1099, label %if.end1100

if.then1099:                                      ; preds = %if.else1092
  br label %sec_step

if.end1100:                                       ; preds = %if.else1092
  br label %if.end1101

if.end1101:                                       ; preds = %if.end1100
  br label %if.end1120

if.else1102:                                      ; preds = %if.else1081
  %979 = load i32, i32* %min_mcost.addr, align 4
  %980 = load i32, i32* @pred_SAD_space, align 4
  %sub1103 = sub nsw i32 %979, %980
  %conv1104 = sitofp i32 %sub1103 to float
  %981 = load i32, i32* @pred_SAD_space, align 4
  %conv1105 = sitofp i32 %981 to float
  %982 = load float, float* %betaThird, align 4
  %mul1106 = fmul float %conv1105, %982
  %cmp1107 = fcmp olt float %conv1104, %mul1106
  br i1 %cmp1107, label %if.then1109, label %if.else1110

if.then1109:                                      ; preds = %if.else1102
  br label %third_step

if.else1110:                                      ; preds = %if.else1102
  %983 = load i32, i32* %min_mcost.addr, align 4
  %984 = load i32, i32* @pred_SAD_space, align 4
  %sub1111 = sub nsw i32 %983, %984
  %conv1112 = sitofp i32 %sub1111 to float
  %985 = load i32, i32* @pred_SAD_space, align 4
  %conv1113 = sitofp i32 %985 to float
  %986 = load float, float* %betaSec, align 4
  %mul1114 = fmul float %conv1113, %986
  %cmp1115 = fcmp olt float %conv1112, %mul1114
  br i1 %cmp1115, label %if.then1117, label %if.end1118

if.then1117:                                      ; preds = %if.else1110
  br label %sec_step

if.end1118:                                       ; preds = %if.else1110
  br label %if.end1119

if.end1119:                                       ; preds = %if.end1118
  br label %if.end1120

if.end1120:                                       ; preds = %if.end1119, %if.end1101
  br label %if.end1121

if.end1121:                                       ; preds = %if.end1120, %if.end1080
  store i32 1, i32* %i, align 4
  br label %for.cond1122

for.cond1122:                                     ; preds = %for.inc1253, %if.end1121
  %987 = load i32, i32* %i, align 4
  %988 = load i32, i32* %search_range.addr, align 4
  %div1123 = sdiv i32 %988, 4
  %cmp1124 = icmp sle i32 %987, %div1123
  br i1 %cmp1124, label %for.body1126, label %for.end1255

for.body1126:                                     ; preds = %for.cond1122
  store i32 0, i32* %iAbort, align 4
  store i32 0, i32* %m, align 4
  br label %for.cond1127

for.cond1127:                                     ; preds = %for.inc1185, %for.body1126
  %989 = load i32, i32* %m, align 4
  %cmp1128 = icmp slt i32 %989, 16
  br i1 %cmp1128, label %for.body1130, label %for.end1187

for.body1130:                                     ; preds = %for.cond1127
  %990 = load i32, i32* %iXMinNow, align 4
  %991 = load i32, i32* %m, align 4
  %idxprom1131 = sext i32 %991 to i64
  %arrayidx1132 = getelementptr inbounds [16 x i32], [16 x i32]* @FastIntegerPelBlockMotionSearch.Big_Hexagon_x, i64 0, i64 %idxprom1131
  %992 = load i32, i32* %arrayidx1132, align 4
  %993 = load i32, i32* %i, align 4
  %mul1133 = mul nsw i32 %992, %993
  %add1134 = add nsw i32 %990, %mul1133
  store i32 %add1134, i32* %cand_x, align 4
  %994 = load i32, i32* %iYMinNow, align 4
  %995 = load i32, i32* %m, align 4
  %idxprom1135 = sext i32 %995 to i64
  %arrayidx1136 = getelementptr inbounds [16 x i32], [16 x i32]* @FastIntegerPelBlockMotionSearch.Big_Hexagon_y, i64 0, i64 %idxprom1135
  %996 = load i32, i32* %arrayidx1136, align 4
  %997 = load i32, i32* %i, align 4
  %mul1137 = mul nsw i32 %996, %997
  %add1138 = add nsw i32 %994, %mul1137
  store i32 %add1138, i32* %cand_y, align 4
  %998 = load i32, i32* %cand_x, align 4
  %999 = load i32, i32* %center_x, align 4
  %sub1139 = sub nsw i32 %998, %999
  %call1140 = call i32 @abs(i32 %sub1139) #6
  %1000 = load i32, i32* %search_range.addr, align 4
  %cmp1141 = icmp sle i32 %call1140, %1000
  br i1 %cmp1141, label %land.lhs.true1143, label %if.end1184

land.lhs.true1143:                                ; preds = %for.body1130
  %1001 = load i32, i32* %cand_y, align 4
  %1002 = load i32, i32* %center_y, align 4
  %sub1144 = sub nsw i32 %1001, %1002
  %call1145 = call i32 @abs(i32 %sub1144) #6
  %1003 = load i32, i32* %search_range.addr, align 4
  %cmp1146 = icmp sle i32 %call1145, %1003
  br i1 %cmp1146, label %if.then1148, label %if.end1184

if.then1148:                                      ; preds = %land.lhs.true1143
  %1004 = load i32**, i32*** @McostState, align 8
  %1005 = load i32, i32* %cand_y, align 4
  %1006 = load i32, i32* %center_y, align 4
  %sub1149 = sub nsw i32 %1005, %1006
  %1007 = load i32, i32* %search_range.addr, align 4
  %add1150 = add nsw i32 %sub1149, %1007
  %idxprom1151 = sext i32 %add1150 to i64
  %arrayidx1152 = getelementptr inbounds i32*, i32** %1004, i64 %idxprom1151
  %1008 = load i32*, i32** %arrayidx1152, align 8
  %1009 = load i32, i32* %cand_x, align 4
  %1010 = load i32, i32* %center_x, align 4
  %sub1153 = sub nsw i32 %1009, %1010
  %1011 = load i32, i32* %search_range.addr, align 4
  %add1154 = add nsw i32 %sub1153, %1011
  %idxprom1155 = sext i32 %add1154 to i64
  %arrayidx1156 = getelementptr inbounds i32, i32* %1008, i64 %idxprom1155
  %1012 = load i32, i32* %arrayidx1156, align 4
  %tobool1157 = icmp ne i32 %1012, 0
  br i1 %tobool1157, label %if.end1183, label %if.then1158

if.then1158:                                      ; preds = %if.then1148
  %1013 = load i32, i32* %lambda_factor, align 4
  %1014 = load i32*, i32** @mvbits, align 8
  %1015 = load i32, i32* %cand_x, align 4
  %1016 = load i32, i32* %mvshift, align 4
  %shl1159 = shl i32 %1015, %1016
  %1017 = load i32, i32* %pred_x, align 4
  %sub1160 = sub nsw i32 %shl1159, %1017
  %idxprom1161 = sext i32 %sub1160 to i64
  %arrayidx1162 = getelementptr inbounds i32, i32* %1014, i64 %idxprom1161
  %1018 = load i32, i32* %arrayidx1162, align 4
  %1019 = load i32*, i32** @mvbits, align 8
  %1020 = load i32, i32* %cand_y, align 4
  %1021 = load i32, i32* %mvshift, align 4
  %shl1163 = shl i32 %1020, %1021
  %1022 = load i32, i32* %pred_y, align 4
  %sub1164 = sub nsw i32 %shl1163, %1022
  %idxprom1165 = sext i32 %sub1164 to i64
  %arrayidx1166 = getelementptr inbounds i32, i32* %1019, i64 %idxprom1165
  %1023 = load i32, i32* %arrayidx1166, align 4
  %add1167 = add nsw i32 %1018, %1023
  %mul1168 = mul nsw i32 %1013, %add1167
  %shr1169 = ashr i32 %mul1168, 16
  store i32 %shr1169, i32* %mcost, align 4
  %1024 = load i16*, i16** %ref_pic, align 8
  %1025 = load i16**, i16*** %orig_pic.addr, align 8
  %1026 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %1027 = load i32, i32* %blocksize_y, align 4
  %1028 = load i32, i32* %blocksize_x, align 4
  %1029 = load i32, i32* %blocksize_x4, align 4
  %1030 = load i32, i32* %mcost, align 4
  %1031 = load i32, i32* %min_mcost.addr, align 4
  %1032 = load i32, i32* %cand_x, align 4
  %1033 = load i32, i32* %cand_y, align 4
  %call1170 = call i32 @PartCalMad(i16* %1024, i16** %1025, i16* (i32, i16*, i32, i32, i32, i32)* %1026, i32 %1027, i32 %1028, i32 %1029, i32 %1030, i32 %1031, i32 %1032, i32 %1033)
  store i32 %call1170, i32* %mcost, align 4
  %1034 = load i32, i32* %mcost, align 4
  %1035 = load i32**, i32*** @McostState, align 8
  %1036 = load i32, i32* %cand_y, align 4
  %1037 = load i32, i32* %center_y, align 4
  %sub1171 = sub nsw i32 %1036, %1037
  %1038 = load i32, i32* %search_range.addr, align 4
  %add1172 = add nsw i32 %sub1171, %1038
  %idxprom1173 = sext i32 %add1172 to i64
  %arrayidx1174 = getelementptr inbounds i32*, i32** %1035, i64 %idxprom1173
  %1039 = load i32*, i32** %arrayidx1174, align 8
  %1040 = load i32, i32* %cand_x, align 4
  %1041 = load i32, i32* %center_x, align 4
  %sub1175 = sub nsw i32 %1040, %1041
  %1042 = load i32, i32* %search_range.addr, align 4
  %add1176 = add nsw i32 %sub1175, %1042
  %idxprom1177 = sext i32 %add1176 to i64
  %arrayidx1178 = getelementptr inbounds i32, i32* %1039, i64 %idxprom1177
  store i32 %1034, i32* %arrayidx1178, align 4
  %1043 = load i32, i32* %mcost, align 4
  %1044 = load i32, i32* %min_mcost.addr, align 4
  %cmp1179 = icmp slt i32 %1043, %1044
  br i1 %cmp1179, label %if.then1181, label %if.end1182

if.then1181:                                      ; preds = %if.then1158
  %1045 = load i32, i32* %cand_x, align 4
  store i32 %1045, i32* %best_x, align 4
  %1046 = load i32, i32* %cand_y, align 4
  store i32 %1046, i32* %best_y, align 4
  %1047 = load i32, i32* %mcost, align 4
  store i32 %1047, i32* %min_mcost.addr, align 4
  store i32 1, i32* %iAbort, align 4
  br label %if.end1182

if.end1182:                                       ; preds = %if.then1181, %if.then1158
  br label %if.end1183

if.end1183:                                       ; preds = %if.end1182, %if.then1148
  br label %if.end1184

if.end1184:                                       ; preds = %if.end1183, %land.lhs.true1143, %for.body1130
  br label %for.inc1185

for.inc1185:                                      ; preds = %if.end1184
  %1048 = load i32, i32* %m, align 4
  %inc1186 = add nsw i32 %1048, 1
  store i32 %inc1186, i32* %m, align 4
  br label %for.cond1127

for.end1187:                                      ; preds = %for.cond1127
  %1049 = load i32, i32* %iAbort, align 4
  %tobool1188 = icmp ne i32 %1049, 0
  br i1 %tobool1188, label %if.then1189, label %if.end1252

if.then1189:                                      ; preds = %for.end1187
  %1050 = load i16, i16* %ref.addr, align 2
  %conv1190 = sext i16 %1050 to i32
  %cmp1191 = icmp sgt i32 %conv1190, 0
  br i1 %cmp1191, label %if.then1193, label %if.else1211

if.then1193:                                      ; preds = %if.then1189
  %1051 = load i32, i32* %min_mcost.addr, align 4
  %1052 = load i32, i32* @pred_SAD_ref, align 4
  %sub1194 = sub nsw i32 %1051, %1052
  %conv1195 = sitofp i32 %sub1194 to float
  %1053 = load i32, i32* @pred_SAD_ref, align 4
  %conv1196 = sitofp i32 %1053 to float
  %1054 = load float, float* %betaThird, align 4
  %mul1197 = fmul float %conv1196, %1054
  %cmp1198 = fcmp olt float %conv1195, %mul1197
  br i1 %cmp1198, label %if.then1200, label %if.else1201

if.then1200:                                      ; preds = %if.then1193
  br label %third_step

if.else1201:                                      ; preds = %if.then1193
  %1055 = load i32, i32* %min_mcost.addr, align 4
  %1056 = load i32, i32* @pred_SAD_ref, align 4
  %sub1202 = sub nsw i32 %1055, %1056
  %conv1203 = sitofp i32 %sub1202 to float
  %1057 = load i32, i32* @pred_SAD_ref, align 4
  %conv1204 = sitofp i32 %1057 to float
  %1058 = load float, float* %betaSec, align 4
  %mul1205 = fmul float %conv1204, %1058
  %cmp1206 = fcmp olt float %conv1203, %mul1205
  br i1 %cmp1206, label %if.then1208, label %if.end1209

if.then1208:                                      ; preds = %if.else1201
  br label %sec_step

if.end1209:                                       ; preds = %if.else1201
  br label %if.end1210

if.end1210:                                       ; preds = %if.end1209
  br label %if.end1251

if.else1211:                                      ; preds = %if.then1189
  %1059 = load i32, i32* %blocktype.addr, align 4
  %cmp1212 = icmp sgt i32 %1059, 1
  br i1 %cmp1212, label %if.then1214, label %if.else1232

if.then1214:                                      ; preds = %if.else1211
  %1060 = load i32, i32* %min_mcost.addr, align 4
  %1061 = load i32, i32* @pred_SAD_uplayer, align 4
  %sub1215 = sub nsw i32 %1060, %1061
  %conv1216 = sitofp i32 %sub1215 to float
  %1062 = load i32, i32* @pred_SAD_uplayer, align 4
  %conv1217 = sitofp i32 %1062 to float
  %1063 = load float, float* %betaThird, align 4
  %mul1218 = fmul float %conv1217, %1063
  %cmp1219 = fcmp olt float %conv1216, %mul1218
  br i1 %cmp1219, label %if.then1221, label %if.else1222

if.then1221:                                      ; preds = %if.then1214
  br label %third_step

if.else1222:                                      ; preds = %if.then1214
  %1064 = load i32, i32* %min_mcost.addr, align 4
  %1065 = load i32, i32* @pred_SAD_uplayer, align 4
  %sub1223 = sub nsw i32 %1064, %1065
  %conv1224 = sitofp i32 %sub1223 to float
  %1066 = load i32, i32* @pred_SAD_uplayer, align 4
  %conv1225 = sitofp i32 %1066 to float
  %1067 = load float, float* %betaSec, align 4
  %mul1226 = fmul float %conv1225, %1067
  %cmp1227 = fcmp olt float %conv1224, %mul1226
  br i1 %cmp1227, label %if.then1229, label %if.end1230

if.then1229:                                      ; preds = %if.else1222
  br label %sec_step

if.end1230:                                       ; preds = %if.else1222
  br label %if.end1231

if.end1231:                                       ; preds = %if.end1230
  br label %if.end1250

if.else1232:                                      ; preds = %if.else1211
  %1068 = load i32, i32* %min_mcost.addr, align 4
  %1069 = load i32, i32* @pred_SAD_space, align 4
  %sub1233 = sub nsw i32 %1068, %1069
  %conv1234 = sitofp i32 %sub1233 to float
  %1070 = load i32, i32* @pred_SAD_space, align 4
  %conv1235 = sitofp i32 %1070 to float
  %1071 = load float, float* %betaThird, align 4
  %mul1236 = fmul float %conv1235, %1071
  %cmp1237 = fcmp olt float %conv1234, %mul1236
  br i1 %cmp1237, label %if.then1239, label %if.else1240

if.then1239:                                      ; preds = %if.else1232
  br label %third_step

if.else1240:                                      ; preds = %if.else1232
  %1072 = load i32, i32* %min_mcost.addr, align 4
  %1073 = load i32, i32* @pred_SAD_space, align 4
  %sub1241 = sub nsw i32 %1072, %1073
  %conv1242 = sitofp i32 %sub1241 to float
  %1074 = load i32, i32* @pred_SAD_space, align 4
  %conv1243 = sitofp i32 %1074 to float
  %1075 = load float, float* %betaSec, align 4
  %mul1244 = fmul float %conv1243, %1075
  %cmp1245 = fcmp olt float %conv1242, %mul1244
  br i1 %cmp1245, label %if.then1247, label %if.end1248

if.then1247:                                      ; preds = %if.else1240
  br label %sec_step

if.end1248:                                       ; preds = %if.else1240
  br label %if.end1249

if.end1249:                                       ; preds = %if.end1248
  br label %if.end1250

if.end1250:                                       ; preds = %if.end1249, %if.end1231
  br label %if.end1251

if.end1251:                                       ; preds = %if.end1250, %if.end1210
  br label %if.end1252

if.end1252:                                       ; preds = %if.end1251, %for.end1187
  br label %for.inc1253

for.inc1253:                                      ; preds = %if.end1252
  %1076 = load i32, i32* %i, align 4
  %inc1254 = add nsw i32 %1076, 1
  store i32 %inc1254, i32* %i, align 4
  br label %for.cond1122

for.end1255:                                      ; preds = %for.cond1122
  br label %sec_step

sec_step:                                         ; preds = %for.end1255, %if.then1247, %if.then1229, %if.then1208, %if.then1117, %if.then1099, %if.then1078, %if.then996, %if.then978, %if.then957, %if.then729, %if.then722, %if.then704, %if.then683, %if.then389
  %1077 = load i32, i32* %best_x, align 4
  store i32 %1077, i32* %iXMinNow, align 4
  %1078 = load i32, i32* %best_y, align 4
  store i32 %1078, i32* %iYMinNow, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond1256

for.cond1256:                                     ; preds = %for.inc1322, %sec_step
  %1079 = load i32, i32* %i, align 4
  %1080 = load i32, i32* %search_range.addr, align 4
  %cmp1257 = icmp slt i32 %1079, %1080
  br i1 %cmp1257, label %for.body1259, label %for.end1324

for.body1259:                                     ; preds = %for.cond1256
  store i32 1, i32* %iAbort, align 4
  store i32 0, i32* %m, align 4
  br label %for.cond1260

for.cond1260:                                     ; preds = %for.inc1316, %for.body1259
  %1081 = load i32, i32* %m, align 4
  %cmp1261 = icmp slt i32 %1081, 6
  br i1 %cmp1261, label %for.body1263, label %for.end1318

for.body1263:                                     ; preds = %for.cond1260
  %1082 = load i32, i32* %iXMinNow, align 4
  %1083 = load i32, i32* %m, align 4
  %idxprom1264 = sext i32 %1083 to i64
  %arrayidx1265 = getelementptr inbounds [6 x i32], [6 x i32]* @FastIntegerPelBlockMotionSearch.Hexagon_x, i64 0, i64 %idxprom1264
  %1084 = load i32, i32* %arrayidx1265, align 4
  %add1266 = add nsw i32 %1082, %1084
  store i32 %add1266, i32* %cand_x, align 4
  %1085 = load i32, i32* %iYMinNow, align 4
  %1086 = load i32, i32* %m, align 4
  %idxprom1267 = sext i32 %1086 to i64
  %arrayidx1268 = getelementptr inbounds [6 x i32], [6 x i32]* @FastIntegerPelBlockMotionSearch.Hexagon_y, i64 0, i64 %idxprom1267
  %1087 = load i32, i32* %arrayidx1268, align 4
  %add1269 = add nsw i32 %1085, %1087
  store i32 %add1269, i32* %cand_y, align 4
  %1088 = load i32, i32* %cand_x, align 4
  %1089 = load i32, i32* %center_x, align 4
  %sub1270 = sub nsw i32 %1088, %1089
  %call1271 = call i32 @abs(i32 %sub1270) #6
  %1090 = load i32, i32* %search_range.addr, align 4
  %cmp1272 = icmp sle i32 %call1271, %1090
  br i1 %cmp1272, label %land.lhs.true1274, label %if.end1315

land.lhs.true1274:                                ; preds = %for.body1263
  %1091 = load i32, i32* %cand_y, align 4
  %1092 = load i32, i32* %center_y, align 4
  %sub1275 = sub nsw i32 %1091, %1092
  %call1276 = call i32 @abs(i32 %sub1275) #6
  %1093 = load i32, i32* %search_range.addr, align 4
  %cmp1277 = icmp sle i32 %call1276, %1093
  br i1 %cmp1277, label %if.then1279, label %if.end1315

if.then1279:                                      ; preds = %land.lhs.true1274
  %1094 = load i32**, i32*** @McostState, align 8
  %1095 = load i32, i32* %cand_y, align 4
  %1096 = load i32, i32* %center_y, align 4
  %sub1280 = sub nsw i32 %1095, %1096
  %1097 = load i32, i32* %search_range.addr, align 4
  %add1281 = add nsw i32 %sub1280, %1097
  %idxprom1282 = sext i32 %add1281 to i64
  %arrayidx1283 = getelementptr inbounds i32*, i32** %1094, i64 %idxprom1282
  %1098 = load i32*, i32** %arrayidx1283, align 8
  %1099 = load i32, i32* %cand_x, align 4
  %1100 = load i32, i32* %center_x, align 4
  %sub1284 = sub nsw i32 %1099, %1100
  %1101 = load i32, i32* %search_range.addr, align 4
  %add1285 = add nsw i32 %sub1284, %1101
  %idxprom1286 = sext i32 %add1285 to i64
  %arrayidx1287 = getelementptr inbounds i32, i32* %1098, i64 %idxprom1286
  %1102 = load i32, i32* %arrayidx1287, align 4
  %tobool1288 = icmp ne i32 %1102, 0
  br i1 %tobool1288, label %if.end1314, label %if.then1289

if.then1289:                                      ; preds = %if.then1279
  %1103 = load i32, i32* %lambda_factor, align 4
  %1104 = load i32*, i32** @mvbits, align 8
  %1105 = load i32, i32* %cand_x, align 4
  %1106 = load i32, i32* %mvshift, align 4
  %shl1290 = shl i32 %1105, %1106
  %1107 = load i32, i32* %pred_x, align 4
  %sub1291 = sub nsw i32 %shl1290, %1107
  %idxprom1292 = sext i32 %sub1291 to i64
  %arrayidx1293 = getelementptr inbounds i32, i32* %1104, i64 %idxprom1292
  %1108 = load i32, i32* %arrayidx1293, align 4
  %1109 = load i32*, i32** @mvbits, align 8
  %1110 = load i32, i32* %cand_y, align 4
  %1111 = load i32, i32* %mvshift, align 4
  %shl1294 = shl i32 %1110, %1111
  %1112 = load i32, i32* %pred_y, align 4
  %sub1295 = sub nsw i32 %shl1294, %1112
  %idxprom1296 = sext i32 %sub1295 to i64
  %arrayidx1297 = getelementptr inbounds i32, i32* %1109, i64 %idxprom1296
  %1113 = load i32, i32* %arrayidx1297, align 4
  %add1298 = add nsw i32 %1108, %1113
  %mul1299 = mul nsw i32 %1103, %add1298
  %shr1300 = ashr i32 %mul1299, 16
  store i32 %shr1300, i32* %mcost, align 4
  %1114 = load i16*, i16** %ref_pic, align 8
  %1115 = load i16**, i16*** %orig_pic.addr, align 8
  %1116 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %1117 = load i32, i32* %blocksize_y, align 4
  %1118 = load i32, i32* %blocksize_x, align 4
  %1119 = load i32, i32* %blocksize_x4, align 4
  %1120 = load i32, i32* %mcost, align 4
  %1121 = load i32, i32* %min_mcost.addr, align 4
  %1122 = load i32, i32* %cand_x, align 4
  %1123 = load i32, i32* %cand_y, align 4
  %call1301 = call i32 @PartCalMad(i16* %1114, i16** %1115, i16* (i32, i16*, i32, i32, i32, i32)* %1116, i32 %1117, i32 %1118, i32 %1119, i32 %1120, i32 %1121, i32 %1122, i32 %1123)
  store i32 %call1301, i32* %mcost, align 4
  %1124 = load i32, i32* %mcost, align 4
  %1125 = load i32**, i32*** @McostState, align 8
  %1126 = load i32, i32* %cand_y, align 4
  %1127 = load i32, i32* %center_y, align 4
  %sub1302 = sub nsw i32 %1126, %1127
  %1128 = load i32, i32* %search_range.addr, align 4
  %add1303 = add nsw i32 %sub1302, %1128
  %idxprom1304 = sext i32 %add1303 to i64
  %arrayidx1305 = getelementptr inbounds i32*, i32** %1125, i64 %idxprom1304
  %1129 = load i32*, i32** %arrayidx1305, align 8
  %1130 = load i32, i32* %cand_x, align 4
  %1131 = load i32, i32* %center_x, align 4
  %sub1306 = sub nsw i32 %1130, %1131
  %1132 = load i32, i32* %search_range.addr, align 4
  %add1307 = add nsw i32 %sub1306, %1132
  %idxprom1308 = sext i32 %add1307 to i64
  %arrayidx1309 = getelementptr inbounds i32, i32* %1129, i64 %idxprom1308
  store i32 %1124, i32* %arrayidx1309, align 4
  %1133 = load i32, i32* %mcost, align 4
  %1134 = load i32, i32* %min_mcost.addr, align 4
  %cmp1310 = icmp slt i32 %1133, %1134
  br i1 %cmp1310, label %if.then1312, label %if.end1313

if.then1312:                                      ; preds = %if.then1289
  %1135 = load i32, i32* %cand_x, align 4
  store i32 %1135, i32* %best_x, align 4
  %1136 = load i32, i32* %cand_y, align 4
  store i32 %1136, i32* %best_y, align 4
  %1137 = load i32, i32* %mcost, align 4
  store i32 %1137, i32* %min_mcost.addr, align 4
  store i32 0, i32* %iAbort, align 4
  br label %if.end1313

if.end1313:                                       ; preds = %if.then1312, %if.then1289
  br label %if.end1314

if.end1314:                                       ; preds = %if.end1313, %if.then1279
  br label %if.end1315

if.end1315:                                       ; preds = %if.end1314, %land.lhs.true1274, %for.body1263
  br label %for.inc1316

for.inc1316:                                      ; preds = %if.end1315
  %1138 = load i32, i32* %m, align 4
  %inc1317 = add nsw i32 %1138, 1
  store i32 %inc1317, i32* %m, align 4
  br label %for.cond1260

for.end1318:                                      ; preds = %for.cond1260
  %1139 = load i32, i32* %iAbort, align 4
  %tobool1319 = icmp ne i32 %1139, 0
  br i1 %tobool1319, label %if.then1320, label %if.end1321

if.then1320:                                      ; preds = %for.end1318
  br label %for.end1324

if.end1321:                                       ; preds = %for.end1318
  %1140 = load i32, i32* %best_x, align 4
  store i32 %1140, i32* %iXMinNow, align 4
  %1141 = load i32, i32* %best_y, align 4
  store i32 %1141, i32* %iYMinNow, align 4
  br label %for.inc1322

for.inc1322:                                      ; preds = %if.end1321
  %1142 = load i32, i32* %i, align 4
  %inc1323 = add nsw i32 %1142, 1
  store i32 %inc1323, i32* %i, align 4
  br label %for.cond1256

for.end1324:                                      ; preds = %if.then1320, %for.cond1256
  br label %third_step

third_step:                                       ; preds = %for.end1324, %if.then1239, %if.then1221, %if.then1200, %if.then1109, %if.then1091, %if.then1070, %if.then988, %if.then970, %if.then949, %if.then714, %if.then696, %if.then675, %if.then381
  %1143 = load i32, i32* %best_x, align 4
  store i32 %1143, i32* %iXMinNow, align 4
  %1144 = load i32, i32* %best_y, align 4
  store i32 %1144, i32* %iYMinNow, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond1325

for.cond1325:                                     ; preds = %for.inc1391, %third_step
  %1145 = load i32, i32* %i, align 4
  %1146 = load i32, i32* %search_range.addr, align 4
  %cmp1326 = icmp slt i32 %1145, %1146
  br i1 %cmp1326, label %for.body1328, label %for.end1393

for.body1328:                                     ; preds = %for.cond1325
  store i32 65536, i32* %iSADLayer, align 4
  store i32 1, i32* %iAbort, align 4
  store i32 0, i32* %m, align 4
  br label %for.cond1329

for.cond1329:                                     ; preds = %for.inc1385, %for.body1328
  %1147 = load i32, i32* %m, align 4
  %cmp1330 = icmp slt i32 %1147, 4
  br i1 %cmp1330, label %for.body1332, label %for.end1387

for.body1332:                                     ; preds = %for.cond1329
  %1148 = load i32, i32* %iXMinNow, align 4
  %1149 = load i32, i32* %m, align 4
  %idxprom1333 = sext i32 %1149 to i64
  %arrayidx1334 = getelementptr inbounds [4 x i32], [4 x i32]* @FastIntegerPelBlockMotionSearch.Diamond_x, i64 0, i64 %idxprom1333
  %1150 = load i32, i32* %arrayidx1334, align 4
  %add1335 = add nsw i32 %1148, %1150
  store i32 %add1335, i32* %cand_x, align 4
  %1151 = load i32, i32* %iYMinNow, align 4
  %1152 = load i32, i32* %m, align 4
  %idxprom1336 = sext i32 %1152 to i64
  %arrayidx1337 = getelementptr inbounds [4 x i32], [4 x i32]* @FastIntegerPelBlockMotionSearch.Diamond_y, i64 0, i64 %idxprom1336
  %1153 = load i32, i32* %arrayidx1337, align 4
  %add1338 = add nsw i32 %1151, %1153
  store i32 %add1338, i32* %cand_y, align 4
  %1154 = load i32, i32* %cand_x, align 4
  %1155 = load i32, i32* %center_x, align 4
  %sub1339 = sub nsw i32 %1154, %1155
  %call1340 = call i32 @abs(i32 %sub1339) #6
  %1156 = load i32, i32* %search_range.addr, align 4
  %cmp1341 = icmp sle i32 %call1340, %1156
  br i1 %cmp1341, label %land.lhs.true1343, label %if.end1384

land.lhs.true1343:                                ; preds = %for.body1332
  %1157 = load i32, i32* %cand_y, align 4
  %1158 = load i32, i32* %center_y, align 4
  %sub1344 = sub nsw i32 %1157, %1158
  %call1345 = call i32 @abs(i32 %sub1344) #6
  %1159 = load i32, i32* %search_range.addr, align 4
  %cmp1346 = icmp sle i32 %call1345, %1159
  br i1 %cmp1346, label %if.then1348, label %if.end1384

if.then1348:                                      ; preds = %land.lhs.true1343
  %1160 = load i32**, i32*** @McostState, align 8
  %1161 = load i32, i32* %cand_y, align 4
  %1162 = load i32, i32* %center_y, align 4
  %sub1349 = sub nsw i32 %1161, %1162
  %1163 = load i32, i32* %search_range.addr, align 4
  %add1350 = add nsw i32 %sub1349, %1163
  %idxprom1351 = sext i32 %add1350 to i64
  %arrayidx1352 = getelementptr inbounds i32*, i32** %1160, i64 %idxprom1351
  %1164 = load i32*, i32** %arrayidx1352, align 8
  %1165 = load i32, i32* %cand_x, align 4
  %1166 = load i32, i32* %center_x, align 4
  %sub1353 = sub nsw i32 %1165, %1166
  %1167 = load i32, i32* %search_range.addr, align 4
  %add1354 = add nsw i32 %sub1353, %1167
  %idxprom1355 = sext i32 %add1354 to i64
  %arrayidx1356 = getelementptr inbounds i32, i32* %1164, i64 %idxprom1355
  %1168 = load i32, i32* %arrayidx1356, align 4
  %tobool1357 = icmp ne i32 %1168, 0
  br i1 %tobool1357, label %if.end1383, label %if.then1358

if.then1358:                                      ; preds = %if.then1348
  %1169 = load i32, i32* %lambda_factor, align 4
  %1170 = load i32*, i32** @mvbits, align 8
  %1171 = load i32, i32* %cand_x, align 4
  %1172 = load i32, i32* %mvshift, align 4
  %shl1359 = shl i32 %1171, %1172
  %1173 = load i32, i32* %pred_x, align 4
  %sub1360 = sub nsw i32 %shl1359, %1173
  %idxprom1361 = sext i32 %sub1360 to i64
  %arrayidx1362 = getelementptr inbounds i32, i32* %1170, i64 %idxprom1361
  %1174 = load i32, i32* %arrayidx1362, align 4
  %1175 = load i32*, i32** @mvbits, align 8
  %1176 = load i32, i32* %cand_y, align 4
  %1177 = load i32, i32* %mvshift, align 4
  %shl1363 = shl i32 %1176, %1177
  %1178 = load i32, i32* %pred_y, align 4
  %sub1364 = sub nsw i32 %shl1363, %1178
  %idxprom1365 = sext i32 %sub1364 to i64
  %arrayidx1366 = getelementptr inbounds i32, i32* %1175, i64 %idxprom1365
  %1179 = load i32, i32* %arrayidx1366, align 4
  %add1367 = add nsw i32 %1174, %1179
  %mul1368 = mul nsw i32 %1169, %add1367
  %shr1369 = ashr i32 %mul1368, 16
  store i32 %shr1369, i32* %mcost, align 4
  %1180 = load i16*, i16** %ref_pic, align 8
  %1181 = load i16**, i16*** %orig_pic.addr, align 8
  %1182 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %1183 = load i32, i32* %blocksize_y, align 4
  %1184 = load i32, i32* %blocksize_x, align 4
  %1185 = load i32, i32* %blocksize_x4, align 4
  %1186 = load i32, i32* %mcost, align 4
  %1187 = load i32, i32* %min_mcost.addr, align 4
  %1188 = load i32, i32* %cand_x, align 4
  %1189 = load i32, i32* %cand_y, align 4
  %call1370 = call i32 @PartCalMad(i16* %1180, i16** %1181, i16* (i32, i16*, i32, i32, i32, i32)* %1182, i32 %1183, i32 %1184, i32 %1185, i32 %1186, i32 %1187, i32 %1188, i32 %1189)
  store i32 %call1370, i32* %mcost, align 4
  %1190 = load i32, i32* %mcost, align 4
  %1191 = load i32**, i32*** @McostState, align 8
  %1192 = load i32, i32* %cand_y, align 4
  %1193 = load i32, i32* %center_y, align 4
  %sub1371 = sub nsw i32 %1192, %1193
  %1194 = load i32, i32* %search_range.addr, align 4
  %add1372 = add nsw i32 %sub1371, %1194
  %idxprom1373 = sext i32 %add1372 to i64
  %arrayidx1374 = getelementptr inbounds i32*, i32** %1191, i64 %idxprom1373
  %1195 = load i32*, i32** %arrayidx1374, align 8
  %1196 = load i32, i32* %cand_x, align 4
  %1197 = load i32, i32* %center_x, align 4
  %sub1375 = sub nsw i32 %1196, %1197
  %1198 = load i32, i32* %search_range.addr, align 4
  %add1376 = add nsw i32 %sub1375, %1198
  %idxprom1377 = sext i32 %add1376 to i64
  %arrayidx1378 = getelementptr inbounds i32, i32* %1195, i64 %idxprom1377
  store i32 %1190, i32* %arrayidx1378, align 4
  %1199 = load i32, i32* %mcost, align 4
  %1200 = load i32, i32* %min_mcost.addr, align 4
  %cmp1379 = icmp slt i32 %1199, %1200
  br i1 %cmp1379, label %if.then1381, label %if.end1382

if.then1381:                                      ; preds = %if.then1358
  %1201 = load i32, i32* %cand_x, align 4
  store i32 %1201, i32* %best_x, align 4
  %1202 = load i32, i32* %cand_y, align 4
  store i32 %1202, i32* %best_y, align 4
  %1203 = load i32, i32* %mcost, align 4
  store i32 %1203, i32* %min_mcost.addr, align 4
  store i32 0, i32* %iAbort, align 4
  br label %if.end1382

if.end1382:                                       ; preds = %if.then1381, %if.then1358
  br label %if.end1383

if.end1383:                                       ; preds = %if.end1382, %if.then1348
  br label %if.end1384

if.end1384:                                       ; preds = %if.end1383, %land.lhs.true1343, %for.body1332
  br label %for.inc1385

for.inc1385:                                      ; preds = %if.end1384
  %1204 = load i32, i32* %m, align 4
  %inc1386 = add nsw i32 %1204, 1
  store i32 %inc1386, i32* %m, align 4
  br label %for.cond1329

for.end1387:                                      ; preds = %for.cond1329
  %1205 = load i32, i32* %iAbort, align 4
  %tobool1388 = icmp ne i32 %1205, 0
  br i1 %tobool1388, label %if.then1389, label %if.end1390

if.then1389:                                      ; preds = %for.end1387
  br label %for.end1393

if.end1390:                                       ; preds = %for.end1387
  %1206 = load i32, i32* %best_x, align 4
  store i32 %1206, i32* %iXMinNow, align 4
  %1207 = load i32, i32* %best_y, align 4
  store i32 %1207, i32* %iYMinNow, align 4
  br label %for.inc1391

for.inc1391:                                      ; preds = %if.end1390
  %1208 = load i32, i32* %i, align 4
  %inc1392 = add nsw i32 %1208, 1
  store i32 %inc1392, i32* %i, align 4
  br label %for.cond1325

for.end1393:                                      ; preds = %if.then1389, %for.cond1325
  %1209 = load i32, i32* %best_x, align 4
  %1210 = load i32, i32* %pic_pix_x.addr, align 4
  %sub1394 = sub nsw i32 %1209, %1210
  %conv1395 = trunc i32 %sub1394 to i16
  %1211 = load i16*, i16** %mv_x.addr, align 8
  store i16 %conv1395, i16* %1211, align 2
  %1212 = load i32, i32* %best_y, align 4
  %1213 = load i32, i32* %pic_pix_y.addr, align 4
  %sub1396 = sub nsw i32 %1212, %1213
  %conv1397 = trunc i32 %sub1396 to i16
  %1214 = load i16*, i16** %mv_y.addr, align 8
  store i16 %conv1397, i16* %1214, align 2
  %1215 = load i32, i32* %min_mcost.addr, align 4
  %1216 = load i32, i32* %canary
  %1217 = icmp eq i32 %1216, 1316213295
  br i1 %1217, label %1218, label %func_exit

1218:                                             ; preds = %for.end1393, %func_exit
  ret i32 %1215

func_exit:                                        ; preds = %for.end1393
  call void @detect_breach()
  br label %1218
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @free_mem_mincost.65(i32***** %mv) #0 {
entry:
  %l = alloca i32, align 4
  %k = alloca i32, align 4
  %canary = alloca i32
  store i32 139227883, i32* %canary
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %mv.addr = alloca i32*****, align 8
  store i32***** %mv, i32****** %mv.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc35, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %width = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %1, i32 0, i32 13
  %2 = load i32, i32* %width, align 4
  %div = sdiv i32 %2, 4
  %cmp = icmp slt i32 %0, %div
  br i1 %cmp, label %for.body, label %for.end37

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc30, %for.body
  %3 = load i32, i32* %j, align 4
  %4 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %4, i32 0, i32 15
  %5 = load i32, i32* %height, align 4
  %div2 = sdiv i32 %5, 4
  %cmp3 = icmp slt i32 %3, %div2
  br i1 %cmp3, label %for.body4, label %for.end32

for.body4:                                        ; preds = %for.cond1
  store i32 0, i32* %k, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc23, %for.body4
  %6 = load i32, i32* %k, align 4
  %7 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %max_num_references = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %7, i32 0, i32 9
  %8 = load i32, i32* %max_num_references, align 4
  %cmp6 = icmp slt i32 %6, %8
  br i1 %cmp6, label %for.body7, label %for.end25

for.body7:                                        ; preds = %for.cond5
  store i32 0, i32* %l, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc, %for.body7
  %9 = load i32, i32* %l, align 4
  %cmp9 = icmp slt i32 %9, 9
  br i1 %cmp9, label %for.body10, label %for.end

for.body10:                                       ; preds = %for.cond8
  %10 = load i32*****, i32****** %mv.addr, align 8
  %11 = load i32, i32* %i, align 4
  %idxprom = sext i32 %11 to i64
  %arrayidx = getelementptr inbounds i32****, i32***** %10, i64 %idxprom
  %12 = load i32****, i32***** %arrayidx, align 8
  %13 = load i32, i32* %j, align 4
  %idxprom11 = sext i32 %13 to i64
  %arrayidx12 = getelementptr inbounds i32***, i32**** %12, i64 %idxprom11
  %14 = load i32***, i32**** %arrayidx12, align 8
  %15 = load i32, i32* %k, align 4
  %idxprom13 = sext i32 %15 to i64
  %arrayidx14 = getelementptr inbounds i32**, i32*** %14, i64 %idxprom13
  %16 = load i32**, i32*** %arrayidx14, align 8
  %17 = load i32, i32* %l, align 4
  %idxprom15 = sext i32 %17 to i64
  %arrayidx16 = getelementptr inbounds i32*, i32** %16, i64 %idxprom15
  %18 = load i32*, i32** %arrayidx16, align 8
  %19 = bitcast i32* %18 to i8*
  call void @free(i8* %19) #5
  br label %for.inc

for.inc:                                          ; preds = %for.body10
  %20 = load i32, i32* %l, align 4
  %inc = add nsw i32 %20, 1
  store i32 %inc, i32* %l, align 4
  br label %for.cond8

for.end:                                          ; preds = %for.cond8
  %21 = load i32*****, i32****** %mv.addr, align 8
  %22 = load i32, i32* %i, align 4
  %idxprom17 = sext i32 %22 to i64
  %arrayidx18 = getelementptr inbounds i32****, i32***** %21, i64 %idxprom17
  %23 = load i32****, i32***** %arrayidx18, align 8
  %24 = load i32, i32* %j, align 4
  %idxprom19 = sext i32 %24 to i64
  %arrayidx20 = getelementptr inbounds i32***, i32**** %23, i64 %idxprom19
  %25 = load i32***, i32**** %arrayidx20, align 8
  %26 = load i32, i32* %k, align 4
  %idxprom21 = sext i32 %26 to i64
  %arrayidx22 = getelementptr inbounds i32**, i32*** %25, i64 %idxprom21
  %27 = load i32**, i32*** %arrayidx22, align 8
  %28 = bitcast i32** %27 to i8*
  call void @free(i8* %28) #5
  br label %for.inc23

for.inc23:                                        ; preds = %for.end
  %29 = load i32, i32* %k, align 4
  %inc24 = add nsw i32 %29, 1
  store i32 %inc24, i32* %k, align 4
  br label %for.cond5

for.end25:                                        ; preds = %for.cond5
  %30 = load i32*****, i32****** %mv.addr, align 8
  %31 = load i32, i32* %i, align 4
  %idxprom26 = sext i32 %31 to i64
  %arrayidx27 = getelementptr inbounds i32****, i32***** %30, i64 %idxprom26
  %32 = load i32****, i32***** %arrayidx27, align 8
  %33 = load i32, i32* %j, align 4
  %idxprom28 = sext i32 %33 to i64
  %arrayidx29 = getelementptr inbounds i32***, i32**** %32, i64 %idxprom28
  %34 = load i32***, i32**** %arrayidx29, align 8
  %35 = bitcast i32*** %34 to i8*
  call void @free(i8* %35) #5
  br label %for.inc30

for.inc30:                                        ; preds = %for.end25
  %36 = load i32, i32* %j, align 4
  %inc31 = add nsw i32 %36, 1
  store i32 %inc31, i32* %j, align 4
  br label %for.cond1

for.end32:                                        ; preds = %for.cond1
  %37 = load i32*****, i32****** %mv.addr, align 8
  %38 = load i32, i32* %i, align 4
  %idxprom33 = sext i32 %38 to i64
  %arrayidx34 = getelementptr inbounds i32****, i32***** %37, i64 %idxprom33
  %39 = load i32****, i32***** %arrayidx34, align 8
  %40 = bitcast i32**** %39 to i8*
  call void @free(i8* %40) #5
  br label %for.inc35

for.inc35:                                        ; preds = %for.end32
  %41 = load i32, i32* %i, align 4
  %inc36 = add nsw i32 %41, 1
  store i32 %inc36, i32* %i, align 4
  br label %for.cond

for.end37:                                        ; preds = %for.cond
  %42 = load i32*****, i32****** %mv.addr, align 8
  %43 = bitcast i32***** %42 to i8*
  call void @free(i8* %43) #5
  %44 = load i32, i32* %canary
  %45 = icmp eq i32 %44, 139227883
  br i1 %45, label %46, label %func_exit

46:                                               ; preds = %for.end37, %func_exit
  ret void

func_exit:                                        ; preds = %for.end37
  call void @detect_breach()
  br label %46
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @free_mem_mincost.66(i32***** %mv) #0 {
entry:
  %canary = alloca i32
  store i32 1784186748, i32* %canary
  %i = alloca i32, align 4
  %mv.addr = alloca i32*****, align 8
  %k = alloca i32, align 4
  %l = alloca i32, align 4
  %j = alloca i32, align 4
  store i32***** %mv, i32****** %mv.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc35, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %width = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %1, i32 0, i32 13
  %2 = load i32, i32* %width, align 4
  %div = sdiv i32 %2, 4
  %cmp = icmp slt i32 %0, %div
  br i1 %cmp, label %for.body, label %for.end37

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc30, %for.body
  %3 = load i32, i32* %j, align 4
  %4 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %4, i32 0, i32 15
  %5 = load i32, i32* %height, align 4
  %div2 = sdiv i32 %5, 4
  %cmp3 = icmp slt i32 %3, %div2
  br i1 %cmp3, label %for.body4, label %for.end32

for.body4:                                        ; preds = %for.cond1
  store i32 0, i32* %k, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc23, %for.body4
  %6 = load i32, i32* %k, align 4
  %7 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %max_num_references = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %7, i32 0, i32 9
  %8 = load i32, i32* %max_num_references, align 4
  %cmp6 = icmp slt i32 %6, %8
  br i1 %cmp6, label %for.body7, label %for.end25

for.body7:                                        ; preds = %for.cond5
  store i32 0, i32* %l, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc, %for.body7
  %9 = load i32, i32* %l, align 4
  %cmp9 = icmp slt i32 %9, 9
  br i1 %cmp9, label %for.body10, label %for.end

for.body10:                                       ; preds = %for.cond8
  %10 = load i32*****, i32****** %mv.addr, align 8
  %11 = load i32, i32* %i, align 4
  %idxprom = sext i32 %11 to i64
  %arrayidx = getelementptr inbounds i32****, i32***** %10, i64 %idxprom
  %12 = load i32****, i32***** %arrayidx, align 8
  %13 = load i32, i32* %j, align 4
  %idxprom11 = sext i32 %13 to i64
  %arrayidx12 = getelementptr inbounds i32***, i32**** %12, i64 %idxprom11
  %14 = load i32***, i32**** %arrayidx12, align 8
  %15 = load i32, i32* %k, align 4
  %idxprom13 = sext i32 %15 to i64
  %arrayidx14 = getelementptr inbounds i32**, i32*** %14, i64 %idxprom13
  %16 = load i32**, i32*** %arrayidx14, align 8
  %17 = load i32, i32* %l, align 4
  %idxprom15 = sext i32 %17 to i64
  %arrayidx16 = getelementptr inbounds i32*, i32** %16, i64 %idxprom15
  %18 = load i32*, i32** %arrayidx16, align 8
  %19 = bitcast i32* %18 to i8*
  call void @free(i8* %19) #5
  br label %for.inc

for.inc:                                          ; preds = %for.body10
  %20 = load i32, i32* %l, align 4
  %inc = add nsw i32 %20, 1
  store i32 %inc, i32* %l, align 4
  br label %for.cond8

for.end:                                          ; preds = %for.cond8
  %21 = load i32*****, i32****** %mv.addr, align 8
  %22 = load i32, i32* %i, align 4
  %idxprom17 = sext i32 %22 to i64
  %arrayidx18 = getelementptr inbounds i32****, i32***** %21, i64 %idxprom17
  %23 = load i32****, i32***** %arrayidx18, align 8
  %24 = load i32, i32* %j, align 4
  %idxprom19 = sext i32 %24 to i64
  %arrayidx20 = getelementptr inbounds i32***, i32**** %23, i64 %idxprom19
  %25 = load i32***, i32**** %arrayidx20, align 8
  %26 = load i32, i32* %k, align 4
  %idxprom21 = sext i32 %26 to i64
  %arrayidx22 = getelementptr inbounds i32**, i32*** %25, i64 %idxprom21
  %27 = load i32**, i32*** %arrayidx22, align 8
  %28 = bitcast i32** %27 to i8*
  call void @free(i8* %28) #5
  br label %for.inc23

for.inc23:                                        ; preds = %for.end
  %29 = load i32, i32* %k, align 4
  %inc24 = add nsw i32 %29, 1
  store i32 %inc24, i32* %k, align 4
  br label %for.cond5

for.end25:                                        ; preds = %for.cond5
  %30 = load i32*****, i32****** %mv.addr, align 8
  %31 = load i32, i32* %i, align 4
  %idxprom26 = sext i32 %31 to i64
  %arrayidx27 = getelementptr inbounds i32****, i32***** %30, i64 %idxprom26
  %32 = load i32****, i32***** %arrayidx27, align 8
  %33 = load i32, i32* %j, align 4
  %idxprom28 = sext i32 %33 to i64
  %arrayidx29 = getelementptr inbounds i32***, i32**** %32, i64 %idxprom28
  %34 = load i32***, i32**** %arrayidx29, align 8
  %35 = bitcast i32*** %34 to i8*
  call void @free(i8* %35) #5
  br label %for.inc30

for.inc30:                                        ; preds = %for.end25
  %36 = load i32, i32* %j, align 4
  %inc31 = add nsw i32 %36, 1
  store i32 %inc31, i32* %j, align 4
  br label %for.cond1

for.end32:                                        ; preds = %for.cond1
  %37 = load i32*****, i32****** %mv.addr, align 8
  %38 = load i32, i32* %i, align 4
  %idxprom33 = sext i32 %38 to i64
  %arrayidx34 = getelementptr inbounds i32****, i32***** %37, i64 %idxprom33
  %39 = load i32****, i32***** %arrayidx34, align 8
  %40 = bitcast i32**** %39 to i8*
  call void @free(i8* %40) #5
  br label %for.inc35

for.inc35:                                        ; preds = %for.end32
  %41 = load i32, i32* %i, align 4
  %inc36 = add nsw i32 %41, 1
  store i32 %inc36, i32* %i, align 4
  br label %for.cond

for.end37:                                        ; preds = %for.cond
  %42 = load i32*****, i32****** %mv.addr, align 8
  %43 = bitcast i32***** %42 to i8*
  call void @free(i8* %43) #5
  %44 = load i32, i32* %canary
  %45 = icmp eq i32 %44, 1784186748
  br i1 %45, label %46, label %func_exit

46:                                               ; preds = %for.end37, %func_exit
  ret void

func_exit:                                        ; preds = %for.end37
  call void @detect_breach()
  br label %46
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @get_mem_mincost.67(i32****** %mv) #0 {
entry:
  %mv.addr = alloca i32******, align 8
  %i = alloca i32, align 4
  %l = alloca i32, align 4
  %canary = alloca i32
  store i32 1399529338, i32* %canary
  %k = alloca i32, align 4
  %j = alloca i32, align 4
  store i32****** %mv, i32******* %mv.addr, align 8
  %0 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %width = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %0, i32 0, i32 13
  %1 = load i32, i32* %width, align 4
  %div = sdiv i32 %1, 4
  %conv = sext i32 %div to i64
  %call = call noalias i8* @calloc(i64 %conv, i64 8) #5
  %2 = bitcast i8* %call to i32*****
  %3 = load i32******, i32******* %mv.addr, align 8
  store i32***** %2, i32****** %3, align 8
  %cmp = icmp eq i32***** %2, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @no_mem_exit(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc68, %if.end
  %4 = load i32, i32* %i, align 4
  %5 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %width2 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %5, i32 0, i32 13
  %6 = load i32, i32* %width2, align 4
  %div3 = sdiv i32 %6, 4
  %cmp4 = icmp slt i32 %4, %div3
  br i1 %cmp4, label %for.body, label %for.end70

for.body:                                         ; preds = %for.cond
  %7 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %7, i32 0, i32 15
  %8 = load i32, i32* %height, align 4
  %div6 = sdiv i32 %8, 4
  %conv7 = sext i32 %div6 to i64
  %call8 = call noalias i8* @calloc(i64 %conv7, i64 8) #5
  %9 = bitcast i8* %call8 to i32****
  %10 = load i32******, i32******* %mv.addr, align 8
  %11 = load i32*****, i32****** %10, align 8
  %12 = load i32, i32* %i, align 4
  %idxprom = sext i32 %12 to i64
  %arrayidx = getelementptr inbounds i32****, i32***** %11, i64 %idxprom
  store i32**** %9, i32***** %arrayidx, align 8
  %cmp9 = icmp eq i32**** %9, null
  br i1 %cmp9, label %if.then11, label %if.end12

if.then11:                                        ; preds = %for.body
  call void @no_mem_exit(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %if.end12

if.end12:                                         ; preds = %if.then11, %for.body
  store i32 0, i32* %j, align 4
  br label %for.cond13

for.cond13:                                       ; preds = %for.inc65, %if.end12
  %13 = load i32, i32* %j, align 4
  %14 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height14 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %14, i32 0, i32 15
  %15 = load i32, i32* %height14, align 4
  %div15 = sdiv i32 %15, 4
  %cmp16 = icmp slt i32 %13, %div15
  br i1 %cmp16, label %for.body18, label %for.end67

for.body18:                                       ; preds = %for.cond13
  %16 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %max_num_references = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %16, i32 0, i32 9
  %17 = load i32, i32* %max_num_references, align 4
  %conv19 = sext i32 %17 to i64
  %call20 = call noalias i8* @calloc(i64 %conv19, i64 8) #5
  %18 = bitcast i8* %call20 to i32***
  %19 = load i32******, i32******* %mv.addr, align 8
  %20 = load i32*****, i32****** %19, align 8
  %21 = load i32, i32* %i, align 4
  %idxprom21 = sext i32 %21 to i64
  %arrayidx22 = getelementptr inbounds i32****, i32***** %20, i64 %idxprom21
  %22 = load i32****, i32***** %arrayidx22, align 8
  %23 = load i32, i32* %j, align 4
  %idxprom23 = sext i32 %23 to i64
  %arrayidx24 = getelementptr inbounds i32***, i32**** %22, i64 %idxprom23
  store i32*** %18, i32**** %arrayidx24, align 8
  %cmp25 = icmp eq i32*** %18, null
  br i1 %cmp25, label %if.then27, label %if.end28

if.then27:                                        ; preds = %for.body18
  call void @no_mem_exit(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %if.end28

if.end28:                                         ; preds = %if.then27, %for.body18
  store i32 0, i32* %k, align 4
  br label %for.cond29

for.cond29:                                       ; preds = %for.inc62, %if.end28
  %24 = load i32, i32* %k, align 4
  %25 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %max_num_references30 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %25, i32 0, i32 9
  %26 = load i32, i32* %max_num_references30, align 4
  %cmp31 = icmp slt i32 %24, %26
  br i1 %cmp31, label %for.body33, label %for.end64

for.body33:                                       ; preds = %for.cond29
  %call34 = call noalias i8* @calloc(i64 9, i64 8) #5
  %27 = bitcast i8* %call34 to i32**
  %28 = load i32******, i32******* %mv.addr, align 8
  %29 = load i32*****, i32****** %28, align 8
  %30 = load i32, i32* %i, align 4
  %idxprom35 = sext i32 %30 to i64
  %arrayidx36 = getelementptr inbounds i32****, i32***** %29, i64 %idxprom35
  %31 = load i32****, i32***** %arrayidx36, align 8
  %32 = load i32, i32* %j, align 4
  %idxprom37 = sext i32 %32 to i64
  %arrayidx38 = getelementptr inbounds i32***, i32**** %31, i64 %idxprom37
  %33 = load i32***, i32**** %arrayidx38, align 8
  %34 = load i32, i32* %k, align 4
  %idxprom39 = sext i32 %34 to i64
  %arrayidx40 = getelementptr inbounds i32**, i32*** %33, i64 %idxprom39
  store i32** %27, i32*** %arrayidx40, align 8
  %cmp41 = icmp eq i32** %27, null
  br i1 %cmp41, label %if.then43, label %if.end44

if.then43:                                        ; preds = %for.body33
  call void @no_mem_exit(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %if.end44

if.end44:                                         ; preds = %if.then43, %for.body33
  store i32 0, i32* %l, align 4
  br label %for.cond45

for.cond45:                                       ; preds = %for.inc, %if.end44
  %35 = load i32, i32* %l, align 4
  %cmp46 = icmp slt i32 %35, 9
  br i1 %cmp46, label %for.body48, label %for.end

for.body48:                                       ; preds = %for.cond45
  %call49 = call noalias i8* @calloc(i64 3, i64 4) #5
  %36 = bitcast i8* %call49 to i32*
  %37 = load i32******, i32******* %mv.addr, align 8
  %38 = load i32*****, i32****** %37, align 8
  %39 = load i32, i32* %i, align 4
  %idxprom50 = sext i32 %39 to i64
  %arrayidx51 = getelementptr inbounds i32****, i32***** %38, i64 %idxprom50
  %40 = load i32****, i32***** %arrayidx51, align 8
  %41 = load i32, i32* %j, align 4
  %idxprom52 = sext i32 %41 to i64
  %arrayidx53 = getelementptr inbounds i32***, i32**** %40, i64 %idxprom52
  %42 = load i32***, i32**** %arrayidx53, align 8
  %43 = load i32, i32* %k, align 4
  %idxprom54 = sext i32 %43 to i64
  %arrayidx55 = getelementptr inbounds i32**, i32*** %42, i64 %idxprom54
  %44 = load i32**, i32*** %arrayidx55, align 8
  %45 = load i32, i32* %l, align 4
  %idxprom56 = sext i32 %45 to i64
  %arrayidx57 = getelementptr inbounds i32*, i32** %44, i64 %idxprom56
  store i32* %36, i32** %arrayidx57, align 8
  %cmp58 = icmp eq i32* %36, null
  br i1 %cmp58, label %if.then60, label %if.end61

if.then60:                                        ; preds = %for.body48
  call void @no_mem_exit(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %if.end61

if.end61:                                         ; preds = %if.then60, %for.body48
  br label %for.inc

for.inc:                                          ; preds = %if.end61
  %46 = load i32, i32* %l, align 4
  %inc = add nsw i32 %46, 1
  store i32 %inc, i32* %l, align 4
  br label %for.cond45

for.end:                                          ; preds = %for.cond45
  br label %for.inc62

for.inc62:                                        ; preds = %for.end
  %47 = load i32, i32* %k, align 4
  %inc63 = add nsw i32 %47, 1
  store i32 %inc63, i32* %k, align 4
  br label %for.cond29

for.end64:                                        ; preds = %for.cond29
  br label %for.inc65

for.inc65:                                        ; preds = %for.end64
  %48 = load i32, i32* %j, align 4
  %inc66 = add nsw i32 %48, 1
  store i32 %inc66, i32* %j, align 4
  br label %for.cond13

for.end67:                                        ; preds = %for.cond13
  br label %for.inc68

for.inc68:                                        ; preds = %for.end67
  %49 = load i32, i32* %i, align 4
  %inc69 = add nsw i32 %49, 1
  store i32 %inc69, i32* %i, align 4
  br label %for.cond

for.end70:                                        ; preds = %for.cond
  %50 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %width71 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %50, i32 0, i32 13
  %51 = load i32, i32* %width71, align 4
  %div72 = sdiv i32 %51, 4
  %52 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height73 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %52, i32 0, i32 15
  %53 = load i32, i32* %height73, align 4
  %mul = mul nsw i32 %div72, %53
  %div74 = sdiv i32 %mul, 4
  %54 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %max_num_references75 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %54, i32 0, i32 9
  %55 = load i32, i32* %max_num_references75, align 4
  %mul76 = mul nsw i32 %div74, %55
  %mul77 = mul nsw i32 %mul76, 9
  %mul78 = mul nsw i32 %mul77, 3
  %conv79 = sext i32 %mul78 to i64
  %mul80 = mul i64 %conv79, 4
  %conv81 = trunc i64 %mul80 to i32
  %56 = load i32, i32* %canary
  %57 = icmp eq i32 %56, 1399529338
  br i1 %57, label %58, label %func_exit

58:                                               ; preds = %for.end70, %func_exit
  ret i32 %conv81

func_exit:                                        ; preds = %for.end70
  call void @detect_breach()
  br label %58
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @FastSubPelBlockMotionSearch.68(i16** %orig_pic, i16 signext %ref, i32 %list, i32 %pic_pix_x, i32 %pic_pix_y, i32 %blocktype, i16 signext %pred_mv_x, i16 signext %pred_mv_y, i16* %mv_x, i16* %mv_y, i32 %search_pos2, i32 %search_pos4, i32 %min_mcost, double %lambda, i32 %useABT) #0 {
entry:
  %cand_mv_x = alloca i32, align 4
  %min_mcost.addr = alloca i32, align 4
  %ref_picture = alloca %struct.storable_picture*, align 8
  %m = alloca i32, align 4
  %lambda_factor = alloca i32, align 4
  %search_pos4.addr = alloca i32, align 4
  %pred_frac_mv_y = alloca i32, align 4
  %search_pos2.addr = alloca i32, align 4
  %blocktype.addr = alloca i32, align 4
  %mv_cost = alloca i32, align 4
  %pred_frac_mv_x = alloca i32, align 4
  %mv_x.addr = alloca i16*, align 8
  %pic4_pix_y = alloca i32, align 4
  %mv_y.addr = alloca i16*, align 8
  %orig_pic.addr = alloca i16**, align 8
  %max_pos_y4 = alloca i32, align 4
  %blocksize_x = alloca i32, align 4
  %lambda.addr = alloca double, align 8
  %pred_mv_x.addr = alloca i16, align 2
  %list_offset = alloca i32, align 4
  %mv_shift = alloca i32, align 4
  %useABT.addr = alloca i32, align 4
  %pic_pix_y.addr = alloca i32, align 4
  %list.addr = alloca i32, align 4
  %ref.addr = alloca i16, align 2
  %i = alloca i32, align 4
  %canary = alloca i32
  store i32 726739383, i32* %canary
  %pred_frac_up_mv_x = alloca i32, align 4
  %iSADLayer = alloca i32, align 4
  %currmv_x = alloca i32, align 4
  %currmv_y = alloca i32, align 4
  %cand_mv_y = alloca i32, align 4
  %pred_mv_y.addr = alloca i16, align 2
  %blocksize_y = alloca i32, align 4
  %iYMinNow = alloca i32, align 4
  %abort_search = alloca i32, align 4
  %iXMinNow = alloca i32, align 4
  %mcost = alloca i32, align 4
  %iCurrSearchRange = alloca i32, align 4
  %pic4_pix_x = alloca i32, align 4
  %pred_frac_up_mv_y = alloca i32, align 4
  %search_range_dynamic = alloca i32, align 4
  %pic_pix_x.addr = alloca i32, align 4
  %max_pos_x4 = alloca i32, align 4
  store i16** %orig_pic, i16*** %orig_pic.addr, align 8
  store i16 %ref, i16* %ref.addr, align 2
  store i32 %list, i32* %list.addr, align 4
  store i32 %pic_pix_x, i32* %pic_pix_x.addr, align 4
  store i32 %pic_pix_y, i32* %pic_pix_y.addr, align 4
  store i32 %blocktype, i32* %blocktype.addr, align 4
  store i16 %pred_mv_x, i16* %pred_mv_x.addr, align 2
  store i16 %pred_mv_y, i16* %pred_mv_y.addr, align 2
  store i16* %mv_x, i16** %mv_x.addr, align 8
  store i16* %mv_y, i16** %mv_y.addr, align 8
  store i32 %search_pos2, i32* %search_pos2.addr, align 4
  store i32 %search_pos4, i32* %search_pos4.addr, align 4
  store i32 %min_mcost, i32* %min_mcost.addr, align 4
  store double %lambda, double* %lambda.addr, align 8
  store i32 %useABT, i32* %useABT.addr, align 4
  %0 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %MbaffFrameFlag = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %0, i32 0, i32 90
  %1 = load i32, i32* %MbaffFrameFlag, align 8
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %mb_data = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %2, i32 0, i32 51
  %3 = load %struct.macroblock*, %struct.macroblock** %mb_data, align 8
  %4 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %current_mb_nr = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %4, i32 0, i32 3
  %5 = load i32, i32* %current_mb_nr, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 %idxprom
  %mb_field = getelementptr inbounds %struct.macroblock, %struct.macroblock* %arrayidx, i32 0, i32 22
  %6 = load i32, i32* %mb_field, align 4
  %tobool1 = icmp ne i32 %6, 0
  br i1 %tobool1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %7 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %current_mb_nr2 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %7, i32 0, i32 3
  %8 = load i32, i32* %current_mb_nr2, align 4
  %rem = srem i32 %8, 2
  %tobool3 = icmp ne i32 %rem, 0
  %9 = zext i1 %tobool3 to i64
  %cond = select i1 %tobool3, i32 4, i32 2
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond4 = phi i32 [ %cond, %cond.true ], [ 0, %cond.false ]
  store i32 %cond4, i32* %list_offset, align 4
  %10 = load i32, i32* %list.addr, align 4
  %11 = load i32, i32* %list_offset, align 4
  %add = add nsw i32 %10, %11
  %idxprom5 = sext i32 %add to i64
  %arrayidx6 = getelementptr inbounds [6 x %struct.storable_picture**], [6 x %struct.storable_picture**]* @listX, i64 0, i64 %idxprom5
  %12 = load %struct.storable_picture**, %struct.storable_picture*** %arrayidx6, align 8
  %13 = load i16, i16* %ref.addr, align 2
  %idxprom7 = sext i16 %13 to i64
  %arrayidx8 = getelementptr inbounds %struct.storable_picture*, %struct.storable_picture** %12, i64 %idxprom7
  %14 = load %struct.storable_picture*, %struct.storable_picture** %arrayidx8, align 8
  store %struct.storable_picture* %14, %struct.storable_picture** %ref_picture, align 8
  %15 = load double, double* %lambda.addr, align 8
  %mul = fmul double 6.553600e+04, %15
  %add9 = fadd double %mul, 5.000000e-01
  %conv = fptosi double %add9 to i32
  store i32 %conv, i32* %lambda_factor, align 4
  store i32 0, i32* %mv_shift, align 4
  %16 = load %struct.InputParameters*, %struct.InputParameters** @input, align 8
  %blc_size = getelementptr inbounds %struct.InputParameters, %struct.InputParameters* %16, i32 0, i32 20
  %17 = load i32, i32* %blocktype.addr, align 4
  %idxprom10 = sext i32 %17 to i64
  %arrayidx11 = getelementptr inbounds [8 x [2 x i32]], [8 x [2 x i32]]* %blc_size, i64 0, i64 %idxprom10
  %arrayidx12 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx11, i64 0, i64 0
  %18 = load i32, i32* %arrayidx12, align 8
  store i32 %18, i32* %blocksize_x, align 4
  %19 = load %struct.InputParameters*, %struct.InputParameters** @input, align 8
  %blc_size13 = getelementptr inbounds %struct.InputParameters, %struct.InputParameters* %19, i32 0, i32 20
  %20 = load i32, i32* %blocktype.addr, align 4
  %idxprom14 = sext i32 %20 to i64
  %arrayidx15 = getelementptr inbounds [8 x [2 x i32]], [8 x [2 x i32]]* %blc_size13, i64 0, i64 %idxprom14
  %arrayidx16 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx15, i64 0, i64 1
  %21 = load i32, i32* %arrayidx16, align 4
  store i32 %21, i32* %blocksize_y, align 4
  %22 = load i32, i32* %pic_pix_x.addr, align 4
  %shl = shl i32 %22, 2
  store i32 %shl, i32* %pic4_pix_x, align 4
  %23 = load i32, i32* %pic_pix_y.addr, align 4
  %shl17 = shl i32 %23, 2
  store i32 %shl17, i32* %pic4_pix_y, align 4
  %24 = load %struct.storable_picture*, %struct.storable_picture** %ref_picture, align 8
  %size_x = getelementptr inbounds %struct.storable_picture, %struct.storable_picture* %24, i32 0, i32 18
  %25 = load i32, i32* %size_x, align 8
  %26 = load i32, i32* %blocksize_x, align 4
  %sub = sub nsw i32 %25, %26
  %add18 = add nsw i32 %sub, 1
  %shl19 = shl i32 %add18, 2
  store i32 %shl19, i32* %max_pos_x4, align 4
  %27 = load %struct.storable_picture*, %struct.storable_picture** %ref_picture, align 8
  %size_y = getelementptr inbounds %struct.storable_picture, %struct.storable_picture* %27, i32 0, i32 19
  %28 = load i32, i32* %size_y, align 4
  %29 = load i32, i32* %blocksize_y, align 4
  %sub20 = sub nsw i32 %28, %29
  %add21 = add nsw i32 %sub20, 1
  %shl22 = shl i32 %add21, 2
  store i32 %shl22, i32* %max_pos_y4, align 4
  store i32 0, i32* %currmv_x, align 4
  store i32 0, i32* %currmv_y, align 4
  %30 = load i16*, i16** %mv_x.addr, align 8
  %31 = load i16, i16* %30, align 2
  %conv23 = sext i16 %31 to i32
  %shl24 = shl i32 %conv23, 2
  %conv25 = trunc i32 %shl24 to i16
  store i16 %conv25, i16* %30, align 2
  %32 = load i16*, i16** %mv_y.addr, align 8
  %33 = load i16, i16* %32, align 2
  %conv26 = sext i16 %33 to i32
  %shl27 = shl i32 %conv26, 2
  %conv28 = trunc i32 %shl27 to i16
  store i16 %conv28, i16* %32, align 2
  %34 = load i32, i32* %pic4_pix_x, align 4
  %35 = load i16*, i16** %mv_x.addr, align 8
  %36 = load i16, i16* %35, align 2
  %conv29 = sext i16 %36 to i32
  %add30 = add nsw i32 %34, %conv29
  %cmp = icmp sgt i32 %add30, 1
  br i1 %cmp, label %land.lhs.true32, label %if.else

land.lhs.true32:                                  ; preds = %cond.end
  %37 = load i32, i32* %pic4_pix_x, align 4
  %38 = load i16*, i16** %mv_x.addr, align 8
  %39 = load i16, i16* %38, align 2
  %conv33 = sext i16 %39 to i32
  %add34 = add nsw i32 %37, %conv33
  %40 = load i32, i32* %max_pos_x4, align 4
  %sub35 = sub nsw i32 %40, 2
  %cmp36 = icmp slt i32 %add34, %sub35
  br i1 %cmp36, label %land.lhs.true38, label %if.else

land.lhs.true38:                                  ; preds = %land.lhs.true32
  %41 = load i32, i32* %pic4_pix_y, align 4
  %42 = load i16*, i16** %mv_y.addr, align 8
  %43 = load i16, i16* %42, align 2
  %conv39 = sext i16 %43 to i32
  %add40 = add nsw i32 %41, %conv39
  %cmp41 = icmp sgt i32 %add40, 1
  br i1 %cmp41, label %land.lhs.true43, label %if.else

land.lhs.true43:                                  ; preds = %land.lhs.true38
  %44 = load i32, i32* %pic4_pix_y, align 4
  %45 = load i16*, i16** %mv_y.addr, align 8
  %46 = load i16, i16* %45, align 2
  %conv44 = sext i16 %46 to i32
  %add45 = add nsw i32 %44, %conv44
  %47 = load i32, i32* %max_pos_y4, align 4
  %sub46 = sub nsw i32 %47, 2
  %cmp47 = icmp slt i32 %add45, %sub46
  br i1 %cmp47, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true43
  store i16 (i16**, i32, i32, i32, i32)* @FastPelY_14, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  br label %if.end

if.else:                                          ; preds = %land.lhs.true43, %land.lhs.true38, %land.lhs.true32, %cond.end
  store i16 (i16**, i32, i32, i32, i32)* @UMVPelY_14, i16 (i16**, i32, i32, i32, i32)** @PelY_14, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  store i32 3, i32* %search_range_dynamic, align 4
  %48 = load i16, i16* %pred_mv_x.addr, align 2
  %conv49 = sext i16 %48 to i32
  %49 = load i16*, i16** %mv_x.addr, align 8
  %50 = load i16, i16* %49, align 2
  %conv50 = sext i16 %50 to i32
  %sub51 = sub nsw i32 %conv49, %conv50
  %rem52 = srem i32 %sub51, 4
  store i32 %rem52, i32* %pred_frac_mv_x, align 4
  %51 = load i16, i16* %pred_mv_y.addr, align 2
  %conv53 = sext i16 %51 to i32
  %52 = load i16*, i16** %mv_y.addr, align 8
  %53 = load i16, i16* %52, align 2
  %conv54 = sext i16 %53 to i32
  %sub55 = sub nsw i32 %conv53, %conv54
  %rem56 = srem i32 %sub55, 4
  store i32 %rem56, i32* %pred_frac_mv_y, align 4
  %54 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @pred_MV_uplayer, i64 0, i64 0), align 4
  %55 = load i16*, i16** %mv_x.addr, align 8
  %56 = load i16, i16* %55, align 2
  %conv57 = sext i16 %56 to i32
  %sub58 = sub nsw i32 %54, %conv57
  %rem59 = srem i32 %sub58, 4
  store i32 %rem59, i32* %pred_frac_up_mv_x, align 4
  %57 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @pred_MV_uplayer, i64 0, i64 1), align 4
  %58 = load i16*, i16** %mv_y.addr, align 8
  %59 = load i16, i16* %58, align 2
  %conv60 = sext i16 %59 to i32
  %sub61 = sub nsw i32 %57, %conv60
  %rem62 = srem i32 %sub61, 4
  store i32 %rem62, i32* %pred_frac_up_mv_y, align 4
  %60 = load i8**, i8*** @SearchState, align 8
  %arrayidx63 = getelementptr inbounds i8*, i8** %60, i64 0
  %61 = load i8*, i8** %arrayidx63, align 8
  %62 = load i32, i32* %search_range_dynamic, align 4
  %mul64 = mul nsw i32 2, %62
  %add65 = add nsw i32 %mul64, 1
  %63 = load i32, i32* %search_range_dynamic, align 4
  %mul66 = mul nsw i32 2, %63
  %add67 = add nsw i32 %mul66, 1
  %mul68 = mul nsw i32 %add65, %add67
  %conv69 = sext i32 %mul68 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %61, i8 0, i64 %conv69, i1 false)
  %64 = load %struct.InputParameters*, %struct.InputParameters** @input, align 8
  %hadamard = getelementptr inbounds %struct.InputParameters, %struct.InputParameters* %64, i32 0, i32 6
  %65 = load i32, i32* %hadamard, align 8
  %tobool70 = icmp ne i32 %65, 0
  br i1 %tobool70, label %if.then71, label %if.else94

if.then71:                                        ; preds = %if.end
  %66 = load i16*, i16** %mv_x.addr, align 8
  %67 = load i16, i16* %66, align 2
  %conv72 = sext i16 %67 to i32
  store i32 %conv72, i32* %cand_mv_x, align 4
  %68 = load i16*, i16** %mv_y.addr, align 8
  %69 = load i16, i16* %68, align 2
  %conv73 = sext i16 %69 to i32
  store i32 %conv73, i32* %cand_mv_y, align 4
  %70 = load i32, i32* %lambda_factor, align 4
  %71 = load i32*, i32** @mvbits, align 8
  %72 = load i32, i32* %cand_mv_x, align 4
  %73 = load i32, i32* %mv_shift, align 4
  %shl74 = shl i32 %72, %73
  %74 = load i16, i16* %pred_mv_x.addr, align 2
  %conv75 = sext i16 %74 to i32
  %sub76 = sub nsw i32 %shl74, %conv75
  %idxprom77 = sext i32 %sub76 to i64
  %arrayidx78 = getelementptr inbounds i32, i32* %71, i64 %idxprom77
  %75 = load i32, i32* %arrayidx78, align 4
  %76 = load i32*, i32** @mvbits, align 8
  %77 = load i32, i32* %cand_mv_y, align 4
  %78 = load i32, i32* %mv_shift, align 4
  %shl79 = shl i32 %77, %78
  %79 = load i16, i16* %pred_mv_y.addr, align 2
  %conv80 = sext i16 %79 to i32
  %sub81 = sub nsw i32 %shl79, %conv80
  %idxprom82 = sext i32 %sub81 to i64
  %arrayidx83 = getelementptr inbounds i32, i32* %76, i64 %idxprom82
  %80 = load i32, i32* %arrayidx83, align 4
  %add84 = add nsw i32 %75, %80
  %mul85 = mul nsw i32 %70, %add84
  %shr = ashr i32 %mul85, 16
  store i32 %shr, i32* %mv_cost, align 4
  %81 = load i32, i32* %pic_pix_x.addr, align 4
  %82 = load i32, i32* %pic_pix_y.addr, align 4
  %83 = load i32, i32* %blocksize_x, align 4
  %84 = load i32, i32* %blocksize_y, align 4
  %85 = load i32, i32* %cand_mv_x, align 4
  %86 = load i32, i32* %cand_mv_y, align 4
  %87 = load %struct.storable_picture*, %struct.storable_picture** %ref_picture, align 8
  %88 = load i16**, i16*** %orig_pic.addr, align 8
  %89 = load i32, i32* %mv_cost, align 4
  %90 = load i32, i32* %min_mcost.addr, align 4
  %91 = load i32, i32* %useABT.addr, align 4
  %call = call i32 @AddUpSADQuarter(i32 %81, i32 %82, i32 %83, i32 %84, i32 %85, i32 %86, %struct.storable_picture* %87, i16** %88, i32 %89, i32 %90, i32 %91)
  store i32 %call, i32* %mcost, align 4
  %92 = load i8**, i8*** @SearchState, align 8
  %93 = load i32, i32* %search_range_dynamic, align 4
  %idxprom86 = sext i32 %93 to i64
  %arrayidx87 = getelementptr inbounds i8*, i8** %92, i64 %idxprom86
  %94 = load i8*, i8** %arrayidx87, align 8
  %95 = load i32, i32* %search_range_dynamic, align 4
  %idxprom88 = sext i32 %95 to i64
  %arrayidx89 = getelementptr inbounds i8, i8* %94, i64 %idxprom88
  store i8 1, i8* %arrayidx89, align 1
  %96 = load i32, i32* %mcost, align 4
  %97 = load i32, i32* %min_mcost.addr, align 4
  %cmp90 = icmp slt i32 %96, %97
  br i1 %cmp90, label %if.then92, label %if.end93

if.then92:                                        ; preds = %if.then71
  %98 = load i32, i32* %mcost, align 4
  store i32 %98, i32* %min_mcost.addr, align 4
  %99 = load i32, i32* %cand_mv_x, align 4
  store i32 %99, i32* %currmv_x, align 4
  %100 = load i32, i32* %cand_mv_y, align 4
  store i32 %100, i32* %currmv_y, align 4
  br label %if.end93

if.end93:                                         ; preds = %if.then92, %if.then71
  br label %if.end101

if.else94:                                        ; preds = %if.end
  %101 = load i8**, i8*** @SearchState, align 8
  %102 = load i32, i32* %search_range_dynamic, align 4
  %idxprom95 = sext i32 %102 to i64
  %arrayidx96 = getelementptr inbounds i8*, i8** %101, i64 %idxprom95
  %103 = load i8*, i8** %arrayidx96, align 8
  %104 = load i32, i32* %search_range_dynamic, align 4
  %idxprom97 = sext i32 %104 to i64
  %arrayidx98 = getelementptr inbounds i8, i8* %103, i64 %idxprom97
  store i8 1, i8* %arrayidx98, align 1
  %105 = load i16*, i16** %mv_x.addr, align 8
  %106 = load i16, i16* %105, align 2
  %conv99 = sext i16 %106 to i32
  store i32 %conv99, i32* %currmv_x, align 4
  %107 = load i16*, i16** %mv_y.addr, align 8
  %108 = load i16, i16* %107, align 2
  %conv100 = sext i16 %108 to i32
  store i32 %conv100, i32* %currmv_y, align 4
  br label %if.end101

if.end101:                                        ; preds = %if.else94, %if.end93
  %109 = load i32, i32* %pred_frac_mv_x, align 4
  %cmp102 = icmp ne i32 %109, 0
  br i1 %cmp102, label %if.then106, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end101
  %110 = load i32, i32* %pred_frac_mv_y, align 4
  %cmp104 = icmp ne i32 %110, 0
  br i1 %cmp104, label %if.then106, label %if.end139

if.then106:                                       ; preds = %lor.lhs.false, %if.end101
  %111 = load i16*, i16** %mv_x.addr, align 8
  %112 = load i16, i16* %111, align 2
  %conv107 = sext i16 %112 to i32
  %113 = load i32, i32* %pred_frac_mv_x, align 4
  %add108 = add nsw i32 %conv107, %113
  store i32 %add108, i32* %cand_mv_x, align 4
  %114 = load i16*, i16** %mv_y.addr, align 8
  %115 = load i16, i16* %114, align 2
  %conv109 = sext i16 %115 to i32
  %116 = load i32, i32* %pred_frac_mv_y, align 4
  %add110 = add nsw i32 %conv109, %116
  store i32 %add110, i32* %cand_mv_y, align 4
  %117 = load i32, i32* %lambda_factor, align 4
  %118 = load i32*, i32** @mvbits, align 8
  %119 = load i32, i32* %cand_mv_x, align 4
  %120 = load i32, i32* %mv_shift, align 4
  %shl111 = shl i32 %119, %120
  %121 = load i16, i16* %pred_mv_x.addr, align 2
  %conv112 = sext i16 %121 to i32
  %sub113 = sub nsw i32 %shl111, %conv112
  %idxprom114 = sext i32 %sub113 to i64
  %arrayidx115 = getelementptr inbounds i32, i32* %118, i64 %idxprom114
  %122 = load i32, i32* %arrayidx115, align 4
  %123 = load i32*, i32** @mvbits, align 8
  %124 = load i32, i32* %cand_mv_y, align 4
  %125 = load i32, i32* %mv_shift, align 4
  %shl116 = shl i32 %124, %125
  %126 = load i16, i16* %pred_mv_y.addr, align 2
  %conv117 = sext i16 %126 to i32
  %sub118 = sub nsw i32 %shl116, %conv117
  %idxprom119 = sext i32 %sub118 to i64
  %arrayidx120 = getelementptr inbounds i32, i32* %123, i64 %idxprom119
  %127 = load i32, i32* %arrayidx120, align 4
  %add121 = add nsw i32 %122, %127
  %mul122 = mul nsw i32 %117, %add121
  %shr123 = ashr i32 %mul122, 16
  store i32 %shr123, i32* %mv_cost, align 4
  %128 = load i32, i32* %pic_pix_x.addr, align 4
  %129 = load i32, i32* %pic_pix_y.addr, align 4
  %130 = load i32, i32* %blocksize_x, align 4
  %131 = load i32, i32* %blocksize_y, align 4
  %132 = load i32, i32* %cand_mv_x, align 4
  %133 = load i32, i32* %cand_mv_y, align 4
  %134 = load %struct.storable_picture*, %struct.storable_picture** %ref_picture, align 8
  %135 = load i16**, i16*** %orig_pic.addr, align 8
  %136 = load i32, i32* %mv_cost, align 4
  %137 = load i32, i32* %min_mcost.addr, align 4
  %138 = load i32, i32* %useABT.addr, align 4
  %call124 = call i32 @AddUpSADQuarter(i32 %128, i32 %129, i32 %130, i32 %131, i32 %132, i32 %133, %struct.storable_picture* %134, i16** %135, i32 %136, i32 %137, i32 %138)
  store i32 %call124, i32* %mcost, align 4
  %139 = load i8**, i8*** @SearchState, align 8
  %140 = load i32, i32* %cand_mv_y, align 4
  %141 = load i16*, i16** %mv_y.addr, align 8
  %142 = load i16, i16* %141, align 2
  %conv125 = sext i16 %142 to i32
  %sub126 = sub nsw i32 %140, %conv125
  %143 = load i32, i32* %search_range_dynamic, align 4
  %add127 = add nsw i32 %sub126, %143
  %idxprom128 = sext i32 %add127 to i64
  %arrayidx129 = getelementptr inbounds i8*, i8** %139, i64 %idxprom128
  %144 = load i8*, i8** %arrayidx129, align 8
  %145 = load i32, i32* %cand_mv_x, align 4
  %146 = load i16*, i16** %mv_x.addr, align 8
  %147 = load i16, i16* %146, align 2
  %conv130 = sext i16 %147 to i32
  %sub131 = sub nsw i32 %145, %conv130
  %148 = load i32, i32* %search_range_dynamic, align 4
  %add132 = add nsw i32 %sub131, %148
  %idxprom133 = sext i32 %add132 to i64
  %arrayidx134 = getelementptr inbounds i8, i8* %144, i64 %idxprom133
  store i8 1, i8* %arrayidx134, align 1
  %149 = load i32, i32* %mcost, align 4
  %150 = load i32, i32* %min_mcost.addr, align 4
  %cmp135 = icmp slt i32 %149, %150
  br i1 %cmp135, label %if.then137, label %if.end138

if.then137:                                       ; preds = %if.then106
  %151 = load i32, i32* %mcost, align 4
  store i32 %151, i32* %min_mcost.addr, align 4
  %152 = load i32, i32* %cand_mv_x, align 4
  store i32 %152, i32* %currmv_x, align 4
  %153 = load i32, i32* %cand_mv_y, align 4
  store i32 %153, i32* %currmv_y, align 4
  br label %if.end138

if.end138:                                        ; preds = %if.then137, %if.then106
  br label %if.end139

if.end139:                                        ; preds = %if.end138, %lor.lhs.false
  %154 = load i32, i32* %currmv_x, align 4
  store i32 %154, i32* %iXMinNow, align 4
  %155 = load i32, i32* %currmv_y, align 4
  store i32 %155, i32* %iYMinNow, align 4
  %156 = load i32, i32* %search_range_dynamic, align 4
  %mul140 = mul nsw i32 2, %156
  %add141 = add nsw i32 %mul140, 1
  store i32 %add141, i32* %iCurrSearchRange, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc211, %if.end139
  %157 = load i32, i32* %i, align 4
  %158 = load i32, i32* %iCurrSearchRange, align 4
  %cmp142 = icmp slt i32 %157, %158
  br i1 %cmp142, label %for.body, label %for.end213

for.body:                                         ; preds = %for.cond
  store i32 1, i32* %abort_search, align 4
  store i32 65536, i32* %iSADLayer, align 4
  store i32 0, i32* %m, align 4
  br label %for.cond144

for.cond144:                                      ; preds = %for.inc, %for.body
  %159 = load i32, i32* %m, align 4
  %cmp145 = icmp slt i32 %159, 4
  br i1 %cmp145, label %for.body147, label %for.end

for.body147:                                      ; preds = %for.cond144
  %160 = load i32, i32* %iXMinNow, align 4
  %161 = load i32, i32* %m, align 4
  %idxprom148 = sext i32 %161 to i64
  %arrayidx149 = getelementptr inbounds [4 x i32], [4 x i32]* @FastSubPelBlockMotionSearch.Diamond_x, i64 0, i64 %idxprom148
  %162 = load i32, i32* %arrayidx149, align 4
  %add150 = add nsw i32 %160, %162
  store i32 %add150, i32* %cand_mv_x, align 4
  %163 = load i32, i32* %iYMinNow, align 4
  %164 = load i32, i32* %m, align 4
  %idxprom151 = sext i32 %164 to i64
  %arrayidx152 = getelementptr inbounds [4 x i32], [4 x i32]* @FastSubPelBlockMotionSearch.Diamond_y, i64 0, i64 %idxprom151
  %165 = load i32, i32* %arrayidx152, align 4
  %add153 = add nsw i32 %163, %165
  store i32 %add153, i32* %cand_mv_y, align 4
  %166 = load i32, i32* %cand_mv_x, align 4
  %167 = load i16*, i16** %mv_x.addr, align 8
  %168 = load i16, i16* %167, align 2
  %conv154 = sext i16 %168 to i32
  %sub155 = sub nsw i32 %166, %conv154
  %call156 = call i32 @abs(i32 %sub155) #6
  %169 = load i32, i32* %search_range_dynamic, align 4
  %cmp157 = icmp sle i32 %call156, %169
  br i1 %cmp157, label %land.lhs.true159, label %if.end207

land.lhs.true159:                                 ; preds = %for.body147
  %170 = load i32, i32* %cand_mv_y, align 4
  %171 = load i16*, i16** %mv_y.addr, align 8
  %172 = load i16, i16* %171, align 2
  %conv160 = sext i16 %172 to i32
  %sub161 = sub nsw i32 %170, %conv160
  %call162 = call i32 @abs(i32 %sub161) #6
  %173 = load i32, i32* %search_range_dynamic, align 4
  %cmp163 = icmp sle i32 %call162, %173
  br i1 %cmp163, label %if.then165, label %if.end207

if.then165:                                       ; preds = %land.lhs.true159
  %174 = load i8**, i8*** @SearchState, align 8
  %175 = load i32, i32* %cand_mv_y, align 4
  %176 = load i16*, i16** %mv_y.addr, align 8
  %177 = load i16, i16* %176, align 2
  %conv166 = sext i16 %177 to i32
  %sub167 = sub nsw i32 %175, %conv166
  %178 = load i32, i32* %search_range_dynamic, align 4
  %add168 = add nsw i32 %sub167, %178
  %idxprom169 = sext i32 %add168 to i64
  %arrayidx170 = getelementptr inbounds i8*, i8** %174, i64 %idxprom169
  %179 = load i8*, i8** %arrayidx170, align 8
  %180 = load i32, i32* %cand_mv_x, align 4
  %181 = load i16*, i16** %mv_x.addr, align 8
  %182 = load i16, i16* %181, align 2
  %conv171 = sext i16 %182 to i32
  %sub172 = sub nsw i32 %180, %conv171
  %183 = load i32, i32* %search_range_dynamic, align 4
  %add173 = add nsw i32 %sub172, %183
  %idxprom174 = sext i32 %add173 to i64
  %arrayidx175 = getelementptr inbounds i8, i8* %179, i64 %idxprom174
  %184 = load i8, i8* %arrayidx175, align 1
  %tobool176 = icmp ne i8 %184, 0
  br i1 %tobool176, label %if.end206, label %if.then177

if.then177:                                       ; preds = %if.then165
  %185 = load i32, i32* %lambda_factor, align 4
  %186 = load i32*, i32** @mvbits, align 8
  %187 = load i32, i32* %cand_mv_x, align 4
  %188 = load i32, i32* %mv_shift, align 4
  %shl178 = shl i32 %187, %188
  %189 = load i16, i16* %pred_mv_x.addr, align 2
  %conv179 = sext i16 %189 to i32
  %sub180 = sub nsw i32 %shl178, %conv179
  %idxprom181 = sext i32 %sub180 to i64
  %arrayidx182 = getelementptr inbounds i32, i32* %186, i64 %idxprom181
  %190 = load i32, i32* %arrayidx182, align 4
  %191 = load i32*, i32** @mvbits, align 8
  %192 = load i32, i32* %cand_mv_y, align 4
  %193 = load i32, i32* %mv_shift, align 4
  %shl183 = shl i32 %192, %193
  %194 = load i16, i16* %pred_mv_y.addr, align 2
  %conv184 = sext i16 %194 to i32
  %sub185 = sub nsw i32 %shl183, %conv184
  %idxprom186 = sext i32 %sub185 to i64
  %arrayidx187 = getelementptr inbounds i32, i32* %191, i64 %idxprom186
  %195 = load i32, i32* %arrayidx187, align 4
  %add188 = add nsw i32 %190, %195
  %mul189 = mul nsw i32 %185, %add188
  %shr190 = ashr i32 %mul189, 16
  store i32 %shr190, i32* %mv_cost, align 4
  %196 = load i32, i32* %pic_pix_x.addr, align 4
  %197 = load i32, i32* %pic_pix_y.addr, align 4
  %198 = load i32, i32* %blocksize_x, align 4
  %199 = load i32, i32* %blocksize_y, align 4
  %200 = load i32, i32* %cand_mv_x, align 4
  %201 = load i32, i32* %cand_mv_y, align 4
  %202 = load %struct.storable_picture*, %struct.storable_picture** %ref_picture, align 8
  %203 = load i16**, i16*** %orig_pic.addr, align 8
  %204 = load i32, i32* %mv_cost, align 4
  %205 = load i32, i32* %min_mcost.addr, align 4
  %206 = load i32, i32* %useABT.addr, align 4
  %call191 = call i32 @AddUpSADQuarter(i32 %196, i32 %197, i32 %198, i32 %199, i32 %200, i32 %201, %struct.storable_picture* %202, i16** %203, i32 %204, i32 %205, i32 %206)
  store i32 %call191, i32* %mcost, align 4
  %207 = load i8**, i8*** @SearchState, align 8
  %208 = load i32, i32* %cand_mv_y, align 4
  %209 = load i16*, i16** %mv_y.addr, align 8
  %210 = load i16, i16* %209, align 2
  %conv192 = sext i16 %210 to i32
  %sub193 = sub nsw i32 %208, %conv192
  %211 = load i32, i32* %search_range_dynamic, align 4
  %add194 = add nsw i32 %sub193, %211
  %idxprom195 = sext i32 %add194 to i64
  %arrayidx196 = getelementptr inbounds i8*, i8** %207, i64 %idxprom195
  %212 = load i8*, i8** %arrayidx196, align 8
  %213 = load i32, i32* %cand_mv_x, align 4
  %214 = load i16*, i16** %mv_x.addr, align 8
  %215 = load i16, i16* %214, align 2
  %conv197 = sext i16 %215 to i32
  %sub198 = sub nsw i32 %213, %conv197
  %216 = load i32, i32* %search_range_dynamic, align 4
  %add199 = add nsw i32 %sub198, %216
  %idxprom200 = sext i32 %add199 to i64
  %arrayidx201 = getelementptr inbounds i8, i8* %212, i64 %idxprom200
  store i8 1, i8* %arrayidx201, align 1
  %217 = load i32, i32* %mcost, align 4
  %218 = load i32, i32* %min_mcost.addr, align 4
  %cmp202 = icmp slt i32 %217, %218
  br i1 %cmp202, label %if.then204, label %if.end205

if.then204:                                       ; preds = %if.then177
  %219 = load i32, i32* %mcost, align 4
  store i32 %219, i32* %min_mcost.addr, align 4
  %220 = load i32, i32* %cand_mv_x, align 4
  store i32 %220, i32* %currmv_x, align 4
  %221 = load i32, i32* %cand_mv_y, align 4
  store i32 %221, i32* %currmv_y, align 4
  store i32 0, i32* %abort_search, align 4
  br label %if.end205

if.end205:                                        ; preds = %if.then204, %if.then177
  br label %if.end206

if.end206:                                        ; preds = %if.end205, %if.then165
  br label %if.end207

if.end207:                                        ; preds = %if.end206, %land.lhs.true159, %for.body147
  br label %for.inc

for.inc:                                          ; preds = %if.end207
  %222 = load i32, i32* %m, align 4
  %inc = add nsw i32 %222, 1
  store i32 %inc, i32* %m, align 4
  br label %for.cond144

for.end:                                          ; preds = %for.cond144
  %223 = load i32, i32* %currmv_x, align 4
  store i32 %223, i32* %iXMinNow, align 4
  %224 = load i32, i32* %currmv_y, align 4
  store i32 %224, i32* %iYMinNow, align 4
  %225 = load i32, i32* %abort_search, align 4
  %tobool208 = icmp ne i32 %225, 0
  br i1 %tobool208, label %if.then209, label %if.end210

if.then209:                                       ; preds = %for.end
  br label %for.end213

if.end210:                                        ; preds = %for.end
  br label %for.inc211

for.inc211:                                       ; preds = %if.end210
  %226 = load i32, i32* %i, align 4
  %inc212 = add nsw i32 %226, 1
  store i32 %inc212, i32* %i, align 4
  br label %for.cond

for.end213:                                       ; preds = %if.then209, %for.cond
  %227 = load i32, i32* %currmv_x, align 4
  %conv214 = trunc i32 %227 to i16
  %228 = load i16*, i16** %mv_x.addr, align 8
  store i16 %conv214, i16* %228, align 2
  %229 = load i32, i32* %currmv_y, align 4
  %conv215 = trunc i32 %229 to i16
  %230 = load i16*, i16** %mv_y.addr, align 8
  store i16 %conv215, i16* %230, align 2
  %231 = load i32, i32* %min_mcost.addr, align 4
  %232 = load i32, i32* %canary
  %233 = icmp eq i32 %232, 726739383
  br i1 %233, label %234, label %func_exit

234:                                              ; preds = %for.end213, %func_exit
  ret i32 %231

func_exit:                                        ; preds = %for.end213
  call void @detect_breach()
  br label %234
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @skip_intrabk_SAD.69(i32 %best_mode, i32 %ref_max) #0 {
entry:
  %j = alloca i32, align 4
  %canary = alloca i32
  store i32 1538092679, i32* %canary
  %ref = alloca i32, align 4
  %ref_max.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %k = alloca i32, align 4
  %best_mode.addr = alloca i32, align 4
  store i32 %best_mode, i32* %best_mode.addr, align 4
  store i32 %ref_max, i32* %ref_max.addr, align 4
  %0 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %number = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %0, i32 0, i32 0
  %1 = load i32, i32* %number, align 8
  %cmp = icmp sgt i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %best_mode.addr, align 4
  %cmp1 = icmp eq i32 %2, 9
  br i1 %cmp1, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.then
  %3 = load i32, i32* %best_mode.addr, align 4
  %cmp2 = icmp eq i32 %3, 10
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.then
  %4 = phi i1 [ true, %if.then ], [ %cmp2, %lor.rhs ]
  %5 = zext i1 %4 to i64
  %cond = select i1 %4, i32 1, i32 0
  %6 = load i32*, i32** @flag_intra, align 8
  %7 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %pix_x = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %7, i32 0, i32 33
  %8 = load i32, i32* %pix_x, align 8
  %shr = ashr i32 %8, 4
  %idxprom = sext i32 %shr to i64
  %arrayidx = getelementptr inbounds i32, i32* %6, i64 %idxprom
  store i32 %cond, i32* %arrayidx, align 4
  br label %if.end

if.end:                                           ; preds = %lor.end, %entry
  %9 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %type = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %9, i32 0, i32 6
  %10 = load i32, i32* %type, align 8
  %cmp3 = icmp ne i32 %10, 0
  br i1 %cmp3, label %land.lhs.true, label %if.end39

land.lhs.true:                                    ; preds = %if.end
  %11 = load i32, i32* %best_mode.addr, align 4
  %cmp4 = icmp eq i32 %11, 9
  br i1 %cmp4, label %if.then6, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %12 = load i32, i32* %best_mode.addr, align 4
  %cmp5 = icmp eq i32 %12, 10
  br i1 %cmp5, label %if.then6, label %if.end39

if.then6:                                         ; preds = %lor.lhs.false, %land.lhs.true
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc36, %if.then6
  %13 = load i32, i32* %i, align 4
  %cmp7 = icmp slt i32 %13, 4
  br i1 %cmp7, label %for.body, label %for.end38

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc33, %for.body
  %14 = load i32, i32* %j, align 4
  %cmp9 = icmp slt i32 %14, 4
  br i1 %cmp9, label %for.body10, label %for.end35

for.body10:                                       ; preds = %for.cond8
  store i32 1, i32* %k, align 4
  br label %for.cond11

for.cond11:                                       ; preds = %for.inc30, %for.body10
  %15 = load i32, i32* %k, align 4
  %cmp12 = icmp slt i32 %15, 8
  br i1 %cmp12, label %for.body13, label %for.end32

for.body13:                                       ; preds = %for.cond11
  store i32 0, i32* %ref, align 4
  br label %for.cond14

for.cond14:                                       ; preds = %for.inc, %for.body13
  %16 = load i32, i32* %ref, align 4
  %17 = load i32, i32* %ref_max.addr, align 4
  %cmp15 = icmp slt i32 %16, %17
  br i1 %cmp15, label %for.body16, label %for.end

for.body16:                                       ; preds = %for.cond14
  %18 = load i32*****, i32****** @all_mincost, align 8
  %19 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %pix_x17 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %19, i32 0, i32 33
  %20 = load i32, i32* %pix_x17, align 8
  %shr18 = ashr i32 %20, 2
  %21 = load i32, i32* %i, align 4
  %add = add nsw i32 %shr18, %21
  %idxprom19 = sext i32 %add to i64
  %arrayidx20 = getelementptr inbounds i32****, i32***** %18, i64 %idxprom19
  %22 = load i32****, i32***** %arrayidx20, align 8
  %23 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %pix_y = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %23, i32 0, i32 34
  %24 = load i32, i32* %pix_y, align 4
  %shr21 = ashr i32 %24, 2
  %25 = load i32, i32* %j, align 4
  %add22 = add nsw i32 %shr21, %25
  %idxprom23 = sext i32 %add22 to i64
  %arrayidx24 = getelementptr inbounds i32***, i32**** %22, i64 %idxprom23
  %26 = load i32***, i32**** %arrayidx24, align 8
  %27 = load i32, i32* %ref, align 4
  %idxprom25 = sext i32 %27 to i64
  %arrayidx26 = getelementptr inbounds i32**, i32*** %26, i64 %idxprom25
  %28 = load i32**, i32*** %arrayidx26, align 8
  %29 = load i32, i32* %k, align 4
  %idxprom27 = sext i32 %29 to i64
  %arrayidx28 = getelementptr inbounds i32*, i32** %28, i64 %idxprom27
  %30 = load i32*, i32** %arrayidx28, align 8
  %arrayidx29 = getelementptr inbounds i32, i32* %30, i64 0
  store i32 0, i32* %arrayidx29, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body16
  %31 = load i32, i32* %ref, align 4
  %inc = add nsw i32 %31, 1
  store i32 %inc, i32* %ref, align 4
  br label %for.cond14

for.end:                                          ; preds = %for.cond14
  br label %for.inc30

for.inc30:                                        ; preds = %for.end
  %32 = load i32, i32* %k, align 4
  %inc31 = add nsw i32 %32, 1
  store i32 %inc31, i32* %k, align 4
  br label %for.cond11

for.end32:                                        ; preds = %for.cond11
  br label %for.inc33

for.inc33:                                        ; preds = %for.end32
  %33 = load i32, i32* %j, align 4
  %inc34 = add nsw i32 %33, 1
  store i32 %inc34, i32* %j, align 4
  br label %for.cond8

for.end35:                                        ; preds = %for.cond8
  br label %for.inc36

for.inc36:                                        ; preds = %for.end35
  %34 = load i32, i32* %i, align 4
  %inc37 = add nsw i32 %34, 1
  store i32 %inc37, i32* %i, align 4
  br label %for.cond

for.end38:                                        ; preds = %for.cond
  br label %if.end39

if.end39:                                         ; preds = %for.end38, %lor.lhs.false, %if.end
  %35 = load i32, i32* %canary
  %36 = icmp eq i32 %35, 1538092679
  br i1 %36, label %37, label %func_exit

37:                                               ; preds = %if.end39, %func_exit
  ret void

func_exit:                                        ; preds = %if.end39
  call void @detect_breach()
  br label %37
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @skip_intrabk_SAD.70(i32 %best_mode, i32 %ref_max) #0 {
entry:
  %ref_max.addr = alloca i32, align 4
  %canary = alloca i32
  store i32 740791625, i32* %canary
  %k = alloca i32, align 4
  %j = alloca i32, align 4
  %i = alloca i32, align 4
  %ref = alloca i32, align 4
  %best_mode.addr = alloca i32, align 4
  store i32 %best_mode, i32* %best_mode.addr, align 4
  store i32 %ref_max, i32* %ref_max.addr, align 4
  %0 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %number = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %0, i32 0, i32 0
  %1 = load i32, i32* %number, align 8
  %cmp = icmp sgt i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %best_mode.addr, align 4
  %cmp1 = icmp eq i32 %2, 9
  br i1 %cmp1, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.then
  %3 = load i32, i32* %best_mode.addr, align 4
  %cmp2 = icmp eq i32 %3, 10
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.then
  %4 = phi i1 [ true, %if.then ], [ %cmp2, %lor.rhs ]
  %5 = zext i1 %4 to i64
  %cond = select i1 %4, i32 1, i32 0
  %6 = load i32*, i32** @flag_intra, align 8
  %7 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %pix_x = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %7, i32 0, i32 33
  %8 = load i32, i32* %pix_x, align 8
  %shr = ashr i32 %8, 4
  %idxprom = sext i32 %shr to i64
  %arrayidx = getelementptr inbounds i32, i32* %6, i64 %idxprom
  store i32 %cond, i32* %arrayidx, align 4
  br label %if.end

if.end:                                           ; preds = %lor.end, %entry
  %9 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %type = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %9, i32 0, i32 6
  %10 = load i32, i32* %type, align 8
  %cmp3 = icmp ne i32 %10, 0
  br i1 %cmp3, label %land.lhs.true, label %if.end39

land.lhs.true:                                    ; preds = %if.end
  %11 = load i32, i32* %best_mode.addr, align 4
  %cmp4 = icmp eq i32 %11, 9
  br i1 %cmp4, label %if.then6, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %12 = load i32, i32* %best_mode.addr, align 4
  %cmp5 = icmp eq i32 %12, 10
  br i1 %cmp5, label %if.then6, label %if.end39

if.then6:                                         ; preds = %lor.lhs.false, %land.lhs.true
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc36, %if.then6
  %13 = load i32, i32* %i, align 4
  %cmp7 = icmp slt i32 %13, 4
  br i1 %cmp7, label %for.body, label %for.end38

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc33, %for.body
  %14 = load i32, i32* %j, align 4
  %cmp9 = icmp slt i32 %14, 4
  br i1 %cmp9, label %for.body10, label %for.end35

for.body10:                                       ; preds = %for.cond8
  store i32 1, i32* %k, align 4
  br label %for.cond11

for.cond11:                                       ; preds = %for.inc30, %for.body10
  %15 = load i32, i32* %k, align 4
  %cmp12 = icmp slt i32 %15, 8
  br i1 %cmp12, label %for.body13, label %for.end32

for.body13:                                       ; preds = %for.cond11
  store i32 0, i32* %ref, align 4
  br label %for.cond14

for.cond14:                                       ; preds = %for.inc, %for.body13
  %16 = load i32, i32* %ref, align 4
  %17 = load i32, i32* %ref_max.addr, align 4
  %cmp15 = icmp slt i32 %16, %17
  br i1 %cmp15, label %for.body16, label %for.end

for.body16:                                       ; preds = %for.cond14
  %18 = load i32*****, i32****** @all_mincost, align 8
  %19 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %pix_x17 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %19, i32 0, i32 33
  %20 = load i32, i32* %pix_x17, align 8
  %shr18 = ashr i32 %20, 2
  %21 = load i32, i32* %i, align 4
  %add = add nsw i32 %shr18, %21
  %idxprom19 = sext i32 %add to i64
  %arrayidx20 = getelementptr inbounds i32****, i32***** %18, i64 %idxprom19
  %22 = load i32****, i32***** %arrayidx20, align 8
  %23 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %pix_y = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %23, i32 0, i32 34
  %24 = load i32, i32* %pix_y, align 4
  %shr21 = ashr i32 %24, 2
  %25 = load i32, i32* %j, align 4
  %add22 = add nsw i32 %shr21, %25
  %idxprom23 = sext i32 %add22 to i64
  %arrayidx24 = getelementptr inbounds i32***, i32**** %22, i64 %idxprom23
  %26 = load i32***, i32**** %arrayidx24, align 8
  %27 = load i32, i32* %ref, align 4
  %idxprom25 = sext i32 %27 to i64
  %arrayidx26 = getelementptr inbounds i32**, i32*** %26, i64 %idxprom25
  %28 = load i32**, i32*** %arrayidx26, align 8
  %29 = load i32, i32* %k, align 4
  %idxprom27 = sext i32 %29 to i64
  %arrayidx28 = getelementptr inbounds i32*, i32** %28, i64 %idxprom27
  %30 = load i32*, i32** %arrayidx28, align 8
  %arrayidx29 = getelementptr inbounds i32, i32* %30, i64 0
  store i32 0, i32* %arrayidx29, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body16
  %31 = load i32, i32* %ref, align 4
  %inc = add nsw i32 %31, 1
  store i32 %inc, i32* %ref, align 4
  br label %for.cond14

for.end:                                          ; preds = %for.cond14
  br label %for.inc30

for.inc30:                                        ; preds = %for.end
  %32 = load i32, i32* %k, align 4
  %inc31 = add nsw i32 %32, 1
  store i32 %inc31, i32* %k, align 4
  br label %for.cond11

for.end32:                                        ; preds = %for.cond11
  br label %for.inc33

for.inc33:                                        ; preds = %for.end32
  %33 = load i32, i32* %j, align 4
  %inc34 = add nsw i32 %33, 1
  store i32 %inc34, i32* %j, align 4
  br label %for.cond8

for.end35:                                        ; preds = %for.cond8
  br label %for.inc36

for.inc36:                                        ; preds = %for.end35
  %34 = load i32, i32* %i, align 4
  %inc37 = add nsw i32 %34, 1
  store i32 %inc37, i32* %i, align 4
  br label %for.cond

for.end38:                                        ; preds = %for.cond
  br label %if.end39

if.end39:                                         ; preds = %for.end38, %lor.lhs.false, %if.end
  %35 = load i32, i32* %canary
  %36 = icmp eq i32 %35, 740791625
  br i1 %36, label %37, label %func_exit

37:                                               ; preds = %if.end39, %func_exit
  ret void

func_exit:                                        ; preds = %if.end39
  call void @detect_breach()
  br label %37
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @free_mem_mincost.71(i32***** %mv) #0 {
entry:
  %canary = alloca i32
  store i32 685331109, i32* %canary
  %i = alloca i32, align 4
  %k = alloca i32, align 4
  %j = alloca i32, align 4
  %mv.addr = alloca i32*****, align 8
  %l = alloca i32, align 4
  store i32***** %mv, i32****** %mv.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc35, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %width = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %1, i32 0, i32 13
  %2 = load i32, i32* %width, align 4
  %div = sdiv i32 %2, 4
  %cmp = icmp slt i32 %0, %div
  br i1 %cmp, label %for.body, label %for.end37

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc30, %for.body
  %3 = load i32, i32* %j, align 4
  %4 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %4, i32 0, i32 15
  %5 = load i32, i32* %height, align 4
  %div2 = sdiv i32 %5, 4
  %cmp3 = icmp slt i32 %3, %div2
  br i1 %cmp3, label %for.body4, label %for.end32

for.body4:                                        ; preds = %for.cond1
  store i32 0, i32* %k, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc23, %for.body4
  %6 = load i32, i32* %k, align 4
  %7 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %max_num_references = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %7, i32 0, i32 9
  %8 = load i32, i32* %max_num_references, align 4
  %cmp6 = icmp slt i32 %6, %8
  br i1 %cmp6, label %for.body7, label %for.end25

for.body7:                                        ; preds = %for.cond5
  store i32 0, i32* %l, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc, %for.body7
  %9 = load i32, i32* %l, align 4
  %cmp9 = icmp slt i32 %9, 9
  br i1 %cmp9, label %for.body10, label %for.end

for.body10:                                       ; preds = %for.cond8
  %10 = load i32*****, i32****** %mv.addr, align 8
  %11 = load i32, i32* %i, align 4
  %idxprom = sext i32 %11 to i64
  %arrayidx = getelementptr inbounds i32****, i32***** %10, i64 %idxprom
  %12 = load i32****, i32***** %arrayidx, align 8
  %13 = load i32, i32* %j, align 4
  %idxprom11 = sext i32 %13 to i64
  %arrayidx12 = getelementptr inbounds i32***, i32**** %12, i64 %idxprom11
  %14 = load i32***, i32**** %arrayidx12, align 8
  %15 = load i32, i32* %k, align 4
  %idxprom13 = sext i32 %15 to i64
  %arrayidx14 = getelementptr inbounds i32**, i32*** %14, i64 %idxprom13
  %16 = load i32**, i32*** %arrayidx14, align 8
  %17 = load i32, i32* %l, align 4
  %idxprom15 = sext i32 %17 to i64
  %arrayidx16 = getelementptr inbounds i32*, i32** %16, i64 %idxprom15
  %18 = load i32*, i32** %arrayidx16, align 8
  %19 = bitcast i32* %18 to i8*
  call void @free(i8* %19) #5
  br label %for.inc

for.inc:                                          ; preds = %for.body10
  %20 = load i32, i32* %l, align 4
  %inc = add nsw i32 %20, 1
  store i32 %inc, i32* %l, align 4
  br label %for.cond8

for.end:                                          ; preds = %for.cond8
  %21 = load i32*****, i32****** %mv.addr, align 8
  %22 = load i32, i32* %i, align 4
  %idxprom17 = sext i32 %22 to i64
  %arrayidx18 = getelementptr inbounds i32****, i32***** %21, i64 %idxprom17
  %23 = load i32****, i32***** %arrayidx18, align 8
  %24 = load i32, i32* %j, align 4
  %idxprom19 = sext i32 %24 to i64
  %arrayidx20 = getelementptr inbounds i32***, i32**** %23, i64 %idxprom19
  %25 = load i32***, i32**** %arrayidx20, align 8
  %26 = load i32, i32* %k, align 4
  %idxprom21 = sext i32 %26 to i64
  %arrayidx22 = getelementptr inbounds i32**, i32*** %25, i64 %idxprom21
  %27 = load i32**, i32*** %arrayidx22, align 8
  %28 = bitcast i32** %27 to i8*
  call void @free(i8* %28) #5
  br label %for.inc23

for.inc23:                                        ; preds = %for.end
  %29 = load i32, i32* %k, align 4
  %inc24 = add nsw i32 %29, 1
  store i32 %inc24, i32* %k, align 4
  br label %for.cond5

for.end25:                                        ; preds = %for.cond5
  %30 = load i32*****, i32****** %mv.addr, align 8
  %31 = load i32, i32* %i, align 4
  %idxprom26 = sext i32 %31 to i64
  %arrayidx27 = getelementptr inbounds i32****, i32***** %30, i64 %idxprom26
  %32 = load i32****, i32***** %arrayidx27, align 8
  %33 = load i32, i32* %j, align 4
  %idxprom28 = sext i32 %33 to i64
  %arrayidx29 = getelementptr inbounds i32***, i32**** %32, i64 %idxprom28
  %34 = load i32***, i32**** %arrayidx29, align 8
  %35 = bitcast i32*** %34 to i8*
  call void @free(i8* %35) #5
  br label %for.inc30

for.inc30:                                        ; preds = %for.end25
  %36 = load i32, i32* %j, align 4
  %inc31 = add nsw i32 %36, 1
  store i32 %inc31, i32* %j, align 4
  br label %for.cond1

for.end32:                                        ; preds = %for.cond1
  %37 = load i32*****, i32****** %mv.addr, align 8
  %38 = load i32, i32* %i, align 4
  %idxprom33 = sext i32 %38 to i64
  %arrayidx34 = getelementptr inbounds i32****, i32***** %37, i64 %idxprom33
  %39 = load i32****, i32***** %arrayidx34, align 8
  %40 = bitcast i32**** %39 to i8*
  call void @free(i8* %40) #5
  br label %for.inc35

for.inc35:                                        ; preds = %for.end32
  %41 = load i32, i32* %i, align 4
  %inc36 = add nsw i32 %41, 1
  store i32 %inc36, i32* %i, align 4
  br label %for.cond

for.end37:                                        ; preds = %for.cond
  %42 = load i32*****, i32****** %mv.addr, align 8
  %43 = bitcast i32***** %42 to i8*
  call void @free(i8* %43) #5
  %44 = load i32, i32* %canary
  %45 = icmp eq i32 %44, 685331109
  br i1 %45, label %46, label %func_exit

46:                                               ; preds = %for.end37, %func_exit
  ret void

func_exit:                                        ; preds = %for.end37
  call void @detect_breach()
  br label %46
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @free_mem_mincost.72(i32***** %mv) #0 {
entry:
  %canary = alloca i32
  store i32 1863697357, i32* %canary
  %mv.addr = alloca i32*****, align 8
  %l = alloca i32, align 4
  %k = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32***** %mv, i32****** %mv.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc35, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %width = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %1, i32 0, i32 13
  %2 = load i32, i32* %width, align 4
  %div = sdiv i32 %2, 4
  %cmp = icmp slt i32 %0, %div
  br i1 %cmp, label %for.body, label %for.end37

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc30, %for.body
  %3 = load i32, i32* %j, align 4
  %4 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %4, i32 0, i32 15
  %5 = load i32, i32* %height, align 4
  %div2 = sdiv i32 %5, 4
  %cmp3 = icmp slt i32 %3, %div2
  br i1 %cmp3, label %for.body4, label %for.end32

for.body4:                                        ; preds = %for.cond1
  store i32 0, i32* %k, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc23, %for.body4
  %6 = load i32, i32* %k, align 4
  %7 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %max_num_references = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %7, i32 0, i32 9
  %8 = load i32, i32* %max_num_references, align 4
  %cmp6 = icmp slt i32 %6, %8
  br i1 %cmp6, label %for.body7, label %for.end25

for.body7:                                        ; preds = %for.cond5
  store i32 0, i32* %l, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc, %for.body7
  %9 = load i32, i32* %l, align 4
  %cmp9 = icmp slt i32 %9, 9
  br i1 %cmp9, label %for.body10, label %for.end

for.body10:                                       ; preds = %for.cond8
  %10 = load i32*****, i32****** %mv.addr, align 8
  %11 = load i32, i32* %i, align 4
  %idxprom = sext i32 %11 to i64
  %arrayidx = getelementptr inbounds i32****, i32***** %10, i64 %idxprom
  %12 = load i32****, i32***** %arrayidx, align 8
  %13 = load i32, i32* %j, align 4
  %idxprom11 = sext i32 %13 to i64
  %arrayidx12 = getelementptr inbounds i32***, i32**** %12, i64 %idxprom11
  %14 = load i32***, i32**** %arrayidx12, align 8
  %15 = load i32, i32* %k, align 4
  %idxprom13 = sext i32 %15 to i64
  %arrayidx14 = getelementptr inbounds i32**, i32*** %14, i64 %idxprom13
  %16 = load i32**, i32*** %arrayidx14, align 8
  %17 = load i32, i32* %l, align 4
  %idxprom15 = sext i32 %17 to i64
  %arrayidx16 = getelementptr inbounds i32*, i32** %16, i64 %idxprom15
  %18 = load i32*, i32** %arrayidx16, align 8
  %19 = bitcast i32* %18 to i8*
  call void @free(i8* %19) #5
  br label %for.inc

for.inc:                                          ; preds = %for.body10
  %20 = load i32, i32* %l, align 4
  %inc = add nsw i32 %20, 1
  store i32 %inc, i32* %l, align 4
  br label %for.cond8

for.end:                                          ; preds = %for.cond8
  %21 = load i32*****, i32****** %mv.addr, align 8
  %22 = load i32, i32* %i, align 4
  %idxprom17 = sext i32 %22 to i64
  %arrayidx18 = getelementptr inbounds i32****, i32***** %21, i64 %idxprom17
  %23 = load i32****, i32***** %arrayidx18, align 8
  %24 = load i32, i32* %j, align 4
  %idxprom19 = sext i32 %24 to i64
  %arrayidx20 = getelementptr inbounds i32***, i32**** %23, i64 %idxprom19
  %25 = load i32***, i32**** %arrayidx20, align 8
  %26 = load i32, i32* %k, align 4
  %idxprom21 = sext i32 %26 to i64
  %arrayidx22 = getelementptr inbounds i32**, i32*** %25, i64 %idxprom21
  %27 = load i32**, i32*** %arrayidx22, align 8
  %28 = bitcast i32** %27 to i8*
  call void @free(i8* %28) #5
  br label %for.inc23

for.inc23:                                        ; preds = %for.end
  %29 = load i32, i32* %k, align 4
  %inc24 = add nsw i32 %29, 1
  store i32 %inc24, i32* %k, align 4
  br label %for.cond5

for.end25:                                        ; preds = %for.cond5
  %30 = load i32*****, i32****** %mv.addr, align 8
  %31 = load i32, i32* %i, align 4
  %idxprom26 = sext i32 %31 to i64
  %arrayidx27 = getelementptr inbounds i32****, i32***** %30, i64 %idxprom26
  %32 = load i32****, i32***** %arrayidx27, align 8
  %33 = load i32, i32* %j, align 4
  %idxprom28 = sext i32 %33 to i64
  %arrayidx29 = getelementptr inbounds i32***, i32**** %32, i64 %idxprom28
  %34 = load i32***, i32**** %arrayidx29, align 8
  %35 = bitcast i32*** %34 to i8*
  call void @free(i8* %35) #5
  br label %for.inc30

for.inc30:                                        ; preds = %for.end25
  %36 = load i32, i32* %j, align 4
  %inc31 = add nsw i32 %36, 1
  store i32 %inc31, i32* %j, align 4
  br label %for.cond1

for.end32:                                        ; preds = %for.cond1
  %37 = load i32*****, i32****** %mv.addr, align 8
  %38 = load i32, i32* %i, align 4
  %idxprom33 = sext i32 %38 to i64
  %arrayidx34 = getelementptr inbounds i32****, i32***** %37, i64 %idxprom33
  %39 = load i32****, i32***** %arrayidx34, align 8
  %40 = bitcast i32**** %39 to i8*
  call void @free(i8* %40) #5
  br label %for.inc35

for.inc35:                                        ; preds = %for.end32
  %41 = load i32, i32* %i, align 4
  %inc36 = add nsw i32 %41, 1
  store i32 %inc36, i32* %i, align 4
  br label %for.cond

for.end37:                                        ; preds = %for.cond
  %42 = load i32*****, i32****** %mv.addr, align 8
  %43 = bitcast i32***** %42 to i8*
  call void @free(i8* %43) #5
  %44 = load i32, i32* %canary
  %45 = icmp eq i32 %44, 1863697357
  br i1 %45, label %46, label %func_exit

46:                                               ; preds = %for.end37, %func_exit
  ret void

func_exit:                                        ; preds = %for.end37
  call void @detect_breach()
  br label %46
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @DefineThresholdMB.73() #0 {
entry:
  %canary = alloca i32
  store i32 400236584, i32* %canary
  %gb_qp_rem = alloca i32, align 4
  %gb_q_bits = alloca i32, align 4
  %Thresh4x4 = alloca i32, align 4
  %gb_qp_per = alloca i32, align 4
  %gb_qp_const = alloca i32, align 4
  %0 = load %struct.InputParameters*, %struct.InputParameters** @input, align 8
  %qpN = getelementptr inbounds %struct.InputParameters, %struct.InputParameters* %0, i32 0, i32 4
  %1 = load i32, i32* %qpN, align 8
  %sub = sub nsw i32 %1, 0
  %div = sdiv i32 %sub, 6
  store i32 %div, i32* %gb_qp_per, align 4
  %2 = load %struct.InputParameters*, %struct.InputParameters** @input, align 8
  %qpN1 = getelementptr inbounds %struct.InputParameters, %struct.InputParameters* %2, i32 0, i32 4
  %3 = load i32, i32* %qpN1, align 8
  %sub2 = sub nsw i32 %3, 0
  %rem = srem i32 %sub2, 6
  store i32 %rem, i32* %gb_qp_rem, align 4
  %4 = load i32, i32* %gb_qp_per, align 4
  %add = add nsw i32 15, %4
  store i32 %add, i32* %gb_q_bits, align 4
  %5 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %type = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %5, i32 0, i32 6
  %6 = load i32, i32* %type, align 8
  %cmp = icmp eq i32 %6, 2
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %7 = load i32, i32* %gb_q_bits, align 4
  %shl = shl i32 1, %7
  %div3 = sdiv i32 %shl, 3
  store i32 %div3, i32* %gb_qp_const, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %8 = load i32, i32* %gb_q_bits, align 4
  %shl4 = shl i32 1, %8
  %div5 = sdiv i32 %shl4, 6
  store i32 %div5, i32* %gb_qp_const, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %gb_q_bits, align 4
  %shl6 = shl i32 1, %9
  %10 = load i32, i32* %gb_qp_const, align 4
  %sub7 = sub nsw i32 %shl6, %10
  %11 = load i32, i32* %gb_qp_rem, align 4
  %idxprom = sext i32 %11 to i64
  %arrayidx = getelementptr inbounds [6 x [4 x [4 x i32]]], [6 x [4 x [4 x i32]]]* @quant_coef, i64 0, i64 %idxprom
  %arrayidx8 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %arrayidx, i64 0, i64 0
  %arrayidx9 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx8, i64 0, i64 0
  %12 = load i32, i32* %arrayidx9, align 16
  %div10 = sdiv i32 %sub7, %12
  store i32 %div10, i32* %Thresh4x4, align 4
  %13 = load i32, i32* %Thresh4x4, align 4
  %conv = sitofp i32 %13 to float
  %div11 = fdiv float %conv, 0x403670A3E0000000
  store float %div11, float* @Quantize_step, align 4
  %14 = load float, float* @Quantize_step, align 4
  %mul = fmul float 2.560000e+02, %14
  store float %mul, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 7), align 4
  %15 = load float, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 7), align 4
  %mul12 = fmul float %15, 4.000000e+00
  store float %mul12, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 6), align 8
  %16 = load float, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 7), align 4
  %mul13 = fmul float %16, 4.000000e+00
  store float %mul13, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 5), align 4
  %17 = load float, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 5), align 4
  %mul14 = fmul float %17, 4.000000e+00
  store float %mul14, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 4), align 16
  %18 = load float, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 4), align 16
  %mul15 = fmul float %18, 4.000000e+00
  store float %mul15, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 3), align 4
  %19 = load float, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 4), align 16
  %mul16 = fmul float %19, 4.000000e+00
  store float %mul16, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 2), align 8
  %20 = load float, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 2), align 8
  %mul17 = fmul float %20, 4.000000e+00
  store float %mul17, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 1), align 4
  %21 = load i32, i32* %canary
  %22 = icmp eq i32 %21, 400236584
  br i1 %22, label %23, label %func_exit

23:                                               ; preds = %if.end, %func_exit
  ret void

func_exit:                                        ; preds = %if.end
  call void @detect_breach()
  br label %23
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @get_mem_mincost.74(i32****** %mv) #0 {
entry:
  %mv.addr = alloca i32******, align 8
  %k = alloca i32, align 4
  %l = alloca i32, align 4
  %canary = alloca i32
  store i32 188740419, i32* %canary
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32****** %mv, i32******* %mv.addr, align 8
  %0 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %width = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %0, i32 0, i32 13
  %1 = load i32, i32* %width, align 4
  %div = sdiv i32 %1, 4
  %conv = sext i32 %div to i64
  %call = call noalias i8* @calloc(i64 %conv, i64 8) #5
  %2 = bitcast i8* %call to i32*****
  %3 = load i32******, i32******* %mv.addr, align 8
  store i32***** %2, i32****** %3, align 8
  %cmp = icmp eq i32***** %2, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @no_mem_exit(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc68, %if.end
  %4 = load i32, i32* %i, align 4
  %5 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %width2 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %5, i32 0, i32 13
  %6 = load i32, i32* %width2, align 4
  %div3 = sdiv i32 %6, 4
  %cmp4 = icmp slt i32 %4, %div3
  br i1 %cmp4, label %for.body, label %for.end70

for.body:                                         ; preds = %for.cond
  %7 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %7, i32 0, i32 15
  %8 = load i32, i32* %height, align 4
  %div6 = sdiv i32 %8, 4
  %conv7 = sext i32 %div6 to i64
  %call8 = call noalias i8* @calloc(i64 %conv7, i64 8) #5
  %9 = bitcast i8* %call8 to i32****
  %10 = load i32******, i32******* %mv.addr, align 8
  %11 = load i32*****, i32****** %10, align 8
  %12 = load i32, i32* %i, align 4
  %idxprom = sext i32 %12 to i64
  %arrayidx = getelementptr inbounds i32****, i32***** %11, i64 %idxprom
  store i32**** %9, i32***** %arrayidx, align 8
  %cmp9 = icmp eq i32**** %9, null
  br i1 %cmp9, label %if.then11, label %if.end12

if.then11:                                        ; preds = %for.body
  call void @no_mem_exit(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %if.end12

if.end12:                                         ; preds = %if.then11, %for.body
  store i32 0, i32* %j, align 4
  br label %for.cond13

for.cond13:                                       ; preds = %for.inc65, %if.end12
  %13 = load i32, i32* %j, align 4
  %14 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height14 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %14, i32 0, i32 15
  %15 = load i32, i32* %height14, align 4
  %div15 = sdiv i32 %15, 4
  %cmp16 = icmp slt i32 %13, %div15
  br i1 %cmp16, label %for.body18, label %for.end67

for.body18:                                       ; preds = %for.cond13
  %16 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %max_num_references = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %16, i32 0, i32 9
  %17 = load i32, i32* %max_num_references, align 4
  %conv19 = sext i32 %17 to i64
  %call20 = call noalias i8* @calloc(i64 %conv19, i64 8) #5
  %18 = bitcast i8* %call20 to i32***
  %19 = load i32******, i32******* %mv.addr, align 8
  %20 = load i32*****, i32****** %19, align 8
  %21 = load i32, i32* %i, align 4
  %idxprom21 = sext i32 %21 to i64
  %arrayidx22 = getelementptr inbounds i32****, i32***** %20, i64 %idxprom21
  %22 = load i32****, i32***** %arrayidx22, align 8
  %23 = load i32, i32* %j, align 4
  %idxprom23 = sext i32 %23 to i64
  %arrayidx24 = getelementptr inbounds i32***, i32**** %22, i64 %idxprom23
  store i32*** %18, i32**** %arrayidx24, align 8
  %cmp25 = icmp eq i32*** %18, null
  br i1 %cmp25, label %if.then27, label %if.end28

if.then27:                                        ; preds = %for.body18
  call void @no_mem_exit(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %if.end28

if.end28:                                         ; preds = %if.then27, %for.body18
  store i32 0, i32* %k, align 4
  br label %for.cond29

for.cond29:                                       ; preds = %for.inc62, %if.end28
  %24 = load i32, i32* %k, align 4
  %25 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %max_num_references30 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %25, i32 0, i32 9
  %26 = load i32, i32* %max_num_references30, align 4
  %cmp31 = icmp slt i32 %24, %26
  br i1 %cmp31, label %for.body33, label %for.end64

for.body33:                                       ; preds = %for.cond29
  %call34 = call noalias i8* @calloc(i64 9, i64 8) #5
  %27 = bitcast i8* %call34 to i32**
  %28 = load i32******, i32******* %mv.addr, align 8
  %29 = load i32*****, i32****** %28, align 8
  %30 = load i32, i32* %i, align 4
  %idxprom35 = sext i32 %30 to i64
  %arrayidx36 = getelementptr inbounds i32****, i32***** %29, i64 %idxprom35
  %31 = load i32****, i32***** %arrayidx36, align 8
  %32 = load i32, i32* %j, align 4
  %idxprom37 = sext i32 %32 to i64
  %arrayidx38 = getelementptr inbounds i32***, i32**** %31, i64 %idxprom37
  %33 = load i32***, i32**** %arrayidx38, align 8
  %34 = load i32, i32* %k, align 4
  %idxprom39 = sext i32 %34 to i64
  %arrayidx40 = getelementptr inbounds i32**, i32*** %33, i64 %idxprom39
  store i32** %27, i32*** %arrayidx40, align 8
  %cmp41 = icmp eq i32** %27, null
  br i1 %cmp41, label %if.then43, label %if.end44

if.then43:                                        ; preds = %for.body33
  call void @no_mem_exit(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %if.end44

if.end44:                                         ; preds = %if.then43, %for.body33
  store i32 0, i32* %l, align 4
  br label %for.cond45

for.cond45:                                       ; preds = %for.inc, %if.end44
  %35 = load i32, i32* %l, align 4
  %cmp46 = icmp slt i32 %35, 9
  br i1 %cmp46, label %for.body48, label %for.end

for.body48:                                       ; preds = %for.cond45
  %call49 = call noalias i8* @calloc(i64 3, i64 4) #5
  %36 = bitcast i8* %call49 to i32*
  %37 = load i32******, i32******* %mv.addr, align 8
  %38 = load i32*****, i32****** %37, align 8
  %39 = load i32, i32* %i, align 4
  %idxprom50 = sext i32 %39 to i64
  %arrayidx51 = getelementptr inbounds i32****, i32***** %38, i64 %idxprom50
  %40 = load i32****, i32***** %arrayidx51, align 8
  %41 = load i32, i32* %j, align 4
  %idxprom52 = sext i32 %41 to i64
  %arrayidx53 = getelementptr inbounds i32***, i32**** %40, i64 %idxprom52
  %42 = load i32***, i32**** %arrayidx53, align 8
  %43 = load i32, i32* %k, align 4
  %idxprom54 = sext i32 %43 to i64
  %arrayidx55 = getelementptr inbounds i32**, i32*** %42, i64 %idxprom54
  %44 = load i32**, i32*** %arrayidx55, align 8
  %45 = load i32, i32* %l, align 4
  %idxprom56 = sext i32 %45 to i64
  %arrayidx57 = getelementptr inbounds i32*, i32** %44, i64 %idxprom56
  store i32* %36, i32** %arrayidx57, align 8
  %cmp58 = icmp eq i32* %36, null
  br i1 %cmp58, label %if.then60, label %if.end61

if.then60:                                        ; preds = %for.body48
  call void @no_mem_exit(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %if.end61

if.end61:                                         ; preds = %if.then60, %for.body48
  br label %for.inc

for.inc:                                          ; preds = %if.end61
  %46 = load i32, i32* %l, align 4
  %inc = add nsw i32 %46, 1
  store i32 %inc, i32* %l, align 4
  br label %for.cond45

for.end:                                          ; preds = %for.cond45
  br label %for.inc62

for.inc62:                                        ; preds = %for.end
  %47 = load i32, i32* %k, align 4
  %inc63 = add nsw i32 %47, 1
  store i32 %inc63, i32* %k, align 4
  br label %for.cond29

for.end64:                                        ; preds = %for.cond29
  br label %for.inc65

for.inc65:                                        ; preds = %for.end64
  %48 = load i32, i32* %j, align 4
  %inc66 = add nsw i32 %48, 1
  store i32 %inc66, i32* %j, align 4
  br label %for.cond13

for.end67:                                        ; preds = %for.cond13
  br label %for.inc68

for.inc68:                                        ; preds = %for.end67
  %49 = load i32, i32* %i, align 4
  %inc69 = add nsw i32 %49, 1
  store i32 %inc69, i32* %i, align 4
  br label %for.cond

for.end70:                                        ; preds = %for.cond
  %50 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %width71 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %50, i32 0, i32 13
  %51 = load i32, i32* %width71, align 4
  %div72 = sdiv i32 %51, 4
  %52 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height73 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %52, i32 0, i32 15
  %53 = load i32, i32* %height73, align 4
  %mul = mul nsw i32 %div72, %53
  %div74 = sdiv i32 %mul, 4
  %54 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %max_num_references75 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %54, i32 0, i32 9
  %55 = load i32, i32* %max_num_references75, align 4
  %mul76 = mul nsw i32 %div74, %55
  %mul77 = mul nsw i32 %mul76, 9
  %mul78 = mul nsw i32 %mul77, 3
  %conv79 = sext i32 %mul78 to i64
  %mul80 = mul i64 %conv79, 4
  %conv81 = trunc i64 %mul80 to i32
  %56 = load i32, i32* %canary
  %57 = icmp eq i32 %56, 188740419
  br i1 %57, label %58, label %func_exit

58:                                               ; preds = %for.end70, %func_exit
  ret i32 %conv81

func_exit:                                        ; preds = %for.end70
  call void @detect_breach()
  br label %58
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @free_mem_mincost.75(i32***** %mv) #0 {
entry:
  %canary = alloca i32
  store i32 320586184, i32* %canary
  %j = alloca i32, align 4
  %i = alloca i32, align 4
  %mv.addr = alloca i32*****, align 8
  %k = alloca i32, align 4
  %l = alloca i32, align 4
  store i32***** %mv, i32****** %mv.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc35, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %width = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %1, i32 0, i32 13
  %2 = load i32, i32* %width, align 4
  %div = sdiv i32 %2, 4
  %cmp = icmp slt i32 %0, %div
  br i1 %cmp, label %for.body, label %for.end37

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc30, %for.body
  %3 = load i32, i32* %j, align 4
  %4 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %4, i32 0, i32 15
  %5 = load i32, i32* %height, align 4
  %div2 = sdiv i32 %5, 4
  %cmp3 = icmp slt i32 %3, %div2
  br i1 %cmp3, label %for.body4, label %for.end32

for.body4:                                        ; preds = %for.cond1
  store i32 0, i32* %k, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc23, %for.body4
  %6 = load i32, i32* %k, align 4
  %7 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %max_num_references = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %7, i32 0, i32 9
  %8 = load i32, i32* %max_num_references, align 4
  %cmp6 = icmp slt i32 %6, %8
  br i1 %cmp6, label %for.body7, label %for.end25

for.body7:                                        ; preds = %for.cond5
  store i32 0, i32* %l, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc, %for.body7
  %9 = load i32, i32* %l, align 4
  %cmp9 = icmp slt i32 %9, 9
  br i1 %cmp9, label %for.body10, label %for.end

for.body10:                                       ; preds = %for.cond8
  %10 = load i32*****, i32****** %mv.addr, align 8
  %11 = load i32, i32* %i, align 4
  %idxprom = sext i32 %11 to i64
  %arrayidx = getelementptr inbounds i32****, i32***** %10, i64 %idxprom
  %12 = load i32****, i32***** %arrayidx, align 8
  %13 = load i32, i32* %j, align 4
  %idxprom11 = sext i32 %13 to i64
  %arrayidx12 = getelementptr inbounds i32***, i32**** %12, i64 %idxprom11
  %14 = load i32***, i32**** %arrayidx12, align 8
  %15 = load i32, i32* %k, align 4
  %idxprom13 = sext i32 %15 to i64
  %arrayidx14 = getelementptr inbounds i32**, i32*** %14, i64 %idxprom13
  %16 = load i32**, i32*** %arrayidx14, align 8
  %17 = load i32, i32* %l, align 4
  %idxprom15 = sext i32 %17 to i64
  %arrayidx16 = getelementptr inbounds i32*, i32** %16, i64 %idxprom15
  %18 = load i32*, i32** %arrayidx16, align 8
  %19 = bitcast i32* %18 to i8*
  call void @free(i8* %19) #5
  br label %for.inc

for.inc:                                          ; preds = %for.body10
  %20 = load i32, i32* %l, align 4
  %inc = add nsw i32 %20, 1
  store i32 %inc, i32* %l, align 4
  br label %for.cond8

for.end:                                          ; preds = %for.cond8
  %21 = load i32*****, i32****** %mv.addr, align 8
  %22 = load i32, i32* %i, align 4
  %idxprom17 = sext i32 %22 to i64
  %arrayidx18 = getelementptr inbounds i32****, i32***** %21, i64 %idxprom17
  %23 = load i32****, i32***** %arrayidx18, align 8
  %24 = load i32, i32* %j, align 4
  %idxprom19 = sext i32 %24 to i64
  %arrayidx20 = getelementptr inbounds i32***, i32**** %23, i64 %idxprom19
  %25 = load i32***, i32**** %arrayidx20, align 8
  %26 = load i32, i32* %k, align 4
  %idxprom21 = sext i32 %26 to i64
  %arrayidx22 = getelementptr inbounds i32**, i32*** %25, i64 %idxprom21
  %27 = load i32**, i32*** %arrayidx22, align 8
  %28 = bitcast i32** %27 to i8*
  call void @free(i8* %28) #5
  br label %for.inc23

for.inc23:                                        ; preds = %for.end
  %29 = load i32, i32* %k, align 4
  %inc24 = add nsw i32 %29, 1
  store i32 %inc24, i32* %k, align 4
  br label %for.cond5

for.end25:                                        ; preds = %for.cond5
  %30 = load i32*****, i32****** %mv.addr, align 8
  %31 = load i32, i32* %i, align 4
  %idxprom26 = sext i32 %31 to i64
  %arrayidx27 = getelementptr inbounds i32****, i32***** %30, i64 %idxprom26
  %32 = load i32****, i32***** %arrayidx27, align 8
  %33 = load i32, i32* %j, align 4
  %idxprom28 = sext i32 %33 to i64
  %arrayidx29 = getelementptr inbounds i32***, i32**** %32, i64 %idxprom28
  %34 = load i32***, i32**** %arrayidx29, align 8
  %35 = bitcast i32*** %34 to i8*
  call void @free(i8* %35) #5
  br label %for.inc30

for.inc30:                                        ; preds = %for.end25
  %36 = load i32, i32* %j, align 4
  %inc31 = add nsw i32 %36, 1
  store i32 %inc31, i32* %j, align 4
  br label %for.cond1

for.end32:                                        ; preds = %for.cond1
  %37 = load i32*****, i32****** %mv.addr, align 8
  %38 = load i32, i32* %i, align 4
  %idxprom33 = sext i32 %38 to i64
  %arrayidx34 = getelementptr inbounds i32****, i32***** %37, i64 %idxprom33
  %39 = load i32****, i32***** %arrayidx34, align 8
  %40 = bitcast i32**** %39 to i8*
  call void @free(i8* %40) #5
  br label %for.inc35

for.inc35:                                        ; preds = %for.end32
  %41 = load i32, i32* %i, align 4
  %inc36 = add nsw i32 %41, 1
  store i32 %inc36, i32* %i, align 4
  br label %for.cond

for.end37:                                        ; preds = %for.cond
  %42 = load i32*****, i32****** %mv.addr, align 8
  %43 = bitcast i32***** %42 to i8*
  call void @free(i8* %43) #5
  %44 = load i32, i32* %canary
  %45 = icmp eq i32 %44, 320586184
  br i1 %45, label %46, label %func_exit

46:                                               ; preds = %for.end37, %func_exit
  ret void

func_exit:                                        ; preds = %for.end37
  call void @detect_breach()
  br label %46
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @FastIntegerPelBlockMotionSearch.76(i16** %orig_pic, i16 signext %ref, i32 %list, i32 %pic_pix_x, i32 %pic_pix_y, i32 %blocktype, i16 signext %pred_mv_x, i16 signext %pred_mv_y, i16* %mv_x, i16* %mv_y, i32 %search_range, i32 %min_mcost, double %lambda) #0 {
entry:
  %cand_x = alloca i32, align 4
  %blocktype.addr = alloca i32, align 4
  %pos = alloca i32, align 4
  %ref.addr = alloca i16, align 2
  %betaSec = alloca float, align 4
  %blocksize_y = alloca i32, align 4
  %iXMinNow = alloca i32, align 4
  %search_step = alloca i32, align 4
  %search_range.addr = alloca i32, align 4
  %center_x = alloca i32, align 4
  %lambda_factor = alloca i32, align 4
  %center_y = alloca i32, align 4
  %blocksize_x4 = alloca i32, align 4
  %get_ref_line = alloca i16* (i32, i16*, i32, i32, i32, i32)*, align 8
  %best_y = alloca i32, align 4
  %lambda.addr = alloca double, align 8
  %min_mcost.addr = alloca i32, align 4
  %N_Bframe = alloca i32, align 4
  %pred_y = alloca i32, align 4
  %cand_y = alloca i32, align 4
  %i = alloca i32, align 4
  %canary = alloca i32
  store i32 1670002044, i32* %canary
  %pred_x = alloca i32, align 4
  %pic_pix_x.addr = alloca i32, align 4
  %height = alloca i32, align 4
  %iAbort = alloca i32, align 4
  %orig_pic.addr = alloca i16**, align 8
  %mvshift = alloca i32, align 4
  %pred_mv_y.addr = alloca i16, align 2
  %pred_mv_x.addr = alloca i16, align 2
  %list_offset = alloca i32, align 4
  %mcost = alloca i32, align 4
  %ref_pic = alloca i16*, align 8
  %mv_y.addr = alloca i16*, align 8
  %iSADLayer = alloca i32, align 4
  %m = alloca i32, align 4
  %best_x = alloca i32, align 4
  %list.addr = alloca i32, align 4
  %betaThird = alloca float, align 4
  %mv_x.addr = alloca i16*, align 8
  %iYMinNow = alloca i32, align 4
  %pic_pix_y.addr = alloca i32, align 4
  %blocksize_x = alloca i32, align 4
  store i16** %orig_pic, i16*** %orig_pic.addr, align 8
  store i16 %ref, i16* %ref.addr, align 2
  store i32 %list, i32* %list.addr, align 4
  store i32 %pic_pix_x, i32* %pic_pix_x.addr, align 4
  store i32 %pic_pix_y, i32* %pic_pix_y.addr, align 4
  store i32 %blocktype, i32* %blocktype.addr, align 4
  store i16 %pred_mv_x, i16* %pred_mv_x.addr, align 2
  store i16 %pred_mv_y, i16* %pred_mv_y.addr, align 2
  store i16* %mv_x, i16** %mv_x.addr, align 8
  store i16* %mv_y, i16** %mv_y.addr, align 8
  store i32 %search_range, i32* %search_range.addr, align 4
  store i32 %min_mcost, i32* %min_mcost.addr, align 4
  store double %lambda, double* %lambda.addr, align 8
  %0 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %MbaffFrameFlag = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %0, i32 0, i32 90
  %1 = load i32, i32* %MbaffFrameFlag, align 8
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %mb_data = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %2, i32 0, i32 51
  %3 = load %struct.macroblock*, %struct.macroblock** %mb_data, align 8
  %4 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %current_mb_nr = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %4, i32 0, i32 3
  %5 = load i32, i32* %current_mb_nr, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 %idxprom
  %mb_field = getelementptr inbounds %struct.macroblock, %struct.macroblock* %arrayidx, i32 0, i32 22
  %6 = load i32, i32* %mb_field, align 4
  %tobool1 = icmp ne i32 %6, 0
  br i1 %tobool1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %7 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %current_mb_nr2 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %7, i32 0, i32 3
  %8 = load i32, i32* %current_mb_nr2, align 4
  %rem = srem i32 %8, 2
  %tobool3 = icmp ne i32 %rem, 0
  %9 = zext i1 %tobool3 to i64
  %cond = select i1 %tobool3, i32 4, i32 2
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond4 = phi i32 [ %cond, %cond.true ], [ 0, %cond.false ]
  store i32 %cond4, i32* %list_offset, align 4
  %10 = load i32, i32* %list.addr, align 4
  %11 = load i32, i32* %list_offset, align 4
  %add = add nsw i32 %10, %11
  %idxprom5 = sext i32 %add to i64
  %arrayidx6 = getelementptr inbounds [6 x %struct.storable_picture**], [6 x %struct.storable_picture**]* @listX, i64 0, i64 %idxprom5
  %12 = load %struct.storable_picture**, %struct.storable_picture*** %arrayidx6, align 8
  %13 = load i16, i16* %ref.addr, align 2
  %idxprom7 = sext i16 %13 to i64
  %arrayidx8 = getelementptr inbounds %struct.storable_picture*, %struct.storable_picture** %12, i64 %idxprom7
  %14 = load %struct.storable_picture*, %struct.storable_picture** %arrayidx8, align 8
  %imgY_11 = getelementptr inbounds %struct.storable_picture, %struct.storable_picture* %14, i32 0, i32 26
  %15 = load i16*, i16** %imgY_11, align 8
  store i16* %15, i16** %ref_pic, align 8
  %16 = load double, double* %lambda.addr, align 8
  %mul = fmul double 6.553600e+04, %16
  %add9 = fadd double %mul, 5.000000e-01
  %conv = fptosi double %add9 to i32
  store i32 %conv, i32* %lambda_factor, align 4
  store i32 2, i32* %mvshift, align 4
  %17 = load %struct.InputParameters*, %struct.InputParameters** @input, align 8
  %blc_size = getelementptr inbounds %struct.InputParameters, %struct.InputParameters* %17, i32 0, i32 20
  %18 = load i32, i32* %blocktype.addr, align 4
  %idxprom10 = sext i32 %18 to i64
  %arrayidx11 = getelementptr inbounds [8 x [2 x i32]], [8 x [2 x i32]]* %blc_size, i64 0, i64 %idxprom10
  %arrayidx12 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx11, i64 0, i64 1
  %19 = load i32, i32* %arrayidx12, align 4
  store i32 %19, i32* %blocksize_y, align 4
  %20 = load %struct.InputParameters*, %struct.InputParameters** @input, align 8
  %blc_size13 = getelementptr inbounds %struct.InputParameters, %struct.InputParameters* %20, i32 0, i32 20
  %21 = load i32, i32* %blocktype.addr, align 4
  %idxprom14 = sext i32 %21 to i64
  %arrayidx15 = getelementptr inbounds [8 x [2 x i32]], [8 x [2 x i32]]* %blc_size13, i64 0, i64 %idxprom14
  %arrayidx16 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx15, i64 0, i64 0
  %22 = load i32, i32* %arrayidx16, align 8
  store i32 %22, i32* %blocksize_x, align 4
  %23 = load i32, i32* %blocksize_x, align 4
  %shr = ashr i32 %23, 2
  store i32 %shr, i32* %blocksize_x4, align 4
  %24 = load i32, i32* %pic_pix_x.addr, align 4
  %25 = load i32, i32* %mvshift, align 4
  %shl = shl i32 %24, %25
  %26 = load i16, i16* %pred_mv_x.addr, align 2
  %conv17 = sext i16 %26 to i32
  %add18 = add nsw i32 %shl, %conv17
  store i32 %add18, i32* %pred_x, align 4
  %27 = load i32, i32* %pic_pix_y.addr, align 4
  %28 = load i32, i32* %mvshift, align 4
  %shl19 = shl i32 %27, %28
  %29 = load i16, i16* %pred_mv_y.addr, align 2
  %conv20 = sext i16 %29 to i32
  %add21 = add nsw i32 %shl19, %conv20
  store i32 %add21, i32* %pred_y, align 4
  %30 = load i32, i32* %pic_pix_x.addr, align 4
  %31 = load i16*, i16** %mv_x.addr, align 8
  %32 = load i16, i16* %31, align 2
  %conv22 = sext i16 %32 to i32
  %add23 = add nsw i32 %30, %conv22
  store i32 %add23, i32* %center_x, align 4
  %33 = load i32, i32* %pic_pix_y.addr, align 4
  %34 = load i16*, i16** %mv_y.addr, align 8
  %35 = load i16, i16* %34, align 2
  %conv24 = sext i16 %35 to i32
  %add25 = add nsw i32 %33, %conv24
  store i32 %add25, i32* %center_y, align 4
  store i32 0, i32* %best_x, align 4
  store i32 0, i32* %best_y, align 4
  %36 = load %struct.InputParameters*, %struct.InputParameters** @input, align 8
  %successive_Bframe = getelementptr inbounds %struct.InputParameters, %struct.InputParameters* %36, i32 0, i32 34
  %37 = load i32, i32* %successive_Bframe, align 4
  store i32 %37, i32* %N_Bframe, align 4
  %38 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %MbaffFrameFlag26 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %38, i32 0, i32 90
  %39 = load i32, i32* %MbaffFrameFlag26, align 8
  %tobool27 = icmp ne i32 %39, 0
  br i1 %tobool27, label %land.lhs.true28, label %cond.false37

land.lhs.true28:                                  ; preds = %cond.end
  %40 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %mb_data29 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %40, i32 0, i32 51
  %41 = load %struct.macroblock*, %struct.macroblock** %mb_data29, align 8
  %42 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %current_mb_nr30 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %42, i32 0, i32 3
  %43 = load i32, i32* %current_mb_nr30, align 4
  %idxprom31 = sext i32 %43 to i64
  %arrayidx32 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %41, i64 %idxprom31
  %mb_field33 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %arrayidx32, i32 0, i32 22
  %44 = load i32, i32* %mb_field33, align 4
  %tobool34 = icmp ne i32 %44, 0
  br i1 %tobool34, label %cond.true35, label %cond.false37

cond.true35:                                      ; preds = %land.lhs.true28
  %45 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height36 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %45, i32 0, i32 15
  %46 = load i32, i32* %height36, align 4
  %div = sdiv i32 %46, 2
  br label %cond.end39

cond.false37:                                     ; preds = %land.lhs.true28, %cond.end
  %47 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height38 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %47, i32 0, i32 15
  %48 = load i32, i32* %height38, align 4
  br label %cond.end39

cond.end39:                                       ; preds = %cond.false37, %cond.true35
  %cond40 = phi i32 [ %div, %cond.true35 ], [ %48, %cond.false37 ]
  store i32 %cond40, i32* %height, align 4
  %49 = load i32, i32* %center_x, align 4
  %50 = load i32, i32* %search_range.addr, align 4
  %cmp = icmp sgt i32 %49, %50
  br i1 %cmp, label %land.lhs.true42, label %if.else

land.lhs.true42:                                  ; preds = %cond.end39
  %51 = load i32, i32* %center_x, align 4
  %52 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %width = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %52, i32 0, i32 13
  %53 = load i32, i32* %width, align 4
  %sub = sub nsw i32 %53, 1
  %54 = load i32, i32* %search_range.addr, align 4
  %sub43 = sub nsw i32 %sub, %54
  %55 = load i32, i32* %blocksize_x, align 4
  %sub44 = sub nsw i32 %sub43, %55
  %cmp45 = icmp slt i32 %51, %sub44
  br i1 %cmp45, label %land.lhs.true47, label %if.else

land.lhs.true47:                                  ; preds = %land.lhs.true42
  %56 = load i32, i32* %center_y, align 4
  %57 = load i32, i32* %search_range.addr, align 4
  %cmp48 = icmp sgt i32 %56, %57
  br i1 %cmp48, label %land.lhs.true50, label %if.else

land.lhs.true50:                                  ; preds = %land.lhs.true47
  %58 = load i32, i32* %center_y, align 4
  %59 = load i32, i32* %height, align 4
  %sub51 = sub nsw i32 %59, 1
  %60 = load i32, i32* %search_range.addr, align 4
  %sub52 = sub nsw i32 %sub51, %60
  %61 = load i32, i32* %blocksize_y, align 4
  %sub53 = sub nsw i32 %sub52, %61
  %cmp54 = icmp slt i32 %58, %sub53
  br i1 %cmp54, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true50
  store i16* (i32, i16*, i32, i32, i32, i32)* @FastLineX, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  br label %if.end

if.else:                                          ; preds = %land.lhs.true50, %land.lhs.true47, %land.lhs.true42, %cond.end39
  store i16* (i32, i16*, i32, i32, i32, i32)* @UMVLineX, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %62 = load i32**, i32*** @McostState, align 8
  %arrayidx56 = getelementptr inbounds i32*, i32** %62, i64 0
  %63 = load i32*, i32** %arrayidx56, align 8
  %64 = bitcast i32* %63 to i8*
  %65 = load i32, i32* %search_range.addr, align 4
  %mul57 = mul nsw i32 2, %65
  %add58 = add nsw i32 %mul57, 1
  %66 = load i32, i32* %search_range.addr, align 4
  %mul59 = mul nsw i32 2, %66
  %add60 = add nsw i32 %mul59, 1
  %mul61 = mul nsw i32 %add58, %add60
  %mul62 = mul nsw i32 %mul61, 4
  %conv63 = sext i32 %mul62 to i64
  call void @llvm.memset.p0i8.i64(i8* align 4 %64, i8 0, i64 %conv63, i1 false)
  %67 = load i16, i16* %ref.addr, align 2
  %conv64 = sext i16 %67 to i32
  %cmp65 = icmp sgt i32 %conv64, 0
  br i1 %cmp65, label %if.then67, label %if.else89

if.then67:                                        ; preds = %if.end
  %68 = load i32, i32* @pred_SAD_ref, align 4
  %cmp68 = icmp ne i32 %68, 0
  br i1 %cmp68, label %if.then70, label %if.else87

if.then70:                                        ; preds = %if.then67
  %69 = load i32, i32* %blocktype.addr, align 4
  %idxprom71 = sext i32 %69 to i64
  %arrayidx72 = getelementptr inbounds [8 x float], [8 x float]* @Bsize, i64 0, i64 %idxprom71
  %70 = load float, float* %arrayidx72, align 4
  %71 = load i32, i32* @pred_SAD_ref, align 4
  %72 = load i32, i32* @pred_SAD_ref, align 4
  %mul73 = mul nsw i32 %71, %72
  %conv74 = sitofp i32 %mul73 to float
  %div75 = fdiv float %70, %conv74
  %73 = load i32, i32* %blocktype.addr, align 4
  %idxprom76 = sext i32 %73 to i64
  %arrayidx77 = getelementptr inbounds [8 x float], [8 x float]* @AlphaSec, i64 0, i64 %idxprom76
  %74 = load float, float* %arrayidx77, align 4
  %sub78 = fsub float %div75, %74
  store float %sub78, float* %betaSec, align 4
  %75 = load i32, i32* %blocktype.addr, align 4
  %idxprom79 = sext i32 %75 to i64
  %arrayidx80 = getelementptr inbounds [8 x float], [8 x float]* @Bsize, i64 0, i64 %idxprom79
  %76 = load float, float* %arrayidx80, align 4
  %77 = load i32, i32* @pred_SAD_ref, align 4
  %78 = load i32, i32* @pred_SAD_ref, align 4
  %mul81 = mul nsw i32 %77, %78
  %conv82 = sitofp i32 %mul81 to float
  %div83 = fdiv float %76, %conv82
  %79 = load i32, i32* %blocktype.addr, align 4
  %idxprom84 = sext i32 %79 to i64
  %arrayidx85 = getelementptr inbounds [8 x float], [8 x float]* @AlphaThird, i64 0, i64 %idxprom84
  %80 = load float, float* %arrayidx85, align 4
  %sub86 = fsub float %div83, %80
  store float %sub86, float* %betaThird, align 4
  br label %if.end88

if.else87:                                        ; preds = %if.then67
  store float 0.000000e+00, float* %betaSec, align 4
  store float 0.000000e+00, float* %betaThird, align 4
  br label %if.end88

if.end88:                                         ; preds = %if.else87, %if.then70
  br label %if.end137

if.else89:                                        ; preds = %if.end
  %81 = load i32, i32* %blocktype.addr, align 4
  %cmp90 = icmp eq i32 %81, 1
  br i1 %cmp90, label %if.then92, label %if.else114

if.then92:                                        ; preds = %if.else89
  %82 = load i32, i32* @pred_SAD_space, align 4
  %cmp93 = icmp ne i32 %82, 0
  br i1 %cmp93, label %if.then95, label %if.else112

if.then95:                                        ; preds = %if.then92
  %83 = load i32, i32* %blocktype.addr, align 4
  %idxprom96 = sext i32 %83 to i64
  %arrayidx97 = getelementptr inbounds [8 x float], [8 x float]* @Bsize, i64 0, i64 %idxprom96
  %84 = load float, float* %arrayidx97, align 4
  %85 = load i32, i32* @pred_SAD_space, align 4
  %86 = load i32, i32* @pred_SAD_space, align 4
  %mul98 = mul nsw i32 %85, %86
  %conv99 = sitofp i32 %mul98 to float
  %div100 = fdiv float %84, %conv99
  %87 = load i32, i32* %blocktype.addr, align 4
  %idxprom101 = sext i32 %87 to i64
  %arrayidx102 = getelementptr inbounds [8 x float], [8 x float]* @AlphaSec, i64 0, i64 %idxprom101
  %88 = load float, float* %arrayidx102, align 4
  %sub103 = fsub float %div100, %88
  store float %sub103, float* %betaSec, align 4
  %89 = load i32, i32* %blocktype.addr, align 4
  %idxprom104 = sext i32 %89 to i64
  %arrayidx105 = getelementptr inbounds [8 x float], [8 x float]* @Bsize, i64 0, i64 %idxprom104
  %90 = load float, float* %arrayidx105, align 4
  %91 = load i32, i32* @pred_SAD_space, align 4
  %92 = load i32, i32* @pred_SAD_space, align 4
  %mul106 = mul nsw i32 %91, %92
  %conv107 = sitofp i32 %mul106 to float
  %div108 = fdiv float %90, %conv107
  %93 = load i32, i32* %blocktype.addr, align 4
  %idxprom109 = sext i32 %93 to i64
  %arrayidx110 = getelementptr inbounds [8 x float], [8 x float]* @AlphaThird, i64 0, i64 %idxprom109
  %94 = load float, float* %arrayidx110, align 4
  %sub111 = fsub float %div108, %94
  store float %sub111, float* %betaThird, align 4
  br label %if.end113

if.else112:                                       ; preds = %if.then92
  store float 0.000000e+00, float* %betaSec, align 4
  store float 0.000000e+00, float* %betaThird, align 4
  br label %if.end113

if.end113:                                        ; preds = %if.else112, %if.then95
  br label %if.end136

if.else114:                                       ; preds = %if.else89
  %95 = load i32, i32* @pred_SAD_uplayer, align 4
  %cmp115 = icmp ne i32 %95, 0
  br i1 %cmp115, label %if.then117, label %if.else134

if.then117:                                       ; preds = %if.else114
  %96 = load i32, i32* %blocktype.addr, align 4
  %idxprom118 = sext i32 %96 to i64
  %arrayidx119 = getelementptr inbounds [8 x float], [8 x float]* @Bsize, i64 0, i64 %idxprom118
  %97 = load float, float* %arrayidx119, align 4
  %98 = load i32, i32* @pred_SAD_uplayer, align 4
  %99 = load i32, i32* @pred_SAD_uplayer, align 4
  %mul120 = mul nsw i32 %98, %99
  %conv121 = sitofp i32 %mul120 to float
  %div122 = fdiv float %97, %conv121
  %100 = load i32, i32* %blocktype.addr, align 4
  %idxprom123 = sext i32 %100 to i64
  %arrayidx124 = getelementptr inbounds [8 x float], [8 x float]* @AlphaSec, i64 0, i64 %idxprom123
  %101 = load float, float* %arrayidx124, align 4
  %sub125 = fsub float %div122, %101
  store float %sub125, float* %betaSec, align 4
  %102 = load i32, i32* %blocktype.addr, align 4
  %idxprom126 = sext i32 %102 to i64
  %arrayidx127 = getelementptr inbounds [8 x float], [8 x float]* @Bsize, i64 0, i64 %idxprom126
  %103 = load float, float* %arrayidx127, align 4
  %104 = load i32, i32* @pred_SAD_uplayer, align 4
  %105 = load i32, i32* @pred_SAD_uplayer, align 4
  %mul128 = mul nsw i32 %104, %105
  %conv129 = sitofp i32 %mul128 to float
  %div130 = fdiv float %103, %conv129
  %106 = load i32, i32* %blocktype.addr, align 4
  %idxprom131 = sext i32 %106 to i64
  %arrayidx132 = getelementptr inbounds [8 x float], [8 x float]* @AlphaThird, i64 0, i64 %idxprom131
  %107 = load float, float* %arrayidx132, align 4
  %sub133 = fsub float %div130, %107
  store float %sub133, float* %betaThird, align 4
  br label %if.end135

if.else134:                                       ; preds = %if.else114
  store float 0.000000e+00, float* %betaSec, align 4
  store float 0.000000e+00, float* %betaThird, align 4
  br label %if.end135

if.end135:                                        ; preds = %if.else134, %if.then117
  br label %if.end136

if.end136:                                        ; preds = %if.end135, %if.end113
  br label %if.end137

if.end137:                                        ; preds = %if.end136, %if.end88
  %108 = load i32, i32* %center_x, align 4
  store i32 %108, i32* %cand_x, align 4
  %109 = load i32, i32* %center_y, align 4
  store i32 %109, i32* %cand_y, align 4
  %110 = load i32, i32* %lambda_factor, align 4
  %111 = load i32*, i32** @mvbits, align 8
  %112 = load i32, i32* %cand_x, align 4
  %113 = load i32, i32* %mvshift, align 4
  %shl138 = shl i32 %112, %113
  %114 = load i32, i32* %pred_x, align 4
  %sub139 = sub nsw i32 %shl138, %114
  %idxprom140 = sext i32 %sub139 to i64
  %arrayidx141 = getelementptr inbounds i32, i32* %111, i64 %idxprom140
  %115 = load i32, i32* %arrayidx141, align 4
  %116 = load i32*, i32** @mvbits, align 8
  %117 = load i32, i32* %cand_y, align 4
  %118 = load i32, i32* %mvshift, align 4
  %shl142 = shl i32 %117, %118
  %119 = load i32, i32* %pred_y, align 4
  %sub143 = sub nsw i32 %shl142, %119
  %idxprom144 = sext i32 %sub143 to i64
  %arrayidx145 = getelementptr inbounds i32, i32* %116, i64 %idxprom144
  %120 = load i32, i32* %arrayidx145, align 4
  %add146 = add nsw i32 %115, %120
  %mul147 = mul nsw i32 %110, %add146
  %shr148 = ashr i32 %mul147, 16
  store i32 %shr148, i32* %mcost, align 4
  %121 = load i16*, i16** %ref_pic, align 8
  %122 = load i16**, i16*** %orig_pic.addr, align 8
  %123 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %124 = load i32, i32* %blocksize_y, align 4
  %125 = load i32, i32* %blocksize_x, align 4
  %126 = load i32, i32* %blocksize_x4, align 4
  %127 = load i32, i32* %mcost, align 4
  %128 = load i32, i32* %min_mcost.addr, align 4
  %129 = load i32, i32* %cand_x, align 4
  %130 = load i32, i32* %cand_y, align 4
  %call = call i32 @PartCalMad(i16* %121, i16** %122, i16* (i32, i16*, i32, i32, i32, i32)* %123, i32 %124, i32 %125, i32 %126, i32 %127, i32 %128, i32 %129, i32 %130)
  store i32 %call, i32* %mcost, align 4
  %131 = load i32, i32* %mcost, align 4
  %132 = load i32**, i32*** @McostState, align 8
  %133 = load i32, i32* %search_range.addr, align 4
  %idxprom149 = sext i32 %133 to i64
  %arrayidx150 = getelementptr inbounds i32*, i32** %132, i64 %idxprom149
  %134 = load i32*, i32** %arrayidx150, align 8
  %135 = load i32, i32* %search_range.addr, align 4
  %idxprom151 = sext i32 %135 to i64
  %arrayidx152 = getelementptr inbounds i32, i32* %134, i64 %idxprom151
  store i32 %131, i32* %arrayidx152, align 4
  %136 = load i32, i32* %mcost, align 4
  %137 = load i32, i32* %min_mcost.addr, align 4
  %cmp153 = icmp slt i32 %136, %137
  br i1 %cmp153, label %if.then155, label %if.end156

if.then155:                                       ; preds = %if.end137
  %138 = load i32, i32* %mcost, align 4
  store i32 %138, i32* %min_mcost.addr, align 4
  %139 = load i32, i32* %cand_x, align 4
  store i32 %139, i32* %best_x, align 4
  %140 = load i32, i32* %cand_y, align 4
  store i32 %140, i32* %best_y, align 4
  br label %if.end156

if.end156:                                        ; preds = %if.then155, %if.end137
  %141 = load i32, i32* %best_x, align 4
  store i32 %141, i32* %iXMinNow, align 4
  %142 = load i32, i32* %best_y, align 4
  store i32 %142, i32* %iYMinNow, align 4
  store i32 0, i32* %m, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end156
  %143 = load i32, i32* %m, align 4
  %cmp157 = icmp slt i32 %143, 4
  br i1 %cmp157, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %144 = load i32, i32* %iXMinNow, align 4
  %145 = load i32, i32* %m, align 4
  %idxprom159 = sext i32 %145 to i64
  %arrayidx160 = getelementptr inbounds [4 x i32], [4 x i32]* @FastIntegerPelBlockMotionSearch.Diamond_x, i64 0, i64 %idxprom159
  %146 = load i32, i32* %arrayidx160, align 4
  %add161 = add nsw i32 %144, %146
  store i32 %add161, i32* %cand_x, align 4
  %147 = load i32, i32* %iYMinNow, align 4
  %148 = load i32, i32* %m, align 4
  %idxprom162 = sext i32 %148 to i64
  %arrayidx163 = getelementptr inbounds [4 x i32], [4 x i32]* @FastIntegerPelBlockMotionSearch.Diamond_y, i64 0, i64 %idxprom162
  %149 = load i32, i32* %arrayidx163, align 4
  %add164 = add nsw i32 %147, %149
  store i32 %add164, i32* %cand_y, align 4
  %150 = load i32, i32* %cand_x, align 4
  %151 = load i32, i32* %center_x, align 4
  %sub165 = sub nsw i32 %150, %151
  %call166 = call i32 @abs(i32 %sub165) #6
  %152 = load i32, i32* %search_range.addr, align 4
  %cmp167 = icmp sle i32 %call166, %152
  br i1 %cmp167, label %land.lhs.true169, label %if.end210

land.lhs.true169:                                 ; preds = %for.body
  %153 = load i32, i32* %cand_y, align 4
  %154 = load i32, i32* %center_y, align 4
  %sub170 = sub nsw i32 %153, %154
  %call171 = call i32 @abs(i32 %sub170) #6
  %155 = load i32, i32* %search_range.addr, align 4
  %cmp172 = icmp sle i32 %call171, %155
  br i1 %cmp172, label %if.then174, label %if.end210

if.then174:                                       ; preds = %land.lhs.true169
  %156 = load i32**, i32*** @McostState, align 8
  %157 = load i32, i32* %cand_y, align 4
  %158 = load i32, i32* %center_y, align 4
  %sub175 = sub nsw i32 %157, %158
  %159 = load i32, i32* %search_range.addr, align 4
  %add176 = add nsw i32 %sub175, %159
  %idxprom177 = sext i32 %add176 to i64
  %arrayidx178 = getelementptr inbounds i32*, i32** %156, i64 %idxprom177
  %160 = load i32*, i32** %arrayidx178, align 8
  %161 = load i32, i32* %cand_x, align 4
  %162 = load i32, i32* %center_x, align 4
  %sub179 = sub nsw i32 %161, %162
  %163 = load i32, i32* %search_range.addr, align 4
  %add180 = add nsw i32 %sub179, %163
  %idxprom181 = sext i32 %add180 to i64
  %arrayidx182 = getelementptr inbounds i32, i32* %160, i64 %idxprom181
  %164 = load i32, i32* %arrayidx182, align 4
  %tobool183 = icmp ne i32 %164, 0
  br i1 %tobool183, label %if.end209, label %if.then184

if.then184:                                       ; preds = %if.then174
  %165 = load i32, i32* %lambda_factor, align 4
  %166 = load i32*, i32** @mvbits, align 8
  %167 = load i32, i32* %cand_x, align 4
  %168 = load i32, i32* %mvshift, align 4
  %shl185 = shl i32 %167, %168
  %169 = load i32, i32* %pred_x, align 4
  %sub186 = sub nsw i32 %shl185, %169
  %idxprom187 = sext i32 %sub186 to i64
  %arrayidx188 = getelementptr inbounds i32, i32* %166, i64 %idxprom187
  %170 = load i32, i32* %arrayidx188, align 4
  %171 = load i32*, i32** @mvbits, align 8
  %172 = load i32, i32* %cand_y, align 4
  %173 = load i32, i32* %mvshift, align 4
  %shl189 = shl i32 %172, %173
  %174 = load i32, i32* %pred_y, align 4
  %sub190 = sub nsw i32 %shl189, %174
  %idxprom191 = sext i32 %sub190 to i64
  %arrayidx192 = getelementptr inbounds i32, i32* %171, i64 %idxprom191
  %175 = load i32, i32* %arrayidx192, align 4
  %add193 = add nsw i32 %170, %175
  %mul194 = mul nsw i32 %165, %add193
  %shr195 = ashr i32 %mul194, 16
  store i32 %shr195, i32* %mcost, align 4
  %176 = load i16*, i16** %ref_pic, align 8
  %177 = load i16**, i16*** %orig_pic.addr, align 8
  %178 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %179 = load i32, i32* %blocksize_y, align 4
  %180 = load i32, i32* %blocksize_x, align 4
  %181 = load i32, i32* %blocksize_x4, align 4
  %182 = load i32, i32* %mcost, align 4
  %183 = load i32, i32* %min_mcost.addr, align 4
  %184 = load i32, i32* %cand_x, align 4
  %185 = load i32, i32* %cand_y, align 4
  %call196 = call i32 @PartCalMad(i16* %176, i16** %177, i16* (i32, i16*, i32, i32, i32, i32)* %178, i32 %179, i32 %180, i32 %181, i32 %182, i32 %183, i32 %184, i32 %185)
  store i32 %call196, i32* %mcost, align 4
  %186 = load i32, i32* %mcost, align 4
  %187 = load i32**, i32*** @McostState, align 8
  %188 = load i32, i32* %cand_y, align 4
  %189 = load i32, i32* %center_y, align 4
  %sub197 = sub nsw i32 %188, %189
  %190 = load i32, i32* %search_range.addr, align 4
  %add198 = add nsw i32 %sub197, %190
  %idxprom199 = sext i32 %add198 to i64
  %arrayidx200 = getelementptr inbounds i32*, i32** %187, i64 %idxprom199
  %191 = load i32*, i32** %arrayidx200, align 8
  %192 = load i32, i32* %cand_x, align 4
  %193 = load i32, i32* %center_x, align 4
  %sub201 = sub nsw i32 %192, %193
  %194 = load i32, i32* %search_range.addr, align 4
  %add202 = add nsw i32 %sub201, %194
  %idxprom203 = sext i32 %add202 to i64
  %arrayidx204 = getelementptr inbounds i32, i32* %191, i64 %idxprom203
  store i32 %186, i32* %arrayidx204, align 4
  %195 = load i32, i32* %mcost, align 4
  %196 = load i32, i32* %min_mcost.addr, align 4
  %cmp205 = icmp slt i32 %195, %196
  br i1 %cmp205, label %if.then207, label %if.end208

if.then207:                                       ; preds = %if.then184
  %197 = load i32, i32* %cand_x, align 4
  store i32 %197, i32* %best_x, align 4
  %198 = load i32, i32* %cand_y, align 4
  store i32 %198, i32* %best_y, align 4
  %199 = load i32, i32* %mcost, align 4
  store i32 %199, i32* %min_mcost.addr, align 4
  br label %if.end208

if.end208:                                        ; preds = %if.then207, %if.then184
  br label %if.end209

if.end209:                                        ; preds = %if.end208, %if.then174
  br label %if.end210

if.end210:                                        ; preds = %if.end209, %land.lhs.true169, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end210
  %200 = load i32, i32* %m, align 4
  %inc = add nsw i32 %200, 1
  store i32 %inc, i32* %m, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %201 = load i32, i32* %center_x, align 4
  %202 = load i32, i32* %pic_pix_x.addr, align 4
  %cmp211 = icmp ne i32 %201, %202
  br i1 %cmp211, label %if.then215, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.end
  %203 = load i32, i32* %center_y, align 4
  %204 = load i32, i32* %pic_pix_y.addr, align 4
  %cmp213 = icmp ne i32 %203, %204
  br i1 %cmp213, label %if.then215, label %if.end321

if.then215:                                       ; preds = %lor.lhs.false, %for.end
  %205 = load i32, i32* %pic_pix_x.addr, align 4
  store i32 %205, i32* %cand_x, align 4
  %206 = load i32, i32* %pic_pix_y.addr, align 4
  store i32 %206, i32* %cand_y, align 4
  %207 = load i32, i32* %cand_x, align 4
  %208 = load i32, i32* %center_x, align 4
  %sub216 = sub nsw i32 %207, %208
  %call217 = call i32 @abs(i32 %sub216) #6
  %209 = load i32, i32* %search_range.addr, align 4
  %cmp218 = icmp sle i32 %call217, %209
  br i1 %cmp218, label %land.lhs.true220, label %if.end261

land.lhs.true220:                                 ; preds = %if.then215
  %210 = load i32, i32* %cand_y, align 4
  %211 = load i32, i32* %center_y, align 4
  %sub221 = sub nsw i32 %210, %211
  %call222 = call i32 @abs(i32 %sub221) #6
  %212 = load i32, i32* %search_range.addr, align 4
  %cmp223 = icmp sle i32 %call222, %212
  br i1 %cmp223, label %if.then225, label %if.end261

if.then225:                                       ; preds = %land.lhs.true220
  %213 = load i32**, i32*** @McostState, align 8
  %214 = load i32, i32* %cand_y, align 4
  %215 = load i32, i32* %center_y, align 4
  %sub226 = sub nsw i32 %214, %215
  %216 = load i32, i32* %search_range.addr, align 4
  %add227 = add nsw i32 %sub226, %216
  %idxprom228 = sext i32 %add227 to i64
  %arrayidx229 = getelementptr inbounds i32*, i32** %213, i64 %idxprom228
  %217 = load i32*, i32** %arrayidx229, align 8
  %218 = load i32, i32* %cand_x, align 4
  %219 = load i32, i32* %center_x, align 4
  %sub230 = sub nsw i32 %218, %219
  %220 = load i32, i32* %search_range.addr, align 4
  %add231 = add nsw i32 %sub230, %220
  %idxprom232 = sext i32 %add231 to i64
  %arrayidx233 = getelementptr inbounds i32, i32* %217, i64 %idxprom232
  %221 = load i32, i32* %arrayidx233, align 4
  %tobool234 = icmp ne i32 %221, 0
  br i1 %tobool234, label %if.end260, label %if.then235

if.then235:                                       ; preds = %if.then225
  %222 = load i32, i32* %lambda_factor, align 4
  %223 = load i32*, i32** @mvbits, align 8
  %224 = load i32, i32* %cand_x, align 4
  %225 = load i32, i32* %mvshift, align 4
  %shl236 = shl i32 %224, %225
  %226 = load i32, i32* %pred_x, align 4
  %sub237 = sub nsw i32 %shl236, %226
  %idxprom238 = sext i32 %sub237 to i64
  %arrayidx239 = getelementptr inbounds i32, i32* %223, i64 %idxprom238
  %227 = load i32, i32* %arrayidx239, align 4
  %228 = load i32*, i32** @mvbits, align 8
  %229 = load i32, i32* %cand_y, align 4
  %230 = load i32, i32* %mvshift, align 4
  %shl240 = shl i32 %229, %230
  %231 = load i32, i32* %pred_y, align 4
  %sub241 = sub nsw i32 %shl240, %231
  %idxprom242 = sext i32 %sub241 to i64
  %arrayidx243 = getelementptr inbounds i32, i32* %228, i64 %idxprom242
  %232 = load i32, i32* %arrayidx243, align 4
  %add244 = add nsw i32 %227, %232
  %mul245 = mul nsw i32 %222, %add244
  %shr246 = ashr i32 %mul245, 16
  store i32 %shr246, i32* %mcost, align 4
  %233 = load i16*, i16** %ref_pic, align 8
  %234 = load i16**, i16*** %orig_pic.addr, align 8
  %235 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %236 = load i32, i32* %blocksize_y, align 4
  %237 = load i32, i32* %blocksize_x, align 4
  %238 = load i32, i32* %blocksize_x4, align 4
  %239 = load i32, i32* %mcost, align 4
  %240 = load i32, i32* %min_mcost.addr, align 4
  %241 = load i32, i32* %cand_x, align 4
  %242 = load i32, i32* %cand_y, align 4
  %call247 = call i32 @PartCalMad(i16* %233, i16** %234, i16* (i32, i16*, i32, i32, i32, i32)* %235, i32 %236, i32 %237, i32 %238, i32 %239, i32 %240, i32 %241, i32 %242)
  store i32 %call247, i32* %mcost, align 4
  %243 = load i32, i32* %mcost, align 4
  %244 = load i32**, i32*** @McostState, align 8
  %245 = load i32, i32* %cand_y, align 4
  %246 = load i32, i32* %center_y, align 4
  %sub248 = sub nsw i32 %245, %246
  %247 = load i32, i32* %search_range.addr, align 4
  %add249 = add nsw i32 %sub248, %247
  %idxprom250 = sext i32 %add249 to i64
  %arrayidx251 = getelementptr inbounds i32*, i32** %244, i64 %idxprom250
  %248 = load i32*, i32** %arrayidx251, align 8
  %249 = load i32, i32* %cand_x, align 4
  %250 = load i32, i32* %center_x, align 4
  %sub252 = sub nsw i32 %249, %250
  %251 = load i32, i32* %search_range.addr, align 4
  %add253 = add nsw i32 %sub252, %251
  %idxprom254 = sext i32 %add253 to i64
  %arrayidx255 = getelementptr inbounds i32, i32* %248, i64 %idxprom254
  store i32 %243, i32* %arrayidx255, align 4
  %252 = load i32, i32* %mcost, align 4
  %253 = load i32, i32* %min_mcost.addr, align 4
  %cmp256 = icmp slt i32 %252, %253
  br i1 %cmp256, label %if.then258, label %if.end259

if.then258:                                       ; preds = %if.then235
  %254 = load i32, i32* %cand_x, align 4
  store i32 %254, i32* %best_x, align 4
  %255 = load i32, i32* %cand_y, align 4
  store i32 %255, i32* %best_y, align 4
  %256 = load i32, i32* %mcost, align 4
  store i32 %256, i32* %min_mcost.addr, align 4
  br label %if.end259

if.end259:                                        ; preds = %if.then258, %if.then235
  br label %if.end260

if.end260:                                        ; preds = %if.end259, %if.then225
  br label %if.end261

if.end261:                                        ; preds = %if.end260, %land.lhs.true220, %if.then215
  %257 = load i32, i32* %best_x, align 4
  store i32 %257, i32* %iXMinNow, align 4
  %258 = load i32, i32* %best_y, align 4
  store i32 %258, i32* %iYMinNow, align 4
  store i32 0, i32* %m, align 4
  br label %for.cond262

for.cond262:                                      ; preds = %for.inc318, %if.end261
  %259 = load i32, i32* %m, align 4
  %cmp263 = icmp slt i32 %259, 4
  br i1 %cmp263, label %for.body265, label %for.end320

for.body265:                                      ; preds = %for.cond262
  %260 = load i32, i32* %iXMinNow, align 4
  %261 = load i32, i32* %m, align 4
  %idxprom266 = sext i32 %261 to i64
  %arrayidx267 = getelementptr inbounds [4 x i32], [4 x i32]* @FastIntegerPelBlockMotionSearch.Diamond_x, i64 0, i64 %idxprom266
  %262 = load i32, i32* %arrayidx267, align 4
  %add268 = add nsw i32 %260, %262
  store i32 %add268, i32* %cand_x, align 4
  %263 = load i32, i32* %iYMinNow, align 4
  %264 = load i32, i32* %m, align 4
  %idxprom269 = sext i32 %264 to i64
  %arrayidx270 = getelementptr inbounds [4 x i32], [4 x i32]* @FastIntegerPelBlockMotionSearch.Diamond_y, i64 0, i64 %idxprom269
  %265 = load i32, i32* %arrayidx270, align 4
  %add271 = add nsw i32 %263, %265
  store i32 %add271, i32* %cand_y, align 4
  %266 = load i32, i32* %cand_x, align 4
  %267 = load i32, i32* %center_x, align 4
  %sub272 = sub nsw i32 %266, %267
  %call273 = call i32 @abs(i32 %sub272) #6
  %268 = load i32, i32* %search_range.addr, align 4
  %cmp274 = icmp sle i32 %call273, %268
  br i1 %cmp274, label %land.lhs.true276, label %if.end317

land.lhs.true276:                                 ; preds = %for.body265
  %269 = load i32, i32* %cand_y, align 4
  %270 = load i32, i32* %center_y, align 4
  %sub277 = sub nsw i32 %269, %270
  %call278 = call i32 @abs(i32 %sub277) #6
  %271 = load i32, i32* %search_range.addr, align 4
  %cmp279 = icmp sle i32 %call278, %271
  br i1 %cmp279, label %if.then281, label %if.end317

if.then281:                                       ; preds = %land.lhs.true276
  %272 = load i32**, i32*** @McostState, align 8
  %273 = load i32, i32* %cand_y, align 4
  %274 = load i32, i32* %center_y, align 4
  %sub282 = sub nsw i32 %273, %274
  %275 = load i32, i32* %search_range.addr, align 4
  %add283 = add nsw i32 %sub282, %275
  %idxprom284 = sext i32 %add283 to i64
  %arrayidx285 = getelementptr inbounds i32*, i32** %272, i64 %idxprom284
  %276 = load i32*, i32** %arrayidx285, align 8
  %277 = load i32, i32* %cand_x, align 4
  %278 = load i32, i32* %center_x, align 4
  %sub286 = sub nsw i32 %277, %278
  %279 = load i32, i32* %search_range.addr, align 4
  %add287 = add nsw i32 %sub286, %279
  %idxprom288 = sext i32 %add287 to i64
  %arrayidx289 = getelementptr inbounds i32, i32* %276, i64 %idxprom288
  %280 = load i32, i32* %arrayidx289, align 4
  %tobool290 = icmp ne i32 %280, 0
  br i1 %tobool290, label %if.end316, label %if.then291

if.then291:                                       ; preds = %if.then281
  %281 = load i32, i32* %lambda_factor, align 4
  %282 = load i32*, i32** @mvbits, align 8
  %283 = load i32, i32* %cand_x, align 4
  %284 = load i32, i32* %mvshift, align 4
  %shl292 = shl i32 %283, %284
  %285 = load i32, i32* %pred_x, align 4
  %sub293 = sub nsw i32 %shl292, %285
  %idxprom294 = sext i32 %sub293 to i64
  %arrayidx295 = getelementptr inbounds i32, i32* %282, i64 %idxprom294
  %286 = load i32, i32* %arrayidx295, align 4
  %287 = load i32*, i32** @mvbits, align 8
  %288 = load i32, i32* %cand_y, align 4
  %289 = load i32, i32* %mvshift, align 4
  %shl296 = shl i32 %288, %289
  %290 = load i32, i32* %pred_y, align 4
  %sub297 = sub nsw i32 %shl296, %290
  %idxprom298 = sext i32 %sub297 to i64
  %arrayidx299 = getelementptr inbounds i32, i32* %287, i64 %idxprom298
  %291 = load i32, i32* %arrayidx299, align 4
  %add300 = add nsw i32 %286, %291
  %mul301 = mul nsw i32 %281, %add300
  %shr302 = ashr i32 %mul301, 16
  store i32 %shr302, i32* %mcost, align 4
  %292 = load i16*, i16** %ref_pic, align 8
  %293 = load i16**, i16*** %orig_pic.addr, align 8
  %294 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %295 = load i32, i32* %blocksize_y, align 4
  %296 = load i32, i32* %blocksize_x, align 4
  %297 = load i32, i32* %blocksize_x4, align 4
  %298 = load i32, i32* %mcost, align 4
  %299 = load i32, i32* %min_mcost.addr, align 4
  %300 = load i32, i32* %cand_x, align 4
  %301 = load i32, i32* %cand_y, align 4
  %call303 = call i32 @PartCalMad(i16* %292, i16** %293, i16* (i32, i16*, i32, i32, i32, i32)* %294, i32 %295, i32 %296, i32 %297, i32 %298, i32 %299, i32 %300, i32 %301)
  store i32 %call303, i32* %mcost, align 4
  %302 = load i32, i32* %mcost, align 4
  %303 = load i32**, i32*** @McostState, align 8
  %304 = load i32, i32* %cand_y, align 4
  %305 = load i32, i32* %center_y, align 4
  %sub304 = sub nsw i32 %304, %305
  %306 = load i32, i32* %search_range.addr, align 4
  %add305 = add nsw i32 %sub304, %306
  %idxprom306 = sext i32 %add305 to i64
  %arrayidx307 = getelementptr inbounds i32*, i32** %303, i64 %idxprom306
  %307 = load i32*, i32** %arrayidx307, align 8
  %308 = load i32, i32* %cand_x, align 4
  %309 = load i32, i32* %center_x, align 4
  %sub308 = sub nsw i32 %308, %309
  %310 = load i32, i32* %search_range.addr, align 4
  %add309 = add nsw i32 %sub308, %310
  %idxprom310 = sext i32 %add309 to i64
  %arrayidx311 = getelementptr inbounds i32, i32* %307, i64 %idxprom310
  store i32 %302, i32* %arrayidx311, align 4
  %311 = load i32, i32* %mcost, align 4
  %312 = load i32, i32* %min_mcost.addr, align 4
  %cmp312 = icmp slt i32 %311, %312
  br i1 %cmp312, label %if.then314, label %if.end315

if.then314:                                       ; preds = %if.then291
  %313 = load i32, i32* %cand_x, align 4
  store i32 %313, i32* %best_x, align 4
  %314 = load i32, i32* %cand_y, align 4
  store i32 %314, i32* %best_y, align 4
  %315 = load i32, i32* %mcost, align 4
  store i32 %315, i32* %min_mcost.addr, align 4
  br label %if.end315

if.end315:                                        ; preds = %if.then314, %if.then291
  br label %if.end316

if.end316:                                        ; preds = %if.end315, %if.then281
  br label %if.end317

if.end317:                                        ; preds = %if.end316, %land.lhs.true276, %for.body265
  br label %for.inc318

for.inc318:                                       ; preds = %if.end317
  %316 = load i32, i32* %m, align 4
  %inc319 = add nsw i32 %316, 1
  store i32 %inc319, i32* %m, align 4
  br label %for.cond262

for.end320:                                       ; preds = %for.cond262
  br label %if.end321

if.end321:                                        ; preds = %for.end320, %lor.lhs.false
  %317 = load i32, i32* %blocktype.addr, align 4
  %cmp322 = icmp sgt i32 %317, 1
  br i1 %cmp322, label %if.then324, label %if.end392

if.then324:                                       ; preds = %if.end321
  %318 = load i32, i32* %pic_pix_x.addr, align 4
  %319 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @pred_MV_uplayer, i64 0, i64 0), align 4
  %div325 = sdiv i32 %319, 4
  %add326 = add nsw i32 %318, %div325
  store i32 %add326, i32* %cand_x, align 4
  %320 = load i32, i32* %pic_pix_y.addr, align 4
  %321 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @pred_MV_uplayer, i64 0, i64 1), align 4
  %div327 = sdiv i32 %321, 4
  %add328 = add nsw i32 %320, %div327
  store i32 %add328, i32* %cand_y, align 4
  %322 = load i32, i32* %cand_x, align 4
  %323 = load i32, i32* %center_x, align 4
  %sub329 = sub nsw i32 %322, %323
  %call330 = call i32 @abs(i32 %sub329) #6
  %324 = load i32, i32* %search_range.addr, align 4
  %cmp331 = icmp sle i32 %call330, %324
  br i1 %cmp331, label %land.lhs.true333, label %if.end374

land.lhs.true333:                                 ; preds = %if.then324
  %325 = load i32, i32* %cand_y, align 4
  %326 = load i32, i32* %center_y, align 4
  %sub334 = sub nsw i32 %325, %326
  %call335 = call i32 @abs(i32 %sub334) #6
  %327 = load i32, i32* %search_range.addr, align 4
  %cmp336 = icmp sle i32 %call335, %327
  br i1 %cmp336, label %if.then338, label %if.end374

if.then338:                                       ; preds = %land.lhs.true333
  %328 = load i32**, i32*** @McostState, align 8
  %329 = load i32, i32* %cand_y, align 4
  %330 = load i32, i32* %center_y, align 4
  %sub339 = sub nsw i32 %329, %330
  %331 = load i32, i32* %search_range.addr, align 4
  %add340 = add nsw i32 %sub339, %331
  %idxprom341 = sext i32 %add340 to i64
  %arrayidx342 = getelementptr inbounds i32*, i32** %328, i64 %idxprom341
  %332 = load i32*, i32** %arrayidx342, align 8
  %333 = load i32, i32* %cand_x, align 4
  %334 = load i32, i32* %center_x, align 4
  %sub343 = sub nsw i32 %333, %334
  %335 = load i32, i32* %search_range.addr, align 4
  %add344 = add nsw i32 %sub343, %335
  %idxprom345 = sext i32 %add344 to i64
  %arrayidx346 = getelementptr inbounds i32, i32* %332, i64 %idxprom345
  %336 = load i32, i32* %arrayidx346, align 4
  %tobool347 = icmp ne i32 %336, 0
  br i1 %tobool347, label %if.end373, label %if.then348

if.then348:                                       ; preds = %if.then338
  %337 = load i32, i32* %lambda_factor, align 4
  %338 = load i32*, i32** @mvbits, align 8
  %339 = load i32, i32* %cand_x, align 4
  %340 = load i32, i32* %mvshift, align 4
  %shl349 = shl i32 %339, %340
  %341 = load i32, i32* %pred_x, align 4
  %sub350 = sub nsw i32 %shl349, %341
  %idxprom351 = sext i32 %sub350 to i64
  %arrayidx352 = getelementptr inbounds i32, i32* %338, i64 %idxprom351
  %342 = load i32, i32* %arrayidx352, align 4
  %343 = load i32*, i32** @mvbits, align 8
  %344 = load i32, i32* %cand_y, align 4
  %345 = load i32, i32* %mvshift, align 4
  %shl353 = shl i32 %344, %345
  %346 = load i32, i32* %pred_y, align 4
  %sub354 = sub nsw i32 %shl353, %346
  %idxprom355 = sext i32 %sub354 to i64
  %arrayidx356 = getelementptr inbounds i32, i32* %343, i64 %idxprom355
  %347 = load i32, i32* %arrayidx356, align 4
  %add357 = add nsw i32 %342, %347
  %mul358 = mul nsw i32 %337, %add357
  %shr359 = ashr i32 %mul358, 16
  store i32 %shr359, i32* %mcost, align 4
  %348 = load i16*, i16** %ref_pic, align 8
  %349 = load i16**, i16*** %orig_pic.addr, align 8
  %350 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %351 = load i32, i32* %blocksize_y, align 4
  %352 = load i32, i32* %blocksize_x, align 4
  %353 = load i32, i32* %blocksize_x4, align 4
  %354 = load i32, i32* %mcost, align 4
  %355 = load i32, i32* %min_mcost.addr, align 4
  %356 = load i32, i32* %cand_x, align 4
  %357 = load i32, i32* %cand_y, align 4
  %call360 = call i32 @PartCalMad(i16* %348, i16** %349, i16* (i32, i16*, i32, i32, i32, i32)* %350, i32 %351, i32 %352, i32 %353, i32 %354, i32 %355, i32 %356, i32 %357)
  store i32 %call360, i32* %mcost, align 4
  %358 = load i32, i32* %mcost, align 4
  %359 = load i32**, i32*** @McostState, align 8
  %360 = load i32, i32* %cand_y, align 4
  %361 = load i32, i32* %center_y, align 4
  %sub361 = sub nsw i32 %360, %361
  %362 = load i32, i32* %search_range.addr, align 4
  %add362 = add nsw i32 %sub361, %362
  %idxprom363 = sext i32 %add362 to i64
  %arrayidx364 = getelementptr inbounds i32*, i32** %359, i64 %idxprom363
  %363 = load i32*, i32** %arrayidx364, align 8
  %364 = load i32, i32* %cand_x, align 4
  %365 = load i32, i32* %center_x, align 4
  %sub365 = sub nsw i32 %364, %365
  %366 = load i32, i32* %search_range.addr, align 4
  %add366 = add nsw i32 %sub365, %366
  %idxprom367 = sext i32 %add366 to i64
  %arrayidx368 = getelementptr inbounds i32, i32* %363, i64 %idxprom367
  store i32 %358, i32* %arrayidx368, align 4
  %367 = load i32, i32* %mcost, align 4
  %368 = load i32, i32* %min_mcost.addr, align 4
  %cmp369 = icmp slt i32 %367, %368
  br i1 %cmp369, label %if.then371, label %if.end372

if.then371:                                       ; preds = %if.then348
  %369 = load i32, i32* %cand_x, align 4
  store i32 %369, i32* %best_x, align 4
  %370 = load i32, i32* %cand_y, align 4
  store i32 %370, i32* %best_y, align 4
  %371 = load i32, i32* %mcost, align 4
  store i32 %371, i32* %min_mcost.addr, align 4
  br label %if.end372

if.end372:                                        ; preds = %if.then371, %if.then348
  br label %if.end373

if.end373:                                        ; preds = %if.end372, %if.then338
  br label %if.end374

if.end374:                                        ; preds = %if.end373, %land.lhs.true333, %if.then324
  %372 = load i32, i32* %min_mcost.addr, align 4
  %373 = load i32, i32* @pred_SAD_uplayer, align 4
  %sub375 = sub nsw i32 %372, %373
  %conv376 = sitofp i32 %sub375 to float
  %374 = load i32, i32* @pred_SAD_uplayer, align 4
  %conv377 = sitofp i32 %374 to float
  %375 = load float, float* %betaThird, align 4
  %mul378 = fmul float %conv377, %375
  %cmp379 = fcmp olt float %conv376, %mul378
  br i1 %cmp379, label %if.then381, label %if.else382

if.then381:                                       ; preds = %if.end374
  br label %third_step

if.else382:                                       ; preds = %if.end374
  %376 = load i32, i32* %min_mcost.addr, align 4
  %377 = load i32, i32* @pred_SAD_uplayer, align 4
  %sub383 = sub nsw i32 %376, %377
  %conv384 = sitofp i32 %sub383 to float
  %378 = load i32, i32* @pred_SAD_uplayer, align 4
  %conv385 = sitofp i32 %378 to float
  %379 = load float, float* %betaSec, align 4
  %mul386 = fmul float %conv385, %379
  %cmp387 = fcmp olt float %conv384, %mul386
  br i1 %cmp387, label %if.then389, label %if.end390

if.then389:                                       ; preds = %if.else382
  br label %sec_step

if.end390:                                        ; preds = %if.else382
  br label %if.end391

if.end391:                                        ; preds = %if.end390
  br label %if.end392

if.end392:                                        ; preds = %if.end391, %if.end321
  %380 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %number = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %380, i32 0, i32 0
  %381 = load i32, i32* %number, align 8
  %382 = load i16, i16* %ref.addr, align 2
  %conv393 = sext i16 %382 to i32
  %add394 = add nsw i32 1, %conv393
  %cmp395 = icmp sgt i32 %381, %add394
  br i1 %cmp395, label %land.lhs.true397, label %lor.lhs.false401

land.lhs.true397:                                 ; preds = %if.end392
  %383 = load i16, i16* %ref.addr, align 2
  %conv398 = sext i16 %383 to i32
  %cmp399 = icmp ne i32 %conv398, -1
  br i1 %cmp399, label %if.then408, label %lor.lhs.false401

lor.lhs.false401:                                 ; preds = %land.lhs.true397, %if.end392
  %384 = load i32, i32* %list.addr, align 4
  %cmp402 = icmp eq i32 %384, 1
  br i1 %cmp402, label %land.lhs.true404, label %if.end459

land.lhs.true404:                                 ; preds = %lor.lhs.false401
  %385 = load i32, i32* @Bframe_ctr, align 4
  %386 = load i32, i32* %N_Bframe, align 4
  %rem405 = srem i32 %385, %386
  %cmp406 = icmp sgt i32 %rem405, 1
  br i1 %cmp406, label %if.then408, label %if.end459

if.then408:                                       ; preds = %land.lhs.true404, %land.lhs.true397
  %387 = load i32, i32* %pic_pix_x.addr, align 4
  %388 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @pred_MV_time, i64 0, i64 0), align 4
  %div409 = sdiv i32 %388, 4
  %add410 = add nsw i32 %387, %div409
  store i32 %add410, i32* %cand_x, align 4
  %389 = load i32, i32* %pic_pix_y.addr, align 4
  %390 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @pred_MV_time, i64 0, i64 1), align 4
  %div411 = sdiv i32 %390, 4
  %add412 = add nsw i32 %389, %div411
  store i32 %add412, i32* %cand_y, align 4
  %391 = load i32, i32* %cand_x, align 4
  %392 = load i32, i32* %center_x, align 4
  %sub413 = sub nsw i32 %391, %392
  %call414 = call i32 @abs(i32 %sub413) #6
  %393 = load i32, i32* %search_range.addr, align 4
  %cmp415 = icmp sle i32 %call414, %393
  br i1 %cmp415, label %land.lhs.true417, label %if.end458

land.lhs.true417:                                 ; preds = %if.then408
  %394 = load i32, i32* %cand_y, align 4
  %395 = load i32, i32* %center_y, align 4
  %sub418 = sub nsw i32 %394, %395
  %call419 = call i32 @abs(i32 %sub418) #6
  %396 = load i32, i32* %search_range.addr, align 4
  %cmp420 = icmp sle i32 %call419, %396
  br i1 %cmp420, label %if.then422, label %if.end458

if.then422:                                       ; preds = %land.lhs.true417
  %397 = load i32**, i32*** @McostState, align 8
  %398 = load i32, i32* %cand_y, align 4
  %399 = load i32, i32* %center_y, align 4
  %sub423 = sub nsw i32 %398, %399
  %400 = load i32, i32* %search_range.addr, align 4
  %add424 = add nsw i32 %sub423, %400
  %idxprom425 = sext i32 %add424 to i64
  %arrayidx426 = getelementptr inbounds i32*, i32** %397, i64 %idxprom425
  %401 = load i32*, i32** %arrayidx426, align 8
  %402 = load i32, i32* %cand_x, align 4
  %403 = load i32, i32* %center_x, align 4
  %sub427 = sub nsw i32 %402, %403
  %404 = load i32, i32* %search_range.addr, align 4
  %add428 = add nsw i32 %sub427, %404
  %idxprom429 = sext i32 %add428 to i64
  %arrayidx430 = getelementptr inbounds i32, i32* %401, i64 %idxprom429
  %405 = load i32, i32* %arrayidx430, align 4
  %tobool431 = icmp ne i32 %405, 0
  br i1 %tobool431, label %if.end457, label %if.then432

if.then432:                                       ; preds = %if.then422
  %406 = load i32, i32* %lambda_factor, align 4
  %407 = load i32*, i32** @mvbits, align 8
  %408 = load i32, i32* %cand_x, align 4
  %409 = load i32, i32* %mvshift, align 4
  %shl433 = shl i32 %408, %409
  %410 = load i32, i32* %pred_x, align 4
  %sub434 = sub nsw i32 %shl433, %410
  %idxprom435 = sext i32 %sub434 to i64
  %arrayidx436 = getelementptr inbounds i32, i32* %407, i64 %idxprom435
  %411 = load i32, i32* %arrayidx436, align 4
  %412 = load i32*, i32** @mvbits, align 8
  %413 = load i32, i32* %cand_y, align 4
  %414 = load i32, i32* %mvshift, align 4
  %shl437 = shl i32 %413, %414
  %415 = load i32, i32* %pred_y, align 4
  %sub438 = sub nsw i32 %shl437, %415
  %idxprom439 = sext i32 %sub438 to i64
  %arrayidx440 = getelementptr inbounds i32, i32* %412, i64 %idxprom439
  %416 = load i32, i32* %arrayidx440, align 4
  %add441 = add nsw i32 %411, %416
  %mul442 = mul nsw i32 %406, %add441
  %shr443 = ashr i32 %mul442, 16
  store i32 %shr443, i32* %mcost, align 4
  %417 = load i16*, i16** %ref_pic, align 8
  %418 = load i16**, i16*** %orig_pic.addr, align 8
  %419 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %420 = load i32, i32* %blocksize_y, align 4
  %421 = load i32, i32* %blocksize_x, align 4
  %422 = load i32, i32* %blocksize_x4, align 4
  %423 = load i32, i32* %mcost, align 4
  %424 = load i32, i32* %min_mcost.addr, align 4
  %425 = load i32, i32* %cand_x, align 4
  %426 = load i32, i32* %cand_y, align 4
  %call444 = call i32 @PartCalMad(i16* %417, i16** %418, i16* (i32, i16*, i32, i32, i32, i32)* %419, i32 %420, i32 %421, i32 %422, i32 %423, i32 %424, i32 %425, i32 %426)
  store i32 %call444, i32* %mcost, align 4
  %427 = load i32, i32* %mcost, align 4
  %428 = load i32**, i32*** @McostState, align 8
  %429 = load i32, i32* %cand_y, align 4
  %430 = load i32, i32* %center_y, align 4
  %sub445 = sub nsw i32 %429, %430
  %431 = load i32, i32* %search_range.addr, align 4
  %add446 = add nsw i32 %sub445, %431
  %idxprom447 = sext i32 %add446 to i64
  %arrayidx448 = getelementptr inbounds i32*, i32** %428, i64 %idxprom447
  %432 = load i32*, i32** %arrayidx448, align 8
  %433 = load i32, i32* %cand_x, align 4
  %434 = load i32, i32* %center_x, align 4
  %sub449 = sub nsw i32 %433, %434
  %435 = load i32, i32* %search_range.addr, align 4
  %add450 = add nsw i32 %sub449, %435
  %idxprom451 = sext i32 %add450 to i64
  %arrayidx452 = getelementptr inbounds i32, i32* %432, i64 %idxprom451
  store i32 %427, i32* %arrayidx452, align 4
  %436 = load i32, i32* %mcost, align 4
  %437 = load i32, i32* %min_mcost.addr, align 4
  %cmp453 = icmp slt i32 %436, %437
  br i1 %cmp453, label %if.then455, label %if.end456

if.then455:                                       ; preds = %if.then432
  %438 = load i32, i32* %cand_x, align 4
  store i32 %438, i32* %best_x, align 4
  %439 = load i32, i32* %cand_y, align 4
  store i32 %439, i32* %best_y, align 4
  %440 = load i32, i32* %mcost, align 4
  store i32 %440, i32* %min_mcost.addr, align 4
  br label %if.end456

if.end456:                                        ; preds = %if.then455, %if.then432
  br label %if.end457

if.end457:                                        ; preds = %if.end456, %if.then422
  br label %if.end458

if.end458:                                        ; preds = %if.end457, %land.lhs.true417, %if.then408
  br label %if.end459

if.end459:                                        ; preds = %if.end458, %land.lhs.true404, %lor.lhs.false401
  %441 = load %struct.InputParameters*, %struct.InputParameters** @input, align 8
  %PicInterlace = getelementptr inbounds %struct.InputParameters, %struct.InputParameters* %441, i32 0, i32 91
  %442 = load i32, i32* %PicInterlace, align 8
  %cmp460 = icmp eq i32 %442, 1
  br i1 %cmp460, label %if.then462, label %if.else535

if.then462:                                       ; preds = %if.end459
  %443 = load i32, i32* %list.addr, align 4
  %cmp463 = icmp eq i32 %443, 0
  br i1 %cmp463, label %land.lhs.true465, label %lor.lhs.false469

land.lhs.true465:                                 ; preds = %if.then462
  %444 = load i16, i16* %ref.addr, align 2
  %conv466 = sext i16 %444 to i32
  %cmp467 = icmp sgt i32 %conv466, 0
  br i1 %cmp467, label %if.then483, label %lor.lhs.false469

lor.lhs.false469:                                 ; preds = %land.lhs.true465, %if.then462
  %445 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %type = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %445, i32 0, i32 6
  %446 = load i32, i32* %type, align 8
  %cmp470 = icmp eq i32 %446, 1
  br i1 %cmp470, label %land.lhs.true472, label %if.end534

land.lhs.true472:                                 ; preds = %lor.lhs.false469
  %447 = load i32, i32* %list.addr, align 4
  %cmp473 = icmp eq i32 %447, 0
  br i1 %cmp473, label %land.lhs.true475, label %if.end534

land.lhs.true475:                                 ; preds = %land.lhs.true472
  %448 = load i16, i16* %ref.addr, align 2
  %conv476 = sext i16 %448 to i32
  %cmp477 = icmp eq i32 %conv476, 0
  br i1 %cmp477, label %if.then483, label %lor.lhs.false479

lor.lhs.false479:                                 ; preds = %land.lhs.true475
  %449 = load i16, i16* %ref.addr, align 2
  %conv480 = sext i16 %449 to i32
  %cmp481 = icmp eq i32 %conv480, 2
  br i1 %cmp481, label %if.then483, label %if.end534

if.then483:                                       ; preds = %lor.lhs.false479, %land.lhs.true475, %land.lhs.true465
  %450 = load i32, i32* %pic_pix_x.addr, align 4
  %451 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @pred_MV_ref, i64 0, i64 0), align 4
  %div484 = sdiv i32 %451, 4
  %add485 = add nsw i32 %450, %div484
  store i32 %add485, i32* %cand_x, align 4
  %452 = load i32, i32* %pic_pix_y.addr, align 4
  %453 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @pred_MV_ref, i64 0, i64 1), align 4
  %div486 = sdiv i32 %453, 4
  %add487 = add nsw i32 %452, %div486
  store i32 %add487, i32* %cand_y, align 4
  %454 = load i32, i32* %cand_x, align 4
  %455 = load i32, i32* %center_x, align 4
  %sub488 = sub nsw i32 %454, %455
  %call489 = call i32 @abs(i32 %sub488) #6
  %456 = load i32, i32* %search_range.addr, align 4
  %cmp490 = icmp sle i32 %call489, %456
  br i1 %cmp490, label %land.lhs.true492, label %if.end533

land.lhs.true492:                                 ; preds = %if.then483
  %457 = load i32, i32* %cand_y, align 4
  %458 = load i32, i32* %center_y, align 4
  %sub493 = sub nsw i32 %457, %458
  %call494 = call i32 @abs(i32 %sub493) #6
  %459 = load i32, i32* %search_range.addr, align 4
  %cmp495 = icmp sle i32 %call494, %459
  br i1 %cmp495, label %if.then497, label %if.end533

if.then497:                                       ; preds = %land.lhs.true492
  %460 = load i32**, i32*** @McostState, align 8
  %461 = load i32, i32* %cand_y, align 4
  %462 = load i32, i32* %center_y, align 4
  %sub498 = sub nsw i32 %461, %462
  %463 = load i32, i32* %search_range.addr, align 4
  %add499 = add nsw i32 %sub498, %463
  %idxprom500 = sext i32 %add499 to i64
  %arrayidx501 = getelementptr inbounds i32*, i32** %460, i64 %idxprom500
  %464 = load i32*, i32** %arrayidx501, align 8
  %465 = load i32, i32* %cand_x, align 4
  %466 = load i32, i32* %center_x, align 4
  %sub502 = sub nsw i32 %465, %466
  %467 = load i32, i32* %search_range.addr, align 4
  %add503 = add nsw i32 %sub502, %467
  %idxprom504 = sext i32 %add503 to i64
  %arrayidx505 = getelementptr inbounds i32, i32* %464, i64 %idxprom504
  %468 = load i32, i32* %arrayidx505, align 4
  %tobool506 = icmp ne i32 %468, 0
  br i1 %tobool506, label %if.end532, label %if.then507

if.then507:                                       ; preds = %if.then497
  %469 = load i32, i32* %lambda_factor, align 4
  %470 = load i32*, i32** @mvbits, align 8
  %471 = load i32, i32* %cand_x, align 4
  %472 = load i32, i32* %mvshift, align 4
  %shl508 = shl i32 %471, %472
  %473 = load i32, i32* %pred_x, align 4
  %sub509 = sub nsw i32 %shl508, %473
  %idxprom510 = sext i32 %sub509 to i64
  %arrayidx511 = getelementptr inbounds i32, i32* %470, i64 %idxprom510
  %474 = load i32, i32* %arrayidx511, align 4
  %475 = load i32*, i32** @mvbits, align 8
  %476 = load i32, i32* %cand_y, align 4
  %477 = load i32, i32* %mvshift, align 4
  %shl512 = shl i32 %476, %477
  %478 = load i32, i32* %pred_y, align 4
  %sub513 = sub nsw i32 %shl512, %478
  %idxprom514 = sext i32 %sub513 to i64
  %arrayidx515 = getelementptr inbounds i32, i32* %475, i64 %idxprom514
  %479 = load i32, i32* %arrayidx515, align 4
  %add516 = add nsw i32 %474, %479
  %mul517 = mul nsw i32 %469, %add516
  %shr518 = ashr i32 %mul517, 16
  store i32 %shr518, i32* %mcost, align 4
  %480 = load i16*, i16** %ref_pic, align 8
  %481 = load i16**, i16*** %orig_pic.addr, align 8
  %482 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %483 = load i32, i32* %blocksize_y, align 4
  %484 = load i32, i32* %blocksize_x, align 4
  %485 = load i32, i32* %blocksize_x4, align 4
  %486 = load i32, i32* %mcost, align 4
  %487 = load i32, i32* %min_mcost.addr, align 4
  %488 = load i32, i32* %cand_x, align 4
  %489 = load i32, i32* %cand_y, align 4
  %call519 = call i32 @PartCalMad(i16* %480, i16** %481, i16* (i32, i16*, i32, i32, i32, i32)* %482, i32 %483, i32 %484, i32 %485, i32 %486, i32 %487, i32 %488, i32 %489)
  store i32 %call519, i32* %mcost, align 4
  %490 = load i32, i32* %mcost, align 4
  %491 = load i32**, i32*** @McostState, align 8
  %492 = load i32, i32* %cand_y, align 4
  %493 = load i32, i32* %center_y, align 4
  %sub520 = sub nsw i32 %492, %493
  %494 = load i32, i32* %search_range.addr, align 4
  %add521 = add nsw i32 %sub520, %494
  %idxprom522 = sext i32 %add521 to i64
  %arrayidx523 = getelementptr inbounds i32*, i32** %491, i64 %idxprom522
  %495 = load i32*, i32** %arrayidx523, align 8
  %496 = load i32, i32* %cand_x, align 4
  %497 = load i32, i32* %center_x, align 4
  %sub524 = sub nsw i32 %496, %497
  %498 = load i32, i32* %search_range.addr, align 4
  %add525 = add nsw i32 %sub524, %498
  %idxprom526 = sext i32 %add525 to i64
  %arrayidx527 = getelementptr inbounds i32, i32* %495, i64 %idxprom526
  store i32 %490, i32* %arrayidx527, align 4
  %499 = load i32, i32* %mcost, align 4
  %500 = load i32, i32* %min_mcost.addr, align 4
  %cmp528 = icmp slt i32 %499, %500
  br i1 %cmp528, label %if.then530, label %if.end531

if.then530:                                       ; preds = %if.then507
  %501 = load i32, i32* %cand_x, align 4
  store i32 %501, i32* %best_x, align 4
  %502 = load i32, i32* %cand_y, align 4
  store i32 %502, i32* %best_y, align 4
  %503 = load i32, i32* %mcost, align 4
  store i32 %503, i32* %min_mcost.addr, align 4
  br label %if.end531

if.end531:                                        ; preds = %if.then530, %if.then507
  br label %if.end532

if.end532:                                        ; preds = %if.end531, %if.then497
  br label %if.end533

if.end533:                                        ; preds = %if.end532, %land.lhs.true492, %if.then483
  br label %if.end534

if.end534:                                        ; preds = %if.end533, %lor.lhs.false479, %land.lhs.true472, %lor.lhs.false469
  br label %if.end605

if.else535:                                       ; preds = %if.end459
  %504 = load i32, i32* %list.addr, align 4
  %cmp536 = icmp eq i32 %504, 0
  br i1 %cmp536, label %land.lhs.true538, label %lor.lhs.false542

land.lhs.true538:                                 ; preds = %if.else535
  %505 = load i16, i16* %ref.addr, align 2
  %conv539 = sext i16 %505 to i32
  %cmp540 = icmp sgt i32 %conv539, 0
  br i1 %cmp540, label %if.then553, label %lor.lhs.false542

lor.lhs.false542:                                 ; preds = %land.lhs.true538, %if.else535
  %506 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %type543 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %506, i32 0, i32 6
  %507 = load i32, i32* %type543, align 8
  %cmp544 = icmp eq i32 %507, 1
  br i1 %cmp544, label %land.lhs.true546, label %if.end604

land.lhs.true546:                                 ; preds = %lor.lhs.false542
  %508 = load i32, i32* %list.addr, align 4
  %cmp547 = icmp eq i32 %508, 0
  br i1 %cmp547, label %land.lhs.true549, label %if.end604

land.lhs.true549:                                 ; preds = %land.lhs.true546
  %509 = load i16, i16* %ref.addr, align 2
  %conv550 = sext i16 %509 to i32
  %cmp551 = icmp eq i32 %conv550, 0
  br i1 %cmp551, label %if.then553, label %if.end604

if.then553:                                       ; preds = %land.lhs.true549, %land.lhs.true538
  %510 = load i32, i32* %pic_pix_x.addr, align 4
  %511 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @pred_MV_ref, i64 0, i64 0), align 4
  %div554 = sdiv i32 %511, 4
  %add555 = add nsw i32 %510, %div554
  store i32 %add555, i32* %cand_x, align 4
  %512 = load i32, i32* %pic_pix_y.addr, align 4
  %513 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @pred_MV_ref, i64 0, i64 1), align 4
  %div556 = sdiv i32 %513, 4
  %add557 = add nsw i32 %512, %div556
  store i32 %add557, i32* %cand_y, align 4
  %514 = load i32, i32* %cand_x, align 4
  %515 = load i32, i32* %center_x, align 4
  %sub558 = sub nsw i32 %514, %515
  %call559 = call i32 @abs(i32 %sub558) #6
  %516 = load i32, i32* %search_range.addr, align 4
  %cmp560 = icmp sle i32 %call559, %516
  br i1 %cmp560, label %land.lhs.true562, label %if.end603

land.lhs.true562:                                 ; preds = %if.then553
  %517 = load i32, i32* %cand_y, align 4
  %518 = load i32, i32* %center_y, align 4
  %sub563 = sub nsw i32 %517, %518
  %call564 = call i32 @abs(i32 %sub563) #6
  %519 = load i32, i32* %search_range.addr, align 4
  %cmp565 = icmp sle i32 %call564, %519
  br i1 %cmp565, label %if.then567, label %if.end603

if.then567:                                       ; preds = %land.lhs.true562
  %520 = load i32**, i32*** @McostState, align 8
  %521 = load i32, i32* %cand_y, align 4
  %522 = load i32, i32* %center_y, align 4
  %sub568 = sub nsw i32 %521, %522
  %523 = load i32, i32* %search_range.addr, align 4
  %add569 = add nsw i32 %sub568, %523
  %idxprom570 = sext i32 %add569 to i64
  %arrayidx571 = getelementptr inbounds i32*, i32** %520, i64 %idxprom570
  %524 = load i32*, i32** %arrayidx571, align 8
  %525 = load i32, i32* %cand_x, align 4
  %526 = load i32, i32* %center_x, align 4
  %sub572 = sub nsw i32 %525, %526
  %527 = load i32, i32* %search_range.addr, align 4
  %add573 = add nsw i32 %sub572, %527
  %idxprom574 = sext i32 %add573 to i64
  %arrayidx575 = getelementptr inbounds i32, i32* %524, i64 %idxprom574
  %528 = load i32, i32* %arrayidx575, align 4
  %tobool576 = icmp ne i32 %528, 0
  br i1 %tobool576, label %if.end602, label %if.then577

if.then577:                                       ; preds = %if.then567
  %529 = load i32, i32* %lambda_factor, align 4
  %530 = load i32*, i32** @mvbits, align 8
  %531 = load i32, i32* %cand_x, align 4
  %532 = load i32, i32* %mvshift, align 4
  %shl578 = shl i32 %531, %532
  %533 = load i32, i32* %pred_x, align 4
  %sub579 = sub nsw i32 %shl578, %533
  %idxprom580 = sext i32 %sub579 to i64
  %arrayidx581 = getelementptr inbounds i32, i32* %530, i64 %idxprom580
  %534 = load i32, i32* %arrayidx581, align 4
  %535 = load i32*, i32** @mvbits, align 8
  %536 = load i32, i32* %cand_y, align 4
  %537 = load i32, i32* %mvshift, align 4
  %shl582 = shl i32 %536, %537
  %538 = load i32, i32* %pred_y, align 4
  %sub583 = sub nsw i32 %shl582, %538
  %idxprom584 = sext i32 %sub583 to i64
  %arrayidx585 = getelementptr inbounds i32, i32* %535, i64 %idxprom584
  %539 = load i32, i32* %arrayidx585, align 4
  %add586 = add nsw i32 %534, %539
  %mul587 = mul nsw i32 %529, %add586
  %shr588 = ashr i32 %mul587, 16
  store i32 %shr588, i32* %mcost, align 4
  %540 = load i16*, i16** %ref_pic, align 8
  %541 = load i16**, i16*** %orig_pic.addr, align 8
  %542 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %543 = load i32, i32* %blocksize_y, align 4
  %544 = load i32, i32* %blocksize_x, align 4
  %545 = load i32, i32* %blocksize_x4, align 4
  %546 = load i32, i32* %mcost, align 4
  %547 = load i32, i32* %min_mcost.addr, align 4
  %548 = load i32, i32* %cand_x, align 4
  %549 = load i32, i32* %cand_y, align 4
  %call589 = call i32 @PartCalMad(i16* %540, i16** %541, i16* (i32, i16*, i32, i32, i32, i32)* %542, i32 %543, i32 %544, i32 %545, i32 %546, i32 %547, i32 %548, i32 %549)
  store i32 %call589, i32* %mcost, align 4
  %550 = load i32, i32* %mcost, align 4
  %551 = load i32**, i32*** @McostState, align 8
  %552 = load i32, i32* %cand_y, align 4
  %553 = load i32, i32* %center_y, align 4
  %sub590 = sub nsw i32 %552, %553
  %554 = load i32, i32* %search_range.addr, align 4
  %add591 = add nsw i32 %sub590, %554
  %idxprom592 = sext i32 %add591 to i64
  %arrayidx593 = getelementptr inbounds i32*, i32** %551, i64 %idxprom592
  %555 = load i32*, i32** %arrayidx593, align 8
  %556 = load i32, i32* %cand_x, align 4
  %557 = load i32, i32* %center_x, align 4
  %sub594 = sub nsw i32 %556, %557
  %558 = load i32, i32* %search_range.addr, align 4
  %add595 = add nsw i32 %sub594, %558
  %idxprom596 = sext i32 %add595 to i64
  %arrayidx597 = getelementptr inbounds i32, i32* %555, i64 %idxprom596
  store i32 %550, i32* %arrayidx597, align 4
  %559 = load i32, i32* %mcost, align 4
  %560 = load i32, i32* %min_mcost.addr, align 4
  %cmp598 = icmp slt i32 %559, %560
  br i1 %cmp598, label %if.then600, label %if.end601

if.then600:                                       ; preds = %if.then577
  %561 = load i32, i32* %cand_x, align 4
  store i32 %561, i32* %best_x, align 4
  %562 = load i32, i32* %cand_y, align 4
  store i32 %562, i32* %best_y, align 4
  %563 = load i32, i32* %mcost, align 4
  store i32 %563, i32* %min_mcost.addr, align 4
  br label %if.end601

if.end601:                                        ; preds = %if.then600, %if.then577
  br label %if.end602

if.end602:                                        ; preds = %if.end601, %if.then567
  br label %if.end603

if.end603:                                        ; preds = %if.end602, %land.lhs.true562, %if.then553
  br label %if.end604

if.end604:                                        ; preds = %if.end603, %land.lhs.true549, %land.lhs.true546, %lor.lhs.false542
  br label %if.end605

if.end605:                                        ; preds = %if.end604, %if.end534
  %564 = load i32, i32* %best_x, align 4
  store i32 %564, i32* %iXMinNow, align 4
  %565 = load i32, i32* %best_y, align 4
  store i32 %565, i32* %iYMinNow, align 4
  store i32 0, i32* %m, align 4
  br label %for.cond606

for.cond606:                                      ; preds = %for.inc662, %if.end605
  %566 = load i32, i32* %m, align 4
  %cmp607 = icmp slt i32 %566, 4
  br i1 %cmp607, label %for.body609, label %for.end664

for.body609:                                      ; preds = %for.cond606
  %567 = load i32, i32* %iXMinNow, align 4
  %568 = load i32, i32* %m, align 4
  %idxprom610 = sext i32 %568 to i64
  %arrayidx611 = getelementptr inbounds [4 x i32], [4 x i32]* @FastIntegerPelBlockMotionSearch.Diamond_x, i64 0, i64 %idxprom610
  %569 = load i32, i32* %arrayidx611, align 4
  %add612 = add nsw i32 %567, %569
  store i32 %add612, i32* %cand_x, align 4
  %570 = load i32, i32* %iYMinNow, align 4
  %571 = load i32, i32* %m, align 4
  %idxprom613 = sext i32 %571 to i64
  %arrayidx614 = getelementptr inbounds [4 x i32], [4 x i32]* @FastIntegerPelBlockMotionSearch.Diamond_y, i64 0, i64 %idxprom613
  %572 = load i32, i32* %arrayidx614, align 4
  %add615 = add nsw i32 %570, %572
  store i32 %add615, i32* %cand_y, align 4
  %573 = load i32, i32* %cand_x, align 4
  %574 = load i32, i32* %center_x, align 4
  %sub616 = sub nsw i32 %573, %574
  %call617 = call i32 @abs(i32 %sub616) #6
  %575 = load i32, i32* %search_range.addr, align 4
  %cmp618 = icmp sle i32 %call617, %575
  br i1 %cmp618, label %land.lhs.true620, label %if.end661

land.lhs.true620:                                 ; preds = %for.body609
  %576 = load i32, i32* %cand_y, align 4
  %577 = load i32, i32* %center_y, align 4
  %sub621 = sub nsw i32 %576, %577
  %call622 = call i32 @abs(i32 %sub621) #6
  %578 = load i32, i32* %search_range.addr, align 4
  %cmp623 = icmp sle i32 %call622, %578
  br i1 %cmp623, label %if.then625, label %if.end661

if.then625:                                       ; preds = %land.lhs.true620
  %579 = load i32**, i32*** @McostState, align 8
  %580 = load i32, i32* %cand_y, align 4
  %581 = load i32, i32* %center_y, align 4
  %sub626 = sub nsw i32 %580, %581
  %582 = load i32, i32* %search_range.addr, align 4
  %add627 = add nsw i32 %sub626, %582
  %idxprom628 = sext i32 %add627 to i64
  %arrayidx629 = getelementptr inbounds i32*, i32** %579, i64 %idxprom628
  %583 = load i32*, i32** %arrayidx629, align 8
  %584 = load i32, i32* %cand_x, align 4
  %585 = load i32, i32* %center_x, align 4
  %sub630 = sub nsw i32 %584, %585
  %586 = load i32, i32* %search_range.addr, align 4
  %add631 = add nsw i32 %sub630, %586
  %idxprom632 = sext i32 %add631 to i64
  %arrayidx633 = getelementptr inbounds i32, i32* %583, i64 %idxprom632
  %587 = load i32, i32* %arrayidx633, align 4
  %tobool634 = icmp ne i32 %587, 0
  br i1 %tobool634, label %if.end660, label %if.then635

if.then635:                                       ; preds = %if.then625
  %588 = load i32, i32* %lambda_factor, align 4
  %589 = load i32*, i32** @mvbits, align 8
  %590 = load i32, i32* %cand_x, align 4
  %591 = load i32, i32* %mvshift, align 4
  %shl636 = shl i32 %590, %591
  %592 = load i32, i32* %pred_x, align 4
  %sub637 = sub nsw i32 %shl636, %592
  %idxprom638 = sext i32 %sub637 to i64
  %arrayidx639 = getelementptr inbounds i32, i32* %589, i64 %idxprom638
  %593 = load i32, i32* %arrayidx639, align 4
  %594 = load i32*, i32** @mvbits, align 8
  %595 = load i32, i32* %cand_y, align 4
  %596 = load i32, i32* %mvshift, align 4
  %shl640 = shl i32 %595, %596
  %597 = load i32, i32* %pred_y, align 4
  %sub641 = sub nsw i32 %shl640, %597
  %idxprom642 = sext i32 %sub641 to i64
  %arrayidx643 = getelementptr inbounds i32, i32* %594, i64 %idxprom642
  %598 = load i32, i32* %arrayidx643, align 4
  %add644 = add nsw i32 %593, %598
  %mul645 = mul nsw i32 %588, %add644
  %shr646 = ashr i32 %mul645, 16
  store i32 %shr646, i32* %mcost, align 4
  %599 = load i16*, i16** %ref_pic, align 8
  %600 = load i16**, i16*** %orig_pic.addr, align 8
  %601 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %602 = load i32, i32* %blocksize_y, align 4
  %603 = load i32, i32* %blocksize_x, align 4
  %604 = load i32, i32* %blocksize_x4, align 4
  %605 = load i32, i32* %mcost, align 4
  %606 = load i32, i32* %min_mcost.addr, align 4
  %607 = load i32, i32* %cand_x, align 4
  %608 = load i32, i32* %cand_y, align 4
  %call647 = call i32 @PartCalMad(i16* %599, i16** %600, i16* (i32, i16*, i32, i32, i32, i32)* %601, i32 %602, i32 %603, i32 %604, i32 %605, i32 %606, i32 %607, i32 %608)
  store i32 %call647, i32* %mcost, align 4
  %609 = load i32, i32* %mcost, align 4
  %610 = load i32**, i32*** @McostState, align 8
  %611 = load i32, i32* %cand_y, align 4
  %612 = load i32, i32* %center_y, align 4
  %sub648 = sub nsw i32 %611, %612
  %613 = load i32, i32* %search_range.addr, align 4
  %add649 = add nsw i32 %sub648, %613
  %idxprom650 = sext i32 %add649 to i64
  %arrayidx651 = getelementptr inbounds i32*, i32** %610, i64 %idxprom650
  %614 = load i32*, i32** %arrayidx651, align 8
  %615 = load i32, i32* %cand_x, align 4
  %616 = load i32, i32* %center_x, align 4
  %sub652 = sub nsw i32 %615, %616
  %617 = load i32, i32* %search_range.addr, align 4
  %add653 = add nsw i32 %sub652, %617
  %idxprom654 = sext i32 %add653 to i64
  %arrayidx655 = getelementptr inbounds i32, i32* %614, i64 %idxprom654
  store i32 %609, i32* %arrayidx655, align 4
  %618 = load i32, i32* %mcost, align 4
  %619 = load i32, i32* %min_mcost.addr, align 4
  %cmp656 = icmp slt i32 %618, %619
  br i1 %cmp656, label %if.then658, label %if.end659

if.then658:                                       ; preds = %if.then635
  %620 = load i32, i32* %cand_x, align 4
  store i32 %620, i32* %best_x, align 4
  %621 = load i32, i32* %cand_y, align 4
  store i32 %621, i32* %best_y, align 4
  %622 = load i32, i32* %mcost, align 4
  store i32 %622, i32* %min_mcost.addr, align 4
  br label %if.end659

if.end659:                                        ; preds = %if.then658, %if.then635
  br label %if.end660

if.end660:                                        ; preds = %if.end659, %if.then625
  br label %if.end661

if.end661:                                        ; preds = %if.end660, %land.lhs.true620, %for.body609
  br label %for.inc662

for.inc662:                                       ; preds = %if.end661
  %623 = load i32, i32* %m, align 4
  %inc663 = add nsw i32 %623, 1
  store i32 %inc663, i32* %m, align 4
  br label %for.cond606

for.end664:                                       ; preds = %for.cond606
  %624 = load i16, i16* %ref.addr, align 2
  %conv665 = sext i16 %624 to i32
  %cmp666 = icmp sgt i32 %conv665, 0
  br i1 %cmp666, label %if.then668, label %if.else686

if.then668:                                       ; preds = %for.end664
  %625 = load i32, i32* %min_mcost.addr, align 4
  %626 = load i32, i32* @pred_SAD_ref, align 4
  %sub669 = sub nsw i32 %625, %626
  %conv670 = sitofp i32 %sub669 to float
  %627 = load i32, i32* @pred_SAD_ref, align 4
  %conv671 = sitofp i32 %627 to float
  %628 = load float, float* %betaThird, align 4
  %mul672 = fmul float %conv671, %628
  %cmp673 = fcmp olt float %conv670, %mul672
  br i1 %cmp673, label %if.then675, label %if.else676

if.then675:                                       ; preds = %if.then668
  br label %third_step

if.else676:                                       ; preds = %if.then668
  %629 = load i32, i32* %min_mcost.addr, align 4
  %630 = load i32, i32* @pred_SAD_ref, align 4
  %sub677 = sub nsw i32 %629, %630
  %conv678 = sitofp i32 %sub677 to float
  %631 = load i32, i32* @pred_SAD_ref, align 4
  %conv679 = sitofp i32 %631 to float
  %632 = load float, float* %betaSec, align 4
  %mul680 = fmul float %conv679, %632
  %cmp681 = fcmp olt float %conv678, %mul680
  br i1 %cmp681, label %if.then683, label %if.end684

if.then683:                                       ; preds = %if.else676
  br label %sec_step

if.end684:                                        ; preds = %if.else676
  br label %if.end685

if.end685:                                        ; preds = %if.end684
  br label %if.end726

if.else686:                                       ; preds = %for.end664
  %633 = load i32, i32* %blocktype.addr, align 4
  %cmp687 = icmp sgt i32 %633, 1
  br i1 %cmp687, label %if.then689, label %if.else707

if.then689:                                       ; preds = %if.else686
  %634 = load i32, i32* %min_mcost.addr, align 4
  %635 = load i32, i32* @pred_SAD_uplayer, align 4
  %sub690 = sub nsw i32 %634, %635
  %conv691 = sitofp i32 %sub690 to float
  %636 = load i32, i32* @pred_SAD_uplayer, align 4
  %conv692 = sitofp i32 %636 to float
  %637 = load float, float* %betaThird, align 4
  %mul693 = fmul float %conv692, %637
  %cmp694 = fcmp olt float %conv691, %mul693
  br i1 %cmp694, label %if.then696, label %if.else697

if.then696:                                       ; preds = %if.then689
  br label %third_step

if.else697:                                       ; preds = %if.then689
  %638 = load i32, i32* %min_mcost.addr, align 4
  %639 = load i32, i32* @pred_SAD_uplayer, align 4
  %sub698 = sub nsw i32 %638, %639
  %conv699 = sitofp i32 %sub698 to float
  %640 = load i32, i32* @pred_SAD_uplayer, align 4
  %conv700 = sitofp i32 %640 to float
  %641 = load float, float* %betaSec, align 4
  %mul701 = fmul float %conv700, %641
  %cmp702 = fcmp olt float %conv699, %mul701
  br i1 %cmp702, label %if.then704, label %if.end705

if.then704:                                       ; preds = %if.else697
  br label %sec_step

if.end705:                                        ; preds = %if.else697
  br label %if.end706

if.end706:                                        ; preds = %if.end705
  br label %if.end725

if.else707:                                       ; preds = %if.else686
  %642 = load i32, i32* %min_mcost.addr, align 4
  %643 = load i32, i32* @pred_SAD_space, align 4
  %sub708 = sub nsw i32 %642, %643
  %conv709 = sitofp i32 %sub708 to float
  %644 = load i32, i32* @pred_SAD_space, align 4
  %conv710 = sitofp i32 %644 to float
  %645 = load float, float* %betaThird, align 4
  %mul711 = fmul float %conv710, %645
  %cmp712 = fcmp olt float %conv709, %mul711
  br i1 %cmp712, label %if.then714, label %if.else715

if.then714:                                       ; preds = %if.else707
  br label %third_step

if.else715:                                       ; preds = %if.else707
  %646 = load i32, i32* %min_mcost.addr, align 4
  %647 = load i32, i32* @pred_SAD_space, align 4
  %sub716 = sub nsw i32 %646, %647
  %conv717 = sitofp i32 %sub716 to float
  %648 = load i32, i32* @pred_SAD_space, align 4
  %conv718 = sitofp i32 %648 to float
  %649 = load float, float* %betaSec, align 4
  %mul719 = fmul float %conv718, %649
  %cmp720 = fcmp olt float %conv717, %mul719
  br i1 %cmp720, label %if.then722, label %if.end723

if.then722:                                       ; preds = %if.else715
  br label %sec_step

if.end723:                                        ; preds = %if.else715
  br label %if.end724

if.end724:                                        ; preds = %if.end723
  br label %if.end725

if.end725:                                        ; preds = %if.end724, %if.end706
  br label %if.end726

if.end726:                                        ; preds = %if.end725, %if.end685
  %650 = load i32, i32* %blocktype.addr, align 4
  %cmp727 = icmp sgt i32 %650, 6
  br i1 %cmp727, label %if.then729, label %if.else730

if.then729:                                       ; preds = %if.end726
  br label %sec_step

if.else730:                                       ; preds = %if.end726
  br label %first_step

first_step:                                       ; preds = %if.else730
  %651 = load i32, i32* %best_x, align 4
  store i32 %651, i32* %iXMinNow, align 4
  %652 = load i32, i32* %best_y, align 4
  store i32 %652, i32* %iYMinNow, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond731

for.cond731:                                      ; preds = %for.inc832, %first_step
  %653 = load i32, i32* %i, align 4
  %654 = load i32, i32* %search_range.addr, align 4
  %div732 = sdiv i32 %654, 2
  %cmp733 = icmp sle i32 %653, %div732
  br i1 %cmp733, label %for.body735, label %for.end834

for.body735:                                      ; preds = %for.cond731
  %655 = load i32, i32* %i, align 4
  %mul736 = mul nsw i32 2, %655
  %sub737 = sub nsw i32 %mul736, 1
  store i32 %sub737, i32* %search_step, align 4
  %656 = load i32, i32* %iXMinNow, align 4
  %657 = load i32, i32* %search_step, align 4
  %add738 = add nsw i32 %656, %657
  store i32 %add738, i32* %cand_x, align 4
  %658 = load i32, i32* %iYMinNow, align 4
  store i32 %658, i32* %cand_y, align 4
  %659 = load i32, i32* %cand_x, align 4
  %660 = load i32, i32* %center_x, align 4
  %sub739 = sub nsw i32 %659, %660
  %call740 = call i32 @abs(i32 %sub739) #6
  %661 = load i32, i32* %search_range.addr, align 4
  %cmp741 = icmp sle i32 %call740, %661
  br i1 %cmp741, label %land.lhs.true743, label %if.end784

land.lhs.true743:                                 ; preds = %for.body735
  %662 = load i32, i32* %cand_y, align 4
  %663 = load i32, i32* %center_y, align 4
  %sub744 = sub nsw i32 %662, %663
  %call745 = call i32 @abs(i32 %sub744) #6
  %664 = load i32, i32* %search_range.addr, align 4
  %cmp746 = icmp sle i32 %call745, %664
  br i1 %cmp746, label %if.then748, label %if.end784

if.then748:                                       ; preds = %land.lhs.true743
  %665 = load i32**, i32*** @McostState, align 8
  %666 = load i32, i32* %cand_y, align 4
  %667 = load i32, i32* %center_y, align 4
  %sub749 = sub nsw i32 %666, %667
  %668 = load i32, i32* %search_range.addr, align 4
  %add750 = add nsw i32 %sub749, %668
  %idxprom751 = sext i32 %add750 to i64
  %arrayidx752 = getelementptr inbounds i32*, i32** %665, i64 %idxprom751
  %669 = load i32*, i32** %arrayidx752, align 8
  %670 = load i32, i32* %cand_x, align 4
  %671 = load i32, i32* %center_x, align 4
  %sub753 = sub nsw i32 %670, %671
  %672 = load i32, i32* %search_range.addr, align 4
  %add754 = add nsw i32 %sub753, %672
  %idxprom755 = sext i32 %add754 to i64
  %arrayidx756 = getelementptr inbounds i32, i32* %669, i64 %idxprom755
  %673 = load i32, i32* %arrayidx756, align 4
  %tobool757 = icmp ne i32 %673, 0
  br i1 %tobool757, label %if.end783, label %if.then758

if.then758:                                       ; preds = %if.then748
  %674 = load i32, i32* %lambda_factor, align 4
  %675 = load i32*, i32** @mvbits, align 8
  %676 = load i32, i32* %cand_x, align 4
  %677 = load i32, i32* %mvshift, align 4
  %shl759 = shl i32 %676, %677
  %678 = load i32, i32* %pred_x, align 4
  %sub760 = sub nsw i32 %shl759, %678
  %idxprom761 = sext i32 %sub760 to i64
  %arrayidx762 = getelementptr inbounds i32, i32* %675, i64 %idxprom761
  %679 = load i32, i32* %arrayidx762, align 4
  %680 = load i32*, i32** @mvbits, align 8
  %681 = load i32, i32* %cand_y, align 4
  %682 = load i32, i32* %mvshift, align 4
  %shl763 = shl i32 %681, %682
  %683 = load i32, i32* %pred_y, align 4
  %sub764 = sub nsw i32 %shl763, %683
  %idxprom765 = sext i32 %sub764 to i64
  %arrayidx766 = getelementptr inbounds i32, i32* %680, i64 %idxprom765
  %684 = load i32, i32* %arrayidx766, align 4
  %add767 = add nsw i32 %679, %684
  %mul768 = mul nsw i32 %674, %add767
  %shr769 = ashr i32 %mul768, 16
  store i32 %shr769, i32* %mcost, align 4
  %685 = load i16*, i16** %ref_pic, align 8
  %686 = load i16**, i16*** %orig_pic.addr, align 8
  %687 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %688 = load i32, i32* %blocksize_y, align 4
  %689 = load i32, i32* %blocksize_x, align 4
  %690 = load i32, i32* %blocksize_x4, align 4
  %691 = load i32, i32* %mcost, align 4
  %692 = load i32, i32* %min_mcost.addr, align 4
  %693 = load i32, i32* %cand_x, align 4
  %694 = load i32, i32* %cand_y, align 4
  %call770 = call i32 @PartCalMad(i16* %685, i16** %686, i16* (i32, i16*, i32, i32, i32, i32)* %687, i32 %688, i32 %689, i32 %690, i32 %691, i32 %692, i32 %693, i32 %694)
  store i32 %call770, i32* %mcost, align 4
  %695 = load i32, i32* %mcost, align 4
  %696 = load i32**, i32*** @McostState, align 8
  %697 = load i32, i32* %cand_y, align 4
  %698 = load i32, i32* %center_y, align 4
  %sub771 = sub nsw i32 %697, %698
  %699 = load i32, i32* %search_range.addr, align 4
  %add772 = add nsw i32 %sub771, %699
  %idxprom773 = sext i32 %add772 to i64
  %arrayidx774 = getelementptr inbounds i32*, i32** %696, i64 %idxprom773
  %700 = load i32*, i32** %arrayidx774, align 8
  %701 = load i32, i32* %cand_x, align 4
  %702 = load i32, i32* %center_x, align 4
  %sub775 = sub nsw i32 %701, %702
  %703 = load i32, i32* %search_range.addr, align 4
  %add776 = add nsw i32 %sub775, %703
  %idxprom777 = sext i32 %add776 to i64
  %arrayidx778 = getelementptr inbounds i32, i32* %700, i64 %idxprom777
  store i32 %695, i32* %arrayidx778, align 4
  %704 = load i32, i32* %mcost, align 4
  %705 = load i32, i32* %min_mcost.addr, align 4
  %cmp779 = icmp slt i32 %704, %705
  br i1 %cmp779, label %if.then781, label %if.end782

if.then781:                                       ; preds = %if.then758
  %706 = load i32, i32* %cand_x, align 4
  store i32 %706, i32* %best_x, align 4
  %707 = load i32, i32* %cand_y, align 4
  store i32 %707, i32* %best_y, align 4
  %708 = load i32, i32* %mcost, align 4
  store i32 %708, i32* %min_mcost.addr, align 4
  br label %if.end782

if.end782:                                        ; preds = %if.then781, %if.then758
  br label %if.end783

if.end783:                                        ; preds = %if.end782, %if.then748
  br label %if.end784

if.end784:                                        ; preds = %if.end783, %land.lhs.true743, %for.body735
  %709 = load i32, i32* %iXMinNow, align 4
  %710 = load i32, i32* %search_step, align 4
  %sub785 = sub nsw i32 %709, %710
  store i32 %sub785, i32* %cand_x, align 4
  %711 = load i32, i32* %iYMinNow, align 4
  store i32 %711, i32* %cand_y, align 4
  %712 = load i32, i32* %cand_x, align 4
  %713 = load i32, i32* %center_x, align 4
  %sub786 = sub nsw i32 %712, %713
  %call787 = call i32 @abs(i32 %sub786) #6
  %714 = load i32, i32* %search_range.addr, align 4
  %cmp788 = icmp sle i32 %call787, %714
  br i1 %cmp788, label %land.lhs.true790, label %if.end831

land.lhs.true790:                                 ; preds = %if.end784
  %715 = load i32, i32* %cand_y, align 4
  %716 = load i32, i32* %center_y, align 4
  %sub791 = sub nsw i32 %715, %716
  %call792 = call i32 @abs(i32 %sub791) #6
  %717 = load i32, i32* %search_range.addr, align 4
  %cmp793 = icmp sle i32 %call792, %717
  br i1 %cmp793, label %if.then795, label %if.end831

if.then795:                                       ; preds = %land.lhs.true790
  %718 = load i32**, i32*** @McostState, align 8
  %719 = load i32, i32* %cand_y, align 4
  %720 = load i32, i32* %center_y, align 4
  %sub796 = sub nsw i32 %719, %720
  %721 = load i32, i32* %search_range.addr, align 4
  %add797 = add nsw i32 %sub796, %721
  %idxprom798 = sext i32 %add797 to i64
  %arrayidx799 = getelementptr inbounds i32*, i32** %718, i64 %idxprom798
  %722 = load i32*, i32** %arrayidx799, align 8
  %723 = load i32, i32* %cand_x, align 4
  %724 = load i32, i32* %center_x, align 4
  %sub800 = sub nsw i32 %723, %724
  %725 = load i32, i32* %search_range.addr, align 4
  %add801 = add nsw i32 %sub800, %725
  %idxprom802 = sext i32 %add801 to i64
  %arrayidx803 = getelementptr inbounds i32, i32* %722, i64 %idxprom802
  %726 = load i32, i32* %arrayidx803, align 4
  %tobool804 = icmp ne i32 %726, 0
  br i1 %tobool804, label %if.end830, label %if.then805

if.then805:                                       ; preds = %if.then795
  %727 = load i32, i32* %lambda_factor, align 4
  %728 = load i32*, i32** @mvbits, align 8
  %729 = load i32, i32* %cand_x, align 4
  %730 = load i32, i32* %mvshift, align 4
  %shl806 = shl i32 %729, %730
  %731 = load i32, i32* %pred_x, align 4
  %sub807 = sub nsw i32 %shl806, %731
  %idxprom808 = sext i32 %sub807 to i64
  %arrayidx809 = getelementptr inbounds i32, i32* %728, i64 %idxprom808
  %732 = load i32, i32* %arrayidx809, align 4
  %733 = load i32*, i32** @mvbits, align 8
  %734 = load i32, i32* %cand_y, align 4
  %735 = load i32, i32* %mvshift, align 4
  %shl810 = shl i32 %734, %735
  %736 = load i32, i32* %pred_y, align 4
  %sub811 = sub nsw i32 %shl810, %736
  %idxprom812 = sext i32 %sub811 to i64
  %arrayidx813 = getelementptr inbounds i32, i32* %733, i64 %idxprom812
  %737 = load i32, i32* %arrayidx813, align 4
  %add814 = add nsw i32 %732, %737
  %mul815 = mul nsw i32 %727, %add814
  %shr816 = ashr i32 %mul815, 16
  store i32 %shr816, i32* %mcost, align 4
  %738 = load i16*, i16** %ref_pic, align 8
  %739 = load i16**, i16*** %orig_pic.addr, align 8
  %740 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %741 = load i32, i32* %blocksize_y, align 4
  %742 = load i32, i32* %blocksize_x, align 4
  %743 = load i32, i32* %blocksize_x4, align 4
  %744 = load i32, i32* %mcost, align 4
  %745 = load i32, i32* %min_mcost.addr, align 4
  %746 = load i32, i32* %cand_x, align 4
  %747 = load i32, i32* %cand_y, align 4
  %call817 = call i32 @PartCalMad(i16* %738, i16** %739, i16* (i32, i16*, i32, i32, i32, i32)* %740, i32 %741, i32 %742, i32 %743, i32 %744, i32 %745, i32 %746, i32 %747)
  store i32 %call817, i32* %mcost, align 4
  %748 = load i32, i32* %mcost, align 4
  %749 = load i32**, i32*** @McostState, align 8
  %750 = load i32, i32* %cand_y, align 4
  %751 = load i32, i32* %center_y, align 4
  %sub818 = sub nsw i32 %750, %751
  %752 = load i32, i32* %search_range.addr, align 4
  %add819 = add nsw i32 %sub818, %752
  %idxprom820 = sext i32 %add819 to i64
  %arrayidx821 = getelementptr inbounds i32*, i32** %749, i64 %idxprom820
  %753 = load i32*, i32** %arrayidx821, align 8
  %754 = load i32, i32* %cand_x, align 4
  %755 = load i32, i32* %center_x, align 4
  %sub822 = sub nsw i32 %754, %755
  %756 = load i32, i32* %search_range.addr, align 4
  %add823 = add nsw i32 %sub822, %756
  %idxprom824 = sext i32 %add823 to i64
  %arrayidx825 = getelementptr inbounds i32, i32* %753, i64 %idxprom824
  store i32 %748, i32* %arrayidx825, align 4
  %757 = load i32, i32* %mcost, align 4
  %758 = load i32, i32* %min_mcost.addr, align 4
  %cmp826 = icmp slt i32 %757, %758
  br i1 %cmp826, label %if.then828, label %if.end829

if.then828:                                       ; preds = %if.then805
  %759 = load i32, i32* %cand_x, align 4
  store i32 %759, i32* %best_x, align 4
  %760 = load i32, i32* %cand_y, align 4
  store i32 %760, i32* %best_y, align 4
  %761 = load i32, i32* %mcost, align 4
  store i32 %761, i32* %min_mcost.addr, align 4
  br label %if.end829

if.end829:                                        ; preds = %if.then828, %if.then805
  br label %if.end830

if.end830:                                        ; preds = %if.end829, %if.then795
  br label %if.end831

if.end831:                                        ; preds = %if.end830, %land.lhs.true790, %if.end784
  br label %for.inc832

for.inc832:                                       ; preds = %if.end831
  %762 = load i32, i32* %i, align 4
  %inc833 = add nsw i32 %762, 1
  store i32 %inc833, i32* %i, align 4
  br label %for.cond731

for.end834:                                       ; preds = %for.cond731
  store i32 1, i32* %i, align 4
  br label %for.cond835

for.cond835:                                      ; preds = %for.inc936, %for.end834
  %763 = load i32, i32* %i, align 4
  %764 = load i32, i32* %search_range.addr, align 4
  %div836 = sdiv i32 %764, 4
  %cmp837 = icmp sle i32 %763, %div836
  br i1 %cmp837, label %for.body839, label %for.end938

for.body839:                                      ; preds = %for.cond835
  %765 = load i32, i32* %i, align 4
  %mul840 = mul nsw i32 2, %765
  %sub841 = sub nsw i32 %mul840, 1
  store i32 %sub841, i32* %search_step, align 4
  %766 = load i32, i32* %iXMinNow, align 4
  store i32 %766, i32* %cand_x, align 4
  %767 = load i32, i32* %iYMinNow, align 4
  %768 = load i32, i32* %search_step, align 4
  %add842 = add nsw i32 %767, %768
  store i32 %add842, i32* %cand_y, align 4
  %769 = load i32, i32* %cand_x, align 4
  %770 = load i32, i32* %center_x, align 4
  %sub843 = sub nsw i32 %769, %770
  %call844 = call i32 @abs(i32 %sub843) #6
  %771 = load i32, i32* %search_range.addr, align 4
  %cmp845 = icmp sle i32 %call844, %771
  br i1 %cmp845, label %land.lhs.true847, label %if.end888

land.lhs.true847:                                 ; preds = %for.body839
  %772 = load i32, i32* %cand_y, align 4
  %773 = load i32, i32* %center_y, align 4
  %sub848 = sub nsw i32 %772, %773
  %call849 = call i32 @abs(i32 %sub848) #6
  %774 = load i32, i32* %search_range.addr, align 4
  %cmp850 = icmp sle i32 %call849, %774
  br i1 %cmp850, label %if.then852, label %if.end888

if.then852:                                       ; preds = %land.lhs.true847
  %775 = load i32**, i32*** @McostState, align 8
  %776 = load i32, i32* %cand_y, align 4
  %777 = load i32, i32* %center_y, align 4
  %sub853 = sub nsw i32 %776, %777
  %778 = load i32, i32* %search_range.addr, align 4
  %add854 = add nsw i32 %sub853, %778
  %idxprom855 = sext i32 %add854 to i64
  %arrayidx856 = getelementptr inbounds i32*, i32** %775, i64 %idxprom855
  %779 = load i32*, i32** %arrayidx856, align 8
  %780 = load i32, i32* %cand_x, align 4
  %781 = load i32, i32* %center_x, align 4
  %sub857 = sub nsw i32 %780, %781
  %782 = load i32, i32* %search_range.addr, align 4
  %add858 = add nsw i32 %sub857, %782
  %idxprom859 = sext i32 %add858 to i64
  %arrayidx860 = getelementptr inbounds i32, i32* %779, i64 %idxprom859
  %783 = load i32, i32* %arrayidx860, align 4
  %tobool861 = icmp ne i32 %783, 0
  br i1 %tobool861, label %if.end887, label %if.then862

if.then862:                                       ; preds = %if.then852
  %784 = load i32, i32* %lambda_factor, align 4
  %785 = load i32*, i32** @mvbits, align 8
  %786 = load i32, i32* %cand_x, align 4
  %787 = load i32, i32* %mvshift, align 4
  %shl863 = shl i32 %786, %787
  %788 = load i32, i32* %pred_x, align 4
  %sub864 = sub nsw i32 %shl863, %788
  %idxprom865 = sext i32 %sub864 to i64
  %arrayidx866 = getelementptr inbounds i32, i32* %785, i64 %idxprom865
  %789 = load i32, i32* %arrayidx866, align 4
  %790 = load i32*, i32** @mvbits, align 8
  %791 = load i32, i32* %cand_y, align 4
  %792 = load i32, i32* %mvshift, align 4
  %shl867 = shl i32 %791, %792
  %793 = load i32, i32* %pred_y, align 4
  %sub868 = sub nsw i32 %shl867, %793
  %idxprom869 = sext i32 %sub868 to i64
  %arrayidx870 = getelementptr inbounds i32, i32* %790, i64 %idxprom869
  %794 = load i32, i32* %arrayidx870, align 4
  %add871 = add nsw i32 %789, %794
  %mul872 = mul nsw i32 %784, %add871
  %shr873 = ashr i32 %mul872, 16
  store i32 %shr873, i32* %mcost, align 4
  %795 = load i16*, i16** %ref_pic, align 8
  %796 = load i16**, i16*** %orig_pic.addr, align 8
  %797 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %798 = load i32, i32* %blocksize_y, align 4
  %799 = load i32, i32* %blocksize_x, align 4
  %800 = load i32, i32* %blocksize_x4, align 4
  %801 = load i32, i32* %mcost, align 4
  %802 = load i32, i32* %min_mcost.addr, align 4
  %803 = load i32, i32* %cand_x, align 4
  %804 = load i32, i32* %cand_y, align 4
  %call874 = call i32 @PartCalMad(i16* %795, i16** %796, i16* (i32, i16*, i32, i32, i32, i32)* %797, i32 %798, i32 %799, i32 %800, i32 %801, i32 %802, i32 %803, i32 %804)
  store i32 %call874, i32* %mcost, align 4
  %805 = load i32, i32* %mcost, align 4
  %806 = load i32**, i32*** @McostState, align 8
  %807 = load i32, i32* %cand_y, align 4
  %808 = load i32, i32* %center_y, align 4
  %sub875 = sub nsw i32 %807, %808
  %809 = load i32, i32* %search_range.addr, align 4
  %add876 = add nsw i32 %sub875, %809
  %idxprom877 = sext i32 %add876 to i64
  %arrayidx878 = getelementptr inbounds i32*, i32** %806, i64 %idxprom877
  %810 = load i32*, i32** %arrayidx878, align 8
  %811 = load i32, i32* %cand_x, align 4
  %812 = load i32, i32* %center_x, align 4
  %sub879 = sub nsw i32 %811, %812
  %813 = load i32, i32* %search_range.addr, align 4
  %add880 = add nsw i32 %sub879, %813
  %idxprom881 = sext i32 %add880 to i64
  %arrayidx882 = getelementptr inbounds i32, i32* %810, i64 %idxprom881
  store i32 %805, i32* %arrayidx882, align 4
  %814 = load i32, i32* %mcost, align 4
  %815 = load i32, i32* %min_mcost.addr, align 4
  %cmp883 = icmp slt i32 %814, %815
  br i1 %cmp883, label %if.then885, label %if.end886

if.then885:                                       ; preds = %if.then862
  %816 = load i32, i32* %cand_x, align 4
  store i32 %816, i32* %best_x, align 4
  %817 = load i32, i32* %cand_y, align 4
  store i32 %817, i32* %best_y, align 4
  %818 = load i32, i32* %mcost, align 4
  store i32 %818, i32* %min_mcost.addr, align 4
  br label %if.end886

if.end886:                                        ; preds = %if.then885, %if.then862
  br label %if.end887

if.end887:                                        ; preds = %if.end886, %if.then852
  br label %if.end888

if.end888:                                        ; preds = %if.end887, %land.lhs.true847, %for.body839
  %819 = load i32, i32* %iXMinNow, align 4
  store i32 %819, i32* %cand_x, align 4
  %820 = load i32, i32* %iYMinNow, align 4
  %821 = load i32, i32* %search_step, align 4
  %sub889 = sub nsw i32 %820, %821
  store i32 %sub889, i32* %cand_y, align 4
  %822 = load i32, i32* %cand_x, align 4
  %823 = load i32, i32* %center_x, align 4
  %sub890 = sub nsw i32 %822, %823
  %call891 = call i32 @abs(i32 %sub890) #6
  %824 = load i32, i32* %search_range.addr, align 4
  %cmp892 = icmp sle i32 %call891, %824
  br i1 %cmp892, label %land.lhs.true894, label %if.end935

land.lhs.true894:                                 ; preds = %if.end888
  %825 = load i32, i32* %cand_y, align 4
  %826 = load i32, i32* %center_y, align 4
  %sub895 = sub nsw i32 %825, %826
  %call896 = call i32 @abs(i32 %sub895) #6
  %827 = load i32, i32* %search_range.addr, align 4
  %cmp897 = icmp sle i32 %call896, %827
  br i1 %cmp897, label %if.then899, label %if.end935

if.then899:                                       ; preds = %land.lhs.true894
  %828 = load i32**, i32*** @McostState, align 8
  %829 = load i32, i32* %cand_y, align 4
  %830 = load i32, i32* %center_y, align 4
  %sub900 = sub nsw i32 %829, %830
  %831 = load i32, i32* %search_range.addr, align 4
  %add901 = add nsw i32 %sub900, %831
  %idxprom902 = sext i32 %add901 to i64
  %arrayidx903 = getelementptr inbounds i32*, i32** %828, i64 %idxprom902
  %832 = load i32*, i32** %arrayidx903, align 8
  %833 = load i32, i32* %cand_x, align 4
  %834 = load i32, i32* %center_x, align 4
  %sub904 = sub nsw i32 %833, %834
  %835 = load i32, i32* %search_range.addr, align 4
  %add905 = add nsw i32 %sub904, %835
  %idxprom906 = sext i32 %add905 to i64
  %arrayidx907 = getelementptr inbounds i32, i32* %832, i64 %idxprom906
  %836 = load i32, i32* %arrayidx907, align 4
  %tobool908 = icmp ne i32 %836, 0
  br i1 %tobool908, label %if.end934, label %if.then909

if.then909:                                       ; preds = %if.then899
  %837 = load i32, i32* %lambda_factor, align 4
  %838 = load i32*, i32** @mvbits, align 8
  %839 = load i32, i32* %cand_x, align 4
  %840 = load i32, i32* %mvshift, align 4
  %shl910 = shl i32 %839, %840
  %841 = load i32, i32* %pred_x, align 4
  %sub911 = sub nsw i32 %shl910, %841
  %idxprom912 = sext i32 %sub911 to i64
  %arrayidx913 = getelementptr inbounds i32, i32* %838, i64 %idxprom912
  %842 = load i32, i32* %arrayidx913, align 4
  %843 = load i32*, i32** @mvbits, align 8
  %844 = load i32, i32* %cand_y, align 4
  %845 = load i32, i32* %mvshift, align 4
  %shl914 = shl i32 %844, %845
  %846 = load i32, i32* %pred_y, align 4
  %sub915 = sub nsw i32 %shl914, %846
  %idxprom916 = sext i32 %sub915 to i64
  %arrayidx917 = getelementptr inbounds i32, i32* %843, i64 %idxprom916
  %847 = load i32, i32* %arrayidx917, align 4
  %add918 = add nsw i32 %842, %847
  %mul919 = mul nsw i32 %837, %add918
  %shr920 = ashr i32 %mul919, 16
  store i32 %shr920, i32* %mcost, align 4
  %848 = load i16*, i16** %ref_pic, align 8
  %849 = load i16**, i16*** %orig_pic.addr, align 8
  %850 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %851 = load i32, i32* %blocksize_y, align 4
  %852 = load i32, i32* %blocksize_x, align 4
  %853 = load i32, i32* %blocksize_x4, align 4
  %854 = load i32, i32* %mcost, align 4
  %855 = load i32, i32* %min_mcost.addr, align 4
  %856 = load i32, i32* %cand_x, align 4
  %857 = load i32, i32* %cand_y, align 4
  %call921 = call i32 @PartCalMad(i16* %848, i16** %849, i16* (i32, i16*, i32, i32, i32, i32)* %850, i32 %851, i32 %852, i32 %853, i32 %854, i32 %855, i32 %856, i32 %857)
  store i32 %call921, i32* %mcost, align 4
  %858 = load i32, i32* %mcost, align 4
  %859 = load i32**, i32*** @McostState, align 8
  %860 = load i32, i32* %cand_y, align 4
  %861 = load i32, i32* %center_y, align 4
  %sub922 = sub nsw i32 %860, %861
  %862 = load i32, i32* %search_range.addr, align 4
  %add923 = add nsw i32 %sub922, %862
  %idxprom924 = sext i32 %add923 to i64
  %arrayidx925 = getelementptr inbounds i32*, i32** %859, i64 %idxprom924
  %863 = load i32*, i32** %arrayidx925, align 8
  %864 = load i32, i32* %cand_x, align 4
  %865 = load i32, i32* %center_x, align 4
  %sub926 = sub nsw i32 %864, %865
  %866 = load i32, i32* %search_range.addr, align 4
  %add927 = add nsw i32 %sub926, %866
  %idxprom928 = sext i32 %add927 to i64
  %arrayidx929 = getelementptr inbounds i32, i32* %863, i64 %idxprom928
  store i32 %858, i32* %arrayidx929, align 4
  %867 = load i32, i32* %mcost, align 4
  %868 = load i32, i32* %min_mcost.addr, align 4
  %cmp930 = icmp slt i32 %867, %868
  br i1 %cmp930, label %if.then932, label %if.end933

if.then932:                                       ; preds = %if.then909
  %869 = load i32, i32* %cand_x, align 4
  store i32 %869, i32* %best_x, align 4
  %870 = load i32, i32* %cand_y, align 4
  store i32 %870, i32* %best_y, align 4
  %871 = load i32, i32* %mcost, align 4
  store i32 %871, i32* %min_mcost.addr, align 4
  br label %if.end933

if.end933:                                        ; preds = %if.then932, %if.then909
  br label %if.end934

if.end934:                                        ; preds = %if.end933, %if.then899
  br label %if.end935

if.end935:                                        ; preds = %if.end934, %land.lhs.true894, %if.end888
  br label %for.inc936

for.inc936:                                       ; preds = %if.end935
  %872 = load i32, i32* %i, align 4
  %inc937 = add nsw i32 %872, 1
  store i32 %inc937, i32* %i, align 4
  br label %for.cond835

for.end938:                                       ; preds = %for.cond835
  %873 = load i16, i16* %ref.addr, align 2
  %conv939 = sext i16 %873 to i32
  %cmp940 = icmp sgt i32 %conv939, 0
  br i1 %cmp940, label %if.then942, label %if.else960

if.then942:                                       ; preds = %for.end938
  %874 = load i32, i32* %min_mcost.addr, align 4
  %875 = load i32, i32* @pred_SAD_ref, align 4
  %sub943 = sub nsw i32 %874, %875
  %conv944 = sitofp i32 %sub943 to float
  %876 = load i32, i32* @pred_SAD_ref, align 4
  %conv945 = sitofp i32 %876 to float
  %877 = load float, float* %betaThird, align 4
  %mul946 = fmul float %conv945, %877
  %cmp947 = fcmp olt float %conv944, %mul946
  br i1 %cmp947, label %if.then949, label %if.else950

if.then949:                                       ; preds = %if.then942
  br label %third_step

if.else950:                                       ; preds = %if.then942
  %878 = load i32, i32* %min_mcost.addr, align 4
  %879 = load i32, i32* @pred_SAD_ref, align 4
  %sub951 = sub nsw i32 %878, %879
  %conv952 = sitofp i32 %sub951 to float
  %880 = load i32, i32* @pred_SAD_ref, align 4
  %conv953 = sitofp i32 %880 to float
  %881 = load float, float* %betaSec, align 4
  %mul954 = fmul float %conv953, %881
  %cmp955 = fcmp olt float %conv952, %mul954
  br i1 %cmp955, label %if.then957, label %if.end958

if.then957:                                       ; preds = %if.else950
  br label %sec_step

if.end958:                                        ; preds = %if.else950
  br label %if.end959

if.end959:                                        ; preds = %if.end958
  br label %if.end1000

if.else960:                                       ; preds = %for.end938
  %882 = load i32, i32* %blocktype.addr, align 4
  %cmp961 = icmp sgt i32 %882, 1
  br i1 %cmp961, label %if.then963, label %if.else981

if.then963:                                       ; preds = %if.else960
  %883 = load i32, i32* %min_mcost.addr, align 4
  %884 = load i32, i32* @pred_SAD_uplayer, align 4
  %sub964 = sub nsw i32 %883, %884
  %conv965 = sitofp i32 %sub964 to float
  %885 = load i32, i32* @pred_SAD_uplayer, align 4
  %conv966 = sitofp i32 %885 to float
  %886 = load float, float* %betaThird, align 4
  %mul967 = fmul float %conv966, %886
  %cmp968 = fcmp olt float %conv965, %mul967
  br i1 %cmp968, label %if.then970, label %if.else971

if.then970:                                       ; preds = %if.then963
  br label %third_step

if.else971:                                       ; preds = %if.then963
  %887 = load i32, i32* %min_mcost.addr, align 4
  %888 = load i32, i32* @pred_SAD_uplayer, align 4
  %sub972 = sub nsw i32 %887, %888
  %conv973 = sitofp i32 %sub972 to float
  %889 = load i32, i32* @pred_SAD_uplayer, align 4
  %conv974 = sitofp i32 %889 to float
  %890 = load float, float* %betaSec, align 4
  %mul975 = fmul float %conv974, %890
  %cmp976 = fcmp olt float %conv973, %mul975
  br i1 %cmp976, label %if.then978, label %if.end979

if.then978:                                       ; preds = %if.else971
  br label %sec_step

if.end979:                                        ; preds = %if.else971
  br label %if.end980

if.end980:                                        ; preds = %if.end979
  br label %if.end999

if.else981:                                       ; preds = %if.else960
  %891 = load i32, i32* %min_mcost.addr, align 4
  %892 = load i32, i32* @pred_SAD_space, align 4
  %sub982 = sub nsw i32 %891, %892
  %conv983 = sitofp i32 %sub982 to float
  %893 = load i32, i32* @pred_SAD_space, align 4
  %conv984 = sitofp i32 %893 to float
  %894 = load float, float* %betaThird, align 4
  %mul985 = fmul float %conv984, %894
  %cmp986 = fcmp olt float %conv983, %mul985
  br i1 %cmp986, label %if.then988, label %if.else989

if.then988:                                       ; preds = %if.else981
  br label %third_step

if.else989:                                       ; preds = %if.else981
  %895 = load i32, i32* %min_mcost.addr, align 4
  %896 = load i32, i32* @pred_SAD_space, align 4
  %sub990 = sub nsw i32 %895, %896
  %conv991 = sitofp i32 %sub990 to float
  %897 = load i32, i32* @pred_SAD_space, align 4
  %conv992 = sitofp i32 %897 to float
  %898 = load float, float* %betaSec, align 4
  %mul993 = fmul float %conv992, %898
  %cmp994 = fcmp olt float %conv991, %mul993
  br i1 %cmp994, label %if.then996, label %if.end997

if.then996:                                       ; preds = %if.else989
  br label %sec_step

if.end997:                                        ; preds = %if.else989
  br label %if.end998

if.end998:                                        ; preds = %if.end997
  br label %if.end999

if.end999:                                        ; preds = %if.end998, %if.end980
  br label %if.end1000

if.end1000:                                       ; preds = %if.end999, %if.end959
  %899 = load i32, i32* %best_x, align 4
  store i32 %899, i32* %iXMinNow, align 4
  %900 = load i32, i32* %best_y, align 4
  store i32 %900, i32* %iYMinNow, align 4
  store i32 1, i32* %pos, align 4
  br label %for.cond1001

for.cond1001:                                     ; preds = %for.inc1057, %if.end1000
  %901 = load i32, i32* %pos, align 4
  %cmp1002 = icmp slt i32 %901, 25
  br i1 %cmp1002, label %for.body1004, label %for.end1059

for.body1004:                                     ; preds = %for.cond1001
  %902 = load i32, i32* %iXMinNow, align 4
  %903 = load i32*, i32** @spiral_search_x, align 8
  %904 = load i32, i32* %pos, align 4
  %idxprom1005 = sext i32 %904 to i64
  %arrayidx1006 = getelementptr inbounds i32, i32* %903, i64 %idxprom1005
  %905 = load i32, i32* %arrayidx1006, align 4
  %add1007 = add nsw i32 %902, %905
  store i32 %add1007, i32* %cand_x, align 4
  %906 = load i32, i32* %iYMinNow, align 4
  %907 = load i32*, i32** @spiral_search_y, align 8
  %908 = load i32, i32* %pos, align 4
  %idxprom1008 = sext i32 %908 to i64
  %arrayidx1009 = getelementptr inbounds i32, i32* %907, i64 %idxprom1008
  %909 = load i32, i32* %arrayidx1009, align 4
  %add1010 = add nsw i32 %906, %909
  store i32 %add1010, i32* %cand_y, align 4
  %910 = load i32, i32* %cand_x, align 4
  %911 = load i32, i32* %center_x, align 4
  %sub1011 = sub nsw i32 %910, %911
  %call1012 = call i32 @abs(i32 %sub1011) #6
  %912 = load i32, i32* %search_range.addr, align 4
  %cmp1013 = icmp sle i32 %call1012, %912
  br i1 %cmp1013, label %land.lhs.true1015, label %if.end1056

land.lhs.true1015:                                ; preds = %for.body1004
  %913 = load i32, i32* %cand_y, align 4
  %914 = load i32, i32* %center_y, align 4
  %sub1016 = sub nsw i32 %913, %914
  %call1017 = call i32 @abs(i32 %sub1016) #6
  %915 = load i32, i32* %search_range.addr, align 4
  %cmp1018 = icmp sle i32 %call1017, %915
  br i1 %cmp1018, label %if.then1020, label %if.end1056

if.then1020:                                      ; preds = %land.lhs.true1015
  %916 = load i32**, i32*** @McostState, align 8
  %917 = load i32, i32* %cand_y, align 4
  %918 = load i32, i32* %center_y, align 4
  %sub1021 = sub nsw i32 %917, %918
  %919 = load i32, i32* %search_range.addr, align 4
  %add1022 = add nsw i32 %sub1021, %919
  %idxprom1023 = sext i32 %add1022 to i64
  %arrayidx1024 = getelementptr inbounds i32*, i32** %916, i64 %idxprom1023
  %920 = load i32*, i32** %arrayidx1024, align 8
  %921 = load i32, i32* %cand_x, align 4
  %922 = load i32, i32* %center_x, align 4
  %sub1025 = sub nsw i32 %921, %922
  %923 = load i32, i32* %search_range.addr, align 4
  %add1026 = add nsw i32 %sub1025, %923
  %idxprom1027 = sext i32 %add1026 to i64
  %arrayidx1028 = getelementptr inbounds i32, i32* %920, i64 %idxprom1027
  %924 = load i32, i32* %arrayidx1028, align 4
  %tobool1029 = icmp ne i32 %924, 0
  br i1 %tobool1029, label %if.end1055, label %if.then1030

if.then1030:                                      ; preds = %if.then1020
  %925 = load i32, i32* %lambda_factor, align 4
  %926 = load i32*, i32** @mvbits, align 8
  %927 = load i32, i32* %cand_x, align 4
  %928 = load i32, i32* %mvshift, align 4
  %shl1031 = shl i32 %927, %928
  %929 = load i32, i32* %pred_x, align 4
  %sub1032 = sub nsw i32 %shl1031, %929
  %idxprom1033 = sext i32 %sub1032 to i64
  %arrayidx1034 = getelementptr inbounds i32, i32* %926, i64 %idxprom1033
  %930 = load i32, i32* %arrayidx1034, align 4
  %931 = load i32*, i32** @mvbits, align 8
  %932 = load i32, i32* %cand_y, align 4
  %933 = load i32, i32* %mvshift, align 4
  %shl1035 = shl i32 %932, %933
  %934 = load i32, i32* %pred_y, align 4
  %sub1036 = sub nsw i32 %shl1035, %934
  %idxprom1037 = sext i32 %sub1036 to i64
  %arrayidx1038 = getelementptr inbounds i32, i32* %931, i64 %idxprom1037
  %935 = load i32, i32* %arrayidx1038, align 4
  %add1039 = add nsw i32 %930, %935
  %mul1040 = mul nsw i32 %925, %add1039
  %shr1041 = ashr i32 %mul1040, 16
  store i32 %shr1041, i32* %mcost, align 4
  %936 = load i16*, i16** %ref_pic, align 8
  %937 = load i16**, i16*** %orig_pic.addr, align 8
  %938 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %939 = load i32, i32* %blocksize_y, align 4
  %940 = load i32, i32* %blocksize_x, align 4
  %941 = load i32, i32* %blocksize_x4, align 4
  %942 = load i32, i32* %mcost, align 4
  %943 = load i32, i32* %min_mcost.addr, align 4
  %944 = load i32, i32* %cand_x, align 4
  %945 = load i32, i32* %cand_y, align 4
  %call1042 = call i32 @PartCalMad(i16* %936, i16** %937, i16* (i32, i16*, i32, i32, i32, i32)* %938, i32 %939, i32 %940, i32 %941, i32 %942, i32 %943, i32 %944, i32 %945)
  store i32 %call1042, i32* %mcost, align 4
  %946 = load i32, i32* %mcost, align 4
  %947 = load i32**, i32*** @McostState, align 8
  %948 = load i32, i32* %cand_y, align 4
  %949 = load i32, i32* %center_y, align 4
  %sub1043 = sub nsw i32 %948, %949
  %950 = load i32, i32* %search_range.addr, align 4
  %add1044 = add nsw i32 %sub1043, %950
  %idxprom1045 = sext i32 %add1044 to i64
  %arrayidx1046 = getelementptr inbounds i32*, i32** %947, i64 %idxprom1045
  %951 = load i32*, i32** %arrayidx1046, align 8
  %952 = load i32, i32* %cand_x, align 4
  %953 = load i32, i32* %center_x, align 4
  %sub1047 = sub nsw i32 %952, %953
  %954 = load i32, i32* %search_range.addr, align 4
  %add1048 = add nsw i32 %sub1047, %954
  %idxprom1049 = sext i32 %add1048 to i64
  %arrayidx1050 = getelementptr inbounds i32, i32* %951, i64 %idxprom1049
  store i32 %946, i32* %arrayidx1050, align 4
  %955 = load i32, i32* %mcost, align 4
  %956 = load i32, i32* %min_mcost.addr, align 4
  %cmp1051 = icmp slt i32 %955, %956
  br i1 %cmp1051, label %if.then1053, label %if.end1054

if.then1053:                                      ; preds = %if.then1030
  %957 = load i32, i32* %cand_x, align 4
  store i32 %957, i32* %best_x, align 4
  %958 = load i32, i32* %cand_y, align 4
  store i32 %958, i32* %best_y, align 4
  %959 = load i32, i32* %mcost, align 4
  store i32 %959, i32* %min_mcost.addr, align 4
  br label %if.end1054

if.end1054:                                       ; preds = %if.then1053, %if.then1030
  br label %if.end1055

if.end1055:                                       ; preds = %if.end1054, %if.then1020
  br label %if.end1056

if.end1056:                                       ; preds = %if.end1055, %land.lhs.true1015, %for.body1004
  br label %for.inc1057

for.inc1057:                                      ; preds = %if.end1056
  %960 = load i32, i32* %pos, align 4
  %inc1058 = add nsw i32 %960, 1
  store i32 %inc1058, i32* %pos, align 4
  br label %for.cond1001

for.end1059:                                      ; preds = %for.cond1001
  %961 = load i16, i16* %ref.addr, align 2
  %conv1060 = sext i16 %961 to i32
  %cmp1061 = icmp sgt i32 %conv1060, 0
  br i1 %cmp1061, label %if.then1063, label %if.else1081

if.then1063:                                      ; preds = %for.end1059
  %962 = load i32, i32* %min_mcost.addr, align 4
  %963 = load i32, i32* @pred_SAD_ref, align 4
  %sub1064 = sub nsw i32 %962, %963
  %conv1065 = sitofp i32 %sub1064 to float
  %964 = load i32, i32* @pred_SAD_ref, align 4
  %conv1066 = sitofp i32 %964 to float
  %965 = load float, float* %betaThird, align 4
  %mul1067 = fmul float %conv1066, %965
  %cmp1068 = fcmp olt float %conv1065, %mul1067
  br i1 %cmp1068, label %if.then1070, label %if.else1071

if.then1070:                                      ; preds = %if.then1063
  br label %third_step

if.else1071:                                      ; preds = %if.then1063
  %966 = load i32, i32* %min_mcost.addr, align 4
  %967 = load i32, i32* @pred_SAD_ref, align 4
  %sub1072 = sub nsw i32 %966, %967
  %conv1073 = sitofp i32 %sub1072 to float
  %968 = load i32, i32* @pred_SAD_ref, align 4
  %conv1074 = sitofp i32 %968 to float
  %969 = load float, float* %betaSec, align 4
  %mul1075 = fmul float %conv1074, %969
  %cmp1076 = fcmp olt float %conv1073, %mul1075
  br i1 %cmp1076, label %if.then1078, label %if.end1079

if.then1078:                                      ; preds = %if.else1071
  br label %sec_step

if.end1079:                                       ; preds = %if.else1071
  br label %if.end1080

if.end1080:                                       ; preds = %if.end1079
  br label %if.end1121

if.else1081:                                      ; preds = %for.end1059
  %970 = load i32, i32* %blocktype.addr, align 4
  %cmp1082 = icmp sgt i32 %970, 1
  br i1 %cmp1082, label %if.then1084, label %if.else1102

if.then1084:                                      ; preds = %if.else1081
  %971 = load i32, i32* %min_mcost.addr, align 4
  %972 = load i32, i32* @pred_SAD_uplayer, align 4
  %sub1085 = sub nsw i32 %971, %972
  %conv1086 = sitofp i32 %sub1085 to float
  %973 = load i32, i32* @pred_SAD_uplayer, align 4
  %conv1087 = sitofp i32 %973 to float
  %974 = load float, float* %betaThird, align 4
  %mul1088 = fmul float %conv1087, %974
  %cmp1089 = fcmp olt float %conv1086, %mul1088
  br i1 %cmp1089, label %if.then1091, label %if.else1092

if.then1091:                                      ; preds = %if.then1084
  br label %third_step

if.else1092:                                      ; preds = %if.then1084
  %975 = load i32, i32* %min_mcost.addr, align 4
  %976 = load i32, i32* @pred_SAD_uplayer, align 4
  %sub1093 = sub nsw i32 %975, %976
  %conv1094 = sitofp i32 %sub1093 to float
  %977 = load i32, i32* @pred_SAD_uplayer, align 4
  %conv1095 = sitofp i32 %977 to float
  %978 = load float, float* %betaSec, align 4
  %mul1096 = fmul float %conv1095, %978
  %cmp1097 = fcmp olt float %conv1094, %mul1096
  br i1 %cmp1097, label %if.then1099, label %if.end1100

if.then1099:                                      ; preds = %if.else1092
  br label %sec_step

if.end1100:                                       ; preds = %if.else1092
  br label %if.end1101

if.end1101:                                       ; preds = %if.end1100
  br label %if.end1120

if.else1102:                                      ; preds = %if.else1081
  %979 = load i32, i32* %min_mcost.addr, align 4
  %980 = load i32, i32* @pred_SAD_space, align 4
  %sub1103 = sub nsw i32 %979, %980
  %conv1104 = sitofp i32 %sub1103 to float
  %981 = load i32, i32* @pred_SAD_space, align 4
  %conv1105 = sitofp i32 %981 to float
  %982 = load float, float* %betaThird, align 4
  %mul1106 = fmul float %conv1105, %982
  %cmp1107 = fcmp olt float %conv1104, %mul1106
  br i1 %cmp1107, label %if.then1109, label %if.else1110

if.then1109:                                      ; preds = %if.else1102
  br label %third_step

if.else1110:                                      ; preds = %if.else1102
  %983 = load i32, i32* %min_mcost.addr, align 4
  %984 = load i32, i32* @pred_SAD_space, align 4
  %sub1111 = sub nsw i32 %983, %984
  %conv1112 = sitofp i32 %sub1111 to float
  %985 = load i32, i32* @pred_SAD_space, align 4
  %conv1113 = sitofp i32 %985 to float
  %986 = load float, float* %betaSec, align 4
  %mul1114 = fmul float %conv1113, %986
  %cmp1115 = fcmp olt float %conv1112, %mul1114
  br i1 %cmp1115, label %if.then1117, label %if.end1118

if.then1117:                                      ; preds = %if.else1110
  br label %sec_step

if.end1118:                                       ; preds = %if.else1110
  br label %if.end1119

if.end1119:                                       ; preds = %if.end1118
  br label %if.end1120

if.end1120:                                       ; preds = %if.end1119, %if.end1101
  br label %if.end1121

if.end1121:                                       ; preds = %if.end1120, %if.end1080
  store i32 1, i32* %i, align 4
  br label %for.cond1122

for.cond1122:                                     ; preds = %for.inc1253, %if.end1121
  %987 = load i32, i32* %i, align 4
  %988 = load i32, i32* %search_range.addr, align 4
  %div1123 = sdiv i32 %988, 4
  %cmp1124 = icmp sle i32 %987, %div1123
  br i1 %cmp1124, label %for.body1126, label %for.end1255

for.body1126:                                     ; preds = %for.cond1122
  store i32 0, i32* %iAbort, align 4
  store i32 0, i32* %m, align 4
  br label %for.cond1127

for.cond1127:                                     ; preds = %for.inc1185, %for.body1126
  %989 = load i32, i32* %m, align 4
  %cmp1128 = icmp slt i32 %989, 16
  br i1 %cmp1128, label %for.body1130, label %for.end1187

for.body1130:                                     ; preds = %for.cond1127
  %990 = load i32, i32* %iXMinNow, align 4
  %991 = load i32, i32* %m, align 4
  %idxprom1131 = sext i32 %991 to i64
  %arrayidx1132 = getelementptr inbounds [16 x i32], [16 x i32]* @FastIntegerPelBlockMotionSearch.Big_Hexagon_x, i64 0, i64 %idxprom1131
  %992 = load i32, i32* %arrayidx1132, align 4
  %993 = load i32, i32* %i, align 4
  %mul1133 = mul nsw i32 %992, %993
  %add1134 = add nsw i32 %990, %mul1133
  store i32 %add1134, i32* %cand_x, align 4
  %994 = load i32, i32* %iYMinNow, align 4
  %995 = load i32, i32* %m, align 4
  %idxprom1135 = sext i32 %995 to i64
  %arrayidx1136 = getelementptr inbounds [16 x i32], [16 x i32]* @FastIntegerPelBlockMotionSearch.Big_Hexagon_y, i64 0, i64 %idxprom1135
  %996 = load i32, i32* %arrayidx1136, align 4
  %997 = load i32, i32* %i, align 4
  %mul1137 = mul nsw i32 %996, %997
  %add1138 = add nsw i32 %994, %mul1137
  store i32 %add1138, i32* %cand_y, align 4
  %998 = load i32, i32* %cand_x, align 4
  %999 = load i32, i32* %center_x, align 4
  %sub1139 = sub nsw i32 %998, %999
  %call1140 = call i32 @abs(i32 %sub1139) #6
  %1000 = load i32, i32* %search_range.addr, align 4
  %cmp1141 = icmp sle i32 %call1140, %1000
  br i1 %cmp1141, label %land.lhs.true1143, label %if.end1184

land.lhs.true1143:                                ; preds = %for.body1130
  %1001 = load i32, i32* %cand_y, align 4
  %1002 = load i32, i32* %center_y, align 4
  %sub1144 = sub nsw i32 %1001, %1002
  %call1145 = call i32 @abs(i32 %sub1144) #6
  %1003 = load i32, i32* %search_range.addr, align 4
  %cmp1146 = icmp sle i32 %call1145, %1003
  br i1 %cmp1146, label %if.then1148, label %if.end1184

if.then1148:                                      ; preds = %land.lhs.true1143
  %1004 = load i32**, i32*** @McostState, align 8
  %1005 = load i32, i32* %cand_y, align 4
  %1006 = load i32, i32* %center_y, align 4
  %sub1149 = sub nsw i32 %1005, %1006
  %1007 = load i32, i32* %search_range.addr, align 4
  %add1150 = add nsw i32 %sub1149, %1007
  %idxprom1151 = sext i32 %add1150 to i64
  %arrayidx1152 = getelementptr inbounds i32*, i32** %1004, i64 %idxprom1151
  %1008 = load i32*, i32** %arrayidx1152, align 8
  %1009 = load i32, i32* %cand_x, align 4
  %1010 = load i32, i32* %center_x, align 4
  %sub1153 = sub nsw i32 %1009, %1010
  %1011 = load i32, i32* %search_range.addr, align 4
  %add1154 = add nsw i32 %sub1153, %1011
  %idxprom1155 = sext i32 %add1154 to i64
  %arrayidx1156 = getelementptr inbounds i32, i32* %1008, i64 %idxprom1155
  %1012 = load i32, i32* %arrayidx1156, align 4
  %tobool1157 = icmp ne i32 %1012, 0
  br i1 %tobool1157, label %if.end1183, label %if.then1158

if.then1158:                                      ; preds = %if.then1148
  %1013 = load i32, i32* %lambda_factor, align 4
  %1014 = load i32*, i32** @mvbits, align 8
  %1015 = load i32, i32* %cand_x, align 4
  %1016 = load i32, i32* %mvshift, align 4
  %shl1159 = shl i32 %1015, %1016
  %1017 = load i32, i32* %pred_x, align 4
  %sub1160 = sub nsw i32 %shl1159, %1017
  %idxprom1161 = sext i32 %sub1160 to i64
  %arrayidx1162 = getelementptr inbounds i32, i32* %1014, i64 %idxprom1161
  %1018 = load i32, i32* %arrayidx1162, align 4
  %1019 = load i32*, i32** @mvbits, align 8
  %1020 = load i32, i32* %cand_y, align 4
  %1021 = load i32, i32* %mvshift, align 4
  %shl1163 = shl i32 %1020, %1021
  %1022 = load i32, i32* %pred_y, align 4
  %sub1164 = sub nsw i32 %shl1163, %1022
  %idxprom1165 = sext i32 %sub1164 to i64
  %arrayidx1166 = getelementptr inbounds i32, i32* %1019, i64 %idxprom1165
  %1023 = load i32, i32* %arrayidx1166, align 4
  %add1167 = add nsw i32 %1018, %1023
  %mul1168 = mul nsw i32 %1013, %add1167
  %shr1169 = ashr i32 %mul1168, 16
  store i32 %shr1169, i32* %mcost, align 4
  %1024 = load i16*, i16** %ref_pic, align 8
  %1025 = load i16**, i16*** %orig_pic.addr, align 8
  %1026 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %1027 = load i32, i32* %blocksize_y, align 4
  %1028 = load i32, i32* %blocksize_x, align 4
  %1029 = load i32, i32* %blocksize_x4, align 4
  %1030 = load i32, i32* %mcost, align 4
  %1031 = load i32, i32* %min_mcost.addr, align 4
  %1032 = load i32, i32* %cand_x, align 4
  %1033 = load i32, i32* %cand_y, align 4
  %call1170 = call i32 @PartCalMad(i16* %1024, i16** %1025, i16* (i32, i16*, i32, i32, i32, i32)* %1026, i32 %1027, i32 %1028, i32 %1029, i32 %1030, i32 %1031, i32 %1032, i32 %1033)
  store i32 %call1170, i32* %mcost, align 4
  %1034 = load i32, i32* %mcost, align 4
  %1035 = load i32**, i32*** @McostState, align 8
  %1036 = load i32, i32* %cand_y, align 4
  %1037 = load i32, i32* %center_y, align 4
  %sub1171 = sub nsw i32 %1036, %1037
  %1038 = load i32, i32* %search_range.addr, align 4
  %add1172 = add nsw i32 %sub1171, %1038
  %idxprom1173 = sext i32 %add1172 to i64
  %arrayidx1174 = getelementptr inbounds i32*, i32** %1035, i64 %idxprom1173
  %1039 = load i32*, i32** %arrayidx1174, align 8
  %1040 = load i32, i32* %cand_x, align 4
  %1041 = load i32, i32* %center_x, align 4
  %sub1175 = sub nsw i32 %1040, %1041
  %1042 = load i32, i32* %search_range.addr, align 4
  %add1176 = add nsw i32 %sub1175, %1042
  %idxprom1177 = sext i32 %add1176 to i64
  %arrayidx1178 = getelementptr inbounds i32, i32* %1039, i64 %idxprom1177
  store i32 %1034, i32* %arrayidx1178, align 4
  %1043 = load i32, i32* %mcost, align 4
  %1044 = load i32, i32* %min_mcost.addr, align 4
  %cmp1179 = icmp slt i32 %1043, %1044
  br i1 %cmp1179, label %if.then1181, label %if.end1182

if.then1181:                                      ; preds = %if.then1158
  %1045 = load i32, i32* %cand_x, align 4
  store i32 %1045, i32* %best_x, align 4
  %1046 = load i32, i32* %cand_y, align 4
  store i32 %1046, i32* %best_y, align 4
  %1047 = load i32, i32* %mcost, align 4
  store i32 %1047, i32* %min_mcost.addr, align 4
  store i32 1, i32* %iAbort, align 4
  br label %if.end1182

if.end1182:                                       ; preds = %if.then1181, %if.then1158
  br label %if.end1183

if.end1183:                                       ; preds = %if.end1182, %if.then1148
  br label %if.end1184

if.end1184:                                       ; preds = %if.end1183, %land.lhs.true1143, %for.body1130
  br label %for.inc1185

for.inc1185:                                      ; preds = %if.end1184
  %1048 = load i32, i32* %m, align 4
  %inc1186 = add nsw i32 %1048, 1
  store i32 %inc1186, i32* %m, align 4
  br label %for.cond1127

for.end1187:                                      ; preds = %for.cond1127
  %1049 = load i32, i32* %iAbort, align 4
  %tobool1188 = icmp ne i32 %1049, 0
  br i1 %tobool1188, label %if.then1189, label %if.end1252

if.then1189:                                      ; preds = %for.end1187
  %1050 = load i16, i16* %ref.addr, align 2
  %conv1190 = sext i16 %1050 to i32
  %cmp1191 = icmp sgt i32 %conv1190, 0
  br i1 %cmp1191, label %if.then1193, label %if.else1211

if.then1193:                                      ; preds = %if.then1189
  %1051 = load i32, i32* %min_mcost.addr, align 4
  %1052 = load i32, i32* @pred_SAD_ref, align 4
  %sub1194 = sub nsw i32 %1051, %1052
  %conv1195 = sitofp i32 %sub1194 to float
  %1053 = load i32, i32* @pred_SAD_ref, align 4
  %conv1196 = sitofp i32 %1053 to float
  %1054 = load float, float* %betaThird, align 4
  %mul1197 = fmul float %conv1196, %1054
  %cmp1198 = fcmp olt float %conv1195, %mul1197
  br i1 %cmp1198, label %if.then1200, label %if.else1201

if.then1200:                                      ; preds = %if.then1193
  br label %third_step

if.else1201:                                      ; preds = %if.then1193
  %1055 = load i32, i32* %min_mcost.addr, align 4
  %1056 = load i32, i32* @pred_SAD_ref, align 4
  %sub1202 = sub nsw i32 %1055, %1056
  %conv1203 = sitofp i32 %sub1202 to float
  %1057 = load i32, i32* @pred_SAD_ref, align 4
  %conv1204 = sitofp i32 %1057 to float
  %1058 = load float, float* %betaSec, align 4
  %mul1205 = fmul float %conv1204, %1058
  %cmp1206 = fcmp olt float %conv1203, %mul1205
  br i1 %cmp1206, label %if.then1208, label %if.end1209

if.then1208:                                      ; preds = %if.else1201
  br label %sec_step

if.end1209:                                       ; preds = %if.else1201
  br label %if.end1210

if.end1210:                                       ; preds = %if.end1209
  br label %if.end1251

if.else1211:                                      ; preds = %if.then1189
  %1059 = load i32, i32* %blocktype.addr, align 4
  %cmp1212 = icmp sgt i32 %1059, 1
  br i1 %cmp1212, label %if.then1214, label %if.else1232

if.then1214:                                      ; preds = %if.else1211
  %1060 = load i32, i32* %min_mcost.addr, align 4
  %1061 = load i32, i32* @pred_SAD_uplayer, align 4
  %sub1215 = sub nsw i32 %1060, %1061
  %conv1216 = sitofp i32 %sub1215 to float
  %1062 = load i32, i32* @pred_SAD_uplayer, align 4
  %conv1217 = sitofp i32 %1062 to float
  %1063 = load float, float* %betaThird, align 4
  %mul1218 = fmul float %conv1217, %1063
  %cmp1219 = fcmp olt float %conv1216, %mul1218
  br i1 %cmp1219, label %if.then1221, label %if.else1222

if.then1221:                                      ; preds = %if.then1214
  br label %third_step

if.else1222:                                      ; preds = %if.then1214
  %1064 = load i32, i32* %min_mcost.addr, align 4
  %1065 = load i32, i32* @pred_SAD_uplayer, align 4
  %sub1223 = sub nsw i32 %1064, %1065
  %conv1224 = sitofp i32 %sub1223 to float
  %1066 = load i32, i32* @pred_SAD_uplayer, align 4
  %conv1225 = sitofp i32 %1066 to float
  %1067 = load float, float* %betaSec, align 4
  %mul1226 = fmul float %conv1225, %1067
  %cmp1227 = fcmp olt float %conv1224, %mul1226
  br i1 %cmp1227, label %if.then1229, label %if.end1230

if.then1229:                                      ; preds = %if.else1222
  br label %sec_step

if.end1230:                                       ; preds = %if.else1222
  br label %if.end1231

if.end1231:                                       ; preds = %if.end1230
  br label %if.end1250

if.else1232:                                      ; preds = %if.else1211
  %1068 = load i32, i32* %min_mcost.addr, align 4
  %1069 = load i32, i32* @pred_SAD_space, align 4
  %sub1233 = sub nsw i32 %1068, %1069
  %conv1234 = sitofp i32 %sub1233 to float
  %1070 = load i32, i32* @pred_SAD_space, align 4
  %conv1235 = sitofp i32 %1070 to float
  %1071 = load float, float* %betaThird, align 4
  %mul1236 = fmul float %conv1235, %1071
  %cmp1237 = fcmp olt float %conv1234, %mul1236
  br i1 %cmp1237, label %if.then1239, label %if.else1240

if.then1239:                                      ; preds = %if.else1232
  br label %third_step

if.else1240:                                      ; preds = %if.else1232
  %1072 = load i32, i32* %min_mcost.addr, align 4
  %1073 = load i32, i32* @pred_SAD_space, align 4
  %sub1241 = sub nsw i32 %1072, %1073
  %conv1242 = sitofp i32 %sub1241 to float
  %1074 = load i32, i32* @pred_SAD_space, align 4
  %conv1243 = sitofp i32 %1074 to float
  %1075 = load float, float* %betaSec, align 4
  %mul1244 = fmul float %conv1243, %1075
  %cmp1245 = fcmp olt float %conv1242, %mul1244
  br i1 %cmp1245, label %if.then1247, label %if.end1248

if.then1247:                                      ; preds = %if.else1240
  br label %sec_step

if.end1248:                                       ; preds = %if.else1240
  br label %if.end1249

if.end1249:                                       ; preds = %if.end1248
  br label %if.end1250

if.end1250:                                       ; preds = %if.end1249, %if.end1231
  br label %if.end1251

if.end1251:                                       ; preds = %if.end1250, %if.end1210
  br label %if.end1252

if.end1252:                                       ; preds = %if.end1251, %for.end1187
  br label %for.inc1253

for.inc1253:                                      ; preds = %if.end1252
  %1076 = load i32, i32* %i, align 4
  %inc1254 = add nsw i32 %1076, 1
  store i32 %inc1254, i32* %i, align 4
  br label %for.cond1122

for.end1255:                                      ; preds = %for.cond1122
  br label %sec_step

sec_step:                                         ; preds = %for.end1255, %if.then1247, %if.then1229, %if.then1208, %if.then1117, %if.then1099, %if.then1078, %if.then996, %if.then978, %if.then957, %if.then729, %if.then722, %if.then704, %if.then683, %if.then389
  %1077 = load i32, i32* %best_x, align 4
  store i32 %1077, i32* %iXMinNow, align 4
  %1078 = load i32, i32* %best_y, align 4
  store i32 %1078, i32* %iYMinNow, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond1256

for.cond1256:                                     ; preds = %for.inc1322, %sec_step
  %1079 = load i32, i32* %i, align 4
  %1080 = load i32, i32* %search_range.addr, align 4
  %cmp1257 = icmp slt i32 %1079, %1080
  br i1 %cmp1257, label %for.body1259, label %for.end1324

for.body1259:                                     ; preds = %for.cond1256
  store i32 1, i32* %iAbort, align 4
  store i32 0, i32* %m, align 4
  br label %for.cond1260

for.cond1260:                                     ; preds = %for.inc1316, %for.body1259
  %1081 = load i32, i32* %m, align 4
  %cmp1261 = icmp slt i32 %1081, 6
  br i1 %cmp1261, label %for.body1263, label %for.end1318

for.body1263:                                     ; preds = %for.cond1260
  %1082 = load i32, i32* %iXMinNow, align 4
  %1083 = load i32, i32* %m, align 4
  %idxprom1264 = sext i32 %1083 to i64
  %arrayidx1265 = getelementptr inbounds [6 x i32], [6 x i32]* @FastIntegerPelBlockMotionSearch.Hexagon_x, i64 0, i64 %idxprom1264
  %1084 = load i32, i32* %arrayidx1265, align 4
  %add1266 = add nsw i32 %1082, %1084
  store i32 %add1266, i32* %cand_x, align 4
  %1085 = load i32, i32* %iYMinNow, align 4
  %1086 = load i32, i32* %m, align 4
  %idxprom1267 = sext i32 %1086 to i64
  %arrayidx1268 = getelementptr inbounds [6 x i32], [6 x i32]* @FastIntegerPelBlockMotionSearch.Hexagon_y, i64 0, i64 %idxprom1267
  %1087 = load i32, i32* %arrayidx1268, align 4
  %add1269 = add nsw i32 %1085, %1087
  store i32 %add1269, i32* %cand_y, align 4
  %1088 = load i32, i32* %cand_x, align 4
  %1089 = load i32, i32* %center_x, align 4
  %sub1270 = sub nsw i32 %1088, %1089
  %call1271 = call i32 @abs(i32 %sub1270) #6
  %1090 = load i32, i32* %search_range.addr, align 4
  %cmp1272 = icmp sle i32 %call1271, %1090
  br i1 %cmp1272, label %land.lhs.true1274, label %if.end1315

land.lhs.true1274:                                ; preds = %for.body1263
  %1091 = load i32, i32* %cand_y, align 4
  %1092 = load i32, i32* %center_y, align 4
  %sub1275 = sub nsw i32 %1091, %1092
  %call1276 = call i32 @abs(i32 %sub1275) #6
  %1093 = load i32, i32* %search_range.addr, align 4
  %cmp1277 = icmp sle i32 %call1276, %1093
  br i1 %cmp1277, label %if.then1279, label %if.end1315

if.then1279:                                      ; preds = %land.lhs.true1274
  %1094 = load i32**, i32*** @McostState, align 8
  %1095 = load i32, i32* %cand_y, align 4
  %1096 = load i32, i32* %center_y, align 4
  %sub1280 = sub nsw i32 %1095, %1096
  %1097 = load i32, i32* %search_range.addr, align 4
  %add1281 = add nsw i32 %sub1280, %1097
  %idxprom1282 = sext i32 %add1281 to i64
  %arrayidx1283 = getelementptr inbounds i32*, i32** %1094, i64 %idxprom1282
  %1098 = load i32*, i32** %arrayidx1283, align 8
  %1099 = load i32, i32* %cand_x, align 4
  %1100 = load i32, i32* %center_x, align 4
  %sub1284 = sub nsw i32 %1099, %1100
  %1101 = load i32, i32* %search_range.addr, align 4
  %add1285 = add nsw i32 %sub1284, %1101
  %idxprom1286 = sext i32 %add1285 to i64
  %arrayidx1287 = getelementptr inbounds i32, i32* %1098, i64 %idxprom1286
  %1102 = load i32, i32* %arrayidx1287, align 4
  %tobool1288 = icmp ne i32 %1102, 0
  br i1 %tobool1288, label %if.end1314, label %if.then1289

if.then1289:                                      ; preds = %if.then1279
  %1103 = load i32, i32* %lambda_factor, align 4
  %1104 = load i32*, i32** @mvbits, align 8
  %1105 = load i32, i32* %cand_x, align 4
  %1106 = load i32, i32* %mvshift, align 4
  %shl1290 = shl i32 %1105, %1106
  %1107 = load i32, i32* %pred_x, align 4
  %sub1291 = sub nsw i32 %shl1290, %1107
  %idxprom1292 = sext i32 %sub1291 to i64
  %arrayidx1293 = getelementptr inbounds i32, i32* %1104, i64 %idxprom1292
  %1108 = load i32, i32* %arrayidx1293, align 4
  %1109 = load i32*, i32** @mvbits, align 8
  %1110 = load i32, i32* %cand_y, align 4
  %1111 = load i32, i32* %mvshift, align 4
  %shl1294 = shl i32 %1110, %1111
  %1112 = load i32, i32* %pred_y, align 4
  %sub1295 = sub nsw i32 %shl1294, %1112
  %idxprom1296 = sext i32 %sub1295 to i64
  %arrayidx1297 = getelementptr inbounds i32, i32* %1109, i64 %idxprom1296
  %1113 = load i32, i32* %arrayidx1297, align 4
  %add1298 = add nsw i32 %1108, %1113
  %mul1299 = mul nsw i32 %1103, %add1298
  %shr1300 = ashr i32 %mul1299, 16
  store i32 %shr1300, i32* %mcost, align 4
  %1114 = load i16*, i16** %ref_pic, align 8
  %1115 = load i16**, i16*** %orig_pic.addr, align 8
  %1116 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %1117 = load i32, i32* %blocksize_y, align 4
  %1118 = load i32, i32* %blocksize_x, align 4
  %1119 = load i32, i32* %blocksize_x4, align 4
  %1120 = load i32, i32* %mcost, align 4
  %1121 = load i32, i32* %min_mcost.addr, align 4
  %1122 = load i32, i32* %cand_x, align 4
  %1123 = load i32, i32* %cand_y, align 4
  %call1301 = call i32 @PartCalMad(i16* %1114, i16** %1115, i16* (i32, i16*, i32, i32, i32, i32)* %1116, i32 %1117, i32 %1118, i32 %1119, i32 %1120, i32 %1121, i32 %1122, i32 %1123)
  store i32 %call1301, i32* %mcost, align 4
  %1124 = load i32, i32* %mcost, align 4
  %1125 = load i32**, i32*** @McostState, align 8
  %1126 = load i32, i32* %cand_y, align 4
  %1127 = load i32, i32* %center_y, align 4
  %sub1302 = sub nsw i32 %1126, %1127
  %1128 = load i32, i32* %search_range.addr, align 4
  %add1303 = add nsw i32 %sub1302, %1128
  %idxprom1304 = sext i32 %add1303 to i64
  %arrayidx1305 = getelementptr inbounds i32*, i32** %1125, i64 %idxprom1304
  %1129 = load i32*, i32** %arrayidx1305, align 8
  %1130 = load i32, i32* %cand_x, align 4
  %1131 = load i32, i32* %center_x, align 4
  %sub1306 = sub nsw i32 %1130, %1131
  %1132 = load i32, i32* %search_range.addr, align 4
  %add1307 = add nsw i32 %sub1306, %1132
  %idxprom1308 = sext i32 %add1307 to i64
  %arrayidx1309 = getelementptr inbounds i32, i32* %1129, i64 %idxprom1308
  store i32 %1124, i32* %arrayidx1309, align 4
  %1133 = load i32, i32* %mcost, align 4
  %1134 = load i32, i32* %min_mcost.addr, align 4
  %cmp1310 = icmp slt i32 %1133, %1134
  br i1 %cmp1310, label %if.then1312, label %if.end1313

if.then1312:                                      ; preds = %if.then1289
  %1135 = load i32, i32* %cand_x, align 4
  store i32 %1135, i32* %best_x, align 4
  %1136 = load i32, i32* %cand_y, align 4
  store i32 %1136, i32* %best_y, align 4
  %1137 = load i32, i32* %mcost, align 4
  store i32 %1137, i32* %min_mcost.addr, align 4
  store i32 0, i32* %iAbort, align 4
  br label %if.end1313

if.end1313:                                       ; preds = %if.then1312, %if.then1289
  br label %if.end1314

if.end1314:                                       ; preds = %if.end1313, %if.then1279
  br label %if.end1315

if.end1315:                                       ; preds = %if.end1314, %land.lhs.true1274, %for.body1263
  br label %for.inc1316

for.inc1316:                                      ; preds = %if.end1315
  %1138 = load i32, i32* %m, align 4
  %inc1317 = add nsw i32 %1138, 1
  store i32 %inc1317, i32* %m, align 4
  br label %for.cond1260

for.end1318:                                      ; preds = %for.cond1260
  %1139 = load i32, i32* %iAbort, align 4
  %tobool1319 = icmp ne i32 %1139, 0
  br i1 %tobool1319, label %if.then1320, label %if.end1321

if.then1320:                                      ; preds = %for.end1318
  br label %for.end1324

if.end1321:                                       ; preds = %for.end1318
  %1140 = load i32, i32* %best_x, align 4
  store i32 %1140, i32* %iXMinNow, align 4
  %1141 = load i32, i32* %best_y, align 4
  store i32 %1141, i32* %iYMinNow, align 4
  br label %for.inc1322

for.inc1322:                                      ; preds = %if.end1321
  %1142 = load i32, i32* %i, align 4
  %inc1323 = add nsw i32 %1142, 1
  store i32 %inc1323, i32* %i, align 4
  br label %for.cond1256

for.end1324:                                      ; preds = %if.then1320, %for.cond1256
  br label %third_step

third_step:                                       ; preds = %for.end1324, %if.then1239, %if.then1221, %if.then1200, %if.then1109, %if.then1091, %if.then1070, %if.then988, %if.then970, %if.then949, %if.then714, %if.then696, %if.then675, %if.then381
  %1143 = load i32, i32* %best_x, align 4
  store i32 %1143, i32* %iXMinNow, align 4
  %1144 = load i32, i32* %best_y, align 4
  store i32 %1144, i32* %iYMinNow, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond1325

for.cond1325:                                     ; preds = %for.inc1391, %third_step
  %1145 = load i32, i32* %i, align 4
  %1146 = load i32, i32* %search_range.addr, align 4
  %cmp1326 = icmp slt i32 %1145, %1146
  br i1 %cmp1326, label %for.body1328, label %for.end1393

for.body1328:                                     ; preds = %for.cond1325
  store i32 65536, i32* %iSADLayer, align 4
  store i32 1, i32* %iAbort, align 4
  store i32 0, i32* %m, align 4
  br label %for.cond1329

for.cond1329:                                     ; preds = %for.inc1385, %for.body1328
  %1147 = load i32, i32* %m, align 4
  %cmp1330 = icmp slt i32 %1147, 4
  br i1 %cmp1330, label %for.body1332, label %for.end1387

for.body1332:                                     ; preds = %for.cond1329
  %1148 = load i32, i32* %iXMinNow, align 4
  %1149 = load i32, i32* %m, align 4
  %idxprom1333 = sext i32 %1149 to i64
  %arrayidx1334 = getelementptr inbounds [4 x i32], [4 x i32]* @FastIntegerPelBlockMotionSearch.Diamond_x, i64 0, i64 %idxprom1333
  %1150 = load i32, i32* %arrayidx1334, align 4
  %add1335 = add nsw i32 %1148, %1150
  store i32 %add1335, i32* %cand_x, align 4
  %1151 = load i32, i32* %iYMinNow, align 4
  %1152 = load i32, i32* %m, align 4
  %idxprom1336 = sext i32 %1152 to i64
  %arrayidx1337 = getelementptr inbounds [4 x i32], [4 x i32]* @FastIntegerPelBlockMotionSearch.Diamond_y, i64 0, i64 %idxprom1336
  %1153 = load i32, i32* %arrayidx1337, align 4
  %add1338 = add nsw i32 %1151, %1153
  store i32 %add1338, i32* %cand_y, align 4
  %1154 = load i32, i32* %cand_x, align 4
  %1155 = load i32, i32* %center_x, align 4
  %sub1339 = sub nsw i32 %1154, %1155
  %call1340 = call i32 @abs(i32 %sub1339) #6
  %1156 = load i32, i32* %search_range.addr, align 4
  %cmp1341 = icmp sle i32 %call1340, %1156
  br i1 %cmp1341, label %land.lhs.true1343, label %if.end1384

land.lhs.true1343:                                ; preds = %for.body1332
  %1157 = load i32, i32* %cand_y, align 4
  %1158 = load i32, i32* %center_y, align 4
  %sub1344 = sub nsw i32 %1157, %1158
  %call1345 = call i32 @abs(i32 %sub1344) #6
  %1159 = load i32, i32* %search_range.addr, align 4
  %cmp1346 = icmp sle i32 %call1345, %1159
  br i1 %cmp1346, label %if.then1348, label %if.end1384

if.then1348:                                      ; preds = %land.lhs.true1343
  %1160 = load i32**, i32*** @McostState, align 8
  %1161 = load i32, i32* %cand_y, align 4
  %1162 = load i32, i32* %center_y, align 4
  %sub1349 = sub nsw i32 %1161, %1162
  %1163 = load i32, i32* %search_range.addr, align 4
  %add1350 = add nsw i32 %sub1349, %1163
  %idxprom1351 = sext i32 %add1350 to i64
  %arrayidx1352 = getelementptr inbounds i32*, i32** %1160, i64 %idxprom1351
  %1164 = load i32*, i32** %arrayidx1352, align 8
  %1165 = load i32, i32* %cand_x, align 4
  %1166 = load i32, i32* %center_x, align 4
  %sub1353 = sub nsw i32 %1165, %1166
  %1167 = load i32, i32* %search_range.addr, align 4
  %add1354 = add nsw i32 %sub1353, %1167
  %idxprom1355 = sext i32 %add1354 to i64
  %arrayidx1356 = getelementptr inbounds i32, i32* %1164, i64 %idxprom1355
  %1168 = load i32, i32* %arrayidx1356, align 4
  %tobool1357 = icmp ne i32 %1168, 0
  br i1 %tobool1357, label %if.end1383, label %if.then1358

if.then1358:                                      ; preds = %if.then1348
  %1169 = load i32, i32* %lambda_factor, align 4
  %1170 = load i32*, i32** @mvbits, align 8
  %1171 = load i32, i32* %cand_x, align 4
  %1172 = load i32, i32* %mvshift, align 4
  %shl1359 = shl i32 %1171, %1172
  %1173 = load i32, i32* %pred_x, align 4
  %sub1360 = sub nsw i32 %shl1359, %1173
  %idxprom1361 = sext i32 %sub1360 to i64
  %arrayidx1362 = getelementptr inbounds i32, i32* %1170, i64 %idxprom1361
  %1174 = load i32, i32* %arrayidx1362, align 4
  %1175 = load i32*, i32** @mvbits, align 8
  %1176 = load i32, i32* %cand_y, align 4
  %1177 = load i32, i32* %mvshift, align 4
  %shl1363 = shl i32 %1176, %1177
  %1178 = load i32, i32* %pred_y, align 4
  %sub1364 = sub nsw i32 %shl1363, %1178
  %idxprom1365 = sext i32 %sub1364 to i64
  %arrayidx1366 = getelementptr inbounds i32, i32* %1175, i64 %idxprom1365
  %1179 = load i32, i32* %arrayidx1366, align 4
  %add1367 = add nsw i32 %1174, %1179
  %mul1368 = mul nsw i32 %1169, %add1367
  %shr1369 = ashr i32 %mul1368, 16
  store i32 %shr1369, i32* %mcost, align 4
  %1180 = load i16*, i16** %ref_pic, align 8
  %1181 = load i16**, i16*** %orig_pic.addr, align 8
  %1182 = load i16* (i32, i16*, i32, i32, i32, i32)*, i16* (i32, i16*, i32, i32, i32, i32)** %get_ref_line, align 8
  %1183 = load i32, i32* %blocksize_y, align 4
  %1184 = load i32, i32* %blocksize_x, align 4
  %1185 = load i32, i32* %blocksize_x4, align 4
  %1186 = load i32, i32* %mcost, align 4
  %1187 = load i32, i32* %min_mcost.addr, align 4
  %1188 = load i32, i32* %cand_x, align 4
  %1189 = load i32, i32* %cand_y, align 4
  %call1370 = call i32 @PartCalMad(i16* %1180, i16** %1181, i16* (i32, i16*, i32, i32, i32, i32)* %1182, i32 %1183, i32 %1184, i32 %1185, i32 %1186, i32 %1187, i32 %1188, i32 %1189)
  store i32 %call1370, i32* %mcost, align 4
  %1190 = load i32, i32* %mcost, align 4
  %1191 = load i32**, i32*** @McostState, align 8
  %1192 = load i32, i32* %cand_y, align 4
  %1193 = load i32, i32* %center_y, align 4
  %sub1371 = sub nsw i32 %1192, %1193
  %1194 = load i32, i32* %search_range.addr, align 4
  %add1372 = add nsw i32 %sub1371, %1194
  %idxprom1373 = sext i32 %add1372 to i64
  %arrayidx1374 = getelementptr inbounds i32*, i32** %1191, i64 %idxprom1373
  %1195 = load i32*, i32** %arrayidx1374, align 8
  %1196 = load i32, i32* %cand_x, align 4
  %1197 = load i32, i32* %center_x, align 4
  %sub1375 = sub nsw i32 %1196, %1197
  %1198 = load i32, i32* %search_range.addr, align 4
  %add1376 = add nsw i32 %sub1375, %1198
  %idxprom1377 = sext i32 %add1376 to i64
  %arrayidx1378 = getelementptr inbounds i32, i32* %1195, i64 %idxprom1377
  store i32 %1190, i32* %arrayidx1378, align 4
  %1199 = load i32, i32* %mcost, align 4
  %1200 = load i32, i32* %min_mcost.addr, align 4
  %cmp1379 = icmp slt i32 %1199, %1200
  br i1 %cmp1379, label %if.then1381, label %if.end1382

if.then1381:                                      ; preds = %if.then1358
  %1201 = load i32, i32* %cand_x, align 4
  store i32 %1201, i32* %best_x, align 4
  %1202 = load i32, i32* %cand_y, align 4
  store i32 %1202, i32* %best_y, align 4
  %1203 = load i32, i32* %mcost, align 4
  store i32 %1203, i32* %min_mcost.addr, align 4
  store i32 0, i32* %iAbort, align 4
  br label %if.end1382

if.end1382:                                       ; preds = %if.then1381, %if.then1358
  br label %if.end1383

if.end1383:                                       ; preds = %if.end1382, %if.then1348
  br label %if.end1384

if.end1384:                                       ; preds = %if.end1383, %land.lhs.true1343, %for.body1332
  br label %for.inc1385

for.inc1385:                                      ; preds = %if.end1384
  %1204 = load i32, i32* %m, align 4
  %inc1386 = add nsw i32 %1204, 1
  store i32 %inc1386, i32* %m, align 4
  br label %for.cond1329

for.end1387:                                      ; preds = %for.cond1329
  %1205 = load i32, i32* %iAbort, align 4
  %tobool1388 = icmp ne i32 %1205, 0
  br i1 %tobool1388, label %if.then1389, label %if.end1390

if.then1389:                                      ; preds = %for.end1387
  br label %for.end1393

if.end1390:                                       ; preds = %for.end1387
  %1206 = load i32, i32* %best_x, align 4
  store i32 %1206, i32* %iXMinNow, align 4
  %1207 = load i32, i32* %best_y, align 4
  store i32 %1207, i32* %iYMinNow, align 4
  br label %for.inc1391

for.inc1391:                                      ; preds = %if.end1390
  %1208 = load i32, i32* %i, align 4
  %inc1392 = add nsw i32 %1208, 1
  store i32 %inc1392, i32* %i, align 4
  br label %for.cond1325

for.end1393:                                      ; preds = %if.then1389, %for.cond1325
  %1209 = load i32, i32* %best_x, align 4
  %1210 = load i32, i32* %pic_pix_x.addr, align 4
  %sub1394 = sub nsw i32 %1209, %1210
  %conv1395 = trunc i32 %sub1394 to i16
  %1211 = load i16*, i16** %mv_x.addr, align 8
  store i16 %conv1395, i16* %1211, align 2
  %1212 = load i32, i32* %best_y, align 4
  %1213 = load i32, i32* %pic_pix_y.addr, align 4
  %sub1396 = sub nsw i32 %1212, %1213
  %conv1397 = trunc i32 %sub1396 to i16
  %1214 = load i16*, i16** %mv_y.addr, align 8
  store i16 %conv1397, i16* %1214, align 2
  %1215 = load i32, i32* %min_mcost.addr, align 4
  %1216 = load i32, i32* %canary
  %1217 = icmp eq i32 %1216, 1670002044
  br i1 %1217, label %1218, label %func_exit

1218:                                             ; preds = %for.end1393, %func_exit
  ret i32 %1215

func_exit:                                        ; preds = %for.end1393
  call void @detect_breach()
  br label %1218
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @free_mem_mincost.77(i32***** %mv) #0 {
entry:
  %canary = alloca i32
  store i32 558938168, i32* %canary
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %i = alloca i32, align 4
  %mv.addr = alloca i32*****, align 8
  %l = alloca i32, align 4
  store i32***** %mv, i32****** %mv.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc35, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %width = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %1, i32 0, i32 13
  %2 = load i32, i32* %width, align 4
  %div = sdiv i32 %2, 4
  %cmp = icmp slt i32 %0, %div
  br i1 %cmp, label %for.body, label %for.end37

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc30, %for.body
  %3 = load i32, i32* %j, align 4
  %4 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %height = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %4, i32 0, i32 15
  %5 = load i32, i32* %height, align 4
  %div2 = sdiv i32 %5, 4
  %cmp3 = icmp slt i32 %3, %div2
  br i1 %cmp3, label %for.body4, label %for.end32

for.body4:                                        ; preds = %for.cond1
  store i32 0, i32* %k, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc23, %for.body4
  %6 = load i32, i32* %k, align 4
  %7 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %max_num_references = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %7, i32 0, i32 9
  %8 = load i32, i32* %max_num_references, align 4
  %cmp6 = icmp slt i32 %6, %8
  br i1 %cmp6, label %for.body7, label %for.end25

for.body7:                                        ; preds = %for.cond5
  store i32 0, i32* %l, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc, %for.body7
  %9 = load i32, i32* %l, align 4
  %cmp9 = icmp slt i32 %9, 9
  br i1 %cmp9, label %for.body10, label %for.end

for.body10:                                       ; preds = %for.cond8
  %10 = load i32*****, i32****** %mv.addr, align 8
  %11 = load i32, i32* %i, align 4
  %idxprom = sext i32 %11 to i64
  %arrayidx = getelementptr inbounds i32****, i32***** %10, i64 %idxprom
  %12 = load i32****, i32***** %arrayidx, align 8
  %13 = load i32, i32* %j, align 4
  %idxprom11 = sext i32 %13 to i64
  %arrayidx12 = getelementptr inbounds i32***, i32**** %12, i64 %idxprom11
  %14 = load i32***, i32**** %arrayidx12, align 8
  %15 = load i32, i32* %k, align 4
  %idxprom13 = sext i32 %15 to i64
  %arrayidx14 = getelementptr inbounds i32**, i32*** %14, i64 %idxprom13
  %16 = load i32**, i32*** %arrayidx14, align 8
  %17 = load i32, i32* %l, align 4
  %idxprom15 = sext i32 %17 to i64
  %arrayidx16 = getelementptr inbounds i32*, i32** %16, i64 %idxprom15
  %18 = load i32*, i32** %arrayidx16, align 8
  %19 = bitcast i32* %18 to i8*
  call void @free(i8* %19) #5
  br label %for.inc

for.inc:                                          ; preds = %for.body10
  %20 = load i32, i32* %l, align 4
  %inc = add nsw i32 %20, 1
  store i32 %inc, i32* %l, align 4
  br label %for.cond8

for.end:                                          ; preds = %for.cond8
  %21 = load i32*****, i32****** %mv.addr, align 8
  %22 = load i32, i32* %i, align 4
  %idxprom17 = sext i32 %22 to i64
  %arrayidx18 = getelementptr inbounds i32****, i32***** %21, i64 %idxprom17
  %23 = load i32****, i32***** %arrayidx18, align 8
  %24 = load i32, i32* %j, align 4
  %idxprom19 = sext i32 %24 to i64
  %arrayidx20 = getelementptr inbounds i32***, i32**** %23, i64 %idxprom19
  %25 = load i32***, i32**** %arrayidx20, align 8
  %26 = load i32, i32* %k, align 4
  %idxprom21 = sext i32 %26 to i64
  %arrayidx22 = getelementptr inbounds i32**, i32*** %25, i64 %idxprom21
  %27 = load i32**, i32*** %arrayidx22, align 8
  %28 = bitcast i32** %27 to i8*
  call void @free(i8* %28) #5
  br label %for.inc23

for.inc23:                                        ; preds = %for.end
  %29 = load i32, i32* %k, align 4
  %inc24 = add nsw i32 %29, 1
  store i32 %inc24, i32* %k, align 4
  br label %for.cond5

for.end25:                                        ; preds = %for.cond5
  %30 = load i32*****, i32****** %mv.addr, align 8
  %31 = load i32, i32* %i, align 4
  %idxprom26 = sext i32 %31 to i64
  %arrayidx27 = getelementptr inbounds i32****, i32***** %30, i64 %idxprom26
  %32 = load i32****, i32***** %arrayidx27, align 8
  %33 = load i32, i32* %j, align 4
  %idxprom28 = sext i32 %33 to i64
  %arrayidx29 = getelementptr inbounds i32***, i32**** %32, i64 %idxprom28
  %34 = load i32***, i32**** %arrayidx29, align 8
  %35 = bitcast i32*** %34 to i8*
  call void @free(i8* %35) #5
  br label %for.inc30

for.inc30:                                        ; preds = %for.end25
  %36 = load i32, i32* %j, align 4
  %inc31 = add nsw i32 %36, 1
  store i32 %inc31, i32* %j, align 4
  br label %for.cond1

for.end32:                                        ; preds = %for.cond1
  %37 = load i32*****, i32****** %mv.addr, align 8
  %38 = load i32, i32* %i, align 4
  %idxprom33 = sext i32 %38 to i64
  %arrayidx34 = getelementptr inbounds i32****, i32***** %37, i64 %idxprom33
  %39 = load i32****, i32***** %arrayidx34, align 8
  %40 = bitcast i32**** %39 to i8*
  call void @free(i8* %40) #5
  br label %for.inc35

for.inc35:                                        ; preds = %for.end32
  %41 = load i32, i32* %i, align 4
  %inc36 = add nsw i32 %41, 1
  store i32 %inc36, i32* %i, align 4
  br label %for.cond

for.end37:                                        ; preds = %for.cond
  %42 = load i32*****, i32****** %mv.addr, align 8
  %43 = bitcast i32***** %42 to i8*
  call void @free(i8* %43) #5
  %44 = load i32, i32* %canary
  %45 = icmp eq i32 %44, 558938168
  br i1 %45, label %46, label %func_exit

46:                                               ; preds = %for.end37, %func_exit
  ret void

func_exit:                                        ; preds = %for.end37
  call void @detect_breach()
  br label %46
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @DefineThresholdMB.78() #0 {
entry:
  %gb_qp_per = alloca i32, align 4
  %gb_qp_rem = alloca i32, align 4
  %Thresh4x4 = alloca i32, align 4
  %canary = alloca i32
  store i32 1890388970, i32* %canary
  %gb_q_bits = alloca i32, align 4
  %gb_qp_const = alloca i32, align 4
  %0 = load %struct.InputParameters*, %struct.InputParameters** @input, align 8
  %qpN = getelementptr inbounds %struct.InputParameters, %struct.InputParameters* %0, i32 0, i32 4
  %1 = load i32, i32* %qpN, align 8
  %sub = sub nsw i32 %1, 0
  %div = sdiv i32 %sub, 6
  store i32 %div, i32* %gb_qp_per, align 4
  %2 = load %struct.InputParameters*, %struct.InputParameters** @input, align 8
  %qpN1 = getelementptr inbounds %struct.InputParameters, %struct.InputParameters* %2, i32 0, i32 4
  %3 = load i32, i32* %qpN1, align 8
  %sub2 = sub nsw i32 %3, 0
  %rem = srem i32 %sub2, 6
  store i32 %rem, i32* %gb_qp_rem, align 4
  %4 = load i32, i32* %gb_qp_per, align 4
  %add = add nsw i32 15, %4
  store i32 %add, i32* %gb_q_bits, align 4
  %5 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %type = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %5, i32 0, i32 6
  %6 = load i32, i32* %type, align 8
  %cmp = icmp eq i32 %6, 2
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %7 = load i32, i32* %gb_q_bits, align 4
  %shl = shl i32 1, %7
  %div3 = sdiv i32 %shl, 3
  store i32 %div3, i32* %gb_qp_const, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %8 = load i32, i32* %gb_q_bits, align 4
  %shl4 = shl i32 1, %8
  %div5 = sdiv i32 %shl4, 6
  store i32 %div5, i32* %gb_qp_const, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %gb_q_bits, align 4
  %shl6 = shl i32 1, %9
  %10 = load i32, i32* %gb_qp_const, align 4
  %sub7 = sub nsw i32 %shl6, %10
  %11 = load i32, i32* %gb_qp_rem, align 4
  %idxprom = sext i32 %11 to i64
  %arrayidx = getelementptr inbounds [6 x [4 x [4 x i32]]], [6 x [4 x [4 x i32]]]* @quant_coef, i64 0, i64 %idxprom
  %arrayidx8 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %arrayidx, i64 0, i64 0
  %arrayidx9 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx8, i64 0, i64 0
  %12 = load i32, i32* %arrayidx9, align 16
  %div10 = sdiv i32 %sub7, %12
  store i32 %div10, i32* %Thresh4x4, align 4
  %13 = load i32, i32* %Thresh4x4, align 4
  %conv = sitofp i32 %13 to float
  %div11 = fdiv float %conv, 0x403670A3E0000000
  store float %div11, float* @Quantize_step, align 4
  %14 = load float, float* @Quantize_step, align 4
  %mul = fmul float 2.560000e+02, %14
  store float %mul, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 7), align 4
  %15 = load float, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 7), align 4
  %mul12 = fmul float %15, 4.000000e+00
  store float %mul12, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 6), align 8
  %16 = load float, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 7), align 4
  %mul13 = fmul float %16, 4.000000e+00
  store float %mul13, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 5), align 4
  %17 = load float, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 5), align 4
  %mul14 = fmul float %17, 4.000000e+00
  store float %mul14, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 4), align 16
  %18 = load float, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 4), align 16
  %mul15 = fmul float %18, 4.000000e+00
  store float %mul15, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 3), align 4
  %19 = load float, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 4), align 16
  %mul16 = fmul float %19, 4.000000e+00
  store float %mul16, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 2), align 8
  %20 = load float, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 2), align 8
  %mul17 = fmul float %20, 4.000000e+00
  store float %mul17, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 1), align 4
  %21 = load i32, i32* %canary
  %22 = icmp eq i32 %21, 1890388970
  br i1 %22, label %23, label %func_exit

23:                                               ; preds = %if.end, %func_exit
  ret void

func_exit:                                        ; preds = %if.end
  call void @detect_breach()
  br label %23
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @skip_intrabk_SAD.79(i32 %best_mode, i32 %ref_max) #0 {
entry:
  %k = alloca i32, align 4
  %ref = alloca i32, align 4
  %j = alloca i32, align 4
  %best_mode.addr = alloca i32, align 4
  %canary = alloca i32
  store i32 612358926, i32* %canary
  %i = alloca i32, align 4
  %ref_max.addr = alloca i32, align 4
  store i32 %best_mode, i32* %best_mode.addr, align 4
  store i32 %ref_max, i32* %ref_max.addr, align 4
  %0 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %number = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %0, i32 0, i32 0
  %1 = load i32, i32* %number, align 8
  %cmp = icmp sgt i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %best_mode.addr, align 4
  %cmp1 = icmp eq i32 %2, 9
  br i1 %cmp1, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.then
  %3 = load i32, i32* %best_mode.addr, align 4
  %cmp2 = icmp eq i32 %3, 10
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.then
  %4 = phi i1 [ true, %if.then ], [ %cmp2, %lor.rhs ]
  %5 = zext i1 %4 to i64
  %cond = select i1 %4, i32 1, i32 0
  %6 = load i32*, i32** @flag_intra, align 8
  %7 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %pix_x = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %7, i32 0, i32 33
  %8 = load i32, i32* %pix_x, align 8
  %shr = ashr i32 %8, 4
  %idxprom = sext i32 %shr to i64
  %arrayidx = getelementptr inbounds i32, i32* %6, i64 %idxprom
  store i32 %cond, i32* %arrayidx, align 4
  br label %if.end

if.end:                                           ; preds = %lor.end, %entry
  %9 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %type = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %9, i32 0, i32 6
  %10 = load i32, i32* %type, align 8
  %cmp3 = icmp ne i32 %10, 0
  br i1 %cmp3, label %land.lhs.true, label %if.end39

land.lhs.true:                                    ; preds = %if.end
  %11 = load i32, i32* %best_mode.addr, align 4
  %cmp4 = icmp eq i32 %11, 9
  br i1 %cmp4, label %if.then6, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %12 = load i32, i32* %best_mode.addr, align 4
  %cmp5 = icmp eq i32 %12, 10
  br i1 %cmp5, label %if.then6, label %if.end39

if.then6:                                         ; preds = %lor.lhs.false, %land.lhs.true
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc36, %if.then6
  %13 = load i32, i32* %i, align 4
  %cmp7 = icmp slt i32 %13, 4
  br i1 %cmp7, label %for.body, label %for.end38

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc33, %for.body
  %14 = load i32, i32* %j, align 4
  %cmp9 = icmp slt i32 %14, 4
  br i1 %cmp9, label %for.body10, label %for.end35

for.body10:                                       ; preds = %for.cond8
  store i32 1, i32* %k, align 4
  br label %for.cond11

for.cond11:                                       ; preds = %for.inc30, %for.body10
  %15 = load i32, i32* %k, align 4
  %cmp12 = icmp slt i32 %15, 8
  br i1 %cmp12, label %for.body13, label %for.end32

for.body13:                                       ; preds = %for.cond11
  store i32 0, i32* %ref, align 4
  br label %for.cond14

for.cond14:                                       ; preds = %for.inc, %for.body13
  %16 = load i32, i32* %ref, align 4
  %17 = load i32, i32* %ref_max.addr, align 4
  %cmp15 = icmp slt i32 %16, %17
  br i1 %cmp15, label %for.body16, label %for.end

for.body16:                                       ; preds = %for.cond14
  %18 = load i32*****, i32****** @all_mincost, align 8
  %19 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %pix_x17 = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %19, i32 0, i32 33
  %20 = load i32, i32* %pix_x17, align 8
  %shr18 = ashr i32 %20, 2
  %21 = load i32, i32* %i, align 4
  %add = add nsw i32 %shr18, %21
  %idxprom19 = sext i32 %add to i64
  %arrayidx20 = getelementptr inbounds i32****, i32***** %18, i64 %idxprom19
  %22 = load i32****, i32***** %arrayidx20, align 8
  %23 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %pix_y = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %23, i32 0, i32 34
  %24 = load i32, i32* %pix_y, align 4
  %shr21 = ashr i32 %24, 2
  %25 = load i32, i32* %j, align 4
  %add22 = add nsw i32 %shr21, %25
  %idxprom23 = sext i32 %add22 to i64
  %arrayidx24 = getelementptr inbounds i32***, i32**** %22, i64 %idxprom23
  %26 = load i32***, i32**** %arrayidx24, align 8
  %27 = load i32, i32* %ref, align 4
  %idxprom25 = sext i32 %27 to i64
  %arrayidx26 = getelementptr inbounds i32**, i32*** %26, i64 %idxprom25
  %28 = load i32**, i32*** %arrayidx26, align 8
  %29 = load i32, i32* %k, align 4
  %idxprom27 = sext i32 %29 to i64
  %arrayidx28 = getelementptr inbounds i32*, i32** %28, i64 %idxprom27
  %30 = load i32*, i32** %arrayidx28, align 8
  %arrayidx29 = getelementptr inbounds i32, i32* %30, i64 0
  store i32 0, i32* %arrayidx29, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body16
  %31 = load i32, i32* %ref, align 4
  %inc = add nsw i32 %31, 1
  store i32 %inc, i32* %ref, align 4
  br label %for.cond14

for.end:                                          ; preds = %for.cond14
  br label %for.inc30

for.inc30:                                        ; preds = %for.end
  %32 = load i32, i32* %k, align 4
  %inc31 = add nsw i32 %32, 1
  store i32 %inc31, i32* %k, align 4
  br label %for.cond11

for.end32:                                        ; preds = %for.cond11
  br label %for.inc33

for.inc33:                                        ; preds = %for.end32
  %33 = load i32, i32* %j, align 4
  %inc34 = add nsw i32 %33, 1
  store i32 %inc34, i32* %j, align 4
  br label %for.cond8

for.end35:                                        ; preds = %for.cond8
  br label %for.inc36

for.inc36:                                        ; preds = %for.end35
  %34 = load i32, i32* %i, align 4
  %inc37 = add nsw i32 %34, 1
  store i32 %inc37, i32* %i, align 4
  br label %for.cond

for.end38:                                        ; preds = %for.cond
  br label %if.end39

if.end39:                                         ; preds = %for.end38, %lor.lhs.false, %if.end
  %35 = load i32, i32* %canary
  %36 = icmp eq i32 %35, 612358926
  br i1 %36, label %37, label %func_exit

37:                                               ; preds = %if.end39, %func_exit
  ret void

func_exit:                                        ; preds = %if.end39
  call void @detect_breach()
  br label %37
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @DefineThresholdMB.80() #0 {
entry:
  %gb_qp_const = alloca i32, align 4
  %gb_qp_per = alloca i32, align 4
  %gb_q_bits = alloca i32, align 4
  %canary = alloca i32
  store i32 1405924938, i32* %canary
  %Thresh4x4 = alloca i32, align 4
  %gb_qp_rem = alloca i32, align 4
  %0 = load %struct.InputParameters*, %struct.InputParameters** @input, align 8
  %qpN = getelementptr inbounds %struct.InputParameters, %struct.InputParameters* %0, i32 0, i32 4
  %1 = load i32, i32* %qpN, align 8
  %sub = sub nsw i32 %1, 0
  %div = sdiv i32 %sub, 6
  store i32 %div, i32* %gb_qp_per, align 4
  %2 = load %struct.InputParameters*, %struct.InputParameters** @input, align 8
  %qpN1 = getelementptr inbounds %struct.InputParameters, %struct.InputParameters* %2, i32 0, i32 4
  %3 = load i32, i32* %qpN1, align 8
  %sub2 = sub nsw i32 %3, 0
  %rem = srem i32 %sub2, 6
  store i32 %rem, i32* %gb_qp_rem, align 4
  %4 = load i32, i32* %gb_qp_per, align 4
  %add = add nsw i32 15, %4
  store i32 %add, i32* %gb_q_bits, align 4
  %5 = load %struct.ImageParameters*, %struct.ImageParameters** @img, align 8
  %type = getelementptr inbounds %struct.ImageParameters, %struct.ImageParameters* %5, i32 0, i32 6
  %6 = load i32, i32* %type, align 8
  %cmp = icmp eq i32 %6, 2
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %7 = load i32, i32* %gb_q_bits, align 4
  %shl = shl i32 1, %7
  %div3 = sdiv i32 %shl, 3
  store i32 %div3, i32* %gb_qp_const, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %8 = load i32, i32* %gb_q_bits, align 4
  %shl4 = shl i32 1, %8
  %div5 = sdiv i32 %shl4, 6
  store i32 %div5, i32* %gb_qp_const, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %gb_q_bits, align 4
  %shl6 = shl i32 1, %9
  %10 = load i32, i32* %gb_qp_const, align 4
  %sub7 = sub nsw i32 %shl6, %10
  %11 = load i32, i32* %gb_qp_rem, align 4
  %idxprom = sext i32 %11 to i64
  %arrayidx = getelementptr inbounds [6 x [4 x [4 x i32]]], [6 x [4 x [4 x i32]]]* @quant_coef, i64 0, i64 %idxprom
  %arrayidx8 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %arrayidx, i64 0, i64 0
  %arrayidx9 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx8, i64 0, i64 0
  %12 = load i32, i32* %arrayidx9, align 16
  %div10 = sdiv i32 %sub7, %12
  store i32 %div10, i32* %Thresh4x4, align 4
  %13 = load i32, i32* %Thresh4x4, align 4
  %conv = sitofp i32 %13 to float
  %div11 = fdiv float %conv, 0x403670A3E0000000
  store float %div11, float* @Quantize_step, align 4
  %14 = load float, float* @Quantize_step, align 4
  %mul = fmul float 2.560000e+02, %14
  store float %mul, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 7), align 4
  %15 = load float, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 7), align 4
  %mul12 = fmul float %15, 4.000000e+00
  store float %mul12, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 6), align 8
  %16 = load float, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 7), align 4
  %mul13 = fmul float %16, 4.000000e+00
  store float %mul13, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 5), align 4
  %17 = load float, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 5), align 4
  %mul14 = fmul float %17, 4.000000e+00
  store float %mul14, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 4), align 16
  %18 = load float, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 4), align 16
  %mul15 = fmul float %18, 4.000000e+00
  store float %mul15, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 3), align 4
  %19 = load float, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 4), align 16
  %mul16 = fmul float %19, 4.000000e+00
  store float %mul16, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 2), align 8
  %20 = load float, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 2), align 8
  %mul17 = fmul float %20, 4.000000e+00
  store float %mul17, float* getelementptr inbounds ([8 x float], [8 x float]* @Bsize, i64 0, i64 1), align 4
  %21 = load i32, i32* %canary
  %22 = icmp eq i32 %21, 1405924938
  br i1 %22, label %23, label %func_exit

23:                                               ; preds = %if.end, %func_exit
  ret void

func_exit:                                        ; preds = %if.end
  call void @detect_breach()
  br label %23
}

declare void @detect_breach()

declare i32 @get_rand()

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { nounwind readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 9.0.1 (git@github.com:llvm/llvm-project.git 9b2d207cf4b43cfc1a2b6940b3c06e50a1bd127f)"}
